
test1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000252d4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003be8  080254a8  080254a8  000354a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029090  08029090  000401e0  2**0
                  CONTENTS
  4 .ARM          00000008  08029090  08029090  00039090  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08029098  08029098  000401e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08029098  08029098  00039098  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  080290a0  080290a0  000390a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  080290a8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200000a0  08029148  000400a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000140  080291e8  00040140  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000bfe0  200001e0  08029288  000401e0  2**2
                  ALLOC
 12 ._user_heap_stack 00006000  2000c1c0  08029288  0004c1c0  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000401e0  2**0
                  CONTENTS, READONLY
 14 .debug_info   000aba1a  00000000  00000000  00040210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000e659  00000000  00000000  000ebc2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00004c00  00000000  00000000  000fa288  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 000049b0  00000000  00000000  000fee88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003777b  00000000  00000000  00103838  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00036126  00000000  00000000  0013afb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001710d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00015f2c  00000000  00000000  0017112c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e0 	.word	0x200001e0
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0802548c 	.word	0x0802548c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001e4 	.word	0x200001e4
 800020c:	0802548c 	.word	0x0802548c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <_Z6vprintPKcSt9__va_list>:

static uint8_t str1_;
static uint8_t str3_;

void vprint(const char *fmt, va_list argp)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b0b4      	sub	sp, #208	; 0xd0
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
    char string[200];
    if(0 < vsprintf(string,fmt,argp)) // build string
 8000ef6:	f107 0308 	add.w	r3, r7, #8
 8000efa:	683a      	ldr	r2, [r7, #0]
 8000efc:	6879      	ldr	r1, [r7, #4]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f023 fb56 	bl	80245b0 <vsiprintf>
 8000f04:	4603      	mov	r3, r0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	bfcc      	ite	gt
 8000f0a:	2301      	movgt	r3, #1
 8000f0c:	2300      	movle	r3, #0
 8000f0e:	b2db      	uxtb	r3, r3
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d00c      	beq.n	8000f2e <_Z6vprintPKcSt9__va_list+0x42>
    {
        //HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 0xffffff); // send message via UART
    	  HAL_UART_Transmit(&huart1, (uint8_t*)string, strlen(string), 10); // send message via UART
 8000f14:	f107 0308 	add.w	r3, r7, #8
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff f979 	bl	8000210 <strlen>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	b29a      	uxth	r2, r3
 8000f22:	f107 0108 	add.w	r1, r7, #8
 8000f26:	230a      	movs	r3, #10
 8000f28:	4803      	ldr	r0, [pc, #12]	; (8000f38 <_Z6vprintPKcSt9__va_list+0x4c>)
 8000f2a:	f00e fb21 	bl	800f570 <HAL_UART_Transmit>
    }
}
 8000f2e:	bf00      	nop
 8000f30:	37d0      	adds	r7, #208	; 0xd0
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	2000068c 	.word	0x2000068c

08000f3c <_Z7DprintfPKcz>:

void Dprintf(const char *fmt, ...) // custom printf() function
{
 8000f3c:	b40f      	push	{r0, r1, r2, r3}
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b082      	sub	sp, #8
 8000f42:	af00      	add	r7, sp, #0
    va_list argp;
    va_start(argp, fmt);
 8000f44:	f107 0314 	add.w	r3, r7, #20
 8000f48:	607b      	str	r3, [r7, #4]
    vprint(fmt, argp);
 8000f4a:	6879      	ldr	r1, [r7, #4]
 8000f4c:	6938      	ldr	r0, [r7, #16]
 8000f4e:	f7ff ffcd 	bl	8000eec <_Z6vprintPKcSt9__va_list>
    va_end(argp);
}
 8000f52:	bf00      	nop
 8000f54:	3708      	adds	r7, #8
 8000f56:	46bd      	mov	sp, r7
 8000f58:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8000f5c:	b004      	add	sp, #16
 8000f5e:	4770      	bx	lr

08000f60 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b082      	sub	sp, #8
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART1)
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	4a10      	ldr	r2, [pc, #64]	; (8000fb0 <HAL_UART_RxCpltCallback+0x50>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d110      	bne.n	8000f94 <HAL_UART_RxCpltCallback+0x34>
	{
		HAL_NVIC_DisableIRQ(USART1_IRQn); //Rx Callback 함수 Disable
 8000f72:	2025      	movs	r0, #37	; 0x25
 8000f74:	f00b f95a 	bl	800c22c <HAL_NVIC_DisableIRQ>
		HAL_UART_Transmit_IT(&huart1, &str1_, sizeof(str1_));
 8000f78:	2201      	movs	r2, #1
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <HAL_UART_RxCpltCallback+0x54>)
 8000f7c:	480e      	ldr	r0, [pc, #56]	; (8000fb8 <HAL_UART_RxCpltCallback+0x58>)
 8000f7e:	f00e fc3f 	bl	800f800 <HAL_UART_Transmit_IT>
		HAL_NVIC_EnableIRQ(USART1_IRQn);  //Rx callback 함수 enable
 8000f82:	2025      	movs	r0, #37	; 0x25
 8000f84:	f00b f944 	bl	800c210 <HAL_NVIC_EnableIRQ>
		HAL_UART_Receive_IT(&huart1, &str1_, sizeof(str1_));
 8000f88:	2201      	movs	r2, #1
 8000f8a:	490a      	ldr	r1, [pc, #40]	; (8000fb4 <HAL_UART_RxCpltCallback+0x54>)
 8000f8c:	480a      	ldr	r0, [pc, #40]	; (8000fb8 <HAL_UART_RxCpltCallback+0x58>)
 8000f8e:	f00e fc95 	bl	800f8bc <HAL_UART_Receive_IT>
	{
		//HAL_NVIC_DisableIRQ(USART3_IRQn); //Rx Callback 함수 Disable
		//HAL_NVIC_EnableIRQ(USART3_IRQn);  //Rx callback 함수 enable
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
	}
}
 8000f92:	e009      	b.n	8000fa8 <HAL_UART_RxCpltCallback+0x48>
	else if(huart->Instance == USART3)
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a08      	ldr	r2, [pc, #32]	; (8000fbc <HAL_UART_RxCpltCallback+0x5c>)
 8000f9a:	4293      	cmp	r3, r2
 8000f9c:	d104      	bne.n	8000fa8 <HAL_UART_RxCpltCallback+0x48>
		HAL_UART_Receive_IT(&huart3, &str3_, 1);
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	4907      	ldr	r1, [pc, #28]	; (8000fc0 <HAL_UART_RxCpltCallback+0x60>)
 8000fa2:	4808      	ldr	r0, [pc, #32]	; (8000fc4 <HAL_UART_RxCpltCallback+0x64>)
 8000fa4:	f00e fc8a 	bl	800f8bc <HAL_UART_Receive_IT>
}
 8000fa8:	bf00      	nop
 8000faa:	3708      	adds	r7, #8
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bd80      	pop	{r7, pc}
 8000fb0:	40011000 	.word	0x40011000
 8000fb4:	200001fc 	.word	0x200001fc
 8000fb8:	2000068c 	.word	0x2000068c
 8000fbc:	40004800 	.word	0x40004800
 8000fc0:	200001fd 	.word	0x200001fd
 8000fc4:	20000714 	.word	0x20000714

08000fc8 <_Z15Debug_Uart_Initv>:




void Debug_Uart_Init()
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, &str1_, 1); 	//for debugging
 8000fcc:	2201      	movs	r2, #1
 8000fce:	4905      	ldr	r1, [pc, #20]	; (8000fe4 <_Z15Debug_Uart_Initv+0x1c>)
 8000fd0:	4805      	ldr	r0, [pc, #20]	; (8000fe8 <_Z15Debug_Uart_Initv+0x20>)
 8000fd2:	f00e fc73 	bl	800f8bc <HAL_UART_Receive_IT>
	HAL_UART_Receive_IT(&huart3, &str3_, 1);	//for Controlling
 8000fd6:	2201      	movs	r2, #1
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <_Z15Debug_Uart_Initv+0x24>)
 8000fda:	4805      	ldr	r0, [pc, #20]	; (8000ff0 <_Z15Debug_Uart_Initv+0x28>)
 8000fdc:	f00e fc6e 	bl	800f8bc <HAL_UART_Receive_IT>
}
 8000fe0:	bf00      	nop
 8000fe2:	bd80      	pop	{r7, pc}
 8000fe4:	200001fc 	.word	0x200001fc
 8000fe8:	2000068c 	.word	0x2000068c
 8000fec:	200001fd 	.word	0x200001fd
 8000ff0:	20000714 	.word	0x20000714

08000ff4 <_Z10DebugDrivev>:
int a_= 2000;
int testpos= 100000;

//for uart1 debug
void DebugDrive()
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b086      	sub	sp, #24
 8000ff8:	af02      	add	r7, sp, #8
	int cmd = 0;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	60fb      	str	r3, [r7, #12]
	int cmd1 = str1_;
 8000ffe:	4b40      	ldr	r3, [pc, #256]	; (8001100 <_Z10DebugDrivev+0x10c>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	60bb      	str	r3, [r7, #8]
	int cmd2 = str3_;
 8001004:	4b3f      	ldr	r3, [pc, #252]	; (8001104 <_Z10DebugDrivev+0x110>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	607b      	str	r3, [r7, #4]
	int cmd3 = char_ethernet;
 800100a:	4b3f      	ldr	r3, [pc, #252]	; (8001108 <_Z10DebugDrivev+0x114>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	603b      	str	r3, [r7, #0]

	if (cmd1 != 0) cmd = cmd1;
 8001010:	68bb      	ldr	r3, [r7, #8]
 8001012:	2b00      	cmp	r3, #0
 8001014:	d002      	beq.n	800101c <_Z10DebugDrivev+0x28>
 8001016:	68bb      	ldr	r3, [r7, #8]
 8001018:	60fb      	str	r3, [r7, #12]
 800101a:	e00a      	b.n	8001032 <_Z10DebugDrivev+0x3e>
	else if (cmd2 !=0) cmd = cmd2;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <_Z10DebugDrivev+0x34>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	60fb      	str	r3, [r7, #12]
 8001026:	e004      	b.n	8001032 <_Z10DebugDrivev+0x3e>
	else if (cmd3 !=0) cmd = cmd3;
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	2b00      	cmp	r3, #0
 800102c:	d001      	beq.n	8001032 <_Z10DebugDrivev+0x3e>
 800102e:	683b      	ldr	r3, [r7, #0]
 8001030:	60fb      	str	r3, [r7, #12]

	switch(cmd)
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	3b31      	subs	r3, #49	; 0x31
 8001036:	2b08      	cmp	r3, #8
 8001038:	d853      	bhi.n	80010e2 <_Z10DebugDrivev+0xee>
 800103a:	a201      	add	r2, pc, #4	; (adr r2, 8001040 <_Z10DebugDrivev+0x4c>)
 800103c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001040:	08001065 	.word	0x08001065
 8001044:	0800107d 	.word	0x0800107d
 8001048:	08001095 	.word	0x08001095
 800104c:	080010a7 	.word	0x080010a7
 8001050:	080010bb 	.word	0x080010bb
 8001054:	080010c3 	.word	0x080010c3
 8001058:	080010cb 	.word	0x080010cb
 800105c:	080010d3 	.word	0x080010d3
 8001060:	080010db 	.word	0x080010db

		//case '4': SensorManager::GetInstance().PCV80Drive(); break;
		//case '5': SensorManager::GetInstance().CommonSensorDrive(); break;

		//can test
		case '1': bg95test.AbsPosCommand(1000, 1000, 1000, 100000); break;
 8001064:	4b29      	ldr	r3, [pc, #164]	; (800110c <_Z10DebugDrivev+0x118>)
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800106c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001070:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001074:	4826      	ldr	r0, [pc, #152]	; (8001110 <_Z10DebugDrivev+0x11c>)
 8001076:	f003 fe15 	bl	8004ca4 <_ZN4BG9513AbsPosCommandEimmi>
 800107a:	e033      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '2': bg95test.RelPosCommand(1000, 1000, 1000, 100000); break;
 800107c:	4b23      	ldr	r3, [pc, #140]	; (800110c <_Z10DebugDrivev+0x118>)
 800107e:	9300      	str	r3, [sp, #0]
 8001080:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001084:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001088:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800108c:	4820      	ldr	r0, [pc, #128]	; (8001110 <_Z10DebugDrivev+0x11c>)
 800108e:	f003 fe38 	bl	8004d02 <_ZN4BG9513RelPosCommandEimmi>
 8001092:	e027      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '3': bg95test.SubVelCommand(200, 1000, 1000); break;
 8001094:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001098:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800109c:	21c8      	movs	r1, #200	; 0xc8
 800109e:	481c      	ldr	r0, [pc, #112]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010a0:	f003 fe5e 	bl	8004d60 <_ZN4BG9513SubVelCommandEimm>
 80010a4:	e01e      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '4': bg95test.SubVelCommand(-200, 1000, 1000); break;
 80010a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80010aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80010ae:	f06f 01c7 	mvn.w	r1, #199	; 0xc7
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010b4:	f003 fe54 	bl	8004d60 <_ZN4BG9513SubVelCommandEimm>
 80010b8:	e014      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '5': bg95test.SetDirectionNormalCommand(); break;
 80010ba:	4815      	ldr	r0, [pc, #84]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010bc:	f003 ff17 	bl	8004eee <_ZN4BG9525SetDirectionNormalCommandEv>
 80010c0:	e010      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '6': bg95test.SetDirectionReverseCommand(); break;
 80010c2:	4813      	ldr	r0, [pc, #76]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010c4:	f003 ff2a 	bl	8004f1c <_ZN4BG9526SetDirectionReverseCommandEv>
 80010c8:	e00c      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		//case '6': bg95test.SetMaxVelocityCommand(a_); break;
		case '7': bg95test.Initialization(); break;
 80010ca:	4811      	ldr	r0, [pc, #68]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010cc:	f001 fc31 	bl	8002932 <_ZN4BG9514InitializationEv>
 80010d0:	e008      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '8': bg95test.ClearParamCommand(); break;
 80010d2:	480f      	ldr	r0, [pc, #60]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010d4:	f003 fe6d 	bl	8004db2 <_ZN4BG9517ClearParamCommandEv>
 80010d8:	e004      	b.n	80010e4 <_Z10DebugDrivev+0xf0>
		case '9': bg95test.StopMotorCommand(); break;
 80010da:	480d      	ldr	r0, [pc, #52]	; (8001110 <_Z10DebugDrivev+0x11c>)
 80010dc:	f003 fe78 	bl	8004dd0 <_ZN4BG9516StopMotorCommandEv>
 80010e0:	e000      	b.n	80010e4 <_Z10DebugDrivev+0xf0>

		default: break;
 80010e2:	bf00      	nop
 80010e4:	4b06      	ldr	r3, [pc, #24]	; (8001100 <_Z10DebugDrivev+0x10c>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	701a      	strb	r2, [r3, #0]
 80010ea:	4b06      	ldr	r3, [pc, #24]	; (8001104 <_Z10DebugDrivev+0x110>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
 80010f0:	4b05      	ldr	r3, [pc, #20]	; (8001108 <_Z10DebugDrivev+0x114>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	701a      	strb	r2, [r3, #0]
	}
	memset(&str1_, '\0', sizeof(str1_));
	memset(&str3_, '\0', sizeof(str3_));
	memset(&char_ethernet, '\0', sizeof(char_ethernet));
}
 80010f6:	bf00      	nop
 80010f8:	3710      	adds	r7, #16
 80010fa:	46bd      	mov	sp, r7
 80010fc:	bd80      	pop	{r7, pc}
 80010fe:	bf00      	nop
 8001100:	200001fc 	.word	0x200001fc
 8001104:	200001fd 	.word	0x200001fd
 8001108:	20000344 	.word	0x20000344
 800110c:	000186a0 	.word	0x000186a0
 8001110:	20001968 	.word	0x20001968

08001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>:
#include "common_sensor.h"


CommonSensor::CommonSensor(){}

CommonSensor::CommonSensor(uint16_t index, bool active_type, uint8_t max_filter_cnt,
 8001114:	b480      	push	{r7}
 8001116:	b083      	sub	sp, #12
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
 800111c:	4608      	mov	r0, r1
 800111e:	4611      	mov	r1, r2
 8001120:	461a      	mov	r2, r3
 8001122:	4603      	mov	r3, r0
 8001124:	807b      	strh	r3, [r7, #2]
 8001126:	460b      	mov	r3, r1
 8001128:	707b      	strb	r3, [r7, #1]
 800112a:	4613      	mov	r3, r2
 800112c:	703b      	strb	r3, [r7, #0]
		GPIO_TypeDef* GPIOx, uint32_t PinMask)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	2200      	movs	r2, #0
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2205      	movs	r2, #5
 8001138:	731a      	strb	r2, [r3, #12]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2200      	movs	r2, #0
 800113e:	735a      	strb	r2, [r3, #13]
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	739a      	strb	r2, [r3, #14]
{
	this->index_ = index;
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	887a      	ldrh	r2, [r7, #2]
 800114a:	801a      	strh	r2, [r3, #0]
	this->active_type_ = active_type;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	787a      	ldrb	r2, [r7, #1]
 8001150:	709a      	strb	r2, [r3, #2]
	this->max_filter_cnt_ = max_filter_cnt;
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	783a      	ldrb	r2, [r7, #0]
 8001156:	731a      	strb	r2, [r3, #12]
	this->GPIOx_ = GPIOx;
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	693a      	ldr	r2, [r7, #16]
 800115c:	605a      	str	r2, [r3, #4]
	this->PinMask_ = PinMask;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	697a      	ldr	r2, [r7, #20]
 8001162:	609a      	str	r2, [r3, #8]
}
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4618      	mov	r0, r3
 8001168:	370c      	adds	r7, #12
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr

08001172 <_ZN12CommonSensorD1Ev>:

CommonSensor::~CommonSensor(){}
 8001172:	b480      	push	{r7}
 8001174:	b083      	sub	sp, #12
 8001176:	af00      	add	r7, sp, #0
 8001178:	6078      	str	r0, [r7, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr

08001188 <_ZNK12CommonSensor13GetSensorDataEv>:


bool CommonSensor::GetSensorData() const {return this->output_;}
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	78db      	ldrb	r3, [r3, #3]
 8001194:	4618      	mov	r0, r3
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <_ZNK12CommonSensor14GetSensorIndexEv>:

uint16_t CommonSensor::GetSensorIndex() const {return this->index_;}
 80011a0:	b480      	push	{r7}
 80011a2:	b083      	sub	sp, #12
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	881b      	ldrh	r3, [r3, #0]
 80011ac:	4618      	mov	r0, r3
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr

080011b8 <_ZN12CommonSensor16CheckSensorValueEv>:


//use hal or ll function
bool CommonSensor::CheckSensorValue()
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
	if(HAL_GPIO_ReadPin(this->GPIOx_, this->PinMask_) == 1) (this->state) = 1;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	685a      	ldr	r2, [r3, #4]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	689b      	ldr	r3, [r3, #8]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4619      	mov	r1, r3
 80011cc:	4610      	mov	r0, r2
 80011ce:	f00c fca7 	bl	800db20 <HAL_GPIO_ReadPin>
 80011d2:	4603      	mov	r3, r0
 80011d4:	2b01      	cmp	r3, #1
 80011d6:	bf0c      	ite	eq
 80011d8:	2301      	moveq	r3, #1
 80011da:	2300      	movne	r3, #0
 80011dc:	b2db      	uxtb	r3, r3
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d003      	beq.n	80011ea <_ZN12CommonSensor16CheckSensorValueEv+0x32>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	2201      	movs	r2, #1
 80011e6:	739a      	strb	r2, [r3, #14]
 80011e8:	e002      	b.n	80011f0 <_ZN12CommonSensor16CheckSensorValueEv+0x38>
	else (this->state) = 0;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	2200      	movs	r2, #0
 80011ee:	739a      	strb	r2, [r3, #14]

	if(!active_type_) this->state = !(this->state);
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	789b      	ldrb	r3, [r3, #2]
 80011f4:	f083 0301 	eor.w	r3, r3, #1
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d006      	beq.n	800120c <_ZN12CommonSensor16CheckSensorValueEv+0x54>
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7b9b      	ldrb	r3, [r3, #14]
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2da      	uxtb	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	739a      	strb	r2, [r3, #14]
	return this->state;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	7b9b      	ldrb	r3, [r3, #14]
}
 8001210:	4618      	mov	r0, r3
 8001212:	3708      	adds	r7, #8
 8001214:	46bd      	mov	sp, r7
 8001216:	bd80      	pop	{r7, pc}

08001218 <_ZN12CommonSensor14IsInfoFilteredEv>:

bool CommonSensor::IsInfoFiltered()
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	7b5a      	ldrb	r2, [r3, #13]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	7b1b      	ldrb	r3, [r3, #12]
 8001228:	429a      	cmp	r2, r3
 800122a:	bf2c      	ite	cs
 800122c:	2301      	movcs	r3, #1
 800122e:	2300      	movcc	r3, #0
 8001230:	b2db      	uxtb	r3, r3
}
 8001232:	4618      	mov	r0, r3
 8001234:	370c      	adds	r7, #12
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <_ZN12CommonSensor13FilterCountUpEv>:

void CommonSensor::FilterCountUp()
{
 800123e:	b480      	push	{r7}
 8001240:	b083      	sub	sp, #12
 8001242:	af00      	add	r7, sp, #0
 8001244:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	7b5a      	ldrb	r2, [r3, #13]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7b1b      	ldrb	r3, [r3, #12]
 800124e:	429a      	cmp	r2, r3
 8001250:	d205      	bcs.n	800125e <_ZN12CommonSensor13FilterCountUpEv+0x20>
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	7b5b      	ldrb	r3, [r3, #13]
 8001256:	3301      	adds	r3, #1
 8001258:	b2da      	uxtb	r2, r3
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	735a      	strb	r2, [r3, #13]
}
 800125e:	bf00      	nop
 8001260:	370c      	adds	r7, #12
 8001262:	46bd      	mov	sp, r7
 8001264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001268:	4770      	bx	lr

0800126a <_ZN12CommonSensor19FilterStatusChangedEv>:

void CommonSensor::FilterStatusChanged(){this->now_filter_cnt_ = 0;}
 800126a:	b480      	push	{r7}
 800126c:	b083      	sub	sp, #12
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2200      	movs	r2, #0
 8001276:	735a      	strb	r2, [r3, #13]
 8001278:	bf00      	nop
 800127a:	370c      	adds	r7, #12
 800127c:	46bd      	mov	sp, r7
 800127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001282:	4770      	bx	lr

08001284 <_ZN12CommonSensor5DriveEv>:


bool CommonSensor::Drive()
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b084      	sub	sp, #16
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
	bool prev_val = this->state;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	7b9b      	ldrb	r3, [r3, #14]
 8001290:	73fb      	strb	r3, [r7, #15]
	bool now_val = CheckSensorValue();
 8001292:	6878      	ldr	r0, [r7, #4]
 8001294:	f7ff ff90 	bl	80011b8 <_ZN12CommonSensor16CheckSensorValueEv>
 8001298:	4603      	mov	r3, r0
 800129a:	73bb      	strb	r3, [r7, #14]


	//1. Check Error status
	if(prev_val != now_val)
 800129c:	7bfa      	ldrb	r2, [r7, #15]
 800129e:	7bbb      	ldrb	r3, [r7, #14]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	d008      	beq.n	80012b6 <_ZN12CommonSensor5DriveEv+0x32>
	{
		FilterStatusChanged();
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f7ff ffe0 	bl	800126a <_ZN12CommonSensor19FilterStatusChangedEv>
		this->output_ = prev_val;
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	7bfa      	ldrb	r2, [r7, #15]
 80012ae:	70da      	strb	r2, [r3, #3]
		return this->output_;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	78db      	ldrb	r3, [r3, #3]
 80012b4:	e016      	b.n	80012e4 <_ZN12CommonSensor5DriveEv+0x60>
	}

	//2. wait until state is stabled(normal or error)
	if(!IsInfoFiltered())
 80012b6:	6878      	ldr	r0, [r7, #4]
 80012b8:	f7ff ffae 	bl	8001218 <_ZN12CommonSensor14IsInfoFilteredEv>
 80012bc:	4603      	mov	r3, r0
 80012be:	f083 0301 	eor.w	r3, r3, #1
 80012c2:	b2db      	uxtb	r3, r3
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d008      	beq.n	80012da <_ZN12CommonSensor5DriveEv+0x56>
	{
		FilterCountUp();
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f7ff ffb8 	bl	800123e <_ZN12CommonSensor13FilterCountUpEv>
		this->output_ = prev_val;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	7bfa      	ldrb	r2, [r7, #15]
 80012d2:	70da      	strb	r2, [r3, #3]
		return this->output_;
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	78db      	ldrb	r3, [r3, #3]
 80012d8:	e004      	b.n	80012e4 <_ZN12CommonSensor5DriveEv+0x60>
	}

	this->output_ = now_val;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	7bba      	ldrb	r2, [r7, #14]
 80012de:	70da      	strb	r2, [r3, #3]
	return this->output_;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	78db      	ldrb	r3, [r3, #3]
}
 80012e4:	4618      	mov	r0, r3
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <_sbrk_r>:
    static int totalBytesProvidedBySBRK = 0;
#endif
extern char __HeapBase, __HeapLimit;  // make sure to define these symbols in linker LD command file

//! _sbrk_r version supporting reentrant newlib (depends upon above symbols defined by linker control file).
void * _sbrk_r(struct _reent *pReent, int incr) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b084      	sub	sp, #16
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
    #ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
      UBaseType_t usis; // saved interrupt status
    #endif
    static char *currentHeapEnd = &__HeapBase;
    #ifdef STM_VERSION // Use STM CubeMX LD symbols for heap
      if(TotalHeapSize==0) {
 80012f6:	4b24      	ldr	r3, [pc, #144]	; (8001388 <_sbrk_r+0x9c>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d10e      	bne.n	800131c <_sbrk_r+0x30>
        TotalHeapSize = heapBytesRemaining = (int)((&__HeapLimit)-(&__HeapBase))-ISR_STACK_LENGTH_BYTES;
 80012fe:	4a23      	ldr	r2, [pc, #140]	; (800138c <_sbrk_r+0xa0>)
 8001300:	4b23      	ldr	r3, [pc, #140]	; (8001390 <_sbrk_r+0xa4>)
 8001302:	1ad3      	subs	r3, r2, r3
 8001304:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001308:	4a22      	ldr	r2, [pc, #136]	; (8001394 <_sbrk_r+0xa8>)
 800130a:	6013      	str	r3, [r2, #0]
 800130c:	4a1f      	ldr	r2, [pc, #124]	; (800138c <_sbrk_r+0xa0>)
 800130e:	4b20      	ldr	r3, [pc, #128]	; (8001390 <_sbrk_r+0xa4>)
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	f5a3 7300 	sub.w	r3, r3, #512	; 0x200
 8001316:	461a      	mov	r2, r3
 8001318:	4b1b      	ldr	r3, [pc, #108]	; (8001388 <_sbrk_r+0x9c>)
 800131a:	601a      	str	r2, [r3, #0]
      };
    #endif
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800131c:	f012 fff0 	bl	8014300 <xTaskGetSchedulerState>
 8001320:	4603      	mov	r3, r0
            stack_ptr   :  // Before scheduler is started, limit is stack pointer (risky!)
 8001322:	2b01      	cmp	r3, #1
 8001324:	d101      	bne.n	800132a <_sbrk_r+0x3e>
 8001326:	466b      	mov	r3, sp
 8001328:	e000      	b.n	800132c <_sbrk_r+0x40>
 800132a:	4b1b      	ldr	r3, [pc, #108]	; (8001398 <_sbrk_r+0xac>)
    char* limit = (xTaskGetSchedulerState()==taskSCHEDULER_NOT_STARTED) ?
 800132c:	60fb      	str	r3, [r7, #12]
            &__HeapLimit-ISR_STACK_LENGTH_BYTES;  // Once running, OK to reuse all remaining RAM except ISR stack (MSP) stack
    DRN_ENTER_CRITICAL_SECTION(usis);
 800132e:	f012 fc0d 	bl	8013b4c <vTaskSuspendAll>
    char *previousHeapEnd = currentHeapEnd;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <_sbrk_r+0xb0>)
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	60bb      	str	r3, [r7, #8]
    if (currentHeapEnd + incr > limit) {
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <_sbrk_r+0xb0>)
 800133a:	681a      	ldr	r2, [r3, #0]
 800133c:	683b      	ldr	r3, [r7, #0]
 800133e:	4413      	add	r3, r2
 8001340:	68fa      	ldr	r2, [r7, #12]
 8001342:	429a      	cmp	r2, r3
 8001344:	d207      	bcs.n	8001356 <_sbrk_r+0x6a>
            // If you want to alert debugger or halt...
            // WARNING: brkpt instruction may prevent watchdog operation...
            while(1) { __asm("bkpt #0"); }; // Stop in GUI as if at a breakpoint (if debugging, otherwise loop forever)
        #else
            // Default, if you prefer to believe your application will gracefully trap out-of-memory...
            pReent->_errno = ENOMEM; // newlib's thread-specific errno
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	220c      	movs	r2, #12
 800134a:	601a      	str	r2, [r3, #0]
            DRN_EXIT_CRITICAL_SECTION(usis);
 800134c:	f012 fc0c 	bl	8013b68 <xTaskResumeAll>
        #endif
        return (char *)-1; // the malloc-family routine that called sbrk will return 0
 8001350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001354:	e014      	b.n	8001380 <_sbrk_r+0x94>
    }
    // 'incr' of memory is available: update accounting and return it.
    currentHeapEnd += incr;
 8001356:	4b11      	ldr	r3, [pc, #68]	; (800139c <_sbrk_r+0xb0>)
 8001358:	681a      	ldr	r2, [r3, #0]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	4413      	add	r3, r2
 800135e:	4a0f      	ldr	r2, [pc, #60]	; (800139c <_sbrk_r+0xb0>)
 8001360:	6013      	str	r3, [r2, #0]
    heapBytesRemaining -= incr;
 8001362:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <_sbrk_r+0xa8>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	1ad3      	subs	r3, r2, r3
 800136a:	4a0a      	ldr	r2, [pc, #40]	; (8001394 <_sbrk_r+0xa8>)
 800136c:	6013      	str	r3, [r2, #0]
    #ifndef NDEBUG
        totalBytesProvidedBySBRK += incr;
 800136e:	4b0c      	ldr	r3, [pc, #48]	; (80013a0 <_sbrk_r+0xb4>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	683b      	ldr	r3, [r7, #0]
 8001374:	4413      	add	r3, r2
 8001376:	4a0a      	ldr	r2, [pc, #40]	; (80013a0 <_sbrk_r+0xb4>)
 8001378:	6013      	str	r3, [r2, #0]
    #endif
    DRN_EXIT_CRITICAL_SECTION(usis);
 800137a:	f012 fbf5 	bl	8013b68 <xTaskResumeAll>
    return (char *) previousHeapEnd;
 800137e:	68bb      	ldr	r3, [r7, #8]
}
 8001380:	4618      	mov	r0, r3
 8001382:	3710      	adds	r7, #16
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000204 	.word	0x20000204
 800138c:	20050000 	.word	0x20050000
 8001390:	2000c1c0 	.word	0x2000c1c0
 8001394:	20000200 	.word	0x20000200
 8001398:	2004fe00 	.word	0x2004fe00
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000208 	.word	0x20000208

080013a4 <__malloc_lock>:
char * _sbrk(int incr) { return sbrk(incr); };

#ifdef MALLOCS_INSIDE_ISRs // block interrupts during free-storage use
  static UBaseType_t malLock_uxSavedInterruptStatus;
#endif
void __malloc_lock(struct _reent *r)     {
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b086      	sub	sp, #24
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
{
uint32_t ulCurrentInterrupt;
BaseType_t xReturn;

	/* Obtain the number of the currently executing interrupt. */
	__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80013ac:	f3ef 8305 	mrs	r3, IPSR
 80013b0:	613b      	str	r3, [r7, #16]

	if( ulCurrentInterrupt == 0 )
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d102      	bne.n	80013be <__malloc_lock+0x1a>
	{
		xReturn = pdFALSE;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
 80013bc:	e001      	b.n	80013c2 <__malloc_lock+0x1e>
	}
	else
	{
		xReturn = pdTRUE;
 80013be:	2301      	movs	r3, #1
 80013c0:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 80013c2:	68fb      	ldr	r3, [r7, #12]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_ENTER_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    bool insideAnISR = xPortIsInsideInterrupt();
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	bf14      	ite	ne
 80013c8:	2301      	movne	r3, #1
 80013ca:	2300      	moveq	r3, #0
 80013cc:	75fb      	strb	r3, [r7, #23]
    configASSERT( !insideAnISR ); // Make damn sure no more mallocs inside ISRs!!
 80013ce:	7dfb      	ldrb	r3, [r7, #23]
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d00c      	beq.n	80013ee <__malloc_lock+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80013d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80013d8:	b672      	cpsid	i
 80013da:	f383 8811 	msr	BASEPRI, r3
 80013de:	f3bf 8f6f 	isb	sy
 80013e2:	f3bf 8f4f 	dsb	sy
 80013e6:	b662      	cpsie	i
 80013e8:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80013ea:	bf00      	nop
 80013ec:	e7fe      	b.n	80013ec <__malloc_lock+0x48>
    vTaskSuspendAll();
 80013ee:	f012 fbad 	bl	8013b4c <vTaskSuspendAll>
  #endif
};
 80013f2:	bf00      	nop
 80013f4:	3718      	adds	r7, #24
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}

080013fa <__malloc_unlock>:
void __malloc_unlock(struct _reent *r)   {
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
  #if defined(MALLOCS_INSIDE_ISRs)
    DRN_EXIT_CRITICAL_SECTION(malLock_uxSavedInterruptStatus);
  #else
    (void)xTaskResumeAll();
 8001402:	f012 fbb1 	bl	8013b68 <xTaskResumeAll>
  #endif
};
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}

0800140e <pvPortMalloc>:

// ================================================================================================
// Implement FreeRTOS's memory API using newlib-provided malloc family.
// ================================================================================================

void *pvPortMalloc( size_t xSize ) PRIVILEGED_FUNCTION {
 800140e:	b580      	push	{r7, lr}
 8001410:	b084      	sub	sp, #16
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
    void *p = malloc(xSize);
 8001416:	6878      	ldr	r0, [r7, #4]
 8001418:	f022 fe0a 	bl	8024030 <malloc>
 800141c:	4603      	mov	r3, r0
 800141e:	60fb      	str	r3, [r7, #12]
    return p;
 8001420:	68fb      	ldr	r3, [r7, #12]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}

0800142a <vPortFree>:
void vPortFree( void *pv ) PRIVILEGED_FUNCTION {
 800142a:	b580      	push	{r7, lr}
 800142c:	b082      	sub	sp, #8
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
    free(pv);
 8001432:	6878      	ldr	r0, [r7, #4]
 8001434:	f022 fe04 	bl	8024040 <free>
};
 8001438:	bf00      	nop
 800143a:	3708      	adds	r7, #8
 800143c:	46bd      	mov	sp, r7
 800143e:	bd80      	pop	{r7, pc}

08001440 <_ZL16TcpServerInitSeqv>:

/**** Send RESPONSE every time the client sends some data ******/


static int TcpServerInitSeq()
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
	err_t err;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8001446:	2200      	movs	r2, #0
 8001448:	2100      	movs	r1, #0
 800144a:	2010      	movs	r0, #16
 800144c:	f013 fbf0 	bl	8014c30 <netconn_new_with_proto_and_callback>
 8001450:	4603      	mov	r3, r0
 8001452:	4a14      	ldr	r2, [pc, #80]	; (80014a4 <_ZL16TcpServerInitSeqv+0x64>)
 8001454:	6013      	str	r3, [r2, #0]

	if (conn == NULL)
 8001456:	4b13      	ldr	r3, [pc, #76]	; (80014a4 <_ZL16TcpServerInitSeqv+0x64>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	2b00      	cmp	r3, #0
 800145c:	d107      	bne.n	800146e <_ZL16TcpServerInitSeqv+0x2e>
	{
		netconn_delete(conn);
 800145e:	4b11      	ldr	r3, [pc, #68]	; (80014a4 <_ZL16TcpServerInitSeqv+0x64>)
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	4618      	mov	r0, r3
 8001464:	f013 fc82 	bl	8014d6c <netconn_delete>
		return -1;
 8001468:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800146c:	e016      	b.n	800149c <_ZL16TcpServerInitSeqv+0x5c>
	}

	/* Bind connection to the port number 8. */
	err = netconn_bind(conn, IP_ADDR_ANY, ServerPort);
 800146e:	4b0d      	ldr	r3, [pc, #52]	; (80014a4 <_ZL16TcpServerInitSeqv+0x64>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	220a      	movs	r2, #10
 8001474:	490c      	ldr	r1, [pc, #48]	; (80014a8 <_ZL16TcpServerInitSeqv+0x68>)
 8001476:	4618      	mov	r0, r3
 8001478:	f013 fc94 	bl	8014da4 <netconn_bind>
 800147c:	4603      	mov	r3, r0
 800147e:	71fb      	strb	r3, [r7, #7]

	if (err != ERR_OK) return -1;
 8001480:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d002      	beq.n	800148e <_ZL16TcpServerInitSeqv+0x4e>
 8001488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800148c:	e006      	b.n	800149c <_ZL16TcpServerInitSeqv+0x5c>

	/* Tell connection to go into listening mode. */
	netconn_listen(conn);
 800148e:	4b05      	ldr	r3, [pc, #20]	; (80014a4 <_ZL16TcpServerInitSeqv+0x64>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	21ff      	movs	r1, #255	; 0xff
 8001494:	4618      	mov	r0, r3
 8001496:	f013 fcf5 	bl	8014e84 <netconn_listen_with_backlog>

	/*Successfully Initialized*/
	return 0;
 800149a:	2300      	movs	r3, #0
}
 800149c:	4618      	mov	r0, r3
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	2000020c 	.word	0x2000020c
 80014a8:	08028e88 	.word	0x08028e88

080014ac <_ZL17TcpServerDriveSeqv>:

static int TcpServerDriveSeq()
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b084      	sub	sp, #16
 80014b0:	af02      	add	r7, sp, #8
	err_t accept_err;

	/* Grab new connection. */
	accept_err = netconn_accept(conn, &newconn);
 80014b2:	4b34      	ldr	r3, [pc, #208]	; (8001584 <_ZL17TcpServerDriveSeqv+0xd8>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4934      	ldr	r1, [pc, #208]	; (8001588 <_ZL17TcpServerDriveSeqv+0xdc>)
 80014b8:	4618      	mov	r0, r3
 80014ba:	f013 fd0f 	bl	8014edc <netconn_accept>
 80014be:	4603      	mov	r3, r0
 80014c0:	71fb      	strb	r3, [r7, #7]

	/* Process the new connection. */
	if(accept_err == ERR_OK)
 80014c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d157      	bne.n	800157a <_ZL17TcpServerDriveSeqv+0xce>
	{
		/* receive the data from the client */
		while (netconn_recv(newconn, &buf) == ERR_OK)
 80014ca:	4b2f      	ldr	r3, [pc, #188]	; (8001588 <_ZL17TcpServerDriveSeqv+0xdc>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	492f      	ldr	r1, [pc, #188]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 80014d0:	4618      	mov	r0, r3
 80014d2:	f013 ff0b 	bl	80152ec <netconn_recv>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	bf0c      	ite	eq
 80014dc:	2301      	moveq	r3, #1
 80014de:	2300      	movne	r3, #0
 80014e0:	b2db      	uxtb	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d03f      	beq.n	8001566 <_ZL17TcpServerDriveSeqv+0xba>
		{
			/* If there is some data remaining to be sent, the following process will continue */
			do
			{
				strncpy (msg, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 80014e6:	4b29      	ldr	r3, [pc, #164]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	6859      	ldr	r1, [r3, #4]
 80014ee:	4b27      	ldr	r3, [pc, #156]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	895b      	ldrh	r3, [r3, #10]
 80014f6:	461a      	mov	r2, r3
 80014f8:	4825      	ldr	r0, [pc, #148]	; (8001590 <_ZL17TcpServerDriveSeqv+0xe4>)
 80014fa:	f023 f830 	bl	802455e <strncpy>

				//for test debug
				strncpy (char_ethernet, (char* )buf->p->payload, buf->p->len);   // get the message from the client
 80014fe:	4b23      	ldr	r3, [pc, #140]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	6859      	ldr	r1, [r3, #4]
 8001506:	4b21      	ldr	r3, [pc, #132]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	895b      	ldrh	r3, [r3, #10]
 800150e:	461a      	mov	r2, r3
 8001510:	4820      	ldr	r0, [pc, #128]	; (8001594 <_ZL17TcpServerDriveSeqv+0xe8>)
 8001512:	f023 f824 	bl	802455e <strncpy>


				*/
				// Or modify the message received, so that we can send it back to the client
				//response
				int len = sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 8001516:	4a1e      	ldr	r2, [pc, #120]	; (8001590 <_ZL17TcpServerDriveSeqv+0xe4>)
 8001518:	491f      	ldr	r1, [pc, #124]	; (8001598 <_ZL17TcpServerDriveSeqv+0xec>)
 800151a:	4820      	ldr	r0, [pc, #128]	; (800159c <_ZL17TcpServerDriveSeqv+0xf0>)
 800151c:	f022 ffbc 	bl	8024498 <siprintf>
 8001520:	6038      	str	r0, [r7, #0]

				netconn_write(newconn, smsg, len, NETCONN_COPY);  // send the message back to the client
 8001522:	4b19      	ldr	r3, [pc, #100]	; (8001588 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001524:	6818      	ldr	r0, [r3, #0]
 8001526:	683a      	ldr	r2, [r7, #0]
 8001528:	2300      	movs	r3, #0
 800152a:	9300      	str	r3, [sp, #0]
 800152c:	2301      	movs	r3, #1
 800152e:	491b      	ldr	r1, [pc, #108]	; (800159c <_ZL17TcpServerDriveSeqv+0xf0>)
 8001530:	f013 ff84 	bl	801543c <netconn_write_partly>
				memset (msg, '\0', 100);  // clear the buffer
 8001534:	2264      	movs	r2, #100	; 0x64
 8001536:	2100      	movs	r1, #0
 8001538:	4815      	ldr	r0, [pc, #84]	; (8001590 <_ZL17TcpServerDriveSeqv+0xe4>)
 800153a:	f022 fdc1 	bl	80240c0 <memset>
			}
			while (netbuf_next(buf) >0);
 800153e:	4b13      	ldr	r3, [pc, #76]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4618      	mov	r0, r3
 8001544:	f015 fe92 	bl	801726c <netbuf_next>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	bfcc      	ite	gt
 800154e:	2301      	movgt	r3, #1
 8001550:	2300      	movle	r3, #0
 8001552:	b2db      	uxtb	r3, r3
 8001554:	2b00      	cmp	r3, #0
 8001556:	d000      	beq.n	800155a <_ZL17TcpServerDriveSeqv+0xae>
			do
 8001558:	e7c5      	b.n	80014e6 <_ZL17TcpServerDriveSeqv+0x3a>

			netbuf_delete(buf);
 800155a:	4b0c      	ldr	r3, [pc, #48]	; (800158c <_ZL17TcpServerDriveSeqv+0xe0>)
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	4618      	mov	r0, r3
 8001560:	f015 fe1a 	bl	8017198 <netbuf_delete>
		while (netconn_recv(newconn, &buf) == ERR_OK)
 8001564:	e7b1      	b.n	80014ca <_ZL17TcpServerDriveSeqv+0x1e>
		}
		/* Close connection and discard connection identifier. */
		netconn_close(newconn);
 8001566:	4b08      	ldr	r3, [pc, #32]	; (8001588 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	4618      	mov	r0, r3
 800156c:	f014 f868 	bl	8015640 <netconn_close>
		netconn_delete(newconn);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <_ZL17TcpServerDriveSeqv+0xdc>)
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	4618      	mov	r0, r3
 8001576:	f013 fbf9 	bl	8014d6c <netconn_delete>
	}
	return 0;
 800157a:	2300      	movs	r3, #0
}
 800157c:	4618      	mov	r0, r3
 800157e:	3708      	adds	r7, #8
 8001580:	46bd      	mov	sp, r7
 8001582:	bd80      	pop	{r7, pc}
 8001584:	2000020c 	.word	0x2000020c
 8001588:	20000210 	.word	0x20000210
 800158c:	20000214 	.word	0x20000214
 8001590:	20000218 	.word	0x20000218
 8001594:	20000344 	.word	0x20000344
 8001598:	080254a8 	.word	0x080254a8
 800159c:	2000027c 	.word	0x2000027c

080015a0 <_ZL15TcpServerThreadPv>:




static void TcpServerThread(void *arg)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b082      	sub	sp, #8
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
	TcpServerInitSeq();
 80015a8:	f7ff ff4a 	bl	8001440 <_ZL16TcpServerInitSeqv>

	TcpServerDriveSeq();
 80015ac:	f7ff ff7e 	bl	80014ac <_ZL17TcpServerDriveSeqv>

	//if out of TcpServerDriveSeq(); it means error occur
}
 80015b0:	bf00      	nop
 80015b2:	3708      	adds	r7, #8
 80015b4:	46bd      	mov	sp, r7
 80015b6:	bd80      	pop	{r7, pc}

080015b8 <_Z13TcpServerInitv>:



void TcpServerInit(void)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b082      	sub	sp, #8
 80015bc:	af02      	add	r7, sp, #8
  sys_thread_new("TcpServerThread", TcpServerThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80015be:	2300      	movs	r3, #0
 80015c0:	9300      	str	r3, [sp, #0]
 80015c2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80015c6:	2200      	movs	r2, #0
 80015c8:	4903      	ldr	r1, [pc, #12]	; (80015d8 <_Z13TcpServerInitv+0x20>)
 80015ca:	4804      	ldr	r0, [pc, #16]	; (80015dc <_Z13TcpServerInitv+0x24>)
 80015cc:	f021 fba6 	bl	8022d1c <sys_thread_new>
}
 80015d0:	bf00      	nop
 80015d2:	46bd      	mov	sp, r7
 80015d4:	bd80      	pop	{r7, pc}
 80015d6:	bf00      	nop
 80015d8:	080015a1 	.word	0x080015a1
 80015dc:	080254c8 	.word	0x080254c8

080015e0 <_Z7udpsendPc>:
/*------------------------------------Client-----------------------------------------*/
/*-----------------------------------------------------------------------------------*/

/*-------UDP Send function to send the data to the server-------------*/
void udpsend (char *data)
{
 80015e0:	b590      	push	{r4, r7, lr}
 80015e2:	b083      	sub	sp, #12
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	6078      	str	r0, [r7, #4]
	buf = netbuf_new();   // Create a new netbuf
 80015e8:	f015 fdc2 	bl	8017170 <netbuf_new>
 80015ec:	4603      	mov	r3, r0
 80015ee:	4a0f      	ldr	r2, [pc, #60]	; (800162c <_Z7udpsendPc+0x4c>)
 80015f0:	6013      	str	r3, [r2, #0]
	netbuf_ref(buf, data, strlen(data));  // refer the netbuf to the data to be sent
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <_Z7udpsendPc+0x4c>)
 80015f4:	681c      	ldr	r4, [r3, #0]
 80015f6:	6878      	ldr	r0, [r7, #4]
 80015f8:	f7fe fe0a 	bl	8000210 <strlen>
 80015fc:	4603      	mov	r3, r0
 80015fe:	b29b      	uxth	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	4620      	mov	r0, r4
 8001606:	f015 fde7 	bl	80171d8 <netbuf_ref>
	netconn_send(conn,buf);  // send the netbuf to the client
 800160a:	4b09      	ldr	r3, [pc, #36]	; (8001630 <_Z7udpsendPc+0x50>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a07      	ldr	r2, [pc, #28]	; (800162c <_Z7udpsendPc+0x4c>)
 8001610:	6812      	ldr	r2, [r2, #0]
 8001612:	4611      	mov	r1, r2
 8001614:	4618      	mov	r0, r3
 8001616:	f013 fee3 	bl	80153e0 <netconn_send>
	netbuf_delete(buf);  // delete the netbuf
 800161a:	4b04      	ldr	r3, [pc, #16]	; (800162c <_Z7udpsendPc+0x4c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	4618      	mov	r0, r3
 8001620:	f015 fdba 	bl	8017198 <netbuf_delete>
}
 8001624:	bf00      	nop
 8001626:	370c      	adds	r7, #12
 8001628:	46bd      	mov	sp, r7
 800162a:	bd90      	pop	{r4, r7, pc}
 800162c:	200003ac 	.word	0x200003ac
 8001630:	200003a8 	.word	0x200003a8

08001634 <_ZL15UdpClientThreadPv>:



static void UdpClientThread(void *arg)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
	err_t err, recv_err;
	ip_addr_t dest_addr;
	/* Create a new connection identifier */
	conn = netconn_new(NETCONN_UDP);
 800163c:	2200      	movs	r2, #0
 800163e:	2100      	movs	r1, #0
 8001640:	2020      	movs	r0, #32
 8001642:	f013 faf5 	bl	8014c30 <netconn_new_with_proto_and_callback>
 8001646:	4603      	mov	r3, r0
 8001648:	4a2d      	ldr	r2, [pc, #180]	; (8001700 <_ZL15UdpClientThreadPv+0xcc>)
 800164a:	6013      	str	r3, [r2, #0]

	if (conn!= NULL)
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <_ZL15UdpClientThreadPv+0xcc>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	2b00      	cmp	r3, #0
 8001652:	d04c      	beq.n	80016ee <_ZL15UdpClientThreadPv+0xba>
	{
		/* Bind connection to the port 7 */
		err = netconn_bind(conn, IP_ADDR_ANY, ClientPort);
 8001654:	4b2a      	ldr	r3, [pc, #168]	; (8001700 <_ZL15UdpClientThreadPv+0xcc>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2208      	movs	r2, #8
 800165a:	492a      	ldr	r1, [pc, #168]	; (8001704 <_ZL15UdpClientThreadPv+0xd0>)
 800165c:	4618      	mov	r0, r3
 800165e:	f013 fba1 	bl	8014da4 <netconn_bind>
 8001662:	4603      	mov	r3, r0
 8001664:	73fb      	strb	r3, [r7, #15]
		if (err == ERR_OK)
 8001666:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d144      	bne.n	80016f8 <_ZL15UdpClientThreadPv+0xc4>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 1, 25);
 800166e:	4b26      	ldr	r3, [pc, #152]	; (8001708 <_ZL15UdpClientThreadPv+0xd4>)
 8001670:	60bb      	str	r3, [r7, #8]
			/* connect to the destination (server) at port 8 */
			err = netconn_connect(conn, &dest_addr, ServerPort);
 8001672:	4b23      	ldr	r3, [pc, #140]	; (8001700 <_ZL15UdpClientThreadPv+0xcc>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f107 0108 	add.w	r1, r7, #8
 800167a:	2207      	movs	r2, #7
 800167c:	4618      	mov	r0, r3
 800167e:	f013 fbc9 	bl	8014e14 <netconn_connect>
 8001682:	4603      	mov	r3, r0
 8001684:	73fb      	strb	r3, [r7, #15]
			if (err == ERR_OK)
 8001686:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d134      	bne.n	80016f8 <_ZL15UdpClientThreadPv+0xc4>
			{
				/* Got into infinite loop after initialisation */
				for (;;)
				{
						/* Receive data from the server */
						recv_err = netconn_recv(conn, &rxbuf);
 800168e:	4b1c      	ldr	r3, [pc, #112]	; (8001700 <_ZL15UdpClientThreadPv+0xcc>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	491e      	ldr	r1, [pc, #120]	; (800170c <_ZL15UdpClientThreadPv+0xd8>)
 8001694:	4618      	mov	r0, r3
 8001696:	f013 fe29 	bl	80152ec <netconn_recv>
 800169a:	4603      	mov	r3, r0
 800169c:	73bb      	strb	r3, [r7, #14]
						if (recv_err == ERR_OK)
 800169e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f3      	bne.n	800168e <_ZL15UdpClientThreadPv+0x5a>
						{
							strncpy (msg, (char *) rxbuf->p->payload, rxbuf->p->len);  // get the message from the client
 80016a6:	4b19      	ldr	r3, [pc, #100]	; (800170c <_ZL15UdpClientThreadPv+0xd8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	6859      	ldr	r1, [r3, #4]
 80016ae:	4b17      	ldr	r3, [pc, #92]	; (800170c <_ZL15UdpClientThreadPv+0xd8>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	895b      	ldrh	r3, [r3, #10]
 80016b6:	461a      	mov	r2, r3
 80016b8:	4815      	ldr	r0, [pc, #84]	; (8001710 <_ZL15UdpClientThreadPv+0xdc>)
 80016ba:	f022 ff50 	bl	802455e <strncpy>
							/* copy the data into our buffer (smsg) */
							sprintf (smsg, "\"%s\" was sent by the Client\n", msg);
 80016be:	4a14      	ldr	r2, [pc, #80]	; (8001710 <_ZL15UdpClientThreadPv+0xdc>)
 80016c0:	4914      	ldr	r1, [pc, #80]	; (8001714 <_ZL15UdpClientThreadPv+0xe0>)
 80016c2:	4815      	ldr	r0, [pc, #84]	; (8001718 <_ZL15UdpClientThreadPv+0xe4>)
 80016c4:	f022 fee8 	bl	8024498 <siprintf>
							udpsend(smsg);  // send the message to the server
 80016c8:	4813      	ldr	r0, [pc, #76]	; (8001718 <_ZL15UdpClientThreadPv+0xe4>)
 80016ca:	f7ff ff89 	bl	80015e0 <_Z7udpsendPc>
							netbuf_delete(rxbuf);  // delete the netbuf
 80016ce:	4b0f      	ldr	r3, [pc, #60]	; (800170c <_ZL15UdpClientThreadPv+0xd8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	4618      	mov	r0, r3
 80016d4:	f015 fd60 	bl	8017198 <netbuf_delete>
							memset(msg, '\0', sizeof(msg));
 80016d8:	2264      	movs	r2, #100	; 0x64
 80016da:	2100      	movs	r1, #0
 80016dc:	480c      	ldr	r0, [pc, #48]	; (8001710 <_ZL15UdpClientThreadPv+0xdc>)
 80016de:	f022 fcef 	bl	80240c0 <memset>
							memset(msg, '\0', sizeof(smsg));
 80016e2:	22c8      	movs	r2, #200	; 0xc8
 80016e4:	2100      	movs	r1, #0
 80016e6:	480a      	ldr	r0, [pc, #40]	; (8001710 <_ZL15UdpClientThreadPv+0xdc>)
 80016e8:	f022 fcea 	bl	80240c0 <memset>
						recv_err = netconn_recv(conn, &rxbuf);
 80016ec:	e7cf      	b.n	800168e <_ZL15UdpClientThreadPv+0x5a>
		}
	}

	else
	{
		netconn_delete(conn);
 80016ee:	4b04      	ldr	r3, [pc, #16]	; (8001700 <_ZL15UdpClientThreadPv+0xcc>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4618      	mov	r0, r3
 80016f4:	f013 fb3a 	bl	8014d6c <netconn_delete>
	}
}
 80016f8:	bf00      	nop
 80016fa:	3710      	adds	r7, #16
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200003a8 	.word	0x200003a8
 8001704:	08028e88 	.word	0x08028e88
 8001708:	1901a8c0 	.word	0x1901a8c0
 800170c:	200003b0 	.word	0x200003b0
 8001710:	200003b4 	.word	0x200003b4
 8001714:	08025538 	.word	0x08025538
 8001718:	20000418 	.word	0x20000418

0800171c <_Z13UdpClientInitv>:
	}
}
*/

void UdpClientInit(void)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b082      	sub	sp, #8
 8001720:	af02      	add	r7, sp, #8
	//sys_thread_new("udpsend_thread", udpsend_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
	sys_thread_new("UdpClientThread", UdpClientThread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 8001722:	2300      	movs	r3, #0
 8001724:	9300      	str	r3, [sp, #0]
 8001726:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800172a:	2200      	movs	r2, #0
 800172c:	4903      	ldr	r1, [pc, #12]	; (800173c <_Z13UdpClientInitv+0x20>)
 800172e:	4804      	ldr	r0, [pc, #16]	; (8001740 <_Z13UdpClientInitv+0x24>)
 8001730:	f021 faf4 	bl	8022d1c <sys_thread_new>
}
 8001734:	bf00      	nop
 8001736:	46bd      	mov	sp, r7
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	08001635 	.word	0x08001635
 8001740:	08025558 	.word	0x08025558

08001744 <init_stm32f746>:




void init_stm32f746()
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
	MX_GPIO_Init();
 8001748:	f000 faaa 	bl	8001ca0 <MX_GPIO_Init>
	MX_CAN1_Init();
 800174c:	f000 f88c 	bl	8001868 <MX_CAN1_Init>
	MX_FMC_Init();
 8001750:	f000 fa3e 	bl	8001bd0 <MX_FMC_Init>
	MX_UART4_Init();
 8001754:	f000 f934 	bl	80019c0 <MX_UART4_Init>
	MX_USART1_UART_Init();
 8001758:	f000 f99c 	bl	8001a94 <MX_USART1_UART_Init>
	MX_USART3_UART_Init();
 800175c:	f000 f9ce 	bl	8001afc <MX_USART3_UART_Init>
	MX_USART6_UART_Init();
 8001760:	f000 fa00 	bl	8001b64 <MX_USART6_UART_Init>
	MX_UART5_Init();
 8001764:	f000 f960 	bl	8001a28 <MX_UART5_Init>
	MX_TIM7_Init();
 8001768:	f000 f8ea 	bl	8001940 <MX_TIM7_Init>
}
 800176c:	bf00      	nop
 800176e:	bd80      	pop	{r7, pc}

08001770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b094      	sub	sp, #80	; 0x50
 8001774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001776:	f107 0320 	add.w	r3, r7, #32
 800177a:	2230      	movs	r2, #48	; 0x30
 800177c:	2100      	movs	r1, #0
 800177e:	4618      	mov	r0, r3
 8001780:	f022 fc9e 	bl	80240c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001784:	f107 030c 	add.w	r3, r7, #12
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <SystemClock_Config+0xf0>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	4a31      	ldr	r2, [pc, #196]	; (8001860 <SystemClock_Config+0xf0>)
 800179a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800179e:	6413      	str	r3, [r2, #64]	; 0x40
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <SystemClock_Config+0xf0>)
 80017a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	60bb      	str	r3, [r7, #8]
 80017aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80017ac:	4b2d      	ldr	r3, [pc, #180]	; (8001864 <SystemClock_Config+0xf4>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a2c      	ldr	r2, [pc, #176]	; (8001864 <SystemClock_Config+0xf4>)
 80017b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	4b2a      	ldr	r3, [pc, #168]	; (8001864 <SystemClock_Config+0xf4>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017c0:	607b      	str	r3, [r7, #4]
 80017c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80017c4:	2301      	movs	r3, #1
 80017c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80017c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80017cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017ce:	2302      	movs	r3, #2
 80017d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80017d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 80017d8:	2319      	movs	r3, #25
 80017da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 432;
 80017dc:	f44f 73d8 	mov.w	r3, #432	; 0x1b0
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ea:	f107 0320 	add.w	r3, r7, #32
 80017ee:	4618      	mov	r0, r3
 80017f0:	f00c fa18 	bl	800dc24 <HAL_RCC_OscConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	bf14      	ite	ne
 80017fa:	2301      	movne	r3, #1
 80017fc:	2300      	moveq	r3, #0
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	2b00      	cmp	r3, #0
 8001802:	d001      	beq.n	8001808 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8001804:	f000 fb4c 	bl	8001ea0 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001808:	f00c f9bc 	bl	800db84 <HAL_PWREx_EnableOverDrive>
 800180c:	4603      	mov	r3, r0
 800180e:	2b00      	cmp	r3, #0
 8001810:	bf14      	ite	ne
 8001812:	2301      	movne	r3, #1
 8001814:	2300      	moveq	r3, #0
 8001816:	b2db      	uxtb	r3, r3
 8001818:	2b00      	cmp	r3, #0
 800181a:	d001      	beq.n	8001820 <SystemClock_Config+0xb0>
  {
    Error_Handler();
 800181c:	f000 fb40 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001820:	230f      	movs	r3, #15
 8001822:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001824:	2302      	movs	r3, #2
 8001826:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001828:	2300      	movs	r3, #0
 800182a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800182c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001830:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001832:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001836:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	2107      	movs	r1, #7
 800183e:	4618      	mov	r0, r3
 8001840:	f00c fc94 	bl	800e16c <HAL_RCC_ClockConfig>
 8001844:	4603      	mov	r3, r0
 8001846:	2b00      	cmp	r3, #0
 8001848:	bf14      	ite	ne
 800184a:	2301      	movne	r3, #1
 800184c:	2300      	moveq	r3, #0
 800184e:	b2db      	uxtb	r3, r3
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8001854:	f000 fb24 	bl	8001ea0 <Error_Handler>
  }
}
 8001858:	bf00      	nop
 800185a:	3750      	adds	r7, #80	; 0x50
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40023800 	.word	0x40023800
 8001864:	40007000 	.word	0x40007000

08001868 <MX_CAN1_Init>:
/**
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
void MX_CAN1_Init(void){
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0

  hcan1.Instance = CAN1;
 800186c:	4b31      	ldr	r3, [pc, #196]	; (8001934 <MX_CAN1_Init+0xcc>)
 800186e:	4a32      	ldr	r2, [pc, #200]	; (8001938 <MX_CAN1_Init+0xd0>)
 8001870:	601a      	str	r2, [r3, #0]

  //125 ~ 500khz
  //hcan1.Init.Prescaler = 3;//1000khz -> 3, 15, 2
  //hcan1.Init.Prescaler = 6;//500khz -> 6, 15, 2
  hcan1.Init.Prescaler = 12;//250khz -> 12, 15, 2
 8001872:	4b30      	ldr	r3, [pc, #192]	; (8001934 <MX_CAN1_Init+0xcc>)
 8001874:	220c      	movs	r2, #12
 8001876:	605a      	str	r2, [r3, #4]
  //hcan1.Init.Prescaler = 27;//125khz -> 27,16,13
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001878:	4b2e      	ldr	r3, [pc, #184]	; (8001934 <MX_CAN1_Init+0xcc>)
 800187a:	2200      	movs	r2, #0
 800187c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800187e:	4b2d      	ldr	r3, [pc, #180]	; (8001934 <MX_CAN1_Init+0xcc>)
 8001880:	2200      	movs	r2, #0
 8001882:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_15TQ;
 8001884:	4b2b      	ldr	r3, [pc, #172]	; (8001934 <MX_CAN1_Init+0xcc>)
 8001886:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 800188a:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800188c:	4b29      	ldr	r3, [pc, #164]	; (8001934 <MX_CAN1_Init+0xcc>)
 800188e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001892:	615a      	str	r2, [r3, #20]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
  hcan1.Init.TimeSeg2 = CAN_BS2_6TQ;
*/

  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001894:	4b27      	ldr	r3, [pc, #156]	; (8001934 <MX_CAN1_Init+0xcc>)
 8001896:	2200      	movs	r2, #0
 8001898:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 800189a:	4b26      	ldr	r3, [pc, #152]	; (8001934 <MX_CAN1_Init+0xcc>)
 800189c:	2200      	movs	r2, #0
 800189e:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80018a0:	4b24      	ldr	r3, [pc, #144]	; (8001934 <MX_CAN1_Init+0xcc>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80018a6:	4b23      	ldr	r3, [pc, #140]	; (8001934 <MX_CAN1_Init+0xcc>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80018ac:	4b21      	ldr	r3, [pc, #132]	; (8001934 <MX_CAN1_Init+0xcc>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80018b2:	4b20      	ldr	r3, [pc, #128]	; (8001934 <MX_CAN1_Init+0xcc>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	775a      	strb	r2, [r3, #29]

  if (HAL_CAN_Init(&hcan1) != HAL_OK){
 80018b8:	481e      	ldr	r0, [pc, #120]	; (8001934 <MX_CAN1_Init+0xcc>)
 80018ba:	f009 fcdd 	bl	800b278 <HAL_CAN_Init>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	bf14      	ite	ne
 80018c4:	2301      	movne	r3, #1
 80018c6:	2300      	moveq	r3, #0
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d001      	beq.n	80018d2 <MX_CAN1_Init+0x6a>
    Error_Handler();
 80018ce:	f000 fae7 	bl	8001ea0 <Error_Handler>
  }


  sFilterConfig.FilterBank = 0;
 80018d2:	4b1a      	ldr	r3, [pc, #104]	; (800193c <MX_CAN1_Init+0xd4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	615a      	str	r2, [r3, #20]
  sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80018d8:	4b18      	ldr	r3, [pc, #96]	; (800193c <MX_CAN1_Init+0xd4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	619a      	str	r2, [r3, #24]
  sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80018de:	4b17      	ldr	r3, [pc, #92]	; (800193c <MX_CAN1_Init+0xd4>)
 80018e0:	2201      	movs	r2, #1
 80018e2:	61da      	str	r2, [r3, #28]
  sFilterConfig.FilterIdHigh = 0x1fff;
 80018e4:	4b15      	ldr	r3, [pc, #84]	; (800193c <MX_CAN1_Init+0xd4>)
 80018e6:	f641 72ff 	movw	r2, #8191	; 0x1fff
 80018ea:	601a      	str	r2, [r3, #0]
  sFilterConfig.FilterIdLow = 0xffff;
 80018ec:	4b13      	ldr	r3, [pc, #76]	; (800193c <MX_CAN1_Init+0xd4>)
 80018ee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80018f2:	605a      	str	r2, [r3, #4]
  sFilterConfig.FilterMaskIdHigh = 0x0000;             //maximum range of accepting id
 80018f4:	4b11      	ldr	r3, [pc, #68]	; (800193c <MX_CAN1_Init+0xd4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	609a      	str	r2, [r3, #8]
  sFilterConfig.FilterMaskIdLow = 0x0000;				//minimum range of accepting id
 80018fa:	4b10      	ldr	r3, [pc, #64]	; (800193c <MX_CAN1_Init+0xd4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	60da      	str	r2, [r3, #12]
  sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001900:	4b0e      	ldr	r3, [pc, #56]	; (800193c <MX_CAN1_Init+0xd4>)
 8001902:	2200      	movs	r2, #0
 8001904:	611a      	str	r2, [r3, #16]
  sFilterConfig.FilterActivation = ENABLE;
 8001906:	4b0d      	ldr	r3, [pc, #52]	; (800193c <MX_CAN1_Init+0xd4>)
 8001908:	2201      	movs	r2, #1
 800190a:	621a      	str	r2, [r3, #32]
  sFilterConfig.SlaveStartFilterBank = 14;   //14
 800190c:	4b0b      	ldr	r3, [pc, #44]	; (800193c <MX_CAN1_Init+0xd4>)
 800190e:	220e      	movs	r2, #14
 8001910:	625a      	str	r2, [r3, #36]	; 0x24


  if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001912:	490a      	ldr	r1, [pc, #40]	; (800193c <MX_CAN1_Init+0xd4>)
 8001914:	4807      	ldr	r0, [pc, #28]	; (8001934 <MX_CAN1_Init+0xcc>)
 8001916:	f009 fdab 	bl	800b470 <HAL_CAN_ConfigFilter>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	bf14      	ite	ne
 8001920:	2301      	movne	r3, #1
 8001922:	2300      	moveq	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d001      	beq.n	800192e <MX_CAN1_Init+0xc6>
  {
    /*Filter configuration Error*/
    Error_Handler();
 800192a:	f000 fab9 	bl	8001ea0 <Error_Handler>

  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	200004e0 	.word	0x200004e0
 8001938:	40006400 	.word	0x40006400
 800193c:	20000508 	.word	0x20000508

08001940 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
void MX_TIM7_Init(void)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001950:	4b19      	ldr	r3, [pc, #100]	; (80019b8 <MX_TIM7_Init+0x78>)
 8001952:	4a1a      	ldr	r2, [pc, #104]	; (80019bc <MX_TIM7_Init+0x7c>)
 8001954:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 107;
 8001956:	4b18      	ldr	r3, [pc, #96]	; (80019b8 <MX_TIM7_Init+0x78>)
 8001958:	226b      	movs	r2, #107	; 0x6b
 800195a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800195c:	4b16      	ldr	r3, [pc, #88]	; (80019b8 <MX_TIM7_Init+0x78>)
 800195e:	2200      	movs	r2, #0
 8001960:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 99;
 8001962:	4b15      	ldr	r3, [pc, #84]	; (80019b8 <MX_TIM7_Init+0x78>)
 8001964:	2263      	movs	r2, #99	; 0x63
 8001966:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001968:	4b13      	ldr	r3, [pc, #76]	; (80019b8 <MX_TIM7_Init+0x78>)
 800196a:	2280      	movs	r2, #128	; 0x80
 800196c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 800196e:	4812      	ldr	r0, [pc, #72]	; (80019b8 <MX_TIM7_Init+0x78>)
 8001970:	f00d fa4c 	bl	800ee0c <HAL_TIM_Base_Init>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	bf14      	ite	ne
 800197a:	2301      	movne	r3, #1
 800197c:	2300      	moveq	r3, #0
 800197e:	b2db      	uxtb	r3, r3
 8001980:	2b00      	cmp	r3, #0
 8001982:	d001      	beq.n	8001988 <MX_TIM7_Init+0x48>
  {
    Error_Handler();
 8001984:	f000 fa8c 	bl	8001ea0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001988:	2300      	movs	r3, #0
 800198a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198c:	2300      	movs	r3, #0
 800198e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001990:	1d3b      	adds	r3, r7, #4
 8001992:	4619      	mov	r1, r3
 8001994:	4808      	ldr	r0, [pc, #32]	; (80019b8 <MX_TIM7_Init+0x78>)
 8001996:	f00d fcf1 	bl	800f37c <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	bf14      	ite	ne
 80019a0:	2301      	movne	r3, #1
 80019a2:	2300      	moveq	r3, #0
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM7_Init+0x6e>
  {
    Error_Handler();
 80019aa:	f000 fa79 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80019ae:	bf00      	nop
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	20000530 	.word	0x20000530
 80019bc:	40001400 	.word	0x40001400

080019c0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART4_Init(void)
{
 80019c0:	b580      	push	{r7, lr}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80019c4:	4b16      	ldr	r3, [pc, #88]	; (8001a20 <MX_UART4_Init+0x60>)
 80019c6:	4a17      	ldr	r2, [pc, #92]	; (8001a24 <MX_UART4_Init+0x64>)
 80019c8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019ca:	4b15      	ldr	r3, [pc, #84]	; (8001a20 <MX_UART4_Init+0x60>)
 80019cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019d0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019d2:	4b13      	ldr	r3, [pc, #76]	; (8001a20 <MX_UART4_Init+0x60>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019d8:	4b11      	ldr	r3, [pc, #68]	; (8001a20 <MX_UART4_Init+0x60>)
 80019da:	2200      	movs	r2, #0
 80019dc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019de:	4b10      	ldr	r3, [pc, #64]	; (8001a20 <MX_UART4_Init+0x60>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019e4:	4b0e      	ldr	r3, [pc, #56]	; (8001a20 <MX_UART4_Init+0x60>)
 80019e6:	220c      	movs	r2, #12
 80019e8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ea:	4b0d      	ldr	r3, [pc, #52]	; (8001a20 <MX_UART4_Init+0x60>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <MX_UART4_Init+0x60>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <MX_UART4_Init+0x60>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80019fc:	4b08      	ldr	r3, [pc, #32]	; (8001a20 <MX_UART4_Init+0x60>)
 80019fe:	2200      	movs	r2, #0
 8001a00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001a02:	4807      	ldr	r0, [pc, #28]	; (8001a20 <MX_UART4_Init+0x60>)
 8001a04:	f00d fd66 	bl	800f4d4 <HAL_UART_Init>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	bf14      	ite	ne
 8001a0e:	2301      	movne	r3, #1
 8001a10:	2300      	moveq	r3, #0
 8001a12:	b2db      	uxtb	r3, r3
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d001      	beq.n	8001a1c <MX_UART4_Init+0x5c>
  {
    Error_Handler();
 8001a18:	f000 fa42 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001a1c:	bf00      	nop
 8001a1e:	bd80      	pop	{r7, pc}
 8001a20:	2000057c 	.word	0x2000057c
 8001a24:	40004c00 	.word	0x40004c00

08001a28 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
void MX_UART5_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a2e:	4a18      	ldr	r2, [pc, #96]	; (8001a90 <MX_UART5_Init+0x68>)
 8001a30:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001a32:	4b16      	ldr	r3, [pc, #88]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001a38:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_9B;
 8001a3a:	4b14      	ldr	r3, [pc, #80]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a3c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001a40:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001a42:	4b12      	ldr	r3, [pc, #72]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_EVEN;
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a4a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a4e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001a50:	4b0e      	ldr	r3, [pc, #56]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a52:	220c      	movs	r2, #12
 8001a54:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a56:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a58:	2200      	movs	r2, #0
 8001a5a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a5c:	4b0b      	ldr	r3, [pc, #44]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a68:	4b08      	ldr	r3, [pc, #32]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_UART5_Init+0x64>)
 8001a70:	f00d fd30 	bl	800f4d4 <HAL_UART_Init>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf14      	ite	ne
 8001a7a:	2301      	movne	r3, #1
 8001a7c:	2300      	moveq	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d001      	beq.n	8001a88 <MX_UART5_Init+0x60>
  {
    Error_Handler();
 8001a84:	f000 fa0c 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001a88:	bf00      	nop
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	20000604 	.word	0x20000604
 8001a90:	40005000 	.word	0x40005000

08001a94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART1_UART_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001a98:	4b16      	ldr	r3, [pc, #88]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001a9a:	4a17      	ldr	r2, [pc, #92]	; (8001af8 <MX_USART1_UART_Init+0x64>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001a9e:	4b15      	ldr	r3, [pc, #84]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b0e      	ldr	r3, [pc, #56]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b0d      	ldr	r3, [pc, #52]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001aca:	4b0a      	ldr	r3, [pc, #40]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001ad6:	4807      	ldr	r0, [pc, #28]	; (8001af4 <MX_USART1_UART_Init+0x60>)
 8001ad8:	f00d fcfc 	bl	800f4d4 <HAL_UART_Init>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bf14      	ite	ne
 8001ae2:	2301      	movne	r3, #1
 8001ae4:	2300      	moveq	r3, #0
 8001ae6:	b2db      	uxtb	r3, r3
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d001      	beq.n	8001af0 <MX_USART1_UART_Init+0x5c>
  {
    Error_Handler();
 8001aec:	f000 f9d8 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001af0:	bf00      	nop
 8001af2:	bd80      	pop	{r7, pc}
 8001af4:	2000068c 	.word	0x2000068c
 8001af8:	40011000 	.word	0x40011000

08001afc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART3_UART_Init(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b00:	4b16      	ldr	r3, [pc, #88]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b02:	4a17      	ldr	r2, [pc, #92]	; (8001b60 <MX_USART3_UART_Init+0x64>)
 8001b04:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b06:	4b15      	ldr	r3, [pc, #84]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b0c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b0e:	4b13      	ldr	r3, [pc, #76]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b10:	2200      	movs	r2, #0
 8001b12:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b14:	4b11      	ldr	r3, [pc, #68]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b1a:	4b10      	ldr	r3, [pc, #64]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b20:	4b0e      	ldr	r3, [pc, #56]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b22:	220c      	movs	r2, #12
 8001b24:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b26:	4b0d      	ldr	r3, [pc, #52]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b28:	2200      	movs	r2, #0
 8001b2a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b2c:	4b0b      	ldr	r3, [pc, #44]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b32:	4b0a      	ldr	r3, [pc, #40]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001b38:	4b08      	ldr	r3, [pc, #32]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b3e:	4807      	ldr	r0, [pc, #28]	; (8001b5c <MX_USART3_UART_Init+0x60>)
 8001b40:	f00d fcc8 	bl	800f4d4 <HAL_UART_Init>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	bf14      	ite	ne
 8001b4a:	2301      	movne	r3, #1
 8001b4c:	2300      	moveq	r3, #0
 8001b4e:	b2db      	uxtb	r3, r3
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d001      	beq.n	8001b58 <MX_USART3_UART_Init+0x5c>
  {
    Error_Handler();
 8001b54:	f000 f9a4 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b58:	bf00      	nop
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	20000714 	.word	0x20000714
 8001b60:	40004800 	.word	0x40004800

08001b64 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
void MX_USART6_UART_Init(void)
{
 8001b64:	b580      	push	{r7, lr}
 8001b66:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001b68:	4b17      	ldr	r3, [pc, #92]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b6a:	4a18      	ldr	r2, [pc, #96]	; (8001bcc <MX_USART6_UART_Init+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001b6e:	4b16      	ldr	r3, [pc, #88]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b74:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_9B;
 8001b76:	4b14      	ldr	r3, [pc, #80]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001b7c:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001b7e:	4b12      	ldr	r3, [pc, #72]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b80:	2200      	movs	r2, #0
 8001b82:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_EVEN;
 8001b84:	4b10      	ldr	r3, [pc, #64]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b8a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001b8c:	4b0e      	ldr	r3, [pc, #56]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b8e:	220c      	movs	r2, #12
 8001b90:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b92:	4b0d      	ldr	r3, [pc, #52]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b94:	2200      	movs	r2, #0
 8001b96:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b98:	4b0b      	ldr	r3, [pc, #44]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001b9e:	4b0a      	ldr	r3, [pc, #40]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001ba4:	4b08      	ldr	r3, [pc, #32]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001baa:	4807      	ldr	r0, [pc, #28]	; (8001bc8 <MX_USART6_UART_Init+0x64>)
 8001bac:	f00d fc92 	bl	800f4d4 <HAL_UART_Init>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	bf14      	ite	ne
 8001bb6:	2301      	movne	r3, #1
 8001bb8:	2300      	moveq	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d001      	beq.n	8001bc4 <MX_USART6_UART_Init+0x60>
  {
    Error_Handler();
 8001bc0:	f000 f96e 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001bc4:	bf00      	nop
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	2000079c 	.word	0x2000079c
 8001bcc:	40011400 	.word	0x40011400

08001bd0 <MX_FMC_Init>:

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b088      	sub	sp, #32
 8001bd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8001bd6:	1d3b      	adds	r3, r7, #4
 8001bd8:	2200      	movs	r2, #0
 8001bda:	601a      	str	r2, [r3, #0]
 8001bdc:	605a      	str	r2, [r3, #4]
 8001bde:	609a      	str	r2, [r3, #8]
 8001be0:	60da      	str	r2, [r3, #12]
 8001be2:	611a      	str	r2, [r3, #16]
 8001be4:	615a      	str	r2, [r3, #20]
 8001be6:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8001be8:	4b2b      	ldr	r3, [pc, #172]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001bea:	f04f 4220 	mov.w	r2, #2684354560	; 0xa0000000
 8001bee:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8001bf0:	4b29      	ldr	r3, [pc, #164]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <MX_FMC_Init+0xcc>)
 8001bf4:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8001bf6:	4b28      	ldr	r3, [pc, #160]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_PSRAM;
 8001c02:	4b25      	ldr	r3, [pc, #148]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c04:	2204      	movs	r2, #4
 8001c06:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8001c08:	4b23      	ldr	r3, [pc, #140]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c0a:	2210      	movs	r2, #16
 8001c0c:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8001c0e:	4b22      	ldr	r3, [pc, #136]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8001c14:	4b20      	ldr	r3, [pc, #128]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8001c1a:	4b1f      	ldr	r3, [pc, #124]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_DISABLE;
 8001c20:	4b1d      	ldr	r3, [pc, #116]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c22:	2200      	movs	r2, #0
 8001c24:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8001c26:	4b1c      	ldr	r3, [pc, #112]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c28:	2200      	movs	r2, #0
 8001c2a:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8001c2c:	4b1a      	ldr	r3, [pc, #104]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c2e:	2200      	movs	r2, #0
 8001c30:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8001c32:	4b19      	ldr	r3, [pc, #100]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8001c38:	4b17      	ldr	r3, [pc, #92]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8001c3e:	4b16      	ldr	r3, [pc, #88]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_DISABLE;
 8001c44:	4b14      	ldr	r3, [pc, #80]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c46:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001c4a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8001c4c:	4b12      	ldr	r3, [pc, #72]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	641a      	str	r2, [r3, #64]	; 0x40
  /* Timing */
  Timing.AddressSetupTime = 5;
 8001c52:	2305      	movs	r3, #5
 8001c54:	607b      	str	r3, [r7, #4]
  Timing.AddressHoldTime = 15;
 8001c56:	230f      	movs	r3, #15
 8001c58:	60bb      	str	r3, [r7, #8]
  Timing.DataSetupTime = 4;
 8001c5a:	2304      	movs	r3, #4
 8001c5c:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 4;
 8001c5e:	2304      	movs	r3, #4
 8001c60:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8001c62:	2310      	movs	r3, #16
 8001c64:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8001c66:	2311      	movs	r3, #17
 8001c68:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8001c6e:	1d3b      	adds	r3, r7, #4
 8001c70:	2200      	movs	r2, #0
 8001c72:	4619      	mov	r1, r3
 8001c74:	4808      	ldr	r0, [pc, #32]	; (8001c98 <MX_FMC_Init+0xc8>)
 8001c76:	f00d f881 	bl	800ed7c <HAL_SRAM_Init>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	bf14      	ite	ne
 8001c80:	2301      	movne	r3, #1
 8001c82:	2300      	moveq	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8001c8a:	f000 f909 	bl	8001ea0 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8001c8e:	bf00      	nop
 8001c90:	3720      	adds	r7, #32
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	20000824 	.word	0x20000824
 8001c9c:	a0000104 	.word	0xa0000104

08001ca0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
void MX_GPIO_Init(void)
{
 8001ca0:	b580      	push	{r7, lr}
 8001ca2:	b08e      	sub	sp, #56	; 0x38
 8001ca4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ca6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001caa:	2200      	movs	r2, #0
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	605a      	str	r2, [r3, #4]
 8001cb0:	609a      	str	r2, [r3, #8]
 8001cb2:	60da      	str	r2, [r3, #12]
 8001cb4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cb6:	4b6b      	ldr	r3, [pc, #428]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cba:	4a6a      	ldr	r2, [pc, #424]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cbc:	f043 0310 	orr.w	r3, r3, #16
 8001cc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cc2:	4b68      	ldr	r3, [pc, #416]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cc6:	f003 0310 	and.w	r3, r3, #16
 8001cca:	623b      	str	r3, [r7, #32]
 8001ccc:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cce:	4b65      	ldr	r3, [pc, #404]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cd2:	4a64      	ldr	r2, [pc, #400]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cd4:	f043 0304 	orr.w	r3, r3, #4
 8001cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cde:	f003 0304 	and.w	r3, r3, #4
 8001ce2:	61fb      	str	r3, [r7, #28]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ce6:	4b5f      	ldr	r3, [pc, #380]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cea:	4a5e      	ldr	r2, [pc, #376]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cec:	f043 0320 	orr.w	r3, r3, #32
 8001cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8001cf2:	4b5c      	ldr	r3, [pc, #368]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cf6:	f003 0320 	and.w	r3, r3, #32
 8001cfa:	61bb      	str	r3, [r7, #24]
 8001cfc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	4b59      	ldr	r3, [pc, #356]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d02:	4a58      	ldr	r2, [pc, #352]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d08:	6313      	str	r3, [r2, #48]	; 0x30
 8001d0a:	4b56      	ldr	r3, [pc, #344]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d12:	617b      	str	r3, [r7, #20]
 8001d14:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d16:	4b53      	ldr	r3, [pc, #332]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a52      	ldr	r2, [pc, #328]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b50      	ldr	r3, [pc, #320]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	4b4d      	ldr	r3, [pc, #308]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d32:	4a4c      	ldr	r2, [pc, #304]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d34:	f043 0302 	orr.w	r3, r3, #2
 8001d38:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3a:	4b4a      	ldr	r3, [pc, #296]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d3e:	f003 0302 	and.w	r3, r3, #2
 8001d42:	60fb      	str	r3, [r7, #12]
 8001d44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001d46:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d4a:	4a46      	ldr	r2, [pc, #280]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001d50:	6313      	str	r3, [r2, #48]	; 0x30
 8001d52:	4b44      	ldr	r3, [pc, #272]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d5a:	60bb      	str	r3, [r7, #8]
 8001d5c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d5e:	4b41      	ldr	r3, [pc, #260]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d62:	4a40      	ldr	r2, [pc, #256]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d64:	f043 0308 	orr.w	r3, r3, #8
 8001d68:	6313      	str	r3, [r2, #48]	; 0x30
 8001d6a:	4b3e      	ldr	r3, [pc, #248]	; (8001e64 <MX_GPIO_Init+0x1c4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	f003 0308 	and.w	r3, r3, #8
 8001d72:	607b      	str	r3, [r7, #4]
 8001d74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001d76:	2200      	movs	r2, #0
 8001d78:	f64f 71f0 	movw	r1, #65520	; 0xfff0
 8001d7c:	483a      	ldr	r0, [pc, #232]	; (8001e68 <MX_GPIO_Init+0x1c8>)
 8001d7e:	f00b fee7 	bl	800db50 <HAL_GPIO_WritePin>
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|BUZZER_Pin
 8001d82:	2200      	movs	r2, #0
 8001d84:	f240 31e7 	movw	r1, #999	; 0x3e7
 8001d88:	4838      	ldr	r0, [pc, #224]	; (8001e6c <MX_GPIO_Init+0x1cc>)
 8001d8a:	f00b fee1 	bl	800db50 <HAL_GPIO_WritePin>
                          |SLED1_Pin|SLED2_Pin|SLED3_Pin|SLED4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MCX512_RST_Pin|MCX512_EMG_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001d94:	4836      	ldr	r0, [pc, #216]	; (8001e70 <MX_GPIO_Init+0x1d0>)
 8001d96:	f00b fedb 	bl	800db50 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DI18_Pin DI19_Pin DI20_Pin DI_EMG1_Pin
                           DI_EMG2_Pin DI16_Pin DI17_Pin */
  GPIO_InitStruct.Pin = DI18_Pin|DI19_Pin|DI20_Pin|DI_EMG1_Pin
 8001d9a:	237f      	movs	r3, #127	; 0x7f
 8001d9c:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI_EMG2_Pin|DI16_Pin|DI17_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001d9e:	2300      	movs	r3, #0
 8001da0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001da2:	2300      	movs	r3, #0
 8001da4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001da6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001daa:	4619      	mov	r1, r3
 8001dac:	4831      	ldr	r0, [pc, #196]	; (8001e74 <MX_GPIO_Init+0x1d4>)
 8001dae:	f00b fd0b 	bl	800d7c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_INT0_Pin MCX512_INT1_Pin */
  GPIO_InitStruct.Pin = MCX512_INT0_Pin|MCX512_INT1_Pin;
 8001db2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001db6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001db8:	2300      	movs	r3, #0
 8001dba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001dc4:	4619      	mov	r1, r3
 8001dc6:	482a      	ldr	r0, [pc, #168]	; (8001e70 <MX_GPIO_Init+0x1d0>)
 8001dc8:	f00b fcfe 	bl	800d7c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : CO1_Pin CO2_Pin LED1_R_Pin LED1_G_Pin
                           LED1_B_Pin LED2_R_Pin LED2_G_Pin LED2_B_Pin
                           DO1_Pin DO2_Pin DO3_Pin DO4_Pin */
  GPIO_InitStruct.Pin = CO1_Pin|CO2_Pin|LED1_R_Pin|LED1_G_Pin
 8001dcc:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
                          |LED1_B_Pin|LED2_R_Pin|LED2_G_Pin|LED2_B_Pin
                          |DO1_Pin|DO2_Pin|DO3_Pin|DO4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001dde:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001de2:	4619      	mov	r1, r3
 8001de4:	4820      	ldr	r0, [pc, #128]	; (8001e68 <MX_GPIO_Init+0x1c8>)
 8001de6:	f00b fcef 	bl	800d7c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : UART5_DIR_Pin UART6_DIR_Pin UART4_DIR_Pin SLED1_Pin
                           SLED2_Pin SLED3_Pin SLED4_Pin */
  GPIO_InitStruct.Pin = UART5_DIR_Pin|UART6_DIR_Pin|UART4_DIR_Pin|SLED1_Pin
 8001dea:	f240 33c7 	movw	r3, #967	; 0x3c7
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
                          |SLED2_Pin|SLED3_Pin|SLED4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001df0:	2301      	movs	r3, #1
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df4:	2300      	movs	r3, #0
 8001df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e00:	4619      	mov	r1, r3
 8001e02:	481a      	ldr	r0, [pc, #104]	; (8001e6c <MX_GPIO_Init+0x1cc>)
 8001e04:	f00b fce0 	bl	800d7c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : DI1_Pin DI2_Pin DI3_Pin DI4_Pin
                           DI5_Pin DI6_Pin DI7_Pin DI8_Pin
                           DI9_Pin DI10_Pin DI11_Pin DI12_Pin
                           DI13_Pin DI14_Pin DI15_Pin */
  GPIO_InitStruct.Pin = DI1_Pin|DI2_Pin|DI3_Pin|DI4_Pin
 8001e08:	f24f 73ff 	movw	r3, #63487	; 0xf7ff
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
                          |DI5_Pin|DI6_Pin|DI7_Pin|DI8_Pin
                          |DI9_Pin|DI10_Pin|DI11_Pin|DI12_Pin
                          |DI13_Pin|DI14_Pin|DI15_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e0e:	2300      	movs	r3, #0
 8001e10:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e12:	2300      	movs	r3, #0
 8001e14:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	4816      	ldr	r0, [pc, #88]	; (8001e78 <MX_GPIO_Init+0x1d8>)
 8001e1e:	f00b fcd3 	bl	800d7c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : MCX512_RST_Pin MCX512_EMG_Pin */
  GPIO_InitStruct.Pin = MCX512_RST_Pin|MCX512_EMG_Pin;
 8001e22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e2c:	2300      	movs	r3, #0
 8001e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e30:	2300      	movs	r3, #0
 8001e32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e38:	4619      	mov	r1, r3
 8001e3a:	480d      	ldr	r0, [pc, #52]	; (8001e70 <MX_GPIO_Init+0x1d0>)
 8001e3c:	f00b fcc4 	bl	800d7c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUZZER_Pin */
  GPIO_InitStruct.Pin = BUZZER_Pin;
 8001e40:	2320      	movs	r3, #32
 8001e42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e44:	2301      	movs	r3, #1
 8001e46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001e4c:	2302      	movs	r3, #2
 8001e4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001e50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001e54:	4619      	mov	r1, r3
 8001e56:	4805      	ldr	r0, [pc, #20]	; (8001e6c <MX_GPIO_Init+0x1cc>)
 8001e58:	f00b fcb6 	bl	800d7c8 <HAL_GPIO_Init>

}
 8001e5c:	bf00      	nop
 8001e5e:	3738      	adds	r7, #56	; 0x38
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}
 8001e64:	40023800 	.word	0x40023800
 8001e68:	40021400 	.word	0x40021400
 8001e6c:	40020400 	.word	0x40020400
 8001e70:	40020800 	.word	0x40020800
 8001e74:	40021000 	.word	0x40021000
 8001e78:	40021800 	.word	0x40021800

08001e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a04      	ldr	r2, [pc, #16]	; (8001e9c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d101      	bne.n	8001e92 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001e8e:	f009 f9af 	bl	800b1f0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001e92:	bf00      	nop
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	40001000 	.word	0x40001000

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	e7fe      	b.n	8001ea8 <Error_Handler+0x8>

08001eaa <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 8001eaa:	b480      	push	{r7}
 8001eac:	b083      	sub	sp, #12
 8001eae:	af00      	add	r7, sp, #0
 8001eb0:	6078      	str	r0, [r7, #4]
 8001eb2:	6039      	str	r1, [r7, #0]
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	370c      	adds	r7, #12
 8001eba:	46bd      	mov	sp, r7
 8001ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec0:	4770      	bx	lr

08001ec2 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8001ec2:	b580      	push	{r7, lr}
 8001ec4:	b082      	sub	sp, #8
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	6078      	str	r0, [r7, #4]
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f000 fd60 	bl	8002990 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3708      	adds	r7, #8
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	6078      	str	r0, [r7, #4]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	4618      	mov	r0, r3
 8001ee6:	f000 fd43 	bl	8002970 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	4618      	mov	r0, r3
 8001eee:	3708      	adds	r7, #8
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}

08001ef4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff ffeb 	bl	8001eda <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}

08001f0e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8001f0e:	b580      	push	{r7, lr}
 8001f10:	b082      	sub	sp, #8
 8001f12:	af00      	add	r7, sp, #0
 8001f14:	6078      	str	r0, [r7, #4]
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 fd8a 	bl	8002a30 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3708      	adds	r7, #8
 8001f22:	46bd      	mov	sp, r7
 8001f24:	bd80      	pop	{r7, pc}

08001f26 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8001f26:	b580      	push	{r7, lr}
 8001f28:	b082      	sub	sp, #8
 8001f2a:	af00      	add	r7, sp, #0
 8001f2c:	6078      	str	r0, [r7, #4]
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	4618      	mov	r0, r3
 8001f32:	f000 fd6d 	bl	8002a10 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3708      	adds	r7, #8
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bd80      	pop	{r7, pc}

08001f40 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>:
      vector() = default;
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b082      	sub	sp, #8
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ffeb 	bl	8001f26 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
	...

08001f5c <_ZN4BG95C1EP19__CAN_HandleTypeDef>:

#include <lift_motor/bg95.h>

// TODO Auto-generated constructor stub

BG95::BG95(CAN_HandleTypeDef *hcanx)
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
 8001f66:	4a28      	ldr	r2, [pc, #160]	; (8002008 <_ZN4BG95C1EP19__CAN_HandleTypeDef+0xac>)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	601a      	str	r2, [r3, #0]
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	605a      	str	r2, [r3, #4]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	227f      	movs	r2, #127	; 0x7f
 8001f76:	811a      	strh	r2, [r3, #8]
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	60da      	str	r2, [r3, #12]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	741a      	strb	r2, [r3, #16]
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	615a      	str	r2, [r3, #20]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f90:	619a      	str	r2, [r3, #24]
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001f98:	61da      	str	r2, [r3, #28]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa0:	621a      	str	r2, [r3, #32]
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fa8:	625a      	str	r2, [r3, #36]	; 0x24
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8001fb8:	62da      	str	r2, [r3, #44]	; 0x2c
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8001fc0:	64da      	str	r2, [r3, #76]	; 0x4c
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001fc8:	651a      	str	r2, [r3, #80]	; 0x50
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	655a      	str	r2, [r3, #84]	; 0x54
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	335c      	adds	r3, #92	; 0x5c
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff89 	bl	8001ef4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	3368      	adds	r3, #104	; 0x68
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff ff84 	bl	8001ef4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EEC1Ev>
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	3374      	adds	r3, #116	; 0x74
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7ff ffa5 	bl	8001f40 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EEC1Ev>
{
	this->hcanx_ = hcanx;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	683a      	ldr	r2, [r7, #0]
 8001ffa:	605a      	str	r2, [r3, #4]
}
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	3708      	adds	r7, #8
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
 8002006:	bf00      	nop
 8002008:	08028d08 	.word	0x08028d08

0800200c <_ZN4BG95D1Ev>:
	//this->Txid_ = Txid;
	//this->Rxid_ = Rxid;
}

// TODO Auto-generated destructor stub.
BG95::~BG95()
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	4a0c      	ldr	r2, [pc, #48]	; (8002048 <_ZN4BG95D1Ev+0x3c>)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	601a      	str	r2, [r3, #0]
{
	//if you using heap memory, delete all in this function
	HAL_CAN_DeInitialization();
 800201a:	6878      	ldr	r0, [r7, #4]
 800201c:	f000 fc2a 	bl	8002874 <_ZN4BG9524HAL_CAN_DeInitializationEv>
BG95::~BG95()
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	3374      	adds	r3, #116	; 0x74
 8002024:	4618      	mov	r0, r3
 8002026:	f000 fd28 	bl	8002a7a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	3368      	adds	r3, #104	; 0x68
 800202e:	4618      	mov	r0, r3
 8002030:	f000 fcd3 	bl	80029da <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	335c      	adds	r3, #92	; 0x5c
 8002038:	4618      	mov	r0, r3
 800203a:	f000 fcce 	bl	80029da <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
}
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	4618      	mov	r0, r3
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}
 8002048:	08028d08 	.word	0x08028d08

0800204c <_ZN4BG95D0Ev>:
BG95::~BG95()
 800204c:	b580      	push	{r7, lr}
 800204e:	b082      	sub	sp, #8
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
}
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f7ff ffd9 	bl	800200c <_ZN4BG95D1Ev>
 800205a:	2180      	movs	r1, #128	; 0x80
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f020 fea1 	bl	8022da4 <_ZdlPvj>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4618      	mov	r0, r3
 8002066:	3708      	adds	r7, #8
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <_ZN4BG9519TransmitSendRequestEv>:


//--------------------------------------------------------------------send or read function
uint16_t BG95::TransmitSendRequest()
{
 800206c:	b590      	push	{r4, r7, lr}
 800206e:	b091      	sub	sp, #68	; 0x44
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
	CAN_WData_HandleTypeDef temp_DATA = {0};
 8002074:	4b4f      	ldr	r3, [pc, #316]	; (80021b4 <_ZN4BG9519TransmitSendRequestEv+0x148>)
 8002076:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 800207a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800207c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	CAN_TxHeaderTypeDef TxHeader;
	uint8_t TxData[8] = {0,};
 8002080:	2300      	movs	r3, #0
 8002082:	60fb      	str	r3, [r7, #12]
 8002084:	2300      	movs	r3, #0
 8002086:	613b      	str	r3, [r7, #16]
	uint32_t TxMailbox;
	uint8_t state = HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	if(!(AsyncRequestQueue.empty())) {temp_DATA =  AsyncRequestQueue.front();}
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	335c      	adds	r3, #92	; 0x5c
 8002092:	4618      	mov	r0, r3
 8002094:	f000 fd0c 	bl	8002ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8002098:	4603      	mov	r3, r0
 800209a:	f083 0301 	eor.w	r3, r3, #1
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	d00b      	beq.n	80020bc <_ZN4BG9519TransmitSendRequestEv+0x50>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	335c      	adds	r3, #92	; 0x5c
 80020a8:	4618      	mov	r0, r3
 80020aa:	f000 fd1c 	bl	8002ae6 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 80020ae:	4603      	mov	r3, r0
 80020b0:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80020b4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020b6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80020ba:	e015      	b.n	80020e8 <_ZN4BG9519TransmitSendRequestEv+0x7c>
	else if(!(RequestQueue.empty())) {temp_DATA =  RequestQueue.front();}
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	3368      	adds	r3, #104	; 0x68
 80020c0:	4618      	mov	r0, r3
 80020c2:	f000 fcf5 	bl	8002ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f083 0301 	eor.w	r3, r3, #1
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d00a      	beq.n	80020e8 <_ZN4BG9519TransmitSendRequestEv+0x7c>
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	3368      	adds	r3, #104	; 0x68
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 fd05 	bl	8002ae6 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>
 80020dc:	4603      	mov	r3, r0
 80020de:	f107 042c 	add.w	r4, r7, #44	; 0x2c
 80020e2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80020e4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	/* Configure Transmission process */
	TxHeader.StdId = this->nodeid_ + temp_DATA.txid_;                 // Standard Identifier, 0 ~ 0x7FF
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	891b      	ldrh	r3, [r3, #8]
 80020ec:	461a      	mov	r2, r3
 80020ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020f0:	4413      	add	r3, r2
 80020f2:	617b      	str	r3, [r7, #20]
	TxHeader.ExtId = 0x01;                							  // Extended Identifier, 0 ~ 0x1FFFFFFF
 80020f4:	2301      	movs	r3, #1
 80020f6:	61bb      	str	r3, [r7, #24]
	TxHeader.RTR = CAN_RTR_DATA;          							  // frame type, DATA or REMOTE
 80020f8:	2300      	movs	r3, #0
 80020fa:	623b      	str	r3, [r7, #32]
	TxHeader.IDE = CAN_ID_STD;            							  // identifier type, STD or EXT
 80020fc:	2300      	movs	r3, #0
 80020fe:	61fb      	str	r3, [r7, #28]
	TxHeader.DLC = temp_DATA.data_length_;                   	      // data length, 0 ~ 8 byte
 8002100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002102:	627b      	str	r3, [r7, #36]	; 0x24
	TxHeader.TransmitGlobalTime = DISABLE;  					      // timestamp counter capture.
 8002104:	2300      	movs	r3, #0
 8002106:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

	/* Set the data to be transmitted */
	std::copy(temp_DATA.write_Data_Byte_, temp_DATA.write_Data_Byte_ + temp_DATA.data_length_, TxData);
 800210a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800210c:	461a      	mov	r2, r3
 800210e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002112:	3308      	adds	r3, #8
 8002114:	1899      	adds	r1, r3, r2
 8002116:	f107 020c 	add.w	r2, r7, #12
 800211a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800211e:	3308      	adds	r3, #8
 8002120:	4618      	mov	r0, r3
 8002122:	f000 fcf3 	bl	8002b0c <_ZSt4copyIPhS0_ET0_T_S2_S1_>

	/*request transmission of a message*/
	state = HAL_CANTransmit(this->hcanx_, &TxHeader, (unsigned char*)TxData,  &TxMailbox);
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6858      	ldr	r0, [r3, #4]
 800212a:	f107 0308 	add.w	r3, r7, #8
 800212e:	f107 020c 	add.w	r2, r7, #12
 8002132:	f107 0114 	add.w	r1, r7, #20
 8002136:	f008 f893 	bl	800a260 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>
 800213a:	4603      	mov	r3, r0
 800213c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	/* Monitor the Tx mailboxes availability until at least one Tx mailbox is free*/
	while(HAL_CAN_GetTxMailboxesFreeLevel(this->hcanx_) != 3);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	4618      	mov	r0, r3
 8002146:	f009 fbd0 	bl	800b8ea <HAL_CAN_GetTxMailboxesFreeLevel>
 800214a:	4603      	mov	r3, r0
 800214c:	2b03      	cmp	r3, #3
 800214e:	bf14      	ite	ne
 8002150:	2301      	movne	r3, #1
 8002152:	2300      	moveq	r3, #0
 8002154:	b2db      	uxtb	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	d000      	beq.n	800215c <_ZN4BG9519TransmitSendRequestEv+0xf0>
 800215a:	e7f1      	b.n	8002140 <_ZN4BG9519TransmitSendRequestEv+0xd4>

	//waiting for message to leave
	while((HAL_CAN_IsTxMessagePending((this->hcanx_) , TxMailbox)));
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	68ba      	ldr	r2, [r7, #8]
 8002162:	4611      	mov	r1, r2
 8002164:	4618      	mov	r0, r3
 8002166:	f009 fbf5 	bl	800b954 <HAL_CAN_IsTxMessagePending>
 800216a:	4603      	mov	r3, r0
 800216c:	2b00      	cmp	r3, #0
 800216e:	bf14      	ite	ne
 8002170:	2301      	movne	r3, #1
 8002172:	2300      	moveq	r3, #0
 8002174:	b2db      	uxtb	r3, r3
 8002176:	2b00      	cmp	r3, #0
 8002178:	d000      	beq.n	800217c <_ZN4BG9519TransmitSendRequestEv+0x110>
 800217a:	e7ef      	b.n	800215c <_ZN4BG9519TransmitSendRequestEv+0xf0>

	//waiting for transmission request to be completed by checking RQCPx
	while( !(hcanx_->Instance->TSR & ( 0x1 << (7 * ( TxMailbox - 1 )))));
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685b      	ldr	r3, [r3, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	6899      	ldr	r1, [r3, #8]
 8002184:	68ba      	ldr	r2, [r7, #8]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	3b07      	subs	r3, #7
 800218e:	2201      	movs	r2, #1
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	400b      	ands	r3, r1
 8002196:	2b00      	cmp	r3, #0
 8002198:	bf0c      	ite	eq
 800219a:	2301      	moveq	r3, #1
 800219c:	2300      	movne	r3, #0
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d000      	beq.n	80021a6 <_ZN4BG9519TransmitSendRequestEv+0x13a>
 80021a4:	e7ea      	b.n	800217c <_ZN4BG9519TransmitSendRequestEv+0x110>

	return state;
 80021a6:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80021aa:	b29b      	uxth	r3, r3
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3744      	adds	r7, #68	; 0x44
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bd90      	pop	{r4, r7, pc}
 80021b4:	08025568 	.word	0x08025568

080021b8 <_ZN23CAN_RData_HandleTypeDefC1Ev>:
typedef struct
{
	int rxid_;
	int data_length_;
	unsigned char read_Data_Byte_[8] = {0,};
} CAN_RData_HandleTypeDef;
 80021b8:	b480      	push	{r7}
 80021ba:	b083      	sub	sp, #12
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	3308      	adds	r3, #8
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4618      	mov	r0, r3
 80021ce:	370c      	adds	r7, #12
 80021d0:	46bd      	mov	sp, r7
 80021d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d6:	4770      	bx	lr

080021d8 <_ZN4BG9523TransmitReceiveResponseEv>:

uint16_t BG95::TransmitReceiveResponse()
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b094      	sub	sp, #80	; 0x50
 80021dc:	af02      	add	r7, sp, #8
 80021de:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;

	uint8_t RxData[8] = {0,};
 80021e0:	2300      	movs	r3, #0
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	2300      	movs	r3, #0
 80021e6:	623b      	str	r3, [r7, #32]
	uint8_t state = HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

	CAN_RData_HandleTypeDef cal_data;
 80021ee:	f107 030c 	add.w	r3, r7, #12
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7ff ffe0 	bl	80021b8 <_ZN23CAN_RData_HandleTypeDefC1Ev>
	/* Monitoring queue until at least one message is received */
	//if(HAL_CAN_GetRxFifoFillLevel(this->hcanx_, CAN_RX_FIFO0) == 0) return HAL_ERROR;
	//while(HAL_CAN_GetRxFifoFillLevel(this->hcanx_, CAN_RX_FIFO0) != 1)

	/* Configure Receive process */
	state = HAL_CANReceive(this->hcanx_, &RxHeader, (unsigned char*)RxData);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f107 021c 	add.w	r2, r7, #28
 8002200:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8002204:	4618      	mov	r0, r3
 8002206:	f008 f83d 	bl	800a284 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>
 800220a:	4603      	mov	r3, r0
 800220c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43



	/*if data is vaild*/
	if(state == HAL_OK)
 8002210:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8002214:	2b00      	cmp	r3, #0
 8002216:	d11f      	bne.n	8002258 <_ZN4BG9523TransmitReceiveResponseEv+0x80>
	{
		cal_data.rxid_ = RxHeader.StdId;
 8002218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800221a:	60fb      	str	r3, [r7, #12]

		cal_data.data_length_ = RxHeader.DLC;
 800221c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800221e:	613b      	str	r3, [r7, #16]

		for(int i =0; i<=7; i++) cal_data.read_Data_Byte_[i] = RxData[i];
 8002220:	2300      	movs	r3, #0
 8002222:	647b      	str	r3, [r7, #68]	; 0x44
 8002224:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002226:	2b07      	cmp	r3, #7
 8002228:	dc0e      	bgt.n	8002248 <_ZN4BG9523TransmitReceiveResponseEv+0x70>
 800222a:	f107 021c 	add.w	r2, r7, #28
 800222e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002230:	4413      	add	r3, r2
 8002232:	7819      	ldrb	r1, [r3, #0]
 8002234:	f107 0214 	add.w	r2, r7, #20
 8002238:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800223a:	4413      	add	r3, r2
 800223c:	460a      	mov	r2, r1
 800223e:	701a      	strb	r2, [r3, #0]
 8002240:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002242:	3301      	adds	r3, #1
 8002244:	647b      	str	r3, [r7, #68]	; 0x44
 8002246:	e7ed      	b.n	8002224 <_ZN4BG9523TransmitReceiveResponseEv+0x4c>

		QueueSaveReceive(cal_data);
 8002248:	69bb      	ldr	r3, [r7, #24]
 800224a:	9300      	str	r3, [sp, #0]
 800224c:	f107 030c 	add.w	r3, r7, #12
 8002250:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002252:	6878      	ldr	r0, [r7, #4]
 8002254:	f000 fab5 	bl	80027c2 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>
	}

	return state;
 8002258:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800225c:	b29b      	uxth	r3, r3
}
 800225e:	4618      	mov	r0, r3
 8002260:	3748      	adds	r7, #72	; 0x48
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}

08002266 <_ZN23CAN_WData_HandleTypeDefC1Ev>:
} CAN_WData_HandleTypeDef;
 8002266:	b480      	push	{r7}
 8002268:	b083      	sub	sp, #12
 800226a:	af00      	add	r7, sp, #0
 800226c:	6078      	str	r0, [r7, #4]
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	3308      	adds	r3, #8
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	4618      	mov	r0, r3
 800227c:	370c      	adds	r7, #12
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr

08002286 <_ZN4BG9516WriteDataEnqueueEiii>:

//---------------------------------------------------------------Command queue functions
//queue system functions
void BG95::WriteDataEnqueue(int index, int subindex, int data)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b090      	sub	sp, #64	; 0x40
 800228a:	af02      	add	r7, sp, #8
 800228c:	60f8      	str	r0, [r7, #12]
 800228e:	60b9      	str	r1, [r7, #8]
 8002290:	607a      	str	r2, [r7, #4]
 8002292:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 8002294:	f107 0310 	add.w	r3, r7, #16
 8002298:	4618      	mov	r0, r3
 800229a:	f7ff ffe4 	bl	8002266 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 800229e:	68bb      	ldr	r3, [r7, #8]
 80022a0:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/

	if(data_ > 0xffff || data_< 0) { data_size_ = 4;}
 80022ae:	6a3b      	ldr	r3, [r7, #32]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	da02      	bge.n	80022bc <_ZN4BG9516WriteDataEnqueueEiii+0x36>
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	da02      	bge.n	80022c2 <_ZN4BG9516WriteDataEnqueueEiii+0x3c>
 80022bc:	2304      	movs	r3, #4
 80022be:	633b      	str	r3, [r7, #48]	; 0x30
 80022c0:	e007      	b.n	80022d2 <_ZN4BG9516WriteDataEnqueueEiii+0x4c>
	else if(data_ > 0xff) {data_size_ = 2;}
 80022c2:	6a3b      	ldr	r3, [r7, #32]
 80022c4:	2bff      	cmp	r3, #255	; 0xff
 80022c6:	dd02      	ble.n	80022ce <_ZN4BG9516WriteDataEnqueueEiii+0x48>
 80022c8:	2302      	movs	r3, #2
 80022ca:	633b      	str	r3, [r7, #48]	; 0x30
 80022cc:	e001      	b.n	80022d2 <_ZN4BG9516WriteDataEnqueueEiii+0x4c>
	else { data_size_ = 1;}
 80022ce:	2301      	movs	r3, #1
 80022d0:	633b      	str	r3, [r7, #48]	; 0x30


	/*to confirm the command byte*/
	switch(data_size_)
 80022d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d00f      	beq.n	80022f8 <_ZN4BG9516WriteDataEnqueueEiii+0x72>
 80022d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022da:	2b04      	cmp	r3, #4
 80022dc:	dc0f      	bgt.n	80022fe <_ZN4BG9516WriteDataEnqueueEiii+0x78>
 80022de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e0:	2b01      	cmp	r3, #1
 80022e2:	d003      	beq.n	80022ec <_ZN4BG9516WriteDataEnqueueEiii+0x66>
 80022e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d003      	beq.n	80022f2 <_ZN4BG9516WriteDataEnqueueEiii+0x6c>
 80022ea:	e008      	b.n	80022fe <_ZN4BG9516WriteDataEnqueueEiii+0x78>
	{
		case 1: txid = 0x2f; break;
 80022ec:	232f      	movs	r3, #47	; 0x2f
 80022ee:	637b      	str	r3, [r7, #52]	; 0x34
 80022f0:	e008      	b.n	8002304 <_ZN4BG9516WriteDataEnqueueEiii+0x7e>
		case 2: txid = 0x2b; break;
 80022f2:	232b      	movs	r3, #43	; 0x2b
 80022f4:	637b      	str	r3, [r7, #52]	; 0x34
 80022f6:	e005      	b.n	8002304 <_ZN4BG9516WriteDataEnqueueEiii+0x7e>
		case 4: txid = 0x23; break;
 80022f8:	2323      	movs	r3, #35	; 0x23
 80022fa:	637b      	str	r3, [r7, #52]	; 0x34
 80022fc:	e002      	b.n	8002304 <_ZN4BG9516WriteDataEnqueueEiii+0x7e>
		default: txid = 0x22; break;
 80022fe:	2322      	movs	r3, #34	; 0x22
 8002300:	637b      	str	r3, [r7, #52]	; 0x34
 8002302:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;   //SDO
 8002304:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002308:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 800230a:	2308      	movs	r3, #8
 800230c:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 800230e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002310:	b2db      	uxtb	r3, r3
 8002312:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 8002314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002316:	b2db      	uxtb	r3, r3
 8002318:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 800231a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800231c:	121b      	asrs	r3, r3, #8
 800231e:	b2db      	uxtb	r3, r3
 8002320:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8002322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002324:	b2db      	uxtb	r3, r3
 8002326:	76fb      	strb	r3, [r7, #27]

	/*make data a lsb char to CAN buffer*/
	for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 8002328:	2304      	movs	r3, #4
 800232a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800232c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800232e:	2b07      	cmp	r3, #7
 8002330:	dc10      	bgt.n	8002354 <_ZN4BG9516WriteDataEnqueueEiii+0xce>
 8002332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002334:	3b04      	subs	r3, #4
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	6a3a      	ldr	r2, [r7, #32]
 800233a:	fa42 f303 	asr.w	r3, r2, r3
 800233e:	b2d9      	uxtb	r1, r3
 8002340:	f107 0218 	add.w	r2, r7, #24
 8002344:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002346:	4413      	add	r3, r2
 8002348:	460a      	mov	r2, r1
 800234a:	701a      	strb	r2, [r3, #0]
 800234c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800234e:	3301      	adds	r3, #1
 8002350:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002352:	e7eb      	b.n	800232c <_ZN4BG9516WriteDataEnqueueEiii+0xa6>

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 8002354:	69fb      	ldr	r3, [r7, #28]
 8002356:	9300      	str	r3, [sp, #0]
 8002358:	f107 0310 	add.w	r3, r7, #16
 800235c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	f000 f9cc 	bl	80026fc <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 8002364:	bf00      	nop
 8002366:	3738      	adds	r7, #56	; 0x38
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}

0800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>:

void BG95::AsyncWriteDataEnqueue(int index, int subindex, int data)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b090      	sub	sp, #64	; 0x40
 8002370:	af02      	add	r7, sp, #8
 8002372:	60f8      	str	r0, [r7, #12]
 8002374:	60b9      	str	r1, [r7, #8]
 8002376:	607a      	str	r2, [r7, #4]
 8002378:	603b      	str	r3, [r7, #0]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 800237a:	f107 0310 	add.w	r3, r7, #16
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff71 	bl	8002266 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int txid;
	int index_ = index;
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	62bb      	str	r3, [r7, #40]	; 0x28
	int subindex_ = subindex;
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	627b      	str	r3, [r7, #36]	; 0x24
	int data_ = data;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	623b      	str	r3, [r7, #32]
	int data_size_  = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	633b      	str	r3, [r7, #48]	; 0x30

	/*to check data byte size*/
	if(data_ > 0xffff || data_< 0) { data_size_ = 4;}
 8002394:	6a3b      	ldr	r3, [r7, #32]
 8002396:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800239a:	da02      	bge.n	80023a2 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x36>
 800239c:	6a3b      	ldr	r3, [r7, #32]
 800239e:	2b00      	cmp	r3, #0
 80023a0:	da02      	bge.n	80023a8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x3c>
 80023a2:	2304      	movs	r3, #4
 80023a4:	633b      	str	r3, [r7, #48]	; 0x30
 80023a6:	e007      	b.n	80023b8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4c>
	else if(data_ > 0xff) {data_size_ = 2;}
 80023a8:	6a3b      	ldr	r3, [r7, #32]
 80023aa:	2bff      	cmp	r3, #255	; 0xff
 80023ac:	dd02      	ble.n	80023b4 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x48>
 80023ae:	2302      	movs	r3, #2
 80023b0:	633b      	str	r3, [r7, #48]	; 0x30
 80023b2:	e001      	b.n	80023b8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x4c>
	else { data_size_ = 1;}
 80023b4:	2301      	movs	r3, #1
 80023b6:	633b      	str	r3, [r7, #48]	; 0x30

	/*to confirm the command byte*/
	switch(data_size_)
 80023b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023ba:	2b04      	cmp	r3, #4
 80023bc:	d00f      	beq.n	80023de <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x72>
 80023be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c0:	2b04      	cmp	r3, #4
 80023c2:	dc0f      	bgt.n	80023e4 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x78>
 80023c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023c6:	2b01      	cmp	r3, #1
 80023c8:	d003      	beq.n	80023d2 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x66>
 80023ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023cc:	2b02      	cmp	r3, #2
 80023ce:	d003      	beq.n	80023d8 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x6c>
 80023d0:	e008      	b.n	80023e4 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x78>
	{
		case 1: txid = 0x2f; break;
 80023d2:	232f      	movs	r3, #47	; 0x2f
 80023d4:	637b      	str	r3, [r7, #52]	; 0x34
 80023d6:	e008      	b.n	80023ea <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>
		case 2: txid = 0x2b; break;
 80023d8:	232b      	movs	r3, #43	; 0x2b
 80023da:	637b      	str	r3, [r7, #52]	; 0x34
 80023dc:	e005      	b.n	80023ea <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>
		case 4: txid = 0x23; break;
 80023de:	2323      	movs	r3, #35	; 0x23
 80023e0:	637b      	str	r3, [r7, #52]	; 0x34
 80023e2:	e002      	b.n	80023ea <_ZN4BG9521AsyncWriteDataEnqueueEiii+0x7e>
		default: txid = 0x22; break;
 80023e4:	2322      	movs	r3, #34	; 0x22
 80023e6:	637b      	str	r3, [r7, #52]	; 0x34
 80023e8:	bf00      	nop
	}

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;
 80023ea:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80023ee:	613b      	str	r3, [r7, #16]
	cal_data.data_length_ = 8;
 80023f0:	2308      	movs	r3, #8
 80023f2:	617b      	str	r3, [r7, #20]

	cal_data.write_Data_Byte_[0] = txid;    					//command byte(4bytes fixed)
 80023f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023f6:	b2db      	uxtb	r3, r3
 80023f8:	763b      	strb	r3, [r7, #24]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 80023fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023fc:	b2db      	uxtb	r3, r3
 80023fe:	767b      	strb	r3, [r7, #25]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8002400:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002402:	121b      	asrs	r3, r3, #8
 8002404:	b2db      	uxtb	r3, r3
 8002406:	76bb      	strb	r3, [r7, #26]
	cal_data.write_Data_Byte_[3] = subindex_;					//sub Index
 8002408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800240a:	b2db      	uxtb	r3, r3
 800240c:	76fb      	strb	r3, [r7, #27]

	/*make data a lsb char to CAN buffer*/
	for(int i = 4; i <= 7; i++) cal_data.write_Data_Byte_[i] = ((data_ >> (8 * (i - 4))) & 0xff);
 800240e:	2304      	movs	r3, #4
 8002410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002414:	2b07      	cmp	r3, #7
 8002416:	dc10      	bgt.n	800243a <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xce>
 8002418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800241a:	3b04      	subs	r3, #4
 800241c:	00db      	lsls	r3, r3, #3
 800241e:	6a3a      	ldr	r2, [r7, #32]
 8002420:	fa42 f303 	asr.w	r3, r2, r3
 8002424:	b2d9      	uxtb	r1, r3
 8002426:	f107 0218 	add.w	r2, r7, #24
 800242a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242c:	4413      	add	r3, r2
 800242e:	460a      	mov	r2, r1
 8002430:	701a      	strb	r2, [r3, #0]
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	3301      	adds	r3, #1
 8002436:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002438:	e7eb      	b.n	8002412 <_ZN4BG9521AsyncWriteDataEnqueueEiii+0xa6>

	/*Register data from buffer*/
	AsyncQueueSaveRequest(cal_data);
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	9300      	str	r3, [sp, #0]
 800243e:	f107 0310 	add.w	r3, r7, #16
 8002442:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002444:	68f8      	ldr	r0, [r7, #12]
 8002446:	f000 f941 	bl	80026cc <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 800244a:	bf00      	nop
 800244c:	3738      	adds	r7, #56	; 0x38
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <_ZN4BG9515ReadDataEnqueueEii>:

void BG95::ReadDataEnqueue(int index, int subindex)
{
 8002452:	b580      	push	{r7, lr}
 8002454:	b08c      	sub	sp, #48	; 0x30
 8002456:	af02      	add	r7, sp, #8
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	60b9      	str	r1, [r7, #8]
 800245c:	607a      	str	r2, [r7, #4]
	/*Declare the buffers*/
	CAN_WData_HandleTypeDef cal_data;
 800245e:	f107 0314 	add.w	r3, r7, #20
 8002462:	4618      	mov	r0, r3
 8002464:	f7ff feff 	bl	8002266 <_ZN23CAN_WData_HandleTypeDefC1Ev>
	int index_ = index;
 8002468:	68bb      	ldr	r3, [r7, #8]
 800246a:	627b      	str	r3, [r7, #36]	; 0x24

	/*input the data to buffer*/
	cal_data.txid_ = 0x600;
 800246c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002470:	617b      	str	r3, [r7, #20]
	cal_data.data_length_ = 8;
 8002472:	2308      	movs	r3, #8
 8002474:	61bb      	str	r3, [r7, #24]

	cal_data.write_Data_Byte_[0] = 0x40;    					//command byte(4bytes fixed)
 8002476:	2340      	movs	r3, #64	; 0x40
 8002478:	773b      	strb	r3, [r7, #28]
	cal_data.write_Data_Byte_[1] = (index_ & 0xff);				//Object Index (lsb)
 800247a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800247c:	b2db      	uxtb	r3, r3
 800247e:	777b      	strb	r3, [r7, #29]
	cal_data.write_Data_Byte_[2] = ((index_ >> 8) & 0xff);		//Object Index (msb)
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	121b      	asrs	r3, r3, #8
 8002484:	b2db      	uxtb	r3, r3
 8002486:	77bb      	strb	r3, [r7, #30]
	cal_data.write_Data_Byte_[3] = subindex;					//sub Index
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	b2db      	uxtb	r3, r3
 800248c:	77fb      	strb	r3, [r7, #31]

	/*Register data from buffer*/
	QueueSaveRequest(cal_data);
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	9300      	str	r3, [sp, #0]
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002498:	68f8      	ldr	r0, [r7, #12]
 800249a:	f000 f92f 	bl	80026fc <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>
}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	; 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}

080024a6 <_ZN4BG9512DataAnalysisEv>:

/*this function is just hardcode. not a final version*/
void BG95::DataAnalysis()
{
 80024a6:	b590      	push	{r4, r7, lr}
 80024a8:	b08b      	sub	sp, #44	; 0x2c
 80024aa:	af00      	add	r7, sp, #0
 80024ac:	6078      	str	r0, [r7, #4]
	//1.check Receive queue
	if((ReceiveQueue.empty())) return;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3374      	adds	r3, #116	; 0x74
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fb42 	bl	8002b3c <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 80024b8:	4603      	mov	r3, r0
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d13c      	bne.n	8002538 <_ZN4BG9512DataAnalysisEv+0x92>

	CAN_RData_HandleTypeDef recv_data = ReceiveQueue.front();
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3374      	adds	r3, #116	; 0x74
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 fb55 	bl	8002b72 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>
 80024c8:	4603      	mov	r3, r0
 80024ca:	f107 040c 	add.w	r4, r7, #12
 80024ce:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80024d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int index = 0;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
	int subindex = 0;
 80024d8:	2300      	movs	r3, #0
 80024da:	623b      	str	r3, [r7, #32]
	int data = 0;
 80024dc:	2300      	movs	r3, #0
 80024de:	61fb      	str	r3, [r7, #28]

	//2.check commandbyte is matched(sdo)
	if(recv_data.rxid_ != (this->nodeid_ + 0x580) ) return;
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	891b      	ldrh	r3, [r3, #8]
 80024e6:	f503 63b0 	add.w	r3, r3, #1408	; 0x580
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d126      	bne.n	800253c <_ZN4BG9512DataAnalysisEv+0x96>

	//3.only check read function for now
	if(!( recv_data.read_Data_Byte_[0] >= 0x40 && recv_data.read_Data_Byte_[0] <= 0x4f )) return;
 80024ee:	7d3b      	ldrb	r3, [r7, #20]
 80024f0:	2b3f      	cmp	r3, #63	; 0x3f
 80024f2:	d925      	bls.n	8002540 <_ZN4BG9512DataAnalysisEv+0x9a>
 80024f4:	7d3b      	ldrb	r3, [r7, #20]
 80024f6:	2b4f      	cmp	r3, #79	; 0x4f
 80024f8:	d822      	bhi.n	8002540 <_ZN4BG9512DataAnalysisEv+0x9a>

	//4. revert index byte
	index |= recv_data.read_Data_Byte_[1];
 80024fa:	7d7b      	ldrb	r3, [r7, #21]
 80024fc:	461a      	mov	r2, r3
 80024fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002500:	4313      	orrs	r3, r2
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
	index |= recv_data.read_Data_Byte_[2] * 0x100 ;
 8002504:	7dbb      	ldrb	r3, [r7, #22]
 8002506:	021b      	lsls	r3, r3, #8
 8002508:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800250a:	4313      	orrs	r3, r2
 800250c:	627b      	str	r3, [r7, #36]	; 0x24

	//5.revert sub-index byte
	subindex = recv_data.read_Data_Byte_[3];
 800250e:	7dfb      	ldrb	r3, [r7, #23]
 8002510:	623b      	str	r3, [r7, #32]

	//6.revert data byte
	//for(int i = 4; i <= 7; i++) data << (8 * (i - 4)) |=  recv_data.read_Data_Byte_[i];

	data = recv_data.read_Data_Byte_[4] + (recv_data.read_Data_Byte_[5]*0x100) +
 8002512:	7e3b      	ldrb	r3, [r7, #24]
 8002514:	461a      	mov	r2, r3
 8002516:	7e7b      	ldrb	r3, [r7, #25]
 8002518:	021b      	lsls	r3, r3, #8
 800251a:	441a      	add	r2, r3
			(recv_data.read_Data_Byte_[6] * 0x10000) + (recv_data.read_Data_Byte_[7]*0x1000000);
 800251c:	7ebb      	ldrb	r3, [r7, #26]
 800251e:	041b      	lsls	r3, r3, #16
	data = recv_data.read_Data_Byte_[4] + (recv_data.read_Data_Byte_[5]*0x100) +
 8002520:	441a      	add	r2, r3
			(recv_data.read_Data_Byte_[6] * 0x10000) + (recv_data.read_Data_Byte_[7]*0x1000000);
 8002522:	7efb      	ldrb	r3, [r7, #27]
 8002524:	061b      	lsls	r3, r3, #24
	data = recv_data.read_Data_Byte_[4] + (recv_data.read_Data_Byte_[5]*0x100) +
 8002526:	4413      	add	r3, r2
 8002528:	61fb      	str	r3, [r7, #28]

	DataProcess(index, subindex, data);
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	6a3a      	ldr	r2, [r7, #32]
 800252e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f000 f809 	bl	8002548 <_ZN4BG9511DataProcessEiii>
 8002536:	e004      	b.n	8002542 <_ZN4BG9512DataAnalysisEv+0x9c>
	if((ReceiveQueue.empty())) return;
 8002538:	bf00      	nop
 800253a:	e002      	b.n	8002542 <_ZN4BG9512DataAnalysisEv+0x9c>
	if(recv_data.rxid_ != (this->nodeid_ + 0x580) ) return;
 800253c:	bf00      	nop
 800253e:	e000      	b.n	8002542 <_ZN4BG9512DataAnalysisEv+0x9c>
	if(!( recv_data.read_Data_Byte_[0] >= 0x40 && recv_data.read_Data_Byte_[0] <= 0x4f )) return;
 8002540:	bf00      	nop

}
 8002542:	372c      	adds	r7, #44	; 0x2c
 8002544:	46bd      	mov	sp, r7
 8002546:	bd90      	pop	{r4, r7, pc}

08002548 <_ZN4BG9511DataProcessEiii>:

void BG95::DataProcess(int index, int subindex, int data)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	60f8      	str	r0, [r7, #12]
 8002550:	60b9      	str	r1, [r7, #8]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
	switch(index)
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	f643 2204 	movw	r2, #14852	; 0x3a04
 800255c:	4293      	cmp	r3, r2
 800255e:	d07f      	beq.n	8002660 <_ZN4BG9511DataProcessEiii+0x118>
 8002560:	68bb      	ldr	r3, [r7, #8]
 8002562:	f643 2204 	movw	r2, #14852	; 0x3a04
 8002566:	4293      	cmp	r3, r2
 8002568:	f300 80aa 	bgt.w	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	f643 1211 	movw	r2, #14609	; 0x3911
 8002572:	4293      	cmp	r3, r2
 8002574:	d070      	beq.n	8002658 <_ZN4BG9511DataProcessEiii+0x110>
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f643 1211 	movw	r2, #14609	; 0x3911
 800257c:	4293      	cmp	r3, r2
 800257e:	f300 809f 	bgt.w	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	f243 7262 	movw	r2, #14178	; 0x3762
 8002588:	4293      	cmp	r3, r2
 800258a:	d061      	beq.n	8002650 <_ZN4BG9511DataProcessEiii+0x108>
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	f243 7262 	movw	r2, #14178	; 0x3762
 8002592:	4293      	cmp	r3, r2
 8002594:	f300 8094 	bgt.w	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	f243 7260 	movw	r2, #14176	; 0x3760
 800259e:	4293      	cmp	r3, r2
 80025a0:	d052      	beq.n	8002648 <_ZN4BG9511DataProcessEiii+0x100>
 80025a2:	68bb      	ldr	r3, [r7, #8]
 80025a4:	f243 7260 	movw	r2, #14176	; 0x3760
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f300 8089 	bgt.w	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 80025ae:	68bb      	ldr	r3, [r7, #8]
 80025b0:	f243 3245 	movw	r2, #13125	; 0x3345
 80025b4:	4293      	cmp	r3, r2
 80025b6:	f300 8083 	bgt.w	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	f5b3 5f4d 	cmp.w	r3, #13120	; 0x3340
 80025c0:	da26      	bge.n	8002610 <_ZN4BG9511DataProcessEiii+0xc8>
 80025c2:	68bb      	ldr	r3, [r7, #8]
 80025c4:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 80025c8:	d051      	beq.n	800266e <_ZN4BG9511DataProcessEiii+0x126>
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f5b3 5f4c 	cmp.w	r3, #13056	; 0x3300
 80025d0:	dc76      	bgt.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	f243 1213 	movw	r2, #12563	; 0x3113
 80025d8:	4293      	cmp	r3, r2
 80025da:	d031      	beq.n	8002640 <_ZN4BG9511DataProcessEiii+0xf8>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	f243 1213 	movw	r2, #12563	; 0x3113
 80025e2:	4293      	cmp	r3, r2
 80025e4:	dc6c      	bgt.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	f243 1211 	movw	r2, #12561	; 0x3111
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d023      	beq.n	8002638 <_ZN4BG9511DataProcessEiii+0xf0>
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	f243 1211 	movw	r2, #12561	; 0x3111
 80025f6:	4293      	cmp	r3, r2
 80025f8:	dc62      	bgt.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	f243 0201 	movw	r2, #12289	; 0x3001
 8002600:	4293      	cmp	r3, r2
 8002602:	d050      	beq.n	80026a6 <_ZN4BG9511DataProcessEiii+0x15e>
 8002604:	68bb      	ldr	r3, [r7, #8]
 8002606:	f243 0202 	movw	r2, #12290	; 0x3002
 800260a:	4293      	cmp	r3, r2
 800260c:	d051      	beq.n	80026b2 <_ZN4BG9511DataProcessEiii+0x16a>

		case 0x3001: this->err_data_ = (uint16_t)data ; break;
		case 0x3002: this->stat_reg_ = (uint16_t)data ; break;

	}
}
 800260e:	e057      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
	switch(index)
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	f5a3 534d 	sub.w	r3, r3, #13120	; 0x3340
 8002616:	2b05      	cmp	r3, #5
 8002618:	d852      	bhi.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <_ZN4BG9511DataProcessEiii+0xd8>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	08002677 	.word	0x08002677
 8002624:	0800267f 	.word	0x0800267f
 8002628:	08002687 	.word	0x08002687
 800262c:	0800268f 	.word	0x0800268f
 8002630:	08002697 	.word	0x08002697
 8002634:	0800269f 	.word	0x0800269f
		case 0x3111: this->motor_voltage_ = data ; break;
 8002638:	683a      	ldr	r2, [r7, #0]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	631a      	str	r2, [r3, #48]	; 0x30
 800263e:	e03f      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3113: this->motor_current_ = data ; break;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	683a      	ldr	r2, [r7, #0]
 8002644:	635a      	str	r2, [r3, #52]	; 0x34
 8002646:	e03b      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3760: this->target_pos_ = data ; break; //actual target position
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	683a      	ldr	r2, [r7, #0]
 800264c:	63da      	str	r2, [r3, #60]	; 0x3c
 800264e:	e037      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3762: this->motor_pos_ = data ; break;  //actual position
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	683a      	ldr	r2, [r7, #0]
 8002654:	639a      	str	r2, [r3, #56]	; 0x38
 8002656:	e033      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3911: this->motor_dir_ = data ; break;//motor dir
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	683a      	ldr	r2, [r7, #0]
 800265c:	655a      	str	r2, [r3, #84]	; 0x54
 800265e:	e02f      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
			if(subindex == 1) this->motor_vel_ = data ;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b01      	cmp	r3, #1
 8002664:	d12b      	bne.n	80026be <_ZN4BG9511DataProcessEiii+0x176>
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	641a      	str	r2, [r3, #64]	; 0x40
			break;
 800266c:	e027      	b.n	80026be <_ZN4BG9511DataProcessEiii+0x176>
		case 0x3300: this->actual_max_vel_ = data; break;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	683a      	ldr	r2, [r7, #0]
 8002672:	615a      	str	r2, [r3, #20]
 8002674:	e024      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3340: this->acc_rpm_ = data; break;
 8002676:	683a      	ldr	r2, [r7, #0]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	619a      	str	r2, [r3, #24]
 800267c:	e020      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3341: this->acc_time_ = data; break;
 800267e:	683a      	ldr	r2, [r7, #0]
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	61da      	str	r2, [r3, #28]
 8002684:	e01c      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3342: this->dec_rpm_ = data; break;
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	621a      	str	r2, [r3, #32]
 800268c:	e018      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3343: this->dec_time_ = data; break;
 800268e:	683a      	ldr	r2, [r7, #0]
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	625a      	str	r2, [r3, #36]	; 0x24
 8002694:	e014      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3344: this->qdec_rpm_ = data; break;
 8002696:	683a      	ldr	r2, [r7, #0]
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	629a      	str	r2, [r3, #40]	; 0x28
 800269c:	e010      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3345: this->qdec_time_ = data; break;
 800269e:	683a      	ldr	r2, [r7, #0]
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	62da      	str	r2, [r3, #44]	; 0x2c
 80026a4:	e00c      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3001: this->err_data_ = (uint16_t)data ; break;
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	649a      	str	r2, [r3, #72]	; 0x48
 80026b0:	e006      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
		case 0x3002: this->stat_reg_ = (uint16_t)data ; break;
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	b29b      	uxth	r3, r3
 80026b6:	461a      	mov	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	645a      	str	r2, [r3, #68]	; 0x44
 80026bc:	e000      	b.n	80026c0 <_ZN4BG9511DataProcessEiii+0x178>
			break;
 80026be:	bf00      	nop
}
 80026c0:	bf00      	nop
 80026c2:	3714      	adds	r7, #20
 80026c4:	46bd      	mov	sp, r7
 80026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ca:	4770      	bx	lr

080026cc <_ZN4BG9521AsyncQueueSaveRequestE23CAN_WData_HandleTypeDef>:


void BG95::AsyncQueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->AsyncRequestQueue.push_back(cmd);}
 80026cc:	b084      	sub	sp, #16
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	f107 0014 	add.w	r0, r7, #20
 80026da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	335c      	adds	r3, #92	; 0x5c
 80026e2:	f107 0214 	add.w	r2, r7, #20
 80026e6:	4611      	mov	r1, r2
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 fa55 	bl	8002b98 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 80026ee:	bf00      	nop
 80026f0:	3708      	adds	r7, #8
 80026f2:	46bd      	mov	sp, r7
 80026f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80026f8:	b004      	add	sp, #16
 80026fa:	4770      	bx	lr

080026fc <_ZN4BG9516QueueSaveRequestE23CAN_WData_HandleTypeDef>:

void BG95::QueueSaveRequest(CAN_WData_HandleTypeDef cmd){this->RequestQueue.push_back(cmd);}
 80026fc:	b084      	sub	sp, #16
 80026fe:	b580      	push	{r7, lr}
 8002700:	b082      	sub	sp, #8
 8002702:	af00      	add	r7, sp, #0
 8002704:	6078      	str	r0, [r7, #4]
 8002706:	f107 0014 	add.w	r0, r7, #20
 800270a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	3368      	adds	r3, #104	; 0x68
 8002712:	f107 0214 	add.w	r2, r7, #20
 8002716:	4611      	mov	r1, r2
 8002718:	4618      	mov	r0, r3
 800271a:	f000 fa3d 	bl	8002b98 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 800271e:	bf00      	nop
 8002720:	3708      	adds	r7, #8
 8002722:	46bd      	mov	sp, r7
 8002724:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002728:	b004      	add	sp, #16
 800272a:	4770      	bx	lr

0800272c <_ZN4BG9518QueueDeleteRequestEv>:
void BG95::QueueDeleteRequest()
{
 800272c:	b590      	push	{r4, r7, lr}
 800272e:	b087      	sub	sp, #28
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
	/*temporary code*/
	if(!(AsyncRequestQueue.empty())) {this->AsyncRequestQueue.erase(AsyncRequestQueue.begin());}
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	335c      	adds	r3, #92	; 0x5c
 8002738:	4618      	mov	r0, r3
 800273a:	f000 f9b9 	bl	8002ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 800273e:	4603      	mov	r3, r0
 8002740:	f083 0301 	eor.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b00      	cmp	r3, #0
 8002748:	d016      	beq.n	8002778 <_ZN4BG9518QueueDeleteRequestEv+0x4c>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	335c      	adds	r3, #92	; 0x5c
 8002754:	4618      	mov	r0, r3
 8002756:	f000 fa45 	bl	8002be4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 800275a:	4603      	mov	r3, r0
 800275c:	60fb      	str	r3, [r7, #12]
 800275e:	f107 020c 	add.w	r2, r7, #12
 8002762:	f107 0308 	add.w	r3, r7, #8
 8002766:	4611      	mov	r1, r2
 8002768:	4618      	mov	r0, r3
 800276a:	f000 fa4b 	bl	8002c04 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 800276e:	68b9      	ldr	r1, [r7, #8]
 8002770:	4620      	mov	r0, r4
 8002772:	f000 fa58 	bl	8002c26 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
	else {if(!(RequestQueue.empty())) {this->RequestQueue.erase(RequestQueue.begin());}}

}
 8002776:	e020      	b.n	80027ba <_ZN4BG9518QueueDeleteRequestEv+0x8e>
	else {if(!(RequestQueue.empty())) {this->RequestQueue.erase(RequestQueue.begin());}}
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	3368      	adds	r3, #104	; 0x68
 800277c:	4618      	mov	r0, r3
 800277e:	f000 f997 	bl	8002ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 8002782:	4603      	mov	r3, r0
 8002784:	f083 0301 	eor.w	r3, r3, #1
 8002788:	b2db      	uxtb	r3, r3
 800278a:	2b00      	cmp	r3, #0
 800278c:	d015      	beq.n	80027ba <_ZN4BG9518QueueDeleteRequestEv+0x8e>
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	f103 0468 	add.w	r4, r3, #104	; 0x68
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	3368      	adds	r3, #104	; 0x68
 8002798:	4618      	mov	r0, r3
 800279a:	f000 fa23 	bl	8002be4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 800279e:	4603      	mov	r3, r0
 80027a0:	617b      	str	r3, [r7, #20]
 80027a2:	f107 0214 	add.w	r2, r7, #20
 80027a6:	f107 0310 	add.w	r3, r7, #16
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f000 fa29 	bl	8002c04 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 80027b2:	6939      	ldr	r1, [r7, #16]
 80027b4:	4620      	mov	r0, r4
 80027b6:	f000 fa36 	bl	8002c26 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 80027ba:	bf00      	nop
 80027bc:	371c      	adds	r7, #28
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd90      	pop	{r4, r7, pc}

080027c2 <_ZN4BG9516QueueSaveReceiveE23CAN_RData_HandleTypeDef>:


void BG95::QueueSaveReceive(CAN_RData_HandleTypeDef cmd){this->ReceiveQueue.push_back(cmd);}
 80027c2:	b084      	sub	sp, #16
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b082      	sub	sp, #8
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	f107 0014 	add.w	r0, r7, #20
 80027d0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3374      	adds	r3, #116	; 0x74
 80027d8:	f107 0214 	add.w	r2, r7, #20
 80027dc:	4611      	mov	r1, r2
 80027de:	4618      	mov	r0, r3
 80027e0:	f000 fa48 	bl	8002c74 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>
 80027e4:	bf00      	nop
 80027e6:	3708      	adds	r7, #8
 80027e8:	46bd      	mov	sp, r7
 80027ea:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80027ee:	b004      	add	sp, #16
 80027f0:	4770      	bx	lr

080027f2 <_ZN4BG9518QueueDeleteReceiveEv>:
void BG95::QueueDeleteReceive()
{
 80027f2:	b590      	push	{r4, r7, lr}
 80027f4:	b085      	sub	sp, #20
 80027f6:	af00      	add	r7, sp, #0
 80027f8:	6078      	str	r0, [r7, #4]
	if(!(ReceiveQueue.empty())) {this->ReceiveQueue.erase(ReceiveQueue.begin());}
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	3374      	adds	r3, #116	; 0x74
 80027fe:	4618      	mov	r0, r3
 8002800:	f000 f99c 	bl	8002b3c <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>
 8002804:	4603      	mov	r3, r0
 8002806:	f083 0301 	eor.w	r3, r3, #1
 800280a:	b2db      	uxtb	r3, r3
 800280c:	2b00      	cmp	r3, #0
 800280e:	d015      	beq.n	800283c <_ZN4BG9518QueueDeleteReceiveEv+0x4a>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f103 0474 	add.w	r4, r3, #116	; 0x74
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	3374      	adds	r3, #116	; 0x74
 800281a:	4618      	mov	r0, r3
 800281c:	f000 fa50 	bl	8002cc0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002820:	4603      	mov	r3, r0
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	f107 020c 	add.w	r2, r7, #12
 8002828:	f107 0308 	add.w	r3, r7, #8
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f000 fa56 	bl	8002ce0 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>
 8002834:	68b9      	ldr	r1, [r7, #8]
 8002836:	4620      	mov	r0, r4
 8002838:	f000 fa63 	bl	8002d02 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>
}
 800283c:	bf00      	nop
 800283e:	3714      	adds	r7, #20
 8002840:	46bd      	mov	sp, r7
 8002842:	bd90      	pop	{r4, r7, pc}

08002844 <_ZN4BG9522HAL_CAN_InitializationEv>:



//--------------------------------------------------------------------initialization
void BG95::HAL_CAN_Initialization()
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	/* Can Start */
	if ((HAL_CAN_Start(this->hcanx_) != HAL_OK))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	4618      	mov	r0, r3
 8002852:	f008 feed 	bl	800b630 <HAL_CAN_Start>
 8002856:	4603      	mov	r3, r0
 8002858:	2b00      	cmp	r3, #0
 800285a:	bf14      	ite	ne
 800285c:	2301      	movne	r3, #1
 800285e:	2300      	moveq	r3, #0
 8002860:	b2db      	uxtb	r3, r3
 8002862:	2b00      	cmp	r3, #0
 8002864:	d002      	beq.n	800286c <_ZN4BG9522HAL_CAN_InitializationEv+0x28>
	{
		this->err_code_ = initfailed;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	60da      	str	r2, [r3, #12]
	}
}
 800286c:	bf00      	nop
 800286e:	3708      	adds	r7, #8
 8002870:	46bd      	mov	sp, r7
 8002872:	bd80      	pop	{r7, pc}

08002874 <_ZN4BG9524HAL_CAN_DeInitializationEv>:

void BG95::HAL_CAN_DeInitialization()
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b082      	sub	sp, #8
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
	if (HAL_CAN_Stop(this->hcanx_) != HAL_OK){} //this->err_code_ = initfailed;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	685b      	ldr	r3, [r3, #4]
 8002880:	4618      	mov	r0, r3
 8002882:	f008 ff19 	bl	800b6b8 <HAL_CAN_Stop>
 8002886:	4603      	mov	r3, r0
 8002888:	2b00      	cmp	r3, #0
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <_ZN4BG959DriveInitEv>:


//--------------------------------------------------------------------Drive
void BG95::DriveInit()
{
 8002892:	b580      	push	{r7, lr}
 8002894:	b082      	sub	sp, #8
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
	/*test read function*/
	if(RequestQueue.empty()) ReadSchduleCommandEnqueue();
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	3368      	adds	r3, #104	; 0x68
 800289e:	4618      	mov	r0, r3
 80028a0:	f000 f906 	bl	8002ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>
 80028a4:	4603      	mov	r3, r0
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d002      	beq.n	80028b0 <_ZN4BG959DriveInitEv+0x1e>
 80028aa:	6878      	ldr	r0, [r7, #4]
 80028ac:	f002 f97b 	bl	8004ba6 <_ZN4BG9525ReadSchduleCommandEnqueueEv>
}
 80028b0:	bf00      	nop
 80028b2:	3708      	adds	r7, #8
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bd80      	pop	{r7, pc}

080028b8 <_ZN4BG959DriveCommEv>:


void BG95::DriveComm()
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]

	if(TransmitSendRequest()!=HAL_OK)
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f7ff fbd3 	bl	800206c <_ZN4BG9519TransmitSendRequestEv>
 80028c6:	4603      	mov	r3, r0
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	bf14      	ite	ne
 80028cc:	2301      	movne	r3, #1
 80028ce:	2300      	moveq	r3, #0
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d003      	beq.n	80028de <_ZN4BG959DriveCommEv+0x26>
	{
		this->comm_status_ = false;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	741a      	strb	r2, [r3, #16]
 80028dc:	e002      	b.n	80028e4 <_ZN4BG959DriveCommEv+0x2c>
	}
	else
	{
		this->comm_status_ = true;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2201      	movs	r2, #1
 80028e2:	741a      	strb	r2, [r3, #16]
		//can_lock_ = true;
	}

	if(TransmitReceiveResponse()!=HAL_OK)
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f7ff fc77 	bl	80021d8 <_ZN4BG9523TransmitReceiveResponseEv>
 80028ea:	4603      	mov	r3, r0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	bf14      	ite	ne
 80028f0:	2301      	movne	r3, #1
 80028f2:	2300      	moveq	r3, #0
 80028f4:	b2db      	uxtb	r3, r3
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d003      	beq.n	8002902 <_ZN4BG959DriveCommEv+0x4a>
	{
		this->comm_status_ = false;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2200      	movs	r2, #0
 80028fe:	741a      	strb	r2, [r3, #16]
	else
	{
		this->comm_status_ = true;
		//can_lock_ = false;
	}
}
 8002900:	e002      	b.n	8002908 <_ZN4BG959DriveCommEv+0x50>
		this->comm_status_ = true;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2201      	movs	r2, #1
 8002906:	741a      	strb	r2, [r3, #16]
}
 8002908:	bf00      	nop
 800290a:	3708      	adds	r7, #8
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}

08002910 <_ZN4BG9513DriveAnalysisEv>:

void BG95::DriveAnalysis()
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b082      	sub	sp, #8
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
	DataAnalysis();
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f7ff fdc4 	bl	80024a6 <_ZN4BG9512DataAnalysisEv>
	QueueDeleteRequest();
 800291e:	6878      	ldr	r0, [r7, #4]
 8002920:	f7ff ff04 	bl	800272c <_ZN4BG9518QueueDeleteRequestEv>
	QueueDeleteReceive();
 8002924:	6878      	ldr	r0, [r7, #4]
 8002926:	f7ff ff64 	bl	80027f2 <_ZN4BG9518QueueDeleteReceiveEv>
	//ProcessGetTotalInfo();
}
 800292a:	bf00      	nop
 800292c:	3708      	adds	r7, #8
 800292e:	46bd      	mov	sp, r7
 8002930:	bd80      	pop	{r7, pc}

08002932 <_ZN4BG9514InitializationEv>:

//--------------------------------------------------------------------Applications
//main functions

void BG95::Initialization()
{
 8002932:	b580      	push	{r7, lr}
 8002934:	b082      	sub	sp, #8
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
	InitializeCommand();
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f002 f995 	bl	8004c6a <_ZN4BG9517InitializeCommandEv>

	HAL_CAN_Initialization();
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff7f 	bl	8002844 <_ZN4BG9522HAL_CAN_InitializationEv>
}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}

0800294e <_ZN4BG955DriveEv>:

}


void BG95::Drive()
{
 800294e:	b580      	push	{r7, lr}
 8002950:	b082      	sub	sp, #8
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
	DriveInit();
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	f7ff ff9b 	bl	8002892 <_ZN4BG959DriveInitEv>

	DriveComm();
 800295c:	6878      	ldr	r0, [r7, #4]
 800295e:	f7ff ffab 	bl	80028b8 <_ZN4BG959DriveCommEv>

	DriveAnalysis();
 8002962:	6878      	ldr	r0, [r7, #4]
 8002964:	f7ff ffd4 	bl	8002910 <_ZN4BG9513DriveAnalysisEv>
}
 8002968:	bf00      	nop
 800296a:	3708      	adds	r7, #8
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002970:	b580      	push	{r7, lr}
 8002972:	b082      	sub	sp, #8
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 f9e9 	bl	8002d50 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	4618      	mov	r0, r3
 8002982:	f000 f9f1 	bl	8002d68 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4618      	mov	r0, r3
 800298a:	3708      	adds	r7, #8
 800298c:	46bd      	mov	sp, r7
 800298e:	bd80      	pop	{r7, pc}

08002990 <_ZNSaI23CAN_WData_HandleTypeDefED1Ev>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

#if __cpp_constexpr_dynamic_alloc
      constexpr
#endif
      ~allocator() _GLIBCXX_NOTHROW { }
 8002990:	b580      	push	{r7, lr}
 8002992:	b082      	sub	sp, #8
 8002994:	af00      	add	r7, sp, #0
 8002996:	6078      	str	r0, [r7, #4]
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	f000 f9f9 	bl	8002d90 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	3708      	adds	r7, #8
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}

080029a8 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689a      	ldr	r2, [r3, #8]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 80029c0:	461a      	mov	r2, r3
 80029c2:	6878      	ldr	r0, [r7, #4]
 80029c4:	f000 f9ef 	bl	8002da6 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff fa79 	bl	8001ec2 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}

080029da <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80029da:	b5b0      	push	{r4, r5, r7, lr}
 80029dc:	b082      	sub	sp, #8
 80029de:	af00      	add	r7, sp, #0
 80029e0:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681c      	ldr	r4, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	4618      	mov	r0, r3
 80029ee:	f000 f9ed 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80029f2:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80029f4:	461a      	mov	r2, r3
 80029f6:	4629      	mov	r1, r5
 80029f8:	4620      	mov	r0, r4
 80029fa:	f000 f9f2 	bl	8002de2 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	4618      	mov	r0, r3
 8002a02:	f7ff ffd1 	bl	80029a8 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EED1Ev>
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3708      	adds	r7, #8
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bdb0      	pop	{r4, r5, r7, pc}

08002a10 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f9f0 	bl	8002dfe <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4618      	mov	r0, r3
 8002a22:	f000 f9f8 	bl	8002e16 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3708      	adds	r7, #8
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}

08002a30 <_ZNSaI23CAN_RData_HandleTypeDefED1Ev>:
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
 8002a38:	6878      	ldr	r0, [r7, #4]
 8002a3a:	f000 fa00 	bl	8002e3e <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4618      	mov	r0, r3
 8002a42:	3708      	adds	r7, #8
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}

08002a48 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b082      	sub	sp, #8
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	689a      	ldr	r2, [r3, #8]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	111b      	asrs	r3, r3, #4
	_M_deallocate(_M_impl._M_start,
 8002a60:	461a      	mov	r2, r3
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f000 f9f6 	bl	8002e54 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      }
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	f7ff fa4f 	bl	8001f0e <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE12_Vector_implD1Ev>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4618      	mov	r0, r3
 8002a74:	3708      	adds	r7, #8
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8002a7a:	b5b0      	push	{r4, r5, r7, lr}
 8002a7c:	b082      	sub	sp, #8
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681c      	ldr	r4, [r3, #0]
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	f000 f9f4 	bl	8002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8002a92:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8002a94:	461a      	mov	r2, r3
 8002a96:	4629      	mov	r1, r5
 8002a98:	4620      	mov	r0, r4
 8002a9a:	f000 f9f9 	bl	8002e90 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      }
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7ff ffd1 	bl	8002a48 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EED1Ev>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	3708      	adds	r7, #8
 8002aac:	46bd      	mov	sp, r7
 8002aae:	bdb0      	pop	{r4, r5, r7, pc}

08002ab0 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5emptyEv>:
      /**
       *  Returns true if the %vector is empty.  (Thus begin() would
       *  equal end().)
       */
      _GLIBCXX_NODISCARD bool
      empty() const _GLIBCXX_NOEXCEPT
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 f9f7 	bl	8002eac <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002abe:	4603      	mov	r3, r0
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 fa02 	bl	8002ecc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	60fb      	str	r3, [r7, #12]
 8002acc:	f107 020c 	add.w	r2, r7, #12
 8002ad0:	f107 0308 	add.w	r3, r7, #8
 8002ad4:	4611      	mov	r1, r2
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f000 fa09 	bl	8002eee <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002adc:	4603      	mov	r3, r0
 8002ade:	4618      	mov	r0, r3
 8002ae0:	3710      	adds	r7, #16
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}

08002ae6 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %vector.
       */
      reference
      front() _GLIBCXX_NOEXCEPT
 8002ae6:	b580      	push	{r7, lr}
 8002ae8:	b084      	sub	sp, #16
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return *begin();
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 f878 	bl	8002be4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002af4:	4603      	mov	r3, r0
 8002af6:	60fb      	str	r3, [r7, #12]
 8002af8:	f107 030c 	add.w	r3, r7, #12
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fa0e 	bl	8002f1e <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002b02:	4603      	mov	r3, r0
      }
 8002b04:	4618      	mov	r0, r3
 8002b06:	3710      	adds	r7, #16
 8002b08:	46bd      	mov	sp, r7
 8002b0a:	bd80      	pop	{r7, pc}

08002b0c <_ZSt4copyIPhS0_ET0_T_S2_S1_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8002b0c:	b590      	push	{r4, r7, lr}
 8002b0e:	b085      	sub	sp, #20
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	60f8      	str	r0, [r7, #12]
 8002b14:	60b9      	str	r1, [r7, #8]
 8002b16:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8002b18:	68f8      	ldr	r0, [r7, #12]
 8002b1a:	f000 fa0c 	bl	8002f36 <_ZSt12__miter_baseIPhET_S1_>
 8002b1e:	4604      	mov	r4, r0
 8002b20:	68b8      	ldr	r0, [r7, #8]
 8002b22:	f000 fa08 	bl	8002f36 <_ZSt12__miter_baseIPhET_S1_>
 8002b26:	4603      	mov	r3, r0
 8002b28:	687a      	ldr	r2, [r7, #4]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	f000 fa0d 	bl	8002f4c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>
 8002b32:	4603      	mov	r3, r0
    }
 8002b34:	4618      	mov	r0, r3
 8002b36:	3714      	adds	r7, #20
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd90      	pop	{r4, r7, pc}

08002b3c <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b084      	sub	sp, #16
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8002b44:	6878      	ldr	r0, [r7, #4]
 8002b46:	f000 fa24 	bl	8002f92 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	60bb      	str	r3, [r7, #8]
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 fa2f 	bl	8002fb2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002b54:	4603      	mov	r3, r0
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	f107 020c 	add.w	r2, r7, #12
 8002b5c:	f107 0308 	add.w	r3, r7, #8
 8002b60:	4611      	mov	r1, r2
 8002b62:	4618      	mov	r0, r3
 8002b64:	f000 fa36 	bl	8002fd4 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	3710      	adds	r7, #16
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}

08002b72 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8002b72:	b580      	push	{r7, lr}
 8002b74:	b084      	sub	sp, #16
 8002b76:	af00      	add	r7, sp, #0
 8002b78:	6078      	str	r0, [r7, #4]
	return *begin();
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f8a0 	bl	8002cc0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002b80:	4603      	mov	r3, r0
 8002b82:	60fb      	str	r3, [r7, #12]
 8002b84:	f107 030c 	add.w	r3, r7, #12
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f000 fa3b 	bl	8003004 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>
 8002b8e:	4603      	mov	r3, r0
      }
 8002b90:	4618      	mov	r0, r3
 8002b92:	3710      	adds	r7, #16
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd80      	pop	{r7, pc}

08002b98 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
       *  to it.  Due to the nature of a %vector this operation can be
       *  done in constant time if the %vector has preallocated space
       *  available.
       */
      void
      push_back(const value_type& __x)
 8002b98:	b580      	push	{r7, lr}
 8002b9a:	b082      	sub	sp, #8
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	6039      	str	r1, [r7, #0]
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	685a      	ldr	r2, [r3, #4]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	689b      	ldr	r3, [r3, #8]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d00d      	beq.n	8002bca <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	685b      	ldr	r3, [r3, #4]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	f000 fa30 	bl	800301c <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
				     __x);
	    ++this->_M_impl._M_finish;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	685b      	ldr	r3, [r3, #4]
 8002bc0:	f103 0210 	add.w	r2, r3, #16
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_GREW(1);
	  }
	else
	  _M_realloc_insert(end(), __x);
      }
 8002bc8:	e008      	b.n	8002bdc <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002bca:	6878      	ldr	r0, [r7, #4]
 8002bcc:	f000 fa39 	bl	8003042 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	6878      	ldr	r0, [r7, #4]
 8002bd8:	f000 fa5a 	bl	8003090 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002bdc:	bf00      	nop
 8002bde:	3708      	adds	r7, #8
 8002be0:	46bd      	mov	sp, r7
 8002be2:	bd80      	pop	{r7, pc}

08002be4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b084      	sub	sp, #16
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002bec:	687a      	ldr	r2, [r7, #4]
 8002bee:	f107 030c 	add.w	r3, r7, #12
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f000 fb07 	bl	8003208 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3710      	adds	r7, #16
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
      : _M_current(__i) { }

      // Allow iterator to const_iterator conversion
      template<typename _Iter>
        _GLIBCXX20_CONSTEXPR
        __normal_iterator(const __normal_iterator<_Iter,
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b082      	sub	sp, #8
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
			  typename __enable_if<
      	       (std::__are_same<_Iter, typename _Container::pointer>::__value),
		      _Container>::__type>& __i) _GLIBCXX_NOEXCEPT
        : _M_current(__i.base()) { }
 8002c0e:	6838      	ldr	r0, [r7, #0]
 8002c10:	f000 fb0a 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002c14:	4603      	mov	r3, r0
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
       *  the pointed-to memory is not touched in any way.  Managing
       *  the pointer is the user's responsibility.
       */
      iterator
#if __cplusplus >= 201103L
      erase(const_iterator __position)
 8002c26:	b580      	push	{r7, lr}
 8002c28:	b084      	sub	sp, #16
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002c30:	6878      	ldr	r0, [r7, #4]
 8002c32:	f7ff ffd7 	bl	8002be4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 8002c36:	4603      	mov	r3, r0
 8002c38:	60bb      	str	r3, [r7, #8]
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 faff 	bl	800323e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002c40:	4603      	mov	r3, r0
 8002c42:	60fb      	str	r3, [r7, #12]
 8002c44:	f107 020c 	add.w	r2, r7, #12
 8002c48:	463b      	mov	r3, r7
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f000 fb06 	bl	800325e <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002c52:	4602      	mov	r2, r0
 8002c54:	f107 0308 	add.w	r3, r7, #8
 8002c58:	4611      	mov	r1, r2
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f000 fb14 	bl	8003288 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002c60:	4603      	mov	r3, r0
 8002c62:	4619      	mov	r1, r3
 8002c64:	6878      	ldr	r0, [r7, #4]
 8002c66:	f000 fb27 	bl	80032b8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002c6a:	4603      	mov	r3, r0
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	3710      	adds	r7, #16
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}

08002c74 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8002c74:	b580      	push	{r7, lr}
 8002c76:	b082      	sub	sp, #8
 8002c78:	af00      	add	r7, sp, #0
 8002c7a:	6078      	str	r0, [r7, #4]
 8002c7c:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	689b      	ldr	r3, [r3, #8]
 8002c86:	429a      	cmp	r2, r3
 8002c88:	d00d      	beq.n	8002ca6 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	685b      	ldr	r3, [r3, #4]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	4619      	mov	r1, r3
 8002c94:	f000 fb4d 	bl	8003332 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	685b      	ldr	r3, [r3, #4]
 8002c9c:	f103 0210 	add.w	r2, r3, #16
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	605a      	str	r2, [r3, #4]
      }
 8002ca4:	e008      	b.n	8002cb8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE9push_backERKS0_+0x44>
	  _M_realloc_insert(end(), __x);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 fb56 	bl	8003358 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 8002cac:	4603      	mov	r3, r0
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 fb78 	bl	80033a8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8002cb8:	bf00      	nop
 8002cba:	3708      	adds	r7, #8
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	bd80      	pop	{r7, pc}

08002cc0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b084      	sub	sp, #16
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	4611      	mov	r1, r2
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f000 fc25 	bl	8003520 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	3710      	adds	r7, #16
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	bd80      	pop	{r7, pc}

08002ce0 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1IPS1_EERKNS0_IT_NS_11__enable_ifIXsrSt10__are_sameISA_S9_E7__valueES6_E6__typeEEE>:
        __normal_iterator(const __normal_iterator<_Iter,
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b082      	sub	sp, #8
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
        : _M_current(__i.base()) { }
 8002cea:	6838      	ldr	r0, [r7, #0]
 8002cec:	f000 fc28 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	681a      	ldr	r2, [r3, #0]
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	601a      	str	r2, [r3, #0]
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3708      	adds	r7, #8
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5eraseEN9__gnu_cxx17__normal_iteratorIPKS0_S2_EE>:
      erase(const_iterator __position)
 8002d02:	b580      	push	{r7, lr}
 8002d04:	b084      	sub	sp, #16
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
 8002d0a:	6039      	str	r1, [r7, #0]
      { return _M_erase(begin() + (__position - cbegin())); }
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f7ff ffd7 	bl	8002cc0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 8002d12:	4603      	mov	r3, r0
 8002d14:	60bb      	str	r3, [r7, #8]
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f000 fc1d 	bl	8003556 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	60fb      	str	r3, [r7, #12]
 8002d20:	f107 020c 	add.w	r2, r7, #12
 8002d24:	463b      	mov	r3, r7
 8002d26:	4611      	mov	r1, r2
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fc24 	bl	8003576 <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	f107 0308 	add.w	r3, r7, #8
 8002d34:	4611      	mov	r1, r2
 8002d36:	4618      	mov	r0, r3
 8002d38:	f000 fc32 	bl	80035a0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8002d3c:	4603      	mov	r3, r0
 8002d3e:	4619      	mov	r1, r3
 8002d40:	6878      	ldr	r0, [r7, #4]
 8002d42:	f000 fc45 	bl	80035d0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>
 8002d46:	4603      	mov	r3, r0
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3710      	adds	r7, #16
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <_ZNSaI23CAN_WData_HandleTypeDefEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f000 fc76 	bl	800364a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}

08002d68 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	605a      	str	r2, [r3, #4]
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2200      	movs	r2, #0
 8002d80:	609a      	str	r2, [r3, #8]
	{ }
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4618      	mov	r0, r3
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefED1Ev>:
      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

#if __cplusplus <= 201703L
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b084      	sub	sp, #16
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	60f8      	str	r0, [r7, #12]
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
	if (__p)
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d005      	beq.n	8002dc4 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	68b9      	ldr	r1, [r7, #8]
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	f000 fc4e 	bl	8003660 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002dc4:	bf00      	nop
 8002dc6:	3710      	adds	r7, #16
 8002dc8:	46bd      	mov	sp, r7
 8002dca:	bd80      	pop	{r7, pc}

08002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002dcc:	b480      	push	{r7}
 8002dce:	b083      	sub	sp, #12
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	370c      	adds	r7, #12
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de0:	4770      	bx	lr

08002de2 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
#endif
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002de2:	b580      	push	{r7, lr}
 8002de4:	b084      	sub	sp, #16
 8002de6:	af00      	add	r7, sp, #0
 8002de8:	60f8      	str	r0, [r7, #12]
 8002dea:	60b9      	str	r1, [r7, #8]
 8002dec:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 8002dee:	68b9      	ldr	r1, [r7, #8]
 8002df0:	68f8      	ldr	r0, [r7, #12]
 8002df2:	f000 fc44 	bl	800367e <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>
    }
 8002df6:	bf00      	nop
 8002df8:	3710      	adds	r7, #16
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}

08002dfe <_ZNSaI23CAN_RData_HandleTypeDefEC1Ev>:
 8002dfe:	b580      	push	{r7, lr}
 8002e00:	b082      	sub	sp, #8
 8002e02:	af00      	add	r7, sp, #0
 8002e04:	6078      	str	r0, [r7, #4]
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f000 fc46 	bl	8003698 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3708      	adds	r7, #8
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}

08002e16 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2200      	movs	r2, #0
 8002e22:	601a      	str	r2, [r3, #0]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2200      	movs	r2, #0
 8002e28:	605a      	str	r2, [r3, #4]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	609a      	str	r2, [r3, #8]
	{ }
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefED1Ev>:
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4618      	mov	r0, r3
 8002e4a:	370c      	adds	r7, #12
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr

08002e54 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b084      	sub	sp, #16
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	60f8      	str	r0, [r7, #12]
 8002e5c:	60b9      	str	r1, [r7, #8]
 8002e5e:	607a      	str	r2, [r7, #4]
	if (__p)
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d005      	beq.n	8002e72 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	687a      	ldr	r2, [r7, #4]
 8002e6a:	68b9      	ldr	r1, [r7, #8]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	f000 fc1e 	bl	80036ae <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>
      }
 8002e72:	bf00      	nop
 8002e74:	3710      	adds	r7, #16
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bd80      	pop	{r7, pc}

08002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8002e7a:	b480      	push	{r7}
 8002e7c:	b083      	sub	sp, #12
 8002e7e:	af00      	add	r7, sp, #0
 8002e80:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	4618      	mov	r0, r3
 8002e86:	370c      	adds	r7, #12
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8e:	4770      	bx	lr

08002e90 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b084      	sub	sp, #16
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8002e9c:	68b9      	ldr	r1, [r7, #8]
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f000 fc14 	bl	80036cc <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>
    }
 8002ea4:	bf00      	nop
 8002ea6:	3710      	adds	r7, #16
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bd80      	pop	{r7, pc}

08002eac <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002eb4:	687a      	ldr	r2, [r7, #4]
 8002eb6:	f107 030c 	add.w	r3, r7, #12
 8002eba:	4611      	mov	r1, r2
 8002ebc:	4618      	mov	r0, r3
 8002ebe:	f000 fc12 	bl	80036e6 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	3710      	adds	r7, #16
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}

08002ecc <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	1d1a      	adds	r2, r3, #4
 8002ed8:	f107 030c 	add.w	r3, r7, #12
 8002edc:	4611      	mov	r1, r2
 8002ede:	4618      	mov	r0, r3
 8002ee0:	f000 fc01 	bl	80036e6 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3710      	adds	r7, #16
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}

08002eee <_ZN9__gnu_cxxeqIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    { return __lhs.base() == __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline bool
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002eee:	b590      	push	{r4, r7, lr}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	6039      	str	r1, [r7, #0]
	       const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() == __rhs.base(); }
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fc04 	bl	8003706 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002efe:	4603      	mov	r3, r0
 8002f00:	681c      	ldr	r4, [r3, #0]
 8002f02:	6838      	ldr	r0, [r7, #0]
 8002f04:	f000 fbff 	bl	8003706 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002f08:	4603      	mov	r3, r0
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	429c      	cmp	r4, r3
 8002f0e:	bf0c      	ite	eq
 8002f10:	2301      	moveq	r3, #1
 8002f12:	2300      	movne	r3, #0
 8002f14:	b2db      	uxtb	r3, r3
 8002f16:	4618      	mov	r0, r3
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	bd90      	pop	{r4, r7, pc}

08002f1e <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr

08002f36 <_ZSt12__miter_baseIPhET_S1_>:
  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    _GLIBCXX20_CONSTEXPR
    inline _Iterator
    __miter_base(_Iterator __it)
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4618      	mov	r0, r3
 8002f42:	370c      	adds	r7, #12
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr

08002f4c <_ZSt13__copy_move_aILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8002f4c:	b5b0      	push	{r4, r5, r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8002f58:	68f8      	ldr	r0, [r7, #12]
 8002f5a:	f000 fbdf 	bl	800371c <_ZSt12__niter_baseIPhET_S1_>
 8002f5e:	4604      	mov	r4, r0
 8002f60:	68b8      	ldr	r0, [r7, #8]
 8002f62:	f000 fbdb 	bl	800371c <_ZSt12__niter_baseIPhET_S1_>
 8002f66:	4605      	mov	r5, r0
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f000 fbd6 	bl	800371c <_ZSt12__niter_baseIPhET_S1_>
 8002f70:	4603      	mov	r3, r0
 8002f72:	461a      	mov	r2, r3
 8002f74:	4629      	mov	r1, r5
 8002f76:	4620      	mov	r0, r4
 8002f78:	f000 fbdb 	bl	8003732 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	1d3b      	adds	r3, r7, #4
 8002f80:	4611      	mov	r1, r2
 8002f82:	4618      	mov	r0, r3
 8002f84:	f000 fbe5 	bl	8003752 <_ZSt12__niter_wrapIPhET_RKS1_S1_>
 8002f88:	4603      	mov	r3, r0
    }
 8002f8a:	4618      	mov	r0, r3
 8002f8c:	3710      	adds	r7, #16
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bdb0      	pop	{r4, r5, r7, pc}

08002f92 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b084      	sub	sp, #16
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8002f9a:	687a      	ldr	r2, [r7, #4]
 8002f9c:	f107 030c 	add.w	r3, r7, #12
 8002fa0:	4611      	mov	r1, r2
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	f000 fbe1 	bl	800376a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	4618      	mov	r0, r3
 8002fac:	3710      	adds	r7, #16
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	bd80      	pop	{r7, pc}

08002fb2 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b084      	sub	sp, #16
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	1d1a      	adds	r2, r3, #4
 8002fbe:	f107 030c 	add.w	r3, r7, #12
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f000 fbd0 	bl	800376a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	3710      	adds	r7, #16
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <_ZN9__gnu_cxxeqIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 8002fd4:	b590      	push	{r4, r7, lr}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
 8002fdc:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 fbd3 	bl	800378a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	681c      	ldr	r4, [r3, #0]
 8002fe8:	6838      	ldr	r0, [r7, #0]
 8002fea:	f000 fbce 	bl	800378a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8002fee:	4603      	mov	r3, r0
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	429c      	cmp	r4, r3
 8002ff4:	bf0c      	ite	eq
 8002ff6:	2301      	moveq	r3, #1
 8002ff8:	2300      	movne	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	370c      	adds	r7, #12
 8003000:	46bd      	mov	sp, r7
 8003002:	bd90      	pop	{r4, r7, pc}

08003004 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4618      	mov	r0, r3
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 800301c:	b580      	push	{r7, lr}
 800301e:	b084      	sub	sp, #16
 8003020:	af00      	add	r7, sp, #0
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8003028:	6878      	ldr	r0, [r7, #4]
 800302a:	f000 fbb9 	bl	80037a0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800302e:	4603      	mov	r3, r0
 8003030:	461a      	mov	r2, r3
 8003032:	68b9      	ldr	r1, [r7, #8]
 8003034:	68f8      	ldr	r0, [r7, #12]
 8003036:	f000 fbbe 	bl	80037b6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 800303a:	bf00      	nop
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}

08003042 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003042:	b580      	push	{r7, lr}
 8003044:	b084      	sub	sp, #16
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	1d1a      	adds	r2, r3, #4
 800304e:	f107 030c 	add.w	r3, r7, #12
 8003052:	4611      	mov	r1, r2
 8003054:	4618      	mov	r0, r3
 8003056:	f000 f8d7 	bl	8003208 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	4618      	mov	r0, r3
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8003064:	b580      	push	{r7, lr}
 8003066:	b082      	sub	sp, #8
 8003068:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800306a:	4618      	mov	r0, r3
 800306c:	f000 f805 	bl	800307a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003070:	4603      	mov	r3, r0
      }
 8003072:	4618      	mov	r0, r3
 8003074:	3708      	adds	r7, #8
 8003076:	46bd      	mov	sp, r7
 8003078:	bd80      	pop	{r7, pc}

0800307a <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800307a:	b480      	push	{r7}
 800307c:	b083      	sub	sp, #12
 800307e:	af00      	add	r7, sp, #0
 8003080:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003082:	2301      	movs	r3, #1
      }
 8003084:	4618      	mov	r0, r3
 8003086:	370c      	adds	r7, #12
 8003088:	46bd      	mov	sp, r7
 800308a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308e:	4770      	bx	lr

08003090 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8003090:	b5b0      	push	{r4, r5, r7, lr}
 8003092:	b08c      	sub	sp, #48	; 0x30
 8003094:	af00      	add	r7, sp, #0
 8003096:	60f8      	str	r0, [r7, #12]
 8003098:	60b9      	str	r1, [r7, #8]
 800309a:	607a      	str	r2, [r7, #4]
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800309c:	4a59      	ldr	r2, [pc, #356]	; (8003204 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 800309e:	2101      	movs	r1, #1
 80030a0:	68f8      	ldr	r0, [r7, #12]
 80030a2:	f000 fba1 	bl	80037e8 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 80030a6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80030b4:	68f8      	ldr	r0, [r7, #12]
 80030b6:	f7ff fd95 	bl	8002be4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE5beginEv>
 80030ba:	4603      	mov	r3, r0
 80030bc:	617b      	str	r3, [r7, #20]
 80030be:	f107 0214 	add.w	r2, r7, #20
 80030c2:	f107 0308 	add.w	r3, r7, #8
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f000 fbd4 	bl	8003876 <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80030ce:	4603      	mov	r3, r0
 80030d0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030d6:	4618      	mov	r0, r3
 80030d8:	f000 fbe2 	bl	80038a0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 80030dc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 80030e2:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80030e4:	69fb      	ldr	r3, [r7, #28]
 80030e6:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 80030e8:	69ba      	ldr	r2, [r7, #24]
 80030ea:	18d5      	adds	r5, r2, r3
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	f000 fb57 	bl	80037a0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80030f2:	4603      	mov	r3, r0
 80030f4:	461a      	mov	r2, r3
 80030f6:	4629      	mov	r1, r5
 80030f8:	4620      	mov	r0, r4
 80030fa:	f7ff ff8f 	bl	800301c <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 80030fe:	2300      	movs	r3, #0
 8003100:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8003102:	f7ff ffaf 	bl	8003064 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d027      	beq.n	800315c <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800310c:	f107 0308 	add.w	r3, r7, #8
 8003110:	4618      	mov	r0, r3
 8003112:	f000 f889 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003116:	4603      	mov	r3, r0
 8003118:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	4618      	mov	r0, r3
 800311e:	f7ff fe55 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003122:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003124:	69ba      	ldr	r2, [r7, #24]
 8003126:	4621      	mov	r1, r4
 8003128:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800312a:	f000 fbcd 	bl	80038c8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 800312e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003130:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003132:	3310      	adds	r3, #16
 8003134:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003136:	f107 0308 	add.w	r3, r7, #8
 800313a:	4618      	mov	r0, r3
 800313c:	f000 f874 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003140:	4603      	mov	r3, r0
 8003142:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4618      	mov	r0, r3
 8003148:	f7ff fe40 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800314c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800314e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003150:	6a39      	ldr	r1, [r7, #32]
 8003152:	4620      	mov	r0, r4
 8003154:	f000 fbb8 	bl	80038c8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003158:	62f8      	str	r0, [r7, #44]	; 0x2c
 800315a:	e026      	b.n	80031aa <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 800315c:	f107 0308 	add.w	r3, r7, #8
 8003160:	4618      	mov	r0, r3
 8003162:	f000 f861 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003166:	4603      	mov	r3, r0
 8003168:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	4618      	mov	r0, r3
 800316e:	f7ff fe2d 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003172:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	4621      	mov	r1, r4
 8003178:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800317a:	f000 fbb9 	bl	80038f0 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 800317e:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8003180:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003182:	3310      	adds	r3, #16
 8003184:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8003186:	f107 0308 	add.w	r3, r7, #8
 800318a:	4618      	mov	r0, r3
 800318c:	f000 f84c 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003190:	4603      	mov	r3, r0
 8003192:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fe18 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800319c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800319e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031a0:	6a39      	ldr	r1, [r7, #32]
 80031a2:	4620      	mov	r0, r4
 80031a4:	f000 fba4 	bl	80038f0 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80031a8:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80031aa:	f7ff ff5b 	bl	8003064 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2db      	uxtb	r3, r3
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d009      	beq.n	80031ce <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff fe05 	bl	8002dcc <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80031c2:	4603      	mov	r3, r0
 80031c4:	461a      	mov	r2, r3
 80031c6:	6a39      	ldr	r1, [r7, #32]
 80031c8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80031ca:	f7ff fe0a 	bl	8002de2 <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 80031ce:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 80031da:	461a      	mov	r2, r3
 80031dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031de:	f7ff fde2 	bl	8002da6 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80031ec:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80031ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031f0:	011b      	lsls	r3, r3, #4
 80031f2:	69ba      	ldr	r2, [r7, #24]
 80031f4:	441a      	add	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	609a      	str	r2, [r3, #8]
    }
 80031fa:	bf00      	nop
 80031fc:	3730      	adds	r7, #48	; 0x30
 80031fe:	46bd      	mov	sp, r7
 8003200:	bdb0      	pop	{r4, r5, r7, pc}
 8003202:	bf00      	nop
 8003204:	08025578 	.word	0x08025578

08003208 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681a      	ldr	r2, [r3, #0]
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4618      	mov	r0, r3
 800321e:	370c      	adds	r7, #12
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr

08003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	4618      	mov	r0, r3
 8003234:	370c      	adds	r7, #12
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr

0800323e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 800323e:	b580      	push	{r7, lr}
 8003240:	b084      	sub	sp, #16
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	f107 030c 	add.w	r3, r7, #12
 800324c:	4611      	mov	r1, r2
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fa49 	bl	80036e6 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	4618      	mov	r0, r3
 8003258:	3710      	adds	r7, #16
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}

0800325e <_ZN9__gnu_cxxmiIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    _GLIBCXX20_CONSTEXPR
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800325e:	b590      	push	{r4, r7, lr}
 8003260:	b083      	sub	sp, #12
 8003262:	af00      	add	r7, sp, #0
 8003264:	6078      	str	r0, [r7, #4]
 8003266:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8003268:	6878      	ldr	r0, [r7, #4]
 800326a:	f000 fa4c 	bl	8003706 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800326e:	4603      	mov	r3, r0
 8003270:	681c      	ldr	r4, [r3, #0]
 8003272:	6838      	ldr	r0, [r7, #0]
 8003274:	f000 fa47 	bl	8003706 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003278:	4603      	mov	r3, r0
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	1ae3      	subs	r3, r4, r3
 800327e:	111b      	asrs	r3, r3, #4
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	bd90      	pop	{r4, r7, pc}

08003288 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
 8003290:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681a      	ldr	r2, [r3, #0]
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	011b      	lsls	r3, r3, #4
 800329a:	4413      	add	r3, r2
 800329c:	60fb      	str	r3, [r7, #12]
 800329e:	f107 020c 	add.w	r2, r7, #12
 80032a2:	f107 0308 	add.w	r3, r7, #8
 80032a6:	4611      	mov	r1, r2
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff ffad 	bl	8003208 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	4618      	mov	r0, r3
 80032b2:	3710      	adds	r7, #16
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80032b8:	b590      	push	{r4, r7, lr}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 80032c2:	463b      	mov	r3, r7
 80032c4:	2101      	movs	r1, #1
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff ffde 	bl	8003288 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80032cc:	4603      	mov	r3, r0
 80032ce:	60bb      	str	r3, [r7, #8]
 80032d0:	6878      	ldr	r0, [r7, #4]
 80032d2:	f7ff feb6 	bl	8003042 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 80032d6:	4603      	mov	r3, r0
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	f107 020c 	add.w	r2, r7, #12
 80032de:	f107 0308 	add.w	r3, r7, #8
 80032e2:	4611      	mov	r1, r2
 80032e4:	4618      	mov	r0, r3
 80032e6:	f000 fb29 	bl	800393c <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 80032ea:	4603      	mov	r3, r0
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d00e      	beq.n	800330e <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 80032f0:	463b      	mov	r3, r7
 80032f2:	2101      	movs	r1, #1
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7ff ffc7 	bl	8003288 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80032fa:	4604      	mov	r4, r0
 80032fc:	6878      	ldr	r0, [r7, #4]
 80032fe:	f7ff fea0 	bl	8003042 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE3endEv>
 8003302:	4603      	mov	r3, r0
 8003304:	683a      	ldr	r2, [r7, #0]
 8003306:	4619      	mov	r1, r3
 8003308:	4620      	mov	r0, r4
 800330a:	f000 fb2f 	bl	800396c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	f1a3 0210 	sub.w	r2, r3, #16
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 800331a:	687a      	ldr	r2, [r7, #4]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	4619      	mov	r1, r3
 8003322:	4610      	mov	r0, r2
 8003324:	f000 fafd 	bl	8003922 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8003328:	683b      	ldr	r3, [r7, #0]
    }
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8003332:	b580      	push	{r7, lr}
 8003334:	b084      	sub	sp, #16
 8003336:	af00      	add	r7, sp, #0
 8003338:	60f8      	str	r0, [r7, #12]
 800333a:	60b9      	str	r1, [r7, #8]
 800333c:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 fb2c 	bl	800399c <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 8003344:	4603      	mov	r3, r0
 8003346:	461a      	mov	r2, r3
 8003348:	68b9      	ldr	r1, [r7, #8]
 800334a:	68f8      	ldr	r0, [r7, #12]
 800334c:	f000 fb31 	bl	80039b2 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>
	}
 8003350:	bf00      	nop
 8003352:	3710      	adds	r7, #16
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	1d1a      	adds	r2, r3, #4
 8003364:	f107 030c 	add.w	r3, r7, #12
 8003368:	4611      	mov	r1, r2
 800336a:	4618      	mov	r0, r3
 800336c:	f000 f8d8 	bl	8003520 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	4618      	mov	r0, r3
 8003374:	3710      	adds	r7, #16
 8003376:	46bd      	mov	sp, r7
 8003378:	bd80      	pop	{r7, pc}

0800337a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 800337a:	b580      	push	{r7, lr}
 800337c:	b082      	sub	sp, #8
 800337e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8003380:	4618      	mov	r0, r3
 8003382:	f000 f805 	bl	8003390 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8003386:	4603      	mov	r3, r0
      }
 8003388:	4618      	mov	r0, r3
 800338a:	3708      	adds	r7, #8
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}

08003390 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8003390:	b480      	push	{r7}
 8003392:	b083      	sub	sp, #12
 8003394:	af00      	add	r7, sp, #0
 8003396:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8003398:	2301      	movs	r3, #1
      }
 800339a:	4618      	mov	r0, r3
 800339c:	370c      	adds	r7, #12
 800339e:	46bd      	mov	sp, r7
 80033a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a4:	4770      	bx	lr
	...

080033a8 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 80033a8:	b5b0      	push	{r4, r5, r7, lr}
 80033aa:	b08c      	sub	sp, #48	; 0x30
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	60f8      	str	r0, [r7, #12]
 80033b0:	60b9      	str	r1, [r7, #8]
 80033b2:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80033b4:	4a59      	ldr	r2, [pc, #356]	; (800351c <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 80033b6:	2101      	movs	r1, #1
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 fb13 	bl	80039e4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>
 80033be:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80033cc:	68f8      	ldr	r0, [r7, #12]
 80033ce:	f7ff fc77 	bl	8002cc0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE5beginEv>
 80033d2:	4603      	mov	r3, r0
 80033d4:	617b      	str	r3, [r7, #20]
 80033d6:	f107 0214 	add.w	r2, r7, #20
 80033da:	f107 0308 	add.w	r3, r7, #8
 80033de:	4611      	mov	r1, r2
 80033e0:	4618      	mov	r0, r3
 80033e2:	f000 fb46 	bl	8003a72 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 80033e6:	4603      	mov	r3, r0
 80033e8:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80033ee:	4618      	mov	r0, r3
 80033f0:	f000 fb54 	bl	8003a9c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>
 80033f4:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80033f6:	69bb      	ldr	r3, [r7, #24]
 80033f8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80033fa:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	011b      	lsls	r3, r3, #4
	  _Alloc_traits::construct(this->_M_impl,
 8003400:	69ba      	ldr	r2, [r7, #24]
 8003402:	18d5      	adds	r5, r2, r3
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fac9 	bl	800399c <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 800340a:	4603      	mov	r3, r0
 800340c:	461a      	mov	r2, r3
 800340e:	4629      	mov	r1, r5
 8003410:	4620      	mov	r0, r4
 8003412:	f7ff ff8e 	bl	8003332 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8003416:	2300      	movs	r3, #0
 8003418:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 800341a:	f7ff ffae 	bl	800337a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 800341e:	4603      	mov	r3, r0
 8003420:	2b00      	cmp	r3, #0
 8003422:	d027      	beq.n	8003474 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8003424:	f107 0308 	add.w	r3, r7, #8
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f889 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800342e:	4603      	mov	r3, r0
 8003430:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f7ff fd20 	bl	8002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800343a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4621      	mov	r1, r4
 8003440:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003442:	f000 fb3f 	bl	8003ac4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003446:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800344a:	3310      	adds	r3, #16
 800344c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800344e:	f107 0308 	add.w	r3, r7, #8
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f874 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003458:	4603      	mov	r3, r0
 800345a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	4618      	mov	r0, r3
 8003460:	f7ff fd0b 	bl	8002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003464:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8003466:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003468:	6a39      	ldr	r1, [r7, #32]
 800346a:	4620      	mov	r0, r4
 800346c:	f000 fb2a 	bl	8003ac4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8003470:	62f8      	str	r0, [r7, #44]	; 0x2c
 8003472:	e026      	b.n	80034c2 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8003474:	f107 0308 	add.w	r3, r7, #8
 8003478:	4618      	mov	r0, r3
 800347a:	f000 f861 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800347e:	4603      	mov	r3, r0
 8003480:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	4618      	mov	r0, r3
 8003486:	f7ff fcf8 	bl	8002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 800348a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800348c:	69ba      	ldr	r2, [r7, #24]
 800348e:	4621      	mov	r1, r4
 8003490:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003492:	f000 fb2b 	bl	8003aec <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003496:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8003498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800349a:	3310      	adds	r3, #16
 800349c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800349e:	f107 0308 	add.w	r3, r7, #8
 80034a2:	4618      	mov	r0, r3
 80034a4:	f000 f84c 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 80034a8:	4603      	mov	r3, r0
 80034aa:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	4618      	mov	r0, r3
 80034b0:	f7ff fce3 	bl	8002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80034b4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80034b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80034b8:	6a39      	ldr	r1, [r7, #32]
 80034ba:	4620      	mov	r0, r4
 80034bc:	f000 fb16 	bl	8003aec <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 80034c0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80034c2:	f7ff ff5a 	bl	800337a <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE15_S_use_relocateEv>
 80034c6:	4603      	mov	r3, r0
 80034c8:	f083 0301 	eor.w	r3, r3, #1
 80034cc:	b2db      	uxtb	r3, r3
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d009      	beq.n	80034e6 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fcd0 	bl	8002e7a <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 80034da:	4603      	mov	r3, r0
 80034dc:	461a      	mov	r2, r3
 80034de:	6a39      	ldr	r1, [r7, #32]
 80034e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80034e2:	f7ff fcd5 	bl	8002e90 <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 80034e6:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ee:	1ad3      	subs	r3, r2, r3
 80034f0:	111b      	asrs	r3, r3, #4
      _M_deallocate(__old_start,
 80034f2:	461a      	mov	r2, r3
 80034f4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034f6:	f7ff fcad 	bl	8002e54 <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003504:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8003506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003508:	011b      	lsls	r3, r3, #4
 800350a:	69ba      	ldr	r2, [r7, #24]
 800350c:	441a      	add	r2, r3
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	609a      	str	r2, [r3, #8]
    }
 8003512:	bf00      	nop
 8003514:	3730      	adds	r7, #48	; 0x30
 8003516:	46bd      	mov	sp, r7
 8003518:	bdb0      	pop	{r4, r5, r7, pc}
 800351a:	bf00      	nop
 800351c:	08025578 	.word	0x08025578

08003520 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8003520:	b480      	push	{r7}
 8003522:	b083      	sub	sp, #12
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
 8003528:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	601a      	str	r2, [r3, #0]
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	4618      	mov	r0, r3
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	4618      	mov	r0, r3
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE6cbeginEv>:
      cbegin() const noexcept
 8003556:	b580      	push	{r7, lr}
 8003558:	b084      	sub	sp, #16
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800355e:	687a      	ldr	r2, [r7, #4]
 8003560:	f107 030c 	add.w	r3, r7, #12
 8003564:	4611      	mov	r1, r2
 8003566:	4618      	mov	r0, r3
 8003568:	f000 f8ff 	bl	800376a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	4618      	mov	r0, r3
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <_ZN9__gnu_cxxmiIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003576:	b590      	push	{r4, r7, lr}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f902 	bl	800378a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003586:	4603      	mov	r3, r0
 8003588:	681c      	ldr	r4, [r3, #0]
 800358a:	6838      	ldr	r0, [r7, #0]
 800358c:	f000 f8fd 	bl	800378a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003590:	4603      	mov	r3, r0
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	1ae3      	subs	r3, r4, r3
 8003596:	111b      	asrs	r3, r3, #4
 8003598:	4618      	mov	r0, r3
 800359a:	370c      	adds	r7, #12
 800359c:	46bd      	mov	sp, r7
 800359e:	bd90      	pop	{r4, r7, pc}

080035a0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>:
      operator+(difference_type __n) const _GLIBCXX_NOEXCEPT
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b084      	sub	sp, #16
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current + __n); }
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	011b      	lsls	r3, r3, #4
 80035b2:	4413      	add	r3, r2
 80035b4:	60fb      	str	r3, [r7, #12]
 80035b6:	f107 020c 	add.w	r2, r7, #12
 80035ba:	f107 0308 	add.w	r3, r7, #8
 80035be:	4611      	mov	r1, r2
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ffad 	bl	8003520 <_ZN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 80035c6:	68bb      	ldr	r3, [r7, #8]
 80035c8:	4618      	mov	r0, r3
 80035ca:	3710      	adds	r7, #16
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}

080035d0 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE>:
    vector<_Tp, _Alloc>::
 80035d0:	b590      	push	{r4, r7, lr}
 80035d2:	b085      	sub	sp, #20
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
      if (__position + 1 != end())
 80035da:	463b      	mov	r3, r7
 80035dc:	2101      	movs	r1, #1
 80035de:	4618      	mov	r0, r3
 80035e0:	f7ff ffde 	bl	80035a0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80035e4:	4603      	mov	r3, r0
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	6878      	ldr	r0, [r7, #4]
 80035ea:	f7ff feb5 	bl	8003358 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 80035ee:	4603      	mov	r3, r0
 80035f0:	60fb      	str	r3, [r7, #12]
 80035f2:	f107 020c 	add.w	r2, r7, #12
 80035f6:	f107 0308 	add.w	r3, r7, #8
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fa9b 	bl	8003b38 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d00e      	beq.n	8003626 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8_M_eraseEN9__gnu_cxx17__normal_iteratorIPS0_S2_EE+0x56>
	_GLIBCXX_MOVE3(__position + 1, end(), __position);
 8003608:	463b      	mov	r3, r7
 800360a:	2101      	movs	r1, #1
 800360c:	4618      	mov	r0, r3
 800360e:	f7ff ffc7 	bl	80035a0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 8003612:	4604      	mov	r4, r0
 8003614:	6878      	ldr	r0, [r7, #4]
 8003616:	f7ff fe9f 	bl	8003358 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE3endEv>
 800361a:	4603      	mov	r3, r0
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	4619      	mov	r1, r3
 8003620:	4620      	mov	r0, r4
 8003622:	f000 faa1 	bl	8003b68 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>
      --this->_M_impl._M_finish;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	f1a3 0210 	sub.w	r2, r3, #16
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	605a      	str	r2, [r3, #4]
      _Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	685b      	ldr	r3, [r3, #4]
 8003638:	4619      	mov	r1, r3
 800363a:	4610      	mov	r0, r2
 800363c:	f000 fa6f 	bl	8003b1e <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
      return __position;
 8003640:	683b      	ldr	r3, [r7, #0]
    }
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	bd90      	pop	{r4, r7, pc}

0800364a <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800364a:	b480      	push	{r7}
 800364c:	b083      	sub	sp, #12
 800364e:	af00      	add	r7, sp, #0
 8003650:	6078      	str	r0, [r7, #4]
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	4618      	mov	r0, r3
 8003656:	370c      	adds	r7, #12
 8003658:	46bd      	mov	sp, r7
 800365a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365e:	4770      	bx	lr

08003660 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800366c:	687a      	ldr	r2, [r7, #4]
 800366e:	68b9      	ldr	r1, [r7, #8]
 8003670:	68f8      	ldr	r0, [r7, #12]
 8003672:	f000 fa91 	bl	8003b98 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>
 8003676:	bf00      	nop
 8003678:	3710      	adds	r7, #16
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}

0800367e <_ZSt8_DestroyIP23CAN_WData_HandleTypeDefEvT_S2_>:
   * a trivial destructor, the compiler should optimize all of this
   * away, otherwise the objects' destructors must be invoked.
   */
  template<typename _ForwardIterator>
    _GLIBCXX20_CONSTEXPR inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800367e:	b580      	push	{r7, lr}
 8003680:	b082      	sub	sp, #8
 8003682:	af00      	add	r7, sp, #0
 8003684:	6078      	str	r0, [r7, #4]
 8003686:	6039      	str	r1, [r7, #0]
#if __cplusplus > 201703L && defined __cpp_lib_is_constant_evaluated
      if (std::is_constant_evaluated())
	return _Destroy_aux<false>::__destroy(__first, __last);
#endif
      std::_Destroy_aux<__has_trivial_destructor(_Value_type)>::
	__destroy(__first, __last);
 8003688:	6839      	ldr	r1, [r7, #0]
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 fa94 	bl	8003bb8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>
    }
 8003690:	bf00      	nop
 8003692:	3708      	adds	r7, #8
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}

08003698 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefEC1Ev>:
 8003698:	b480      	push	{r7}
 800369a:	b083      	sub	sp, #12
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	4618      	mov	r0, r3
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	68b9      	ldr	r1, [r7, #8]
 80036be:	68f8      	ldr	r0, [r7, #12]
 80036c0:	f000 fa85 	bl	8003bce <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>
 80036c4:	bf00      	nop
 80036c6:	3710      	adds	r7, #16
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bd80      	pop	{r7, pc}

080036cc <_ZSt8_DestroyIP23CAN_RData_HandleTypeDefEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b082      	sub	sp, #8
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
 80036d4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80036d6:	6839      	ldr	r1, [r7, #0]
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f000 fa88 	bl	8003bee <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>
    }
 80036de:	bf00      	nop
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
 80036ee:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	601a      	str	r2, [r3, #0]
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4618      	mov	r0, r3
 80036fc:	370c      	adds	r7, #12
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr

08003706 <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8003706:	b480      	push	{r7}
 8003708:	b083      	sub	sp, #12
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4618      	mov	r0, r3
 8003712:	370c      	adds	r7, #12
 8003714:	46bd      	mov	sp, r7
 8003716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800371a:	4770      	bx	lr

0800371c <_ZSt12__niter_baseIPhET_S1_>:
    __niter_base(_Iterator __it)
 800371c:	b480      	push	{r7}
 800371e:	b083      	sub	sp, #12
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4618      	mov	r0, r3
 8003728:	370c      	adds	r7, #12
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <_ZSt14__copy_move_a1ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800373e:	687a      	ldr	r2, [r7, #4]
 8003740:	68b9      	ldr	r1, [r7, #8]
 8003742:	68f8      	ldr	r0, [r7, #12]
 8003744:	f000 fa5e 	bl	8003c04 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>
 8003748:	4603      	mov	r3, r0
 800374a:	4618      	mov	r0, r3
 800374c:	3710      	adds	r7, #16
 800374e:	46bd      	mov	sp, r7
 8003750:	bd80      	pop	{r7, pc}

08003752 <_ZSt12__niter_wrapIPhET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8003752:	b480      	push	{r7}
 8003754:	b083      	sub	sp, #12
 8003756:	af00      	add	r7, sp, #0
 8003758:	6078      	str	r0, [r7, #4]
 800375a:	6039      	str	r1, [r7, #0]
    { return __res; }
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr

0800376a <_ZN9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 800376a:	b480      	push	{r7}
 800376c:	b083      	sub	sp, #12
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
 8003772:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	681a      	ldr	r2, [r3, #0]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	601a      	str	r2, [r3, #0]
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4618      	mov	r0, r3
 8003780:	370c      	adds	r7, #12
 8003782:	46bd      	mov	sp, r7
 8003784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003788:	4770      	bx	lr

0800378a <_ZNK9__gnu_cxx17__normal_iteratorIPK23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800378a:	b480      	push	{r7}
 800378c:	b083      	sub	sp, #12
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	4618      	mov	r0, r3
 8003796:	370c      	adds	r7, #12
 8003798:	46bd      	mov	sp, r7
 800379a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800379e:	4770      	bx	lr

080037a0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80037a0:	b480      	push	{r7}
 80037a2:	b083      	sub	sp, #12
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	4618      	mov	r0, r3
 80037ac:	370c      	adds	r7, #12
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr

080037b6 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
      { return _M_max_size(); }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 80037b6:	b5b0      	push	{r4, r5, r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	60f8      	str	r0, [r7, #12]
 80037be:	60b9      	str	r1, [r7, #8]
 80037c0:	607a      	str	r2, [r7, #4]
	noexcept(std::is_nothrow_constructible<_Up, _Args...>::value)
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80037c2:	6878      	ldr	r0, [r7, #4]
 80037c4:	f7ff ffec 	bl	80037a0 <_ZSt7forwardIRK23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80037c8:	4605      	mov	r5, r0
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	4619      	mov	r1, r3
 80037ce:	2010      	movs	r0, #16
 80037d0:	f7fe fb6b 	bl	8001eaa <_ZnwjPv>
 80037d4:	4603      	mov	r3, r0
 80037d6:	461c      	mov	r4, r3
 80037d8:	462b      	mov	r3, r5
 80037da:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80037dc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80037e0:	bf00      	nop
 80037e2:	3710      	adds	r7, #16
 80037e4:	46bd      	mov	sp, r7
 80037e6:	bdb0      	pop	{r4, r5, r7, pc}

080037e8 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 80037e8:	b590      	push	{r4, r7, lr}
 80037ea:	b087      	sub	sp, #28
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fa15 	bl	8003c24 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80037fa:	4604      	mov	r4, r0
 80037fc:	68f8      	ldr	r0, [r7, #12]
 80037fe:	f000 fa22 	bl	8003c46 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003802:	4603      	mov	r3, r0
 8003804:	1ae2      	subs	r2, r4, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	429a      	cmp	r2, r3
 800380a:	bf34      	ite	cc
 800380c:	2301      	movcc	r3, #1
 800380e:	2300      	movcs	r3, #0
 8003810:	b2db      	uxtb	r3, r3
 8003812:	2b00      	cmp	r3, #0
 8003814:	d002      	beq.n	800381c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f01f faef 	bl	8022dfa <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 fa12 	bl	8003c46 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 8003822:	4604      	mov	r4, r0
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f000 fa0e 	bl	8003c46 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800382a:	4603      	mov	r3, r0
 800382c:	613b      	str	r3, [r7, #16]
 800382e:	f107 0208 	add.w	r2, r7, #8
 8003832:	f107 0310 	add.w	r3, r7, #16
 8003836:	4611      	mov	r1, r2
 8003838:	4618      	mov	r0, r3
 800383a:	f000 fa14 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 800383e:	4603      	mov	r3, r0
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4423      	add	r3, r4
 8003844:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003846:	68f8      	ldr	r0, [r7, #12]
 8003848:	f000 f9fd 	bl	8003c46 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>
 800384c:	4602      	mov	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	4293      	cmp	r3, r2
 8003852:	d306      	bcc.n	8003862 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003854:	68f8      	ldr	r0, [r7, #12]
 8003856:	f000 f9e5 	bl	8003c24 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 800385a:	4602      	mov	r2, r0
 800385c:	697b      	ldr	r3, [r7, #20]
 800385e:	4293      	cmp	r3, r2
 8003860:	d904      	bls.n	800386c <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8003862:	68f8      	ldr	r0, [r7, #12]
 8003864:	f000 f9de 	bl	8003c24 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003868:	4603      	mov	r3, r0
 800386a:	e000      	b.n	800386e <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 800386c:	697b      	ldr	r3, [r7, #20]
      }
 800386e:	4618      	mov	r0, r3
 8003870:	371c      	adds	r7, #28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd90      	pop	{r4, r7, pc}

08003876 <_ZN9__gnu_cxxmiIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003876:	b590      	push	{r4, r7, lr}
 8003878:	b083      	sub	sp, #12
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	f7ff fcd1 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003886:	4603      	mov	r3, r0
 8003888:	681c      	ldr	r4, [r3, #0]
 800388a:	6838      	ldr	r0, [r7, #0]
 800388c:	f7ff fccc 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003890:	4603      	mov	r3, r0
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	1ae3      	subs	r3, r4, r3
 8003896:	111b      	asrs	r3, r3, #4
 8003898:	4618      	mov	r0, r3
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	bd90      	pop	{r4, r7, pc}

080038a0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b082      	sub	sp, #8
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d006      	beq.n	80038be <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6839      	ldr	r1, [r7, #0]
 80038b4:	4618      	mov	r0, r3
 80038b6:	f000 f9ea 	bl	8003c8e <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>
 80038ba:	4603      	mov	r3, r0
 80038bc:	e000      	b.n	80038c0 <_ZNSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 80038be:	2300      	movs	r3, #0
      }
 80038c0:	4618      	mov	r0, r3
 80038c2:	3708      	adds	r7, #8
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}

080038c8 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80038c8:	b590      	push	{r4, r7, lr}
 80038ca:	b087      	sub	sp, #28
 80038cc:	af02      	add	r7, sp, #8
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80038d6:	f88d 4000 	strb.w	r4, [sp]
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	68b9      	ldr	r1, [r7, #8]
 80038e0:	68f8      	ldr	r0, [r7, #12]
 80038e2:	f000 f9e3 	bl	8003cac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80038e6:	4603      	mov	r3, r0
      }
 80038e8:	4618      	mov	r0, r3
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd90      	pop	{r4, r7, pc}

080038f0 <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80038f0:	b590      	push	{r4, r7, lr}
 80038f2:	b085      	sub	sp, #20
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	60f8      	str	r0, [r7, #12]
 80038f8:	60b9      	str	r1, [r7, #8]
 80038fa:	607a      	str	r2, [r7, #4]
 80038fc:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80038fe:	68f8      	ldr	r0, [r7, #12]
 8003900:	f000 f9e6 	bl	8003cd0 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003904:	4604      	mov	r4, r0
 8003906:	68b8      	ldr	r0, [r7, #8]
 8003908:	f000 f9e2 	bl	8003cd0 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 800390c:	4601      	mov	r1, r0
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	687a      	ldr	r2, [r7, #4]
 8003912:	4620      	mov	r0, r4
 8003914:	f000 f9eb 	bl	8003cee <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003918:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 800391a:	4618      	mov	r0, r3
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	bd90      	pop	{r4, r7, pc}

08003922 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003922:	b580      	push	{r7, lr}
 8003924:	b082      	sub	sp, #8
 8003926:	af00      	add	r7, sp, #0
 8003928:	6078      	str	r0, [r7, #4]
 800392a:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 800392c:	6839      	ldr	r1, [r7, #0]
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f9ee 	bl	8003d10 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003934:	bf00      	nop
 8003936:	3708      	adds	r7, #8
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}

0800393c <_ZN9__gnu_cxxneIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 800393c:	b590      	push	{r4, r7, lr}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
 8003944:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003946:	6878      	ldr	r0, [r7, #4]
 8003948:	f7ff fc6e 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800394c:	4603      	mov	r3, r0
 800394e:	681c      	ldr	r4, [r3, #0]
 8003950:	6838      	ldr	r0, [r7, #0]
 8003952:	f7ff fc69 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003956:	4603      	mov	r3, r0
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	429c      	cmp	r4, r3
 800395c:	bf14      	ite	ne
 800395e:	2301      	movne	r3, #1
 8003960:	2300      	moveq	r3, #0
 8003962:	b2db      	uxtb	r3, r3
 8003964:	4618      	mov	r0, r3
 8003966:	370c      	adds	r7, #12
 8003968:	46bd      	mov	sp, r7
 800396a:	bd90      	pop	{r4, r7, pc}

0800396c <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    _GLIBCXX20_CONSTEXPR
    inline _OI
    move(_II __first, _II __last, _OI __result)
 800396c:	b590      	push	{r4, r7, lr}
 800396e:	b085      	sub	sp, #20
 8003970:	af00      	add	r7, sp, #0
 8003972:	60f8      	str	r0, [r7, #12]
 8003974:	60b9      	str	r1, [r7, #8]
 8003976:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_InputIteratorConcept<_II>)
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a<true>(std::__miter_base(__first),
 8003978:	68f8      	ldr	r0, [r7, #12]
 800397a:	f000 f9d4 	bl	8003d26 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 800397e:	4604      	mov	r4, r0
 8003980:	68b8      	ldr	r0, [r7, #8]
 8003982:	f000 f9d0 	bl	8003d26 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003986:	4603      	mov	r3, r0
 8003988:	687a      	ldr	r2, [r7, #4]
 800398a:	4619      	mov	r1, r3
 800398c:	4620      	mov	r0, r4
 800398e:	f000 f9d5 	bl	8003d3c <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003992:	4603      	mov	r3, r0
				      std::__miter_base(__last), __result);
    }
 8003994:	4618      	mov	r0, r3
 8003996:	3714      	adds	r7, #20
 8003998:	46bd      	mov	sp, r7
 800399a:	bd90      	pop	{r4, r7, pc}

0800399c <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800399c:	b480      	push	{r7}
 800399e:	b083      	sub	sp, #12
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80039b2:	b5b0      	push	{r4, r5, r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	60f8      	str	r0, [r7, #12]
 80039ba:	60b9      	str	r1, [r7, #8]
 80039bc:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80039be:	6878      	ldr	r0, [r7, #4]
 80039c0:	f7ff ffec 	bl	800399c <_ZSt7forwardIRK23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS3_E4typeE>
 80039c4:	4605      	mov	r5, r0
 80039c6:	68bb      	ldr	r3, [r7, #8]
 80039c8:	4619      	mov	r1, r3
 80039ca:	2010      	movs	r0, #16
 80039cc:	f7fe fa6d 	bl	8001eaa <_ZnwjPv>
 80039d0:	4603      	mov	r3, r0
 80039d2:	461c      	mov	r4, r3
 80039d4:	462b      	mov	r3, r5
 80039d6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80039d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80039dc:	bf00      	nop
 80039de:	3710      	adds	r7, #16
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bdb0      	pop	{r4, r5, r7, pc}

080039e4 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80039f0:	68f8      	ldr	r0, [r7, #12]
 80039f2:	f000 f9c4 	bl	8003d7e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 80039f6:	4604      	mov	r4, r0
 80039f8:	68f8      	ldr	r0, [r7, #12]
 80039fa:	f000 f9d1 	bl	8003da0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 80039fe:	4603      	mov	r3, r0
 8003a00:	1ae2      	subs	r2, r4, r3
 8003a02:	68bb      	ldr	r3, [r7, #8]
 8003a04:	429a      	cmp	r2, r3
 8003a06:	bf34      	ite	cc
 8003a08:	2301      	movcc	r3, #1
 8003a0a:	2300      	movcs	r3, #0
 8003a0c:	b2db      	uxtb	r3, r3
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d002      	beq.n	8003a18 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8003a12:	6878      	ldr	r0, [r7, #4]
 8003a14:	f01f f9f1 	bl	8022dfa <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 f9c1 	bl	8003da0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003a1e:	4604      	mov	r4, r0
 8003a20:	68f8      	ldr	r0, [r7, #12]
 8003a22:	f000 f9bd 	bl	8003da0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003a26:	4603      	mov	r3, r0
 8003a28:	613b      	str	r3, [r7, #16]
 8003a2a:	f107 0208 	add.w	r2, r7, #8
 8003a2e:	f107 0310 	add.w	r3, r7, #16
 8003a32:	4611      	mov	r1, r2
 8003a34:	4618      	mov	r0, r3
 8003a36:	f000 f916 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 8003a3a:	4603      	mov	r3, r0
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4423      	add	r3, r4
 8003a40:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8003a42:	68f8      	ldr	r0, [r7, #12]
 8003a44:	f000 f9ac 	bl	8003da0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>
 8003a48:	4602      	mov	r2, r0
 8003a4a:	697b      	ldr	r3, [r7, #20]
 8003a4c:	4293      	cmp	r3, r2
 8003a4e:	d306      	bcc.n	8003a5e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8003a50:	68f8      	ldr	r0, [r7, #12]
 8003a52:	f000 f994 	bl	8003d7e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003a56:	4602      	mov	r2, r0
 8003a58:	697b      	ldr	r3, [r7, #20]
 8003a5a:	4293      	cmp	r3, r2
 8003a5c:	d904      	bls.n	8003a68 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x84>
 8003a5e:	68f8      	ldr	r0, [r7, #12]
 8003a60:	f000 f98d 	bl	8003d7e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>
 8003a64:	4603      	mov	r3, r0
 8003a66:	e000      	b.n	8003a6a <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE12_M_check_lenEjPKc+0x86>
 8003a68:	697b      	ldr	r3, [r7, #20]
      }
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	bd90      	pop	{r4, r7, pc}

08003a72 <_ZN9__gnu_cxxmiIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003a72:	b590      	push	{r4, r7, lr}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
 8003a7a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fd5f 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003a82:	4603      	mov	r3, r0
 8003a84:	681c      	ldr	r4, [r3, #0]
 8003a86:	6838      	ldr	r0, [r7, #0]
 8003a88:	f7ff fd5a 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	1ae3      	subs	r3, r4, r3
 8003a92:	111b      	asrs	r3, r3, #4
 8003a94:	4618      	mov	r0, r3
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	bd90      	pop	{r4, r7, pc}

08003a9c <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
 8003aa4:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d006      	beq.n	8003aba <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x1e>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	6839      	ldr	r1, [r7, #0]
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	f000 f985 	bl	8003dc0 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	e000      	b.n	8003abc <_ZNSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE11_M_allocateEj+0x20>
 8003aba:	2300      	movs	r3, #0
      }
 8003abc:	4618      	mov	r0, r3
 8003abe:	3708      	adds	r7, #8
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8003ac4:	b590      	push	{r4, r7, lr}
 8003ac6:	b087      	sub	sp, #28
 8003ac8:	af02      	add	r7, sp, #8
 8003aca:	60f8      	str	r0, [r7, #12]
 8003acc:	60b9      	str	r1, [r7, #8]
 8003ace:	607a      	str	r2, [r7, #4]
 8003ad0:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8003ad2:	f88d 4000 	strb.w	r4, [sp]
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	687a      	ldr	r2, [r7, #4]
 8003ada:	68b9      	ldr	r1, [r7, #8]
 8003adc:	68f8      	ldr	r0, [r7, #12]
 8003ade:	f000 f97e 	bl	8003dde <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 8003ae2:	4603      	mov	r3, r0
      }
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd90      	pop	{r4, r7, pc}

08003aec <_ZSt34__uninitialized_move_if_noexcept_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8003aec:	b590      	push	{r4, r7, lr}
 8003aee:	b085      	sub	sp, #20
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	60f8      	str	r0, [r7, #12]
 8003af4:	60b9      	str	r1, [r7, #8]
 8003af6:	607a      	str	r2, [r7, #4]
 8003af8:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8003afa:	68f8      	ldr	r0, [r7, #12]
 8003afc:	f000 f981 	bl	8003e02 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003b00:	4604      	mov	r4, r0
 8003b02:	68b8      	ldr	r0, [r7, #8]
 8003b04:	f000 f97d 	bl	8003e02 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>
 8003b08:	4601      	mov	r1, r0
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	687a      	ldr	r2, [r7, #4]
 8003b0e:	4620      	mov	r0, r4
 8003b10:	f000 f986 	bl	8003e20 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8003b14:	4603      	mov	r3, r0
    }
 8003b16:	4618      	mov	r0, r3
 8003b18:	3714      	adds	r7, #20
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd90      	pop	{r4, r7, pc}

08003b1e <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b082      	sub	sp, #8
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
 8003b26:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8003b28:	6839      	ldr	r1, [r7, #0]
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 f989 	bl	8003e42 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>
	}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}

08003b38 <_ZN9__gnu_cxxneIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEEbRKNS_17__normal_iteratorIT_T0_EESB_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8003b38:	b590      	push	{r4, r7, lr}
 8003b3a:	b083      	sub	sp, #12
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
 8003b40:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8003b42:	6878      	ldr	r0, [r7, #4]
 8003b44:	f7ff fcfc 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	681c      	ldr	r4, [r3, #0]
 8003b4c:	6838      	ldr	r0, [r7, #0]
 8003b4e:	f7ff fcf7 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003b52:	4603      	mov	r3, r0
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	429c      	cmp	r4, r3
 8003b58:	bf14      	ite	ne
 8003b5a:	2301      	movne	r3, #1
 8003b5c:	2300      	moveq	r3, #0
 8003b5e:	b2db      	uxtb	r3, r3
 8003b60:	4618      	mov	r0, r3
 8003b62:	370c      	adds	r7, #12
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd90      	pop	{r4, r7, pc}

08003b68 <_ZSt4moveIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET0_T_S9_S8_>:
    move(_II __first, _II __last, _OI __result)
 8003b68:	b590      	push	{r4, r7, lr}
 8003b6a:	b085      	sub	sp, #20
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	60f8      	str	r0, [r7, #12]
 8003b70:	60b9      	str	r1, [r7, #8]
 8003b72:	607a      	str	r2, [r7, #4]
      return std::__copy_move_a<true>(std::__miter_base(__first),
 8003b74:	68f8      	ldr	r0, [r7, #12]
 8003b76:	f000 f96f 	bl	8003e58 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	68b8      	ldr	r0, [r7, #8]
 8003b7e:	f000 f96b 	bl	8003e58 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>
 8003b82:	4603      	mov	r3, r0
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	4619      	mov	r1, r3
 8003b88:	4620      	mov	r0, r4
 8003b8a:	f000 f970 	bl	8003e6e <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>
 8003b8e:	4603      	mov	r3, r0
    }
 8003b90:	4618      	mov	r0, r3
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd90      	pop	{r4, r7, pc}

08003b98 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b084      	sub	sp, #16
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	011b      	lsls	r3, r3, #4
 8003ba8:	4619      	mov	r1, r3
 8003baa:	68b8      	ldr	r0, [r7, #8]
 8003bac:	f01f f8fa 	bl	8022da4 <_ZdlPvj>
      }
 8003bb0:	bf00      	nop
 8003bb2:	3710      	adds	r7, #16
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}

08003bb8 <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_WData_HandleTypeDefEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	6039      	str	r1, [r7, #0]
 8003bc2:	bf00      	nop
 8003bc4:	370c      	adds	r7, #12
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bcc:	4770      	bx	lr

08003bce <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 8003bce:	b580      	push	{r7, lr}
 8003bd0:	b084      	sub	sp, #16
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	60f8      	str	r0, [r7, #12]
 8003bd6:	60b9      	str	r1, [r7, #8]
 8003bd8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	4619      	mov	r1, r3
 8003be0:	68b8      	ldr	r0, [r7, #8]
 8003be2:	f01f f8df 	bl	8022da4 <_ZdlPvj>
      }
 8003be6:	bf00      	nop
 8003be8:	3710      	adds	r7, #16
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bd80      	pop	{r7, pc}

08003bee <_ZNSt12_Destroy_auxILb1EE9__destroyIP23CAN_RData_HandleTypeDefEEvT_S4_>:
 8003bee:	b480      	push	{r7}
 8003bf0:	b083      	sub	sp, #12
 8003bf2:	af00      	add	r7, sp, #0
 8003bf4:	6078      	str	r0, [r7, #4]
 8003bf6:	6039      	str	r1, [r7, #0]
 8003bf8:	bf00      	nop
 8003bfa:	370c      	adds	r7, #12
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c02:	4770      	bx	lr

08003c04 <_ZSt14__copy_move_a2ILb0EPhS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8003c10:	687a      	ldr	r2, [r7, #4]
 8003c12:	68b9      	ldr	r1, [r7, #8]
 8003c14:	68f8      	ldr	r0, [r7, #12]
 8003c16:	f000 f94b 	bl	8003eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>
 8003c1a:	4603      	mov	r3, r0
    }
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3710      	adds	r7, #16
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b082      	sub	sp, #8
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4618      	mov	r0, r3
 8003c30:	f000 f972 	bl	8003f18 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003c34:	4603      	mov	r3, r0
 8003c36:	4618      	mov	r0, r3
 8003c38:	f000 f954 	bl	8003ee4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3708      	adds	r7, #8
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_ZNKSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	685a      	ldr	r2, [r3, #4]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	1ad3      	subs	r3, r2, r3
 8003c58:	111b      	asrs	r3, r3, #4
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	370c      	adds	r7, #12
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr

08003c66 <_ZSt3maxIjERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8003c66:	b480      	push	{r7}
 8003c68:	b083      	sub	sp, #12
 8003c6a:	af00      	add	r7, sp, #0
 8003c6c:	6078      	str	r0, [r7, #4]
 8003c6e:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	683b      	ldr	r3, [r7, #0]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d201      	bcs.n	8003c80 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8003c7c:	683b      	ldr	r3, [r7, #0]
 8003c7e:	e000      	b.n	8003c82 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8003c80:	687b      	ldr	r3, [r7, #4]
    }
 8003c82:	4618      	mov	r0, r3
 8003c84:	370c      	adds	r7, #12
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003c8e:	b580      	push	{r7, lr}
 8003c90:	b082      	sub	sp, #8
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	6078      	str	r0, [r7, #4]
 8003c96:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003c98:	2200      	movs	r2, #0
 8003c9a:	6839      	ldr	r1, [r7, #0]
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f946 	bl	8003f2e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>
 8003ca2:	4603      	mov	r3, r0
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3708      	adds	r7, #8
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	687a      	ldr	r2, [r7, #4]
 8003cbe:	68b9      	ldr	r1, [r7, #8]
 8003cc0:	68f8      	ldr	r0, [r7, #12]
 8003cc2:	f000 f952 	bl	8003f6a <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003cc6:	4603      	mov	r3, r0
      }
 8003cc8:	4618      	mov	r0, r3
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}

08003cd0 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_WData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003cd0:	b580      	push	{r7, lr}
 8003cd2:	b084      	sub	sp, #16
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003cd8:	f107 030c 	add.w	r3, r7, #12
 8003cdc:	6879      	ldr	r1, [r7, #4]
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f000 f960 	bl	8003fa4 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	3710      	adds	r7, #16
 8003cea:	46bd      	mov	sp, r7
 8003cec:	bd80      	pop	{r7, pc}

08003cee <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003cee:	b580      	push	{r7, lr}
 8003cf0:	b084      	sub	sp, #16
 8003cf2:	af00      	add	r7, sp, #0
 8003cf4:	60f8      	str	r0, [r7, #12]
 8003cf6:	60b9      	str	r1, [r7, #8]
 8003cf8:	607a      	str	r2, [r7, #4]
 8003cfa:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003cfc:	687a      	ldr	r2, [r7, #4]
 8003cfe:	68b9      	ldr	r1, [r7, #8]
 8003d00:	68f8      	ldr	r0, [r7, #12]
 8003d02:	f000 f961 	bl	8003fc8 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003d06:	4603      	mov	r3, r0
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3710      	adds	r7, #16
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}

08003d10 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE7destroyIS1_EEvPT_>:

      template<typename _Up>
	void
	destroy(_Up* __p)
 8003d10:	b480      	push	{r7}
 8003d12:	b083      	sub	sp, #12
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	noexcept(std::is_nothrow_destructible<_Up>::value)
	{ __p->~_Up(); }
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr

08003d26 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003d26:	b480      	push	{r7}
 8003d28:	b083      	sub	sp, #12
 8003d2a:	af00      	add	r7, sp, #0
 8003d2c:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4618      	mov	r0, r3
 8003d32:	370c      	adds	r7, #12
 8003d34:	46bd      	mov	sp, r7
 8003d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3a:	4770      	bx	lr

08003d3c <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003d3c:	b5b0      	push	{r4, r5, r7, lr}
 8003d3e:	b084      	sub	sp, #16
 8003d40:	af00      	add	r7, sp, #0
 8003d42:	60f8      	str	r0, [r7, #12]
 8003d44:	60b9      	str	r1, [r7, #8]
 8003d46:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 f94f 	bl	8003fec <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d4e:	4604      	mov	r4, r0
 8003d50:	68b8      	ldr	r0, [r7, #8]
 8003d52:	f000 f94b 	bl	8003fec <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d56:	4605      	mov	r5, r0
 8003d58:	6878      	ldr	r0, [r7, #4]
 8003d5a:	f000 f947 	bl	8003fec <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003d5e:	4603      	mov	r3, r0
 8003d60:	461a      	mov	r2, r3
 8003d62:	4629      	mov	r1, r5
 8003d64:	4620      	mov	r0, r4
 8003d66:	f000 f94f 	bl	8004008 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	4619      	mov	r1, r3
 8003d6e:	6878      	ldr	r0, [r7, #4]
 8003d70:	f000 f95a 	bl	8004028 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003d74:	4603      	mov	r3, r0
    }
 8003d76:	4618      	mov	r0, r3
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bdb0      	pop	{r4, r5, r7, pc}

08003d7e <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8003d7e:	b580      	push	{r7, lr}
 8003d80:	b082      	sub	sp, #8
 8003d82:	af00      	add	r7, sp, #0
 8003d84:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	4618      	mov	r0, r3
 8003d8a:	f000 f97e 	bl	800408a <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	4618      	mov	r0, r3
 8003d92:	f000 f960 	bl	8004056 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>
 8003d96:	4603      	mov	r3, r0
 8003d98:	4618      	mov	r0, r3
 8003d9a:	3708      	adds	r7, #8
 8003d9c:	46bd      	mov	sp, r7
 8003d9e:	bd80      	pop	{r7, pc}

08003da0 <_ZNKSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8003da0:	b480      	push	{r7}
 8003da2:	b083      	sub	sp, #12
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	685a      	ldr	r2, [r3, #4]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	1ad3      	subs	r3, r2, r3
 8003db2:	111b      	asrs	r3, r3, #4
 8003db4:	4618      	mov	r0, r3
 8003db6:	370c      	adds	r7, #12
 8003db8:	46bd      	mov	sp, r7
 8003dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dbe:	4770      	bx	lr

08003dc0 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b082      	sub	sp, #8
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]
 8003dc8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8003dca:	2200      	movs	r2, #0
 8003dcc:	6839      	ldr	r1, [r7, #0]
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f966 	bl	80040a0 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>
 8003dd4:	4603      	mov	r3, r0
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	3708      	adds	r7, #8
 8003dda:	46bd      	mov	sp, r7
 8003ddc:	bd80      	pop	{r7, pc}

08003dde <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8003dde:	b580      	push	{r7, lr}
 8003de0:	b084      	sub	sp, #16
 8003de2:	af00      	add	r7, sp, #0
 8003de4:	60f8      	str	r0, [r7, #12]
 8003de6:	60b9      	str	r1, [r7, #8]
 8003de8:	607a      	str	r2, [r7, #4]
 8003dea:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	687a      	ldr	r2, [r7, #4]
 8003df0:	68b9      	ldr	r1, [r7, #8]
 8003df2:	68f8      	ldr	r0, [r7, #12]
 8003df4:	f000 f972 	bl	80040dc <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003df8:	4603      	mov	r3, r0
      }
 8003dfa:	4618      	mov	r0, r3
 8003dfc:	3710      	adds	r7, #16
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	bd80      	pop	{r7, pc}

08003e02 <_ZSt32__make_move_if_noexcept_iteratorI23CAN_RData_HandleTypeDefSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8003e0a:	f107 030c 	add.w	r3, r7, #12
 8003e0e:	6879      	ldr	r1, [r7, #4]
 8003e10:	4618      	mov	r0, r3
 8003e12:	f000 f980 	bl	8004116 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <_ZSt22__uninitialized_copy_aISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	60f8      	str	r0, [r7, #12]
 8003e28:	60b9      	str	r1, [r7, #8]
 8003e2a:	607a      	str	r2, [r7, #4]
 8003e2c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8003e2e:	687a      	ldr	r2, [r7, #4]
 8003e30:	68b9      	ldr	r1, [r7, #8]
 8003e32:	68f8      	ldr	r0, [r7, #12]
 8003e34:	f000 f981 	bl	800413a <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	3710      	adds	r7, #16
 8003e3e:	46bd      	mov	sp, r7
 8003e40:	bd80      	pop	{r7, pc}

08003e42 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE7destroyIS1_EEvPT_>:
	destroy(_Up* __p)
 8003e42:	b480      	push	{r7}
 8003e44:	b083      	sub	sp, #12
 8003e46:	af00      	add	r7, sp, #0
 8003e48:	6078      	str	r0, [r7, #4]
 8003e4a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEEET_S8_>:
    __miter_base(_Iterator __it)
 8003e58:	b480      	push	{r7}
 8003e5a:	b083      	sub	sp, #12
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	4618      	mov	r0, r3
 8003e64:	370c      	adds	r7, #12
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <_ZSt13__copy_move_aILb1EN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES7_ET1_T0_S9_S8_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8003e6e:	b5b0      	push	{r4, r5, r7, lr}
 8003e70:	b084      	sub	sp, #16
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f96f 	bl	800415e <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003e80:	4604      	mov	r4, r0
 8003e82:	68b8      	ldr	r0, [r7, #8]
 8003e84:	f000 f96b 	bl	800415e <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003e88:	4605      	mov	r5, r0
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f000 f967 	bl	800415e <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8003e90:	4603      	mov	r3, r0
 8003e92:	461a      	mov	r2, r3
 8003e94:	4629      	mov	r1, r5
 8003e96:	4620      	mov	r0, r4
 8003e98:	f000 f96f 	bl	800417a <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8003e9c:	4603      	mov	r3, r0
 8003e9e:	4619      	mov	r1, r3
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f000 f97a 	bl	800419a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>
 8003ea6:	4603      	mov	r3, r0
    }
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bdb0      	pop	{r4, r5, r7, pc}

08003eb0 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8003ebc:	68ba      	ldr	r2, [r7, #8]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	1ad3      	subs	r3, r2, r3
 8003ec2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIhEEPT_PKS3_S6_S4_+0x26>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	461a      	mov	r2, r3
 8003ece:	68f9      	ldr	r1, [r7, #12]
 8003ed0:	6878      	ldr	r0, [r7, #4]
 8003ed2:	f020 f8db 	bl	802408c <memmove>
	  return __result + _Num;
 8003ed6:	697b      	ldr	r3, [r7, #20]
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	4413      	add	r3, r2
	}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3718      	adds	r7, #24
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <_ZNSt6vectorI23CAN_WData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b084      	sub	sp, #16
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8003eec:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8003ef0:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f000 f968 	bl	80041c8 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8003efc:	f107 0208 	add.w	r2, r7, #8
 8003f00:	f107 030c 	add.w	r3, r7, #12
 8003f04:	4611      	mov	r1, r2
 8003f06:	4618      	mov	r0, r3
 8003f08:	f000 f96a 	bl	80041e0 <_ZSt3minIjERKT_S2_S2_>
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	681b      	ldr	r3, [r3, #0]
      }
 8003f10:	4618      	mov	r0, r3
 8003f12:	3710      	adds	r7, #16
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <_ZNKSt12_Vector_baseI23CAN_WData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4618      	mov	r0, r3
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8003f2e:	b580      	push	{r7, lr}
 8003f30:	b084      	sub	sp, #16
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	60f8      	str	r0, [r7, #12]
 8003f36:	60b9      	str	r1, [r7, #8]
 8003f38:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 f964 	bl	8004208 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 8003f40:	4602      	mov	r2, r0
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4293      	cmp	r3, r2
 8003f46:	bf8c      	ite	hi
 8003f48:	2301      	movhi	r3, #1
 8003f4a:	2300      	movls	r3, #0
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d001      	beq.n	8003f56 <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8003f52:	f01e ff4c 	bl	8022dee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	011b      	lsls	r3, r3, #4
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	f01e ff33 	bl	8022dc6 <_Znwj>
 8003f60:	4603      	mov	r3, r0
      }
 8003f62:	4618      	mov	r0, r3
 8003f64:	3710      	adds	r7, #16
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <_ZSt12__relocate_aIP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8003f6a:	b5b0      	push	{r4, r5, r7, lr}
 8003f6c:	b084      	sub	sp, #16
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	60f8      	str	r0, [r7, #12]
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8003f78:	68f8      	ldr	r0, [r7, #12]
 8003f7a:	f000 f951 	bl	8004220 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003f7e:	4604      	mov	r4, r0
 8003f80:	68b8      	ldr	r0, [r7, #8]
 8003f82:	f000 f94d 	bl	8004220 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003f86:	4605      	mov	r5, r0
 8003f88:	6878      	ldr	r0, [r7, #4]
 8003f8a:	f000 f949 	bl	8004220 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	4629      	mov	r1, r5
 8003f94:	4620      	mov	r0, r4
 8003f96:	f000 f94e 	bl	8004236 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 8003f9a:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	3710      	adds	r7, #16
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	bdb0      	pop	{r4, r5, r7, pc}

08003fa4 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b082      	sub	sp, #8
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8003fae:	463b      	mov	r3, r7
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f000 f966 	bl	8004282 <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3708      	adds	r7, #8
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}

08003fc8 <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8003fc8:	b580      	push	{r7, lr}
 8003fca:	b086      	sub	sp, #24
 8003fcc:	af00      	add	r7, sp, #0
 8003fce:	60f8      	str	r0, [r7, #12]
 8003fd0:	60b9      	str	r1, [r7, #8]
 8003fd2:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8003fd8:	687a      	ldr	r2, [r7, #4]
 8003fda:	68b9      	ldr	r1, [r7, #8]
 8003fdc:	68f8      	ldr	r0, [r7, #12]
 8003fde:	f000 f95b 	bl	8004298 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>
 8003fe2:	4603      	mov	r3, r0
    }
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	3718      	adds	r7, #24
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}

08003fec <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b082      	sub	sp, #8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8003ff4:	1d3b      	adds	r3, r7, #4
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff f916 	bl	8003228 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4618      	mov	r0, r3
 8004002:	3708      	adds	r7, #8
 8004004:	46bd      	mov	sp, r7
 8004006:	bd80      	pop	{r7, pc}

08004008 <_ZSt14__copy_move_a1ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	60b9      	str	r1, [r7, #8]
 8004012:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004014:	687a      	ldr	r2, [r7, #4]
 8004016:	68b9      	ldr	r1, [r7, #8]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f96c 	bl	80042f6 <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>
 800401e:	4603      	mov	r3, r0
 8004020:	4618      	mov	r0, r3
 8004022:	3710      	adds	r7, #16
 8004024:	46bd      	mov	sp, r7
 8004026:	bd80      	pop	{r7, pc}

08004028 <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 8004028:	b580      	push	{r7, lr}
 800402a:	b082      	sub	sp, #8
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 8004032:	6878      	ldr	r0, [r7, #4]
 8004034:	f7ff ffda 	bl	8003fec <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8004038:	4602      	mov	r2, r0
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	1a9b      	subs	r3, r3, r2
 800403e:	111b      	asrs	r3, r3, #4
 8004040:	461a      	mov	r2, r3
 8004042:	1d3b      	adds	r3, r7, #4
 8004044:	4611      	mov	r1, r2
 8004046:	4618      	mov	r0, r3
 8004048:	f7ff f91e 	bl	8003288 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_WData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 800404c:	4603      	mov	r3, r0
 800404e:	4618      	mov	r0, r3
 8004050:	3708      	adds	r7, #8
 8004052:	46bd      	mov	sp, r7
 8004054:	bd80      	pop	{r7, pc}

08004056 <_ZNSt6vectorI23CAN_RData_HandleTypeDefSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8004056:	b580      	push	{r7, lr}
 8004058:	b084      	sub	sp, #16
 800405a:	af00      	add	r7, sp, #0
 800405c:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 800405e:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
 8004062:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8004064:	6878      	ldr	r0, [r7, #4]
 8004066:	f000 f956 	bl	8004316 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>
 800406a:	4603      	mov	r3, r0
 800406c:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 800406e:	f107 0208 	add.w	r2, r7, #8
 8004072:	f107 030c 	add.w	r3, r7, #12
 8004076:	4611      	mov	r1, r2
 8004078:	4618      	mov	r0, r3
 800407a:	f000 f8b1 	bl	80041e0 <_ZSt3minIjERKT_S2_S2_>
 800407e:	4603      	mov	r3, r0
 8004080:	681b      	ldr	r3, [r3, #0]
      }
 8004082:	4618      	mov	r0, r3
 8004084:	3710      	adds	r7, #16
 8004086:	46bd      	mov	sp, r7
 8004088:	bd80      	pop	{r7, pc}

0800408a <_ZNKSt12_Vector_baseI23CAN_RData_HandleTypeDefSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b084      	sub	sp, #16
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 80040ac:	68f8      	ldr	r0, [r7, #12]
 80040ae:	f000 f93e 	bl	800432e <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 80040b2:	4602      	mov	r2, r0
 80040b4:	68bb      	ldr	r3, [r7, #8]
 80040b6:	4293      	cmp	r3, r2
 80040b8:	bf8c      	ite	hi
 80040ba:	2301      	movhi	r3, #1
 80040bc:	2300      	movls	r3, #0
 80040be:	b2db      	uxtb	r3, r3
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d001      	beq.n	80040c8 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80040c4:	f01e fe93 	bl	8022dee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80040c8:	68bb      	ldr	r3, [r7, #8]
 80040ca:	011b      	lsls	r3, r3, #4
 80040cc:	4618      	mov	r0, r3
 80040ce:	f01e fe7a 	bl	8022dc6 <_Znwj>
 80040d2:	4603      	mov	r3, r0
      }
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <_ZSt12__relocate_aIP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80040dc:	b5b0      	push	{r4, r5, r7, lr}
 80040de:	b084      	sub	sp, #16
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
 80040e8:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80040ea:	68f8      	ldr	r0, [r7, #12]
 80040ec:	f000 f92b 	bl	8004346 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 80040f0:	4604      	mov	r4, r0
 80040f2:	68b8      	ldr	r0, [r7, #8]
 80040f4:	f000 f927 	bl	8004346 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 80040f8:	4605      	mov	r5, r0
 80040fa:	6878      	ldr	r0, [r7, #4]
 80040fc:	f000 f923 	bl	8004346 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>
 8004100:	4602      	mov	r2, r0
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	4629      	mov	r1, r5
 8004106:	4620      	mov	r0, r4
 8004108:	f000 f928 	bl	800435c <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>
 800410c:	4603      	mov	r3, r0
    }
 800410e:	4618      	mov	r0, r3
 8004110:	3710      	adds	r7, #16
 8004112:	46bd      	mov	sp, r7
 8004114:	bdb0      	pop	{r4, r5, r7, pc}

08004116 <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEC1ES1_>:
      move_iterator(iterator_type __i)
 8004116:	b580      	push	{r7, lr}
 8004118:	b082      	sub	sp, #8
 800411a:	af00      	add	r7, sp, #0
 800411c:	6078      	str	r0, [r7, #4]
 800411e:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8004120:	463b      	mov	r3, r7
 8004122:	4618      	mov	r0, r3
 8004124:	f000 f940 	bl	80043a8 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>
 8004128:	4603      	mov	r3, r0
 800412a:	681a      	ldr	r2, [r3, #0]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	4618      	mov	r0, r3
 8004134:	3708      	adds	r7, #8
 8004136:	46bd      	mov	sp, r7
 8004138:	bd80      	pop	{r7, pc}

0800413a <_ZSt18uninitialized_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 800413a:	b580      	push	{r7, lr}
 800413c:	b086      	sub	sp, #24
 800413e:	af00      	add	r7, sp, #0
 8004140:	60f8      	str	r0, [r7, #12]
 8004142:	60b9      	str	r1, [r7, #8]
 8004144:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8004146:	2301      	movs	r3, #1
 8004148:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	68b9      	ldr	r1, [r7, #8]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f935 	bl	80043be <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>
 8004154:	4603      	mov	r3, r0
    }
 8004156:	4618      	mov	r0, r3
 8004158:	3718      	adds	r7, #24
 800415a:	46bd      	mov	sp, r7
 800415c:	bd80      	pop	{r7, pc}

0800415e <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 800415e:	b580      	push	{r7, lr}
 8004160:	b082      	sub	sp, #8
 8004162:	af00      	add	r7, sp, #0
 8004164:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8004166:	1d3b      	adds	r3, r7, #4
 8004168:	4618      	mov	r0, r3
 800416a:	f7ff f9e9 	bl	8003540 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEE4baseEv>
 800416e:	4603      	mov	r3, r0
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4618      	mov	r0, r3
 8004174:	3708      	adds	r7, #8
 8004176:	46bd      	mov	sp, r7
 8004178:	bd80      	pop	{r7, pc}

0800417a <_ZSt14__copy_move_a1ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800417a:	b580      	push	{r7, lr}
 800417c:	b084      	sub	sp, #16
 800417e:	af00      	add	r7, sp, #0
 8004180:	60f8      	str	r0, [r7, #12]
 8004182:	60b9      	str	r1, [r7, #8]
 8004184:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8004186:	687a      	ldr	r2, [r7, #4]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	68f8      	ldr	r0, [r7, #12]
 800418c:	f000 f946 	bl	800441c <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>
 8004190:	4603      	mov	r3, r0
 8004192:	4618      	mov	r0, r3
 8004194:	3710      	adds	r7, #16
 8004196:	46bd      	mov	sp, r7
 8004198:	bd80      	pop	{r7, pc}

0800419a <_ZSt12__niter_wrapIN9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS2_SaIS2_EEEES3_ET_S8_T0_>:
    __niter_wrap(_From __from, _To __res)
 800419a:	b580      	push	{r7, lr}
 800419c:	b082      	sub	sp, #8
 800419e:	af00      	add	r7, sp, #0
 80041a0:	6078      	str	r0, [r7, #4]
 80041a2:	6039      	str	r1, [r7, #0]
    { return __from + (__res - std::__niter_base(__from)); }
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f7ff ffda 	bl	800415e <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefSt6vectorIS0_SaIS0_EEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 80041aa:	4602      	mov	r2, r0
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	1a9b      	subs	r3, r3, r2
 80041b0:	111b      	asrs	r3, r3, #4
 80041b2:	461a      	mov	r2, r3
 80041b4:	1d3b      	adds	r3, r7, #4
 80041b6:	4611      	mov	r1, r2
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7ff f9f1 	bl	80035a0 <_ZNK9__gnu_cxx17__normal_iteratorIP23CAN_RData_HandleTypeDefSt6vectorIS1_SaIS1_EEEplEi>
 80041be:	4603      	mov	r3, r0
 80041c0:	4618      	mov	r0, r3
 80041c2:	3708      	adds	r7, #8
 80041c4:	46bd      	mov	sp, r7
 80041c6:	bd80      	pop	{r7, pc}

080041c8 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80041c8:	b580      	push	{r7, lr}
 80041ca:	b082      	sub	sp, #8
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f933 	bl	800443c <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>
 80041d6:	4603      	mov	r3, r0
      }
 80041d8:	4618      	mov	r0, r3
 80041da:	3708      	adds	r7, #8
 80041dc:	46bd      	mov	sp, r7
 80041de:	bd80      	pop	{r7, pc}

080041e0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
 80041e8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	681a      	ldr	r2, [r3, #0]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d201      	bcs.n	80041fa <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80041f6:	683b      	ldr	r3, [r7, #0]
 80041f8:	e000      	b.n	80041fc <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80041fa:	687b      	ldr	r3, [r7, #4]
    }
 80041fc:	4618      	mov	r0, r3
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>:
	{ return false; }
#endif

    private:
      _GLIBCXX_CONSTEXPR size_type
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
      {
#if __PTRDIFF_MAX__ < __SIZE_MAX__
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004210:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
#else
	return std::size_t(-1) / sizeof(_Tp);
#endif
      }
 8004214:	4618      	mov	r0, r3
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <_ZSt12__niter_baseIP23CAN_WData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 8004220:	b480      	push	{r7}
 8004222:	b083      	sub	sp, #12
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
    { return __it; }
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4618      	mov	r0, r3
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr

08004236 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 8004236:	b590      	push	{r4, r7, lr}
 8004238:	b087      	sub	sp, #28
 800423a:	af00      	add	r7, sp, #0
 800423c:	60f8      	str	r0, [r7, #12]
 800423e:	60b9      	str	r1, [r7, #8]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	429a      	cmp	r2, r3
 800424e:	d013      	beq.n	8004278 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8004250:	6978      	ldr	r0, [r7, #20]
 8004252:	f000 f8ff 	bl	8004454 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 8004256:	4604      	mov	r4, r0
 8004258:	68f8      	ldr	r0, [r7, #12]
 800425a:	f000 f8fb 	bl	8004454 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 800425e:	4603      	mov	r3, r0
 8004260:	683a      	ldr	r2, [r7, #0]
 8004262:	4619      	mov	r1, r3
 8004264:	4620      	mov	r0, r4
 8004266:	f000 f900 	bl	800446a <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	3310      	adds	r3, #16
 800426e:	60fb      	str	r3, [r7, #12]
 8004270:	697b      	ldr	r3, [r7, #20]
 8004272:	3310      	adds	r3, #16
 8004274:	617b      	str	r3, [r7, #20]
 8004276:	e7e7      	b.n	8004248 <_ZSt14__relocate_a_1IP23CAN_WData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 8004278:	697b      	ldr	r3, [r7, #20]
    }
 800427a:	4618      	mov	r0, r3
 800427c:	371c      	adds	r7, #28
 800427e:	46bd      	mov	sp, r7
 8004280:	bd90      	pop	{r4, r7, pc}

08004282 <_ZSt4moveIRP23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4618      	mov	r0, r3
 800428e:	370c      	adds	r7, #12
 8004290:	46bd      	mov	sp, r7
 8004292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004296:	4770      	bx	lr

08004298 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8004298:	b590      	push	{r4, r7, lr}
 800429a:	b087      	sub	sp, #28
 800429c:	af00      	add	r7, sp, #0
 800429e:	60f8      	str	r0, [r7, #12]
 80042a0:	60b9      	str	r1, [r7, #8]
 80042a2:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80042a8:	f107 0208 	add.w	r2, r7, #8
 80042ac:	f107 030c 	add.w	r3, r7, #12
 80042b0:	4611      	mov	r1, r2
 80042b2:	4618      	mov	r0, r3
 80042b4:	f000 f8f4 	bl	80044a0 <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80042b8:	4603      	mov	r3, r0
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d016      	beq.n	80042ec <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80042be:	6978      	ldr	r0, [r7, #20]
 80042c0:	f000 f8c8 	bl	8004454 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 80042c4:	4604      	mov	r4, r0
 80042c6:	f107 030c 	add.w	r3, r7, #12
 80042ca:	4618      	mov	r0, r3
 80042cc:	f000 f90a 	bl	80044e4 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>
 80042d0:	4603      	mov	r3, r0
 80042d2:	4619      	mov	r1, r3
 80042d4:	4620      	mov	r0, r4
 80042d6:	f000 f911 	bl	80044fc <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 80042da:	f107 030c 	add.w	r3, r7, #12
 80042de:	4618      	mov	r0, r3
 80042e0:	f000 f8ef 	bl	80044c2 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>
 80042e4:	697b      	ldr	r3, [r7, #20]
 80042e6:	3310      	adds	r3, #16
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e7dd      	b.n	80042a8 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_WData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 80042ec:	697b      	ldr	r3, [r7, #20]
	}
 80042ee:	4618      	mov	r0, r3
 80042f0:	371c      	adds	r7, #28
 80042f2:	46bd      	mov	sp, r7
 80042f4:	bd90      	pop	{r4, r7, pc}

080042f6 <_ZSt14__copy_move_a2ILb1EP23CAN_WData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b084      	sub	sp, #16
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	60f8      	str	r0, [r7, #12]
 80042fe:	60b9      	str	r1, [r7, #8]
 8004300:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004302:	687a      	ldr	r2, [r7, #4]
 8004304:	68b9      	ldr	r1, [r7, #8]
 8004306:	68f8      	ldr	r0, [r7, #12]
 8004308:	f000 f910 	bl	800452c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>
 800430c:	4603      	mov	r3, r0
    }
 800430e:	4618      	mov	r0, r3
 8004310:	3710      	adds	r7, #16
 8004312:	46bd      	mov	sp, r7
 8004314:	bd80      	pop	{r7, pc}

08004316 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8004316:	b580      	push	{r7, lr}
 8004318:	b082      	sub	sp, #8
 800431a:	af00      	add	r7, sp, #0
 800431c:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 800431e:	6878      	ldr	r0, [r7, #4]
 8004320:	f000 f921 	bl	8004566 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>
 8004324:	4603      	mov	r3, r0
      }
 8004326:	4618      	mov	r0, r3
 8004328:	3708      	adds	r7, #8
 800432a:	46bd      	mov	sp, r7
 800432c:	bd80      	pop	{r7, pc}

0800432e <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8004336:	f06f 4378 	mvn.w	r3, #4160749568	; 0xf8000000
      }
 800433a:	4618      	mov	r0, r3
 800433c:	370c      	adds	r7, #12
 800433e:	46bd      	mov	sp, r7
 8004340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004344:	4770      	bx	lr

08004346 <_ZSt12__niter_baseIP23CAN_RData_HandleTypeDefET_S2_>:
    __niter_base(_Iterator __it)
 8004346:	b480      	push	{r7}
 8004348:	b083      	sub	sp, #12
 800434a:	af00      	add	r7, sp, #0
 800434c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	4618      	mov	r0, r3
 8004352:	370c      	adds	r7, #12
 8004354:	46bd      	mov	sp, r7
 8004356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435a:	4770      	bx	lr

0800435c <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a_1(_InputIterator __first, _InputIterator __last,
 800435c:	b590      	push	{r4, r7, lr}
 800435e:	b087      	sub	sp, #28
 8004360:	af00      	add	r7, sp, #0
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
      _ForwardIterator __cur = __result;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	617b      	str	r3, [r7, #20]
      for (; __first != __last; ++__first, (void)++__cur)
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	429a      	cmp	r2, r3
 8004374:	d013      	beq.n	800439e <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x42>
	std::__relocate_object_a(std::__addressof(*__cur),
 8004376:	6978      	ldr	r0, [r7, #20]
 8004378:	f000 f901 	bl	800457e <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 800437c:	4604      	mov	r4, r0
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f8fd 	bl	800457e <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 8004384:	4603      	mov	r3, r0
 8004386:	683a      	ldr	r2, [r7, #0]
 8004388:	4619      	mov	r1, r3
 800438a:	4620      	mov	r0, r4
 800438c:	f000 f902 	bl	8004594 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>
      for (; __first != __last; ++__first, (void)++__cur)
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3310      	adds	r3, #16
 8004394:	60fb      	str	r3, [r7, #12]
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3310      	adds	r3, #16
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	e7e7      	b.n	800436e <_ZSt14__relocate_a_1IP23CAN_RData_HandleTypeDefS1_SaIS0_EET0_T_S4_S3_RT1_+0x12>
      return __cur;
 800439e:	697b      	ldr	r3, [r7, #20]
    }
 80043a0:	4618      	mov	r0, r3
 80043a2:	371c      	adds	r7, #28
 80043a4:	46bd      	mov	sp, r7
 80043a6:	bd90      	pop	{r4, r7, pc}

080043a8 <_ZSt4moveIRP23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS4_>:
    move(_Tp&& __t) noexcept
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	4618      	mov	r0, r3
 80043b4:	370c      	adds	r7, #12
 80043b6:	46bd      	mov	sp, r7
 80043b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043bc:	4770      	bx	lr

080043be <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80043be:	b590      	push	{r4, r7, lr}
 80043c0:	b087      	sub	sp, #28
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	60f8      	str	r0, [r7, #12]
 80043c6:	60b9      	str	r1, [r7, #8]
 80043c8:	607a      	str	r2, [r7, #4]
	  _ForwardIterator __cur = __result;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	617b      	str	r3, [r7, #20]
	      for (; __first != __last; ++__first, (void)++__cur)
 80043ce:	f107 0208 	add.w	r2, r7, #8
 80043d2:	f107 030c 	add.w	r3, r7, #12
 80043d6:	4611      	mov	r1, r2
 80043d8:	4618      	mov	r0, r3
 80043da:	f000 f8f6 	bl	80045ca <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80043de:	4603      	mov	r3, r0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d016      	beq.n	8004412 <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x54>
		std::_Construct(std::__addressof(*__cur), *__first);
 80043e4:	6978      	ldr	r0, [r7, #20]
 80043e6:	f000 f8ca 	bl	800457e <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80043ea:	4604      	mov	r4, r0
 80043ec:	f107 030c 	add.w	r3, r7, #12
 80043f0:	4618      	mov	r0, r3
 80043f2:	f000 f90c 	bl	800460e <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>
 80043f6:	4603      	mov	r3, r0
 80043f8:	4619      	mov	r1, r3
 80043fa:	4620      	mov	r0, r4
 80043fc:	f000 f913 	bl	8004626 <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>
	      for (; __first != __last; ++__first, (void)++__cur)
 8004400:	f107 030c 	add.w	r3, r7, #12
 8004404:	4618      	mov	r0, r3
 8004406:	f000 f8f1 	bl	80045ec <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	3310      	adds	r3, #16
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	e7dd      	b.n	80043ce <_ZNSt20__uninitialized_copyILb0EE13__uninit_copyISt13move_iteratorIP23CAN_RData_HandleTypeDefES4_EET0_T_S7_S6_+0x10>
	      return __cur;
 8004412:	697b      	ldr	r3, [r7, #20]
	}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	bd90      	pop	{r4, r7, pc}

0800441c <_ZSt14__copy_move_a2ILb1EP23CAN_RData_HandleTypeDefS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800441c:	b580      	push	{r7, lr}
 800441e:	b084      	sub	sp, #16
 8004420:	af00      	add	r7, sp, #0
 8004422:	60f8      	str	r0, [r7, #12]
 8004424:	60b9      	str	r1, [r7, #8]
 8004426:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 8004428:	687a      	ldr	r2, [r7, #4]
 800442a:	68b9      	ldr	r1, [r7, #8]
 800442c:	68f8      	ldr	r0, [r7, #12]
 800442e:	f000 f912 	bl	8004656 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>
 8004432:	4603      	mov	r3, r0
    }
 8004434:	4618      	mov	r0, r3
 8004436:	3710      	adds	r7, #16
 8004438:	46bd      	mov	sp, r7
 800443a:	bd80      	pop	{r7, pc}

0800443c <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 800443c:	b580      	push	{r7, lr}
 800443e:	b082      	sub	sp, #8
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8004444:	6878      	ldr	r0, [r7, #4]
 8004446:	f7ff fedf 	bl	8004208 <_ZNK9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE11_M_max_sizeEv>
 800444a:	4603      	mov	r3, r0
 800444c:	4618      	mov	r0, r3
 800444e:	3708      	adds	r7, #8
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}

08004454 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 8004454:	b480      	push	{r7}
 8004456:	b083      	sub	sp, #12
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <_ZSt19__relocate_object_aI23CAN_WData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 800446a:	b580      	push	{r7, lr}
 800446c:	b084      	sub	sp, #16
 800446e:	af00      	add	r7, sp, #0
 8004470:	60f8      	str	r0, [r7, #12]
 8004472:	60b9      	str	r1, [r7, #8]
 8004474:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 8004476:	68b8      	ldr	r0, [r7, #8]
 8004478:	f000 f90a 	bl	8004690 <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 800447c:	4603      	mov	r3, r0
 800447e:	461a      	mov	r2, r3
 8004480:	68f9      	ldr	r1, [r7, #12]
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 f90f 	bl	80046a6 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 8004488:	68b8      	ldr	r0, [r7, #8]
 800448a:	f7ff ffe3 	bl	8004454 <_ZSt11__addressofI23CAN_WData_HandleTypeDefEPT_RS1_>
 800448e:	4603      	mov	r3, r0
 8004490:	4619      	mov	r1, r3
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff fa45 	bl	8003922 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 8004498:	bf00      	nop
 800449a:	3710      	adds	r7, #16
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <_ZStneIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
 80044a8:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80044aa:	6839      	ldr	r1, [r7, #0]
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f000 f90d 	bl	80046cc <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80044b2:	4603      	mov	r3, r0
 80044b4:	f083 0301 	eor.w	r3, r3, #1
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <_ZNSt13move_iteratorIP23CAN_WData_HandleTypeDefEppEv>:
      operator++()
 80044c2:	b480      	push	{r7}
 80044c4:	b083      	sub	sp, #12
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
	++_M_current;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	f103 0210 	add.w	r2, r3, #16
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	601a      	str	r2, [r3, #0]
	return *this;
 80044d6:	687b      	ldr	r3, [r7, #4]
      }
 80044d8:	4618      	mov	r0, r3
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefEdeEv>:
      operator*() const
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4618      	mov	r0, r3
 80044f2:	370c      	adds	r7, #12
 80044f4:	46bd      	mov	sp, r7
 80044f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fa:	4770      	bx	lr

080044fc <_ZSt10_ConstructI23CAN_WData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 80044fc:	b5b0      	push	{r4, r5, r7, lr}
 80044fe:	b082      	sub	sp, #8
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8004506:	6838      	ldr	r0, [r7, #0]
 8004508:	f000 f8f6 	bl	80046f8 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 800450c:	4605      	mov	r5, r0
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	4619      	mov	r1, r3
 8004512:	2010      	movs	r0, #16
 8004514:	f7fd fcc9 	bl	8001eaa <_ZnwjPv>
 8004518:	4603      	mov	r3, r0
 800451a:	461c      	mov	r4, r3
 800451c:	462b      	mov	r3, r5
 800451e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004520:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bdb0      	pop	{r4, r5, r7, pc}

0800452c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	60f8      	str	r0, [r7, #12]
 8004534:	60b9      	str	r1, [r7, #8]
 8004536:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004538:	68ba      	ldr	r2, [r7, #8]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	1ad3      	subs	r3, r2, r3
 800453e:	111b      	asrs	r3, r3, #4
 8004540:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	2b00      	cmp	r3, #0
 8004546:	d006      	beq.n	8004556 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_WData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	011b      	lsls	r3, r3, #4
 800454c:	461a      	mov	r2, r3
 800454e:	68f9      	ldr	r1, [r7, #12]
 8004550:	6878      	ldr	r0, [r7, #4]
 8004552:	f01f fd9b 	bl	802408c <memmove>
	  return __result + _Num;
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	011b      	lsls	r3, r3, #4
 800455a:	687a      	ldr	r2, [r7, #4]
 800455c:	4413      	add	r3, r2
	}
 800455e:	4618      	mov	r0, r3
 8004560:	3718      	adds	r7, #24
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}

08004566 <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8004566:	b580      	push	{r7, lr}
 8004568:	b082      	sub	sp, #8
 800456a:	af00      	add	r7, sp, #0
 800456c:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7ff fedd 	bl	800432e <_ZNK9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE11_M_max_sizeEv>
 8004574:	4603      	mov	r3, r0
 8004576:	4618      	mov	r0, r3
 8004578:	3708      	adds	r7, #8
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}

0800457e <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800457e:	b480      	push	{r7}
 8004580:	b083      	sub	sp, #12
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	4618      	mov	r0, r3
 800458a:	370c      	adds	r7, #12
 800458c:	46bd      	mov	sp, r7
 800458e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004592:	4770      	bx	lr

08004594 <_ZSt19__relocate_object_aI23CAN_RData_HandleTypeDefS0_SaIS0_EEvPT_PT0_RT1_>:
    __relocate_object_a(_Tp* __restrict __dest, _Up* __restrict __orig,
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	607a      	str	r2, [r7, #4]
      __traits::construct(__alloc, __dest, std::move(*__orig));
 80045a0:	68b8      	ldr	r0, [r7, #8]
 80045a2:	f000 f8b4 	bl	800470e <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>
 80045a6:	4603      	mov	r3, r0
 80045a8:	461a      	mov	r2, r3
 80045aa:	68f9      	ldr	r1, [r7, #12]
 80045ac:	6878      	ldr	r0, [r7, #4]
 80045ae:	f000 f8b9 	bl	8004724 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>
      __traits::destroy(__alloc, std::__addressof(*__orig));
 80045b2:	68b8      	ldr	r0, [r7, #8]
 80045b4:	f7ff ffe3 	bl	800457e <_ZSt11__addressofI23CAN_RData_HandleTypeDefEPT_RS1_>
 80045b8:	4603      	mov	r3, r0
 80045ba:	4619      	mov	r1, r3
 80045bc:	6878      	ldr	r0, [r7, #4]
 80045be:	f7ff faae 	bl	8003b1e <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE7destroyIS0_EEvRS1_PT_>
    }
 80045c2:	bf00      	nop
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <_ZStneIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator!=(const move_iterator<_Iterator>& __x,
 80045ca:	b580      	push	{r7, lr}
 80045cc:	b082      	sub	sp, #8
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
 80045d2:	6039      	str	r1, [r7, #0]
    { return !(__x == __y); }
 80045d4:	6839      	ldr	r1, [r7, #0]
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f000 f8b7 	bl	800474a <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>
 80045dc:	4603      	mov	r3, r0
 80045de:	f083 0301 	eor.w	r3, r3, #1
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	4618      	mov	r0, r3
 80045e6:	3708      	adds	r7, #8
 80045e8:	46bd      	mov	sp, r7
 80045ea:	bd80      	pop	{r7, pc}

080045ec <_ZNSt13move_iteratorIP23CAN_RData_HandleTypeDefEppEv>:
      operator++()
 80045ec:	b480      	push	{r7}
 80045ee:	b083      	sub	sp, #12
 80045f0:	af00      	add	r7, sp, #0
 80045f2:	6078      	str	r0, [r7, #4]
	++_M_current;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f103 0210 	add.w	r2, r3, #16
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	601a      	str	r2, [r3, #0]
	return *this;
 8004600:	687b      	ldr	r3, [r7, #4]
      }
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr

0800460e <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefEdeEv>:
      operator*() const
 800460e:	b480      	push	{r7}
 8004610:	b083      	sub	sp, #12
 8004612:	af00      	add	r7, sp, #0
 8004614:	6078      	str	r0, [r7, #4]
      { return static_cast<reference>(*_M_current); }
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	4618      	mov	r0, r3
 800461c:	370c      	adds	r7, #12
 800461e:	46bd      	mov	sp, r7
 8004620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004624:	4770      	bx	lr

08004626 <_ZSt10_ConstructI23CAN_RData_HandleTypeDefJS0_EEvPT_DpOT0_>:
    _Construct(_Tp* __p, _Args&&... __args)
 8004626:	b5b0      	push	{r4, r5, r7, lr}
 8004628:	b082      	sub	sp, #8
 800462a:	af00      	add	r7, sp, #0
 800462c:	6078      	str	r0, [r7, #4]
 800462e:	6039      	str	r1, [r7, #0]
    { ::new(static_cast<void*>(__p)) _Tp(std::forward<_Args>(__args)...); }
 8004630:	6838      	ldr	r0, [r7, #0]
 8004632:	f000 f8a0 	bl	8004776 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004636:	4605      	mov	r5, r0
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4619      	mov	r1, r3
 800463c:	2010      	movs	r0, #16
 800463e:	f7fd fc34 	bl	8001eaa <_ZnwjPv>
 8004642:	4603      	mov	r3, r0
 8004644:	461c      	mov	r4, r3
 8004646:	462b      	mov	r3, r5
 8004648:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800464a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800464e:	bf00      	nop
 8004650:	3708      	adds	r7, #8
 8004652:	46bd      	mov	sp, r7
 8004654:	bdb0      	pop	{r4, r5, r7, pc}

08004656 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8004656:	b580      	push	{r7, lr}
 8004658:	b086      	sub	sp, #24
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	1ad3      	subs	r3, r2, r3
 8004668:	111b      	asrs	r3, r3, #4
 800466a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d006      	beq.n	8004680 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mI23CAN_RData_HandleTypeDefEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8004672:	697b      	ldr	r3, [r7, #20]
 8004674:	011b      	lsls	r3, r3, #4
 8004676:	461a      	mov	r2, r3
 8004678:	68f9      	ldr	r1, [r7, #12]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f01f fd06 	bl	802408c <memmove>
	  return __result + _Num;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	011b      	lsls	r3, r3, #4
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	4413      	add	r3, r2
	}
 8004688:	4618      	mov	r0, r3
 800468a:	3718      	adds	r7, #24
 800468c:	46bd      	mov	sp, r7
 800468e:	bd80      	pop	{r7, pc}

08004690 <_ZSt4moveIR23CAN_WData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	4618      	mov	r0, r3
 800469c:	370c      	adds	r7, #12
 800469e:	46bd      	mov	sp, r7
 80046a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a4:	4770      	bx	lr

080046a6 <_ZNSt16allocator_traitsISaI23CAN_WData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80046a6:	b580      	push	{r7, lr}
 80046a8:	b084      	sub	sp, #16
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	60f8      	str	r0, [r7, #12]
 80046ae:	60b9      	str	r1, [r7, #8]
 80046b0:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80046b2:	6878      	ldr	r0, [r7, #4]
 80046b4:	f000 f820 	bl	80046f8 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80046b8:	4603      	mov	r3, r0
 80046ba:	461a      	mov	r2, r3
 80046bc:	68b9      	ldr	r1, [r7, #8]
 80046be:	68f8      	ldr	r0, [r7, #12]
 80046c0:	f000 f864 	bl	800478c <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 80046c4:	bf00      	nop
 80046c6:	3710      	adds	r7, #16
 80046c8:	46bd      	mov	sp, r7
 80046ca:	bd80      	pop	{r7, pc}

080046cc <_ZSteqIP23CAN_WData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 80046cc:	b590      	push	{r4, r7, lr}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f000 f871 	bl	80047be <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 80046dc:	4604      	mov	r4, r0
 80046de:	6838      	ldr	r0, [r7, #0]
 80046e0:	f000 f86d 	bl	80047be <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>
 80046e4:	4603      	mov	r3, r0
 80046e6:	429c      	cmp	r4, r3
 80046e8:	bf0c      	ite	eq
 80046ea:	2301      	moveq	r3, #1
 80046ec:	2300      	movne	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	4618      	mov	r0, r3
 80046f2:	370c      	adds	r7, #12
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd90      	pop	{r4, r7, pc}

080046f8 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	4618      	mov	r0, r3
 8004704:	370c      	adds	r7, #12
 8004706:	46bd      	mov	sp, r7
 8004708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470c:	4770      	bx	lr

0800470e <_ZSt4moveIR23CAN_RData_HandleTypeDefEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800470e:	b480      	push	{r7}
 8004710:	b083      	sub	sp, #12
 8004712:	af00      	add	r7, sp, #0
 8004714:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	4618      	mov	r0, r3
 800471a:	370c      	adds	r7, #12
 800471c:	46bd      	mov	sp, r7
 800471e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004722:	4770      	bx	lr

08004724 <_ZNSt16allocator_traitsISaI23CAN_RData_HandleTypeDefEE9constructIS0_JS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8004724:	b580      	push	{r7, lr}
 8004726:	b084      	sub	sp, #16
 8004728:	af00      	add	r7, sp, #0
 800472a:	60f8      	str	r0, [r7, #12]
 800472c:	60b9      	str	r1, [r7, #8]
 800472e:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8004730:	6878      	ldr	r0, [r7, #4]
 8004732:	f000 f820 	bl	8004776 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 8004736:	4603      	mov	r3, r0
 8004738:	461a      	mov	r2, r3
 800473a:	68b9      	ldr	r1, [r7, #8]
 800473c:	68f8      	ldr	r0, [r7, #12]
 800473e:	f000 f84a 	bl	80047d6 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>
	}
 8004742:	bf00      	nop
 8004744:	3710      	adds	r7, #16
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <_ZSteqIP23CAN_RData_HandleTypeDefEbRKSt13move_iteratorIT_ES6_>:
    operator==(const move_iterator<_Iterator>& __x,
 800474a:	b590      	push	{r4, r7, lr}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
    { return __x.base() == __y.base(); }
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f857 	bl	8004808 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 800475a:	4604      	mov	r4, r0
 800475c:	6838      	ldr	r0, [r7, #0]
 800475e:	f000 f853 	bl	8004808 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>
 8004762:	4603      	mov	r3, r0
 8004764:	429c      	cmp	r4, r3
 8004766:	bf0c      	ite	eq
 8004768:	2301      	moveq	r3, #1
 800476a:	2300      	movne	r3, #0
 800476c:	b2db      	uxtb	r3, r3
 800476e:	4618      	mov	r0, r3
 8004770:	370c      	adds	r7, #12
 8004772:	46bd      	mov	sp, r7
 8004774:	bd90      	pop	{r4, r7, pc}

08004776 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8004776:	b480      	push	{r7}
 8004778:	b083      	sub	sp, #12
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4618      	mov	r0, r3
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <_ZN9__gnu_cxx13new_allocatorI23CAN_WData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800478c:	b5b0      	push	{r4, r5, r7, lr}
 800478e:	b084      	sub	sp, #16
 8004790:	af00      	add	r7, sp, #0
 8004792:	60f8      	str	r0, [r7, #12]
 8004794:	60b9      	str	r1, [r7, #8]
 8004796:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8004798:	6878      	ldr	r0, [r7, #4]
 800479a:	f7ff ffad 	bl	80046f8 <_ZSt7forwardI23CAN_WData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 800479e:	4605      	mov	r5, r0
 80047a0:	68bb      	ldr	r3, [r7, #8]
 80047a2:	4619      	mov	r1, r3
 80047a4:	2010      	movs	r0, #16
 80047a6:	f7fd fb80 	bl	8001eaa <_ZnwjPv>
 80047aa:	4603      	mov	r3, r0
 80047ac:	461c      	mov	r4, r3
 80047ae:	462b      	mov	r3, r5
 80047b0:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047b2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 80047b6:	bf00      	nop
 80047b8:	3710      	adds	r7, #16
 80047ba:	46bd      	mov	sp, r7
 80047bc:	bdb0      	pop	{r4, r5, r7, pc}

080047be <_ZNKSt13move_iteratorIP23CAN_WData_HandleTypeDefE4baseEv>:
      base() const
 80047be:	b480      	push	{r7}
 80047c0:	b083      	sub	sp, #12
 80047c2:	af00      	add	r7, sp, #0
 80047c4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <_ZN9__gnu_cxx13new_allocatorI23CAN_RData_HandleTypeDefE9constructIS1_JS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80047d6:	b5b0      	push	{r4, r5, r7, lr}
 80047d8:	b084      	sub	sp, #16
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7ff ffc7 	bl	8004776 <_ZSt7forwardI23CAN_RData_HandleTypeDefEOT_RNSt16remove_referenceIS1_E4typeE>
 80047e8:	4605      	mov	r5, r0
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	4619      	mov	r1, r3
 80047ee:	2010      	movs	r0, #16
 80047f0:	f7fd fb5b 	bl	8001eaa <_ZnwjPv>
 80047f4:	4603      	mov	r3, r0
 80047f6:	461c      	mov	r4, r3
 80047f8:	462b      	mov	r3, r5
 80047fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80047fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8004800:	bf00      	nop
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bdb0      	pop	{r4, r5, r7, pc}

08004808 <_ZNKSt13move_iteratorIP23CAN_RData_HandleTypeDefE4baseEv>:
      base() const
 8004808:	b480      	push	{r7}
 800480a:	b083      	sub	sp, #12
 800480c:	af00      	add	r7, sp, #0
 800480e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <_ZN4BG9521MandatoryParamEnqueueEv>:

//---------------------------------------------------------------------------------------------------Enqueue
//--------------------------------------------------------------------this parameters are followed from communication manual

void BG95::MandatoryParamEnqueue()
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b082      	sub	sp, #8
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
	//----------------------------1.) Mandatory parameters:
	// a.) Device parameters:

	//Motor Type
	AsyncWriteDataEnqueue(MOTOR_Type, 0, BLDC);      // Motor - Type: 1 = brushless Motor (BLDC)
 8004828:	2301      	movs	r3, #1
 800482a:	2200      	movs	r2, #0
 800482c:	f44f 5164 	mov.w	r1, #14592	; 0x3900
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f7fd fd9b 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(MOTOR_PolN, 0, 8);      // Motor - Number of Poles (8 - bg95)
 8004836:	2308      	movs	r3, #8
 8004838:	2200      	movs	r2, #0
 800483a:	f643 1110 	movw	r1, #14608	; 0x3910
 800483e:	6878      	ldr	r0, [r7, #4]
 8004840:	f7fd fd94 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	//Encoder feedback enable
	AsyncWriteDataEnqueue(VEL_Feedback, 0, 2410);      //  Encoder feedback for the velocity controller
 8004844:	f640 136a 	movw	r3, #2410	; 0x96a
 8004848:	2200      	movs	r2, #0
 800484a:	f243 3150 	movw	r1, #13136	; 0x3350
 800484e:	6878      	ldr	r0, [r7, #4]
 8004850:	f7fd fd8c 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(SVEL_Feedback, 0, 2410);      //  Encoder feedback for the secondary velocity controller
 8004854:	f640 136a 	movw	r3, #2410	; 0x96a
 8004858:	2200      	movs	r2, #0
 800485a:	f243 5150 	movw	r1, #13648	; 0x3550
 800485e:	6878      	ldr	r0, [r7, #4]
 8004860:	f7fd fd84 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(MOTOR_ENC_Resolution, 0, 4096);      // Encoder resolution in counts: sin/cos = 4096, 1000h
 8004864:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004868:	2200      	movs	r2, #0
 800486a:	f643 1162 	movw	r1, #14690	; 0x3962
 800486e:	6878      	ldr	r0, [r7, #4]
 8004870:	f7fd fd7c 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	// b.) Current limits (Attention: Note the motor data sheet!):
	AsyncWriteDataEnqueue(CURR_LimitMaxPos, 0, 50000);      // Curr ent limit - max. positive [mA]
 8004874:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004878:	2200      	movs	r2, #0
 800487a:	f243 2121 	movw	r1, #12833	; 0x3221
 800487e:	6878      	ldr	r0, [r7, #4]
 8004880:	f7fd fd74 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(CURR_LimitMaxNeg, 0, 50000);      // Current limit - max. negative [mA]
 8004884:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004888:	2200      	movs	r2, #0
 800488a:	f243 2123 	movw	r1, #12835	; 0x3223
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f7fd fd6c 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(CURR_DynLimit, CURR_DynLimitMode, Disable);      // Dynamic Current Limit I*t - Mode: 1 = active
 8004894:	2300      	movs	r3, #0
 8004896:	2200      	movs	r2, #0
 8004898:	f243 2124 	movw	r1, #12836	; 0x3224
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7fd fd65 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(CURR_DynLimit, CURR_DynLimitPeak, 12000);      // Dynamic Current Limit I*t - Peak Current [mA]
 80048a2:	f642 63e0 	movw	r3, #12000	; 0x2ee0
 80048a6:	2201      	movs	r2, #1
 80048a8:	f243 2124 	movw	r1, #12836	; 0x3224
 80048ac:	6878      	ldr	r0, [r7, #4]
 80048ae:	f7fd fd5d 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(CURR_DynLimit, CURR_DynLimitCont, 2640);      // Dynamic Current Limit I*t - Continuous Current [mA]
 80048b2:	f44f 6325 	mov.w	r3, #2640	; 0xa50
 80048b6:	2202      	movs	r2, #2
 80048b8:	f243 2124 	movw	r1, #12836	; 0x3224
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f7fd fd55 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(CURR_DynLimit, CURR_DynLimitTime, 1000);      // Dynamic Current Limit I*t - Time [ms]
 80048c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80048c6:	2203      	movs	r2, #3
 80048c8:	f243 2124 	movw	r1, #12836	; 0x3224
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7fd fd4d 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	// c.) Controller parameters
	// Primary Velocity controller
	AsyncWriteDataEnqueue(VEL_Kp, 0, 500);      // PID-Position Controller - Proportional gain
 80048d2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80048d6:	2200      	movs	r2, #0
 80048d8:	f243 3110 	movw	r1, #13072	; 0x3310
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f7fd fd45 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Ki, 0, 50);      // PID-Position Controller - Integral Factor
 80048e2:	2332      	movs	r3, #50	; 0x32
 80048e4:	2200      	movs	r2, #0
 80048e6:	f243 3111 	movw	r1, #13073	; 0x3311
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7fd fd3e 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Kd, 0, 1);      // PID-Position Controller - Differential gain
 80048f0:	2301      	movs	r3, #1
 80048f2:	2200      	movs	r2, #0
 80048f4:	f243 3112 	movw	r1, #13074	; 0x3312
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7fd fd37 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_ILimit, 0, 10000);      // integration limit of the position controller
 80048fe:	f242 7310 	movw	r3, #10000	; 0x2710
 8004902:	2200      	movs	r2, #0
 8004904:	f243 3113 	movw	r1, #13075	; 0x3313
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7fd fd2f 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Kvff, 0, 1000);      // velocity feed foward factor
 800490e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004912:	2200      	movs	r2, #0
 8004914:	f243 3114 	movw	r1, #13076	; 0x3314
 8004918:	6878      	ldr	r0, [r7, #4]
 800491a:	f7fd fd27 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Kaff, 0, 1);      // Accelation feed foward factor
 800491e:	2301      	movs	r3, #1
 8004920:	2200      	movs	r2, #0
 8004922:	f243 3115 	movw	r1, #13077	; 0x3315
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fd fd20 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	// Secondary Velocity controller
	AsyncWriteDataEnqueue(SVEL_Kp, 0, 500);      // PI-Velocity Controller - Proportional gain
 800492c:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8004930:	2200      	movs	r2, #0
 8004932:	f243 5110 	movw	r1, #13584	; 0x3510
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7fd fd18 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(SVEL_Ki, 0, 50);      // PI-Velocity Controller - Integration constant
 800493c:	2332      	movs	r3, #50	; 0x32
 800493e:	2200      	movs	r2, #0
 8004940:	f243 5111 	movw	r1, #13585	; 0x3511
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f7fd fd11 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(SVEL_KIxR, 0, 1);      // compensation factor
 800494a:	2301      	movs	r3, #1
 800494c:	2200      	movs	r2, #0
 800494e:	f243 5117 	movw	r1, #13591	; 0x3517
 8004952:	6878      	ldr	r0, [r7, #4]
 8004954:	f7fd fd0a 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	// Current controller
	AsyncWriteDataEnqueue(CURR_Kp, 0, 35);      // PI-Current Controller - Proportional gain
 8004958:	2323      	movs	r3, #35	; 0x23
 800495a:	2200      	movs	r2, #0
 800495c:	f243 2110 	movw	r1, #12816	; 0x3210
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f7fd fd03 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(CURR_Ki, 0, 2);      // PI-Current Controller - Integration constant
 8004966:	2302      	movs	r3, #2
 8004968:	2200      	movs	r2, #0
 800496a:	f243 2111 	movw	r1, #12817	; 0x3211
 800496e:	6878      	ldr	r0, [r7, #4]
 8004970:	f7fd fcfc 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004974:	bf00      	nop
 8004976:	3708      	adds	r7, #8
 8004978:	46bd      	mov	sp, r7
 800497a:	bd80      	pop	{r7, pc}

0800497c <_ZN4BG9526RecommendationParamEnqueueEv>:

void BG95::RecommendationParamEnqueue()
{
 800497c:	b580      	push	{r7, lr}
 800497e:	b08a      	sub	sp, #40	; 0x28
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
	//----------------------------2.) Recommendation parameters:
	const int32_t drive_vel = this->drive_vel_;
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004988:	627b      	str	r3, [r7, #36]	; 0x24
	const int32_t max_vel = this->max_vel_;
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800498e:	623b      	str	r3, [r7, #32]
	const uint32_t acc_rpm = this->acc_rpm_;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	699b      	ldr	r3, [r3, #24]
 8004994:	61fb      	str	r3, [r7, #28]
	const uint32_t acc_time = this->acc_time_;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	61bb      	str	r3, [r7, #24]
	const uint32_t dec_rpm = this->dec_rpm_;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	617b      	str	r3, [r7, #20]
	const uint32_t dec_time = this->dec_time_;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a6:	613b      	str	r3, [r7, #16]
	const uint32_t qdec_rpm = this->qdec_rpm_;
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ac:	60fb      	str	r3, [r7, #12]
	const uint32_t qdec_time = this->qdec_time_;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	60bb      	str	r3, [r7, #8]

	AsyncWriteDataEnqueue(VEL_DesiredValue, 0, drive_vel);      // Velocity - rpm
 80049b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b6:	2200      	movs	r2, #0
 80049b8:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f7fd fcd5 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_LimitMaxPos, 0, max_vel);      // Velocity Max. Limit - Positive Direction - rpm
 80049c2:	6a3b      	ldr	r3, [r7, #32]
 80049c4:	2200      	movs	r2, #0
 80049c6:	f243 3121 	movw	r1, #13089	; 0x3321
 80049ca:	6878      	ldr	r0, [r7, #4]
 80049cc:	f7fd fcce 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_LimitMaxNeg, 0, max_vel);      // Velocity Max. Limit - Negative Direction - rpm
 80049d0:	6a3b      	ldr	r3, [r7, #32]
 80049d2:	2200      	movs	r2, #0
 80049d4:	f243 3123 	movw	r1, #13091	; 0x3323
 80049d8:	6878      	ldr	r0, [r7, #4]
 80049da:	f7fd fcc7 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Acc_dV, 0, acc_rpm);      // Velocity Acceleration - Delta v
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	2200      	movs	r2, #0
 80049e2:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f7fd fcc0 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Acc_dT, 0, acc_time);      // Velocity Acceleration - Delta t
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f243 3141 	movw	r1, #13121	; 0x3341
 80049f4:	6878      	ldr	r0, [r7, #4]
 80049f6:	f7fd fcb9 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Dec_dV, 0, dec_rpm);      // Velocity Deceleration - Delta v
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2200      	movs	r2, #0
 80049fe:	f243 3142 	movw	r1, #13122	; 0x3342
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f7fd fcb2 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Dec_dT, 0, dec_time);      // Velocity Deceleration - Delta t
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	f243 3143 	movw	r1, #13123	; 0x3343
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f7fd fcab 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Dec_QuickStop_dV, 0, qdec_rpm);      // Velocity Deceleration - Quick-Stop - Delta v
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f243 3144 	movw	r1, #13124	; 0x3344
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7fd fca4 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
	AsyncWriteDataEnqueue(VEL_Dec_QuickStop_dT, 0, qdec_time);      // Velocity Deceleration - Quick-Stop - Delta t
 8004a24:	68bb      	ldr	r3, [r7, #8]
 8004a26:	2200      	movs	r2, #0
 8004a28:	f243 3145 	movw	r1, #13125	; 0x3345
 8004a2c:	6878      	ldr	r0, [r7, #4]
 8004a2e:	f7fd fc9d 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);      // update velocity parameters
 8004a32:	2305      	movs	r3, #5
 8004a34:	2200      	movs	r2, #0
 8004a36:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004a3a:	6878      	ldr	r0, [r7, #4]
 8004a3c:	f7fd fc96 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004a40:	bf00      	nop
 8004a42:	3728      	adds	r7, #40	; 0x28
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <_ZN4BG9522BreakManagementEnqueueEv>:

void BG95::BreakManagementEnqueue()
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b082      	sub	sp, #8
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
	/*Manual oepn break*/
	//AsyncWriteDataEnqueue(0x3150, 0, 2);      // Open Break

	/*Break management configuration.*/
	AsyncWriteDataEnqueue(Brake_Management, BM_Config, 3);      // Brake Management - Configuration - auto disable when the movoment ends
 8004a50:	2303      	movs	r3, #3
 8004a52:	2200      	movs	r2, #0
 8004a54:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f7fd fc87 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_OffOrConditionFlags, 5);      // Brake Management - Activating Condition
 8004a5e:	2305      	movs	r3, #5
 8004a60:	2218      	movs	r2, #24
 8004a62:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f7fd fc80 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_OnOrConditionFlags, 5);      // Brake Management - Deactivating Condition
 8004a6c:	2305      	movs	r3, #5
 8004a6e:	221a      	movs	r2, #26
 8004a70:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	f7fd fc79 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_Dout, DOut_1_LAtive);      // Brake Management - Brake Output(Digital output 1 High-active)
 8004a7a:	f64f 639f 	movw	r3, #65183	; 0xfe9f
 8004a7e:	2208      	movs	r2, #8
 8004a80:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7fd fc71 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_OffDelay1, 200);      // Brake Management - Brake Output
 8004a8a:	23c8      	movs	r3, #200	; 0xc8
 8004a8c:	2210      	movs	r2, #16
 8004a8e:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004a92:	6878      	ldr	r0, [r7, #4]
 8004a94:	f7fd fc6a 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_OffDelay2, 200);      // Brake Management - Brake Output
 8004a98:	23c8      	movs	r3, #200	; 0xc8
 8004a9a:	2211      	movs	r2, #17
 8004a9c:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004aa0:	6878      	ldr	r0, [r7, #4]
 8004aa2:	f7fd fc63 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_OnDelay1, 200);      // Brake Management - Brake Output
 8004aa6:	23c8      	movs	r3, #200	; 0xc8
 8004aa8:	2212      	movs	r2, #18
 8004aaa:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	f7fd fc5c 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(Brake_Management, BM_OnDelay2, 200);      // Brake Management - Brake Output
 8004ab4:	23c8      	movs	r3, #200	; 0xc8
 8004ab6:	2213      	movs	r2, #19
 8004ab8:	f643 11a0 	movw	r1, #14752	; 0x39a0
 8004abc:	6878      	ldr	r0, [r7, #4]
 8004abe:	f7fd fc55 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004ac2:	bf00      	nop
 8004ac4:	3708      	adds	r7, #8
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	bd80      	pop	{r7, pc}

08004aca <_ZN4BG9520HardwareParamEnqueueEv>:

void BG95::HardwareParamEnqueue()
{
 8004aca:	b580      	push	{r7, lr}
 8004acc:	b082      	sub	sp, #8
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
	//Etc. - error following
	AsyncWriteDataEnqueue(POS_FollowingErrorWindow, 0, 1000);   // position following error - window
 8004ad2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f243 7132 	movw	r1, #14130	; 0x3732
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f7fd fc45 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	//save all config.
	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_StoreParam);      //DeviceCommand -  Stores actual parameters
 8004ae2:	2380      	movs	r3, #128	; 0x80
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7fd fc3e 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      //DeviceCommand -  Stores actual parameters
 8004af0:	2304      	movs	r3, #4
 8004af2:	2200      	movs	r2, #0
 8004af4:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004af8:	6878      	ldr	r0, [r7, #4]
 8004afa:	f7fd fc37 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004afe:	bf00      	nop
 8004b00:	3708      	adds	r7, #8
 8004b02:	46bd      	mov	sp, r7
 8004b04:	bd80      	pop	{r7, pc}

08004b06 <_ZN4BG9529SetPositionControlModeEnqueueEv>:

	AsyncWriteDataEnqueue(MOTOR_Polarity, 0, motor_dir_);      // Motor - Polarity(direction)
}

void BG95::SetPositionControlModeEnqueue()
{
 8004b06:	b580      	push	{r7, lr}
 8004b08:	b082      	sub	sp, #8
 8004b0a:	af00      	add	r7, sp, #0
 8004b0c:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Mode, 0, MODE_Pos);      // device mode "position mode"
 8004b0e:	2307      	movs	r3, #7
 8004b10:	2200      	movs	r2, #0
 8004b12:	f243 0103 	movw	r1, #12291	; 0x3003
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fc28 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
 8004b1c:	2304      	movs	r3, #4
 8004b1e:	2200      	movs	r2, #0
 8004b20:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	f7fd fc21 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004b2a:	bf00      	nop
 8004b2c:	3708      	adds	r7, #8
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}

08004b32 <_ZN4BG9520AbsPosCommandEnqueueEi>:

void BG95::AbsPosCommandEnqueue(int tPos)
{
 8004b32:	b580      	push	{r7, lr}
 8004b34:	b084      	sub	sp, #16
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
 8004b3a:	6039      	str	r1, [r7, #0]
	int tPos_ = tPos;
 8004b3c:	683b      	ldr	r3, [r7, #0]
 8004b3e:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(POS_Mova, 0, tPos_);   // target position
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	2200      	movs	r2, #0
 8004b44:	f243 7190 	movw	r1, #14224	; 0x3790
 8004b48:	6878      	ldr	r0, [r7, #4]
 8004b4a:	f7fd fc0f 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004b4e:	bf00      	nop
 8004b50:	3710      	adds	r7, #16
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <_ZN4BG9520RelPosCommandEnqueueEi>:

void BG95::RelPosCommandEnqueue(int tPos)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b084      	sub	sp, #16
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
	int tPos_ = tPos;
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(POS_Movr, 0, tPos_);   // target position
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2200      	movs	r2, #0
 8004b68:	f243 7191 	movw	r1, #14225	; 0x3791
 8004b6c:	6878      	ldr	r0, [r7, #4]
 8004b6e:	f7fd fbfd 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004b72:	bf00      	nop
 8004b74:	3710      	adds	r7, #16
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <_ZN4BG9532SetSubVelocityControlModeEnqueueEv>:

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
}

void BG95::SetSubVelocityControlModeEnqueue()
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b082      	sub	sp, #8
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Mode, 0, MODE_SVel);      // device mode "sub -velocity mode"
 8004b82:	2305      	movs	r3, #5
 8004b84:	2200      	movs	r2, #0
 8004b86:	f243 0103 	movw	r1, #12291	; 0x3003
 8004b8a:	6878      	ldr	r0, [r7, #4]
 8004b8c:	f7fd fbee 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Continue);      // continue
 8004b90:	2304      	movs	r3, #4
 8004b92:	2200      	movs	r2, #0
 8004b94:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004b98:	6878      	ldr	r0, [r7, #4]
 8004b9a:	f7fd fbe7 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004b9e:	bf00      	nop
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <_ZN4BG9525ReadSchduleCommandEnqueueEv>:

void BG95::ReadSchduleCommandEnqueue()
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b082      	sub	sp, #8
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
	//ReadDataEnqueue(0x3110, 0, 0);      // actual power voltage

	ReadDataEnqueue(IO_AIN_Voltage_Up, 0);      // actual motor voltage
 8004bae:	2200      	movs	r2, #0
 8004bb0:	f243 1111 	movw	r1, #12561	; 0x3111
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f7fd fc4c 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(IO_AIN_Current_Im, 0);      // actual motor current
 8004bba:	2200      	movs	r2, #0
 8004bbc:	f243 1113 	movw	r1, #12563	; 0x3113
 8004bc0:	6878      	ldr	r0, [r7, #4]
 8004bc2:	f7fd fc46 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(POS_ActualTargetPosition, 0);      // Actual Target Position
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	f243 7160 	movw	r1, #14176	; 0x3760
 8004bcc:	6878      	ldr	r0, [r7, #4]
 8004bce:	f7fd fc40 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	//ReadDataEnqueue(POS_ActualCommandPosition, 0, 0);      // Actual Command Position

	ReadDataEnqueue(POS_ActualPosition, 0);      //motor pos. -  Actual Position
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f243 7162 	movw	r1, #14178	; 0x3762
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f7fd fc3a 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(MOTOR_Polarity, 0);      // Mptor dir. - Polarity(direction)
 8004bde:	2200      	movs	r2, #0
 8004be0:	f643 1111 	movw	r1, #14609	; 0x3911
 8004be4:	6878      	ldr	r0, [r7, #4]
 8004be6:	f7fd fc34 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(MEASUREMENT_Vel_rpm, 1);      //motor dynamics - Currently velocity(rpm)
 8004bea:	2201      	movs	r2, #1
 8004bec:	f643 2104 	movw	r1, #14852	; 0x3a04
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7fd fc2e 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_DesiredValue, 0);      // Velocity - rpm
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004bfc:	6878      	ldr	r0, [r7, #4]
 8004bfe:	f7fd fc28 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Acc_dV, 0);      // Velocity Acceleration - Delta v
 8004c02:	2200      	movs	r2, #0
 8004c04:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f7fd fc22 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Acc_dT, 0);      // Velocity Acceleration - Delta t
 8004c0e:	2200      	movs	r2, #0
 8004c10:	f243 3141 	movw	r1, #13121	; 0x3341
 8004c14:	6878      	ldr	r0, [r7, #4]
 8004c16:	f7fd fc1c 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_dV, 0);      // Velocity Deceleration - Delta v
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	f243 3142 	movw	r1, #13122	; 0x3342
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f7fd fc16 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_dT, 0);      // Velocity Deceleration - Delta t
 8004c26:	2200      	movs	r2, #0
 8004c28:	f243 3143 	movw	r1, #13123	; 0x3343
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f7fd fc10 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_QuickStop_dV, 0);      // Velocity Deceleration - Quick-Stop - Delta v
 8004c32:	2200      	movs	r2, #0
 8004c34:	f243 3144 	movw	r1, #13124	; 0x3344
 8004c38:	6878      	ldr	r0, [r7, #4]
 8004c3a:	f7fd fc0a 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(VEL_Dec_QuickStop_dT, 0);      // Velocity Deceleration - Quick-Stop - Delta t
 8004c3e:	2200      	movs	r2, #0
 8004c40:	f243 3145 	movw	r1, #13125	; 0x3345
 8004c44:	6878      	ldr	r0, [r7, #4]
 8004c46:	f7fd fc04 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(DEV_ErrorReg, 0);      //check Device status - error status
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	f243 0101 	movw	r1, #12289	; 0x3001
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f7fd fbfe 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>

	ReadDataEnqueue(DEV_Status, 0);      //check Device status - status register
 8004c56:	2200      	movs	r2, #0
 8004c58:	f243 0102 	movw	r1, #12290	; 0x3002
 8004c5c:	6878      	ldr	r0, [r7, #4]
 8004c5e:	f7fd fbf8 	bl	8002452 <_ZN4BG9515ReadDataEnqueueEii>
}
 8004c62:	bf00      	nop
 8004c64:	3708      	adds	r7, #8
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bd80      	pop	{r7, pc}

08004c6a <_ZN4BG9517InitializeCommandEv>:



//---------------------------------------------------------------------------------------------------Commands
void BG95::InitializeCommand()
{
 8004c6a:	b580      	push	{r7, lr}
 8004c6c:	b082      	sub	sp, #8
 8004c6e:	af00      	add	r7, sp, #0
 8004c70:	6078      	str	r0, [r7, #4]
	SetPowerDisableCommand();
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	f000 f978 	bl	8004f68 <_ZN4BG9522SetPowerDisableCommandEv>

	MandatoryParamEnqueue();
 8004c78:	6878      	ldr	r0, [r7, #4]
 8004c7a:	f7ff fdd1 	bl	8004820 <_ZN4BG9521MandatoryParamEnqueueEv>

	RecommendationParamEnqueue();
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f7ff fe7c 	bl	800497c <_ZN4BG9526RecommendationParamEnqueueEv>

	BreakManagementEnqueue();
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff fedf 	bl	8004a48 <_ZN4BG9522BreakManagementEnqueueEv>

	HardwareParamEnqueue();
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff ff1d 	bl	8004aca <_ZN4BG9520HardwareParamEnqueueEv>

	ResetErrorCommand();
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f000 f978 	bl	8004f86 <_ZN4BG9517ResetErrorCommandEv>

	SetPowerEnableCommand();
 8004c96:	6878      	ldr	r0, [r7, #4]
 8004c98:	f000 f957 	bl	8004f4a <_ZN4BG9521SetPowerEnableCommandEv>
}
 8004c9c:	bf00      	nop
 8004c9e:	3708      	adds	r7, #8
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	bd80      	pop	{r7, pc}

08004ca4 <_ZN4BG9513AbsPosCommandEimmi>:

void BG95::AbsPosCommand(int vel, uint32_t acc, uint32_t dec, int tpos)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b088      	sub	sp, #32
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	60f8      	str	r0, [r7, #12]
 8004cac:	60b9      	str	r1, [r7, #8]
 8004cae:	607a      	str	r2, [r7, #4]
 8004cb0:	603b      	str	r3, [r7, #0]
	int vel_ = vel;
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	61fb      	str	r3, [r7, #28]
	uint32_t acc_ = acc;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	61bb      	str	r3, [r7, #24]
	uint32_t dec_ = dec;
 8004cba:	683b      	ldr	r3, [r7, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
	int tpos_ = tpos;
 8004cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc0:	613b      	str	r3, [r7, #16]

	SetPowerDisableCommand();
 8004cc2:	68f8      	ldr	r0, [r7, #12]
 8004cc4:	f000 f950 	bl	8004f68 <_ZN4BG9522SetPowerDisableCommandEv>

	SetVelocityCommand(vel_);
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f88f 	bl	8004dee <_ZN4BG9518SetVelocityCommandEl>

	SetAccelerationCommand(acc_);
 8004cd0:	69b9      	ldr	r1, [r7, #24]
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 f8cb 	bl	8004e6e <_ZN4BG9522SetAccelerationCommandEm>

	SetDecelerationCommand(dec_);
 8004cd8:	6979      	ldr	r1, [r7, #20]
 8004cda:	68f8      	ldr	r0, [r7, #12]
 8004cdc:	f000 f8e7 	bl	8004eae <_ZN4BG9522SetDecelerationCommandEm>

	SetPositionControlModeEnqueue();
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff ff10 	bl	8004b06 <_ZN4BG9529SetPositionControlModeEnqueueEv>

	SetPowerEnableCommand();
 8004ce6:	68f8      	ldr	r0, [r7, #12]
 8004ce8:	f000 f92f 	bl	8004f4a <_ZN4BG9521SetPowerEnableCommandEv>

	AbsPosCommandEnqueue(tpos_);
 8004cec:	6939      	ldr	r1, [r7, #16]
 8004cee:	68f8      	ldr	r0, [r7, #12]
 8004cf0:	f7ff ff1f 	bl	8004b32 <_ZN4BG9520AbsPosCommandEnqueueEi>

	ResetErrorCommand();
 8004cf4:	68f8      	ldr	r0, [r7, #12]
 8004cf6:	f000 f946 	bl	8004f86 <_ZN4BG9517ResetErrorCommandEv>
}
 8004cfa:	bf00      	nop
 8004cfc:	3720      	adds	r7, #32
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	bd80      	pop	{r7, pc}

08004d02 <_ZN4BG9513RelPosCommandEimmi>:

void BG95::RelPosCommand(int vel, uint32_t acc, uint32_t dec, int tpos)
{
 8004d02:	b580      	push	{r7, lr}
 8004d04:	b088      	sub	sp, #32
 8004d06:	af00      	add	r7, sp, #0
 8004d08:	60f8      	str	r0, [r7, #12]
 8004d0a:	60b9      	str	r1, [r7, #8]
 8004d0c:	607a      	str	r2, [r7, #4]
 8004d0e:	603b      	str	r3, [r7, #0]
	int vel_ = vel;
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	61fb      	str	r3, [r7, #28]
	uint32_t acc_ = acc;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	61bb      	str	r3, [r7, #24]
	uint32_t dec_ = dec;
 8004d18:	683b      	ldr	r3, [r7, #0]
 8004d1a:	617b      	str	r3, [r7, #20]
	int tpos_ = tpos;
 8004d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d1e:	613b      	str	r3, [r7, #16]

	SetPowerDisableCommand();
 8004d20:	68f8      	ldr	r0, [r7, #12]
 8004d22:	f000 f921 	bl	8004f68 <_ZN4BG9522SetPowerDisableCommandEv>

	SetVelocityCommand(vel_);
 8004d26:	69f9      	ldr	r1, [r7, #28]
 8004d28:	68f8      	ldr	r0, [r7, #12]
 8004d2a:	f000 f860 	bl	8004dee <_ZN4BG9518SetVelocityCommandEl>

	SetAccelerationCommand(acc_);
 8004d2e:	69b9      	ldr	r1, [r7, #24]
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f89c 	bl	8004e6e <_ZN4BG9522SetAccelerationCommandEm>

	SetDecelerationCommand(dec_);
 8004d36:	6979      	ldr	r1, [r7, #20]
 8004d38:	68f8      	ldr	r0, [r7, #12]
 8004d3a:	f000 f8b8 	bl	8004eae <_ZN4BG9522SetDecelerationCommandEm>

	SetPositionControlModeEnqueue();
 8004d3e:	68f8      	ldr	r0, [r7, #12]
 8004d40:	f7ff fee1 	bl	8004b06 <_ZN4BG9529SetPositionControlModeEnqueueEv>

	SetPowerEnableCommand();
 8004d44:	68f8      	ldr	r0, [r7, #12]
 8004d46:	f000 f900 	bl	8004f4a <_ZN4BG9521SetPowerEnableCommandEv>

	RelPosCommandEnqueue(tpos_);
 8004d4a:	6939      	ldr	r1, [r7, #16]
 8004d4c:	68f8      	ldr	r0, [r7, #12]
 8004d4e:	f7ff ff02 	bl	8004b56 <_ZN4BG9520RelPosCommandEnqueueEi>

	ResetErrorCommand();
 8004d52:	68f8      	ldr	r0, [r7, #12]
 8004d54:	f000 f917 	bl	8004f86 <_ZN4BG9517ResetErrorCommandEv>
}
 8004d58:	bf00      	nop
 8004d5a:	3720      	adds	r7, #32
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bd80      	pop	{r7, pc}

08004d60 <_ZN4BG9513SubVelCommandEimm>:

	ResetErrorCommand();
}

void BG95::SubVelCommand(int vel, uint32_t acc, uint32_t dec)
{
 8004d60:	b580      	push	{r7, lr}
 8004d62:	b088      	sub	sp, #32
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
	int vel_ = vel;
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	61fb      	str	r3, [r7, #28]
	uint32_t acc_ = acc;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	61bb      	str	r3, [r7, #24]
	uint32_t dec_ = dec;
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	617b      	str	r3, [r7, #20]

	SetPowerDisableCommand();
 8004d7a:	68f8      	ldr	r0, [r7, #12]
 8004d7c:	f000 f8f4 	bl	8004f68 <_ZN4BG9522SetPowerDisableCommandEv>

	SetSubVelocityCommand(vel_);
 8004d80:	69f9      	ldr	r1, [r7, #28]
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f000 f85a 	bl	8004e3c <_ZN4BG9521SetSubVelocityCommandEl>

	SetAccelerationCommand(acc_);
 8004d88:	69b9      	ldr	r1, [r7, #24]
 8004d8a:	68f8      	ldr	r0, [r7, #12]
 8004d8c:	f000 f86f 	bl	8004e6e <_ZN4BG9522SetAccelerationCommandEm>

	SetDecelerationCommand(dec_);
 8004d90:	6979      	ldr	r1, [r7, #20]
 8004d92:	68f8      	ldr	r0, [r7, #12]
 8004d94:	f000 f88b 	bl	8004eae <_ZN4BG9522SetDecelerationCommandEm>

	SetSubVelocityControlModeEnqueue();
 8004d98:	68f8      	ldr	r0, [r7, #12]
 8004d9a:	f7ff feee 	bl	8004b7a <_ZN4BG9532SetSubVelocityControlModeEnqueueEv>

	SetPowerEnableCommand();
 8004d9e:	68f8      	ldr	r0, [r7, #12]
 8004da0:	f000 f8d3 	bl	8004f4a <_ZN4BG9521SetPowerEnableCommandEv>

	ResetErrorCommand();
 8004da4:	68f8      	ldr	r0, [r7, #12]
 8004da6:	f000 f8ee 	bl	8004f86 <_ZN4BG9517ResetErrorCommandEv>
}
 8004daa:	bf00      	nop
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}

08004db2 <_ZN4BG9517ClearParamCommandEv>:

void BG95::ClearParamCommand(){WriteDataEnqueue(DEV_Cmd, 0, CMD_ClearParam);}
 8004db2:	b580      	push	{r7, lr}
 8004db4:	b082      	sub	sp, #8
 8004db6:	af00      	add	r7, sp, #0
 8004db8:	6078      	str	r0, [r7, #4]
 8004dba:	2383      	movs	r3, #131	; 0x83
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f7fd fa5f 	bl	8002286 <_ZN4BG9516WriteDataEnqueueEiii>
 8004dc8:	bf00      	nop
 8004dca:	3708      	adds	r7, #8
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	bd80      	pop	{r7, pc}

08004dd0 <_ZN4BG9516StopMotorCommandEv>:

void BG95::StopMotorCommand(){AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Halt);}     // halt
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
 8004dd8:	2303      	movs	r3, #3
 8004dda:	2200      	movs	r2, #0
 8004ddc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004de0:	6878      	ldr	r0, [r7, #4]
 8004de2:	f7fd fac3 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
 8004de6:	bf00      	nop
 8004de8:	3708      	adds	r7, #8
 8004dea:	46bd      	mov	sp, r7
 8004dec:	bd80      	pop	{r7, pc}

08004dee <_ZN4BG9518SetVelocityCommandEl>:



//write value functions
void BG95::SetVelocityCommand(int32_t vel)
{
 8004dee:	b580      	push	{r7, lr}
 8004df0:	b084      	sub	sp, #16
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
	int32_t vel_ = vel;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(VEL_DesiredValue, 0, vel_);      // Velocity - rpm
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	f44f 514c 	mov.w	r1, #13056	; 0x3300
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7fd fab1 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_LimitMaxPos, 0, vel_);      // Velocity Max. Limit - Positive Direction - rpm
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f243 3121 	movw	r1, #13089	; 0x3321
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f7fd faaa 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_LimitMaxNeg, 0, vel_);      // Velocity Max. Limit - Negative Direction - rpm
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f243 3123 	movw	r1, #13091	; 0x3323
 8004e20:	6878      	ldr	r0, [r7, #4]
 8004e22:	f7fd faa3 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004e26:	2305      	movs	r3, #5
 8004e28:	2200      	movs	r2, #0
 8004e2a:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e2e:	6878      	ldr	r0, [r7, #4]
 8004e30:	f7fd fa9c 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004e34:	bf00      	nop
 8004e36:	3710      	adds	r7, #16
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	bd80      	pop	{r7, pc}

08004e3c <_ZN4BG9521SetSubVelocityCommandEl>:

void BG95::SetSubVelocityCommand(int32_t vel)
{
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	b084      	sub	sp, #16
 8004e40:	af00      	add	r7, sp, #0
 8004e42:	6078      	str	r0, [r7, #4]
 8004e44:	6039      	str	r1, [r7, #0]
	int32_t vel_ = vel;
 8004e46:	683b      	ldr	r3, [r7, #0]
 8004e48:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(SVEL_DesiredValue, 0, vel_);      // Velocity - rpm
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	2200      	movs	r2, #0
 8004e4e:	f44f 5154 	mov.w	r1, #13568	; 0x3500
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7fd fa8a 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004e58:	2305      	movs	r3, #5
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7fd fa83 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004e66:	bf00      	nop
 8004e68:	3710      	adds	r7, #16
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}

08004e6e <_ZN4BG9522SetAccelerationCommandEm>:

void BG95::SetAccelerationCommand(uint32_t acc)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b084      	sub	sp, #16
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
 8004e76:	6039      	str	r1, [r7, #0]
	uint32_t acc_ = acc;
 8004e78:	683b      	ldr	r3, [r7, #0]
 8004e7a:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(VEL_Acc_dV, 0, acc_);      // Velocity Acceleration - Delta v
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f44f 514d 	mov.w	r1, #13120	; 0x3340
 8004e84:	6878      	ldr	r0, [r7, #4]
 8004e86:	f7fd fa71 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Acc_dT, 0, acc_);      // Velocity Acceleration - Delta t
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	2200      	movs	r2, #0
 8004e8e:	f243 3141 	movw	r1, #13121	; 0x3341
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	f7fd fa6a 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004e98:	2305      	movs	r3, #5
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ea0:	6878      	ldr	r0, [r7, #4]
 8004ea2:	f7fd fa63 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004ea6:	bf00      	nop
 8004ea8:	3710      	adds	r7, #16
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	bd80      	pop	{r7, pc}

08004eae <_ZN4BG9522SetDecelerationCommandEm>:

void BG95::SetDecelerationCommand(uint32_t dec)
{
 8004eae:	b580      	push	{r7, lr}
 8004eb0:	b084      	sub	sp, #16
 8004eb2:	af00      	add	r7, sp, #0
 8004eb4:	6078      	str	r0, [r7, #4]
 8004eb6:	6039      	str	r1, [r7, #0]
	uint32_t dec_ = dec;
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	60fb      	str	r3, [r7, #12]

	AsyncWriteDataEnqueue(VEL_Dec_dV, 0, dec_);      // Velocity Deceleration - Delta v
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	f243 3142 	movw	r1, #13122	; 0x3342
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7fd fa51 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(VEL_Dec_dT, 0, dec_);      // Velocity Deceleration - Delta t
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2200      	movs	r2, #0
 8004ece:	f243 3143 	movw	r1, #13123	; 0x3343
 8004ed2:	6878      	ldr	r0, [r7, #4]
 8004ed4:	f7fd fa4a 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
 8004ed8:	2305      	movs	r3, #5
 8004eda:	2200      	movs	r2, #0
 8004edc:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004ee0:	6878      	ldr	r0, [r7, #4]
 8004ee2:	f7fd fa43 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004ee6:	bf00      	nop
 8004ee8:	3710      	adds	r7, #16
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}

08004eee <_ZN4BG9525SetDirectionNormalCommandEv>:

	AsyncWriteDataEnqueue(DEV_Cmd, 0, CMD_Update);     	//Updates set values
}

void BG95::SetDirectionNormalCommand()
{
 8004eee:	b580      	push	{r7, lr}
 8004ef0:	b084      	sub	sp, #16
 8004ef2:	af00      	add	r7, sp, #0
 8004ef4:	6078      	str	r0, [r7, #4]
	int motor_dir_ = 0x00;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	60fb      	str	r3, [r7, #12]

	SetPowerDisableCommand();
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f000 f834 	bl	8004f68 <_ZN4BG9522SetPowerDisableCommandEv>

	AsyncWriteDataEnqueue(MOTOR_Polarity, 0, motor_dir_);      // Motor - Polarity(direction)
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	f643 1111 	movw	r1, #14609	; 0x3911
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f7fd fa2f 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	SetPowerEnableCommand();
 8004f0e:	6878      	ldr	r0, [r7, #4]
 8004f10:	f000 f81b 	bl	8004f4a <_ZN4BG9521SetPowerEnableCommandEv>
}
 8004f14:	bf00      	nop
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <_ZN4BG9526SetDirectionReverseCommandEv>:

void BG95::SetDirectionReverseCommand()
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
	int motor_dir_ = 0x1b;
 8004f24:	231b      	movs	r3, #27
 8004f26:	60fb      	str	r3, [r7, #12]

	SetPowerDisableCommand();
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f81d 	bl	8004f68 <_ZN4BG9522SetPowerDisableCommandEv>

	AsyncWriteDataEnqueue(MOTOR_Polarity, 0, motor_dir_);      // Motor - Polarity(direction)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	2200      	movs	r2, #0
 8004f32:	f643 1111 	movw	r1, #14609	; 0x3911
 8004f36:	6878      	ldr	r0, [r7, #4]
 8004f38:	f7fd fa18 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>

	SetPowerEnableCommand();
 8004f3c:	6878      	ldr	r0, [r7, #4]
 8004f3e:	f000 f804 	bl	8004f4a <_ZN4BG9521SetPowerEnableCommandEv>
}
 8004f42:	bf00      	nop
 8004f44:	3710      	adds	r7, #16
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}

08004f4a <_ZN4BG9521SetPowerEnableCommandEv>:




void BG95::SetPowerEnableCommand()
{
 8004f4a:	b580      	push	{r7, lr}
 8004f4c:	b082      	sub	sp, #8
 8004f4e:	af00      	add	r7, sp, #0
 8004f50:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Enable, 0, Enable);      // Power Enable - enable
 8004f52:	2301      	movs	r3, #1
 8004f54:	2200      	movs	r2, #0
 8004f56:	f243 0104 	movw	r1, #12292	; 0x3004
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fd fa06 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004f60:	bf00      	nop
 8004f62:	3708      	adds	r7, #8
 8004f64:	46bd      	mov	sp, r7
 8004f66:	bd80      	pop	{r7, pc}

08004f68 <_ZN4BG9522SetPowerDisableCommandEv>:

void BG95::SetPowerDisableCommand()
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Enable, 0, Disable);      // Power Enable - disable
 8004f70:	2300      	movs	r3, #0
 8004f72:	2200      	movs	r2, #0
 8004f74:	f243 0104 	movw	r1, #12292	; 0x3004
 8004f78:	6878      	ldr	r0, [r7, #4]
 8004f7a:	f7fd f9f7 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004f7e:	bf00      	nop
 8004f80:	3708      	adds	r7, #8
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}

08004f86 <_ZN4BG9517ResetErrorCommandEv>:
{
	AsyncWriteDataEnqueue(POS_ActualPosition, 0, 0);      // reset actual position
}

void BG95::ResetErrorCommand()
{
 8004f86:	b580      	push	{r7, lr}
 8004f88:	b082      	sub	sp, #8
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
	AsyncWriteDataEnqueue(DEV_Cmd, 0, Enable);      // reset error register
 8004f8e:	2301      	movs	r3, #1
 8004f90:	2200      	movs	r2, #0
 8004f92:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8004f96:	6878      	ldr	r0, [r7, #4]
 8004f98:	f7fd f9e8 	bl	800236c <_ZN4BG9521AsyncWriteDataEnqueueEiii>
}
 8004f9c:	bf00      	nop
 8004f9e:	3708      	adds	r7, #8
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}

08004fa4 <_ZSt16__deque_buf_sizej>:
#define _GLIBCXX_DEQUE_BUF_SIZE 512
#endif

  _GLIBCXX_CONSTEXPR inline size_t
  __deque_buf_size(size_t __size)
  { return (__size < _GLIBCXX_DEQUE_BUF_SIZE
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
	    ? size_t(_GLIBCXX_DEQUE_BUF_SIZE / __size) : size_t(1)); }
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb2:	d205      	bcs.n	8004fc0 <_ZSt16__deque_buf_sizej+0x1c>
 8004fb4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fbe:	e000      	b.n	8004fc2 <_ZSt16__deque_buf_sizej+0x1e>
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	4618      	mov	r0, r3
 8004fc4:	370c      	adds	r7, #12
 8004fc6:	46bd      	mov	sp, r7
 8004fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fcc:	4770      	bx	lr

08004fce <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>:
      struct _Vector_impl
 8004fce:	b580      	push	{r7, lr}
 8004fd0:	b082      	sub	sp, #8
 8004fd2:	af00      	add	r7, sp, #0
 8004fd4:	6078      	str	r0, [r7, #4]
 8004fd6:	6878      	ldr	r0, [r7, #4]
 8004fd8:	f000 fa02 	bl	80053e0 <_ZNSaItED1Ev>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}

08004fe6 <_ZNSt12_Vector_baseItSaItEEC1Ev>:
      _Vector_base() = default;
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f000 f9e5 	bl	80053c0 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3708      	adds	r7, #8
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}

08005000 <_ZNSt6vectorItSaItEEC1Ev>:
      vector() = default;
 8005000:	b580      	push	{r7, lr}
 8005002:	b082      	sub	sp, #8
 8005004:	af00      	add	r7, sp, #0
 8005006:	6078      	str	r0, [r7, #4]
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	4618      	mov	r0, r3
 800500c:	f7ff ffeb 	bl	8004fe6 <_ZNSt12_Vector_baseItSaItEEC1Ev>
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	4618      	mov	r0, r3
 8005014:	3708      	adds	r7, #8
 8005016:	46bd      	mov	sp, r7
 8005018:	bd80      	pop	{r7, pc}

0800501a <_ZNSt5queueItSt5dequeItSaItEEED1Ev>:
   *  Members not found in @a normal containers are @c container_type,
   *  which is a typedef for the second Sequence parameter, and @c push and
   *  @c pop, which are standard %queue/FIFO operations.
  */
  template<typename _Tp, typename _Sequence = deque<_Tp> >
    class queue
 800501a:	b580      	push	{r7, lr}
 800501c:	b082      	sub	sp, #8
 800501e:	af00      	add	r7, sp, #0
 8005020:	6078      	str	r0, [r7, #4]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	4618      	mov	r0, r3
 8005026:	f000 fa3c 	bl	80054a2 <_ZNSt5dequeItSaItEED1Ev>
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4618      	mov	r0, r3
 800502e:	3708      	adds	r7, #8
 8005030:	46bd      	mov	sp, r7
 8005032:	bd80      	pop	{r7, pc}

08005034 <_ZN12PNFPosSensorC1Ev>:

#include "PNFPosSensor.h"
#include "transmit_tools/transmit_tools.h"


PNFPosSensor::PNFPosSensor(){};
 8005034:	b580      	push	{r7, lr}
 8005036:	b082      	sub	sp, #8
 8005038:	af00      	add	r7, sp, #0
 800503a:	6078      	str	r0, [r7, #4]
 800503c:	4a22      	ldr	r2, [pc, #136]	; (80050c8 <_ZN12PNFPosSensorC1Ev+0x94>)
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	601a      	str	r2, [r3, #0]
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2205      	movs	r2, #5
 8005046:	80da      	strh	r2, [r3, #6]
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2200      	movs	r2, #0
 800504c:	811a      	strh	r2, [r3, #8]
 800504e:	6879      	ldr	r1, [r7, #4]
 8005050:	f04f 0200 	mov.w	r2, #0
 8005054:	f04f 0300 	mov.w	r3, #0
 8005058:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800505c:	6879      	ldr	r1, [r7, #4]
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005070:	841a      	strh	r2, [r3, #32]
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2201      	movs	r2, #1
 8005076:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	f242 7210 	movw	r2, #10000	; 0x2710
 8005080:	875a      	strh	r2, [r3, #58]	; 0x3a
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2200      	movs	r2, #0
 8005086:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2200      	movs	r2, #0
 800508e:	641a      	str	r2, [r3, #64]	; 0x40
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	2200      	movs	r2, #0
 8005094:	649a      	str	r2, [r3, #72]	; 0x48
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	334c      	adds	r3, #76	; 0x4c
 800509a:	4618      	mov	r0, r3
 800509c:	f7ff ffb0 	bl	8005000 <_ZNSt6vectorItSaItEEC1Ev>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2200      	movs	r2, #0
 80050a4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	335c      	adds	r3, #92	; 0x5c
 80050ac:	4618      	mov	r0, r3
 80050ae:	f7ff ffa7 	bl	8005000 <_ZNSt6vectorItSaItEEC1Ev>
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	3368      	adds	r3, #104	; 0x68
 80050b6:	4618      	mov	r0, r3
 80050b8:	f000 f9df 	bl	800547a <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	4618      	mov	r0, r3
 80050c0:	3708      	adds	r7, #8
 80050c2:	46bd      	mov	sp, r7
 80050c4:	bd80      	pop	{r7, pc}
 80050c6:	bf00      	nop
 80050c8:	08028d18 	.word	0x08028d18

080050cc <_ZN12PNFPosSensorD1Ev>:
PNFPosSensor::~PNFPosSensor(){};
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b082      	sub	sp, #8
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
 80050d4:	4a0b      	ldr	r2, [pc, #44]	; (8005104 <_ZN12PNFPosSensorD1Ev+0x38>)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	601a      	str	r2, [r3, #0]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	3368      	adds	r3, #104	; 0x68
 80050de:	4618      	mov	r0, r3
 80050e0:	f7ff ff9b 	bl	800501a <_ZNSt5queueItSt5dequeItSaItEEED1Ev>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	335c      	adds	r3, #92	; 0x5c
 80050e8:	4618      	mov	r0, r3
 80050ea:	f000 f99e 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	334c      	adds	r3, #76	; 0x4c
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 f999 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	4618      	mov	r0, r3
 80050fc:	3708      	adds	r7, #8
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	08028d18 	.word	0x08028d18

08005108 <_ZN12PNFPosSensor19TransmitSendRequestEv>:


//---------------------------------------------------------------send or read functions
uint16_t PNFPosSensor::TransmitSendRequest()
{
 8005108:	b590      	push	{r4, r7, lr}
 800510a:	b085      	sub	sp, #20
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	unsigned char temp_data_ =  this->RequestCmd[RequestQueue.front()];
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	f103 045c 	add.w	r4, r3, #92	; 0x5c
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	3368      	adds	r3, #104	; 0x68
 800511a:	4618      	mov	r0, r3
 800511c:	f000 f9e6 	bl	80054ec <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 8005120:	4603      	mov	r3, r0
 8005122:	881b      	ldrh	r3, [r3, #0]
 8005124:	4619      	mov	r1, r3
 8005126:	4620      	mov	r0, r4
 8005128:	f000 f9ed 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800512c:	4603      	mov	r3, r0
 800512e:	881b      	ldrh	r3, [r3, #0]
 8005130:	73fb      	strb	r3, [r7, #15]
	unsigned char temp_data_rev = ~temp_data_;
 8005132:	7bfb      	ldrb	r3, [r7, #15]
 8005134:	43db      	mvns	r3, r3
 8005136:	73bb      	strb	r3, [r7, #14]
	unsigned char address_data[3]= {temp_data_, temp_data_rev, 0x00};
 8005138:	f107 0308 	add.w	r3, r7, #8
 800513c:	2100      	movs	r1, #0
 800513e:	460a      	mov	r2, r1
 8005140:	801a      	strh	r2, [r3, #0]
 8005142:	460a      	mov	r2, r1
 8005144:	709a      	strb	r2, [r3, #2]
 8005146:	7bfb      	ldrb	r3, [r7, #15]
 8005148:	723b      	strb	r3, [r7, #8]
 800514a:	7bbb      	ldrb	r3, [r7, #14]
 800514c:	727b      	strb	r3, [r7, #9]

	/*If Uart direction is available*/
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, this->dir_pin_no_, GPIO_PIN_SET);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005154:	2b01      	cmp	r3, #1
 8005156:	d108      	bne.n	800516a <_ZN12PNFPosSensor19TransmitSendRequestEv+0x62>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6c18      	ldr	r0, [r3, #64]	; 0x40
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005162:	2201      	movs	r2, #1
 8005164:	4619      	mov	r1, r3
 8005166:	f008 fcf3 	bl	800db50 <HAL_GPIO_WritePin>

	if(HAL_UsartTransmit(this->huartx_, address_data, (sizeof(address_data)/sizeof(address_data[0]))) != HAL_OK)
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800516e:	f107 0108 	add.w	r1, r7, #8
 8005172:	2203      	movs	r2, #3
 8005174:	4618      	mov	r0, r3
 8005176:	f005 f84f 	bl	800a218 <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>
 800517a:	4603      	mov	r3, r0
 800517c:	2b00      	cmp	r3, #0
 800517e:	bf14      	ite	ne
 8005180:	2301      	movne	r3, #1
 8005182:	2300      	moveq	r3, #0
 8005184:	b2db      	uxtb	r3, r3
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <_ZN12PNFPosSensor19TransmitSendRequestEv+0x86>
	{
		return HAL_TIMEOUT;
 800518a:	2303      	movs	r3, #3
 800518c:	e000      	b.n	8005190 <_ZN12PNFPosSensor19TransmitSendRequestEv+0x88>
	}

	return HAL_OK;
 800518e:	2300      	movs	r3, #0
}
 8005190:	4618      	mov	r0, r3
 8005192:	3714      	adds	r7, #20
 8005194:	46bd      	mov	sp, r7
 8005196:	bd90      	pop	{r4, r7, pc}

08005198 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>:


uint16_t PNFPosSensor::TransmitReceiveResponse()
{
 8005198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800519c:	b087      	sub	sp, #28
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
		return HAL_TIMEOUT;
	}

	for(int i = 0; i<this->max_read_buf_size_; i++) this->pos_buf_.emplace_back(tempdata[i]);

	return HAL_OK;
 80051a2:	466b      	mov	r3, sp
 80051a4:	461e      	mov	r6, r3
	unsigned char tempdata[this->max_read_buf_size_] = {0,};
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80051ac:	1e59      	subs	r1, r3, #1
 80051ae:	6139      	str	r1, [r7, #16]
 80051b0:	460b      	mov	r3, r1
 80051b2:	3301      	adds	r3, #1
 80051b4:	2200      	movs	r2, #0
 80051b6:	4698      	mov	r8, r3
 80051b8:	4691      	mov	r9, r2
 80051ba:	f04f 0200 	mov.w	r2, #0
 80051be:	f04f 0300 	mov.w	r3, #0
 80051c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80051c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80051ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80051ce:	460b      	mov	r3, r1
 80051d0:	3301      	adds	r3, #1
 80051d2:	2200      	movs	r2, #0
 80051d4:	461c      	mov	r4, r3
 80051d6:	4615      	mov	r5, r2
 80051d8:	f04f 0200 	mov.w	r2, #0
 80051dc:	f04f 0300 	mov.w	r3, #0
 80051e0:	00eb      	lsls	r3, r5, #3
 80051e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051e6:	00e2      	lsls	r2, r4, #3
 80051e8:	460b      	mov	r3, r1
 80051ea:	3301      	adds	r3, #1
 80051ec:	3307      	adds	r3, #7
 80051ee:	08db      	lsrs	r3, r3, #3
 80051f0:	00db      	lsls	r3, r3, #3
 80051f2:	ebad 0d03 	sub.w	sp, sp, r3
 80051f6:	466b      	mov	r3, sp
 80051f8:	3300      	adds	r3, #0
 80051fa:	60fb      	str	r3, [r7, #12]
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2200      	movs	r2, #0
 8005200:	701a      	strb	r2, [r3, #0]
 8005202:	1c5a      	adds	r2, r3, #1
 8005204:	1e4b      	subs	r3, r1, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	db04      	blt.n	8005214 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x7c>
 800520a:	2100      	movs	r1, #0
 800520c:	7011      	strb	r1, [r2, #0]
 800520e:	3201      	adds	r2, #1
 8005210:	3b01      	subs	r3, #1
 8005212:	e7f8      	b.n	8005206 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x6e>
	if(this->comm_dir_available_ == true) HAL_GPIO_WritePin(this->GPIO_, this->dir_pin_no_, GPIO_PIN_RESET);
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800521a:	2b01      	cmp	r3, #1
 800521c:	d108      	bne.n	8005230 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0x98>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005228:	2200      	movs	r2, #0
 800522a:	4619      	mov	r1, r3
 800522c:	f008 fc90 	bl	800db50 <HAL_GPIO_WritePin>
	if(HAL_UsartReceive(this->huartx_, tempdata, this->max_read_buf_size_) != HAL_OK)
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800523a:	461a      	mov	r2, r3
 800523c:	68f9      	ldr	r1, [r7, #12]
 800523e:	f004 fffd 	bl	800a23c <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	bf14      	ite	ne
 8005248:	2301      	movne	r3, #1
 800524a:	2300      	moveq	r3, #0
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d001      	beq.n	8005256 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xbe>
		return HAL_TIMEOUT;
 8005252:	2303      	movs	r3, #3
 8005254:	e016      	b.n	8005284 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xec>
	for(int i = 0; i<this->max_read_buf_size_; i++) this->pos_buf_.emplace_back(tempdata[i]);
 8005256:	2300      	movs	r3, #0
 8005258:	617b      	str	r3, [r7, #20]
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8005260:	461a      	mov	r2, r3
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	4293      	cmp	r3, r2
 8005266:	da0c      	bge.n	8005282 <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xea>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f103 004c 	add.w	r0, r3, #76	; 0x4c
 800526e:	68fa      	ldr	r2, [r7, #12]
 8005270:	697b      	ldr	r3, [r7, #20]
 8005272:	4413      	add	r3, r2
 8005274:	4619      	mov	r1, r3
 8005276:	f000 f956 	bl	8005526 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	3301      	adds	r3, #1
 800527e:	617b      	str	r3, [r7, #20]
 8005280:	e7eb      	b.n	800525a <_ZN12PNFPosSensor23TransmitReceiveResponseEv+0xc2>
	return HAL_OK;
 8005282:	2300      	movs	r3, #0
 8005284:	46b5      	mov	sp, r6
}
 8005286:	4618      	mov	r0, r3
 8005288:	371c      	adds	r7, #28
 800528a:	46bd      	mov	sp, r7
 800528c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005290 <_ZN12PNFPosSensor16QueueSaveRequestEt>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PNFPosSensor::QueueSaveRequest(uint16_t cmd){this->RequestQueue.push(cmd);}
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
 8005298:	460b      	mov	r3, r1
 800529a:	807b      	strh	r3, [r7, #2]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	3368      	adds	r3, #104	; 0x68
 80052a0:	1cba      	adds	r2, r7, #2
 80052a2:	4611      	mov	r1, r2
 80052a4:	4618      	mov	r0, r3
 80052a6:	f000 f96c 	bl	8005582 <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>
 80052aa:	bf00      	nop
 80052ac:	3708      	adds	r7, #8
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bd80      	pop	{r7, pc}

080052b2 <_ZN12PNFPosSensor18QueueDeleteRequestEv>:
void PNFPosSensor::QueueDeleteRequest()
{
 80052b2:	b580      	push	{r7, lr}
 80052b4:	b082      	sub	sp, #8
 80052b6:	af00      	add	r7, sp, #0
 80052b8:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_ == 0) this->RequestQueue.pop();
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	891b      	ldrh	r3, [r3, #8]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d104      	bne.n	80052cc <_ZN12PNFPosSensor18QueueDeleteRequestEv+0x1a>
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	3368      	adds	r3, #104	; 0x68
 80052c6:	4618      	mov	r0, r3
 80052c8:	f000 f969 	bl	800559e <_ZNSt5queueItSt5dequeItSaItEEE3popEv>
}
 80052cc:	bf00      	nop
 80052ce:	3708      	adds	r7, #8
 80052d0:	46bd      	mov	sp, r7
 80052d2:	bd80      	pop	{r7, pc}

080052d4 <_ZN12PNFPosSensor14IsInfoFilteredEv>:


//---------------------------------------------------------------filter functions

bool PNFPosSensor::IsInfoFiltered()
{
 80052d4:	b480      	push	{r7}
 80052d6:	b083      	sub	sp, #12
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
	return (this->now_filter_cnt_>= this->max_filter_cnt_);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	891a      	ldrh	r2, [r3, #8]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	88db      	ldrh	r3, [r3, #6]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	bf2c      	ite	cs
 80052e8:	2301      	movcs	r3, #1
 80052ea:	2300      	movcc	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
}
 80052ee:	4618      	mov	r0, r3
 80052f0:	370c      	adds	r7, #12
 80052f2:	46bd      	mov	sp, r7
 80052f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052f8:	4770      	bx	lr

080052fa <_ZN12PNFPosSensor10IsWorkDoneEv>:

bool PNFPosSensor::IsWorkDone()
{
 80052fa:	b480      	push	{r7}
 80052fc:	b083      	sub	sp, #12
 80052fe:	af00      	add	r7, sp, #0
 8005300:	6078      	str	r0, [r7, #4]
	return !(this->now_filter_cnt_ == 0);
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	891b      	ldrh	r3, [r3, #8]
 8005306:	2b00      	cmp	r3, #0
 8005308:	bf14      	ite	ne
 800530a:	2301      	movne	r3, #1
 800530c:	2300      	moveq	r3, #0
 800530e:	b2db      	uxtb	r3, r3
}
 8005310:	4618      	mov	r0, r3
 8005312:	370c      	adds	r7, #12
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <_ZN12PNFPosSensor13FilterCountUpEv>:


void PNFPosSensor::FilterCountUp()
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
	if(this->now_filter_cnt_< this->max_filter_cnt_) this->now_filter_cnt_++;
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	891a      	ldrh	r2, [r3, #8]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	88db      	ldrh	r3, [r3, #6]
 800532c:	429a      	cmp	r2, r3
 800532e:	d205      	bcs.n	800533c <_ZN12PNFPosSensor13FilterCountUpEv+0x20>
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	891b      	ldrh	r3, [r3, #8]
 8005334:	3301      	adds	r3, #1
 8005336:	b29a      	uxth	r2, r3
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	811a      	strh	r2, [r3, #8]
}
 800533c:	bf00      	nop
 800533e:	370c      	adds	r7, #12
 8005340:	46bd      	mov	sp, r7
 8005342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005346:	4770      	bx	lr

08005348 <_ZN12PNFPosSensor16FilterCountResetEv>:

void PNFPosSensor::FilterCountReset()
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
 800534e:	6078      	str	r0, [r7, #4]
	this->now_filter_cnt_ = 0;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	811a      	strh	r2, [r3, #8]
}
 8005356:	bf00      	nop
 8005358:	370c      	adds	r7, #12
 800535a:	46bd      	mov	sp, r7
 800535c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005360:	4770      	bx	lr

08005362 <_ZN12PNFPosSensor7IsErrUpEv>:

//---------------------------------------------------------------public main functions
bool PNFPosSensor::IsErrUp()
{
 8005362:	b480      	push	{r7}
 8005364:	b083      	sub	sp, #12
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
	if(this->err_code_ >= 1) return true;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	8c1b      	ldrh	r3, [r3, #32]
 800536e:	2b00      	cmp	r3, #0
 8005370:	d001      	beq.n	8005376 <_ZN12PNFPosSensor7IsErrUpEv+0x14>
 8005372:	2301      	movs	r3, #1
 8005374:	e000      	b.n	8005378 <_ZN12PNFPosSensor7IsErrUpEv+0x16>
	else return false;
 8005376:	2300      	movs	r3, #0
}
 8005378:	4618      	mov	r0, r3
 800537a:	370c      	adds	r7, #12
 800537c:	46bd      	mov	sp, r7
 800537e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005382:	4770      	bx	lr

08005384 <_ZN12PNFPosSensor5DriveEv>:


bool PNFPosSensor::Drive()
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b082      	sub	sp, #8
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
	DriveInit();
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	3308      	adds	r3, #8
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	4798      	blx	r3

	DriveComm();
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	330c      	adds	r3, #12
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	6878      	ldr	r0, [r7, #4]
 80053a2:	4798      	blx	r3

	DriveAnalysis();
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	3310      	adds	r3, #16
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	6878      	ldr	r0, [r7, #4]
 80053ae:	4798      	blx	r3

	return IsWorkDone();
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f7ff ffa2 	bl	80052fa <_ZN12PNFPosSensor10IsWorkDoneEv>
 80053b6:	4603      	mov	r3, r0
}
 80053b8:	4618      	mov	r0, r3
 80053ba:	3708      	adds	r7, #8
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}

080053c0 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80053c0:	b580      	push	{r7, lr}
 80053c2:	b082      	sub	sp, #8
 80053c4:	af00      	add	r7, sp, #0
 80053c6:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f000 f8f4 	bl	80055b6 <_ZNSaItEC1Ev>
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	4618      	mov	r0, r3
 80053d2:	f000 f8fc 	bl	80055ce <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4618      	mov	r0, r3
 80053da:	3708      	adds	r7, #8
 80053dc:	46bd      	mov	sp, r7
 80053de:	bd80      	pop	{r7, pc}

080053e0 <_ZNSaItED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80053e0:	b580      	push	{r7, lr}
 80053e2:	b082      	sub	sp, #8
 80053e4:	af00      	add	r7, sp, #0
 80053e6:	6078      	str	r0, [r7, #4]
 80053e8:	6878      	ldr	r0, [r7, #4]
 80053ea:	f000 f904 	bl	80055f6 <_ZN9__gnu_cxx13new_allocatorItED1Ev>
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	4618      	mov	r0, r3
 80053f2:	3708      	adds	r7, #8
 80053f4:	46bd      	mov	sp, r7
 80053f6:	bd80      	pop	{r7, pc}

080053f8 <_ZNSt12_Vector_baseItSaItEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80053f8:	b580      	push	{r7, lr}
 80053fa:	b082      	sub	sp, #8
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	689a      	ldr	r2, [r3, #8]
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	1ad3      	subs	r3, r2, r3
 800540e:	105b      	asrs	r3, r3, #1
	_M_deallocate(_M_impl._M_start,
 8005410:	461a      	mov	r2, r3
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 f8fa 	bl	800560c <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      }
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4618      	mov	r0, r3
 800541c:	f7ff fdd7 	bl	8004fce <_ZNSt12_Vector_baseItSaItEE12_Vector_implD1Ev>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4618      	mov	r0, r3
 8005424:	3708      	adds	r7, #8
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}

0800542a <_ZNSt6vectorItSaItEED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 800542a:	b5b0      	push	{r4, r5, r7, lr}
 800542c:	b082      	sub	sp, #8
 800542e:	af00      	add	r7, sp, #0
 8005430:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681c      	ldr	r4, [r3, #0]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	4618      	mov	r0, r3
 800543e:	f000 f8f8 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005442:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005444:	461a      	mov	r2, r3
 8005446:	4629      	mov	r1, r5
 8005448:	4620      	mov	r0, r4
 800544a:	f000 f8fd 	bl	8005648 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      }
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	4618      	mov	r0, r3
 8005452:	f7ff ffd1 	bl	80053f8 <_ZNSt12_Vector_baseItSaItEED1Ev>
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	4618      	mov	r0, r3
 800545a:	3708      	adds	r7, #8
 800545c:	46bd      	mov	sp, r7
 800545e:	bdb0      	pop	{r4, r5, r7, pc}

08005460 <_ZNSt5dequeItSaItEEC1Ev>:

      /**
       *  @brief  Creates a %deque with no elements.
       */
#if __cplusplus >= 201103L
      deque() = default;
 8005460:	b580      	push	{r7, lr}
 8005462:	b082      	sub	sp, #8
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 f906 	bl	800567c <_ZNSt11_Deque_baseItSaItEEC1Ev>
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <_ZNSt5queueItSt5dequeItSaItEEEC1IS2_vEEv>:
      queue(const _Sequence& __c = _Sequence())
      : c(__c) { }
#else
      template<typename _Seq = _Sequence, typename _Requires = typename
	       enable_if<is_default_constructible<_Seq>::value>::type>
	queue()
 800547a:	b580      	push	{r7, lr}
 800547c:	b082      	sub	sp, #8
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
	: c() { }
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4618      	mov	r0, r3
 8005486:	2328      	movs	r3, #40	; 0x28
 8005488:	461a      	mov	r2, r3
 800548a:	2100      	movs	r1, #0
 800548c:	f01e fe18 	bl	80240c0 <memset>
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	4618      	mov	r0, r3
 8005494:	f7ff ffe4 	bl	8005460 <_ZNSt5dequeItSaItEEC1Ev>
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}

080054a2 <_ZNSt5dequeItSaItEED1Ev>:
      /**
       *  The dtor only erases the elements, and note that if the elements
       *  themselves are pointers, the pointed-to memory is not touched in any
       *  way.  Managing the pointer is the user's responsibility.
       */
      ~deque()
 80054a2:	b580      	push	{r7, lr}
 80054a4:	b08a      	sub	sp, #40	; 0x28
 80054a6:	af00      	add	r7, sp, #0
 80054a8:	6078      	str	r0, [r7, #4]
      { _M_destroy_data(begin(), end(), _M_get_Tp_allocator()); }
 80054aa:	f107 0308 	add.w	r3, r7, #8
 80054ae:	6879      	ldr	r1, [r7, #4]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 f916 	bl	80056e2 <_ZNSt5dequeItSaItEE5beginEv>
 80054b6:	f107 0318 	add.w	r3, r7, #24
 80054ba:	6879      	ldr	r1, [r7, #4]
 80054bc:	4618      	mov	r0, r3
 80054be:	f000 f91f 	bl	8005700 <_ZNSt5dequeItSaItEE3endEv>
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	4618      	mov	r0, r3
 80054c6:	f000 f92a 	bl	800571e <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 80054ca:	4603      	mov	r3, r0
 80054cc:	f107 0218 	add.w	r2, r7, #24
 80054d0:	f107 0108 	add.w	r1, r7, #8
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f000 f949 	bl	800576c <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	4618      	mov	r0, r3
 80054de:	f000 f8de 	bl	800569e <_ZNSt11_Deque_baseItSaItEED1Ev>
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	4618      	mov	r0, r3
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>:
      /**
       *  Returns a read/write reference to the data at the first
       *  element of the %queue.
       */
      reference
      front()
 80054ec:	b580      	push	{r7, lr}
 80054ee:	b082      	sub	sp, #8
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	return c.front();
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4618      	mov	r0, r3
 80054f8:	f000 f945 	bl	8005786 <_ZNSt5dequeItSaItEE5frontEv>
 80054fc:	4603      	mov	r3, r0
      }
 80054fe:	4618      	mov	r0, r3
 8005500:	3708      	adds	r7, #8
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <_ZNSt6vectorItSaItEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	005b      	lsls	r3, r3, #1
 8005518:	4413      	add	r3, r2
      }
 800551a:	4618      	mov	r0, r3
 800551c:	370c      	adds	r7, #12
 800551e:	46bd      	mov	sp, r7
 8005520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005524:	4770      	bx	lr

08005526 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8005526:	b5b0      	push	{r4, r5, r7, lr}
 8005528:	b082      	sub	sp, #8
 800552a:	af00      	add	r7, sp, #0
 800552c:	6078      	str	r0, [r7, #4]
 800552e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	429a      	cmp	r2, r3
 800553a:	d011      	beq.n	8005560 <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800553c:	687c      	ldr	r4, [r7, #4]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	685d      	ldr	r5, [r3, #4]
 8005542:	6838      	ldr	r0, [r7, #0]
 8005544:	f000 f933 	bl	80057ae <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005548:	4603      	mov	r3, r0
 800554a:	461a      	mov	r2, r3
 800554c:	4629      	mov	r1, r5
 800554e:	4620      	mov	r0, r4
 8005550:	f000 f938 	bl	80057c4 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	1c9a      	adds	r2, r3, #2
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	605a      	str	r2, [r3, #4]
      }
 800555e:	e00c      	b.n	800557a <_ZNSt6vectorItSaItEE12emplace_backIJRhEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f000 f942 	bl	80057ea <_ZNSt6vectorItSaItEE3endEv>
 8005566:	4604      	mov	r4, r0
 8005568:	6838      	ldr	r0, [r7, #0]
 800556a:	f000 f920 	bl	80057ae <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800556e:	4603      	mov	r3, r0
 8005570:	461a      	mov	r2, r3
 8005572:	4621      	mov	r1, r4
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f000 f95f 	bl	8005838 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 800557a:	bf00      	nop
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bdb0      	pop	{r4, r5, r7, pc}

08005582 <_ZNSt5queueItSt5dequeItSaItEEE4pushERKt>:
       *  element at the end of the %queue and assigns the given data
       *  to it.  The time complexity of the operation depends on the
       *  underlying sequence.
       */
      void
      push(const value_type& __x)
 8005582:	b580      	push	{r7, lr}
 8005584:	b082      	sub	sp, #8
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	6039      	str	r1, [r7, #0]
      { c.push_back(__x); }
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 fa0d 	bl	80059b0 <_ZNSt5dequeItSaItEE9push_backERKt>
 8005596:	bf00      	nop
 8005598:	3708      	adds	r7, #8
 800559a:	46bd      	mov	sp, r7
 800559c:	bd80      	pop	{r7, pc}

0800559e <_ZNSt5queueItSt5dequeItSaItEEE3popEv>:
       *  Note that no data is returned, and if the first element's
       *  data is needed, it should be retrieved before pop() is
       *  called.
       */
      void
      pop()
 800559e:	b580      	push	{r7, lr}
 80055a0:	b082      	sub	sp, #8
 80055a2:	af00      	add	r7, sp, #0
 80055a4:	6078      	str	r0, [r7, #4]
      {
	__glibcxx_requires_nonempty();
	c.pop_front();
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	4618      	mov	r0, r3
 80055aa:	f000 fa22 	bl	80059f2 <_ZNSt5dequeItSaItEE9pop_frontEv>
      }
 80055ae:	bf00      	nop
 80055b0:	3708      	adds	r7, #8
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bd80      	pop	{r7, pc}

080055b6 <_ZNSaItEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80055b6:	b580      	push	{r7, lr}
 80055b8:	b082      	sub	sp, #8
 80055ba:	af00      	add	r7, sp, #0
 80055bc:	6078      	str	r0, [r7, #4]
 80055be:	6878      	ldr	r0, [r7, #4]
 80055c0:	f000 fa3a 	bl	8005a38 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	4618      	mov	r0, r3
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}

080055ce <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 80055ce:	b480      	push	{r7}
 80055d0:	b083      	sub	sp, #12
 80055d2:	af00      	add	r7, sp, #0
 80055d4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2200      	movs	r2, #0
 80055da:	601a      	str	r2, [r3, #0]
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	605a      	str	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	2200      	movs	r2, #0
 80055e6:	609a      	str	r2, [r3, #8]
	{ }
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	4618      	mov	r0, r3
 80055ec:	370c      	adds	r7, #12
 80055ee:	46bd      	mov	sp, r7
 80055f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f4:	4770      	bx	lr

080055f6 <_ZN9__gnu_cxx13new_allocatorItED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	4618      	mov	r0, r3
 8005602:	370c      	adds	r7, #12
 8005604:	46bd      	mov	sp, r7
 8005606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560a:	4770      	bx	lr

0800560c <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>:
      _M_deallocate(pointer __p, size_t __n)
 800560c:	b580      	push	{r7, lr}
 800560e:	b084      	sub	sp, #16
 8005610:	af00      	add	r7, sp, #0
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
	if (__p)
 8005618:	68bb      	ldr	r3, [r7, #8]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	68b9      	ldr	r1, [r7, #8]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fa12 	bl	8005a4e <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 800562a:	bf00      	nop
 800562c:	3710      	adds	r7, #16
 800562e:	46bd      	mov	sp, r7
 8005630:	bd80      	pop	{r7, pc}

08005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8005632:	b480      	push	{r7}
 8005634:	b083      	sub	sp, #12
 8005636:	af00      	add	r7, sp, #0
 8005638:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	4618      	mov	r0, r3
 800563e:	370c      	adds	r7, #12
 8005640:	46bd      	mov	sp, r7
 8005642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005646:	4770      	bx	lr

08005648 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8005648:	b580      	push	{r7, lr}
 800564a:	b084      	sub	sp, #16
 800564c:	af00      	add	r7, sp, #0
 800564e:	60f8      	str	r0, [r7, #12]
 8005650:	60b9      	str	r1, [r7, #8]
 8005652:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8005654:	68b9      	ldr	r1, [r7, #8]
 8005656:	68f8      	ldr	r0, [r7, #12]
 8005658:	f000 fa08 	bl	8005a6c <_ZSt8_DestroyIPtEvT_S1_>
    }
 800565c:	bf00      	nop
 800565e:	3710      	adds	r7, #16
 8005660:	46bd      	mov	sp, r7
 8005662:	bd80      	pop	{r7, pc}

08005664 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>:
      struct _Deque_impl
 8005664:	b580      	push	{r7, lr}
 8005666:	b082      	sub	sp, #8
 8005668:	af00      	add	r7, sp, #0
 800566a:	6078      	str	r0, [r7, #4]
 800566c:	6878      	ldr	r0, [r7, #4]
 800566e:	f7ff feb7 	bl	80053e0 <_ZNSaItED1Ev>
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	4618      	mov	r0, r3
 8005676:	3708      	adds	r7, #8
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <_ZNSt11_Deque_baseItSaItEEC1Ev>:
      _Deque_base()
 800567c:	b580      	push	{r7, lr}
 800567e:	b082      	sub	sp, #8
 8005680:	af00      	add	r7, sp, #0
 8005682:	6078      	str	r0, [r7, #4]
      : _M_impl()
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	4618      	mov	r0, r3
 8005688:	f000 f9fd 	bl	8005a86 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>
      { _M_initialize_map(0); }
 800568c:	2100      	movs	r1, #0
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 fa09 	bl	8005aa6 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	4618      	mov	r0, r3
 8005698:	3708      	adds	r7, #8
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}

0800569e <_ZNSt11_Deque_baseItSaItEED1Ev>:
    _Deque_base<_Tp, _Alloc>::
 800569e:	b580      	push	{r7, lr}
 80056a0:	b082      	sub	sp, #8
 80056a2:	af00      	add	r7, sp, #0
 80056a4:	6078      	str	r0, [r7, #4]
      if (this->_M_impl._M_map)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d010      	beq.n	80056d0 <_ZNSt11_Deque_baseItSaItEED1Ev+0x32>
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	6959      	ldr	r1, [r3, #20]
			   this->_M_impl._M_finish._M_node + 1);
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  _M_destroy_nodes(this->_M_impl._M_start._M_node,
 80056b6:	3304      	adds	r3, #4
 80056b8:	461a      	mov	r2, r3
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 fa56 	bl	8005b6c <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	6819      	ldr	r1, [r3, #0]
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	461a      	mov	r2, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f000 fa68 	bl	8005ba0 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>
    }
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	4618      	mov	r0, r3
 80056d4:	f7ff ffc6 	bl	8005664 <_ZNSt11_Deque_baseItSaItEE11_Deque_implD1Ev>
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	4618      	mov	r0, r3
 80056dc:	3708      	adds	r7, #8
 80056de:	46bd      	mov	sp, r7
 80056e0:	bd80      	pop	{r7, pc}

080056e2 <_ZNSt5dequeItSaItEE5beginEv>:
      /**
       *  Returns a read/write iterator that points to the first element in the
       *  %deque.  Iteration is done in ordinary element order.
       */
      iterator
      begin() _GLIBCXX_NOEXCEPT
 80056e2:	b580      	push	{r7, lr}
 80056e4:	b082      	sub	sp, #8
 80056e6:	af00      	add	r7, sp, #0
 80056e8:	6078      	str	r0, [r7, #4]
 80056ea:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_start; }
 80056ec:	683b      	ldr	r3, [r7, #0]
 80056ee:	3308      	adds	r3, #8
 80056f0:	4619      	mov	r1, r3
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f000 f81e 	bl	8005734 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 80056f8:	6878      	ldr	r0, [r7, #4]
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}

08005700 <_ZNSt5dequeItSaItEE3endEv>:
       *  Returns a read/write iterator that points one past the last
       *  element in the %deque.  Iteration is done in ordinary
       *  element order.
       */
      iterator
      end() _GLIBCXX_NOEXCEPT
 8005700:	b580      	push	{r7, lr}
 8005702:	b082      	sub	sp, #8
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
      { return this->_M_impl._M_finish; }
 800570a:	683b      	ldr	r3, [r7, #0]
 800570c:	3318      	adds	r3, #24
 800570e:	4619      	mov	r1, r3
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 f80f 	bl	8005734 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	3708      	adds	r7, #8
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}

0800571e <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 800571e:	b480      	push	{r7}
 8005720:	b083      	sub	sp, #12
 8005722:	af00      	add	r7, sp, #0
 8005724:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	4618      	mov	r0, r3
 800572a:	370c      	adds	r7, #12
 800572c:	46bd      	mov	sp, r7
 800572e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005732:	4770      	bx	lr

08005734 <_ZNSt15_Deque_iteratorItRtPtEC1ERKS2_>:
      _Deque_iterator(const _Deque_iterator& __x) noexcept
 8005734:	b480      	push	{r7}
 8005736:	b083      	sub	sp, #12
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
 800573c:	6039      	str	r1, [r7, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	601a      	str	r2, [r3, #0]
       : _M_cur(__x._M_cur), _M_first(__x._M_first),
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	685a      	ldr	r2, [r3, #4]
	 _M_last(__x._M_last), _M_node(__x._M_node) { }
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	605a      	str	r2, [r3, #4]
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	609a      	str	r2, [r3, #8]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	68da      	ldr	r2, [r3, #12]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	4618      	mov	r0, r3
 8005762:	370c      	adds	r7, #12
 8005764:	46bd      	mov	sp, r7
 8005766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576a:	4770      	bx	lr

0800576c <_ZNSt5dequeItSaItEE15_M_destroy_dataESt15_Deque_iteratorItRtPtES5_RKS0_>:
	void
	_M_destroy_data(iterator __first, iterator __last, const _Alloc1&)
	{ _M_destroy_data_aux(__first, __last); }

      void
      _M_destroy_data(iterator __first, iterator __last,
 800576c:	b480      	push	{r7}
 800576e:	b08d      	sub	sp, #52	; 0x34
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
 8005778:	603b      	str	r3, [r7, #0]
		      const std::allocator<_Tp>&)
      {
	if (!__has_trivial_destructor(value_type))
	  _M_destroy_data_aux(__first, __last);
      }
 800577a:	bf00      	nop
 800577c:	3734      	adds	r7, #52	; 0x34
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <_ZNSt5dequeItSaItEE5frontEv>:
      front() _GLIBCXX_NOEXCEPT
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
	return *begin();
 800578e:	f107 0308 	add.w	r3, r7, #8
 8005792:	6879      	ldr	r1, [r7, #4]
 8005794:	4618      	mov	r0, r3
 8005796:	f7ff ffa4 	bl	80056e2 <_ZNSt5dequeItSaItEE5beginEv>
 800579a:	f107 0308 	add.w	r3, r7, #8
 800579e:	4618      	mov	r0, r3
 80057a0:	f000 fa1a 	bl	8005bd8 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>
 80057a4:	4603      	mov	r3, r0
      }
 80057a6:	4618      	mov	r0, r3
 80057a8:	3718      	adds	r7, #24
 80057aa:	46bd      	mov	sp, r7
 80057ac:	bd80      	pop	{r7, pc}

080057ae <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80057ae:	b480      	push	{r7}
 80057b0:	b083      	sub	sp, #12
 80057b2:	af00      	add	r7, sp, #0
 80057b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	4618      	mov	r0, r3
 80057ba:	370c      	adds	r7, #12
 80057bc:	46bd      	mov	sp, r7
 80057be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c2:	4770      	bx	lr

080057c4 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b084      	sub	sp, #16
 80057c8:	af00      	add	r7, sp, #0
 80057ca:	60f8      	str	r0, [r7, #12]
 80057cc:	60b9      	str	r1, [r7, #8]
 80057ce:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ffec 	bl	80057ae <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 80057d6:	4603      	mov	r3, r0
 80057d8:	461a      	mov	r2, r3
 80057da:	68b9      	ldr	r1, [r7, #8]
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f000 fa07 	bl	8005bf0 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>
	}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <_ZNSt6vectorItSaItEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 80057ea:	b580      	push	{r7, lr}
 80057ec:	b084      	sub	sp, #16
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	1d1a      	adds	r2, r3, #4
 80057f6:	f107 030c 	add.w	r3, r7, #12
 80057fa:	4611      	mov	r1, r2
 80057fc:	4618      	mov	r0, r3
 80057fe:	f000 fa0f 	bl	8005c20 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	4618      	mov	r0, r3
 8005806:	3710      	adds	r7, #16
 8005808:	46bd      	mov	sp, r7
 800580a:	bd80      	pop	{r7, pc}

0800580c <_ZNSt6vectorItSaItEE15_S_use_relocateEv>:
      _S_use_relocate()
 800580c:	b580      	push	{r7, lr}
 800580e:	b082      	sub	sp, #8
 8005810:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8005812:	4618      	mov	r0, r3
 8005814:	f000 f805 	bl	8005822 <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005818:	4603      	mov	r3, r0
      }
 800581a:	4618      	mov	r0, r3
 800581c:	3708      	adds	r7, #8
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}

08005822 <_ZNSt6vectorItSaItEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8005822:	b480      	push	{r7}
 8005824:	b083      	sub	sp, #12
 8005826:	af00      	add	r7, sp, #0
 8005828:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 800582a:	2301      	movs	r3, #1
      }
 800582c:	4618      	mov	r0, r3
 800582e:	370c      	adds	r7, #12
 8005830:	46bd      	mov	sp, r7
 8005832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005836:	4770      	bx	lr

08005838 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8005838:	b5b0      	push	{r4, r5, r7, lr}
 800583a:	b08c      	sub	sp, #48	; 0x30
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8005844:	4a59      	ldr	r2, [pc, #356]	; (80059ac <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8005846:	2101      	movs	r1, #1
 8005848:	68f8      	ldr	r0, [r7, #12]
 800584a:	f000 f9f9 	bl	8005c40 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 800584e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	685b      	ldr	r3, [r3, #4]
 800585a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 800585c:	68f8      	ldr	r0, [r7, #12]
 800585e:	f000 fa36 	bl	8005cce <_ZNSt6vectorItSaItEE5beginEv>
 8005862:	4603      	mov	r3, r0
 8005864:	617b      	str	r3, [r7, #20]
 8005866:	f107 0214 	add.w	r2, r7, #20
 800586a:	f107 0308 	add.w	r3, r7, #8
 800586e:	4611      	mov	r1, r2
 8005870:	4618      	mov	r0, r3
 8005872:	f000 fa3c 	bl	8005cee <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005876:	4603      	mov	r3, r0
 8005878:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800587e:	4618      	mov	r0, r3
 8005880:	f000 fa4a 	bl	8005d18 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8005884:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005886:	69bb      	ldr	r3, [r7, #24]
 8005888:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 800588a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 800588c:	69fb      	ldr	r3, [r7, #28]
 800588e:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 8005890:	69ba      	ldr	r2, [r7, #24]
 8005892:	18d5      	adds	r5, r2, r3
 8005894:	6878      	ldr	r0, [r7, #4]
 8005896:	f7ff ff8a 	bl	80057ae <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 800589a:	4603      	mov	r3, r0
 800589c:	461a      	mov	r2, r3
 800589e:	4629      	mov	r1, r5
 80058a0:	4620      	mov	r0, r4
 80058a2:	f7ff ff8f 	bl	80057c4 <_ZNSt16allocator_traitsISaItEE9constructItJRhEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 80058a6:	2300      	movs	r3, #0
 80058a8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80058aa:	f7ff ffaf 	bl	800580c <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 80058ae:	4603      	mov	r3, r0
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d027      	beq.n	8005904 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058b4:	f107 0308 	add.w	r3, r7, #8
 80058b8:	4618      	mov	r0, r3
 80058ba:	f000 fa55 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80058be:	4603      	mov	r3, r0
 80058c0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7ff feb4 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80058ca:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80058cc:	69ba      	ldr	r2, [r7, #24]
 80058ce:	4621      	mov	r1, r4
 80058d0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058d2:	f000 fa35 	bl	8005d40 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 80058d6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	3302      	adds	r3, #2
 80058dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058de:	f107 0308 	add.w	r3, r7, #8
 80058e2:	4618      	mov	r0, r3
 80058e4:	f000 fa40 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 80058e8:	4603      	mov	r3, r0
 80058ea:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	4618      	mov	r0, r3
 80058f0:	f7ff fe9f 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 80058f4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80058f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f8:	6a39      	ldr	r1, [r7, #32]
 80058fa:	4620      	mov	r0, r4
 80058fc:	f000 fa20 	bl	8005d40 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8005900:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005902:	e026      	b.n	8005952 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8005904:	f107 0308 	add.w	r3, r7, #8
 8005908:	4618      	mov	r0, r3
 800590a:	f000 fa2d 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 800590e:	4603      	mov	r3, r0
 8005910:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8005912:	68fb      	ldr	r3, [r7, #12]
 8005914:	4618      	mov	r0, r3
 8005916:	f7ff fe8c 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800591a:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 800591c:	69ba      	ldr	r2, [r7, #24]
 800591e:	4621      	mov	r1, r4
 8005920:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005922:	f000 fa2c 	bl	8005d7e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8005926:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8005928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592a:	3302      	adds	r3, #2
 800592c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800592e:	f107 0308 	add.w	r3, r7, #8
 8005932:	4618      	mov	r0, r3
 8005934:	f000 fa18 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005938:	4603      	mov	r3, r0
 800593a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	4618      	mov	r0, r3
 8005940:	f7ff fe77 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005944:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005946:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005948:	6a39      	ldr	r1, [r7, #32]
 800594a:	4620      	mov	r0, r4
 800594c:	f000 fa17 	bl	8005d7e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8005950:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8005952:	f7ff ff5b 	bl	800580c <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8005956:	4603      	mov	r3, r0
 8005958:	f083 0301 	eor.w	r3, r3, #1
 800595c:	b2db      	uxtb	r3, r3
 800595e:	2b00      	cmp	r3, #0
 8005960:	d009      	beq.n	8005976 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJRhEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	4618      	mov	r0, r3
 8005966:	f7ff fe64 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800596a:	4603      	mov	r3, r0
 800596c:	461a      	mov	r2, r3
 800596e:	6a39      	ldr	r1, [r7, #32]
 8005970:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005972:	f7ff fe69 	bl	8005648 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8005976:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	689a      	ldr	r2, [r3, #8]
 800597c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800597e:	1ad3      	subs	r3, r2, r3
 8005980:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 8005982:	461a      	mov	r2, r3
 8005984:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005986:	f7ff fe41 	bl	800560c <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	69ba      	ldr	r2, [r7, #24]
 800598e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005994:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	005b      	lsls	r3, r3, #1
 800599a:	69ba      	ldr	r2, [r7, #24]
 800599c:	441a      	add	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	609a      	str	r2, [r3, #8]
    }
 80059a2:	bf00      	nop
 80059a4:	3730      	adds	r7, #48	; 0x30
 80059a6:	46bd      	mov	sp, r7
 80059a8:	bdb0      	pop	{r4, r5, r7, pc}
 80059aa:	bf00      	nop
 80059ac:	08025594 	.word	0x08025594

080059b0 <_ZNSt5dequeItSaItEE9push_backERKt>:
      push_back(const value_type& __x)
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish._M_cur
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699a      	ldr	r2, [r3, #24]
	    != this->_M_impl._M_finish._M_last - 1)
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	6a1b      	ldr	r3, [r3, #32]
 80059c2:	3b02      	subs	r3, #2
	if (this->_M_impl._M_finish._M_cur
 80059c4:	429a      	cmp	r2, r3
 80059c6:	d00c      	beq.n	80059e2 <_ZNSt5dequeItSaItEE9push_backERKt+0x32>
	    _Alloc_traits::construct(this->_M_impl,
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	699b      	ldr	r3, [r3, #24]
 80059ce:	683a      	ldr	r2, [r7, #0]
 80059d0:	4619      	mov	r1, r3
 80059d2:	f000 f9fa 	bl	8005dca <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish._M_cur;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	699b      	ldr	r3, [r3, #24]
 80059da:	1c9a      	adds	r2, r3, #2
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	619a      	str	r2, [r3, #24]
      }
 80059e0:	e003      	b.n	80059ea <_ZNSt5dequeItSaItEE9push_backERKt+0x3a>
	  _M_push_back_aux(__x);
 80059e2:	6839      	ldr	r1, [r7, #0]
 80059e4:	6878      	ldr	r0, [r7, #4]
 80059e6:	f000 fa03 	bl	8005df0 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>
      }
 80059ea:	bf00      	nop
 80059ec:	3708      	adds	r7, #8
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd80      	pop	{r7, pc}

080059f2 <_ZNSt5dequeItSaItEE9pop_frontEv>:
      pop_front() _GLIBCXX_NOEXCEPT
 80059f2:	b580      	push	{r7, lr}
 80059f4:	b082      	sub	sp, #8
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	6078      	str	r0, [r7, #4]
	if (this->_M_impl._M_start._M_cur
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	689a      	ldr	r2, [r3, #8]
	    != this->_M_impl._M_start._M_last - 1)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	691b      	ldr	r3, [r3, #16]
 8005a02:	3b02      	subs	r3, #2
	if (this->_M_impl._M_start._M_cur
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d010      	beq.n	8005a2a <_ZNSt5dequeItSaItEE9pop_frontEv+0x38>
	    _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	4618      	mov	r0, r3
 8005a0c:	f7ff fe87 	bl	800571e <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005a10:	4602      	mov	r2, r0
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	689b      	ldr	r3, [r3, #8]
 8005a16:	4619      	mov	r1, r3
 8005a18:	4610      	mov	r0, r2
 8005a1a:	f000 f9c9 	bl	8005db0 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
	    ++this->_M_impl._M_start._M_cur;
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	689b      	ldr	r3, [r3, #8]
 8005a22:	1c9a      	adds	r2, r3, #2
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	609a      	str	r2, [r3, #8]
      }
 8005a28:	e002      	b.n	8005a30 <_ZNSt5dequeItSaItEE9pop_frontEv+0x3e>
	  _M_pop_front_aux();
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa24 	bl	8005e78 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>
      }
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}

08005a38 <_ZN9__gnu_cxx13new_allocatorItEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005a38:	b480      	push	{r7}
 8005a3a:	b083      	sub	sp, #12
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4618      	mov	r0, r3
 8005a44:	370c      	adds	r7, #12
 8005a46:	46bd      	mov	sp, r7
 8005a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4c:	4770      	bx	lr

08005a4e <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b084      	sub	sp, #16
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 fa32 	bl	8005ec8 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>
 8005a64:	bf00      	nop
 8005a66:	3710      	adds	r7, #16
 8005a68:	46bd      	mov	sp, r7
 8005a6a:	bd80      	pop	{r7, pc}

08005a6c <_ZSt8_DestroyIPtEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005a6c:	b580      	push	{r7, lr}
 8005a6e:	b082      	sub	sp, #8
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005a76:	6839      	ldr	r1, [r7, #0]
 8005a78:	6878      	ldr	r0, [r7, #4]
 8005a7a:	f000 fa35 	bl	8005ee8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>
    }
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}

08005a86 <_ZNSt11_Deque_baseItSaItEE11_Deque_implC1Ev>:
	_Deque_impl() _GLIBCXX_NOEXCEPT_IF(
 8005a86:	b580      	push	{r7, lr}
 8005a88:	b082      	sub	sp, #8
 8005a8a:	af00      	add	r7, sp, #0
 8005a8c:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f7ff fd91 	bl	80055b6 <_ZNSaItEC1Ev>
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	4618      	mov	r0, r3
 8005a98:	f000 fa31 	bl	8005efe <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>
	{ }
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	3708      	adds	r7, #8
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <_ZNSt11_Deque_baseItSaItEE17_M_initialize_mapEj>:
    _Deque_base<_Tp, _Alloc>::
 8005aa6:	b590      	push	{r4, r7, lr}
 8005aa8:	b089      	sub	sp, #36	; 0x24
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
 8005aae:	6039      	str	r1, [r7, #0]
      const size_t __num_nodes = (__num_elements / __deque_buf_size(sizeof(_Tp))
 8005ab0:	2002      	movs	r0, #2
 8005ab2:	f7ff fa77 	bl	8004fa4 <_ZSt16__deque_buf_sizej>
 8005ab6:	4602      	mov	r2, r0
 8005ab8:	683b      	ldr	r3, [r7, #0]
 8005aba:	fbb3 f3f2 	udiv	r3, r3, r2
 8005abe:	3301      	adds	r3, #1
 8005ac0:	61fb      	str	r3, [r7, #28]
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	60fb      	str	r3, [r7, #12]
					   size_t(__num_nodes + 2));
 8005ac6:	69fb      	ldr	r3, [r7, #28]
 8005ac8:	3302      	adds	r3, #2
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	f107 0210 	add.w	r2, r7, #16
 8005ad0:	f107 030c 	add.w	r3, r7, #12
 8005ad4:	4611      	mov	r1, r2
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	f7fe f8c5 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 8005adc:	4603      	mov	r3, r0
      this->_M_impl._M_map_size = std::max((size_t) _S_initial_map_size,
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_map = _M_allocate_map(this->_M_impl._M_map_size);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	4619      	mov	r1, r3
 8005aea:	6878      	ldr	r0, [r7, #4]
 8005aec:	f000 fa20 	bl	8005f30 <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8005af0:	4602      	mov	r2, r0
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	601a      	str	r2, [r3, #0]
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681a      	ldr	r2, [r3, #0]
			       + (this->_M_impl._M_map_size - __num_nodes) / 2);
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6859      	ldr	r1, [r3, #4]
 8005afe:	69fb      	ldr	r3, [r7, #28]
 8005b00:	1acb      	subs	r3, r1, r3
 8005b02:	085b      	lsrs	r3, r3, #1
 8005b04:	009b      	lsls	r3, r3, #2
      _Map_pointer __nstart = (this->_M_impl._M_map
 8005b06:	4413      	add	r3, r2
 8005b08:	61bb      	str	r3, [r7, #24]
      _Map_pointer __nfinish = __nstart + __num_nodes;
 8005b0a:	69fb      	ldr	r3, [r7, #28]
 8005b0c:	009b      	lsls	r3, r3, #2
 8005b0e:	69ba      	ldr	r2, [r7, #24]
 8005b10:	4413      	add	r3, r2
 8005b12:	617b      	str	r3, [r7, #20]
	{ _M_create_nodes(__nstart, __nfinish); }
 8005b14:	697a      	ldr	r2, [r7, #20]
 8005b16:	69b9      	ldr	r1, [r7, #24]
 8005b18:	6878      	ldr	r0, [r7, #4]
 8005b1a:	f000 fa26 	bl	8005f6a <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>
      this->_M_impl._M_start._M_set_node(__nstart);
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	3308      	adds	r3, #8
 8005b22:	69b9      	ldr	r1, [r7, #24]
 8005b24:	4618      	mov	r0, r3
 8005b26:	f000 fa3a 	bl	8005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__nfinish - 1);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f103 0218 	add.w	r2, r3, #24
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3b04      	subs	r3, #4
 8005b34:	4619      	mov	r1, r3
 8005b36:	4610      	mov	r0, r2
 8005b38:	f000 fa31 	bl	8005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = _M_impl._M_start._M_first;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68da      	ldr	r2, [r3, #12]
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	609a      	str	r2, [r3, #8]
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	69dc      	ldr	r4, [r3, #28]
					% __deque_buf_size(sizeof(_Tp)));
 8005b48:	2002      	movs	r0, #2
 8005b4a:	f7ff fa2b 	bl	8004fa4 <_ZSt16__deque_buf_sizej>
 8005b4e:	4602      	mov	r2, r0
 8005b50:	683b      	ldr	r3, [r7, #0]
 8005b52:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b56:	fb01 f202 	mul.w	r2, r1, r2
 8005b5a:	1a9b      	subs	r3, r3, r2
					+ __num_elements
 8005b5c:	005b      	lsls	r3, r3, #1
 8005b5e:	18e2      	adds	r2, r4, r3
      this->_M_impl._M_finish._M_cur = (this->_M_impl._M_finish._M_first
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	619a      	str	r2, [r3, #24]
    }
 8005b64:	bf00      	nop
 8005b66:	3724      	adds	r7, #36	; 0x24
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd90      	pop	{r4, r7, pc}

08005b6c <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b086      	sub	sp, #24
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	607a      	str	r2, [r7, #4]
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	617b      	str	r3, [r7, #20]
 8005b7c:	697a      	ldr	r2, [r7, #20]
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d209      	bcs.n	8005b98 <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x2c>
	_M_deallocate_node(*__n);
 8005b84:	697b      	ldr	r3, [r7, #20]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	4619      	mov	r1, r3
 8005b8a:	68f8      	ldr	r0, [r7, #12]
 8005b8c:	f000 fa20 	bl	8005fd0 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      for (_Map_pointer __n = __nstart; __n < __nfinish; ++__n)
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	3304      	adds	r3, #4
 8005b94:	617b      	str	r3, [r7, #20]
 8005b96:	e7f1      	b.n	8005b7c <_ZNSt11_Deque_baseItSaItEE16_M_destroy_nodesEPPtS3_+0x10>
    }
 8005b98:	bf00      	nop
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>:
      _M_deallocate_map(_Map_pointer __p, size_t __n) _GLIBCXX_NOEXCEPT
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f000 fa1f 	bl	8005ff6 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	_Map_alloc_traits::deallocate(__map_alloc, __p, __n);
 8005bb8:	f107 0314 	add.w	r3, r7, #20
 8005bbc:	687a      	ldr	r2, [r7, #4]
 8005bbe:	68b9      	ldr	r1, [r7, #8]
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	f000 fa35 	bl	8006030 <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005bc6:	f107 0314 	add.w	r3, r7, #20
 8005bca:	4618      	mov	r0, r3
 8005bcc:	f000 fa24 	bl	8006018 <_ZNSaIPtED1Ev>
      }
 8005bd0:	bf00      	nop
 8005bd2:	3718      	adds	r7, #24
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	bd80      	pop	{r7, pc}

08005bd8 <_ZNKSt15_Deque_iteratorItRtPtEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8005bd8:	b480      	push	{r7}
 8005bda:	b083      	sub	sp, #12
 8005bdc:	af00      	add	r7, sp, #0
 8005bde:	6078      	str	r0, [r7, #4]
      { return *_M_cur; }
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <_ZN9__gnu_cxx13new_allocatorItE9constructItJRhEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8005bf0:	b590      	push	{r4, r7, lr}
 8005bf2:	b085      	sub	sp, #20
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f7ff fdd6 	bl	80057ae <_ZSt7forwardIRhEOT_RNSt16remove_referenceIS1_E4typeE>
 8005c02:	4603      	mov	r3, r0
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b29c      	uxth	r4, r3
 8005c08:	68bb      	ldr	r3, [r7, #8]
 8005c0a:	4619      	mov	r1, r3
 8005c0c:	2002      	movs	r0, #2
 8005c0e:	f7fc f94c 	bl	8001eaa <_ZnwjPv>
 8005c12:	4603      	mov	r3, r0
 8005c14:	4622      	mov	r2, r4
 8005c16:	801a      	strh	r2, [r3, #0]
 8005c18:	bf00      	nop
 8005c1a:	3714      	adds	r7, #20
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
 8005c28:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	601a      	str	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	4618      	mov	r0, r3
 8005c36:	370c      	adds	r7, #12
 8005c38:	46bd      	mov	sp, r7
 8005c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3e:	4770      	bx	lr

08005c40 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8005c40:	b590      	push	{r4, r7, lr}
 8005c42:	b087      	sub	sp, #28
 8005c44:	af00      	add	r7, sp, #0
 8005c46:	60f8      	str	r0, [r7, #12]
 8005c48:	60b9      	str	r1, [r7, #8]
 8005c4a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 f9fe 	bl	800604e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005c52:	4604      	mov	r4, r0
 8005c54:	68f8      	ldr	r0, [r7, #12]
 8005c56:	f000 fa0b 	bl	8006070 <_ZNKSt6vectorItSaItEE4sizeEv>
 8005c5a:	4603      	mov	r3, r0
 8005c5c:	1ae2      	subs	r2, r4, r3
 8005c5e:	68bb      	ldr	r3, [r7, #8]
 8005c60:	429a      	cmp	r2, r3
 8005c62:	bf34      	ite	cc
 8005c64:	2301      	movcc	r3, #1
 8005c66:	2300      	movcs	r3, #0
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d002      	beq.n	8005c74 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005c6e:	6878      	ldr	r0, [r7, #4]
 8005c70:	f01d f8c3 	bl	8022dfa <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f000 f9fb 	bl	8006070 <_ZNKSt6vectorItSaItEE4sizeEv>
 8005c7a:	4604      	mov	r4, r0
 8005c7c:	68f8      	ldr	r0, [r7, #12]
 8005c7e:	f000 f9f7 	bl	8006070 <_ZNKSt6vectorItSaItEE4sizeEv>
 8005c82:	4603      	mov	r3, r0
 8005c84:	613b      	str	r3, [r7, #16]
 8005c86:	f107 0208 	add.w	r2, r7, #8
 8005c8a:	f107 0310 	add.w	r3, r7, #16
 8005c8e:	4611      	mov	r1, r2
 8005c90:	4618      	mov	r0, r3
 8005c92:	f7fd ffe8 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 8005c96:	4603      	mov	r3, r0
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	4423      	add	r3, r4
 8005c9c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8005c9e:	68f8      	ldr	r0, [r7, #12]
 8005ca0:	f000 f9e6 	bl	8006070 <_ZNKSt6vectorItSaItEE4sizeEv>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	697b      	ldr	r3, [r7, #20]
 8005ca8:	4293      	cmp	r3, r2
 8005caa:	d306      	bcc.n	8005cba <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x7a>
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f9ce 	bl	800604e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005cb2:	4602      	mov	r2, r0
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	4293      	cmp	r3, r2
 8005cb8:	d904      	bls.n	8005cc4 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x84>
 8005cba:	68f8      	ldr	r0, [r7, #12]
 8005cbc:	f000 f9c7 	bl	800604e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	e000      	b.n	8005cc6 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc+0x86>
 8005cc4:	697b      	ldr	r3, [r7, #20]
      }
 8005cc6:	4618      	mov	r0, r3
 8005cc8:	371c      	adds	r7, #28
 8005cca:	46bd      	mov	sp, r7
 8005ccc:	bd90      	pop	{r4, r7, pc}

08005cce <_ZNSt6vectorItSaItEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8005cce:	b580      	push	{r7, lr}
 8005cd0:	b084      	sub	sp, #16
 8005cd2:	af00      	add	r7, sp, #0
 8005cd4:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8005cd6:	687a      	ldr	r2, [r7, #4]
 8005cd8:	f107 030c 	add.w	r3, r7, #12
 8005cdc:	4611      	mov	r1, r2
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7ff ff9e 	bl	8005c20 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	4618      	mov	r0, r3
 8005ce8:	3710      	adds	r7, #16
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}

08005cee <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8005cee:	b590      	push	{r4, r7, lr}
 8005cf0:	b083      	sub	sp, #12
 8005cf2:	af00      	add	r7, sp, #0
 8005cf4:	6078      	str	r0, [r7, #4]
 8005cf6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8005cf8:	6878      	ldr	r0, [r7, #4]
 8005cfa:	f000 f835 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	681c      	ldr	r4, [r3, #0]
 8005d02:	6838      	ldr	r0, [r7, #0]
 8005d04:	f000 f830 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8005d08:	4603      	mov	r3, r0
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	1ae3      	subs	r3, r4, r3
 8005d0e:	105b      	asrs	r3, r3, #1
 8005d10:	4618      	mov	r0, r3
 8005d12:	370c      	adds	r7, #12
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd90      	pop	{r4, r7, pc}

08005d18 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
 8005d20:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d006      	beq.n	8005d36 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x1e>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	6839      	ldr	r1, [r7, #0]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f9af 	bl	8006090 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8005d32:	4603      	mov	r3, r0
 8005d34:	e000      	b.n	8005d38 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj+0x20>
 8005d36:	2300      	movs	r3, #0
      }
 8005d38:	4618      	mov	r0, r3
 8005d3a:	3708      	adds	r7, #8
 8005d3c:	46bd      	mov	sp, r7
 8005d3e:	bd80      	pop	{r7, pc}

08005d40 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8005d40:	b590      	push	{r4, r7, lr}
 8005d42:	b087      	sub	sp, #28
 8005d44:	af02      	add	r7, sp, #8
 8005d46:	60f8      	str	r0, [r7, #12]
 8005d48:	60b9      	str	r1, [r7, #8]
 8005d4a:	607a      	str	r2, [r7, #4]
 8005d4c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8005d4e:	f88d 4000 	strb.w	r4, [sp]
 8005d52:	683b      	ldr	r3, [r7, #0]
 8005d54:	687a      	ldr	r2, [r7, #4]
 8005d56:	68b9      	ldr	r1, [r7, #8]
 8005d58:	68f8      	ldr	r0, [r7, #12]
 8005d5a:	f000 f9a8 	bl	80060ae <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>
 8005d5e:	4603      	mov	r3, r0
      }
 8005d60:	4618      	mov	r0, r3
 8005d62:	3714      	adds	r7, #20
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd90      	pop	{r4, r7, pc}

08005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8005d68:	b480      	push	{r7}
 8005d6a:	b083      	sub	sp, #12
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	4618      	mov	r0, r3
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr

08005d7e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8005d7e:	b590      	push	{r4, r7, lr}
 8005d80:	b085      	sub	sp, #20
 8005d82:	af00      	add	r7, sp, #0
 8005d84:	60f8      	str	r0, [r7, #12]
 8005d86:	60b9      	str	r1, [r7, #8]
 8005d88:	607a      	str	r2, [r7, #4]
 8005d8a:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8005d8c:	68f8      	ldr	r0, [r7, #12]
 8005d8e:	f000 f9a0 	bl	80060d2 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8005d92:	4604      	mov	r4, r0
 8005d94:	68b8      	ldr	r0, [r7, #8]
 8005d96:	f000 f99c 	bl	80060d2 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8005d9a:	4601      	mov	r1, r0
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	687a      	ldr	r2, [r7, #4]
 8005da0:	4620      	mov	r0, r4
 8005da2:	f000 f9a5 	bl	80060f0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
 8005da6:	4603      	mov	r3, r0
    }
 8005da8:	4618      	mov	r0, r3
 8005daa:	3714      	adds	r7, #20
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd90      	pop	{r4, r7, pc}

08005db0 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>:
	destroy(allocator_type& __a __attribute__((__unused__)), _Up* __p)
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b082      	sub	sp, #8
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
 8005db8:	6039      	str	r1, [r7, #0]
	  __a.destroy(__p);
 8005dba:	6839      	ldr	r1, [r7, #0]
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f000 f9a8 	bl	8006112 <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>
	}
 8005dc2:	bf00      	nop
 8005dc4:	3708      	adds	r7, #8
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	bd80      	pop	{r7, pc}

08005dca <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8005dca:	b580      	push	{r7, lr}
 8005dcc:	b084      	sub	sp, #16
 8005dce:	af00      	add	r7, sp, #0
 8005dd0:	60f8      	str	r0, [r7, #12]
 8005dd2:	60b9      	str	r1, [r7, #8]
 8005dd4:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 f9a6 	bl	8006128 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	461a      	mov	r2, r3
 8005de0:	68b9      	ldr	r1, [r7, #8]
 8005de2:	68f8      	ldr	r0, [r7, #12]
 8005de4:	f000 f9ab 	bl	800613e <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>
	}
 8005de8:	bf00      	nop
 8005dea:	3710      	adds	r7, #16
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bd80      	pop	{r7, pc}

08005df0 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_>:
  // Called only if _M_impl._M_finish._M_cur == _M_impl._M_finish._M_last - 1.
  template<typename _Tp, typename _Alloc>
#if __cplusplus >= 201103L
    template<typename... _Args>
      void
      deque<_Tp, _Alloc>::
 8005df0:	b5b0      	push	{r4, r5, r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
 8005df8:	6039      	str	r1, [r7, #0]
      void
      deque<_Tp, _Alloc>::
      _M_push_back_aux(const value_type& __t)
#endif
      {
	if (size() == max_size())
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 f9b6 	bl	800616c <_ZNKSt5dequeItSaItEE4sizeEv>
 8005e00:	4604      	mov	r4, r0
 8005e02:	6878      	ldr	r0, [r7, #4]
 8005e04:	f000 f9c4 	bl	8006190 <_ZNKSt5dequeItSaItEE8max_sizeEv>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	429c      	cmp	r4, r3
 8005e0c:	bf0c      	ite	eq
 8005e0e:	2301      	moveq	r3, #1
 8005e10:	2300      	movne	r3, #0
 8005e12:	b2db      	uxtb	r3, r3
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d002      	beq.n	8005e1e <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x2e>
	  __throw_length_error(
 8005e18:	4816      	ldr	r0, [pc, #88]	; (8005e74 <_ZNSt5dequeItSaItEE16_M_push_back_auxIJRKtEEEvDpOT_+0x84>)
 8005e1a:	f01c ffee 	bl	8022dfa <_ZSt20__throw_length_errorPKc>
	      __N("cannot create std::deque larger than max_size()"));

	_M_reserve_map_at_back();
 8005e1e:	2101      	movs	r1, #1
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f000 f9c6 	bl	80061b2 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>
	*(this->_M_impl._M_finish._M_node + 1) = this->_M_allocate_node();
 8005e26:	687a      	ldr	r2, [r7, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e2c:	1d1c      	adds	r4, r3, #4
 8005e2e:	4610      	mov	r0, r2
 8005e30:	f000 f9da 	bl	80061e8 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8005e34:	4603      	mov	r3, r0
 8005e36:	6023      	str	r3, [r4, #0]
	__try
	  {
#if __cplusplus >= 201103L
	    _Alloc_traits::construct(this->_M_impl,
 8005e38:	687c      	ldr	r4, [r7, #4]
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	699d      	ldr	r5, [r3, #24]
 8005e3e:	6838      	ldr	r0, [r7, #0]
 8005e40:	f000 f972 	bl	8006128 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8005e44:	4603      	mov	r3, r0
 8005e46:	461a      	mov	r2, r3
 8005e48:	4629      	mov	r1, r5
 8005e4a:	4620      	mov	r0, r4
 8005e4c:	f7ff ffbd 	bl	8005dca <_ZNSt16allocator_traitsISaItEE9constructItJRKtEEEvRS0_PT_DpOT0_>
				     this->_M_impl._M_finish._M_cur,
				     std::forward<_Args>(__args)...);
#else
	    this->_M_impl.construct(this->_M_impl._M_finish._M_cur, __t);
#endif
	    this->_M_impl._M_finish._M_set_node(this->_M_impl._M_finish._M_node
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	f103 0218 	add.w	r2, r3, #24
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4619      	mov	r1, r3
 8005e5e:	4610      	mov	r0, r2
 8005e60:	f000 f89d 	bl	8005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
						+ 1);
	    this->_M_impl._M_finish._M_cur = this->_M_impl._M_finish._M_first;
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	69da      	ldr	r2, [r3, #28]
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	619a      	str	r2, [r3, #24]
	__catch(...)
	  {
	    _M_deallocate_node(*(this->_M_impl._M_finish._M_node + 1));
	    __throw_exception_again;
	  }
      }
 8005e6c:	bf00      	nop
 8005e6e:	3708      	adds	r7, #8
 8005e70:	46bd      	mov	sp, r7
 8005e72:	bdb0      	pop	{r4, r5, r7, pc}
 8005e74:	080255b0 	.word	0x080255b0

08005e78 <_ZNSt5dequeItSaItEE16_M_pop_front_auxEv>:
  // Note that if the deque has at least one element (a precondition for this
  // member function), and if
  //   _M_impl._M_start._M_cur == _M_impl._M_start._M_last,
  // then the deque must have at least two nodes.
  template <typename _Tp, typename _Alloc>
    void deque<_Tp, _Alloc>::
 8005e78:	b580      	push	{r7, lr}
 8005e7a:	b082      	sub	sp, #8
 8005e7c:	af00      	add	r7, sp, #0
 8005e7e:	6078      	str	r0, [r7, #4]
    _M_pop_front_aux()
    {
      _Alloc_traits::destroy(_M_get_Tp_allocator(),
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	4618      	mov	r0, r3
 8005e84:	f7ff fc4b 	bl	800571e <_ZNSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	689b      	ldr	r3, [r3, #8]
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4610      	mov	r0, r2
 8005e92:	f7ff ff8d 	bl	8005db0 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
			     this->_M_impl._M_start._M_cur);
      _M_deallocate_node(this->_M_impl._M_start._M_first);
 8005e96:	687a      	ldr	r2, [r7, #4]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	68db      	ldr	r3, [r3, #12]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	4610      	mov	r0, r2
 8005ea0:	f000 f896 	bl	8005fd0 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>
      this->_M_impl._M_start._M_set_node(this->_M_impl._M_start._M_node + 1);
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f103 0208 	add.w	r2, r3, #8
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	695b      	ldr	r3, [r3, #20]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4619      	mov	r1, r3
 8005eb2:	4610      	mov	r0, r2
 8005eb4:	f000 f873 	bl	8005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_start._M_cur = this->_M_impl._M_start._M_first;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	68da      	ldr	r2, [r3, #12]
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	609a      	str	r2, [r3, #8]
    }
 8005ec0:	bf00      	nop
 8005ec2:	3708      	adds	r7, #8
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <_ZN9__gnu_cxx13new_allocatorItE10deallocateEPtj>:
      deallocate(_Tp* __p, size_type __t)
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	005b      	lsls	r3, r3, #1
 8005ed8:	4619      	mov	r1, r3
 8005eda:	68b8      	ldr	r0, [r7, #8]
 8005edc:	f01c ff62 	bl	8022da4 <_ZdlPvj>
      }
 8005ee0:	bf00      	nop
 8005ee2:	3710      	adds	r7, #16
 8005ee4:	46bd      	mov	sp, r7
 8005ee6:	bd80      	pop	{r7, pc}

08005ee8 <_ZNSt12_Destroy_auxILb1EE9__destroyIPtEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005ee8:	b480      	push	{r7}
 8005eea:	b083      	sub	sp, #12
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
 8005ef0:	6039      	str	r1, [r7, #0]
 8005ef2:	bf00      	nop
 8005ef4:	370c      	adds	r7, #12
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr

08005efe <_ZNSt11_Deque_baseItSaItEE16_Deque_impl_dataC1Ev>:
	_Deque_impl_data() _GLIBCXX_NOEXCEPT
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
	: _M_map(), _M_map_size(), _M_start(), _M_finish()
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	601a      	str	r2, [r3, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	2200      	movs	r2, #0
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	3308      	adds	r3, #8
 8005f16:	4618      	mov	r0, r3
 8005f18:	f000 f978 	bl	800620c <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3318      	adds	r3, #24
 8005f20:	4618      	mov	r0, r3
 8005f22:	f000 f973 	bl	800620c <_ZNSt15_Deque_iteratorItRtPtEC1Ev>
	{ }
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3708      	adds	r7, #8
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	bd80      	pop	{r7, pc}

08005f30 <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>:
      _M_allocate_map(size_t __n)
 8005f30:	b590      	push	{r4, r7, lr}
 8005f32:	b085      	sub	sp, #20
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	6078      	str	r0, [r7, #4]
 8005f38:	6039      	str	r1, [r7, #0]
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005f3a:	f107 030c 	add.w	r3, r7, #12
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f000 f858 	bl	8005ff6 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005f46:	f107 030c 	add.w	r3, r7, #12
 8005f4a:	6839      	ldr	r1, [r7, #0]
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	f000 f974 	bl	800623a <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>
 8005f52:	4604      	mov	r4, r0
 8005f54:	bf00      	nop
	_Map_alloc_type __map_alloc = _M_get_map_allocator();
 8005f56:	f107 030c 	add.w	r3, r7, #12
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	f000 f85c 	bl	8006018 <_ZNSaIPtED1Ev>
	return _Map_alloc_traits::allocate(__map_alloc, __n);
 8005f60:	4623      	mov	r3, r4
      }
 8005f62:	4618      	mov	r0, r3
 8005f64:	3714      	adds	r7, #20
 8005f66:	46bd      	mov	sp, r7
 8005f68:	bd90      	pop	{r4, r7, pc}

08005f6a <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_>:
    _Deque_base<_Tp, _Alloc>::
 8005f6a:	b580      	push	{r7, lr}
 8005f6c:	b086      	sub	sp, #24
 8005f6e:	af00      	add	r7, sp, #0
 8005f70:	60f8      	str	r0, [r7, #12]
 8005f72:	60b9      	str	r1, [r7, #8]
 8005f74:	607a      	str	r2, [r7, #4]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	617b      	str	r3, [r7, #20]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	429a      	cmp	r2, r3
 8005f80:	d209      	bcs.n	8005f96 <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x2c>
	    *__cur = this->_M_allocate_node();
 8005f82:	68f8      	ldr	r0, [r7, #12]
 8005f84:	f000 f930 	bl	80061e8 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>
 8005f88:	4602      	mov	r2, r0
 8005f8a:	697b      	ldr	r3, [r7, #20]
 8005f8c:	601a      	str	r2, [r3, #0]
	  for (__cur = __nstart; __cur < __nfinish; ++__cur)
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	3304      	adds	r3, #4
 8005f92:	617b      	str	r3, [r7, #20]
 8005f94:	e7f1      	b.n	8005f7a <_ZNSt11_Deque_baseItSaItEE15_M_create_nodesEPPtS3_+0x10>
    }
 8005f96:	bf00      	nop
 8005f98:	3718      	adds	r7, #24
 8005f9a:	46bd      	mov	sp, r7
 8005f9c:	bd80      	pop	{r7, pc}

08005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>:
      _M_set_node(_Map_pointer __new_node) _GLIBCXX_NOEXCEPT
 8005f9e:	b590      	push	{r4, r7, lr}
 8005fa0:	b083      	sub	sp, #12
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
	_M_node = __new_node;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	60da      	str	r2, [r3, #12]
	_M_first = *__new_node;
 8005fae:	683b      	ldr	r3, [r7, #0]
 8005fb0:	681a      	ldr	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	605a      	str	r2, [r3, #4]
	_M_last = _M_first + difference_type(_S_buffer_size());
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	685c      	ldr	r4, [r3, #4]
 8005fba:	f000 f94d 	bl	8006258 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	005b      	lsls	r3, r3, #1
 8005fc2:	18e2      	adds	r2, r4, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	609a      	str	r2, [r3, #8]
      }
 8005fc8:	bf00      	nop
 8005fca:	370c      	adds	r7, #12
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	bd90      	pop	{r4, r7, pc}

08005fd0 <_ZNSt11_Deque_baseItSaItEE18_M_deallocate_nodeEPt>:
      _M_deallocate_node(_Ptr __p) _GLIBCXX_NOEXCEPT
 8005fd0:	b590      	push	{r4, r7, lr}
 8005fd2:	b083      	sub	sp, #12
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	6078      	str	r0, [r7, #4]
 8005fd8:	6039      	str	r1, [r7, #0]
	_Traits::deallocate(_M_impl, __p, __deque_buf_size(sizeof(_Tp)));
 8005fda:	687c      	ldr	r4, [r7, #4]
 8005fdc:	2002      	movs	r0, #2
 8005fde:	f7fe ffe1 	bl	8004fa4 <_ZSt16__deque_buf_sizej>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	461a      	mov	r2, r3
 8005fe6:	6839      	ldr	r1, [r7, #0]
 8005fe8:	4620      	mov	r0, r4
 8005fea:	f7ff fd30 	bl	8005a4e <_ZNSt16allocator_traitsISaItEE10deallocateERS0_Ptj>
      }
 8005fee:	bf00      	nop
 8005ff0:	370c      	adds	r7, #12
 8005ff2:	46bd      	mov	sp, r7
 8005ff4:	bd90      	pop	{r4, r7, pc}

08005ff6 <_ZNKSt11_Deque_baseItSaItEE20_M_get_map_allocatorEv>:
      _M_get_map_allocator() const _GLIBCXX_NOEXCEPT
 8005ff6:	b580      	push	{r7, lr}
 8005ff8:	b082      	sub	sp, #8
 8005ffa:	af00      	add	r7, sp, #0
 8005ffc:	6078      	str	r0, [r7, #4]
 8005ffe:	6039      	str	r1, [r7, #0]
      { return _Map_alloc_type(_M_get_Tp_allocator()); }
 8006000:	6838      	ldr	r0, [r7, #0]
 8006002:	f000 f931 	bl	8006268 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006006:	4603      	mov	r3, r0
 8006008:	4619      	mov	r1, r3
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f000 f937 	bl	800627e <_ZNSaIPtEC1ItEERKSaIT_E>
 8006010:	6878      	ldr	r0, [r7, #4]
 8006012:	3708      	adds	r7, #8
 8006014:	46bd      	mov	sp, r7
 8006016:	bd80      	pop	{r7, pc}

08006018 <_ZNSaIPtED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 8006018:	b580      	push	{r7, lr}
 800601a:	b082      	sub	sp, #8
 800601c:	af00      	add	r7, sp, #0
 800601e:	6078      	str	r0, [r7, #4]
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 f939 	bl	8006298 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	4618      	mov	r0, r3
 800602a:	3708      	adds	r7, #8
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <_ZNSt16allocator_traitsISaIPtEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8006030:	b580      	push	{r7, lr}
 8006032:	b084      	sub	sp, #16
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	68b9      	ldr	r1, [r7, #8]
 8006040:	68f8      	ldr	r0, [r7, #12]
 8006042:	f000 f934 	bl	80062ae <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>
 8006046:	bf00      	nop
 8006048:	3710      	adds	r7, #16
 800604a:	46bd      	mov	sp, r7
 800604c:	bd80      	pop	{r7, pc}

0800604e <_ZNKSt6vectorItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 800604e:	b580      	push	{r7, lr}
 8006050:	b082      	sub	sp, #8
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	4618      	mov	r0, r3
 800605a:	f000 f952 	bl	8006302 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 800605e:	4603      	mov	r3, r0
 8006060:	4618      	mov	r0, r3
 8006062:	f000 f934 	bl	80062ce <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>
 8006066:	4603      	mov	r3, r0
 8006068:	4618      	mov	r0, r3
 800606a:	3708      	adds	r7, #8
 800606c:	46bd      	mov	sp, r7
 800606e:	bd80      	pop	{r7, pc}

08006070 <_ZNKSt6vectorItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8006070:	b480      	push	{r7}
 8006072:	b083      	sub	sp, #12
 8006074:	af00      	add	r7, sp, #0
 8006076:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685a      	ldr	r2, [r3, #4]
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	1ad3      	subs	r3, r2, r3
 8006082:	105b      	asrs	r3, r3, #1
 8006084:	4618      	mov	r0, r3
 8006086:	370c      	adds	r7, #12
 8006088:	46bd      	mov	sp, r7
 800608a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608e:	4770      	bx	lr

08006090 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006090:	b580      	push	{r7, lr}
 8006092:	b082      	sub	sp, #8
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]
 8006098:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 800609a:	2200      	movs	r2, #0
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 f93a 	bl	8006318 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>
 80060a4:	4603      	mov	r3, r0
 80060a6:	4618      	mov	r0, r3
 80060a8:	3708      	adds	r7, #8
 80060aa:	46bd      	mov	sp, r7
 80060ac:	bd80      	pop	{r7, pc}

080060ae <_ZNSt6vectorItSaItEE14_S_do_relocateEPtS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b084      	sub	sp, #16
 80060b2:	af00      	add	r7, sp, #0
 80060b4:	60f8      	str	r0, [r7, #12]
 80060b6:	60b9      	str	r1, [r7, #8]
 80060b8:	607a      	str	r2, [r7, #4]
 80060ba:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80060bc:	683b      	ldr	r3, [r7, #0]
 80060be:	687a      	ldr	r2, [r7, #4]
 80060c0:	68b9      	ldr	r1, [r7, #8]
 80060c2:	68f8      	ldr	r0, [r7, #12]
 80060c4:	f000 f946 	bl	8006354 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 80060c8:	4603      	mov	r3, r0
      }
 80060ca:	4618      	mov	r0, r3
 80060cc:	3710      	adds	r7, #16
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}

080060d2 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80060d2:	b580      	push	{r7, lr}
 80060d4:	b084      	sub	sp, #16
 80060d6:	af00      	add	r7, sp, #0
 80060d8:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80060da:	f107 030c 	add.w	r3, r7, #12
 80060de:	6879      	ldr	r1, [r7, #4]
 80060e0:	4618      	mov	r0, r3
 80060e2:	f000 f954 	bl	800638e <_ZNSt13move_iteratorIPtEC1ES0_>
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	4618      	mov	r0, r3
 80060ea:	3710      	adds	r7, #16
 80060ec:	46bd      	mov	sp, r7
 80060ee:	bd80      	pop	{r7, pc}

080060f0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b084      	sub	sp, #16
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
 80060fc:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	68b9      	ldr	r1, [r7, #8]
 8006102:	68f8      	ldr	r0, [r7, #12]
 8006104:	f000 f955 	bl	80063b2 <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8006108:	4603      	mov	r3, r0
 800610a:	4618      	mov	r0, r3
 800610c:	3710      	adds	r7, #16
 800610e:	46bd      	mov	sp, r7
 8006110:	bd80      	pop	{r7, pc}

08006112 <_ZN9__gnu_cxx13new_allocatorItE7destroyItEEvPT_>:
	destroy(_Up* __p)
 8006112:	b480      	push	{r7}
 8006114:	b083      	sub	sp, #12
 8006116:	af00      	add	r7, sp, #0
 8006118:	6078      	str	r0, [r7, #4]
 800611a:	6039      	str	r1, [r7, #0]
	{ __p->~_Up(); }
 800611c:	bf00      	nop
 800611e:	370c      	adds	r7, #12
 8006120:	46bd      	mov	sp, r7
 8006122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006126:	4770      	bx	lr

08006128 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006128:	b480      	push	{r7}
 800612a:	b083      	sub	sp, #12
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	4618      	mov	r0, r3
 8006134:	370c      	adds	r7, #12
 8006136:	46bd      	mov	sp, r7
 8006138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800613c:	4770      	bx	lr

0800613e <_ZN9__gnu_cxx13new_allocatorItE9constructItJRKtEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800613e:	b590      	push	{r4, r7, lr}
 8006140:	b085      	sub	sp, #20
 8006142:	af00      	add	r7, sp, #0
 8006144:	60f8      	str	r0, [r7, #12]
 8006146:	60b9      	str	r1, [r7, #8]
 8006148:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff ffec 	bl	8006128 <_ZSt7forwardIRKtEOT_RNSt16remove_referenceIS2_E4typeE>
 8006150:	4603      	mov	r3, r0
 8006152:	881c      	ldrh	r4, [r3, #0]
 8006154:	68bb      	ldr	r3, [r7, #8]
 8006156:	4619      	mov	r1, r3
 8006158:	2002      	movs	r0, #2
 800615a:	f7fb fea6 	bl	8001eaa <_ZnwjPv>
 800615e:	4603      	mov	r3, r0
 8006160:	4622      	mov	r2, r4
 8006162:	801a      	strh	r2, [r3, #0]
 8006164:	bf00      	nop
 8006166:	3714      	adds	r7, #20
 8006168:	46bd      	mov	sp, r7
 800616a:	bd90      	pop	{r4, r7, pc}

0800616c <_ZNKSt5dequeItSaItEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish - this->_M_impl._M_start; }
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f103 0218 	add.w	r2, r3, #24
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	3308      	adds	r3, #8
 800617e:	4619      	mov	r1, r3
 8006180:	4610      	mov	r0, r2
 8006182:	f000 f928 	bl	80063d6 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>
 8006186:	4603      	mov	r3, r0
 8006188:	4618      	mov	r0, r3
 800618a:	3708      	adds	r7, #8
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}

08006190 <_ZNKSt5dequeItSaItEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8006190:	b580      	push	{r7, lr}
 8006192:	b082      	sub	sp, #8
 8006194:	af00      	add	r7, sp, #0
 8006196:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	4618      	mov	r0, r3
 800619c:	f000 f864 	bl	8006268 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4618      	mov	r0, r3
 80061a4:	f000 f93b 	bl	800641e <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>
 80061a8:	4603      	mov	r3, r0
 80061aa:	4618      	mov	r0, r3
 80061ac:	3708      	adds	r7, #8
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}

080061b2 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj>:
       *  Makes sure the _M_map has space for new nodes.  Does not
       *  actually add the nodes.  Can invalidate _M_map pointers.
       *  (And consequently, %deque iterators.)
       */
      void
      _M_reserve_map_at_back(size_type __nodes_to_add = 1)
 80061b2:	b580      	push	{r7, lr}
 80061b4:	b082      	sub	sp, #8
 80061b6:	af00      	add	r7, sp, #0
 80061b8:	6078      	str	r0, [r7, #4]
 80061ba:	6039      	str	r1, [r7, #0]
      {
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	1c5a      	adds	r2, r3, #1
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	685b      	ldr	r3, [r3, #4]
	    - (this->_M_impl._M_finish._M_node - this->_M_impl._M_map))
 80061c4:	6879      	ldr	r1, [r7, #4]
 80061c6:	6a48      	ldr	r0, [r1, #36]	; 0x24
 80061c8:	6879      	ldr	r1, [r7, #4]
 80061ca:	6809      	ldr	r1, [r1, #0]
 80061cc:	1a41      	subs	r1, r0, r1
 80061ce:	1089      	asrs	r1, r1, #2
 80061d0:	1a5b      	subs	r3, r3, r1
	if (__nodes_to_add + 1 > this->_M_impl._M_map_size
 80061d2:	429a      	cmp	r2, r3
 80061d4:	d904      	bls.n	80061e0 <_ZNSt5dequeItSaItEE22_M_reserve_map_at_backEj+0x2e>
	  _M_reallocate_map(__nodes_to_add, false);
 80061d6:	2200      	movs	r2, #0
 80061d8:	6839      	ldr	r1, [r7, #0]
 80061da:	6878      	ldr	r0, [r7, #4]
 80061dc:	f000 f939 	bl	8006452 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>
      }
 80061e0:	bf00      	nop
 80061e2:	3708      	adds	r7, #8
 80061e4:	46bd      	mov	sp, r7
 80061e6:	bd80      	pop	{r7, pc}

080061e8 <_ZNSt11_Deque_baseItSaItEE16_M_allocate_nodeEv>:
      _M_allocate_node()
 80061e8:	b590      	push	{r4, r7, lr}
 80061ea:	b083      	sub	sp, #12
 80061ec:	af00      	add	r7, sp, #0
 80061ee:	6078      	str	r0, [r7, #4]
	return _Traits::allocate(_M_impl, __deque_buf_size(sizeof(_Tp)));
 80061f0:	687c      	ldr	r4, [r7, #4]
 80061f2:	2002      	movs	r0, #2
 80061f4:	f7fe fed6 	bl	8004fa4 <_ZSt16__deque_buf_sizej>
 80061f8:	4603      	mov	r3, r0
 80061fa:	4619      	mov	r1, r3
 80061fc:	4620      	mov	r0, r4
 80061fe:	f7ff ff47 	bl	8006090 <_ZNSt16allocator_traitsISaItEE8allocateERS0_j>
 8006202:	4603      	mov	r3, r0
      }
 8006204:	4618      	mov	r0, r3
 8006206:	370c      	adds	r7, #12
 8006208:	46bd      	mov	sp, r7
 800620a:	bd90      	pop	{r4, r7, pc}

0800620c <_ZNSt15_Deque_iteratorItRtPtEC1Ev>:
      _Deque_iterator() _GLIBCXX_NOEXCEPT
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
 8006212:	6078      	str	r0, [r7, #4]
      : _M_cur(), _M_first(), _M_last(), _M_node() { }
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2200      	movs	r2, #0
 8006218:	601a      	str	r2, [r3, #0]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	605a      	str	r2, [r3, #4]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2200      	movs	r2, #0
 8006224:	609a      	str	r2, [r3, #8]
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	2200      	movs	r2, #0
 800622a:	60da      	str	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	4618      	mov	r0, r3
 8006230:	370c      	adds	r7, #12
 8006232:	46bd      	mov	sp, r7
 8006234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006238:	4770      	bx	lr

0800623a <_ZNSt16allocator_traitsISaIPtEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 800623a:	b580      	push	{r7, lr}
 800623c:	b082      	sub	sp, #8
 800623e:	af00      	add	r7, sp, #0
 8006240:	6078      	str	r0, [r7, #4]
 8006242:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006244:	2200      	movs	r2, #0
 8006246:	6839      	ldr	r1, [r7, #0]
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f99c 	bl	8006586 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>
 800624e:	4603      	mov	r3, r0
 8006250:	4618      	mov	r0, r3
 8006252:	3708      	adds	r7, #8
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>:
      static size_t _S_buffer_size() _GLIBCXX_NOEXCEPT
 8006258:	b580      	push	{r7, lr}
 800625a:	af00      	add	r7, sp, #0
      { return __deque_buf_size(sizeof(_Tp)); }
 800625c:	2002      	movs	r0, #2
 800625e:	f7fe fea1 	bl	8004fa4 <_ZSt16__deque_buf_sizej>
 8006262:	4603      	mov	r3, r0
 8006264:	4618      	mov	r0, r3
 8006266:	bd80      	pop	{r7, pc}

08006268 <_ZNKSt11_Deque_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006268:	b480      	push	{r7}
 800626a:	b083      	sub	sp, #12
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	4618      	mov	r0, r3
 8006274:	370c      	adds	r7, #12
 8006276:	46bd      	mov	sp, r7
 8006278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800627c:	4770      	bx	lr

0800627e <_ZNSaIPtEC1ItEERKSaIT_E>:
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }
 800627e:	b580      	push	{r7, lr}
 8006280:	b082      	sub	sp, #8
 8006282:	af00      	add	r7, sp, #0
 8006284:	6078      	str	r0, [r7, #4]
 8006286:	6039      	str	r1, [r7, #0]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f000 f99a 	bl	80065c2 <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>
 800628e:	687b      	ldr	r3, [r7, #4]
 8006290:	4618      	mov	r0, r3
 8006292:	3708      	adds	r7, #8
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}

08006298 <_ZN9__gnu_cxx13new_allocatorIPtED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8006298:	b480      	push	{r7}
 800629a:	b083      	sub	sp, #12
 800629c:	af00      	add	r7, sp, #0
 800629e:	6078      	str	r0, [r7, #4]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4618      	mov	r0, r3
 80062a4:	370c      	adds	r7, #12
 80062a6:	46bd      	mov	sp, r7
 80062a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ac:	4770      	bx	lr

080062ae <_ZN9__gnu_cxx13new_allocatorIPtE10deallocateEPS1_j>:
      deallocate(_Tp* __p, size_type __t)
 80062ae:	b580      	push	{r7, lr}
 80062b0:	b084      	sub	sp, #16
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	60f8      	str	r0, [r7, #12]
 80062b6:	60b9      	str	r1, [r7, #8]
 80062b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	009b      	lsls	r3, r3, #2
 80062be:	4619      	mov	r1, r3
 80062c0:	68b8      	ldr	r0, [r7, #8]
 80062c2:	f01c fd6f 	bl	8022da4 <_ZdlPvj>
      }
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <_ZNSt6vectorItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80062ce:	b580      	push	{r7, lr}
 80062d0:	b084      	sub	sp, #16
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 80062d6:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80062da:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f97b 	bl	80065d8 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 80062e2:	4603      	mov	r3, r0
 80062e4:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80062e6:	f107 0208 	add.w	r2, r7, #8
 80062ea:	f107 030c 	add.w	r3, r7, #12
 80062ee:	4611      	mov	r1, r2
 80062f0:	4618      	mov	r0, r3
 80062f2:	f7fd ff75 	bl	80041e0 <_ZSt3minIjERKT_S2_S2_>
 80062f6:	4603      	mov	r3, r0
 80062f8:	681b      	ldr	r3, [r3, #0]
      }
 80062fa:	4618      	mov	r0, r3
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}

08006302 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006302:	b480      	push	{r7}
 8006304:	b083      	sub	sp, #12
 8006306:	af00      	add	r7, sp, #0
 8006308:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4618      	mov	r0, r3
 800630e:	370c      	adds	r7, #12
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr

08006318 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006324:	68f8      	ldr	r0, [r7, #12]
 8006326:	f000 f963 	bl	80065f0 <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 800632a:	4602      	mov	r2, r0
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	4293      	cmp	r3, r2
 8006330:	bf8c      	ite	hi
 8006332:	2301      	movhi	r3, #1
 8006334:	2300      	movls	r3, #0
 8006336:	b2db      	uxtb	r3, r3
 8006338:	2b00      	cmp	r3, #0
 800633a:	d001      	beq.n	8006340 <_ZN9__gnu_cxx13new_allocatorItE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800633c:	f01c fd57 	bl	8022dee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006340:	68bb      	ldr	r3, [r7, #8]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	4618      	mov	r0, r3
 8006346:	f01c fd3e 	bl	8022dc6 <_Znwj>
 800634a:	4603      	mov	r3, r0
      }
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <_ZSt12__relocate_aIPtS0_SaItEET0_T_S3_S2_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006354:	b5b0      	push	{r4, r5, r7, lr}
 8006356:	b084      	sub	sp, #16
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
 8006360:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f000 f950 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 8006368:	4604      	mov	r4, r0
 800636a:	68b8      	ldr	r0, [r7, #8]
 800636c:	f000 f94c 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 8006370:	4605      	mov	r5, r0
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 f948 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 8006378:	4602      	mov	r2, r0
 800637a:	683b      	ldr	r3, [r7, #0]
 800637c:	4629      	mov	r1, r5
 800637e:	4620      	mov	r0, r4
 8006380:	f000 f94d 	bl	800661e <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006384:	4603      	mov	r3, r0
    }
 8006386:	4618      	mov	r0, r3
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bdb0      	pop	{r4, r5, r7, pc}

0800638e <_ZNSt13move_iteratorIPtEC1ES0_>:
      move_iterator(iterator_type __i)
 800638e:	b580      	push	{r7, lr}
 8006390:	b082      	sub	sp, #8
 8006392:	af00      	add	r7, sp, #0
 8006394:	6078      	str	r0, [r7, #4]
 8006396:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8006398:	463b      	mov	r3, r7
 800639a:	4618      	mov	r0, r3
 800639c:	f000 f95d 	bl	800665a <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>
 80063a0:	4603      	mov	r3, r0
 80063a2:	681a      	ldr	r2, [r3, #0]
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	601a      	str	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}

080063b2 <_ZSt18uninitialized_copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80063b2:	b580      	push	{r7, lr}
 80063b4:	b086      	sub	sp, #24
 80063b6:	af00      	add	r7, sp, #0
 80063b8:	60f8      	str	r0, [r7, #12]
 80063ba:	60b9      	str	r1, [r7, #8]
 80063bc:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80063be:	2301      	movs	r3, #1
 80063c0:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80063c2:	687a      	ldr	r2, [r7, #4]
 80063c4:	68b9      	ldr	r1, [r7, #8]
 80063c6:	68f8      	ldr	r0, [r7, #12]
 80063c8:	f000 f952 	bl	8006670 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>
 80063cc:	4603      	mov	r3, r0
    }
 80063ce:	4618      	mov	r0, r3
 80063d0:	3718      	adds	r7, #24
 80063d2:	46bd      	mov	sp, r7
 80063d4:	bd80      	pop	{r7, pc}

080063d6 <_ZStmiRKSt15_Deque_iteratorItRtPtES4_>:
      operator-(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b082      	sub	sp, #8
 80063da:	af00      	add	r7, sp, #0
 80063dc:	6078      	str	r0, [r7, #4]
 80063de:	6039      	str	r1, [r7, #0]
	return difference_type(_S_buffer_size())
 80063e0:	f7ff ff3a 	bl	8006258 <_ZNSt15_Deque_iteratorItRtPtE14_S_buffer_sizeEv>
 80063e4:	4603      	mov	r3, r0
 80063e6:	4619      	mov	r1, r3
	  * (__x._M_node - __y._M_node - 1) + (__x._M_cur - __x._M_first)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	68da      	ldr	r2, [r3, #12]
 80063ec:	683b      	ldr	r3, [r7, #0]
 80063ee:	68db      	ldr	r3, [r3, #12]
 80063f0:	1ad3      	subs	r3, r2, r3
 80063f2:	109b      	asrs	r3, r3, #2
 80063f4:	3b01      	subs	r3, #1
 80063f6:	fb01 f303 	mul.w	r3, r1, r3
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	6811      	ldr	r1, [r2, #0]
 80063fe:	687a      	ldr	r2, [r7, #4]
 8006400:	6852      	ldr	r2, [r2, #4]
 8006402:	1a8a      	subs	r2, r1, r2
 8006404:	1052      	asrs	r2, r2, #1
 8006406:	4413      	add	r3, r2
	  + (__y._M_last - __y._M_cur);
 8006408:	683a      	ldr	r2, [r7, #0]
 800640a:	6891      	ldr	r1, [r2, #8]
 800640c:	683a      	ldr	r2, [r7, #0]
 800640e:	6812      	ldr	r2, [r2, #0]
 8006410:	1a8a      	subs	r2, r1, r2
 8006412:	1052      	asrs	r2, r2, #1
 8006414:	4413      	add	r3, r2
      }
 8006416:	4618      	mov	r0, r3
 8006418:	3708      	adds	r7, #8
 800641a:	46bd      	mov	sp, r7
 800641c:	bd80      	pop	{r7, pc}

0800641e <_ZNSt5dequeItSaItEE11_S_max_sizeERKS0_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 800641e:	b580      	push	{r7, lr}
 8006420:	b084      	sub	sp, #16
 8006422:	af00      	add	r7, sp, #0
 8006424:	6078      	str	r0, [r7, #4]
	const size_t __diffmax = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max;
 8006426:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800642a:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 f8d3 	bl	80065d8 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>
 8006432:	4603      	mov	r3, r0
 8006434:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006436:	f107 0208 	add.w	r2, r7, #8
 800643a:	f107 030c 	add.w	r3, r7, #12
 800643e:	4611      	mov	r1, r2
 8006440:	4618      	mov	r0, r3
 8006442:	f7fd fecd 	bl	80041e0 <_ZSt3minIjERKT_S2_S2_>
 8006446:	4603      	mov	r3, r0
 8006448:	681b      	ldr	r3, [r3, #0]
      }
 800644a:	4618      	mov	r0, r3
 800644c:	3710      	adds	r7, #16
 800644e:	46bd      	mov	sp, r7
 8006450:	bd80      	pop	{r7, pc}

08006452 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb>:
	}
    }

  template <typename _Tp, typename _Alloc>
    void
    deque<_Tp, _Alloc>::
 8006452:	b590      	push	{r4, r7, lr}
 8006454:	b08b      	sub	sp, #44	; 0x2c
 8006456:	af00      	add	r7, sp, #0
 8006458:	60f8      	str	r0, [r7, #12]
 800645a:	60b9      	str	r1, [r7, #8]
 800645c:	4613      	mov	r3, r2
 800645e:	71fb      	strb	r3, [r7, #7]
    _M_reallocate_map(size_type __nodes_to_add, bool __add_at_front)
    {
      const size_type __old_num_nodes
	= this->_M_impl._M_finish._M_node - this->_M_impl._M_start._M_node + 1;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	695b      	ldr	r3, [r3, #20]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	109b      	asrs	r3, r3, #2
 800646c:	3301      	adds	r3, #1
      const size_type __old_num_nodes
 800646e:	623b      	str	r3, [r7, #32]
      const size_type __new_num_nodes = __old_num_nodes + __nodes_to_add;
 8006470:	68bb      	ldr	r3, [r7, #8]
 8006472:	6a3a      	ldr	r2, [r7, #32]
 8006474:	4413      	add	r3, r2
 8006476:	61fb      	str	r3, [r7, #28]

      _Map_pointer __new_nstart;
      if (this->_M_impl._M_map_size > 2 * __new_num_nodes)
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	685a      	ldr	r2, [r3, #4]
 800647c:	69fb      	ldr	r3, [r7, #28]
 800647e:	005b      	lsls	r3, r3, #1
 8006480:	429a      	cmp	r2, r3
 8006482:	d92d      	bls.n	80064e0 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x8e>
	{
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681a      	ldr	r2, [r3, #0]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	6859      	ldr	r1, [r3, #4]
					 - __new_num_nodes) / 2
 800648c:	69fb      	ldr	r3, [r7, #28]
 800648e:	1acb      	subs	r3, r1, r3
 8006490:	085b      	lsrs	r3, r3, #1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 8006492:	0099      	lsls	r1, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006494:	79fb      	ldrb	r3, [r7, #7]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d002      	beq.n	80064a0 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x4e>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	009b      	lsls	r3, r3, #2
 800649e:	e000      	b.n	80064a2 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x50>
 80064a0:	2300      	movs	r3, #0
 80064a2:	440b      	add	r3, r1
	  __new_nstart = this->_M_impl._M_map + (this->_M_impl._M_map_size
 80064a4:	4413      	add	r3, r2
 80064a6:	627b      	str	r3, [r7, #36]	; 0x24
	  if (__new_nstart < this->_M_impl._M_start._M_node)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	695b      	ldr	r3, [r3, #20]
 80064ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ae:	429a      	cmp	r2, r3
 80064b0:	d209      	bcs.n	80064c6 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x74>
	    std::copy(this->_M_impl._M_start._M_node,
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6958      	ldr	r0, [r3, #20]
		      this->_M_impl._M_finish._M_node + 1,
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy(this->_M_impl._M_start._M_node,
 80064ba:	3304      	adds	r3, #4
 80064bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064be:	4619      	mov	r1, r3
 80064c0:	f000 f8e6 	bl	8006690 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
 80064c4:	e048      	b.n	8006558 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
		      __new_nstart);
	  else
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	6958      	ldr	r0, [r3, #20]
			       this->_M_impl._M_finish._M_node + 1,
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80064ce:	1d19      	adds	r1, r3, #4
			       __new_nstart + __old_num_nodes);
 80064d0:	6a3b      	ldr	r3, [r7, #32]
 80064d2:	009b      	lsls	r3, r3, #2
	    std::copy_backward(this->_M_impl._M_start._M_node,
 80064d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064d6:	4413      	add	r3, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	f000 f8f1 	bl	80066c0 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>
 80064de:	e03b      	b.n	8006558 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0x106>
	}
      else
	{
	  size_type __new_map_size = this->_M_impl._M_map_size
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	685c      	ldr	r4, [r3, #4]
				     + std::max(this->_M_impl._M_map_size,
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	3304      	adds	r3, #4
 80064e8:	f107 0208 	add.w	r2, r7, #8
 80064ec:	4611      	mov	r1, r2
 80064ee:	4618      	mov	r0, r3
 80064f0:	f7fd fbb9 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 80064f4:	4603      	mov	r3, r0
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	4423      	add	r3, r4
	  size_type __new_map_size = this->_M_impl._M_map_size
 80064fa:	3302      	adds	r3, #2
 80064fc:	61bb      	str	r3, [r7, #24]
						__nodes_to_add) + 2;

	  _Map_pointer __new_map = this->_M_allocate_map(__new_map_size);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	69b9      	ldr	r1, [r7, #24]
 8006502:	4618      	mov	r0, r3
 8006504:	f7ff fd14 	bl	8005f30 <_ZNSt11_Deque_baseItSaItEE15_M_allocate_mapEj>
 8006508:	6178      	str	r0, [r7, #20]
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 800650a:	69ba      	ldr	r2, [r7, #24]
 800650c:	69fb      	ldr	r3, [r7, #28]
 800650e:	1ad3      	subs	r3, r2, r3
 8006510:	085b      	lsrs	r3, r3, #1
 8006512:	009a      	lsls	r2, r3, #2
			 + (__add_at_front ? __nodes_to_add : 0);
 8006514:	79fb      	ldrb	r3, [r7, #7]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d002      	beq.n	8006520 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xce>
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	009b      	lsls	r3, r3, #2
 800651e:	e000      	b.n	8006522 <_ZNSt5dequeItSaItEE17_M_reallocate_mapEjb+0xd0>
 8006520:	2300      	movs	r3, #0
 8006522:	4413      	add	r3, r2
	  __new_nstart = __new_map + (__new_map_size - __new_num_nodes) / 2
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4413      	add	r3, r2
 8006528:	627b      	str	r3, [r7, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	6958      	ldr	r0, [r3, #20]
		    this->_M_impl._M_finish._M_node + 1,
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
	  std::copy(this->_M_impl._M_start._M_node,
 8006532:	3304      	adds	r3, #4
 8006534:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006536:	4619      	mov	r1, r3
 8006538:	f000 f8aa 	bl	8006690 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>
		    __new_nstart);
	  _M_deallocate_map(this->_M_impl._M_map, this->_M_impl._M_map_size);
 800653c:	68f8      	ldr	r0, [r7, #12]
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	6819      	ldr	r1, [r3, #0]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	685b      	ldr	r3, [r3, #4]
 8006546:	461a      	mov	r2, r3
 8006548:	f7ff fb2a 	bl	8005ba0 <_ZNSt11_Deque_baseItSaItEE17_M_deallocate_mapEPPtj>

	  this->_M_impl._M_map = __new_map;
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	697a      	ldr	r2, [r7, #20]
 8006550:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_map_size = __new_map_size;
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	69ba      	ldr	r2, [r7, #24]
 8006556:	605a      	str	r2, [r3, #4]
	}

      this->_M_impl._M_start._M_set_node(__new_nstart);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	3308      	adds	r3, #8
 800655c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800655e:	4618      	mov	r0, r3
 8006560:	f7ff fd1d 	bl	8005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
      this->_M_impl._M_finish._M_set_node(__new_nstart + __old_num_nodes - 1);
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	f103 0018 	add.w	r0, r3, #24
 800656a:	6a3a      	ldr	r2, [r7, #32]
 800656c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8006570:	4413      	add	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006576:	4413      	add	r3, r2
 8006578:	4619      	mov	r1, r3
 800657a:	f7ff fd10 	bl	8005f9e <_ZNSt15_Deque_iteratorItRtPtE11_M_set_nodeEPS1_>
    }
 800657e:	bf00      	nop
 8006580:	372c      	adds	r7, #44	; 0x2c
 8006582:	46bd      	mov	sp, r7
 8006584:	bd90      	pop	{r4, r7, pc}

08006586 <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006586:	b580      	push	{r7, lr}
 8006588:	b084      	sub	sp, #16
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f8ac 	bl	80066f0 <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>
 8006598:	4602      	mov	r2, r0
 800659a:	68bb      	ldr	r3, [r7, #8]
 800659c:	4293      	cmp	r3, r2
 800659e:	bf8c      	ite	hi
 80065a0:	2301      	movhi	r3, #1
 80065a2:	2300      	movls	r3, #0
 80065a4:	b2db      	uxtb	r3, r3
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d001      	beq.n	80065ae <_ZN9__gnu_cxx13new_allocatorIPtE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80065aa:	f01c fc20 	bl	8022dee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	009b      	lsls	r3, r3, #2
 80065b2:	4618      	mov	r0, r3
 80065b4:	f01c fc07 	bl	8022dc6 <_Znwj>
 80065b8:	4603      	mov	r3, r0
      }
 80065ba:	4618      	mov	r0, r3
 80065bc:	3710      	adds	r7, #16
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <_ZN9__gnu_cxx13new_allocatorIPtEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 80065c2:	b480      	push	{r7}
 80065c4:	b083      	sub	sp, #12
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4618      	mov	r0, r3
 80065ce:	370c      	adds	r7, #12
 80065d0:	46bd      	mov	sp, r7
 80065d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d6:	4770      	bx	lr

080065d8 <_ZNSt16allocator_traitsISaItEE8max_sizeERKS0_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
 80065de:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 f891 	bl	8006708 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>
 80065e6:	4603      	mov	r3, r0
      }
 80065e8:	4618      	mov	r0, r3
 80065ea:	3708      	adds	r7, #8
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bd80      	pop	{r7, pc}

080065f0 <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80065f8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
      }
 80065fc:	4618      	mov	r0, r3
 80065fe:	370c      	adds	r7, #12
 8006600:	46bd      	mov	sp, r7
 8006602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006606:	4770      	bx	lr

08006608 <_ZSt12__niter_baseIPtET_S1_>:
    __niter_base(_Iterator __it)
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	4618      	mov	r0, r3
 8006614:	370c      	adds	r7, #12
 8006616:	46bd      	mov	sp, r7
 8006618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800661c:	4770      	bx	lr

0800661e <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 800661e:	b580      	push	{r7, lr}
 8006620:	b086      	sub	sp, #24
 8006622:	af00      	add	r7, sp, #0
 8006624:	60f8      	str	r0, [r7, #12]
 8006626:	60b9      	str	r1, [r7, #8]
 8006628:	607a      	str	r2, [r7, #4]
 800662a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	1ad3      	subs	r3, r2, r3
 8006632:	105b      	asrs	r3, r3, #1
 8006634:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	2b00      	cmp	r3, #0
 800663a:	dd06      	ble.n	800664a <_ZSt14__relocate_a_1IttENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	005b      	lsls	r3, r3, #1
 8006640:	461a      	mov	r2, r3
 8006642:	68f9      	ldr	r1, [r7, #12]
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f01d fd21 	bl	802408c <memmove>
      return __result + __count;
 800664a:	697b      	ldr	r3, [r7, #20]
 800664c:	005b      	lsls	r3, r3, #1
 800664e:	687a      	ldr	r2, [r7, #4]
 8006650:	4413      	add	r3, r2
    }
 8006652:	4618      	mov	r0, r3
 8006654:	3718      	adds	r7, #24
 8006656:	46bd      	mov	sp, r7
 8006658:	bd80      	pop	{r7, pc}

0800665a <_ZSt4moveIRPtEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 800665a:	b480      	push	{r7}
 800665c:	b083      	sub	sp, #12
 800665e:	af00      	add	r7, sp, #0
 8006660:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	4618      	mov	r0, r3
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr

08006670 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPtES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006670:	b580      	push	{r7, lr}
 8006672:	b084      	sub	sp, #16
 8006674:	af00      	add	r7, sp, #0
 8006676:	60f8      	str	r0, [r7, #12]
 8006678:	60b9      	str	r1, [r7, #8]
 800667a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 800667c:	687a      	ldr	r2, [r7, #4]
 800667e:	68b9      	ldr	r1, [r7, #8]
 8006680:	68f8      	ldr	r0, [r7, #12]
 8006682:	f000 f84d 	bl	8006720 <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>
 8006686:	4603      	mov	r3, r0
 8006688:	4618      	mov	r0, r3
 800668a:	3710      	adds	r7, #16
 800668c:	46bd      	mov	sp, r7
 800668e:	bd80      	pop	{r7, pc}

08006690 <_ZSt4copyIPPtS1_ET0_T_S3_S2_>:
    copy(_II __first, _II __last, _OI __result)
 8006690:	b590      	push	{r4, r7, lr}
 8006692:	b085      	sub	sp, #20
 8006694:	af00      	add	r7, sp, #0
 8006696:	60f8      	str	r0, [r7, #12]
 8006698:	60b9      	str	r1, [r7, #8]
 800669a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800669c:	68f8      	ldr	r0, [r7, #12]
 800669e:	f000 f857 	bl	8006750 <_ZSt12__miter_baseIPPtET_S2_>
 80066a2:	4604      	mov	r4, r0
 80066a4:	68b8      	ldr	r0, [r7, #8]
 80066a6:	f000 f853 	bl	8006750 <_ZSt12__miter_baseIPPtET_S2_>
 80066aa:	4603      	mov	r3, r0
 80066ac:	687a      	ldr	r2, [r7, #4]
 80066ae:	4619      	mov	r1, r3
 80066b0:	4620      	mov	r0, r4
 80066b2:	f000 f858 	bl	8006766 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>
 80066b6:	4603      	mov	r3, r0
    }
 80066b8:	4618      	mov	r0, r3
 80066ba:	3714      	adds	r7, #20
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd90      	pop	{r4, r7, pc}

080066c0 <_ZSt13copy_backwardIPPtS1_ET0_T_S3_S2_>:
   *  that the start of the output range may overlap [first,last).
  */
  template<typename _BI1, typename _BI2>
    _GLIBCXX20_CONSTEXPR
    inline _BI2
    copy_backward(_BI1 __first, _BI1 __last, _BI2 __result)
 80066c0:	b590      	push	{r4, r7, lr}
 80066c2:	b085      	sub	sp, #20
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]
	    typename iterator_traits<_BI1>::value_type,
	    typename iterator_traits<_BI2>::value_type>)
      __glibcxx_requires_can_decrement_range(__first, __last, __result);

      return std::__copy_move_backward_a<__is_move_iterator<_BI1>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80066cc:	68f8      	ldr	r0, [r7, #12]
 80066ce:	f000 f83f 	bl	8006750 <_ZSt12__miter_baseIPPtET_S2_>
 80066d2:	4604      	mov	r4, r0
 80066d4:	68b8      	ldr	r0, [r7, #8]
 80066d6:	f000 f83b 	bl	8006750 <_ZSt12__miter_baseIPPtET_S2_>
 80066da:	4603      	mov	r3, r0
 80066dc:	687a      	ldr	r2, [r7, #4]
 80066de:	4619      	mov	r1, r3
 80066e0:	4620      	mov	r0, r4
 80066e2:	f000 f863 	bl	80067ac <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>
 80066e6:	4603      	mov	r3, r0
    }
 80066e8:	4618      	mov	r0, r3
 80066ea:	3714      	adds	r7, #20
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd90      	pop	{r4, r7, pc}

080066f0 <_ZNK9__gnu_cxx13new_allocatorIPtE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 80066f0:	b480      	push	{r7}
 80066f2:	b083      	sub	sp, #12
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80066f8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80066fc:	4618      	mov	r0, r3
 80066fe:	370c      	adds	r7, #12
 8006700:	46bd      	mov	sp, r7
 8006702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006706:	4770      	bx	lr

08006708 <_ZNK9__gnu_cxx13new_allocatorItE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006708:	b580      	push	{r7, lr}
 800670a:	b082      	sub	sp, #8
 800670c:	af00      	add	r7, sp, #0
 800670e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff ff6d 	bl	80065f0 <_ZNK9__gnu_cxx13new_allocatorItE11_M_max_sizeEv>
 8006716:	4603      	mov	r3, r0
 8006718:	4618      	mov	r0, r3
 800671a:	3708      	adds	r7, #8
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <_ZSt4copyISt13move_iteratorIPtES1_ET0_T_S4_S3_>:
    copy(_II __first, _II __last, _OI __result)
 8006720:	b590      	push	{r4, r7, lr}
 8006722:	b085      	sub	sp, #20
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f000 f860 	bl	80067f2 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006732:	4604      	mov	r4, r0
 8006734:	68b8      	ldr	r0, [r7, #8]
 8006736:	f000 f85c 	bl	80067f2 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800673a:	4603      	mov	r3, r0
 800673c:	687a      	ldr	r2, [r7, #4]
 800673e:	4619      	mov	r1, r3
 8006740:	4620      	mov	r0, r4
 8006742:	f000 f867 	bl	8006814 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>
 8006746:	4603      	mov	r3, r0
    }
 8006748:	4618      	mov	r0, r3
 800674a:	3714      	adds	r7, #20
 800674c:	46bd      	mov	sp, r7
 800674e:	bd90      	pop	{r4, r7, pc}

08006750 <_ZSt12__miter_baseIPPtET_S2_>:
    __miter_base(_Iterator __it)
 8006750:	b480      	push	{r7}
 8006752:	b083      	sub	sp, #12
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	4618      	mov	r0, r3
 800675c:	370c      	adds	r7, #12
 800675e:	46bd      	mov	sp, r7
 8006760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006764:	4770      	bx	lr

08006766 <_ZSt13__copy_move_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006766:	b5b0      	push	{r4, r5, r7, lr}
 8006768:	b084      	sub	sp, #16
 800676a:	af00      	add	r7, sp, #0
 800676c:	60f8      	str	r0, [r7, #12]
 800676e:	60b9      	str	r1, [r7, #8]
 8006770:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006772:	68f8      	ldr	r0, [r7, #12]
 8006774:	f000 f871 	bl	800685a <_ZSt12__niter_baseIPPtET_S2_>
 8006778:	4604      	mov	r4, r0
 800677a:	68b8      	ldr	r0, [r7, #8]
 800677c:	f000 f86d 	bl	800685a <_ZSt12__niter_baseIPPtET_S2_>
 8006780:	4605      	mov	r5, r0
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	4618      	mov	r0, r3
 8006786:	f000 f868 	bl	800685a <_ZSt12__niter_baseIPPtET_S2_>
 800678a:	4603      	mov	r3, r0
 800678c:	461a      	mov	r2, r3
 800678e:	4629      	mov	r1, r5
 8006790:	4620      	mov	r0, r4
 8006792:	f000 f86d 	bl	8006870 <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 8006796:	4602      	mov	r2, r0
 8006798:	1d3b      	adds	r3, r7, #4
 800679a:	4611      	mov	r1, r2
 800679c:	4618      	mov	r0, r3
 800679e:	f000 f877 	bl	8006890 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 80067a2:	4603      	mov	r3, r0
    }
 80067a4:	4618      	mov	r0, r3
 80067a6:	3710      	adds	r7, #16
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bdb0      	pop	{r4, r5, r7, pc}

080067ac <_ZSt22__copy_move_backward_aILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a(_II __first, _II __last, _OI __result)
 80067ac:	b5b0      	push	{r4, r5, r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	60f8      	str	r0, [r7, #12]
 80067b4:	60b9      	str	r1, [r7, #8]
 80067b6:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80067b8:	68f8      	ldr	r0, [r7, #12]
 80067ba:	f000 f84e 	bl	800685a <_ZSt12__niter_baseIPPtET_S2_>
 80067be:	4604      	mov	r4, r0
 80067c0:	68b8      	ldr	r0, [r7, #8]
 80067c2:	f000 f84a 	bl	800685a <_ZSt12__niter_baseIPPtET_S2_>
 80067c6:	4605      	mov	r5, r0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4618      	mov	r0, r3
 80067cc:	f000 f845 	bl	800685a <_ZSt12__niter_baseIPPtET_S2_>
 80067d0:	4603      	mov	r3, r0
 80067d2:	461a      	mov	r2, r3
 80067d4:	4629      	mov	r1, r5
 80067d6:	4620      	mov	r0, r4
 80067d8:	f000 f866 	bl	80068a8 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>
 80067dc:	4602      	mov	r2, r0
 80067de:	1d3b      	adds	r3, r7, #4
 80067e0:	4611      	mov	r1, r2
 80067e2:	4618      	mov	r0, r3
 80067e4:	f000 f854 	bl	8006890 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>
 80067e8:	4603      	mov	r3, r0
    }
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bdb0      	pop	{r4, r5, r7, pc}

080067f2 <_ZSt12__miter_baseIPtEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80067f2:	b580      	push	{r7, lr}
 80067f4:	b082      	sub	sp, #8
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80067fa:	1d3b      	adds	r3, r7, #4
 80067fc:	4618      	mov	r0, r3
 80067fe:	f000 f863 	bl	80068c8 <_ZNKSt13move_iteratorIPtE4baseEv>
 8006802:	4603      	mov	r3, r0
 8006804:	4618      	mov	r0, r3
 8006806:	f000 f86b 	bl	80068e0 <_ZSt12__miter_baseIPtET_S1_>
 800680a:	4603      	mov	r3, r0
 800680c:	4618      	mov	r0, r3
 800680e:	3708      	adds	r7, #8
 8006810:	46bd      	mov	sp, r7
 8006812:	bd80      	pop	{r7, pc}

08006814 <_ZSt13__copy_move_aILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006814:	b5b0      	push	{r4, r5, r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8006820:	68f8      	ldr	r0, [r7, #12]
 8006822:	f7ff fef1 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 8006826:	4604      	mov	r4, r0
 8006828:	68b8      	ldr	r0, [r7, #8]
 800682a:	f7ff feed 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 800682e:	4605      	mov	r5, r0
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff fee8 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 8006838:	4603      	mov	r3, r0
 800683a:	461a      	mov	r2, r3
 800683c:	4629      	mov	r1, r5
 800683e:	4620      	mov	r0, r4
 8006840:	f000 f859 	bl	80068f6 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>
 8006844:	4602      	mov	r2, r0
 8006846:	1d3b      	adds	r3, r7, #4
 8006848:	4611      	mov	r1, r2
 800684a:	4618      	mov	r0, r3
 800684c:	f000 f863 	bl	8006916 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 8006850:	4603      	mov	r3, r0
    }
 8006852:	4618      	mov	r0, r3
 8006854:	3710      	adds	r7, #16
 8006856:	46bd      	mov	sp, r7
 8006858:	bdb0      	pop	{r4, r5, r7, pc}

0800685a <_ZSt12__niter_baseIPPtET_S2_>:
    __niter_base(_Iterator __it)
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	4618      	mov	r0, r3
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <_ZSt14__copy_move_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8006870:	b580      	push	{r7, lr}
 8006872:	b084      	sub	sp, #16
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800687c:	687a      	ldr	r2, [r7, #4]
 800687e:	68b9      	ldr	r1, [r7, #8]
 8006880:	68f8      	ldr	r0, [r7, #12]
 8006882:	f000 f854 	bl	800692e <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 8006886:	4603      	mov	r3, r0
 8006888:	4618      	mov	r0, r3
 800688a:	3710      	adds	r7, #16
 800688c:	46bd      	mov	sp, r7
 800688e:	bd80      	pop	{r7, pc}

08006890 <_ZSt12__niter_wrapIPPtET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
    { return __res; }
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	4618      	mov	r0, r3
 800689e:	370c      	adds	r7, #12
 80068a0:	46bd      	mov	sp, r7
 80068a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a6:	4770      	bx	lr

080068a8 <_ZSt23__copy_move_backward_a1ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a1(_BI1 __first, _BI1 __last, _BI2 __result)
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b084      	sub	sp, #16
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_backward_a2<_IsMove>(__first, __last, __result); }
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	68f8      	ldr	r0, [r7, #12]
 80068ba:	f000 f848 	bl	800694e <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>
 80068be:	4603      	mov	r3, r0
 80068c0:	4618      	mov	r0, r3
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <_ZNKSt13move_iteratorIPtE4baseEv>:
      base() const
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4618      	mov	r0, r3
 80068d6:	370c      	adds	r7, #12
 80068d8:	46bd      	mov	sp, r7
 80068da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068de:	4770      	bx	lr

080068e0 <_ZSt12__miter_baseIPtET_S1_>:
    __miter_base(_Iterator __it)
 80068e0:	b480      	push	{r7}
 80068e2:	b083      	sub	sp, #12
 80068e4:	af00      	add	r7, sp, #0
 80068e6:	6078      	str	r0, [r7, #4]
    { return __it; }
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4618      	mov	r0, r3
 80068ec:	370c      	adds	r7, #12
 80068ee:	46bd      	mov	sp, r7
 80068f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f4:	4770      	bx	lr

080068f6 <_ZSt14__copy_move_a1ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 80068f6:	b580      	push	{r7, lr}
 80068f8:	b084      	sub	sp, #16
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	60f8      	str	r0, [r7, #12]
 80068fe:	60b9      	str	r1, [r7, #8]
 8006900:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8006902:	687a      	ldr	r2, [r7, #4]
 8006904:	68b9      	ldr	r1, [r7, #8]
 8006906:	68f8      	ldr	r0, [r7, #12]
 8006908:	f000 f831 	bl	800696e <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>
 800690c:	4603      	mov	r3, r0
 800690e:	4618      	mov	r0, r3
 8006910:	3710      	adds	r7, #16
 8006912:	46bd      	mov	sp, r7
 8006914:	bd80      	pop	{r7, pc}

08006916 <_ZSt12__niter_wrapIPtET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006916:	b480      	push	{r7}
 8006918:	b083      	sub	sp, #12
 800691a:	af00      	add	r7, sp, #0
 800691c:	6078      	str	r0, [r7, #4]
 800691e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006920:	683b      	ldr	r3, [r7, #0]
 8006922:	4618      	mov	r0, r3
 8006924:	370c      	adds	r7, #12
 8006926:	46bd      	mov	sp, r7
 8006928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692c:	4770      	bx	lr

0800692e <_ZSt14__copy_move_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800692e:	b580      	push	{r7, lr}
 8006930:	b084      	sub	sp, #16
 8006932:	af00      	add	r7, sp, #0
 8006934:	60f8      	str	r0, [r7, #12]
 8006936:	60b9      	str	r1, [r7, #8]
 8006938:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800693a:	687a      	ldr	r2, [r7, #4]
 800693c:	68b9      	ldr	r1, [r7, #8]
 800693e:	68f8      	ldr	r0, [r7, #12]
 8006940:	f000 f825 	bl	800698e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>
 8006944:	4603      	mov	r3, r0
    }
 8006946:	4618      	mov	r0, r3
 8006948:	3710      	adds	r7, #16
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <_ZSt23__copy_move_backward_a2ILb0EPPtS1_ET1_T0_S3_S2_>:
    __copy_move_backward_a2(_BI1 __first, _BI1 __last, _BI2 __result)
 800694e:	b580      	push	{r7, lr}
 8006950:	b084      	sub	sp, #16
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
				       _Category>::__copy_move_b(__first,
 800695a:	687a      	ldr	r2, [r7, #4]
 800695c:	68b9      	ldr	r1, [r7, #8]
 800695e:	68f8      	ldr	r0, [r7, #12]
 8006960:	f000 f832 	bl	80069c8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>
 8006964:	4603      	mov	r3, r0
    }
 8006966:	4618      	mov	r0, r3
 8006968:	3710      	adds	r7, #16
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}

0800696e <_ZSt14__copy_move_a2ILb1EPtS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800696e:	b580      	push	{r7, lr}
 8006970:	b084      	sub	sp, #16
 8006972:	af00      	add	r7, sp, #0
 8006974:	60f8      	str	r0, [r7, #12]
 8006976:	60b9      	str	r1, [r7, #8]
 8006978:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800697a:	687a      	ldr	r2, [r7, #4]
 800697c:	68b9      	ldr	r1, [r7, #8]
 800697e:	68f8      	ldr	r0, [r7, #12]
 8006980:	f000 f844 	bl	8006a0c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 8006984:	4603      	mov	r3, r0
    }
 8006986:	4618      	mov	r0, r3
 8006988:	3710      	adds	r7, #16
 800698a:	46bd      	mov	sp, r7
 800698c:	bd80      	pop	{r7, pc}

0800698e <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800698e:	b580      	push	{r7, lr}
 8006990:	b086      	sub	sp, #24
 8006992:	af00      	add	r7, sp, #0
 8006994:	60f8      	str	r0, [r7, #12]
 8006996:	60b9      	str	r1, [r7, #8]
 8006998:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800699a:	68ba      	ldr	r2, [r7, #8]
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	109b      	asrs	r3, r3, #2
 80069a2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80069a4:	697b      	ldr	r3, [r7, #20]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d006      	beq.n	80069b8 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mIPtEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	461a      	mov	r2, r3
 80069b0:	68f9      	ldr	r1, [r7, #12]
 80069b2:	6878      	ldr	r0, [r7, #4]
 80069b4:	f01d fb6a 	bl	802408c <memmove>
	  return __result + _Num;
 80069b8:	697b      	ldr	r3, [r7, #20]
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	687a      	ldr	r2, [r7, #4]
 80069be:	4413      	add	r3, r2
	}
 80069c0:	4618      	mov	r0, r3
 80069c2:	3718      	adds	r7, #24
 80069c4:	46bd      	mov	sp, r7
 80069c6:	bd80      	pop	{r7, pc}

080069c8 <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_>:
	__copy_move_b(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b086      	sub	sp, #24
 80069cc:	af00      	add	r7, sp, #0
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80069d4:	68ba      	ldr	r2, [r7, #8]
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	109b      	asrs	r3, r3, #2
 80069dc:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d00a      	beq.n	80069fa <_ZNSt20__copy_move_backwardILb0ELb1ESt26random_access_iterator_tagE13__copy_move_bIPtEEPT_PKS4_S7_S5_+0x32>
	    __builtin_memmove(__result - _Num, __first, sizeof(_Tp) * _Num);
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	009b      	lsls	r3, r3, #2
 80069e8:	425b      	negs	r3, r3
 80069ea:	687a      	ldr	r2, [r7, #4]
 80069ec:	18d0      	adds	r0, r2, r3
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	009b      	lsls	r3, r3, #2
 80069f2:	461a      	mov	r2, r3
 80069f4:	68f9      	ldr	r1, [r7, #12]
 80069f6:	f01d fb49 	bl	802408c <memmove>
	  return __result - _Num;
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	009b      	lsls	r3, r3, #2
 80069fe:	425b      	negs	r3, r3
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	4413      	add	r3, r2
	}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3718      	adds	r7, #24
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}

08006a0c <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b086      	sub	sp, #24
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006a18:	68ba      	ldr	r2, [r7, #8]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	105b      	asrs	r3, r3, #1
 8006a20:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8006a22:	697b      	ldr	r3, [r7, #20]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d006      	beq.n	8006a36 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8006a28:	697b      	ldr	r3, [r7, #20]
 8006a2a:	005b      	lsls	r3, r3, #1
 8006a2c:	461a      	mov	r2, r3
 8006a2e:	68f9      	ldr	r1, [r7, #12]
 8006a30:	6878      	ldr	r0, [r7, #4]
 8006a32:	f01d fb2b 	bl	802408c <memmove>
	  return __result + _Num;
 8006a36:	697b      	ldr	r3, [r7, #20]
 8006a38:	005b      	lsls	r3, r3, #1
 8006a3a:	687a      	ldr	r2, [r7, #4]
 8006a3c:	4413      	add	r3, r2
	}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
	...

08006a48 <_ZNSt6vectorItSaItEE7reserveEj>:
    vector<_Tp, _Alloc>::
 8006a48:	b5b0      	push	{r4, r5, r7, lr}
 8006a4a:	b084      	sub	sp, #16
 8006a4c:	af00      	add	r7, sp, #0
 8006a4e:	6078      	str	r0, [r7, #4]
 8006a50:	6039      	str	r1, [r7, #0]
      if (__n > this->max_size())
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f7ff fafb 	bl	800604e <_ZNKSt6vectorItSaItEE8max_sizeEv>
 8006a58:	4602      	mov	r2, r0
 8006a5a:	683b      	ldr	r3, [r7, #0]
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	bf8c      	ite	hi
 8006a60:	2301      	movhi	r3, #1
 8006a62:	2300      	movls	r3, #0
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d002      	beq.n	8006a70 <_ZNSt6vectorItSaItEE7reserveEj+0x28>
	__throw_length_error(__N("vector::reserve"));
 8006a6a:	4836      	ldr	r0, [pc, #216]	; (8006b44 <_ZNSt6vectorItSaItEE7reserveEj+0xfc>)
 8006a6c:	f01c f9c5 	bl	8022dfa <_ZSt20__throw_length_errorPKc>
      if (this->capacity() < __n)
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 f952 	bl	8006d1a <_ZNKSt6vectorItSaItEE8capacityEv>
 8006a76:	4602      	mov	r2, r0
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	4293      	cmp	r3, r2
 8006a7c:	bf8c      	ite	hi
 8006a7e:	2301      	movhi	r3, #1
 8006a80:	2300      	movls	r3, #0
 8006a82:	b2db      	uxtb	r3, r3
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d059      	beq.n	8006b3c <_ZNSt6vectorItSaItEE7reserveEj+0xf4>
	  const size_type __old_size = size();
 8006a88:	6878      	ldr	r0, [r7, #4]
 8006a8a:	f7ff faf1 	bl	8006070 <_ZNKSt6vectorItSaItEE4sizeEv>
 8006a8e:	60b8      	str	r0, [r7, #8]
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006a90:	f7fe febc 	bl	800580c <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006a94:	4603      	mov	r3, r0
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <_ZNSt6vectorItSaItEE7reserveEj+0x7c>
	      __tmp = this->_M_allocate(__n);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	6839      	ldr	r1, [r7, #0]
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	f7ff f93a 	bl	8005d18 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006aa4:	60f8      	str	r0, [r7, #12]
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	681c      	ldr	r4, [r3, #0]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	685d      	ldr	r5, [r3, #4]
			  __tmp, _M_get_Tp_allocator());
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	f7fe fdbe 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006ab6:	4603      	mov	r3, r0
	      _S_relocate(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4629      	mov	r1, r5
 8006abc:	4620      	mov	r0, r4
 8006abe:	f7ff f93f 	bl	8005d40 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006ac2:	e01f      	b.n	8006b04 <_ZNSt6vectorItSaItEE7reserveEj+0xbc>
	      __tmp = _M_allocate_and_copy(__n,
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7ff fb02 	bl	80060d2 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8006ace:	4604      	mov	r4, r0
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	685b      	ldr	r3, [r3, #4]
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7ff fafc 	bl	80060d2 <_ZSt32__make_move_if_noexcept_iteratorItSt13move_iteratorIPtEET0_PT_>
 8006ada:	4603      	mov	r3, r0
 8006adc:	4622      	mov	r2, r4
 8006ade:	6839      	ldr	r1, [r7, #0]
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f92a 	bl	8006d3a <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>
 8006ae6:	60f8      	str	r0, [r7, #12]
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681c      	ldr	r4, [r3, #0]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	685d      	ldr	r5, [r3, #4]
			    _M_get_Tp_allocator());
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fd9d 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006af8:	4603      	mov	r3, r0
	      std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8006afa:	461a      	mov	r2, r3
 8006afc:	4629      	mov	r1, r5
 8006afe:	4620      	mov	r0, r4
 8006b00:	f7fe fda2 	bl	8005648 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	  _M_deallocate(this->_M_impl._M_start,
 8006b04:	6878      	ldr	r0, [r7, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6819      	ldr	r1, [r3, #0]
			this->_M_impl._M_end_of_storage
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	689a      	ldr	r2, [r3, #8]
			- this->_M_impl._M_start);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	1ad3      	subs	r3, r2, r3
 8006b14:	105b      	asrs	r3, r3, #1
	  _M_deallocate(this->_M_impl._M_start,
 8006b16:	461a      	mov	r2, r3
 8006b18:	f7fe fd78 	bl	800560c <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
	  this->_M_impl._M_start = __tmp;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	601a      	str	r2, [r3, #0]
	  this->_M_impl._M_finish = __tmp + __old_size;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	005b      	lsls	r3, r3, #1
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	441a      	add	r2, r3
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	605a      	str	r2, [r3, #4]
	  this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	005b      	lsls	r3, r3, #1
 8006b36:	441a      	add	r2, r3
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	609a      	str	r2, [r3, #8]
    }
 8006b3c:	bf00      	nop
 8006b3e:	3710      	adds	r7, #16
 8006b40:	46bd      	mov	sp, r7
 8006b42:	bdb0      	pop	{r4, r5, r7, pc}
 8006b44:	080255e0 	.word	0x080255e0

08006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8006b48:	b5b0      	push	{r4, r5, r7, lr}
 8006b4a:	b082      	sub	sp, #8
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d011      	beq.n	8006b82 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8006b5e:	687c      	ldr	r4, [r7, #4]
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	685d      	ldr	r5, [r3, #4]
 8006b64:	6838      	ldr	r0, [r7, #0]
 8006b66:	f000 f904 	bl	8006d72 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	461a      	mov	r2, r3
 8006b6e:	4629      	mov	r1, r5
 8006b70:	4620      	mov	r0, r4
 8006b72:	f000 f909 	bl	8006d88 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	685b      	ldr	r3, [r3, #4]
 8006b7a:	1c9a      	adds	r2, r3, #2
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	605a      	str	r2, [r3, #4]
      }
 8006b80:	e00c      	b.n	8006b9c <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8006b82:	6878      	ldr	r0, [r7, #4]
 8006b84:	f7fe fe31 	bl	80057ea <_ZNSt6vectorItSaItEE3endEv>
 8006b88:	4604      	mov	r4, r0
 8006b8a:	6838      	ldr	r0, [r7, #0]
 8006b8c:	f000 f8f1 	bl	8006d72 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006b90:	4603      	mov	r3, r0
 8006b92:	461a      	mov	r2, r3
 8006b94:	4621      	mov	r1, r4
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 f90a 	bl	8006db0 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>
      }
 8006b9c:	bf00      	nop
 8006b9e:	3708      	adds	r7, #8
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	bdb0      	pop	{r4, r5, r7, pc}

08006ba4 <_ZNSt6vectorItSaItEE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8006ba4:	b580      	push	{r7, lr}
 8006ba6:	b082      	sub	sp, #8
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	4619      	mov	r1, r3
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9b8 	bl	8006f28 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>
 8006bb8:	bf00      	nop
 8006bba:	3708      	adds	r7, #8
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	bd80      	pop	{r7, pc}

08006bc0 <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>:
      empty() const
 8006bc0:	b580      	push	{r7, lr}
 8006bc2:	b082      	sub	sp, #8
 8006bc4:	af00      	add	r7, sp, #0
 8006bc6:	6078      	str	r0, [r7, #4]
      { return c.empty(); }
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f000 f9cd 	bl	8006f6a <_ZNKSt5dequeItSaItEE5emptyEv>
 8006bd0:	4603      	mov	r3, r0
 8006bd2:	4618      	mov	r0, r3
 8006bd4:	3708      	adds	r7, #8
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	bd80      	pop	{r7, pc}

08006bda <_ZNSt6vectorItSaItEE8pop_backEv>:
      pop_back() _GLIBCXX_NOEXCEPT
 8006bda:	b580      	push	{r7, lr}
 8006bdc:	b082      	sub	sp, #8
 8006bde:	af00      	add	r7, sp, #0
 8006be0:	6078      	str	r0, [r7, #4]
	--this->_M_impl._M_finish;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	685b      	ldr	r3, [r3, #4]
 8006be6:	1e9a      	subs	r2, r3, #2
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	605a      	str	r2, [r3, #4]
	_Alloc_traits::destroy(this->_M_impl, this->_M_impl._M_finish);
 8006bec:	687a      	ldr	r2, [r7, #4]
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	685b      	ldr	r3, [r3, #4]
 8006bf2:	4619      	mov	r1, r3
 8006bf4:	4610      	mov	r0, r2
 8006bf6:	f7ff f8db 	bl	8005db0 <_ZNSt16allocator_traitsISaItEE7destroyItEEvRS0_PT_>
      }
 8006bfa:	bf00      	nop
 8006bfc:	3708      	adds	r7, #8
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	bd80      	pop	{r7, pc}

08006c02 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006c02:	b590      	push	{r4, r7, lr}
 8006c04:	b083      	sub	sp, #12
 8006c06:	af00      	add	r7, sp, #0
 8006c08:	6078      	str	r0, [r7, #4]
 8006c0a:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f7ff f8ab 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006c12:	4603      	mov	r3, r0
 8006c14:	681c      	ldr	r4, [r3, #0]
 8006c16:	6838      	ldr	r0, [r7, #0]
 8006c18:	f7ff f8a6 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	429c      	cmp	r4, r3
 8006c22:	bf14      	ite	ne
 8006c24:	2301      	movne	r3, #1
 8006c26:	2300      	moveq	r3, #0
 8006c28:	b2db      	uxtb	r3, r3
 8006c2a:	4618      	mov	r0, r3
 8006c2c:	370c      	adds	r7, #12
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd90      	pop	{r4, r7, pc}

08006c32 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8006c32:	b480      	push	{r7}
 8006c34:	b083      	sub	sp, #12
 8006c36:	af00      	add	r7, sp, #0
 8006c38:	6078      	str	r0, [r7, #4]
	++_M_current;
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1c9a      	adds	r2, r3, #2
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	601a      	str	r2, [r3, #0]
	return *this;
 8006c44:	687b      	ldr	r3, [r7, #4]
      }
 8006c46:	4618      	mov	r0, r3
 8006c48:	370c      	adds	r7, #12
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c50:	4770      	bx	lr

08006c52 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8006c52:	b480      	push	{r7}
 8006c54:	b083      	sub	sp, #12
 8006c56:	af00      	add	r7, sp, #0
 8006c58:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	4618      	mov	r0, r3
 8006c60:	370c      	adds	r7, #12
 8006c62:	46bd      	mov	sp, r7
 8006c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c68:	4770      	bx	lr

08006c6a <_ZNSt6vectorItSaItEE4backEv>:
      back() _GLIBCXX_NOEXCEPT
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	b084      	sub	sp, #16
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	6078      	str	r0, [r7, #4]
	return *(end() - 1);
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7fe fdb9 	bl	80057ea <_ZNSt6vectorItSaItEE3endEv>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	60fb      	str	r3, [r7, #12]
 8006c7c:	f107 030c 	add.w	r3, r7, #12
 8006c80:	2101      	movs	r1, #1
 8006c82:	4618      	mov	r0, r3
 8006c84:	f000 f983 	bl	8006f8e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>
 8006c88:	4603      	mov	r3, r0
 8006c8a:	60bb      	str	r3, [r7, #8]
 8006c8c:	f107 0308 	add.w	r3, r7, #8
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff ffde 	bl	8006c52 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8006c96:	4603      	mov	r3, r0
      }
 8006c98:	4618      	mov	r0, r3
 8006c9a:	3710      	adds	r7, #16
 8006c9c:	46bd      	mov	sp, r7
 8006c9e:	bd80      	pop	{r7, pc}

08006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>:
      vector(const vector& __x)
 8006ca0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ca2:	b085      	sub	sp, #20
 8006ca4:	af00      	add	r7, sp, #0
 8006ca6:	6078      	str	r0, [r7, #4]
 8006ca8:	6039      	str	r1, [r7, #0]
	_Alloc_traits::_S_select_on_copy(__x._M_get_Tp_allocator()))
 8006caa:	687c      	ldr	r4, [r7, #4]
 8006cac:	6838      	ldr	r0, [r7, #0]
 8006cae:	f7ff f9df 	bl	8006070 <_ZNKSt6vectorItSaItEE4sizeEv>
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	f7ff fb23 	bl	8006302 <_ZNKSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006cbc:	4602      	mov	r2, r0
 8006cbe:	f107 030c 	add.w	r3, r7, #12
 8006cc2:	4611      	mov	r1, r2
 8006cc4:	4618      	mov	r0, r3
 8006cc6:	f000 f97b 	bl	8006fc0 <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>
 8006cca:	f107 030c 	add.w	r3, r7, #12
 8006cce:	461a      	mov	r2, r3
 8006cd0:	4629      	mov	r1, r5
 8006cd2:	4620      	mov	r0, r4
 8006cd4:	f000 f982 	bl	8006fdc <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>
 8006cd8:	f107 030c 	add.w	r3, r7, #12
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f7fe fb7f 	bl	80053e0 <_ZNSaItED1Ev>
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006ce2:	6838      	ldr	r0, [r7, #0]
 8006ce4:	f000 f98e 	bl	8007004 <_ZNKSt6vectorItSaItEE5beginEv>
 8006ce8:	4605      	mov	r5, r0
 8006cea:	6838      	ldr	r0, [r7, #0]
 8006cec:	f000 f99a 	bl	8007024 <_ZNKSt6vectorItSaItEE3endEv>
 8006cf0:	4606      	mov	r6, r0
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681c      	ldr	r4, [r3, #0]
				      _M_get_Tp_allocator());
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	4618      	mov	r0, r3
 8006cfa:	f7fe fc9a 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006cfe:	4603      	mov	r3, r0
	  std::__uninitialized_copy_a(__x.begin(), __x.end(),
 8006d00:	4622      	mov	r2, r4
 8006d02:	4631      	mov	r1, r6
 8006d04:	4628      	mov	r0, r5
 8006d06:	f000 f99e 	bl	8007046 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>
 8006d0a:	4602      	mov	r2, r0
	this->_M_impl._M_finish =
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	605a      	str	r2, [r3, #4]
      }
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006d1a <_ZNKSt6vectorItSaItEE8capacityEv>:
      capacity() const _GLIBCXX_NOEXCEPT
 8006d1a:	b480      	push	{r7}
 8006d1c:	b083      	sub	sp, #12
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_end_of_storage
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	689a      	ldr	r2, [r3, #8]
			 - this->_M_impl._M_start); }
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	1ad3      	subs	r3, r2, r3
 8006d2c:	105b      	asrs	r3, r3, #1
 8006d2e:	4618      	mov	r0, r3
 8006d30:	370c      	adds	r7, #12
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <_ZNSt6vectorItSaItEE20_M_allocate_and_copyISt13move_iteratorIPtEEES4_jT_S6_>:
	_M_allocate_and_copy(size_type __n,
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b086      	sub	sp, #24
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	60f8      	str	r0, [r7, #12]
 8006d42:	60b9      	str	r1, [r7, #8]
 8006d44:	607a      	str	r2, [r7, #4]
 8006d46:	603b      	str	r3, [r7, #0]
	  pointer __result = this->_M_allocate(__n);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	68b9      	ldr	r1, [r7, #8]
 8006d4c:	4618      	mov	r0, r3
 8006d4e:	f7fe ffe3 	bl	8005d18 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006d52:	6178      	str	r0, [r7, #20]
					  _M_get_Tp_allocator());
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe fc6b 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006d5c:	4603      	mov	r3, r0
	      std::__uninitialized_copy_a(__first, __last, __result,
 8006d5e:	697a      	ldr	r2, [r7, #20]
 8006d60:	6839      	ldr	r1, [r7, #0]
 8006d62:	6878      	ldr	r0, [r7, #4]
 8006d64:	f7ff f9c4 	bl	80060f0 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPtES1_tET0_T_S4_S3_RSaIT1_E>
	      return __result;
 8006d68:	697b      	ldr	r3, [r7, #20]
	}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	3718      	adds	r7, #24
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd80      	pop	{r7, pc}

08006d72 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8006d72:	b480      	push	{r7}
 8006d74:	b083      	sub	sp, #12
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	4618      	mov	r0, r3
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b084      	sub	sp, #16
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f7ff ffec 	bl	8006d72 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006d9a:	4603      	mov	r3, r0
 8006d9c:	461a      	mov	r2, r3
 8006d9e:	68b9      	ldr	r1, [r7, #8]
 8006da0:	68f8      	ldr	r0, [r7, #12]
 8006da2:	f000 f961 	bl	8007068 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>
	}
 8006da6:	bf00      	nop
 8006da8:	3710      	adds	r7, #16
 8006daa:	46bd      	mov	sp, r7
 8006dac:	bd80      	pop	{r7, pc}
	...

08006db0 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8006db0:	b5b0      	push	{r4, r5, r7, lr}
 8006db2:	b08c      	sub	sp, #48	; 0x30
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 8006dbc:	4a59      	ldr	r2, [pc, #356]	; (8006f24 <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x174>)
 8006dbe:	2101      	movs	r1, #1
 8006dc0:	68f8      	ldr	r0, [r7, #12]
 8006dc2:	f7fe ff3d 	bl	8005c40 <_ZNKSt6vectorItSaItEE12_M_check_lenEjPKc>
 8006dc6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8006dd4:	68f8      	ldr	r0, [r7, #12]
 8006dd6:	f7fe ff7a 	bl	8005cce <_ZNSt6vectorItSaItEE5beginEv>
 8006dda:	4603      	mov	r3, r0
 8006ddc:	617b      	str	r3, [r7, #20]
 8006dde:	f107 0214 	add.w	r2, r7, #20
 8006de2:	f107 0308 	add.w	r3, r7, #8
 8006de6:	4611      	mov	r1, r2
 8006de8:	4618      	mov	r0, r3
 8006dea:	f7fe ff80 	bl	8005cee <_ZN9__gnu_cxxmiIPtSt6vectorItSaItEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8006dee:	4603      	mov	r3, r0
 8006df0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006df6:	4618      	mov	r0, r3
 8006df8:	f7fe ff8e 	bl	8005d18 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 8006dfc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8006e02:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8006e04:	69fb      	ldr	r3, [r7, #28]
 8006e06:	005b      	lsls	r3, r3, #1
	  _Alloc_traits::construct(this->_M_impl,
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	18d5      	adds	r5, r2, r3
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f7ff ffb0 	bl	8006d72 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 8006e12:	4603      	mov	r3, r0
 8006e14:	461a      	mov	r2, r3
 8006e16:	4629      	mov	r1, r5
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f7ff ffb5 	bl	8006d88 <_ZNSt16allocator_traitsISaItEE9constructItJiEEEvRS0_PT_DpOT0_>
	  __new_finish = pointer();
 8006e1e:	2300      	movs	r3, #0
 8006e20:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8006e22:	f7fe fcf3 	bl	800580c <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006e26:	4603      	mov	r3, r0
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d027      	beq.n	8006e7c <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006e2c:	f107 0308 	add.w	r3, r7, #8
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe ff99 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006e36:	4603      	mov	r3, r0
 8006e38:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	4618      	mov	r0, r3
 8006e3e:	f7fe fbf8 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006e42:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4621      	mov	r1, r4
 8006e48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e4a:	f7fe ff79 	bl	8005d40 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006e4e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8006e50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e52:	3302      	adds	r3, #2
 8006e54:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006e56:	f107 0308 	add.w	r3, r7, #8
 8006e5a:	4618      	mov	r0, r3
 8006e5c:	f7fe ff84 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006e60:	4603      	mov	r3, r0
 8006e62:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7fe fbe3 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006e6c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8006e6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e70:	6a39      	ldr	r1, [r7, #32]
 8006e72:	4620      	mov	r0, r4
 8006e74:	f7fe ff64 	bl	8005d40 <_ZNSt6vectorItSaItEE11_S_relocateEPtS2_S2_RS0_>
 8006e78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006e7a:	e026      	b.n	8006eca <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8006e7c:	f107 0308 	add.w	r3, r7, #8
 8006e80:	4618      	mov	r0, r3
 8006e82:	f7fe ff71 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006e86:	4603      	mov	r3, r0
 8006e88:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	f7fe fbd0 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006e92:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8006e94:	69ba      	ldr	r2, [r7, #24]
 8006e96:	4621      	mov	r1, r4
 8006e98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006e9a:	f7fe ff70 	bl	8005d7e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8006e9e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8006ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ea2:	3302      	adds	r3, #2
 8006ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8006ea6:	f107 0308 	add.w	r3, r7, #8
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f7fe ff5c 	bl	8005d68 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEE4baseEv>
 8006eb0:	4603      	mov	r3, r0
 8006eb2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	4618      	mov	r0, r3
 8006eb8:	f7fe fbbb 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006ebc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8006ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ec0:	6a39      	ldr	r1, [r7, #32]
 8006ec2:	4620      	mov	r0, r4
 8006ec4:	f7fe ff5b 	bl	8005d7e <_ZSt34__uninitialized_move_if_noexcept_aIPtS0_SaItEET0_T_S3_S2_RT1_>
 8006ec8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8006eca:	f7fe fc9f 	bl	800580c <_ZNSt6vectorItSaItEE15_S_use_relocateEv>
 8006ece:	4603      	mov	r3, r0
 8006ed0:	f083 0301 	eor.w	r3, r3, #1
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d009      	beq.n	8006eee <_ZNSt6vectorItSaItEE17_M_realloc_insertIJiEEEvN9__gnu_cxx17__normal_iteratorIPtS1_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	4618      	mov	r0, r3
 8006ede:	f7fe fba8 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	461a      	mov	r2, r3
 8006ee6:	6a39      	ldr	r1, [r7, #32]
 8006ee8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006eea:	f7fe fbad 	bl	8005648 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
      _M_deallocate(__old_start,
 8006eee:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	689a      	ldr	r2, [r3, #8]
 8006ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	105b      	asrs	r3, r3, #1
      _M_deallocate(__old_start,
 8006efa:	461a      	mov	r2, r3
 8006efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006efe:	f7fe fb85 	bl	800560c <_ZNSt12_Vector_baseItSaItEE13_M_deallocateEPtj>
      this->_M_impl._M_start = __new_start;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	69ba      	ldr	r2, [r7, #24]
 8006f06:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006f0c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8006f0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f10:	005b      	lsls	r3, r3, #1
 8006f12:	69ba      	ldr	r2, [r7, #24]
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	609a      	str	r2, [r3, #8]
    }
 8006f1a:	bf00      	nop
 8006f1c:	3730      	adds	r7, #48	; 0x30
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	bdb0      	pop	{r4, r5, r7, pc}
 8006f22:	bf00      	nop
 8006f24:	080255f0 	.word	0x080255f0

08006f28 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8006f28:	b590      	push	{r4, r7, lr}
 8006f2a:	b085      	sub	sp, #20
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
 8006f30:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	685a      	ldr	r2, [r3, #4]
 8006f36:	683b      	ldr	r3, [r7, #0]
 8006f38:	1ad3      	subs	r3, r2, r3
 8006f3a:	105b      	asrs	r3, r3, #1
 8006f3c:	60fb      	str	r3, [r7, #12]
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d00e      	beq.n	8006f62 <_ZNSt6vectorItSaItEE15_M_erase_at_endEPt+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	4618      	mov	r0, r3
 8006f4c:	f7fe fb71 	bl	8005632 <_ZNSt12_Vector_baseItSaItEE19_M_get_Tp_allocatorEv>
 8006f50:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8006f52:	461a      	mov	r2, r3
 8006f54:	4621      	mov	r1, r4
 8006f56:	6838      	ldr	r0, [r7, #0]
 8006f58:	f7fe fb76 	bl	8005648 <_ZSt8_DestroyIPttEvT_S1_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	683a      	ldr	r2, [r7, #0]
 8006f60:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8006f62:	bf00      	nop
 8006f64:	3714      	adds	r7, #20
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd90      	pop	{r4, r7, pc}

08006f6a <_ZNKSt5dequeItSaItEE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8006f6a:	b580      	push	{r7, lr}
 8006f6c:	b082      	sub	sp, #8
 8006f6e:	af00      	add	r7, sp, #0
 8006f70:	6078      	str	r0, [r7, #4]
      { return this->_M_impl._M_finish == this->_M_impl._M_start; }
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	f103 0218 	add.w	r2, r3, #24
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	3308      	adds	r3, #8
 8006f7c:	4619      	mov	r1, r3
 8006f7e:	4610      	mov	r0, r2
 8006f80:	f000 f88a 	bl	8007098 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>
 8006f84:	4603      	mov	r3, r0
 8006f86:	4618      	mov	r0, r3
 8006f88:	3708      	adds	r7, #8
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	bd80      	pop	{r7, pc}

08006f8e <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEmiEi>:
      operator-(difference_type __n) const _GLIBCXX_NOEXCEPT
 8006f8e:	b580      	push	{r7, lr}
 8006f90:	b084      	sub	sp, #16
 8006f92:	af00      	add	r7, sp, #0
 8006f94:	6078      	str	r0, [r7, #4]
 8006f96:	6039      	str	r1, [r7, #0]
      { return __normal_iterator(_M_current - __n); }
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	683b      	ldr	r3, [r7, #0]
 8006f9e:	005b      	lsls	r3, r3, #1
 8006fa0:	425b      	negs	r3, r3
 8006fa2:	4413      	add	r3, r2
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	f107 020c 	add.w	r2, r7, #12
 8006faa:	f107 0308 	add.w	r3, r7, #8
 8006fae:	4611      	mov	r1, r2
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7fe fe35 	bl	8005c20 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEC1ERKS1_>
 8006fb6:	68bb      	ldr	r3, [r7, #8]
 8006fb8:	4618      	mov	r0, r3
 8006fba:	3710      	adds	r7, #16
 8006fbc:	46bd      	mov	sp, r7
 8006fbe:	bd80      	pop	{r7, pc}

08006fc0 <_ZN9__gnu_cxx14__alloc_traitsISaItEtE17_S_select_on_copyERKS1_>:
      std::__enable_if_t<__is_custom_pointer<_Ptr>::value>
      destroy(_Alloc& __a, _Ptr __p)
      noexcept(noexcept(_Base_type::destroy(__a, std::__to_address(__p))))
      { _Base_type::destroy(__a, std::__to_address(__p)); }

    static constexpr _Alloc _S_select_on_copy(const _Alloc& __a)
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b082      	sub	sp, #8
 8006fc4:	af00      	add	r7, sp, #0
 8006fc6:	6078      	str	r0, [r7, #4]
 8006fc8:	6039      	str	r1, [r7, #0]
    { return _Base_type::select_on_container_copy_construction(__a); }
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	6839      	ldr	r1, [r7, #0]
 8006fce:	4618      	mov	r0, r3
 8006fd0:	f000 f876 	bl	80070c0 <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	3708      	adds	r7, #8
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <_ZNSt12_Vector_baseItSaItEEC1EjRKS0_>:
      _Vector_base(size_t __n, const allocator_type& __a)
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
      : _M_impl(__a)
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	6879      	ldr	r1, [r7, #4]
 8006fec:	4618      	mov	r0, r3
 8006fee:	f000 f882 	bl	80070f6 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>
      { _M_create_storage(__n); }
 8006ff2:	68b9      	ldr	r1, [r7, #8]
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f000 f890 	bl	800711a <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	4618      	mov	r0, r3
 8006ffe:	3710      	adds	r7, #16
 8007000:	46bd      	mov	sp, r7
 8007002:	bd80      	pop	{r7, pc}

08007004 <_ZNKSt6vectorItSaItEE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8007004:	b580      	push	{r7, lr}
 8007006:	b084      	sub	sp, #16
 8007008:	af00      	add	r7, sp, #0
 800700a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800700c:	687a      	ldr	r2, [r7, #4]
 800700e:	f107 030c 	add.w	r3, r7, #12
 8007012:	4611      	mov	r1, r2
 8007014:	4618      	mov	r0, r3
 8007016:	f000 f89b 	bl	8007150 <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	4618      	mov	r0, r3
 800701e:	3710      	adds	r7, #16
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <_ZNKSt6vectorItSaItEE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8007024:	b580      	push	{r7, lr}
 8007026:	b084      	sub	sp, #16
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	1d1a      	adds	r2, r3, #4
 8007030:	f107 030c 	add.w	r3, r7, #12
 8007034:	4611      	mov	r1, r2
 8007036:	4618      	mov	r0, r3
 8007038:	f000 f88a 	bl	8007150 <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	4618      	mov	r0, r3
 8007040:	3710      	adds	r7, #16
 8007042:	46bd      	mov	sp, r7
 8007044:	bd80      	pop	{r7, pc}

08007046 <_ZSt22__uninitialized_copy_aIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPttET0_T_SA_S9_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8007046:	b580      	push	{r7, lr}
 8007048:	b084      	sub	sp, #16
 800704a:	af00      	add	r7, sp, #0
 800704c:	60f8      	str	r0, [r7, #12]
 800704e:	60b9      	str	r1, [r7, #8]
 8007050:	607a      	str	r2, [r7, #4]
 8007052:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8007054:	687a      	ldr	r2, [r7, #4]
 8007056:	68b9      	ldr	r1, [r7, #8]
 8007058:	68f8      	ldr	r0, [r7, #12]
 800705a:	f000 f889 	bl	8007170 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 800705e:	4603      	mov	r3, r0
 8007060:	4618      	mov	r0, r3
 8007062:	3710      	adds	r7, #16
 8007064:	46bd      	mov	sp, r7
 8007066:	bd80      	pop	{r7, pc}

08007068 <_ZN9__gnu_cxx13new_allocatorItE9constructItJiEEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8007068:	b590      	push	{r4, r7, lr}
 800706a:	b085      	sub	sp, #20
 800706c:	af00      	add	r7, sp, #0
 800706e:	60f8      	str	r0, [r7, #12]
 8007070:	60b9      	str	r1, [r7, #8]
 8007072:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f7ff fe7c 	bl	8006d72 <_ZSt7forwardIiEOT_RNSt16remove_referenceIS0_E4typeE>
 800707a:	4603      	mov	r3, r0
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	b29c      	uxth	r4, r3
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	4619      	mov	r1, r3
 8007084:	2002      	movs	r0, #2
 8007086:	f7fa ff10 	bl	8001eaa <_ZnwjPv>
 800708a:	4603      	mov	r3, r0
 800708c:	4622      	mov	r2, r4
 800708e:	801a      	strh	r2, [r3, #0]
 8007090:	bf00      	nop
 8007092:	3714      	adds	r7, #20
 8007094:	46bd      	mov	sp, r7
 8007096:	bd90      	pop	{r4, r7, pc}

08007098 <_ZSteqRKSt15_Deque_iteratorItRtPtES4_>:
      operator==(const _Self& __x, const _Self& __y) _GLIBCXX_NOEXCEPT
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
      { return __x._M_cur == __y._M_cur; }
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	683b      	ldr	r3, [r7, #0]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	429a      	cmp	r2, r3
 80070ac:	bf0c      	ite	eq
 80070ae:	2301      	moveq	r3, #1
 80070b0:	2300      	movne	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	4618      	mov	r0, r3
 80070b6:	370c      	adds	r7, #12
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <_ZNSt16allocator_traitsISaItEE37select_on_container_copy_constructionERKS0_>:
      select_on_container_copy_construction(const allocator_type& __rhs)
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b082      	sub	sp, #8
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	6039      	str	r1, [r7, #0]
      { return __rhs; }
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 f804 	bl	80070da <_ZNSaItEC1ERKS_>
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	3708      	adds	r7, #8
 80070d6:	46bd      	mov	sp, r7
 80070d8:	bd80      	pop	{r7, pc}

080070da <_ZNSaItEC1ERKS_>:
      allocator(const allocator& __a) _GLIBCXX_NOTHROW
 80070da:	b580      	push	{r7, lr}
 80070dc:	b082      	sub	sp, #8
 80070de:	af00      	add	r7, sp, #0
 80070e0:	6078      	str	r0, [r7, #4]
 80070e2:	6039      	str	r1, [r7, #0]
      : __allocator_base<_Tp>(__a) { }
 80070e4:	6839      	ldr	r1, [r7, #0]
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f854 	bl	8007194 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	4618      	mov	r0, r3
 80070f0:	3708      	adds	r7, #8
 80070f2:	46bd      	mov	sp, r7
 80070f4:	bd80      	pop	{r7, pc}

080070f6 <_ZNSt12_Vector_baseItSaItEE12_Vector_implC1ERKS0_>:
	_Vector_impl(_Tp_alloc_type const& __a) _GLIBCXX_NOEXCEPT
 80070f6:	b580      	push	{r7, lr}
 80070f8:	b082      	sub	sp, #8
 80070fa:	af00      	add	r7, sp, #0
 80070fc:	6078      	str	r0, [r7, #4]
 80070fe:	6039      	str	r1, [r7, #0]
	: _Tp_alloc_type(__a)
 8007100:	6839      	ldr	r1, [r7, #0]
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f7ff ffe9 	bl	80070da <_ZNSaItEC1ERKS_>
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	4618      	mov	r0, r3
 800710c:	f7fe fa5f 	bl	80055ce <_ZNSt12_Vector_baseItSaItEE17_Vector_impl_dataC1Ev>
	{ }
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	4618      	mov	r0, r3
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}

0800711a <_ZNSt12_Vector_baseItSaItEE17_M_create_storageEj>:
      _M_create_storage(size_t __n)
 800711a:	b580      	push	{r7, lr}
 800711c:	b082      	sub	sp, #8
 800711e:	af00      	add	r7, sp, #0
 8007120:	6078      	str	r0, [r7, #4]
 8007122:	6039      	str	r1, [r7, #0]
	this->_M_impl._M_start = this->_M_allocate(__n);
 8007124:	6839      	ldr	r1, [r7, #0]
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f7fe fdf6 	bl	8005d18 <_ZNSt12_Vector_baseItSaItEE11_M_allocateEj>
 800712c:	4602      	mov	r2, r0
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	601a      	str	r2, [r3, #0]
	this->_M_impl._M_finish = this->_M_impl._M_start;
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	605a      	str	r2, [r3, #4]
	this->_M_impl._M_end_of_storage = this->_M_impl._M_start + __n;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	683b      	ldr	r3, [r7, #0]
 8007140:	005b      	lsls	r3, r3, #1
 8007142:	441a      	add	r2, r3
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	609a      	str	r2, [r3, #8]
      }
 8007148:	bf00      	nop
 800714a:	3708      	adds	r7, #8
 800714c:	46bd      	mov	sp, r7
 800714e:	bd80      	pop	{r7, pc}

08007150 <_ZN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8007150:	b480      	push	{r7}
 8007152:	b083      	sub	sp, #12
 8007154:	af00      	add	r7, sp, #0
 8007156:	6078      	str	r0, [r7, #4]
 8007158:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 800715a:	683b      	ldr	r3, [r7, #0]
 800715c:	681a      	ldr	r2, [r3, #0]
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	601a      	str	r2, [r3, #0]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4618      	mov	r0, r3
 8007166:	370c      	adds	r7, #12
 8007168:	46bd      	mov	sp, r7
 800716a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716e:	4770      	bx	lr

08007170 <_ZSt18uninitialized_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8007170:	b580      	push	{r7, lr}
 8007172:	b086      	sub	sp, #24
 8007174:	af00      	add	r7, sp, #0
 8007176:	60f8      	str	r0, [r7, #12]
 8007178:	60b9      	str	r1, [r7, #8]
 800717a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 800717c:	2301      	movs	r3, #1
 800717e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8007180:	687a      	ldr	r2, [r7, #4]
 8007182:	68b9      	ldr	r1, [r7, #8]
 8007184:	68f8      	ldr	r0, [r7, #12]
 8007186:	f000 f811 	bl	80071ac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>
 800718a:	4603      	mov	r3, r0
    }
 800718c:	4618      	mov	r0, r3
 800718e:	3718      	adds	r7, #24
 8007190:	46bd      	mov	sp, r7
 8007192:	bd80      	pop	{r7, pc}

08007194 <_ZN9__gnu_cxx13new_allocatorItEC1ERKS1_>:
      new_allocator(const new_allocator&) _GLIBCXX_USE_NOEXCEPT { }
 8007194:	b480      	push	{r7}
 8007196:	b083      	sub	sp, #12
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	6039      	str	r1, [r7, #0]
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	4618      	mov	r0, r3
 80071a2:	370c      	adds	r7, #12
 80071a4:	46bd      	mov	sp, r7
 80071a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071aa:	4770      	bx	lr

080071ac <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtEET0_T_SC_SB_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b084      	sub	sp, #16
 80071b0:	af00      	add	r7, sp, #0
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80071b8:	687a      	ldr	r2, [r7, #4]
 80071ba:	68b9      	ldr	r1, [r7, #8]
 80071bc:	68f8      	ldr	r0, [r7, #12]
 80071be:	f000 f805 	bl	80071cc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>
 80071c2:	4603      	mov	r3, r0
 80071c4:	4618      	mov	r0, r3
 80071c6:	3710      	adds	r7, #16
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <_ZSt4copyIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET0_T_SA_S9_>:
    copy(_II __first, _II __last, _OI __result)
 80071cc:	b590      	push	{r4, r7, lr}
 80071ce:	b085      	sub	sp, #20
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60f8      	str	r0, [r7, #12]
 80071d4:	60b9      	str	r1, [r7, #8]
 80071d6:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80071d8:	68f8      	ldr	r0, [r7, #12]
 80071da:	f000 f80f 	bl	80071fc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 80071de:	4604      	mov	r4, r0
 80071e0:	68b8      	ldr	r0, [r7, #8]
 80071e2:	f000 f80b 	bl	80071fc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>
 80071e6:	4603      	mov	r3, r0
 80071e8:	687a      	ldr	r2, [r7, #4]
 80071ea:	4619      	mov	r1, r3
 80071ec:	4620      	mov	r0, r4
 80071ee:	f000 f810 	bl	8007212 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>
 80071f2:	4603      	mov	r3, r0
    }
 80071f4:	4618      	mov	r0, r3
 80071f6:	3714      	adds	r7, #20
 80071f8:	46bd      	mov	sp, r7
 80071fa:	bd90      	pop	{r4, r7, pc}

080071fc <_ZSt12__miter_baseIN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEET_S8_>:
    __miter_base(_Iterator __it)
 80071fc:	b480      	push	{r7}
 80071fe:	b083      	sub	sp, #12
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
    { return __it; }
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	4618      	mov	r0, r3
 8007208:	370c      	adds	r7, #12
 800720a:	46bd      	mov	sp, r7
 800720c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007210:	4770      	bx	lr

08007212 <_ZSt13__copy_move_aILb0EN9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEEEPtET1_T0_SA_S9_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8007212:	b5b0      	push	{r4, r5, r7, lr}
 8007214:	b084      	sub	sp, #16
 8007216:	af00      	add	r7, sp, #0
 8007218:	60f8      	str	r0, [r7, #12]
 800721a:	60b9      	str	r1, [r7, #8]
 800721c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800721e:	68f8      	ldr	r0, [r7, #12]
 8007220:	f000 f81a 	bl	8007258 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 8007224:	4604      	mov	r4, r0
 8007226:	68b8      	ldr	r0, [r7, #8]
 8007228:	f000 f816 	bl	8007258 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>
 800722c:	4605      	mov	r5, r0
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	4618      	mov	r0, r3
 8007232:	f7ff f9e9 	bl	8006608 <_ZSt12__niter_baseIPtET_S1_>
 8007236:	4603      	mov	r3, r0
 8007238:	461a      	mov	r2, r3
 800723a:	4629      	mov	r1, r5
 800723c:	4620      	mov	r0, r4
 800723e:	f000 f819 	bl	8007274 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>
 8007242:	4602      	mov	r2, r0
 8007244:	1d3b      	adds	r3, r7, #4
 8007246:	4611      	mov	r1, r2
 8007248:	4618      	mov	r0, r3
 800724a:	f7ff fb64 	bl	8006916 <_ZSt12__niter_wrapIPtET_RKS1_S1_>
 800724e:	4603      	mov	r3, r0
    }
 8007250:	4618      	mov	r0, r3
 8007252:	3710      	adds	r7, #16
 8007254:	46bd      	mov	sp, r7
 8007256:	bdb0      	pop	{r4, r5, r7, pc}

08007258 <_ZSt12__niter_baseIPKtSt6vectorItSaItEEET_N9__gnu_cxx17__normal_iteratorIS5_T0_EE>:
    __niter_base(__gnu_cxx::__normal_iterator<_Iterator, _Container> __it)
 8007258:	b580      	push	{r7, lr}
 800725a:	b082      	sub	sp, #8
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
    { return __it.base(); }
 8007260:	1d3b      	adds	r3, r7, #4
 8007262:	4618      	mov	r0, r3
 8007264:	f000 f816 	bl	8007294 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>
 8007268:	4603      	mov	r3, r0
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4618      	mov	r0, r3
 800726e:	3708      	adds	r7, #8
 8007270:	46bd      	mov	sp, r7
 8007272:	bd80      	pop	{r7, pc}

08007274 <_ZSt14__copy_move_a1ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 8007274:	b580      	push	{r7, lr}
 8007276:	b084      	sub	sp, #16
 8007278:	af00      	add	r7, sp, #0
 800727a:	60f8      	str	r0, [r7, #12]
 800727c:	60b9      	str	r1, [r7, #8]
 800727e:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 8007280:	687a      	ldr	r2, [r7, #4]
 8007282:	68b9      	ldr	r1, [r7, #8]
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 f810 	bl	80072aa <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>
 800728a:	4603      	mov	r3, r0
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}

08007294 <_ZNK9__gnu_cxx17__normal_iteratorIPKtSt6vectorItSaItEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8007294:	b480      	push	{r7}
 8007296:	b083      	sub	sp, #12
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800729c:	687b      	ldr	r3, [r7, #4]
 800729e:	4618      	mov	r0, r3
 80072a0:	370c      	adds	r7, #12
 80072a2:	46bd      	mov	sp, r7
 80072a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a8:	4770      	bx	lr

080072aa <_ZSt14__copy_move_a2ILb0EPKtPtET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80072aa:	b580      	push	{r7, lr}
 80072ac:	b084      	sub	sp, #16
 80072ae:	af00      	add	r7, sp, #0
 80072b0:	60f8      	str	r0, [r7, #12]
 80072b2:	60b9      	str	r1, [r7, #8]
 80072b4:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 80072b6:	687a      	ldr	r2, [r7, #4]
 80072b8:	68b9      	ldr	r1, [r7, #8]
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f805 	bl	80072ca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>
 80072c0:	4603      	mov	r3, r0
    }
 80072c2:	4618      	mov	r0, r3
 80072c4:	3710      	adds	r7, #16
 80072c6:	46bd      	mov	sp, r7
 80072c8:	bd80      	pop	{r7, pc}

080072ca <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 80072ca:	b580      	push	{r7, lr}
 80072cc:	b086      	sub	sp, #24
 80072ce:	af00      	add	r7, sp, #0
 80072d0:	60f8      	str	r0, [r7, #12]
 80072d2:	60b9      	str	r1, [r7, #8]
 80072d4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80072d6:	68ba      	ldr	r2, [r7, #8]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	1ad3      	subs	r3, r2, r3
 80072dc:	105b      	asrs	r3, r3, #1
 80072de:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80072e0:	697b      	ldr	r3, [r7, #20]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d006      	beq.n	80072f4 <_ZNSt11__copy_moveILb0ELb1ESt26random_access_iterator_tagE8__copy_mItEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80072e6:	697b      	ldr	r3, [r7, #20]
 80072e8:	005b      	lsls	r3, r3, #1
 80072ea:	461a      	mov	r2, r3
 80072ec:	68f9      	ldr	r1, [r7, #12]
 80072ee:	6878      	ldr	r0, [r7, #4]
 80072f0:	f01c fecc 	bl	802408c <memmove>
	  return __result + _Num;
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	005b      	lsls	r3, r3, #1
 80072f8:	687a      	ldr	r2, [r7, #4]
 80072fa:	4413      	add	r3, r2
	}
 80072fc:	4618      	mov	r0, r3
 80072fe:	3718      	adds	r7, #24
 8007300:	46bd      	mov	sp, r7
 8007302:	bd80      	pop	{r7, pc}

08007304 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>:
	this->unit_ = Unit;
	this->angle_offset_ = Angle_Offset;
	this->comm_dir_available_ = false;
}

PGV100::PGV100(uint16_t index,  uint16_t commtype, UART_HandleTypeDef *huartx,
 8007304:	b580      	push	{r7, lr}
 8007306:	b08a      	sub	sp, #40	; 0x28
 8007308:	af00      	add	r7, sp, #0
 800730a:	6278      	str	r0, [r7, #36]	; 0x24
 800730c:	61fb      	str	r3, [r7, #28]
 800730e:	ed87 0b04 	vstr	d0, [r7, #16]
 8007312:	ed87 1b02 	vstr	d1, [r7, #8]
 8007316:	ed87 2b00 	vstr	d2, [r7]
 800731a:	460b      	mov	r3, r1
 800731c:	847b      	strh	r3, [r7, #34]	; 0x22
 800731e:	4613      	mov	r3, r2
 8007320:	843b      	strh	r3, [r7, #32]
				GPIO_TypeDef* GPIO, uint16_t dir_pin_no, uint16_t Unit, double X_Offset, double Y_Offset, double Angle_Offset)
 8007322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007324:	4618      	mov	r0, r3
 8007326:	f7fd fe85 	bl	8005034 <_ZN12PNFPosSensorC1Ev>
 800732a:	4a27      	ldr	r2, [pc, #156]	; (80073c8 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd+0xc4>)
 800732c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800732e:	601a      	str	r2, [r3, #0]
 8007330:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007332:	f04f 0200 	mov.w	r2, #0
 8007336:	f04f 0300 	mov.w	r3, #0
 800733a:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	2200      	movs	r2, #0
 8007342:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8007346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007348:	2200      	movs	r2, #0
 800734a:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 800734e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007350:	2200      	movs	r2, #0
 8007352:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	2200      	movs	r2, #0
 800735a:	f8a3 20a8 	strh.w	r2, [r3, #168]	; 0xa8
 800735e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007360:	4a1a      	ldr	r2, [pc, #104]	; (80073cc <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd+0xc8>)
 8007362:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	f06f 0263 	mvn.w	r2, #99	; 0x63
 800736c:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
{
	this->index_ = index;
 8007370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007372:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8007374:	809a      	strh	r2, [r3, #4]
	this->comm_type_ = commtype;
 8007376:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007378:	8c3a      	ldrh	r2, [r7, #32]
 800737a:	871a      	strh	r2, [r3, #56]	; 0x38
	this->x_offset_ = X_Offset;
 800737c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800737e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007382:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	this->y_offset_ = Y_Offset;
 8007386:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007388:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800738c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	this->huartx_= huartx;
 8007390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007392:	69fa      	ldr	r2, [r7, #28]
 8007394:	649a      	str	r2, [r3, #72]	; 0x48
	this->unit_ = Unit;
 8007396:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007398:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 800739a:	875a      	strh	r2, [r3, #58]	; 0x3a
	this->angle_offset_ = Angle_Offset;
 800739c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800739e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80073a2:	e9c1 2328 	strd	r2, r3, [r1, #160]	; 0xa0
	this->GPIO_ = GPIO;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073aa:	641a      	str	r2, [r3, #64]	; 0x40
	this->dir_pin_no_ = dir_pin_no;
 80073ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ae:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80073b0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	this->comm_dir_available_ = true;
 80073b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073b6:	2201      	movs	r2, #1
 80073b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80073bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	; 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	08028d38 	.word	0x08028d38
 80073cc:	000f4240 	.word	0x000f4240

080073d0 <_ZN6PGV100D1Ev>:

PGV100::~PGV100(){/*Total_PNF_Sensor_Num--;*/}
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b082      	sub	sp, #8
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	4a05      	ldr	r2, [pc, #20]	; (80073f0 <_ZN6PGV100D1Ev+0x20>)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	4618      	mov	r0, r3
 80073e2:	f7fd fe73 	bl	80050cc <_ZN12PNFPosSensorD1Ev>
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4618      	mov	r0, r3
 80073ea:	3708      	adds	r7, #8
 80073ec:	46bd      	mov	sp, r7
 80073ee:	bd80      	pop	{r7, pc}
 80073f0:	08028d38 	.word	0x08028d38

080073f4 <_ZN6PGV100D0Ev>:
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
 80073fc:	6878      	ldr	r0, [r7, #4]
 80073fe:	f7ff ffe7 	bl	80073d0 <_ZN6PGV100D1Ev>
 8007402:	21b8      	movs	r1, #184	; 0xb8
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f01b fccd 	bl	8022da4 <_ZdlPvj>
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4618      	mov	r0, r3
 800740e:	3708      	adds	r7, #8
 8007410:	46bd      	mov	sp, r7
 8007412:	bd80      	pop	{r7, pc}

08007414 <_ZN6PGV10012ResetAllDataEv>:
/*---------------------------------------------------*/
/*Queue - queue systems ->Queue*/

//--------------------------------------------------------------Reset all data
void PGV100::ResetAllData()
{
 8007414:	b480      	push	{r7}
 8007416:	b083      	sub	sp, #12
 8007418:	af00      	add	r7, sp, #0
 800741a:	6078      	str	r0, [r7, #4]
	this->xpos_ = 0;
 800741c:	6879      	ldr	r1, [r7, #4]
 800741e:	f04f 0200 	mov.w	r2, #0
 8007422:	f04f 0300 	mov.w	r3, #0
 8007426:	e9c1 2304 	strd	r2, r3, [r1, #16]
	this->ypos_ = 0;
 800742a:	6879      	ldr	r1, [r7, #4]
 800742c:	f04f 0200 	mov.w	r2, #0
 8007430:	f04f 0300 	mov.w	r3, #0
 8007434:	e9c1 2306 	strd	r2, r3, [r1, #24]
	this->angle_ = 0;
 8007438:	6879      	ldr	r1, [r7, #4]
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9c1 2324 	strd	r2, r3, [r1, #144]	; 0x90
	this->tagNo_ = 0;
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	2200      	movs	r2, #0
 800744a:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
}
 800744e:	bf00      	nop
 8007450:	370c      	adds	r7, #12
 8007452:	46bd      	mov	sp, r7
 8007454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007458:	4770      	bx	lr

0800745a <_ZN6PGV10018RegisterRequestCmdEv>:



//--------------------------------------------------------------Construct level - network, first parmas. declation
void PGV100::RegisterRequestCmd()
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b08a      	sub	sp, #40	; 0x28
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
	RequestCmd.reserve(10);
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	335c      	adds	r3, #92	; 0x5c
 8007466:	210a      	movs	r1, #10
 8007468:	4618      	mov	r0, r3
 800746a:	f7ff faed 	bl	8006a48 <_ZNSt6vectorItSaItEE7reserveEj>
	RequestCmd.emplace_back(0xEC);   //0
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	335c      	adds	r3, #92	; 0x5c
 8007472:	22ec      	movs	r2, #236	; 0xec
 8007474:	60ba      	str	r2, [r7, #8]
 8007476:	f107 0208 	add.w	r2, r7, #8
 800747a:	4611      	mov	r1, r2
 800747c:	4618      	mov	r0, r3
 800747e:	f7ff fb63 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE8);   //1
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	335c      	adds	r3, #92	; 0x5c
 8007486:	22e8      	movs	r2, #232	; 0xe8
 8007488:	60fa      	str	r2, [r7, #12]
 800748a:	f107 020c 	add.w	r2, r7, #12
 800748e:	4611      	mov	r1, r2
 8007490:	4618      	mov	r0, r3
 8007492:	f7ff fb59 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xE4);   //2
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	335c      	adds	r3, #92	; 0x5c
 800749a:	22e4      	movs	r2, #228	; 0xe4
 800749c:	613a      	str	r2, [r7, #16]
 800749e:	f107 0210 	add.w	r2, r7, #16
 80074a2:	4611      	mov	r1, r2
 80074a4:	4618      	mov	r0, r3
 80074a6:	f7ff fb4f 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x90);   //3
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	335c      	adds	r3, #92	; 0x5c
 80074ae:	2290      	movs	r2, #144	; 0x90
 80074b0:	617a      	str	r2, [r7, #20]
 80074b2:	f107 0214 	add.w	r2, r7, #20
 80074b6:	4611      	mov	r1, r2
 80074b8:	4618      	mov	r0, r3
 80074ba:	f7ff fb45 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0x88);   //4
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	335c      	adds	r3, #92	; 0x5c
 80074c2:	2288      	movs	r2, #136	; 0x88
 80074c4:	61ba      	str	r2, [r7, #24]
 80074c6:	f107 0218 	add.w	r2, r7, #24
 80074ca:	4611      	mov	r1, r2
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff fb3b 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC4);   //5
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	335c      	adds	r3, #92	; 0x5c
 80074d6:	22c4      	movs	r2, #196	; 0xc4
 80074d8:	61fa      	str	r2, [r7, #28]
 80074da:	f107 021c 	add.w	r2, r7, #28
 80074de:	4611      	mov	r1, r2
 80074e0:	4618      	mov	r0, r3
 80074e2:	f7ff fb31 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xC8);   //6
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	335c      	adds	r3, #92	; 0x5c
 80074ea:	22c8      	movs	r2, #200	; 0xc8
 80074ec:	623a      	str	r2, [r7, #32]
 80074ee:	f107 0220 	add.w	r2, r7, #32
 80074f2:	4611      	mov	r1, r2
 80074f4:	4618      	mov	r0, r3
 80074f6:	f7ff fb27 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
	RequestCmd.emplace_back(0xA0);   //7
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	335c      	adds	r3, #92	; 0x5c
 80074fe:	22a0      	movs	r2, #160	; 0xa0
 8007500:	627a      	str	r2, [r7, #36]	; 0x24
 8007502:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8007506:	4611      	mov	r1, r2
 8007508:	4618      	mov	r0, r3
 800750a:	f7ff fb1d 	bl	8006b48 <_ZNSt6vectorItSaItEE12emplace_backIJiEEEvDpOT_>
}
 800750e:	bf00      	nop
 8007510:	3728      	adds	r7, #40	; 0x28
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}

08007516 <_ZN6PGV10020RegisterDefaultParamEv>:

void PGV100::RegisterDefaultParam()
{
 8007516:	b580      	push	{r7, lr}
 8007518:	b082      	sub	sp, #8
 800751a:	af00      	add	r7, sp, #0
 800751c:	6078      	str	r0, [r7, #4]
	//Change_XOffset(1);
	//Change_YOffset(1);
	//Change_Angle_Offset(1);
	ResetAllData();
 800751e:	6878      	ldr	r0, [r7, #4]
 8007520:	f7ff ff78 	bl	8007414 <_ZN6PGV10012ResetAllDataEv>

	RequestChangeDirstraight();
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 f851 	bl	80075cc <_ZN6PGV10024RequestChangeDirstraightEv>
}
 800752a:	bf00      	nop
 800752c:	3708      	adds	r7, #8
 800752e:	46bd      	mov	sp, r7
 8007530:	bd80      	pop	{r7, pc}
	...

08007534 <_ZN6PGV10014ReadBufferInitEv>:


//Initialization for work-loop
void PGV100::ReadBufferInit()
{
 8007534:	b580      	push	{r7, lr}
 8007536:	b084      	sub	sp, #16
 8007538:	af00      	add	r7, sp, #0
 800753a:	6078      	str	r0, [r7, #4]
	int BufferLength = RequestQueue.front();
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	3368      	adds	r3, #104	; 0x68
 8007540:	4618      	mov	r0, r3
 8007542:	f7fd ffd3 	bl	80054ec <_ZNSt5queueItSt5dequeItSaItEEE5frontEv>
 8007546:	4603      	mov	r3, r0
 8007548:	881b      	ldrh	r3, [r3, #0]
 800754a:	60fb      	str	r3, [r7, #12]
	switch(BufferLength)
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	2b06      	cmp	r3, #6
 8007550:	d833      	bhi.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>
 8007552:	a201      	add	r2, pc, #4	; (adr r2, 8007558 <_ZN6PGV10014ReadBufferInitEv+0x24>)
 8007554:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007558:	0800757f 	.word	0x0800757f
 800755c:	08007589 	.word	0x08007589
 8007560:	08007593 	.word	0x08007593
 8007564:	0800759d 	.word	0x0800759d
 8007568:	080075a7 	.word	0x080075a7
 800756c:	080075b1 	.word	0x080075b1
 8007570:	08007575 	.word	0x08007575
	{
		//position
		case PGV100PosRequest: this->max_read_buf_size_ = PGV100Pos; break;
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	2215      	movs	r2, #21
 8007578:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800757c:	e01d      	b.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>

		//Directions
		case PGV100StraightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2203      	movs	r2, #3
 8007582:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8007586:	e018      	b.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>

		case PGV100LeftRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	2203      	movs	r2, #3
 800758c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 8007590:	e013      	b.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>

		case PGV100RightRequest: this->max_read_buf_size_ = PGV100Dir; break;
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2203      	movs	r2, #3
 8007596:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 800759a:	e00e      	b.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>

		//Colors
		case PGV100RedRequest: this->max_read_buf_size_ = PGV100Color; break;
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	2202      	movs	r2, #2
 80075a0:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80075a4:	e009      	b.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>

		case PGV100GreenRequest: this->max_read_buf_size_ = PGV100Color; break;
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	2202      	movs	r2, #2
 80075aa:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80075ae:	e004      	b.n	80075ba <_ZN6PGV10014ReadBufferInitEv+0x86>

		case PGV100BlueRequest: this->max_read_buf_size_ = PGV100Color; break;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2202      	movs	r2, #2
 80075b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
 80075b8:	bf00      	nop
	}
	//size initialize
	this->pos_buf_.clear();
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	334c      	adds	r3, #76	; 0x4c
 80075be:	4618      	mov	r0, r3
 80075c0:	f7ff faf0 	bl	8006ba4 <_ZNSt6vectorItSaItEE5clearEv>
}
 80075c4:	bf00      	nop
 80075c6:	3710      	adds	r7, #16
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}

080075cc <_ZN6PGV10024RequestChangeDirstraightEv>:
	return* this;
}

//---------------------------------------------------------------Request command
//pgv100 only
void PGV100::RequestChangeDirstraight() {QueueSaveRequest(PGV100StraightRequest);}
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b082      	sub	sp, #8
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	6078      	str	r0, [r7, #4]
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	2100      	movs	r1, #0
 80075d8:	4618      	mov	r0, r3
 80075da:	f7fd fe59 	bl	8005290 <_ZN12PNFPosSensor16QueueSaveRequestEt>
 80075de:	bf00      	nop
 80075e0:	3708      	adds	r7, #8
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}

080075e6 <_ZN6PGV10019RequestGetPGV100PosEv>:

void PGV100::RequestChangeColoryellow() {QueueSaveRequest(PGV100RedRequest);}
void PGV100::RequestChangeColorred() {QueueSaveRequest(PGV100GreenRequest);}
void PGV100::RequestChangeColorblue() {QueueSaveRequest(PGV100BlueRequest);}

void PGV100::RequestGetPGV100Pos() {QueueSaveRequest(PGV100PosRequest);}
 80075e6:	b580      	push	{r7, lr}
 80075e8:	b082      	sub	sp, #8
 80075ea:	af00      	add	r7, sp, #0
 80075ec:	6078      	str	r0, [r7, #4]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	2106      	movs	r1, #6
 80075f2:	4618      	mov	r0, r3
 80075f4:	f7fd fe4c 	bl	8005290 <_ZN12PNFPosSensor16QueueSaveRequestEt>
 80075f8:	bf00      	nop
 80075fa:	3708      	adds	r7, #8
 80075fc:	46bd      	mov	sp, r7
 80075fe:	bd80      	pop	{r7, pc}

08007600 <_ZN6PGV10021QueueRepeatPosReqeustEv>:


//---------------------------------------------------------------Command queue functions
//queue system functions
void PGV100::QueueRepeatPosReqeust()
{
 8007600:	b580      	push	{r7, lr}
 8007602:	b082      	sub	sp, #8
 8007604:	af00      	add	r7, sp, #0
 8007606:	6078      	str	r0, [r7, #4]
	if(RequestQueue.empty()) RequestGetPGV100Pos();
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3368      	adds	r3, #104	; 0x68
 800760c:	4618      	mov	r0, r3
 800760e:	f7ff fad7 	bl	8006bc0 <_ZNKSt5queueItSt5dequeItSaItEEE5emptyEv>
 8007612:	4603      	mov	r3, r0
 8007614:	2b00      	cmp	r3, #0
 8007616:	d002      	beq.n	800761e <_ZN6PGV10021QueueRepeatPosReqeustEv+0x1e>
 8007618:	6878      	ldr	r0, [r7, #4]
 800761a:	f7ff ffe4 	bl	80075e6 <_ZN6PGV10019RequestGetPGV100PosEv>
}
 800761e:	bf00      	nop
 8007620:	3708      	adds	r7, #8
 8007622:	46bd      	mov	sp, r7
 8007624:	bd80      	pop	{r7, pc}

08007626 <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>:
double PGV100::GetUnit() const {return unit_;}
uint16_t PGV100::GetCommtype() const {return comm_type_;}


uint32_t PGV100::ProcessGetERRInfo(std::vector<uint16_t> temp_buf)
{
 8007626:	b580      	push	{r7, lr}
 8007628:	b084      	sub	sp, #16
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
	uint32_t err_data = ((temp_buf)[5]);
 8007630:	2105      	movs	r1, #5
 8007632:	6838      	ldr	r0, [r7, #0]
 8007634:	f7fd ff67 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007638:	4603      	mov	r3, r0
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	60fb      	str	r3, [r7, #12]

	(err_data)|=((temp_buf)[4] << 7);
 800763e:	2104      	movs	r1, #4
 8007640:	6838      	ldr	r0, [r7, #0]
 8007642:	f7fd ff60 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007646:	4603      	mov	r3, r0
 8007648:	881b      	ldrh	r3, [r3, #0]
 800764a:	01da      	lsls	r2, r3, #7
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	4313      	orrs	r3, r2
 8007650:	60fb      	str	r3, [r7, #12]

	(err_data)|=((temp_buf)[3] << 14);
 8007652:	2103      	movs	r1, #3
 8007654:	6838      	ldr	r0, [r7, #0]
 8007656:	f7fd ff56 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800765a:	4603      	mov	r3, r0
 800765c:	881b      	ldrh	r3, [r3, #0]
 800765e:	039a      	lsls	r2, r3, #14
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	4313      	orrs	r3, r2
 8007664:	60fb      	str	r3, [r7, #12]

	(err_data)|=(((temp_buf)[2]&0x07) << 21);
 8007666:	2102      	movs	r1, #2
 8007668:	6838      	ldr	r0, [r7, #0]
 800766a:	f7fd ff4c 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800766e:	4603      	mov	r3, r0
 8007670:	881b      	ldrh	r3, [r3, #0]
 8007672:	055b      	lsls	r3, r3, #21
 8007674:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4313      	orrs	r3, r2
 800767c:	60fb      	str	r3, [r7, #12]

	return err_data;
 800767e:	68fb      	ldr	r3, [r7, #12]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>:

//for getting data
bool PGV100::ProcessIsTagDetected(std::vector<uint16_t> temp_buf)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b082      	sub	sp, #8
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	6039      	str	r1, [r7, #0]
	if((temp_buf)[1] & 0x40) return true;
 8007692:	2101      	movs	r1, #1
 8007694:	6838      	ldr	r0, [r7, #0]
 8007696:	f7fd ff36 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800769a:	4603      	mov	r3, r0
 800769c:	881b      	ldrh	r3, [r3, #0]
 800769e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	bf14      	ite	ne
 80076a6:	2301      	movne	r3, #1
 80076a8:	2300      	moveq	r3, #0
 80076aa:	b2db      	uxtb	r3, r3
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d001      	beq.n	80076b4 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2c>
 80076b0:	2301      	movs	r3, #1
 80076b2:	e000      	b.n	80076b6 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE+0x2e>
	else return false;
 80076b4:	2300      	movs	r3, #0
}
 80076b6:	4618      	mov	r0, r3
 80076b8:	3708      	adds	r7, #8
 80076ba:	46bd      	mov	sp, r7
 80076bc:	bd80      	pop	{r7, pc}

080076be <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetTagNumber(std::vector<uint16_t> temp_buf)
{
 80076be:	b580      	push	{r7, lr}
 80076c0:	b084      	sub	sp, #16
 80076c2:	af00      	add	r7, sp, #0
 80076c4:	6078      	str	r0, [r7, #4]
 80076c6:	6039      	str	r1, [r7, #0]
	 uint16_t tag_num = 0;
 80076c8:	2300      	movs	r3, #0
 80076ca:	81fb      	strh	r3, [r7, #14]

	 (tag_num)=((temp_buf)[17]);
 80076cc:	2111      	movs	r1, #17
 80076ce:	6838      	ldr	r0, [r7, #0]
 80076d0:	f7fd ff19 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 80076d4:	4603      	mov	r3, r0
 80076d6:	881b      	ldrh	r3, [r3, #0]
 80076d8:	81fb      	strh	r3, [r7, #14]

	 (tag_num)|=((temp_buf)[16]<<7);
 80076da:	2110      	movs	r1, #16
 80076dc:	6838      	ldr	r0, [r7, #0]
 80076de:	f7fd ff12 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 80076e2:	4603      	mov	r3, r0
 80076e4:	881b      	ldrh	r3, [r3, #0]
 80076e6:	01db      	lsls	r3, r3, #7
 80076e8:	89fa      	ldrh	r2, [r7, #14]
 80076ea:	b212      	sxth	r2, r2
 80076ec:	b21b      	sxth	r3, r3
 80076ee:	4313      	orrs	r3, r2
 80076f0:	b21b      	sxth	r3, r3
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	81fb      	strh	r3, [r7, #14]

	 (tag_num)|=((temp_buf)[15]<<14);
 80076f6:	210f      	movs	r1, #15
 80076f8:	6838      	ldr	r0, [r7, #0]
 80076fa:	f7fd ff04 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 80076fe:	4603      	mov	r3, r0
 8007700:	881b      	ldrh	r3, [r3, #0]
 8007702:	039b      	lsls	r3, r3, #14
 8007704:	89fa      	ldrh	r2, [r7, #14]
 8007706:	b212      	sxth	r2, r2
 8007708:	b21b      	sxth	r3, r3
 800770a:	4313      	orrs	r3, r2
 800770c:	b21b      	sxth	r3, r3
 800770e:	b29b      	uxth	r3, r3
 8007710:	81fb      	strh	r3, [r7, #14]

	 (tag_num)|=((temp_buf)[14]<<21);
 8007712:	210e      	movs	r1, #14
 8007714:	6838      	ldr	r0, [r7, #0]
 8007716:	f7fd fef6 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800771a:	4603      	mov	r3, r0
 800771c:	881b      	ldrh	r3, [r3, #0]
 800771e:	055b      	lsls	r3, r3, #21
 8007720:	89fa      	ldrh	r2, [r7, #14]
 8007722:	b212      	sxth	r2, r2
 8007724:	b21b      	sxth	r3, r3
 8007726:	4313      	orrs	r3, r2
 8007728:	b21b      	sxth	r3, r3
 800772a:	b29b      	uxth	r3, r3
 800772c:	81fb      	strh	r3, [r7, #14]

	 return tag_num;
 800772e:	89fb      	ldrh	r3, [r7, #14]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetAngleInfo(std::vector<uint16_t> temp_buf)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b086      	sub	sp, #24
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	6039      	str	r1, [r7, #0]
	 uint16_t angle = ((temp_buf)[11]);
 8007742:	210b      	movs	r1, #11
 8007744:	6838      	ldr	r0, [r7, #0]
 8007746:	f7fd fede 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800774a:	4603      	mov	r3, r0
 800774c:	881b      	ldrh	r3, [r3, #0]
 800774e:	81fb      	strh	r3, [r7, #14]

	 (angle) |= ((temp_buf)[10] << 7);
 8007750:	210a      	movs	r1, #10
 8007752:	6838      	ldr	r0, [r7, #0]
 8007754:	f7fd fed7 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007758:	4603      	mov	r3, r0
 800775a:	881b      	ldrh	r3, [r3, #0]
 800775c:	01db      	lsls	r3, r3, #7
 800775e:	89fa      	ldrh	r2, [r7, #14]
 8007760:	b212      	sxth	r2, r2
 8007762:	b21b      	sxth	r3, r3
 8007764:	4313      	orrs	r3, r2
 8007766:	b21b      	sxth	r3, r3
 8007768:	b29b      	uxth	r3, r3
 800776a:	81fb      	strh	r3, [r7, #14]

	 double angle_d = (double)angle/10;
 800776c:	89fb      	ldrh	r3, [r7, #14]
 800776e:	4618      	mov	r0, r3
 8007770:	f7f8 fee8 	bl	8000544 <__aeabi_ui2d>
 8007774:	f04f 0200 	mov.w	r2, #0
 8007778:	4b16      	ldr	r3, [pc, #88]	; (80077d4 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0x9c>)
 800777a:	f7f9 f887 	bl	800088c <__aeabi_ddiv>
 800777e:	4602      	mov	r2, r0
 8007780:	460b      	mov	r3, r1
 8007782:	e9c7 2304 	strd	r2, r3, [r7, #16]

	 if((angle_d)> 180.0f) angle_d-=360.0f; //makes x-axis zero centered
 8007786:	f04f 0200 	mov.w	r2, #0
 800778a:	4b13      	ldr	r3, [pc, #76]	; (80077d8 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa0>)
 800778c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007790:	f7f9 f9e2 	bl	8000b58 <__aeabi_dcmpgt>
 8007794:	4603      	mov	r3, r0
 8007796:	2b00      	cmp	r3, #0
 8007798:	d00a      	beq.n	80077b0 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0x78>
 800779a:	f04f 0200 	mov.w	r2, #0
 800779e:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE+0xa4>)
 80077a0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80077a4:	f7f8 fd90 	bl	80002c8 <__aeabi_dsub>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	e9c7 2304 	strd	r2, r3, [r7, #16]

	 return angle_d + this->angle_offset_;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	e9d3 0128 	ldrd	r0, r1, [r3, #160]	; 0xa0
 80077b6:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80077ba:	f7f8 fd87 	bl	80002cc <__adddf3>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	ec43 2b17 	vmov	d7, r2, r3
}
 80077c6:	eeb0 0a47 	vmov.f32	s0, s14
 80077ca:	eef0 0a67 	vmov.f32	s1, s15
 80077ce:	3718      	adds	r7, #24
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	40240000 	.word	0x40240000
 80077d8:	40668000 	.word	0x40668000
 80077dc:	40768000 	.word	0x40768000

080077e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
#endif

  template<typename _Tp, typename _Up>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__promote_2<_Tp, _Up>::__type
    pow(_Tp __x, _Up __y)
 80077e0:	b5b0      	push	{r4, r5, r7, lr}
 80077e2:	b082      	sub	sp, #8
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
 80077e8:	6039      	str	r1, [r7, #0]
    {
      typedef typename __gnu_cxx::__promote_2<_Tp, _Up>::__type __type;
      return pow(__type(__x), __type(__y));
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f7f8 feba 	bl	8000564 <__aeabi_i2d>
 80077f0:	4604      	mov	r4, r0
 80077f2:	460d      	mov	r5, r1
 80077f4:	6838      	ldr	r0, [r7, #0]
 80077f6:	f7f8 feb5 	bl	8000564 <__aeabi_i2d>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	ec43 2b11 	vmov	d1, r2, r3
 8007802:	ec45 4b10 	vmov	d0, r4, r5
 8007806:	f01b fbc7 	bl	8022f98 <pow>
 800780a:	eeb0 7a40 	vmov.f32	s14, s0
 800780e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8007812:	eeb0 0a47 	vmov.f32	s0, s14
 8007816:	eef0 0a67 	vmov.f32	s1, s15
 800781a:	3708      	adds	r7, #8
 800781c:	46bd      	mov	sp, r7
 800781e:	bdb0      	pop	{r4, r5, r7, pc}

08007820 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetXPosInfo(std::vector<uint16_t> temp_buf)
{
 8007820:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007824:	b086      	sub	sp, #24
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
 800782a:	6039      	str	r1, [r7, #0]
	int32_t XPosition_DATA=((temp_buf)[5]);
 800782c:	2105      	movs	r1, #5
 800782e:	6838      	ldr	r0, [r7, #0]
 8007830:	f7fd fe69 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007834:	4603      	mov	r3, r0
 8007836:	881b      	ldrh	r3, [r3, #0]
 8007838:	60fb      	str	r3, [r7, #12]

	(XPosition_DATA)|=((temp_buf)[4] << 7);
 800783a:	2104      	movs	r1, #4
 800783c:	6838      	ldr	r0, [r7, #0]
 800783e:	f7fd fe62 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007842:	4603      	mov	r3, r0
 8007844:	881b      	ldrh	r3, [r3, #0]
 8007846:	01da      	lsls	r2, r3, #7
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	4313      	orrs	r3, r2
 800784c:	60fb      	str	r3, [r7, #12]

	(XPosition_DATA)|=((temp_buf)[3] << 14);
 800784e:	2103      	movs	r1, #3
 8007850:	6838      	ldr	r0, [r7, #0]
 8007852:	f7fd fe58 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007856:	4603      	mov	r3, r0
 8007858:	881b      	ldrh	r3, [r3, #0]
 800785a:	039a      	lsls	r2, r3, #14
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4313      	orrs	r3, r2
 8007860:	60fb      	str	r3, [r7, #12]

	(XPosition_DATA)|=(((temp_buf)[2]&0x07) << 21);
 8007862:	2102      	movs	r1, #2
 8007864:	6838      	ldr	r0, [r7, #0]
 8007866:	f7fd fe4e 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 800786a:	4603      	mov	r3, r0
 800786c:	881b      	ldrh	r3, [r3, #0]
 800786e:	055b      	lsls	r3, r3, #21
 8007870:	f403 0260 	and.w	r2, r3, #14680064	; 0xe00000
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	4313      	orrs	r3, r2
 8007878:	60fb      	str	r3, [r7, #12]

	 //for making X-axis center to zero
	if(XPosition_DATA>=(100000))
 800787a:	68fb      	ldr	r3, [r7, #12]
 800787c:	4a4f      	ldr	r2, [pc, #316]	; (80079bc <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x19c>)
 800787e:	4293      	cmp	r3, r2
 8007880:	dd37      	ble.n	80078f2 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0xd2>
	{
		XPosition_DATA = (XPosition_DATA-((double)(pow(2,24)-1))-((this->x_offset_)*(this->unit_)));
 8007882:	68fb      	ldr	r3, [r7, #12]
 8007884:	4618      	mov	r0, r3
 8007886:	f7f8 fe6d 	bl	8000564 <__aeabi_i2d>
 800788a:	4604      	mov	r4, r0
 800788c:	460d      	mov	r5, r1
 800788e:	2118      	movs	r1, #24
 8007890:	2002      	movs	r0, #2
 8007892:	f7ff ffa5 	bl	80077e0 <_ZSt3powIiiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 8007896:	ec51 0b10 	vmov	r0, r1, d0
 800789a:	f04f 0200 	mov.w	r2, #0
 800789e:	4b48      	ldr	r3, [pc, #288]	; (80079c0 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x1a0>)
 80078a0:	f7f8 fd12 	bl	80002c8 <__aeabi_dsub>
 80078a4:	4602      	mov	r2, r0
 80078a6:	460b      	mov	r3, r1
 80078a8:	4620      	mov	r0, r4
 80078aa:	4629      	mov	r1, r5
 80078ac:	f7f8 fd0c 	bl	80002c8 <__aeabi_dsub>
 80078b0:	4602      	mov	r2, r0
 80078b2:	460b      	mov	r3, r1
 80078b4:	4690      	mov	r8, r2
 80078b6:	4699      	mov	r9, r3
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 80078c2:	4618      	mov	r0, r3
 80078c4:	f7f8 fe4e 	bl	8000564 <__aeabi_i2d>
 80078c8:	4602      	mov	r2, r0
 80078ca:	460b      	mov	r3, r1
 80078cc:	4620      	mov	r0, r4
 80078ce:	4629      	mov	r1, r5
 80078d0:	f7f8 feb2 	bl	8000638 <__aeabi_dmul>
 80078d4:	4602      	mov	r2, r0
 80078d6:	460b      	mov	r3, r1
 80078d8:	4640      	mov	r0, r8
 80078da:	4649      	mov	r1, r9
 80078dc:	f7f8 fcf4 	bl	80002c8 <__aeabi_dsub>
 80078e0:	4602      	mov	r2, r0
 80078e2:	460b      	mov	r3, r1
 80078e4:	4610      	mov	r0, r2
 80078e6:	4619      	mov	r1, r3
 80078e8:	f7f9 f956 	bl	8000b98 <__aeabi_d2iz>
 80078ec:	4603      	mov	r3, r0
 80078ee:	60fb      	str	r3, [r7, #12]
 80078f0:	e021      	b.n	8007936 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x116>
	}

	else
	{
		XPosition_DATA = (XPosition_DATA-((this->x_offset_)*(this->unit_)));
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	4618      	mov	r0, r3
 80078f6:	f7f8 fe35 	bl	8000564 <__aeabi_i2d>
 80078fa:	4680      	mov	r8, r0
 80078fc:	4689      	mov	r9, r1
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007908:	4618      	mov	r0, r3
 800790a:	f7f8 fe2b 	bl	8000564 <__aeabi_i2d>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4620      	mov	r0, r4
 8007914:	4629      	mov	r1, r5
 8007916:	f7f8 fe8f 	bl	8000638 <__aeabi_dmul>
 800791a:	4602      	mov	r2, r0
 800791c:	460b      	mov	r3, r1
 800791e:	4640      	mov	r0, r8
 8007920:	4649      	mov	r1, r9
 8007922:	f7f8 fcd1 	bl	80002c8 <__aeabi_dsub>
 8007926:	4602      	mov	r2, r0
 8007928:	460b      	mov	r3, r1
 800792a:	4610      	mov	r0, r2
 800792c:	4619      	mov	r1, r3
 800792e:	f7f9 f933 	bl	8000b98 <__aeabi_d2iz>
 8007932:	4603      	mov	r3, r0
 8007934:	60fb      	str	r3, [r7, #12]
	}

	double xpos = ((XPosition_DATA/(double)(this->unit_)));				//To make Units for Selected Mode
 8007936:	68fb      	ldr	r3, [r7, #12]
 8007938:	4618      	mov	r0, r3
 800793a:	f7f8 fe13 	bl	8000564 <__aeabi_i2d>
 800793e:	4604      	mov	r4, r0
 8007940:	460d      	mov	r5, r1
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007946:	4618      	mov	r0, r3
 8007948:	f7f8 fdfc 	bl	8000544 <__aeabi_ui2d>
 800794c:	4602      	mov	r2, r0
 800794e:	460b      	mov	r3, r1
 8007950:	4620      	mov	r0, r4
 8007952:	4629      	mov	r1, r5
 8007954:	f7f8 ff9a 	bl	800088c <__aeabi_ddiv>
 8007958:	4602      	mov	r2, r0
 800795a:	460b      	mov	r3, r1
 800795c:	e9c7 2304 	strd	r2, r3, [r7, #16]

	if(xpos >= this->pos_area_min_ && xpos <= this->pos_area_max_) return xpos;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8007966:	4618      	mov	r0, r3
 8007968:	f7f8 fdfc 	bl	8000564 <__aeabi_i2d>
 800796c:	4602      	mov	r2, r0
 800796e:	460b      	mov	r3, r1
 8007970:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007974:	f7f9 f8e6 	bl	8000b44 <__aeabi_dcmpge>
 8007978:	4603      	mov	r3, r0
 800797a:	2b00      	cmp	r3, #0
 800797c:	d011      	beq.n	80079a2 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x182>
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8007984:	4618      	mov	r0, r3
 8007986:	f7f8 fded 	bl	8000564 <__aeabi_i2d>
 800798a:	4602      	mov	r2, r0
 800798c:	460b      	mov	r3, r1
 800798e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8007992:	f7f9 f8cd 	bl	8000b30 <__aeabi_dcmple>
 8007996:	4603      	mov	r3, r0
 8007998:	2b00      	cmp	r3, #0
 800799a:	d002      	beq.n	80079a2 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x182>
 800799c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079a0:	e002      	b.n	80079a8 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE+0x188>
	else return this->xpos_;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
}
 80079a8:	ec43 2b17 	vmov	d7, r2, r3
 80079ac:	eeb0 0a47 	vmov.f32	s0, s14
 80079b0:	eef0 0a67 	vmov.f32	s1, s15
 80079b4:	3718      	adds	r7, #24
 80079b6:	46bd      	mov	sp, r7
 80079b8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80079bc:	0001869f 	.word	0x0001869f
 80079c0:	3ff00000 	.word	0x3ff00000

080079c4 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>:

double PGV100::ProcessGetYPosInfo(std::vector<uint16_t> temp_buf)
{
 80079c4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80079c8:	b086      	sub	sp, #24
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]
	int32_t YPosition_DATA = ((temp_buf)[7]);        //Y Buf
 80079d0:	2107      	movs	r1, #7
 80079d2:	6838      	ldr	r0, [r7, #0]
 80079d4:	f7fd fd97 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 80079d8:	4603      	mov	r3, r0
 80079da:	881b      	ldrh	r3, [r3, #0]
 80079dc:	60fb      	str	r3, [r7, #12]
	(YPosition_DATA) |= (((temp_buf)[6]) << 7);
 80079de:	2106      	movs	r1, #6
 80079e0:	6838      	ldr	r0, [r7, #0]
 80079e2:	f7fd fd90 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 80079e6:	4603      	mov	r3, r0
 80079e8:	881b      	ldrh	r3, [r3, #0]
 80079ea:	01da      	lsls	r2, r3, #7
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	4313      	orrs	r3, r2
 80079f0:	60fb      	str	r3, [r7, #12]

	//for making Y-axis center to zero
	if(YPosition_DATA>=(1000))
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80079f8:	db24      	blt.n	8007a44 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x80>
	{
		YPosition_DATA = (YPosition_DATA-(16383)) - ((this->y_offset_)*(this->unit_));
 80079fa:	68fa      	ldr	r2, [r7, #12]
 80079fc:	4b33      	ldr	r3, [pc, #204]	; (8007acc <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0x108>)
 80079fe:	4413      	add	r3, r2
 8007a00:	4618      	mov	r0, r3
 8007a02:	f7f8 fdaf 	bl	8000564 <__aeabi_i2d>
 8007a06:	4680      	mov	r8, r0
 8007a08:	4689      	mov	r9, r1
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007a14:	4618      	mov	r0, r3
 8007a16:	f7f8 fda5 	bl	8000564 <__aeabi_i2d>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 fe09 	bl	8000638 <__aeabi_dmul>
 8007a26:	4602      	mov	r2, r0
 8007a28:	460b      	mov	r3, r1
 8007a2a:	4640      	mov	r0, r8
 8007a2c:	4649      	mov	r1, r9
 8007a2e:	f7f8 fc4b 	bl	80002c8 <__aeabi_dsub>
 8007a32:	4602      	mov	r2, r0
 8007a34:	460b      	mov	r3, r1
 8007a36:	4610      	mov	r0, r2
 8007a38:	4619      	mov	r1, r3
 8007a3a:	f7f9 f8ad 	bl	8000b98 <__aeabi_d2iz>
 8007a3e:	4603      	mov	r3, r0
 8007a40:	60fb      	str	r3, [r7, #12]
 8007a42:	e021      	b.n	8007a88 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE+0xc4>
	}
	else
	{
		YPosition_DATA = (YPosition_DATA-(this->y_offset_*(this->unit_)));
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	4618      	mov	r0, r3
 8007a48:	f7f8 fd8c 	bl	8000564 <__aeabi_i2d>
 8007a4c:	4680      	mov	r8, r0
 8007a4e:	4689      	mov	r9, r1
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7f8 fd82 	bl	8000564 <__aeabi_i2d>
 8007a60:	4602      	mov	r2, r0
 8007a62:	460b      	mov	r3, r1
 8007a64:	4620      	mov	r0, r4
 8007a66:	4629      	mov	r1, r5
 8007a68:	f7f8 fde6 	bl	8000638 <__aeabi_dmul>
 8007a6c:	4602      	mov	r2, r0
 8007a6e:	460b      	mov	r3, r1
 8007a70:	4640      	mov	r0, r8
 8007a72:	4649      	mov	r1, r9
 8007a74:	f7f8 fc28 	bl	80002c8 <__aeabi_dsub>
 8007a78:	4602      	mov	r2, r0
 8007a7a:	460b      	mov	r3, r1
 8007a7c:	4610      	mov	r0, r2
 8007a7e:	4619      	mov	r1, r3
 8007a80:	f7f9 f88a 	bl	8000b98 <__aeabi_d2iz>
 8007a84:	4603      	mov	r3, r0
 8007a86:	60fb      	str	r3, [r7, #12]
	}

	double ypos = ((YPosition_DATA/(double)(this->unit_))); 	 	//To make Units for Selected Mode
 8007a88:	68fb      	ldr	r3, [r7, #12]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7f8 fd6a 	bl	8000564 <__aeabi_i2d>
 8007a90:	4604      	mov	r4, r0
 8007a92:	460d      	mov	r5, r1
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8007a98:	4618      	mov	r0, r3
 8007a9a:	f7f8 fd53 	bl	8000544 <__aeabi_ui2d>
 8007a9e:	4602      	mov	r2, r0
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	4620      	mov	r0, r4
 8007aa4:	4629      	mov	r1, r5
 8007aa6:	f7f8 fef1 	bl	800088c <__aeabi_ddiv>
 8007aaa:	4602      	mov	r2, r0
 8007aac:	460b      	mov	r3, r1
 8007aae:	e9c7 2304 	strd	r2, r3, [r7, #16]

	return ypos;
 8007ab2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007ab6:	ec43 2b17 	vmov	d7, r2, r3
}
 8007aba:	eeb0 0a47 	vmov.f32	s0, s14
 8007abe:	eef0 0a67 	vmov.f32	s1, s15
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007aca:	bf00      	nop
 8007acc:	ffffc001 	.word	0xffffc001

08007ad0 <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetDirectionInfo(std::vector<uint16_t> temp_buf)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
	return (uint16_t)(temp_buf)[1]&0x03;
 8007ada:	2101      	movs	r1, #1
 8007adc:	6838      	ldr	r0, [r7, #0]
 8007ade:	f7fd fd12 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	881b      	ldrh	r3, [r3, #0]
 8007ae6:	f003 0303 	and.w	r3, r3, #3
 8007aea:	b29b      	uxth	r3, r3
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	3708      	adds	r7, #8
 8007af0:	46bd      	mov	sp, r7
 8007af2:	bd80      	pop	{r7, pc}

08007af4 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>:

uint16_t PGV100::ProcessGetColorInfo(std::vector<uint16_t> temp_buf)
{
 8007af4:	b580      	push	{r7, lr}
 8007af6:	b082      	sub	sp, #8
 8007af8:	af00      	add	r7, sp, #0
 8007afa:	6078      	str	r0, [r7, #4]
 8007afc:	6039      	str	r1, [r7, #0]
	if((temp_buf)[0]&0x07 && (temp_buf)[1]&0x07) return (uint16_t)(temp_buf)[1]&0x07;
 8007afe:	2100      	movs	r1, #0
 8007b00:	6838      	ldr	r0, [r7, #0]
 8007b02:	f7fd fd00 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007b06:	4603      	mov	r3, r0
 8007b08:	881b      	ldrh	r3, [r3, #0]
 8007b0a:	f003 0307 	and.w	r3, r3, #7
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 8007b12:	2101      	movs	r1, #1
 8007b14:	6838      	ldr	r0, [r7, #0]
 8007b16:	f7fd fcf6 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007b1a:	4603      	mov	r3, r0
 8007b1c:	881b      	ldrh	r3, [r3, #0]
 8007b1e:	f003 0307 	and.w	r3, r3, #7
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d001      	beq.n	8007b2a <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x36>
 8007b26:	2301      	movs	r3, #1
 8007b28:	e000      	b.n	8007b2c <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x38>
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d009      	beq.n	8007b44 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x50>
 8007b30:	2101      	movs	r1, #1
 8007b32:	6838      	ldr	r0, [r7, #0]
 8007b34:	f7fd fce7 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007b38:	4603      	mov	r3, r0
 8007b3a:	881b      	ldrh	r3, [r3, #0]
 8007b3c:	f003 0307 	and.w	r3, r3, #7
 8007b40:	b29b      	uxth	r3, r3
 8007b42:	e002      	b.n	8007b4a <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE+0x56>

	return this->color_;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	f8b3 309c 	ldrh.w	r3, [r3, #156]	; 0x9c
}
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	3708      	adds	r7, #8
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}

08007b52 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>:

//---------------------------------------------------------------Processing data
//for Error checking
uint16_t PGV100::ProcessChecksumData(std::vector<uint16_t> temp_buf)
{
 8007b52:	b580      	push	{r7, lr}
 8007b54:	b08c      	sub	sp, #48	; 0x30
 8007b56:	af00      	add	r7, sp, #0
 8007b58:	6078      	str	r0, [r7, #4]
 8007b5a:	6039      	str	r1, [r7, #0]
	uint16_t temp = 0;
 8007b5c:	2300      	movs	r3, #0
 8007b5e:	857b      	strh	r3, [r7, #42]	; 0x2a
	uint16_t ChkSum_Data = 0;
 8007b60:	2300      	movs	r3, #0
 8007b62:	85fb      	strh	r3, [r7, #46]	; 0x2e
	uint16_t even_cnt[8]={0,};
 8007b64:	f107 0310 	add.w	r3, r7, #16
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]
 8007b6c:	605a      	str	r2, [r3, #4]
 8007b6e:	609a      	str	r2, [r3, #8]
 8007b70:	60da      	str	r2, [r3, #12]

	//1. the last byte is for checksum data
	temp_buf.pop_back();
 8007b72:	6838      	ldr	r0, [r7, #0]
 8007b74:	f7ff f831 	bl	8006bda <_ZNSt6vectorItSaItEE8pop_backEv>

	//2. check each bytes for calculating 'xor' value
	for(uint16_t i=0; i<8; i++)
 8007b78:	2300      	movs	r3, #0
 8007b7a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007b7c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007b7e:	2b07      	cmp	r3, #7
 8007b80:	d85a      	bhi.n	8007c38 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xe6>
	{
		for (auto& index : temp_buf)
 8007b82:	683b      	ldr	r3, [r7, #0]
 8007b84:	627b      	str	r3, [r7, #36]	; 0x24
 8007b86:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b88:	f7fe f8a1 	bl	8005cce <_ZNSt6vectorItSaItEE5beginEv>
 8007b8c:	4603      	mov	r3, r0
 8007b8e:	60fb      	str	r3, [r7, #12]
 8007b90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007b92:	f7fd fe2a 	bl	80057ea <_ZNSt6vectorItSaItEE3endEv>
 8007b96:	4603      	mov	r3, r0
 8007b98:	60bb      	str	r3, [r7, #8]
 8007b9a:	f107 0208 	add.w	r2, r7, #8
 8007b9e:	f107 030c 	add.w	r3, r7, #12
 8007ba2:	4611      	mov	r1, r2
 8007ba4:	4618      	mov	r0, r3
 8007ba6:	f7ff f82c 	bl	8006c02 <_ZN9__gnu_cxxneIPtSt6vectorItSaItEEEEbRKNS_17__normal_iteratorIT_T0_EESA_>
 8007baa:	4603      	mov	r3, r0
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d026      	beq.n	8007bfe <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xac>
 8007bb0:	f107 030c 	add.w	r3, r7, #12
 8007bb4:	4618      	mov	r0, r3
 8007bb6:	f7ff f84c 	bl	8006c52 <_ZNK9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEdeEv>
 8007bba:	6238      	str	r0, [r7, #32]
		{
			temp = index;
 8007bbc:	6a3b      	ldr	r3, [r7, #32]
 8007bbe:	881b      	ldrh	r3, [r3, #0]
 8007bc0:	857b      	strh	r3, [r7, #42]	; 0x2a

			if((temp>>i)&0x01) even_cnt[i]+=1;//8bit, even
 8007bc2:	8d7a      	ldrh	r2, [r7, #42]	; 0x2a
 8007bc4:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bc6:	fa42 f303 	asr.w	r3, r2, r3
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d00d      	beq.n	8007bee <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x9c>
 8007bd2:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007bd4:	005b      	lsls	r3, r3, #1
 8007bd6:	3330      	adds	r3, #48	; 0x30
 8007bd8:	443b      	add	r3, r7
 8007bda:	f833 2c20 	ldrh.w	r2, [r3, #-32]
 8007bde:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007be0:	3201      	adds	r2, #1
 8007be2:	b292      	uxth	r2, r2
 8007be4:	005b      	lsls	r3, r3, #1
 8007be6:	3330      	adds	r3, #48	; 0x30
 8007be8:	443b      	add	r3, r7
 8007bea:	f823 2c20 	strh.w	r2, [r3, #-32]

			temp = 0;
 8007bee:	2300      	movs	r3, #0
 8007bf0:	857b      	strh	r3, [r7, #42]	; 0x2a
		for (auto& index : temp_buf)
 8007bf2:	f107 030c 	add.w	r3, r7, #12
 8007bf6:	4618      	mov	r0, r3
 8007bf8:	f7ff f81b 	bl	8006c32 <_ZN9__gnu_cxx17__normal_iteratorIPtSt6vectorItSaItEEEppEv>
 8007bfc:	e7cd      	b.n	8007b9a <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x48>
		}
		if(even_cnt[i]!=0) ChkSum_Data |= (even_cnt[i]%2) * (1<<i);
 8007bfe:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c00:	005b      	lsls	r3, r3, #1
 8007c02:	3330      	adds	r3, #48	; 0x30
 8007c04:	443b      	add	r3, r7
 8007c06:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d010      	beq.n	8007c30 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0xde>
 8007c0e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c10:	005b      	lsls	r3, r3, #1
 8007c12:	3330      	adds	r3, #48	; 0x30
 8007c14:	443b      	add	r3, r7
 8007c16:	f833 3c20 	ldrh.w	r3, [r3, #-32]
 8007c1a:	f003 0201 	and.w	r2, r3, #1
 8007c1e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c20:	fa02 f303 	lsl.w	r3, r2, r3
 8007c24:	b21a      	sxth	r2, r3
 8007c26:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8007c2a:	4313      	orrs	r3, r2
 8007c2c:	b21b      	sxth	r3, r3
 8007c2e:	85fb      	strh	r3, [r7, #46]	; 0x2e
	for(uint16_t i=0; i<8; i++)
 8007c30:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8007c32:	3301      	adds	r3, #1
 8007c34:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8007c36:	e7a1      	b.n	8007b7c <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE+0x2a>
	}
	 return ChkSum_Data;
 8007c38:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
}
 8007c3a:	4618      	mov	r0, r3
 8007c3c:	3730      	adds	r7, #48	; 0x30
 8007c3e:	46bd      	mov	sp, r7
 8007c40:	bd80      	pop	{r7, pc}

08007c42 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>:

uint16_t PGV100::ProcessCheckErr(std::vector<uint16_t> temp_buf)
{
 8007c42:	b590      	push	{r4, r7, lr}
 8007c44:	b08b      	sub	sp, #44	; 0x2c
 8007c46:	af00      	add	r7, sp, #0
 8007c48:	6078      	str	r0, [r7, #4]
 8007c4a:	6039      	str	r1, [r7, #0]
	 // 0x1000 = internal error (Recommend to change sensors)
	 // 0x2000 = reserved
	 // 0x4000 = reserved
	 // 0x8000 = reserved
	 //--------------------------------------------------------------------
	 uint16_t state = 0x0000;
 8007c4c:	2300      	movs	r3, #0
 8007c4e:	84fb      	strh	r3, [r7, #38]	; 0x26

	//Check Comm. Error
	if(!comm_status_)
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
 8007c56:	f083 0301 	eor.w	r3, r3, #1
 8007c5a:	b2db      	uxtb	r3, r3
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d003      	beq.n	8007c68 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x26>
	{
		state = CommTimeout;
 8007c60:	2340      	movs	r3, #64	; 0x40
 8007c62:	84fb      	strh	r3, [r7, #38]	; 0x26
		return state;
 8007c64:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8007c66:	e074      	b.n	8007d52 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x110>
	}

	//If Comm Err is not, check others
	if((temp_buf.back()) == ProcessChecksumData(temp_buf))    //Checksum error pass or not(POS_BUF[20] <--- check sum buffer)
 8007c68:	6838      	ldr	r0, [r7, #0]
 8007c6a:	f7fe fffe 	bl	8006c6a <_ZNSt6vectorItSaItEE4backEv>
 8007c6e:	4603      	mov	r3, r0
 8007c70:	881c      	ldrh	r4, [r3, #0]
 8007c72:	f107 030c 	add.w	r3, r7, #12
 8007c76:	6839      	ldr	r1, [r7, #0]
 8007c78:	4618      	mov	r0, r3
 8007c7a:	f7ff f811 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007c7e:	f107 030c 	add.w	r3, r7, #12
 8007c82:	4619      	mov	r1, r3
 8007c84:	6878      	ldr	r0, [r7, #4]
 8007c86:	f7ff ff64 	bl	8007b52 <_ZN6PGV10019ProcessChecksumDataESt6vectorItSaItEE>
 8007c8a:	4603      	mov	r3, r0
 8007c8c:	429c      	cmp	r4, r3
 8007c8e:	bf0c      	ite	eq
 8007c90:	2301      	moveq	r3, #1
 8007c92:	2300      	movne	r3, #0
 8007c94:	b2dc      	uxtb	r4, r3
 8007c96:	f107 030c 	add.w	r3, r7, #12
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fd fbc5 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
 8007ca0:	2c00      	cmp	r4, #0
 8007ca2:	d053      	beq.n	8007d4c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10a>
	{
		if((temp_buf)[0] & 0x01)    //Err Occured
 8007ca4:	2100      	movs	r1, #0
 8007ca6:	6838      	ldr	r0, [r7, #0]
 8007ca8:	f7fd fc2d 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007cac:	4603      	mov	r3, r0
 8007cae:	881b      	ldrh	r3, [r3, #0]
 8007cb0:	f003 0301 	and.w	r3, r3, #1
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	bf14      	ite	ne
 8007cb8:	2301      	movne	r3, #1
 8007cba:	2300      	moveq	r3, #0
 8007cbc:	b2db      	uxtb	r3, r3
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d032      	beq.n	8007d28 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xe6>
		{
			uint16_t errcode =  ProcessGetERRInfo(temp_buf);
 8007cc2:	f107 0318 	add.w	r3, r7, #24
 8007cc6:	6839      	ldr	r1, [r7, #0]
 8007cc8:	4618      	mov	r0, r3
 8007cca:	f7fe ffe9 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007cce:	f107 0318 	add.w	r3, r7, #24
 8007cd2:	4619      	mov	r1, r3
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f7ff fca6 	bl	8007626 <_ZN6PGV10017ProcessGetERRInfoESt6vectorItSaItEE>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	84bb      	strh	r3, [r7, #36]	; 0x24
 8007cde:	f107 0318 	add.w	r3, r7, #24
 8007ce2:	4618      	mov	r0, r3
 8007ce4:	f7fd fba1 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
			if(errcode >= 1000) state = InternalFatal;        //Internal Fatal Error
 8007ce8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007cee:	d303      	bcc.n	8007cf8 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xb6>
 8007cf0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007cf4:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007cf6:	e02b      	b.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==1) state = ReadHeadTilted;     //read head tilted 180°.(pcv80 only)
 8007cf8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007cfa:	2b01      	cmp	r3, #1
 8007cfc:	d102      	bne.n	8007d04 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xc2>
 8007cfe:	2301      	movs	r3, #1
 8007d00:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d02:	e025      	b.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==2) state = CodeConditionErr;     //code condition error(code distance chk)
 8007d04:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d06:	2b02      	cmp	r3, #2
 8007d08:	d102      	bne.n	8007d10 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xce>
 8007d0a:	2302      	movs	r3, #2
 8007d0c:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d0e:	e01f      	b.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==5) state = NoDirectionDeclared;     //No clear position can be determined(�Ÿ�����)
 8007d10:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d12:	2b05      	cmp	r3, #5
 8007d14:	d102      	bne.n	8007d1c <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0xda>
 8007d16:	2304      	movs	r3, #4
 8007d18:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d1a:	e019      	b.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
			else if(errcode==6) state = NoColorDeclared;     // No Color decision(Set Color choice)
 8007d1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007d1e:	2b06      	cmp	r3, #6
 8007d20:	d116      	bne.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 8007d22:	2308      	movs	r3, #8
 8007d24:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d26:	e013      	b.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
		}
		else if((temp_buf)[0]&0x02) state = NoPosition;    //No Position Error
 8007d28:	2100      	movs	r1, #0
 8007d2a:	6838      	ldr	r0, [r7, #0]
 8007d2c:	f7fd fbeb 	bl	8005506 <_ZNSt6vectorItSaItEEixEj>
 8007d30:	4603      	mov	r3, r0
 8007d32:	881b      	ldrh	r3, [r3, #0]
 8007d34:	f003 0302 	and.w	r3, r3, #2
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	bf14      	ite	ne
 8007d3c:	2301      	movne	r3, #1
 8007d3e:	2300      	moveq	r3, #0
 8007d40:	b2db      	uxtb	r3, r3
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d004      	beq.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
 8007d46:	2320      	movs	r3, #32
 8007d48:	84fb      	strh	r3, [r7, #38]	; 0x26
 8007d4a:	e001      	b.n	8007d50 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE+0x10e>
	}
	else state = CheckSumErr;        //check sum error
 8007d4c:	2380      	movs	r3, #128	; 0x80
 8007d4e:	84fb      	strh	r3, [r7, #38]	; 0x26

	return state;
 8007d50:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 8007d52:	4618      	mov	r0, r3
 8007d54:	372c      	adds	r7, #44	; 0x2c
 8007d56:	46bd      	mov	sp, r7
 8007d58:	bd90      	pop	{r4, r7, pc}

08007d5a <_ZN6PGV10019ProcessGetColorInfoEv>:


void PGV100::ProcessGetColorInfo()
{
 8007d5a:	b580      	push	{r7, lr}
 8007d5c:	b088      	sub	sp, #32
 8007d5e:	af00      	add	r7, sp, #0
 8007d60:	6078      	str	r0, [r7, #4]
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007d68:	f107 0308 	add.w	r3, r7, #8
 8007d6c:	4611      	mov	r1, r2
 8007d6e:	4618      	mov	r0, r3
 8007d70:	f7fe ff96 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>

	this->color_ = ProcessGetColorInfo(temp_buf_);
 8007d74:	f107 0208 	add.w	r2, r7, #8
 8007d78:	f107 0314 	add.w	r3, r7, #20
 8007d7c:	4611      	mov	r1, r2
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f7fe ff8e 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007d84:	f107 0314 	add.w	r3, r7, #20
 8007d88:	4619      	mov	r1, r3
 8007d8a:	6878      	ldr	r0, [r7, #4]
 8007d8c:	f7ff feb2 	bl	8007af4 <_ZN6PGV10019ProcessGetColorInfoESt6vectorItSaItEE>
 8007d90:	4603      	mov	r3, r0
 8007d92:	461a      	mov	r2, r3
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f8a3 209c 	strh.w	r2, [r3, #156]	; 0x9c
 8007d9a:	f107 0314 	add.w	r3, r7, #20
 8007d9e:	4618      	mov	r0, r3
 8007da0:	f7fd fb43 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007da4:	f107 0308 	add.w	r3, r7, #8
 8007da8:	4618      	mov	r0, r3
 8007daa:	f7fd fb3e 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
}
 8007dae:	bf00      	nop
 8007db0:	3720      	adds	r7, #32
 8007db2:	46bd      	mov	sp, r7
 8007db4:	bd80      	pop	{r7, pc}

08007db6 <_ZN6PGV10017ProcessGetDirInfoEv>:


void PGV100::ProcessGetDirInfo()
{
 8007db6:	b580      	push	{r7, lr}
 8007db8:	b08c      	sub	sp, #48	; 0x30
 8007dba:	af00      	add	r7, sp, #0
 8007dbc:	6078      	str	r0, [r7, #4]
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007dc4:	f107 0308 	add.w	r3, r7, #8
 8007dc8:	4611      	mov	r1, r2
 8007dca:	4618      	mov	r0, r3
 8007dcc:	f7fe ff68 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
	uint16_t now_err = ProcessCheckErr(temp_buf_);
 8007dd0:	f107 0208 	add.w	r2, r7, #8
 8007dd4:	f107 0314 	add.w	r3, r7, #20
 8007dd8:	4611      	mov	r1, r2
 8007dda:	4618      	mov	r0, r3
 8007ddc:	f7fe ff60 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007de0:	f107 0314 	add.w	r3, r7, #20
 8007de4:	4619      	mov	r1, r3
 8007de6:	6878      	ldr	r0, [r7, #4]
 8007de8:	f7ff ff2b 	bl	8007c42 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>
 8007dec:	4603      	mov	r3, r0
 8007dee:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8007df0:	f107 0314 	add.w	r3, r7, #20
 8007df4:	4618      	mov	r0, r3
 8007df6:	f7fd fb18 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

	/*Data Process*/
	if(now_err == Good)
 8007dfa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d11f      	bne.n	8007e40 <_ZN6PGV10017ProcessGetDirInfoEv+0x8a>
	{
		this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8007e00:	f107 0208 	add.w	r2, r7, #8
 8007e04:	f107 0320 	add.w	r3, r7, #32
 8007e08:	4611      	mov	r1, r2
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fe ff48 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007e10:	f107 0320 	add.w	r3, r7, #32
 8007e14:	4619      	mov	r1, r3
 8007e16:	6878      	ldr	r0, [r7, #4]
 8007e18:	f7ff fe5a 	bl	8007ad0 <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	461a      	mov	r2, r3
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8007e26:	f107 0320 	add.w	r3, r7, #32
 8007e2a:	4618      	mov	r0, r3
 8007e2c:	f7fd fafd 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

		this->err_code_ = now_err;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e34:	841a      	strh	r2, [r3, #32]

		FilterCountReset();
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fd fa85 	bl	8005348 <_ZN12PNFPosSensor16FilterCountResetEv>

		return;
 8007e3e:	e015      	b.n	8007e6c <_ZN6PGV10017ProcessGetDirInfoEv+0xb6>
	}

	/*Error Process*/
	FilterCountUp();
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f7fd fa6a 	bl	800531c <_ZN12PNFPosSensor13FilterCountUpEv>

	if(IsInfoFiltered())
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4618      	mov	r0, r3
 8007e4c:	f7fd fa42 	bl	80052d4 <_ZN12PNFPosSensor14IsInfoFilteredEv>
 8007e50:	4603      	mov	r3, r0
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d009      	beq.n	8007e6a <_ZN6PGV10017ProcessGetDirInfoEv+0xb4>
	{
		ResetAllData();
 8007e56:	6878      	ldr	r0, [r7, #4]
 8007e58:	f7ff fadc 	bl	8007414 <_ZN6PGV10012ResetAllDataEv>

		FilterCountReset();
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4618      	mov	r0, r3
 8007e60:	f7fd fa72 	bl	8005348 <_ZN12PNFPosSensor16FilterCountResetEv>

		this->err_code_ = now_err;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8007e68:	841a      	strh	r2, [r3, #32]
	}

	return;			//Error Exit
 8007e6a:	bf00      	nop
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007e6c:	f107 0308 	add.w	r3, r7, #8
 8007e70:	4618      	mov	r0, r3
 8007e72:	f7fd fada 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
}
 8007e76:	3730      	adds	r7, #48	; 0x30
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <_ZN6PGV10017ProcessGetPosInfoEv>:

void PGV100::ProcessGetPosInfo()
{
 8007e7c:	b590      	push	{r4, r7, lr}
 8007e7e:	b09d      	sub	sp, #116	; 0x74
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	f103 024c 	add.w	r2, r3, #76	; 0x4c
 8007e8a:	f107 030c 	add.w	r3, r7, #12
 8007e8e:	4611      	mov	r1, r2
 8007e90:	4618      	mov	r0, r3
 8007e92:	f7fe ff05 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
	uint16_t now_err = ProcessCheckErr(temp_buf_);
 8007e96:	f107 020c 	add.w	r2, r7, #12
 8007e9a:	f107 0318 	add.w	r3, r7, #24
 8007e9e:	4611      	mov	r1, r2
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f7fe fefd 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007ea6:	f107 0318 	add.w	r3, r7, #24
 8007eaa:	4619      	mov	r1, r3
 8007eac:	6878      	ldr	r0, [r7, #4]
 8007eae:	f7ff fec8 	bl	8007c42 <_ZN6PGV10015ProcessCheckErrESt6vectorItSaItEE>
 8007eb2:	4603      	mov	r3, r0
 8007eb4:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
 8007eb8:	f107 0318 	add.w	r3, r7, #24
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	f7fd fab4 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

	/*Data Process*/
	if(now_err == Good)
 8007ec2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	f040 80a3 	bne.w	8008012 <_ZN6PGV10017ProcessGetPosInfoEv+0x196>
	{
		if(ProcessIsTagDetected(temp_buf_)) this->tagNo_ = ProcessGetTagNumber(temp_buf_);
 8007ecc:	f107 020c 	add.w	r2, r7, #12
 8007ed0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ed4:	4611      	mov	r1, r2
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	f7fe fee2 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007edc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ee0:	4619      	mov	r1, r3
 8007ee2:	6878      	ldr	r0, [r7, #4]
 8007ee4:	f7ff fbd0 	bl	8007688 <_ZN6PGV10020ProcessIsTagDetectedESt6vectorItSaItEE>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	461c      	mov	r4, r3
 8007eec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007ef0:	4618      	mov	r0, r3
 8007ef2:	f7fd fa9a 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
 8007ef6:	2c00      	cmp	r4, #0
 8007ef8:	d018      	beq.n	8007f2c <_ZN6PGV10017ProcessGetPosInfoEv+0xb0>
 8007efa:	f107 020c 	add.w	r2, r7, #12
 8007efe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f02:	4611      	mov	r1, r2
 8007f04:	4618      	mov	r0, r3
 8007f06:	f7fe fecb 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007f0a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f0e:	4619      	mov	r1, r3
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f7ff fbd4 	bl	80076be <_ZN6PGV10019ProcessGetTagNumberESt6vectorItSaItEE>
 8007f16:	4603      	mov	r3, r0
 8007f18:	461a      	mov	r2, r3
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98
 8007f20:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8007f24:	4618      	mov	r0, r3
 8007f26:	f7fd fa80 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
 8007f2a:	e003      	b.n	8007f34 <_ZN6PGV10017ProcessGetPosInfoEv+0xb8>

		else this->tagNo_ = 0;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	2200      	movs	r2, #0
 8007f30:	f8a3 2098 	strh.w	r2, [r3, #152]	; 0x98

		this->dir_ = ProcessGetDirectionInfo(temp_buf_);
 8007f34:	f107 020c 	add.w	r2, r7, #12
 8007f38:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f3c:	4611      	mov	r1, r2
 8007f3e:	4618      	mov	r0, r3
 8007f40:	f7fe feae 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007f44:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f48:	4619      	mov	r1, r3
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fdc0 	bl	8007ad0 <_ZN6PGV10023ProcessGetDirectionInfoESt6vectorItSaItEE>
 8007f50:	4603      	mov	r3, r0
 8007f52:	461a      	mov	r2, r3
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	f8a3 209a 	strh.w	r2, [r3, #154]	; 0x9a
 8007f5a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8007f5e:	4618      	mov	r0, r3
 8007f60:	f7fd fa63 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

		this->angle_ = ProcessGetAngleInfo(temp_buf_);			      	 //--- Get ANGLE INFO
 8007f64:	f107 020c 	add.w	r2, r7, #12
 8007f68:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f6c:	4611      	mov	r1, r2
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fe fe96 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007f74:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f78:	4619      	mov	r1, r3
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	f7ff fbdc 	bl	8007738 <_ZN6PGV10019ProcessGetAngleInfoESt6vectorItSaItEE>
 8007f80:	eeb0 7a40 	vmov.f32	s14, s0
 8007f84:	eef0 7a60 	vmov.f32	s15, s1
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	ed83 7b24 	vstr	d7, [r3, #144]	; 0x90
 8007f8e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8007f92:	4618      	mov	r0, r3
 8007f94:	f7fd fa49 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

		this->xpos_ = ProcessGetXPosInfo(temp_buf_); 	 				  //--- Get X POSITION
 8007f98:	f107 020c 	add.w	r2, r7, #12
 8007f9c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007fa0:	4611      	mov	r1, r2
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f7fe fe7c 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007fa8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007fac:	4619      	mov	r1, r3
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7ff fc36 	bl	8007820 <_ZN6PGV10018ProcessGetXPosInfoESt6vectorItSaItEE>
 8007fb4:	eeb0 7a40 	vmov.f32	s14, s0
 8007fb8:	eef0 7a60 	vmov.f32	s15, s1
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	ed83 7b04 	vstr	d7, [r3, #16]
 8007fc2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	f7fd fa2f 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

		this->ypos_ = ProcessGetYPosInfo(temp_buf_); 					  //--- Get Y POSITION
 8007fcc:	f107 020c 	add.w	r2, r7, #12
 8007fd0:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007fd4:	4611      	mov	r1, r2
 8007fd6:	4618      	mov	r0, r3
 8007fd8:	f7fe fe62 	bl	8006ca0 <_ZNSt6vectorItSaItEEC1ERKS1_>
 8007fdc:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f7ff fcee 	bl	80079c4 <_ZN6PGV10018ProcessGetYPosInfoESt6vectorItSaItEE>
 8007fe8:	eeb0 7a40 	vmov.f32	s14, s0
 8007fec:	eef0 7a60 	vmov.f32	s15, s1
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	ed83 7b06 	vstr	d7, [r3, #24]
 8007ff6:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8007ffa:	4618      	mov	r0, r3
 8007ffc:	f7fd fa15 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>

		this->err_code_ = now_err;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 8008006:	841a      	strh	r2, [r3, #32]

		FilterCountReset();
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4618      	mov	r0, r3
 800800c:	f7fd f99c 	bl	8005348 <_ZN12PNFPosSensor16FilterCountResetEv>

		return;
 8008010:	e016      	b.n	8008040 <_ZN6PGV10017ProcessGetPosInfoEv+0x1c4>
	}

	/*Error Process*/
	FilterCountUp();
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	4618      	mov	r0, r3
 8008016:	f7fd f981 	bl	800531c <_ZN12PNFPosSensor13FilterCountUpEv>

	if(IsInfoFiltered())
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	4618      	mov	r0, r3
 800801e:	f7fd f959 	bl	80052d4 <_ZN12PNFPosSensor14IsInfoFilteredEv>
 8008022:	4603      	mov	r3, r0
 8008024:	2b00      	cmp	r3, #0
 8008026:	d00a      	beq.n	800803e <_ZN6PGV10017ProcessGetPosInfoEv+0x1c2>
	{
		ResetAllData();
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f7ff f9f3 	bl	8007414 <_ZN6PGV10012ResetAllDataEv>

		FilterCountReset();
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	4618      	mov	r0, r3
 8008032:	f7fd f989 	bl	8005348 <_ZN12PNFPosSensor16FilterCountResetEv>

		this->err_code_ = now_err;
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b7 206e 	ldrh.w	r2, [r7, #110]	; 0x6e
 800803c:	841a      	strh	r2, [r3, #32]
	}

	return;			//Error Exit
 800803e:	bf00      	nop
	std::vector<uint16_t> temp_buf_ = this->pos_buf_;
 8008040:	f107 030c 	add.w	r3, r7, #12
 8008044:	4618      	mov	r0, r3
 8008046:	f7fd f9f0 	bl	800542a <_ZNSt6vectorItSaItEED1Ev>
}
 800804a:	3774      	adds	r7, #116	; 0x74
 800804c:	46bd      	mov	sp, r7
 800804e:	bd90      	pop	{r4, r7, pc}

08008050 <_ZN6PGV10019ProcessGetTotalInfoEv>:



//finally we got combined function
uint16_t PGV100::ProcessGetTotalInfo()
{
 8008050:	b580      	push	{r7, lr}
 8008052:	b082      	sub	sp, #8
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
	// Processing data
	switch(this->max_read_buf_size_)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800805e:	2b15      	cmp	r3, #21
 8008060:	d00e      	beq.n	8008080 <_ZN6PGV10019ProcessGetTotalInfoEv+0x30>
 8008062:	2b15      	cmp	r3, #21
 8008064:	dc10      	bgt.n	8008088 <_ZN6PGV10019ProcessGetTotalInfoEv+0x38>
 8008066:	2b02      	cmp	r3, #2
 8008068:	d002      	beq.n	8008070 <_ZN6PGV10019ProcessGetTotalInfoEv+0x20>
 800806a:	2b03      	cmp	r3, #3
 800806c:	d004      	beq.n	8008078 <_ZN6PGV10019ProcessGetTotalInfoEv+0x28>
 800806e:	e00b      	b.n	8008088 <_ZN6PGV10019ProcessGetTotalInfoEv+0x38>
	{
		case PGV100Color: ProcessGetColorInfo(); break;
 8008070:	6878      	ldr	r0, [r7, #4]
 8008072:	f7ff fe72 	bl	8007d5a <_ZN6PGV10019ProcessGetColorInfoEv>
 8008076:	e007      	b.n	8008088 <_ZN6PGV10019ProcessGetTotalInfoEv+0x38>

		case PGV100Dir: ProcessGetDirInfo(); break;
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f7ff fe9c 	bl	8007db6 <_ZN6PGV10017ProcessGetDirInfoEv>
 800807e:	e003      	b.n	8008088 <_ZN6PGV10019ProcessGetTotalInfoEv+0x38>

		case PGV100Pos:	ProcessGetPosInfo(); break;
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f7ff fefb 	bl	8007e7c <_ZN6PGV10017ProcessGetPosInfoEv>
 8008086:	bf00      	nop
	}
	return this->err_code_;
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	8c1b      	ldrh	r3, [r3, #32]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3708      	adds	r7, #8
 8008090:	46bd      	mov	sp, r7
 8008092:	bd80      	pop	{r7, pc}

08008094 <_ZN6PGV1009DriveInitEv>:


void PGV100::DriveInit()
{
 8008094:	b580      	push	{r7, lr}
 8008096:	b082      	sub	sp, #8
 8008098:	af00      	add	r7, sp, #0
 800809a:	6078      	str	r0, [r7, #4]
	QueueRepeatPosReqeust();
 800809c:	6878      	ldr	r0, [r7, #4]
 800809e:	f7ff faaf 	bl	8007600 <_ZN6PGV10021QueueRepeatPosReqeustEv>

	ReadBufferInit();
 80080a2:	6878      	ldr	r0, [r7, #4]
 80080a4:	f7ff fa46 	bl	8007534 <_ZN6PGV10014ReadBufferInitEv>
}
 80080a8:	bf00      	nop
 80080aa:	3708      	adds	r7, #8
 80080ac:	46bd      	mov	sp, r7
 80080ae:	bd80      	pop	{r7, pc}

080080b0 <_ZN6PGV1009DriveCommEv>:

void PGV100::DriveComm()
{
 80080b0:	b580      	push	{r7, lr}
 80080b2:	b082      	sub	sp, #8
 80080b4:	af00      	add	r7, sp, #0
 80080b6:	6078      	str	r0, [r7, #4]
	if(TransmitSendRequest()!=HAL_OK || TransmitReceiveResponse()!=HAL_OK)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	4618      	mov	r0, r3
 80080bc:	f7fd f824 	bl	8005108 <_ZN12PNFPosSensor19TransmitSendRequestEv>
 80080c0:	4603      	mov	r3, r0
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d106      	bne.n	80080d4 <_ZN6PGV1009DriveCommEv+0x24>
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	4618      	mov	r0, r3
 80080ca:	f7fd f865 	bl	8005198 <_ZN12PNFPosSensor23TransmitReceiveResponseEv>
 80080ce:	4603      	mov	r3, r0
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d001      	beq.n	80080d8 <_ZN6PGV1009DriveCommEv+0x28>
 80080d4:	2301      	movs	r3, #1
 80080d6:	e000      	b.n	80080da <_ZN6PGV1009DriveCommEv+0x2a>
 80080d8:	2300      	movs	r3, #0
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d004      	beq.n	80080e8 <_ZN6PGV1009DriveCommEv+0x38>
	{
		this->comm_status_ = false;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2200      	movs	r2, #0
 80080e2:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	}
	else
	{
		this->comm_status_ = true;
	}
}
 80080e6:	e003      	b.n	80080f0 <_ZN6PGV1009DriveCommEv+0x40>
		this->comm_status_ = true;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80080f0:	bf00      	nop
 80080f2:	3708      	adds	r7, #8
 80080f4:	46bd      	mov	sp, r7
 80080f6:	bd80      	pop	{r7, pc}

080080f8 <_ZN6PGV10013DriveAnalysisEv>:

void PGV100::DriveAnalysis()
{
 80080f8:	b580      	push	{r7, lr}
 80080fa:	b082      	sub	sp, #8
 80080fc:	af00      	add	r7, sp, #0
 80080fe:	6078      	str	r0, [r7, #4]
	ProcessGetTotalInfo();
 8008100:	6878      	ldr	r0, [r7, #4]
 8008102:	f7ff ffa5 	bl	8008050 <_ZN6PGV10019ProcessGetTotalInfoEv>

	QueueDeleteRequest();
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	4618      	mov	r0, r3
 800810a:	f7fd f8d2 	bl	80052b2 <_ZN12PNFPosSensor18QueueDeleteRequestEv>
}
 800810e:	bf00      	nop
 8008110:	3708      	adds	r7, #8
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}

08008116 <_ZN6PGV10014InitializationEv>:

//main functions
int PGV100::Initialization()
{
 8008116:	b580      	push	{r7, lr}
 8008118:	b082      	sub	sp, #8
 800811a:	af00      	add	r7, sp, #0
 800811c:	6078      	str	r0, [r7, #4]
	RegisterRequestCmd();
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f7ff f99b 	bl	800745a <_ZN6PGV10018RegisterRequestCmdEv>

	RegisterDefaultParam();
 8008124:	6878      	ldr	r0, [r7, #4]
 8008126:	f7ff f9f6 	bl	8007516 <_ZN6PGV10020RegisterDefaultParamEv>

	Drive();
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	4618      	mov	r0, r3
 800812e:	f7fd f929 	bl	8005384 <_ZN12PNFPosSensor5DriveEv>

	return this->comm_status_;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f893 3022 	ldrb.w	r3, [r3, #34]	; 0x22
}
 8008138:	4618      	mov	r0, r3
 800813a:	3708      	adds	r7, #8
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}

08008140 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
 8008148:	6878      	ldr	r0, [r7, #4]
 800814a:	f000 fbc5 	bl	80088d8 <_ZNSaIP12CommonSensorED1Ev>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4618      	mov	r0, r3
 8008152:	3708      	adds	r7, #8
 8008154:	46bd      	mov	sp, r7
 8008156:	bd80      	pop	{r7, pc}

08008158 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>:
      _Vector_base() = default;
 8008158:	b580      	push	{r7, lr}
 800815a:	b082      	sub	sp, #8
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4618      	mov	r0, r3
 8008164:	f000 fba8 	bl	80088b8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4618      	mov	r0, r3
 800816c:	3708      	adds	r7, #8
 800816e:	46bd      	mov	sp, r7
 8008170:	bd80      	pop	{r7, pc}

08008172 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>:
      vector() = default;
 8008172:	b580      	push	{r7, lr}
 8008174:	b082      	sub	sp, #8
 8008176:	af00      	add	r7, sp, #0
 8008178:	6078      	str	r0, [r7, #4]
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4618      	mov	r0, r3
 800817e:	f7ff ffeb 	bl	8008158 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EEC1Ev>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4618      	mov	r0, r3
 8008186:	3708      	adds	r7, #8
 8008188:	46bd      	mov	sp, r7
 800818a:	bd80      	pop	{r7, pc}

0800818c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
 8008194:	6878      	ldr	r0, [r7, #4]
 8008196:	f000 fbef 	bl	8008978 <_ZNSaIP6PGV100ED1Ev>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4618      	mov	r0, r3
 800819e:	3708      	adds	r7, #8
 80081a0:	46bd      	mov	sp, r7
 80081a2:	bd80      	pop	{r7, pc}

080081a4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>:
      _Vector_base() = default;
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
 80081aa:	6078      	str	r0, [r7, #4]
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	4618      	mov	r0, r3
 80081b0:	f000 fbd2 	bl	8008958 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	4618      	mov	r0, r3
 80081b8:	3708      	adds	r7, #8
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}

080081be <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>:
      vector() = default;
 80081be:	b580      	push	{r7, lr}
 80081c0:	b082      	sub	sp, #8
 80081c2:	af00      	add	r7, sp, #0
 80081c4:	6078      	str	r0, [r7, #4]
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff ffeb 	bl	80081a4 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EEC1Ev>
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	4618      	mov	r0, r3
 80081d2:	3708      	adds	r7, #8
 80081d4:	46bd      	mov	sp, r7
 80081d6:	bd80      	pop	{r7, pc}

080081d8 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 80081d8:	b580      	push	{r7, lr}
 80081da:	b082      	sub	sp, #8
 80081dc:	af00      	add	r7, sp, #0
 80081de:	6078      	str	r0, [r7, #4]
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 fc19 	bl	8008a18 <_ZNSaIP5PCV80ED1Ev>
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	4618      	mov	r0, r3
 80081ea:	3708      	adds	r7, #8
 80081ec:	46bd      	mov	sp, r7
 80081ee:	bd80      	pop	{r7, pc}

080081f0 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EEC1Ev>:
      _Vector_base() = default;
 80081f0:	b580      	push	{r7, lr}
 80081f2:	b082      	sub	sp, #8
 80081f4:	af00      	add	r7, sp, #0
 80081f6:	6078      	str	r0, [r7, #4]
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4618      	mov	r0, r3
 80081fc:	f000 fbfc 	bl	80089f8 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implC1Ev>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4618      	mov	r0, r3
 8008204:	3708      	adds	r7, #8
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <_ZNSt6vectorIP5PCV80SaIS1_EEC1Ev>:
      vector() = default;
 800820a:	b580      	push	{r7, lr}
 800820c:	b082      	sub	sp, #8
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	687b      	ldr	r3, [r7, #4]
 8008214:	4618      	mov	r0, r3
 8008216:	f7ff ffeb 	bl	80081f0 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EEC1Ev>
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	4618      	mov	r0, r3
 800821e:	3708      	adds	r7, #8
 8008220:	46bd      	mov	sp, r7
 8008222:	bd80      	pop	{r7, pc}

08008224 <_ZN13SensorManagerC1Ev>:
bool SensorManager::bDestroyed_ = false;
SensorManager* SensorManager::pIns_ = NULL;


//--------------------------------------------------------------------------------------------------Single instance:
SensorManager::SensorManager() {};
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	4618      	mov	r0, r3
 8008230:	f7ff ff9f 	bl	8008172 <_ZNSt6vectorIP12CommonSensorSaIS1_EEC1Ev>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	330c      	adds	r3, #12
 8008238:	4618      	mov	r0, r3
 800823a:	f7ff ffc0 	bl	80081be <_ZNSt6vectorIP6PGV100SaIS1_EEC1Ev>
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	3318      	adds	r3, #24
 8008242:	4618      	mov	r0, r3
 8008244:	f7ff ffe1 	bl	800820a <_ZNSt6vectorIP5PCV80SaIS1_EEC1Ev>
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	4618      	mov	r0, r3
 800824c:	3708      	adds	r7, #8
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
	...

08008254 <_ZN13SensorManagerD1Ev>:
SensorManager::SensorManager(const SensorManager& other){};
SensorManager& SensorManager::operator=(const SensorManager& ref) {return *this;};
SensorManager::~SensorManager()
 8008254:	b580      	push	{r7, lr}
 8008256:	b082      	sub	sp, #8
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
{
	DeleteAllSensor();
 800825c:	6878      	ldr	r0, [r7, #4]
 800825e:	f000 f887 	bl	8008370 <_ZN13SensorManager15DeleteAllSensorEv>
	bDestroyed_ = true;
 8008262:	4b0b      	ldr	r3, [pc, #44]	; (8008290 <_ZN13SensorManagerD1Ev+0x3c>)
 8008264:	2201      	movs	r2, #1
 8008266:	701a      	strb	r2, [r3, #0]
SensorManager::~SensorManager()
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3318      	adds	r3, #24
 800826c:	4618      	mov	r0, r3
 800826e:	f000 fbf8 	bl	8008a62 <_ZNSt6vectorIP5PCV80SaIS1_EED1Ev>
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	330c      	adds	r3, #12
 8008276:	4618      	mov	r0, r3
 8008278:	f000 fba3 	bl	80089c2 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4618      	mov	r0, r3
 8008280:	f000 fb4f 	bl	8008922 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>
}
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4618      	mov	r0, r3
 8008288:	3708      	adds	r7, #8
 800828a:	46bd      	mov	sp, r7
 800828c:	bd80      	pop	{r7, pc}
 800828e:	bf00      	nop
 8008290:	20000870 	.word	0x20000870

08008294 <__tcf_0>:

void SensorManager::ManagerCreate()
{
	static SensorManager ins;
 8008294:	b580      	push	{r7, lr}
 8008296:	af00      	add	r7, sp, #0
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <__tcf_0+0xc>)
 800829a:	f7ff ffdb 	bl	8008254 <_ZN13SensorManagerD1Ev>
 800829e:	bd80      	pop	{r7, pc}
 80082a0:	20000878 	.word	0x20000878

080082a4 <_ZN13SensorManager13ManagerCreateEv>:
{
 80082a4:	b580      	push	{r7, lr}
 80082a6:	af00      	add	r7, sp, #0
	static SensorManager ins;
 80082a8:	4b13      	ldr	r3, [pc, #76]	; (80082f8 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 80082aa:	781b      	ldrb	r3, [r3, #0]
 80082ac:	f3bf 8f5b 	dmb	ish
 80082b0:	b2db      	uxtb	r3, r3
 80082b2:	f003 0301 	and.w	r3, r3, #1
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	bf0c      	ite	eq
 80082ba:	2301      	moveq	r3, #1
 80082bc:	2300      	movne	r3, #0
 80082be:	b2db      	uxtb	r3, r3
 80082c0:	2b00      	cmp	r3, #0
 80082c2:	d013      	beq.n	80082ec <_ZN13SensorManager13ManagerCreateEv+0x48>
 80082c4:	480c      	ldr	r0, [pc, #48]	; (80082f8 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 80082c6:	f01a fd6f 	bl	8022da8 <__cxa_guard_acquire>
 80082ca:	4603      	mov	r3, r0
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	bf14      	ite	ne
 80082d0:	2301      	movne	r3, #1
 80082d2:	2300      	moveq	r3, #0
 80082d4:	b2db      	uxtb	r3, r3
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	d008      	beq.n	80082ec <_ZN13SensorManager13ManagerCreateEv+0x48>
 80082da:	4808      	ldr	r0, [pc, #32]	; (80082fc <_ZN13SensorManager13ManagerCreateEv+0x58>)
 80082dc:	f7ff ffa2 	bl	8008224 <_ZN13SensorManagerC1Ev>
 80082e0:	4807      	ldr	r0, [pc, #28]	; (8008300 <_ZN13SensorManager13ManagerCreateEv+0x5c>)
 80082e2:	f01b fd7a 	bl	8023dda <atexit>
 80082e6:	4804      	ldr	r0, [pc, #16]	; (80082f8 <_ZN13SensorManager13ManagerCreateEv+0x54>)
 80082e8:	f01a fd6a 	bl	8022dc0 <__cxa_guard_release>
	pIns_ = &ins;
 80082ec:	4b05      	ldr	r3, [pc, #20]	; (8008304 <_ZN13SensorManager13ManagerCreateEv+0x60>)
 80082ee:	4a03      	ldr	r2, [pc, #12]	; (80082fc <_ZN13SensorManager13ManagerCreateEv+0x58>)
 80082f0:	601a      	str	r2, [r3, #0]
}
 80082f2:	bf00      	nop
 80082f4:	bd80      	pop	{r7, pc}
 80082f6:	bf00      	nop
 80082f8:	200008a0 	.word	0x200008a0
 80082fc:	20000878 	.word	0x20000878
 8008300:	08008295 	.word	0x08008295
 8008304:	20000874 	.word	0x20000874

08008308 <_ZN13SensorManager13ManagerDeleteEv>:

void SensorManager::ManagerDelete()
{
 8008308:	b580      	push	{r7, lr}
 800830a:	af00      	add	r7, sp, #0
	pIns_->~SensorManager();
 800830c:	4b03      	ldr	r3, [pc, #12]	; (800831c <_ZN13SensorManager13ManagerDeleteEv+0x14>)
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	4618      	mov	r0, r3
 8008312:	f7ff ff9f 	bl	8008254 <_ZN13SensorManagerD1Ev>
}
 8008316:	bf00      	nop
 8008318:	bd80      	pop	{r7, pc}
 800831a:	bf00      	nop
 800831c:	20000874 	.word	0x20000874

08008320 <_ZN13SensorManager11GetInstanceEv>:

SensorManager& SensorManager::GetInstance()
{
 8008320:	b598      	push	{r3, r4, r7, lr}
 8008322:	af00      	add	r7, sp, #0
	if(bDestroyed_)
 8008324:	4b0f      	ldr	r3, [pc, #60]	; (8008364 <_ZN13SensorManager11GetInstanceEv+0x44>)
 8008326:	781b      	ldrb	r3, [r3, #0]
 8008328:	2b00      	cmp	r3, #0
 800832a:	d010      	beq.n	800834e <_ZN13SensorManager11GetInstanceEv+0x2e>
	{
		pIns_ = new SensorManager();
 800832c:	2028      	movs	r0, #40	; 0x28
 800832e:	f01a fd4a 	bl	8022dc6 <_Znwj>
 8008332:	4603      	mov	r3, r0
 8008334:	461c      	mov	r4, r3
 8008336:	4620      	mov	r0, r4
 8008338:	f7ff ff74 	bl	8008224 <_ZN13SensorManagerC1Ev>
 800833c:	4b0a      	ldr	r3, [pc, #40]	; (8008368 <_ZN13SensorManager11GetInstanceEv+0x48>)
 800833e:	601c      	str	r4, [r3, #0]
		// new(pIns) =  SensorManager;
		atexit(ManagerDelete);
 8008340:	480a      	ldr	r0, [pc, #40]	; (800836c <_ZN13SensorManager11GetInstanceEv+0x4c>)
 8008342:	f01b fd4a 	bl	8023dda <atexit>
		bDestroyed_ = false;
 8008346:	4b07      	ldr	r3, [pc, #28]	; (8008364 <_ZN13SensorManager11GetInstanceEv+0x44>)
 8008348:	2200      	movs	r2, #0
 800834a:	701a      	strb	r2, [r3, #0]
 800834c:	e005      	b.n	800835a <_ZN13SensorManager11GetInstanceEv+0x3a>
	}
	else if (pIns_ == NULL)
 800834e:	4b06      	ldr	r3, [pc, #24]	; (8008368 <_ZN13SensorManager11GetInstanceEv+0x48>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d101      	bne.n	800835a <_ZN13SensorManager11GetInstanceEv+0x3a>
	{
		ManagerCreate();
 8008356:	f7ff ffa5 	bl	80082a4 <_ZN13SensorManager13ManagerCreateEv>
	}
	 return *pIns_;
 800835a:	4b03      	ldr	r3, [pc, #12]	; (8008368 <_ZN13SensorManager11GetInstanceEv+0x48>)
 800835c:	681b      	ldr	r3, [r3, #0]
}
 800835e:	4618      	mov	r0, r3
 8008360:	bd98      	pop	{r3, r4, r7, pc}
 8008362:	bf00      	nop
 8008364:	20000870 	.word	0x20000870
 8008368:	20000874 	.word	0x20000874
 800836c:	08008309 	.word	0x08008309

08008370 <_ZN13SensorManager15DeleteAllSensorEv>:


void SensorManager::DeleteAllSensor()
{
 8008370:	b590      	push	{r4, r7, lr}
 8008372:	b08b      	sub	sp, #44	; 0x2c
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
	for (auto& index : common_sensors_) delete (index);
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	627b      	str	r3, [r7, #36]	; 0x24
 800837c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800837e:	f000 fb8b 	bl	8008a98 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8008382:	4603      	mov	r3, r0
 8008384:	617b      	str	r3, [r7, #20]
 8008386:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008388:	f000 fb96 	bl	8008ab8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 800838c:	4603      	mov	r3, r0
 800838e:	613b      	str	r3, [r7, #16]
 8008390:	f107 0210 	add.w	r2, r7, #16
 8008394:	f107 0314 	add.w	r3, r7, #20
 8008398:	4611      	mov	r1, r2
 800839a:	4618      	mov	r0, r3
 800839c:	f000 fb9d 	bl	8008ada <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80083a0:	4603      	mov	r3, r0
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d016      	beq.n	80083d4 <_ZN13SensorManager15DeleteAllSensorEv+0x64>
 80083a6:	f107 0314 	add.w	r3, r7, #20
 80083aa:	4618      	mov	r0, r3
 80083ac:	f000 fbbd 	bl	8008b2a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 80083b0:	61b8      	str	r0, [r7, #24]
 80083b2:	69bb      	ldr	r3, [r7, #24]
 80083b4:	681c      	ldr	r4, [r3, #0]
 80083b6:	2c00      	cmp	r4, #0
 80083b8:	d006      	beq.n	80083c8 <_ZN13SensorManager15DeleteAllSensorEv+0x58>
 80083ba:	4620      	mov	r0, r4
 80083bc:	f7f8 fed9 	bl	8001172 <_ZN12CommonSensorD1Ev>
 80083c0:	2110      	movs	r1, #16
 80083c2:	4620      	mov	r0, r4
 80083c4:	f01a fcee 	bl	8022da4 <_ZdlPvj>
 80083c8:	f107 0314 	add.w	r3, r7, #20
 80083cc:	4618      	mov	r0, r3
 80083ce:	f000 fb9c 	bl	8008b0a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 80083d2:	e7dd      	b.n	8008390 <_ZN13SensorManager15DeleteAllSensorEv+0x20>
	common_sensors_.clear();
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	4618      	mov	r0, r3
 80083d8:	f000 fbb3 	bl	8008b42 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>
	for (auto& index : pgv100_) delete (index);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	330c      	adds	r3, #12
 80083e0:	623b      	str	r3, [r7, #32]
 80083e2:	6a38      	ldr	r0, [r7, #32]
 80083e4:	f000 fbbb 	bl	8008b5e <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 80083e8:	4603      	mov	r3, r0
 80083ea:	60fb      	str	r3, [r7, #12]
 80083ec:	6a38      	ldr	r0, [r7, #32]
 80083ee:	f000 fbc6 	bl	8008b7e <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 80083f2:	4603      	mov	r3, r0
 80083f4:	60bb      	str	r3, [r7, #8]
 80083f6:	f107 0208 	add.w	r2, r7, #8
 80083fa:	f107 030c 	add.w	r3, r7, #12
 80083fe:	4611      	mov	r1, r2
 8008400:	4618      	mov	r0, r3
 8008402:	f000 fbcd 	bl	8008ba0 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008406:	4603      	mov	r3, r0
 8008408:	2b00      	cmp	r3, #0
 800840a:	d014      	beq.n	8008436 <_ZN13SensorManager15DeleteAllSensorEv+0xc6>
 800840c:	f107 030c 	add.w	r3, r7, #12
 8008410:	4618      	mov	r0, r3
 8008412:	f000 fbed 	bl	8008bf0 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8008416:	61f8      	str	r0, [r7, #28]
 8008418:	69fb      	ldr	r3, [r7, #28]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	2b00      	cmp	r3, #0
 800841e:	d004      	beq.n	800842a <_ZN13SensorManager15DeleteAllSensorEv+0xba>
 8008420:	681a      	ldr	r2, [r3, #0]
 8008422:	3204      	adds	r2, #4
 8008424:	6812      	ldr	r2, [r2, #0]
 8008426:	4618      	mov	r0, r3
 8008428:	4790      	blx	r2
 800842a:	f107 030c 	add.w	r3, r7, #12
 800842e:	4618      	mov	r0, r3
 8008430:	f000 fbce 	bl	8008bd0 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 8008434:	e7df      	b.n	80083f6 <_ZN13SensorManager15DeleteAllSensorEv+0x86>
	pgv100_.clear();
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	330c      	adds	r3, #12
 800843a:	4618      	mov	r0, r3
 800843c:	f000 fbe4 	bl	8008c08 <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>
}
 8008440:	bf00      	nop
 8008442:	372c      	adds	r7, #44	; 0x2c
 8008444:	46bd      	mov	sp, r7
 8008446:	bd90      	pop	{r4, r7, pc}

08008448 <_ZN13SensorManager20CommonSensorRegisterEv>:


//---------------------------------------------------------------------sensor function
//common sensor
void SensorManager::CommonSensorRegister()
{
 8008448:	b5b0      	push	{r4, r5, r7, lr}
 800844a:	b090      	sub	sp, #64	; 0x40
 800844c:	af02      	add	r7, sp, #8
 800844e:	6078      	str	r0, [r7, #4]
	if(common_sensors_.empty())
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4618      	mov	r0, r3
 8008454:	f000 fbe6 	bl	8008c24 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>
 8008458:	4603      	mov	r3, r0
 800845a:	2b00      	cmp	r3, #0
 800845c:	f000 8106 	beq.w	800866c <_ZN13SensorManager20CommonSensorRegisterEv+0x224>
	{
		//J6 -> PG9 ~ J11 -> PG15	, J12 -> PE0 , J16 -> PE4
		common_sensors_.emplace_back(new CommonSensor(AORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_9));
 8008460:	687d      	ldr	r5, [r7, #4]
 8008462:	2010      	movs	r0, #16
 8008464:	f01a fcaf 	bl	8022dc6 <_Znwj>
 8008468:	4603      	mov	r3, r0
 800846a:	461c      	mov	r4, r3
 800846c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008470:	9301      	str	r3, [sp, #4]
 8008472:	4b80      	ldr	r3, [pc, #512]	; (8008674 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008474:	9300      	str	r3, [sp, #0]
 8008476:	2305      	movs	r3, #5
 8008478:	2201      	movs	r2, #1
 800847a:	2101      	movs	r1, #1
 800847c:	4620      	mov	r0, r4
 800847e:	f7f8 fe49 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008482:	60fc      	str	r4, [r7, #12]
 8008484:	f107 030c 	add.w	r3, r7, #12
 8008488:	4619      	mov	r1, r3
 800848a:	4628      	mov	r0, r5
 800848c:	f000 fbe5 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(AORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_10));
 8008490:	687d      	ldr	r5, [r7, #4]
 8008492:	2010      	movs	r0, #16
 8008494:	f01a fc97 	bl	8022dc6 <_Znwj>
 8008498:	4603      	mov	r3, r0
 800849a:	461c      	mov	r4, r3
 800849c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80084a0:	9301      	str	r3, [sp, #4]
 80084a2:	4b74      	ldr	r3, [pc, #464]	; (8008674 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80084a4:	9300      	str	r3, [sp, #0]
 80084a6:	2305      	movs	r3, #5
 80084a8:	2201      	movs	r2, #1
 80084aa:	2102      	movs	r1, #2
 80084ac:	4620      	mov	r0, r4
 80084ae:	f7f8 fe31 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80084b2:	613c      	str	r4, [r7, #16]
 80084b4:	f107 0310 	add.w	r3, r7, #16
 80084b8:	4619      	mov	r1, r3
 80084ba:	4628      	mov	r0, r5
 80084bc:	f000 fbcd 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_12));
 80084c0:	687d      	ldr	r5, [r7, #4]
 80084c2:	2010      	movs	r0, #16
 80084c4:	f01a fc7f 	bl	8022dc6 <_Znwj>
 80084c8:	4603      	mov	r3, r0
 80084ca:	461c      	mov	r4, r3
 80084cc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80084d0:	9301      	str	r3, [sp, #4]
 80084d2:	4b68      	ldr	r3, [pc, #416]	; (8008674 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 80084d4:	9300      	str	r3, [sp, #0]
 80084d6:	2305      	movs	r3, #5
 80084d8:	2201      	movs	r2, #1
 80084da:	2104      	movs	r1, #4
 80084dc:	4620      	mov	r0, r4
 80084de:	f7f8 fe19 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80084e2:	617c      	str	r4, [r7, #20]
 80084e4:	f107 0314 	add.w	r3, r7, #20
 80084e8:	4619      	mov	r1, r3
 80084ea:	4628      	mov	r0, r5
 80084ec:	f000 fbb5 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(WORG_R, ActiveH, Filter_5, GPIOG, GPIO_PIN_13));
 80084f0:	687d      	ldr	r5, [r7, #4]
 80084f2:	2010      	movs	r0, #16
 80084f4:	f01a fc67 	bl	8022dc6 <_Znwj>
 80084f8:	4603      	mov	r3, r0
 80084fa:	461c      	mov	r4, r3
 80084fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008500:	9301      	str	r3, [sp, #4]
 8008502:	4b5c      	ldr	r3, [pc, #368]	; (8008674 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008504:	9300      	str	r3, [sp, #0]
 8008506:	2305      	movs	r3, #5
 8008508:	2201      	movs	r2, #1
 800850a:	2108      	movs	r1, #8
 800850c:	4620      	mov	r0, r4
 800850e:	f7f8 fe01 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008512:	61bc      	str	r4, [r7, #24]
 8008514:	f107 0318 	add.w	r3, r7, #24
 8008518:	4619      	mov	r1, r3
 800851a:	4628      	mov	r0, r5
 800851c:	f000 fb9d 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_L, ActiveH, Filter_5, GPIOG, GPIO_PIN_14));
 8008520:	687d      	ldr	r5, [r7, #4]
 8008522:	2010      	movs	r0, #16
 8008524:	f01a fc4f 	bl	8022dc6 <_Znwj>
 8008528:	4603      	mov	r3, r0
 800852a:	461c      	mov	r4, r3
 800852c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8008530:	9301      	str	r3, [sp, #4]
 8008532:	4b50      	ldr	r3, [pc, #320]	; (8008674 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008534:	9300      	str	r3, [sp, #0]
 8008536:	2305      	movs	r3, #5
 8008538:	2201      	movs	r2, #1
 800853a:	2110      	movs	r1, #16
 800853c:	4620      	mov	r0, r4
 800853e:	f7f8 fde9 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008542:	61fc      	str	r4, [r7, #28]
 8008544:	f107 031c 	add.w	r3, r7, #28
 8008548:	4619      	mov	r1, r3
 800854a:	4628      	mov	r0, r5
 800854c:	f000 fb85 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(TORG_C, ActiveH, Filter_5, GPIOG, GPIO_PIN_15));
 8008550:	687d      	ldr	r5, [r7, #4]
 8008552:	2010      	movs	r0, #16
 8008554:	f01a fc37 	bl	8022dc6 <_Znwj>
 8008558:	4603      	mov	r3, r0
 800855a:	461c      	mov	r4, r3
 800855c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008560:	9301      	str	r3, [sp, #4]
 8008562:	4b44      	ldr	r3, [pc, #272]	; (8008674 <_ZN13SensorManager20CommonSensorRegisterEv+0x22c>)
 8008564:	9300      	str	r3, [sp, #0]
 8008566:	2305      	movs	r3, #5
 8008568:	2201      	movs	r2, #1
 800856a:	2120      	movs	r1, #32
 800856c:	4620      	mov	r0, r4
 800856e:	f7f8 fdd1 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 8008572:	623c      	str	r4, [r7, #32]
 8008574:	f107 0320 	add.w	r3, r7, #32
 8008578:	4619      	mov	r1, r3
 800857a:	4628      	mov	r0, r5
 800857c:	f000 fb6d 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>

		common_sensors_.emplace_back(new CommonSensor(TORG_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_0));
 8008580:	687d      	ldr	r5, [r7, #4]
 8008582:	2010      	movs	r0, #16
 8008584:	f01a fc1f 	bl	8022dc6 <_Znwj>
 8008588:	4603      	mov	r3, r0
 800858a:	461c      	mov	r4, r3
 800858c:	2301      	movs	r3, #1
 800858e:	9301      	str	r3, [sp, #4]
 8008590:	4b39      	ldr	r3, [pc, #228]	; (8008678 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 8008592:	9300      	str	r3, [sp, #0]
 8008594:	2305      	movs	r3, #5
 8008596:	2201      	movs	r2, #1
 8008598:	2140      	movs	r1, #64	; 0x40
 800859a:	4620      	mov	r0, r4
 800859c:	f7f8 fdba 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80085a0:	627c      	str	r4, [r7, #36]	; 0x24
 80085a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80085a6:	4619      	mov	r1, r3
 80085a8:	4628      	mov	r0, r5
 80085aa:	f000 fb56 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_U, ActiveH, Filter_5, GPIOE, GPIO_PIN_1));
 80085ae:	687d      	ldr	r5, [r7, #4]
 80085b0:	2010      	movs	r0, #16
 80085b2:	f01a fc08 	bl	8022dc6 <_Znwj>
 80085b6:	4603      	mov	r3, r0
 80085b8:	461c      	mov	r4, r3
 80085ba:	2302      	movs	r3, #2
 80085bc:	9301      	str	r3, [sp, #4]
 80085be:	4b2e      	ldr	r3, [pc, #184]	; (8008678 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80085c0:	9300      	str	r3, [sp, #0]
 80085c2:	2305      	movs	r3, #5
 80085c4:	2201      	movs	r2, #1
 80085c6:	2180      	movs	r1, #128	; 0x80
 80085c8:	4620      	mov	r0, r4
 80085ca:	f7f8 fda3 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80085ce:	62bc      	str	r4, [r7, #40]	; 0x28
 80085d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80085d4:	4619      	mov	r1, r3
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 fb3f 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_C, ActiveH, Filter_5, GPIOE, GPIO_PIN_2));
 80085dc:	687d      	ldr	r5, [r7, #4]
 80085de:	2010      	movs	r0, #16
 80085e0:	f01a fbf1 	bl	8022dc6 <_Znwj>
 80085e4:	4603      	mov	r3, r0
 80085e6:	461c      	mov	r4, r3
 80085e8:	2304      	movs	r3, #4
 80085ea:	9301      	str	r3, [sp, #4]
 80085ec:	4b22      	ldr	r3, [pc, #136]	; (8008678 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 80085ee:	9300      	str	r3, [sp, #0]
 80085f0:	2305      	movs	r3, #5
 80085f2:	2201      	movs	r2, #1
 80085f4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80085f8:	4620      	mov	r0, r4
 80085fa:	f7f8 fd8b 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 80085fe:	62fc      	str	r4, [r7, #44]	; 0x2c
 8008600:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8008604:	4619      	mov	r1, r3
 8008606:	4628      	mov	r0, r5
 8008608:	f000 fb27 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(LORG_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_3));
 800860c:	687d      	ldr	r5, [r7, #4]
 800860e:	2010      	movs	r0, #16
 8008610:	f01a fbd9 	bl	8022dc6 <_Znwj>
 8008614:	4603      	mov	r3, r0
 8008616:	461c      	mov	r4, r3
 8008618:	2308      	movs	r3, #8
 800861a:	9301      	str	r3, [sp, #4]
 800861c:	4b16      	ldr	r3, [pc, #88]	; (8008678 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 800861e:	9300      	str	r3, [sp, #0]
 8008620:	2305      	movs	r3, #5
 8008622:	2201      	movs	r2, #1
 8008624:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008628:	4620      	mov	r0, r4
 800862a:	f7f8 fd73 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 800862e:	633c      	str	r4, [r7, #48]	; 0x30
 8008630:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8008634:	4619      	mov	r1, r3
 8008636:	4628      	mov	r0, r5
 8008638:	f000 fb0f 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		common_sensors_.emplace_back(new CommonSensor(IN_L, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
 800863c:	687d      	ldr	r5, [r7, #4]
 800863e:	2010      	movs	r0, #16
 8008640:	f01a fbc1 	bl	8022dc6 <_Znwj>
 8008644:	4603      	mov	r3, r0
 8008646:	461c      	mov	r4, r3
 8008648:	2310      	movs	r3, #16
 800864a:	9301      	str	r3, [sp, #4]
 800864c:	4b0a      	ldr	r3, [pc, #40]	; (8008678 <_ZN13SensorManager20CommonSensorRegisterEv+0x230>)
 800864e:	9300      	str	r3, [sp, #0]
 8008650:	2305      	movs	r3, #5
 8008652:	2201      	movs	r2, #1
 8008654:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8008658:	4620      	mov	r0, r4
 800865a:	f7f8 fd5b 	bl	8001114 <_ZN12CommonSensorC1EtbhP12GPIO_TypeDefm>
 800865e:	637c      	str	r4, [r7, #52]	; 0x34
 8008660:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8008664:	4619      	mov	r1, r3
 8008666:	4628      	mov	r0, r5
 8008668:	f000 faf7 	bl	8008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>
		//common_sensors_.emplace_back(new CommonSensor(IN_R, ActiveH, Filter_5, GPIOE, GPIO_PIN_4));
		//common_sensors_.resize(common_sensors_.size());
	}
}
 800866c:	bf00      	nop
 800866e:	3738      	adds	r7, #56	; 0x38
 8008670:	46bd      	mov	sp, r7
 8008672:	bdb0      	pop	{r4, r5, r7, pc}
 8008674:	40021800 	.word	0x40021800
 8008678:	40021000 	.word	0x40021000

0800867c <_ZN13SensorManager22CommonSensorInitializeEv>:

void SensorManager::CommonSensorInitialize()
{
 800867c:	b580      	push	{r7, lr}
 800867e:	b082      	sub	sp, #8
 8008680:	af00      	add	r7, sp, #0
 8008682:	6078      	str	r0, [r7, #4]
	CommonSensorRegister();
 8008684:	6878      	ldr	r0, [r7, #4]
 8008686:	f7ff fedf 	bl	8008448 <_ZN13SensorManager20CommonSensorRegisterEv>
	CommonSensorDrive();
 800868a:	6878      	ldr	r0, [r7, #4]
 800868c:	f000 f804 	bl	8008698 <_ZN13SensorManager17CommonSensorDriveEv>
}
 8008690:	bf00      	nop
 8008692:	3708      	adds	r7, #8
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}

08008698 <_ZN13SensorManager17CommonSensorDriveEv>:
}



void SensorManager::CommonSensorDrive()
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b086      	sub	sp, #24
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
	for (auto& sensors : common_sensors_) sensors->Drive();
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	617b      	str	r3, [r7, #20]
 80086a4:	6978      	ldr	r0, [r7, #20]
 80086a6:	f000 f9f7 	bl	8008a98 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 80086aa:	4603      	mov	r3, r0
 80086ac:	60fb      	str	r3, [r7, #12]
 80086ae:	6978      	ldr	r0, [r7, #20]
 80086b0:	f000 fa02 	bl	8008ab8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 80086b4:	4603      	mov	r3, r0
 80086b6:	60bb      	str	r3, [r7, #8]
 80086b8:	f107 0208 	add.w	r2, r7, #8
 80086bc:	f107 030c 	add.w	r3, r7, #12
 80086c0:	4611      	mov	r1, r2
 80086c2:	4618      	mov	r0, r3
 80086c4:	f000 fa09 	bl	8008ada <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 80086c8:	4603      	mov	r3, r0
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d010      	beq.n	80086f0 <_ZN13SensorManager17CommonSensorDriveEv+0x58>
 80086ce:	f107 030c 	add.w	r3, r7, #12
 80086d2:	4618      	mov	r0, r3
 80086d4:	f000 fa29 	bl	8008b2a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 80086d8:	6138      	str	r0, [r7, #16]
 80086da:	693b      	ldr	r3, [r7, #16]
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4618      	mov	r0, r3
 80086e0:	f7f8 fdd0 	bl	8001284 <_ZN12CommonSensor5DriveEv>
 80086e4:	f107 030c 	add.w	r3, r7, #12
 80086e8:	4618      	mov	r0, r3
 80086ea:	f000 fa0e 	bl	8008b0a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 80086ee:	e7e3      	b.n	80086b8 <_ZN13SensorManager17CommonSensorDriveEv+0x20>
	CommonSensorGatherData();
 80086f0:	6878      	ldr	r0, [r7, #4]
 80086f2:	f000 f804 	bl	80086fe <_ZN13SensorManager22CommonSensorGatherDataEv>
}
 80086f6:	bf00      	nop
 80086f8:	3718      	adds	r7, #24
 80086fa:	46bd      	mov	sp, r7
 80086fc:	bd80      	pop	{r7, pc}

080086fe <_ZN13SensorManager22CommonSensorGatherDataEv>:
uint16_t SensorManager::OUT_LGetData(){return CommonSensorGetData(OUT_L);}
uint16_t SensorManager::OUT_RGetData(){return CommonSensorGetData(OUT_R);}


void SensorManager::CommonSensorGatherData()
{
 80086fe:	b590      	push	{r4, r7, lr}
 8008700:	b089      	sub	sp, #36	; 0x24
 8008702:	af00      	add	r7, sp, #0
 8008704:	6078      	str	r0, [r7, #4]
	uint16_t temp_sensor_data = 0;
 8008706:	2300      	movs	r3, #0
 8008708:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	61bb      	str	r3, [r7, #24]
 800870e:	69b8      	ldr	r0, [r7, #24]
 8008710:	f000 f9c2 	bl	8008a98 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8008714:	4603      	mov	r3, r0
 8008716:	613b      	str	r3, [r7, #16]
 8008718:	69b8      	ldr	r0, [r7, #24]
 800871a:	f000 f9cd 	bl	8008ab8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 800871e:	4603      	mov	r3, r0
 8008720:	60fb      	str	r3, [r7, #12]
 8008722:	f107 020c 	add.w	r2, r7, #12
 8008726:	f107 0310 	add.w	r3, r7, #16
 800872a:	4611      	mov	r1, r2
 800872c:	4618      	mov	r0, r3
 800872e:	f000 f9d4 	bl	8008ada <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008732:	4603      	mov	r3, r0
 8008734:	2b00      	cmp	r3, #0
 8008736:	d020      	beq.n	800877a <_ZN13SensorManager22CommonSensorGatherDataEv+0x7c>
 8008738:	f107 0310 	add.w	r3, r7, #16
 800873c:	4618      	mov	r0, r3
 800873e:	f000 f9f4 	bl	8008b2a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>
 8008742:	6178      	str	r0, [r7, #20]
	{
		temp_sensor_data |=  ((sensors->GetSensorIndex()) * (sensors->GetSensorData()));
 8008744:	697b      	ldr	r3, [r7, #20]
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	4618      	mov	r0, r3
 800874a:	f7f8 fd29 	bl	80011a0 <_ZNK12CommonSensor14GetSensorIndexEv>
 800874e:	4603      	mov	r3, r0
 8008750:	461c      	mov	r4, r3
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	4618      	mov	r0, r3
 8008758:	f7f8 fd16 	bl	8001188 <_ZNK12CommonSensor13GetSensorDataEv>
 800875c:	4603      	mov	r3, r0
 800875e:	fb04 f303 	mul.w	r3, r4, r3
 8008762:	b21a      	sxth	r2, r3
 8008764:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8008768:	4313      	orrs	r3, r2
 800876a:	b21b      	sxth	r3, r3
 800876c:	83fb      	strh	r3, [r7, #30]
	for (auto& sensors : common_sensors_)
 800876e:	f107 0310 	add.w	r3, r7, #16
 8008772:	4618      	mov	r0, r3
 8008774:	f000 f9c9 	bl	8008b0a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>
 8008778:	e7d3      	b.n	8008722 <_ZN13SensorManager22CommonSensorGatherDataEv+0x24>
	}
	this->common_sensor_data_ = temp_sensor_data;
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	8bfa      	ldrh	r2, [r7, #30]
 800877e:	849a      	strh	r2, [r3, #36]	; 0x24
}
 8008780:	bf00      	nop
 8008782:	3724      	adds	r7, #36	; 0x24
 8008784:	46bd      	mov	sp, r7
 8008786:	bd90      	pop	{r4, r7, pc}

08008788 <_ZNK13SensorManager22CommonSensorGetAllDataEv>:

uint16_t SensorManager::CommonSensorGetAllData() const {return this->common_sensor_data_;}
 8008788:	b480      	push	{r7}
 800878a:	b083      	sub	sp, #12
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008794:	4618      	mov	r0, r3
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <_ZN13SensorManager14PGV100RegisterEv>:
	PGV100Register();
	PCV80Register();
}

void SensorManager::PGV100Register()
{
 80087a0:	b5b0      	push	{r4, r5, r7, lr}
 80087a2:	b088      	sub	sp, #32
 80087a4:	af04      	add	r7, sp, #16
 80087a6:	6078      	str	r0, [r7, #4]
	if(pgv100_.empty())
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	330c      	adds	r3, #12
 80087ac:	4618      	mov	r0, r3
 80087ae:	f000 fa82 	bl	8008cb6 <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>
 80087b2:	4603      	mov	r3, r0
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d020      	beq.n	80087fa <_ZN13SensorManager14PGV100RegisterEv+0x5a>
	{
		pgv100_.emplace_back(new PGV100(0x00, RS485, &huart5, GPIOB, GPIO_PIN_0, milimeter_1, 0.0, 0.0, 0.0));
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	f103 050c 	add.w	r5, r3, #12
 80087be:	20b8      	movs	r0, #184	; 0xb8
 80087c0:	f01a fb01 	bl	8022dc6 <_Znwj>
 80087c4:	4603      	mov	r3, r0
 80087c6:	461c      	mov	r4, r3
 80087c8:	230a      	movs	r3, #10
 80087ca:	9302      	str	r3, [sp, #8]
 80087cc:	2301      	movs	r3, #1
 80087ce:	9301      	str	r3, [sp, #4]
 80087d0:	4b0f      	ldr	r3, [pc, #60]	; (8008810 <_ZN13SensorManager14PGV100RegisterEv+0x70>)
 80087d2:	9300      	str	r3, [sp, #0]
 80087d4:	ed9f 2b0c 	vldr	d2, [pc, #48]	; 8008808 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 80087d8:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 8008808 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 80087dc:	ed9f 0b0a 	vldr	d0, [pc, #40]	; 8008808 <_ZN13SensorManager14PGV100RegisterEv+0x68>
 80087e0:	4b0c      	ldr	r3, [pc, #48]	; (8008814 <_ZN13SensorManager14PGV100RegisterEv+0x74>)
 80087e2:	2200      	movs	r2, #0
 80087e4:	2100      	movs	r1, #0
 80087e6:	4620      	mov	r0, r4
 80087e8:	f7fe fd8c 	bl	8007304 <_ZN6PGV100C1EttP20__UART_HandleTypeDefP12GPIO_TypeDefttddd>
 80087ec:	60fc      	str	r4, [r7, #12]
 80087ee:	f107 030c 	add.w	r3, r7, #12
 80087f2:	4619      	mov	r1, r3
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 fa79 	bl	8008cec <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>
	}
}
 80087fa:	bf00      	nop
 80087fc:	3710      	adds	r7, #16
 80087fe:	46bd      	mov	sp, r7
 8008800:	bdb0      	pop	{r4, r5, r7, pc}
 8008802:	bf00      	nop
 8008804:	f3af 8000 	nop.w
	...
 8008810:	40020400 	.word	0x40020400
 8008814:	20000604 	.word	0x20000604

08008818 <_ZN13SensorManager16PGV100InitializeEv>:

bool SensorManager::PGV100Initialize()
{
 8008818:	b580      	push	{r7, lr}
 800881a:	b086      	sub	sp, #24
 800881c:	af00      	add	r7, sp, #0
 800881e:	6078      	str	r0, [r7, #4]
	PGV100Register();
 8008820:	6878      	ldr	r0, [r7, #4]
 8008822:	f7ff ffbd 	bl	80087a0 <_ZN13SensorManager14PGV100RegisterEv>

	for (auto& index : pgv100_) index->Initialization();
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	330c      	adds	r3, #12
 800882a:	617b      	str	r3, [r7, #20]
 800882c:	6978      	ldr	r0, [r7, #20]
 800882e:	f000 f996 	bl	8008b5e <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008832:	4603      	mov	r3, r0
 8008834:	60fb      	str	r3, [r7, #12]
 8008836:	6978      	ldr	r0, [r7, #20]
 8008838:	f000 f9a1 	bl	8008b7e <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 800883c:	4603      	mov	r3, r0
 800883e:	60bb      	str	r3, [r7, #8]
 8008840:	f107 0208 	add.w	r2, r7, #8
 8008844:	f107 030c 	add.w	r3, r7, #12
 8008848:	4611      	mov	r1, r2
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f9a8 	bl	8008ba0 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>
 8008850:	4603      	mov	r3, r0
 8008852:	2b00      	cmp	r3, #0
 8008854:	d014      	beq.n	8008880 <_ZN13SensorManager16PGV100InitializeEv+0x68>
 8008856:	f107 030c 	add.w	r3, r7, #12
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f9c8 	bl	8008bf0 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>
 8008860:	6138      	str	r0, [r7, #16]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	681a      	ldr	r2, [r3, #0]
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	681b      	ldr	r3, [r3, #0]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	3314      	adds	r3, #20
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4610      	mov	r0, r2
 8008872:	4798      	blx	r3
 8008874:	f107 030c 	add.w	r3, r7, #12
 8008878:	4618      	mov	r0, r3
 800887a:	f000 f9a9 	bl	8008bd0 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>
 800887e:	e7df      	b.n	8008840 <_ZN13SensorManager16PGV100InitializeEv+0x28>

	return PGV100IsErrUp();
 8008880:	6878      	ldr	r0, [r7, #4]
 8008882:	f000 f805 	bl	8008890 <_ZNK13SensorManager13PGV100IsErrUpEv>
 8008886:	4603      	mov	r3, r0
}
 8008888:	4618      	mov	r0, r3
 800888a:	3718      	adds	r7, #24
 800888c:	46bd      	mov	sp, r7
 800888e:	bd80      	pop	{r7, pc}

08008890 <_ZNK13SensorManager13PGV100IsErrUpEv>:
{
	return pgv100_.at(0)->GetErrStatus();
}

bool SensorManager::PGV100IsErrUp() const
{
 8008890:	b580      	push	{r7, lr}
 8008892:	b082      	sub	sp, #8
 8008894:	af00      	add	r7, sp, #0
 8008896:	6078      	str	r0, [r7, #4]
	return pgv100_.at(0)->IsErrUp();
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	330c      	adds	r3, #12
 800889c:	2100      	movs	r1, #0
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fa52 	bl	8008d48 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>
 80088a4:	4603      	mov	r3, r0
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4618      	mov	r0, r3
 80088aa:	f7fc fd5a 	bl	8005362 <_ZN12PNFPosSensor7IsErrUpEv>
 80088ae:	4603      	mov	r3, r0
}
 80088b0:	4618      	mov	r0, r3
 80088b2:	3708      	adds	r7, #8
 80088b4:	46bd      	mov	sp, r7
 80088b6:	bd80      	pop	{r7, pc}

080088b8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80088b8:	b580      	push	{r7, lr}
 80088ba:	b082      	sub	sp, #8
 80088bc:	af00      	add	r7, sp, #0
 80088be:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa53 	bl	8008d6c <_ZNSaIP12CommonSensorEC1Ev>
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	4618      	mov	r0, r3
 80088ca:	f000 fa5b 	bl	8008d84 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	4618      	mov	r0, r3
 80088d2:	3708      	adds	r7, #8
 80088d4:	46bd      	mov	sp, r7
 80088d6:	bd80      	pop	{r7, pc}

080088d8 <_ZNSaIP12CommonSensorED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80088d8:	b580      	push	{r7, lr}
 80088da:	b082      	sub	sp, #8
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
 80088e0:	6878      	ldr	r0, [r7, #4]
 80088e2:	f000 fa63 	bl	8008dac <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	4618      	mov	r0, r3
 80088ea:	3708      	adds	r7, #8
 80088ec:	46bd      	mov	sp, r7
 80088ee:	bd80      	pop	{r7, pc}

080088f0 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80088f0:	b580      	push	{r7, lr}
 80088f2:	b082      	sub	sp, #8
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	689a      	ldr	r2, [r3, #8]
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	1ad3      	subs	r3, r2, r3
 8008906:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8008908:	461a      	mov	r2, r3
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	f000 fa59 	bl	8008dc2 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      }
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	4618      	mov	r0, r3
 8008914:	f7ff fc14 	bl	8008140 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE12_Vector_implD1Ev>
 8008918:	687b      	ldr	r3, [r7, #4]
 800891a:	4618      	mov	r0, r3
 800891c:	3708      	adds	r7, #8
 800891e:	46bd      	mov	sp, r7
 8008920:	bd80      	pop	{r7, pc}

08008922 <_ZNSt6vectorIP12CommonSensorSaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008922:	b5b0      	push	{r4, r5, r7, lr}
 8008924:	b082      	sub	sp, #8
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681c      	ldr	r4, [r3, #0]
 800892e:	687b      	ldr	r3, [r7, #4]
 8008930:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	4618      	mov	r0, r3
 8008936:	f000 fa57 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800893a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 800893c:	461a      	mov	r2, r3
 800893e:	4629      	mov	r1, r5
 8008940:	4620      	mov	r0, r4
 8008942:	f000 fa5c 	bl	8008dfe <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      }
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	4618      	mov	r0, r3
 800894a:	f7ff ffd1 	bl	80088f0 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EED1Ev>
 800894e:	687b      	ldr	r3, [r7, #4]
 8008950:	4618      	mov	r0, r3
 8008952:	3708      	adds	r7, #8
 8008954:	46bd      	mov	sp, r7
 8008956:	bdb0      	pop	{r4, r5, r7, pc}

08008958 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8008958:	b580      	push	{r7, lr}
 800895a:	b082      	sub	sp, #8
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 fa5a 	bl	8008e1a <_ZNSaIP6PGV100EC1Ev>
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	4618      	mov	r0, r3
 800896a:	f000 fa62 	bl	8008e32 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 800896e:	687b      	ldr	r3, [r7, #4]
 8008970:	4618      	mov	r0, r3
 8008972:	3708      	adds	r7, #8
 8008974:	46bd      	mov	sp, r7
 8008976:	bd80      	pop	{r7, pc}

08008978 <_ZNSaIP6PGV100ED1Ev>:
 8008978:	b580      	push	{r7, lr}
 800897a:	b082      	sub	sp, #8
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
 8008980:	6878      	ldr	r0, [r7, #4]
 8008982:	f000 fa6a 	bl	8008e5a <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	4618      	mov	r0, r3
 800898a:	3708      	adds	r7, #8
 800898c:	46bd      	mov	sp, r7
 800898e:	bd80      	pop	{r7, pc}

08008990 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008990:	b580      	push	{r7, lr}
 8008992:	b082      	sub	sp, #8
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	689a      	ldr	r2, [r3, #8]
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	1ad3      	subs	r3, r2, r3
 80089a6:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80089a8:	461a      	mov	r2, r3
 80089aa:	6878      	ldr	r0, [r7, #4]
 80089ac:	f000 fa60 	bl	8008e70 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      }
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	4618      	mov	r0, r3
 80089b4:	f7ff fbea 	bl	800818c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE12_Vector_implD1Ev>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	4618      	mov	r0, r3
 80089bc:	3708      	adds	r7, #8
 80089be:	46bd      	mov	sp, r7
 80089c0:	bd80      	pop	{r7, pc}

080089c2 <_ZNSt6vectorIP6PGV100SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 80089c2:	b5b0      	push	{r4, r5, r7, lr}
 80089c4:	b082      	sub	sp, #8
 80089c6:	af00      	add	r7, sp, #0
 80089c8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	681c      	ldr	r4, [r3, #0]
 80089ce:	687b      	ldr	r3, [r7, #4]
 80089d0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	4618      	mov	r0, r3
 80089d6:	f000 fa5e 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 80089da:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80089dc:	461a      	mov	r2, r3
 80089de:	4629      	mov	r1, r5
 80089e0:	4620      	mov	r0, r4
 80089e2:	f000 fa63 	bl	8008eac <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      }
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	4618      	mov	r0, r3
 80089ea:	f7ff ffd1 	bl	8008990 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EED1Ev>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	4618      	mov	r0, r3
 80089f2:	3708      	adds	r7, #8
 80089f4:	46bd      	mov	sp, r7
 80089f6:	bdb0      	pop	{r4, r5, r7, pc}

080089f8 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80089f8:	b580      	push	{r7, lr}
 80089fa:	b082      	sub	sp, #8
 80089fc:	af00      	add	r7, sp, #0
 80089fe:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 fa61 	bl	8008ec8 <_ZNSaIP5PCV80EC1Ev>
 8008a06:	687b      	ldr	r3, [r7, #4]
 8008a08:	4618      	mov	r0, r3
 8008a0a:	f000 fa69 	bl	8008ee0 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE17_Vector_impl_dataC1Ev>
	{ }
 8008a0e:	687b      	ldr	r3, [r7, #4]
 8008a10:	4618      	mov	r0, r3
 8008a12:	3708      	adds	r7, #8
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}

08008a18 <_ZNSaIP5PCV80ED1Ev>:
 8008a18:	b580      	push	{r7, lr}
 8008a1a:	b082      	sub	sp, #8
 8008a1c:	af00      	add	r7, sp, #0
 8008a1e:	6078      	str	r0, [r7, #4]
 8008a20:	6878      	ldr	r0, [r7, #4]
 8008a22:	f000 fa71 	bl	8008f08 <_ZN9__gnu_cxx13new_allocatorIP5PCV80ED1Ev>
 8008a26:	687b      	ldr	r3, [r7, #4]
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3708      	adds	r7, #8
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}

08008a30 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b082      	sub	sp, #8
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	689a      	ldr	r2, [r3, #8]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	1ad3      	subs	r3, r2, r3
 8008a46:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8008a48:	461a      	mov	r2, r3
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 fa67 	bl	8008f1e <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE13_M_deallocateEPS1_j>
      }
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	4618      	mov	r0, r3
 8008a54:	f7ff fbc0 	bl	80081d8 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE12_Vector_implD1Ev>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	4618      	mov	r0, r3
 8008a5c:	3708      	adds	r7, #8
 8008a5e:	46bd      	mov	sp, r7
 8008a60:	bd80      	pop	{r7, pc}

08008a62 <_ZNSt6vectorIP5PCV80SaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8008a62:	b5b0      	push	{r4, r5, r7, lr}
 8008a64:	b082      	sub	sp, #8
 8008a66:	af00      	add	r7, sp, #0
 8008a68:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681c      	ldr	r4, [r3, #0]
 8008a6e:	687b      	ldr	r3, [r7, #4]
 8008a70:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	4618      	mov	r0, r3
 8008a76:	f000 fa65 	bl	8008f44 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE19_M_get_Tp_allocatorEv>
 8008a7a:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8008a7c:	461a      	mov	r2, r3
 8008a7e:	4629      	mov	r1, r5
 8008a80:	4620      	mov	r0, r4
 8008a82:	f000 fa6a 	bl	8008f5a <_ZSt8_DestroyIPP5PCV80S1_EvT_S3_RSaIT0_E>
      }
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	4618      	mov	r0, r3
 8008a8a:	f7ff ffd1 	bl	8008a30 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EED1Ev>
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	4618      	mov	r0, r3
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bdb0      	pop	{r4, r5, r7, pc}

08008a98 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008aa0:	687a      	ldr	r2, [r7, #4]
 8008aa2:	f107 030c 	add.w	r3, r7, #12
 8008aa6:	4611      	mov	r1, r2
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	f000 fa64 	bl	8008f76 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	4618      	mov	r0, r3
 8008ab2:	3710      	adds	r7, #16
 8008ab4:	46bd      	mov	sp, r7
 8008ab6:	bd80      	pop	{r7, pc}

08008ab8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	b084      	sub	sp, #16
 8008abc:	af00      	add	r7, sp, #0
 8008abe:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	1d1a      	adds	r2, r3, #4
 8008ac4:	f107 030c 	add.w	r3, r7, #12
 8008ac8:	4611      	mov	r1, r2
 8008aca:	4618      	mov	r0, r3
 8008acc:	f000 fa53 	bl	8008f76 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	4618      	mov	r0, r3
 8008ad4:	3710      	adds	r7, #16
 8008ad6:	46bd      	mov	sp, r7
 8008ad8:	bd80      	pop	{r7, pc}

08008ada <_ZN9__gnu_cxxneIPP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008ada:	b590      	push	{r4, r7, lr}
 8008adc:	b083      	sub	sp, #12
 8008ade:	af00      	add	r7, sp, #0
 8008ae0:	6078      	str	r0, [r7, #4]
 8008ae2:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008ae4:	6878      	ldr	r0, [r7, #4]
 8008ae6:	f000 fa56 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008aea:	4603      	mov	r3, r0
 8008aec:	681c      	ldr	r4, [r3, #0]
 8008aee:	6838      	ldr	r0, [r7, #0]
 8008af0:	f000 fa51 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8008af4:	4603      	mov	r3, r0
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	429c      	cmp	r4, r3
 8008afa:	bf14      	ite	ne
 8008afc:	2301      	movne	r3, #1
 8008afe:	2300      	moveq	r3, #0
 8008b00:	b2db      	uxtb	r3, r3
 8008b02:	4618      	mov	r0, r3
 8008b04:	370c      	adds	r7, #12
 8008b06:	46bd      	mov	sp, r7
 8008b08:	bd90      	pop	{r4, r7, pc}

08008b0a <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008b0a:	b480      	push	{r7}
 8008b0c:	b083      	sub	sp, #12
 8008b0e:	af00      	add	r7, sp, #0
 8008b10:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	1d1a      	adds	r2, r3, #4
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	601a      	str	r2, [r3, #0]
	return *this;
 8008b1c:	687b      	ldr	r3, [r7, #4]
      }
 8008b1e:	4618      	mov	r0, r3
 8008b20:	370c      	adds	r7, #12
 8008b22:	46bd      	mov	sp, r7
 8008b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b28:	4770      	bx	lr

08008b2a <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008b2a:	b480      	push	{r7}
 8008b2c:	b083      	sub	sp, #12
 8008b2e:	af00      	add	r7, sp, #0
 8008b30:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	681b      	ldr	r3, [r3, #0]
 8008b36:	4618      	mov	r0, r3
 8008b38:	370c      	adds	r7, #12
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b40:	4770      	bx	lr

08008b42 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8008b42:	b580      	push	{r7, lr}
 8008b44:	b082      	sub	sp, #8
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	681b      	ldr	r3, [r3, #0]
 8008b4e:	4619      	mov	r1, r3
 8008b50:	6878      	ldr	r0, [r7, #4]
 8008b52:	f000 fa2b 	bl	8008fac <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>
 8008b56:	bf00      	nop
 8008b58:	3708      	adds	r7, #8
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}

08008b5e <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8008b5e:	b580      	push	{r7, lr}
 8008b60:	b084      	sub	sp, #16
 8008b62:	af00      	add	r7, sp, #0
 8008b64:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8008b66:	687a      	ldr	r2, [r7, #4]
 8008b68:	f107 030c 	add.w	r3, r7, #12
 8008b6c:	4611      	mov	r1, r2
 8008b6e:	4618      	mov	r0, r3
 8008b70:	f000 fa3d 	bl	8008fee <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	4618      	mov	r0, r3
 8008b78:	3710      	adds	r7, #16
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	bd80      	pop	{r7, pc}

08008b7e <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8008b7e:	b580      	push	{r7, lr}
 8008b80:	b084      	sub	sp, #16
 8008b82:	af00      	add	r7, sp, #0
 8008b84:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	1d1a      	adds	r2, r3, #4
 8008b8a:	f107 030c 	add.w	r3, r7, #12
 8008b8e:	4611      	mov	r1, r2
 8008b90:	4618      	mov	r0, r3
 8008b92:	f000 fa2c 	bl	8008fee <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	4618      	mov	r0, r3
 8008b9a:	3710      	adds	r7, #16
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <_ZN9__gnu_cxxneIPP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESC_>:
    operator!=(const __normal_iterator<_Iterator, _Container>& __lhs,
 8008ba0:	b590      	push	{r4, r7, lr}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
 8008ba6:	6078      	str	r0, [r7, #4]
 8008ba8:	6039      	str	r1, [r7, #0]
    { return __lhs.base() != __rhs.base(); }
 8008baa:	6878      	ldr	r0, [r7, #4]
 8008bac:	f000 fa2f 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008bb0:	4603      	mov	r3, r0
 8008bb2:	681c      	ldr	r4, [r3, #0]
 8008bb4:	6838      	ldr	r0, [r7, #0]
 8008bb6:	f000 fa2a 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8008bba:	4603      	mov	r3, r0
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	429c      	cmp	r4, r3
 8008bc0:	bf14      	ite	ne
 8008bc2:	2301      	movne	r3, #1
 8008bc4:	2300      	moveq	r3, #0
 8008bc6:	b2db      	uxtb	r3, r3
 8008bc8:	4618      	mov	r0, r3
 8008bca:	370c      	adds	r7, #12
 8008bcc:	46bd      	mov	sp, r7
 8008bce:	bd90      	pop	{r4, r7, pc}

08008bd0 <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEppEv>:
      operator++() _GLIBCXX_NOEXCEPT
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
	++_M_current;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	1d1a      	adds	r2, r3, #4
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	601a      	str	r2, [r3, #0]
	return *this;
 8008be2:	687b      	ldr	r3, [r7, #4]
      }
 8008be4:	4618      	mov	r0, r3
 8008be6:	370c      	adds	r7, #12
 8008be8:	46bd      	mov	sp, r7
 8008bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bee:	4770      	bx	lr

08008bf0 <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEdeEv>:
      operator*() const _GLIBCXX_NOEXCEPT
 8008bf0:	b480      	push	{r7}
 8008bf2:	b083      	sub	sp, #12
 8008bf4:	af00      	add	r7, sp, #0
 8008bf6:	6078      	str	r0, [r7, #4]
      { return *_M_current; }
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <_ZNSt6vectorIP6PGV100SaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8008c08:	b580      	push	{r7, lr}
 8008c0a:	b082      	sub	sp, #8
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4619      	mov	r1, r3
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f000 fa04 	bl	8009024 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>
 8008c1c:	bf00      	nop
 8008c1e:	3708      	adds	r7, #8
 8008c20:	46bd      	mov	sp, r7
 8008c22:	bd80      	pop	{r7, pc}

08008c24 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8008c24:	b580      	push	{r7, lr}
 8008c26:	b084      	sub	sp, #16
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8008c2c:	6878      	ldr	r0, [r7, #4]
 8008c2e:	f000 fa1a 	bl	8009066 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 8008c32:	4603      	mov	r3, r0
 8008c34:	60bb      	str	r3, [r7, #8]
 8008c36:	6878      	ldr	r0, [r7, #4]
 8008c38:	f000 fa25 	bl	8009086 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8008c3c:	4603      	mov	r3, r0
 8008c3e:	60fb      	str	r3, [r7, #12]
 8008c40:	f107 020c 	add.w	r2, r7, #12
 8008c44:	f107 0308 	add.w	r3, r7, #8
 8008c48:	4611      	mov	r1, r2
 8008c4a:	4618      	mov	r0, r3
 8008c4c:	f000 fa2c 	bl	80090a8 <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8008c50:	4603      	mov	r3, r0
 8008c52:	4618      	mov	r0, r3
 8008c54:	3710      	adds	r7, #16
 8008c56:	46bd      	mov	sp, r7
 8008c58:	bd80      	pop	{r7, pc}

08008c5a <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8008c5a:	b5b0      	push	{r4, r5, r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
 8008c62:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	685a      	ldr	r2, [r3, #4]
 8008c68:	687b      	ldr	r3, [r7, #4]
 8008c6a:	689b      	ldr	r3, [r3, #8]
 8008c6c:	429a      	cmp	r2, r3
 8008c6e:	d011      	beq.n	8008c94 <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008c70:	687c      	ldr	r4, [r7, #4]
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	685d      	ldr	r5, [r3, #4]
 8008c76:	6838      	ldr	r0, [r7, #0]
 8008c78:	f000 fa2e 	bl	80090d8 <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008c7c:	4603      	mov	r3, r0
 8008c7e:	461a      	mov	r2, r3
 8008c80:	4629      	mov	r1, r5
 8008c82:	4620      	mov	r0, r4
 8008c84:	f000 fa33 	bl	80090ee <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	1d1a      	adds	r2, r3, #4
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	605a      	str	r2, [r3, #4]
      }
 8008c92:	e00c      	b.n	8008cae <_ZNSt6vectorIP12CommonSensorSaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008c94:	6878      	ldr	r0, [r7, #4]
 8008c96:	f7ff ff0f 	bl	8008ab8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE3endEv>
 8008c9a:	4604      	mov	r4, r0
 8008c9c:	6838      	ldr	r0, [r7, #0]
 8008c9e:	f000 fa1b 	bl	80090d8 <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8008ca2:	4603      	mov	r3, r0
 8008ca4:	461a      	mov	r2, r3
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f000 fa49 	bl	8009140 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008cae:	bf00      	nop
 8008cb0:	3708      	adds	r7, #8
 8008cb2:	46bd      	mov	sp, r7
 8008cb4:	bdb0      	pop	{r4, r5, r7, pc}

08008cb6 <_ZNKSt6vectorIP6PGV100SaIS1_EE5emptyEv>:
      empty() const _GLIBCXX_NOEXCEPT
 8008cb6:	b580      	push	{r7, lr}
 8008cb8:	b084      	sub	sp, #16
 8008cba:	af00      	add	r7, sp, #0
 8008cbc:	6078      	str	r0, [r7, #4]
      { return begin() == end(); }
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f000 fafa 	bl	80092b8 <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>
 8008cc4:	4603      	mov	r3, r0
 8008cc6:	60bb      	str	r3, [r7, #8]
 8008cc8:	6878      	ldr	r0, [r7, #4]
 8008cca:	f000 fb05 	bl	80092d8 <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008cce:	4603      	mov	r3, r0
 8008cd0:	60fb      	str	r3, [r7, #12]
 8008cd2:	f107 020c 	add.w	r2, r7, #12
 8008cd6:	f107 0308 	add.w	r3, r7, #8
 8008cda:	4611      	mov	r1, r2
 8008cdc:	4618      	mov	r0, r3
 8008cde:	f000 fb0c 	bl	80092fa <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>
 8008ce2:	4603      	mov	r3, r0
 8008ce4:	4618      	mov	r0, r3
 8008ce6:	3710      	adds	r7, #16
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	bd80      	pop	{r7, pc}

08008cec <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_>:
      vector<_Tp, _Alloc>::
 8008cec:	b5b0      	push	{r4, r5, r7, lr}
 8008cee:	b082      	sub	sp, #8
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
 8008cf4:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	685a      	ldr	r2, [r3, #4]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	689b      	ldr	r3, [r3, #8]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d011      	beq.n	8008d26 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x3a>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8008d02:	687c      	ldr	r4, [r7, #4]
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	685d      	ldr	r5, [r3, #4]
 8008d08:	6838      	ldr	r0, [r7, #0]
 8008d0a:	f000 fb0e 	bl	800932a <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8008d0e:	4603      	mov	r3, r0
 8008d10:	461a      	mov	r2, r3
 8008d12:	4629      	mov	r1, r5
 8008d14:	4620      	mov	r0, r4
 8008d16:	f000 fb13 	bl	8009340 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	1d1a      	adds	r2, r3, #4
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	605a      	str	r2, [r3, #4]
      }
 8008d24:	e00c      	b.n	8008d40 <_ZNSt6vectorIP6PGV100SaIS1_EE12emplace_backIJS1_EEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 8008d26:	6878      	ldr	r0, [r7, #4]
 8008d28:	f7ff ff29 	bl	8008b7e <_ZNSt6vectorIP6PGV100SaIS1_EE3endEv>
 8008d2c:	4604      	mov	r4, r0
 8008d2e:	6838      	ldr	r0, [r7, #0]
 8008d30:	f000 fafb 	bl	800932a <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8008d34:	4603      	mov	r3, r0
 8008d36:	461a      	mov	r2, r3
 8008d38:	4621      	mov	r1, r4
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 fb2a 	bl	8009394 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8008d40:	bf00      	nop
 8008d42:	3708      	adds	r7, #8
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bdb0      	pop	{r4, r5, r7, pc}

08008d48 <_ZNKSt6vectorIP6PGV100SaIS1_EE2atEj>:
      at(size_type __n) const
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 8008d52:	6839      	ldr	r1, [r7, #0]
 8008d54:	6878      	ldr	r0, [r7, #4]
 8008d56:	f000 fbd9 	bl	800950c <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>
	return (*this)[__n];
 8008d5a:	6839      	ldr	r1, [r7, #0]
 8008d5c:	6878      	ldr	r0, [r7, #4]
 8008d5e:	f000 fbf5 	bl	800954c <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>
 8008d62:	4603      	mov	r3, r0
      }
 8008d64:	4618      	mov	r0, r3
 8008d66:	3708      	adds	r7, #8
 8008d68:	46bd      	mov	sp, r7
 8008d6a:	bd80      	pop	{r7, pc}

08008d6c <_ZNSaIP12CommonSensorEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8008d6c:	b580      	push	{r7, lr}
 8008d6e:	b082      	sub	sp, #8
 8008d70:	af00      	add	r7, sp, #0
 8008d72:	6078      	str	r0, [r7, #4]
 8008d74:	6878      	ldr	r0, [r7, #4]
 8008d76:	f000 fbf9 	bl	800956c <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	4618      	mov	r0, r3
 8008d7e:	3708      	adds	r7, #8
 8008d80:	46bd      	mov	sp, r7
 8008d82:	bd80      	pop	{r7, pc}

08008d84 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	2200      	movs	r2, #0
 8008d90:	601a      	str	r2, [r3, #0]
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	2200      	movs	r2, #0
 8008d96:	605a      	str	r2, [r3, #4]
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2200      	movs	r2, #0
 8008d9c:	609a      	str	r2, [r3, #8]
	{ }
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	4618      	mov	r0, r3
 8008da2:	370c      	adds	r7, #12
 8008da4:	46bd      	mov	sp, r7
 8008da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008daa:	4770      	bx	lr

08008dac <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8008dac:	b480      	push	{r7}
 8008dae:	b083      	sub	sp, #12
 8008db0:	af00      	add	r7, sp, #0
 8008db2:	6078      	str	r0, [r7, #4]
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	4618      	mov	r0, r3
 8008db8:	370c      	adds	r7, #12
 8008dba:	46bd      	mov	sp, r7
 8008dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc0:	4770      	bx	lr

08008dc2 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008dc2:	b580      	push	{r7, lr}
 8008dc4:	b084      	sub	sp, #16
 8008dc6:	af00      	add	r7, sp, #0
 8008dc8:	60f8      	str	r0, [r7, #12]
 8008dca:	60b9      	str	r1, [r7, #8]
 8008dcc:	607a      	str	r2, [r7, #4]
	if (__p)
 8008dce:	68bb      	ldr	r3, [r7, #8]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d005      	beq.n	8008de0 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	687a      	ldr	r2, [r7, #4]
 8008dd8:	68b9      	ldr	r1, [r7, #8]
 8008dda:	4618      	mov	r0, r3
 8008ddc:	f000 fbd1 	bl	8009582 <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>
      }
 8008de0:	bf00      	nop
 8008de2:	3710      	adds	r7, #16
 8008de4:	46bd      	mov	sp, r7
 8008de6:	bd80      	pop	{r7, pc}

08008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	4618      	mov	r0, r3
 8008df4:	370c      	adds	r7, #12
 8008df6:	46bd      	mov	sp, r7
 8008df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dfc:	4770      	bx	lr

08008dfe <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008dfe:	b580      	push	{r7, lr}
 8008e00:	b084      	sub	sp, #16
 8008e02:	af00      	add	r7, sp, #0
 8008e04:	60f8      	str	r0, [r7, #12]
 8008e06:	60b9      	str	r1, [r7, #8]
 8008e08:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008e0a:	68b9      	ldr	r1, [r7, #8]
 8008e0c:	68f8      	ldr	r0, [r7, #12]
 8008e0e:	f000 fbc7 	bl	80095a0 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>
    }
 8008e12:	bf00      	nop
 8008e14:	3710      	adds	r7, #16
 8008e16:	46bd      	mov	sp, r7
 8008e18:	bd80      	pop	{r7, pc}

08008e1a <_ZNSaIP6PGV100EC1Ev>:
 8008e1a:	b580      	push	{r7, lr}
 8008e1c:	b082      	sub	sp, #8
 8008e1e:	af00      	add	r7, sp, #0
 8008e20:	6078      	str	r0, [r7, #4]
 8008e22:	6878      	ldr	r0, [r7, #4]
 8008e24:	f000 fbc9 	bl	80095ba <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008e32:	b480      	push	{r7}
 8008e34:	b083      	sub	sp, #12
 8008e36:	af00      	add	r7, sp, #0
 8008e38:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	601a      	str	r2, [r3, #0]
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2200      	movs	r2, #0
 8008e44:	605a      	str	r2, [r3, #4]
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	2200      	movs	r2, #0
 8008e4a:	609a      	str	r2, [r3, #8]
	{ }
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	4618      	mov	r0, r3
 8008e50:	370c      	adds	r7, #12
 8008e52:	46bd      	mov	sp, r7
 8008e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e58:	4770      	bx	lr

08008e5a <_ZN9__gnu_cxx13new_allocatorIP6PGV100ED1Ev>:
 8008e5a:	b480      	push	{r7}
 8008e5c:	b083      	sub	sp, #12
 8008e5e:	af00      	add	r7, sp, #0
 8008e60:	6078      	str	r0, [r7, #4]
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	4618      	mov	r0, r3
 8008e66:	370c      	adds	r7, #12
 8008e68:	46bd      	mov	sp, r7
 8008e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6e:	4770      	bx	lr

08008e70 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008e70:	b580      	push	{r7, lr}
 8008e72:	b084      	sub	sp, #16
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	607a      	str	r2, [r7, #4]
	if (__p)
 8008e7c:	68bb      	ldr	r3, [r7, #8]
 8008e7e:	2b00      	cmp	r3, #0
 8008e80:	d005      	beq.n	8008e8e <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	687a      	ldr	r2, [r7, #4]
 8008e86:	68b9      	ldr	r1, [r7, #8]
 8008e88:	4618      	mov	r0, r3
 8008e8a:	f000 fba1 	bl	80095d0 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>
      }
 8008e8e:	bf00      	nop
 8008e90:	3710      	adds	r7, #16
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008e96:	b480      	push	{r7}
 8008e98:	b083      	sub	sp, #12
 8008e9a:	af00      	add	r7, sp, #0
 8008e9c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	370c      	adds	r7, #12
 8008ea4:	46bd      	mov	sp, r7
 8008ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eaa:	4770      	bx	lr

08008eac <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008eac:	b580      	push	{r7, lr}
 8008eae:	b084      	sub	sp, #16
 8008eb0:	af00      	add	r7, sp, #0
 8008eb2:	60f8      	str	r0, [r7, #12]
 8008eb4:	60b9      	str	r1, [r7, #8]
 8008eb6:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008eb8:	68b9      	ldr	r1, [r7, #8]
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fb97 	bl	80095ee <_ZSt8_DestroyIPP6PGV100EvT_S3_>
    }
 8008ec0:	bf00      	nop
 8008ec2:	3710      	adds	r7, #16
 8008ec4:	46bd      	mov	sp, r7
 8008ec6:	bd80      	pop	{r7, pc}

08008ec8 <_ZNSaIP5PCV80EC1Ev>:
 8008ec8:	b580      	push	{r7, lr}
 8008eca:	b082      	sub	sp, #8
 8008ecc:	af00      	add	r7, sp, #0
 8008ece:	6078      	str	r0, [r7, #4]
 8008ed0:	6878      	ldr	r0, [r7, #4]
 8008ed2:	f000 fb99 	bl	8009608 <_ZN9__gnu_cxx13new_allocatorIP5PCV80EC1Ev>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3708      	adds	r7, #8
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}

08008ee0 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8008ee0:	b480      	push	{r7}
 8008ee2:	b083      	sub	sp, #12
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	2200      	movs	r2, #0
 8008eec:	601a      	str	r2, [r3, #0]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	2200      	movs	r2, #0
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	687b      	ldr	r3, [r7, #4]
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	609a      	str	r2, [r3, #8]
	{ }
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	4618      	mov	r0, r3
 8008efe:	370c      	adds	r7, #12
 8008f00:	46bd      	mov	sp, r7
 8008f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f06:	4770      	bx	lr

08008f08 <_ZN9__gnu_cxx13new_allocatorIP5PCV80ED1Ev>:
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	4618      	mov	r0, r3
 8008f14:	370c      	adds	r7, #12
 8008f16:	46bd      	mov	sp, r7
 8008f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f1c:	4770      	bx	lr

08008f1e <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
	if (__p)
 8008f2a:	68bb      	ldr	r3, [r7, #8]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d005      	beq.n	8008f3c <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	68b9      	ldr	r1, [r7, #8]
 8008f36:	4618      	mov	r0, r3
 8008f38:	f000 fb71 	bl	800961e <_ZNSt16allocator_traitsISaIP5PCV80EE10deallocateERS2_PS1_j>
      }
 8008f3c:	bf00      	nop
 8008f3e:	3710      	adds	r7, #16
 8008f40:	46bd      	mov	sp, r7
 8008f42:	bd80      	pop	{r7, pc}

08008f44 <_ZNSt12_Vector_baseIP5PCV80SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8008f44:	b480      	push	{r7}
 8008f46:	b083      	sub	sp, #12
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	4618      	mov	r0, r3
 8008f50:	370c      	adds	r7, #12
 8008f52:	46bd      	mov	sp, r7
 8008f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f58:	4770      	bx	lr

08008f5a <_ZSt8_DestroyIPP5PCV80S1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8008f5a:	b580      	push	{r7, lr}
 8008f5c:	b084      	sub	sp, #16
 8008f5e:	af00      	add	r7, sp, #0
 8008f60:	60f8      	str	r0, [r7, #12]
 8008f62:	60b9      	str	r1, [r7, #8]
 8008f64:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8008f66:	68b9      	ldr	r1, [r7, #8]
 8008f68:	68f8      	ldr	r0, [r7, #12]
 8008f6a:	f000 fb67 	bl	800963c <_ZSt8_DestroyIPP5PCV80EvT_S3_>
    }
 8008f6e:	bf00      	nop
 8008f70:	3710      	adds	r7, #16
 8008f72:	46bd      	mov	sp, r7
 8008f74:	bd80      	pop	{r7, pc}

08008f76 <_ZN9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008f76:	b480      	push	{r7}
 8008f78:	b083      	sub	sp, #12
 8008f7a:	af00      	add	r7, sp, #0
 8008f7c:	6078      	str	r0, [r7, #4]
 8008f7e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008f80:	683b      	ldr	r3, [r7, #0]
 8008f82:	681a      	ldr	r2, [r3, #0]
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	601a      	str	r2, [r3, #0]
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	4618      	mov	r0, r3
 8008f8c:	370c      	adds	r7, #12
 8008f8e:	46bd      	mov	sp, r7
 8008f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f94:	4770      	bx	lr

08008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8008f96:	b480      	push	{r7}
 8008f98:	b083      	sub	sp, #12
 8008f9a:	af00      	add	r7, sp, #0
 8008f9c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	4618      	mov	r0, r3
 8008fa2:	370c      	adds	r7, #12
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8008fac:	b590      	push	{r4, r7, lr}
 8008fae:	b085      	sub	sp, #20
 8008fb0:	af00      	add	r7, sp, #0
 8008fb2:	6078      	str	r0, [r7, #4]
 8008fb4:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685a      	ldr	r2, [r3, #4]
 8008fba:	683b      	ldr	r3, [r7, #0]
 8008fbc:	1ad3      	subs	r3, r2, r3
 8008fbe:	109b      	asrs	r3, r3, #2
 8008fc0:	60fb      	str	r3, [r7, #12]
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d00e      	beq.n	8008fe6 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	4618      	mov	r0, r3
 8008fd0:	f7ff ff0a 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8008fd4:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8008fd6:	461a      	mov	r2, r3
 8008fd8:	4621      	mov	r1, r4
 8008fda:	6838      	ldr	r0, [r7, #0]
 8008fdc:	f7ff ff0f 	bl	8008dfe <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	683a      	ldr	r2, [r7, #0]
 8008fe4:	605a      	str	r2, [r3, #4]
      }
 8008fe6:	bf00      	nop
 8008fe8:	3714      	adds	r7, #20
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd90      	pop	{r4, r7, pc}

08008fee <_ZN9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
 8008ff6:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	681a      	ldr	r2, [r3, #0]
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	601a      	str	r2, [r3, #0]
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4618      	mov	r0, r3
 8009004:	370c      	adds	r7, #12
 8009006:	46bd      	mov	sp, r7
 8009008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800900c:	4770      	bx	lr

0800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 800900e:	b480      	push	{r7}
 8009010:	b083      	sub	sp, #12
 8009012:	af00      	add	r7, sp, #0
 8009014:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	4618      	mov	r0, r3
 800901a:	370c      	adds	r7, #12
 800901c:	46bd      	mov	sp, r7
 800901e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009022:	4770      	bx	lr

08009024 <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8009024:	b590      	push	{r4, r7, lr}
 8009026:	b085      	sub	sp, #20
 8009028:	af00      	add	r7, sp, #0
 800902a:	6078      	str	r0, [r7, #4]
 800902c:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	685a      	ldr	r2, [r3, #4]
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	1ad3      	subs	r3, r2, r3
 8009036:	109b      	asrs	r3, r3, #2
 8009038:	60fb      	str	r3, [r7, #12]
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d00e      	beq.n	800905e <_ZNSt6vectorIP6PGV100SaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	4618      	mov	r0, r3
 8009048:	f7ff ff25 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 800904c:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 800904e:	461a      	mov	r2, r3
 8009050:	4621      	mov	r1, r4
 8009052:	6838      	ldr	r0, [r7, #0]
 8009054:	f7ff ff2a 	bl	8008eac <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	683a      	ldr	r2, [r7, #0]
 800905c:	605a      	str	r2, [r3, #4]
      }
 800905e:	bf00      	nop
 8009060:	3714      	adds	r7, #20
 8009062:	46bd      	mov	sp, r7
 8009064:	bd90      	pop	{r4, r7, pc}

08009066 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 8009066:	b580      	push	{r7, lr}
 8009068:	b084      	sub	sp, #16
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 800906e:	687a      	ldr	r2, [r7, #4]
 8009070:	f107 030c 	add.w	r3, r7, #12
 8009074:	4611      	mov	r1, r2
 8009076:	4618      	mov	r0, r3
 8009078:	f000 faed 	bl	8009656 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	4618      	mov	r0, r3
 8009080:	3710      	adds	r7, #16
 8009082:	46bd      	mov	sp, r7
 8009084:	bd80      	pop	{r7, pc}

08009086 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 8009086:	b580      	push	{r7, lr}
 8009088:	b084      	sub	sp, #16
 800908a:	af00      	add	r7, sp, #0
 800908c:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	1d1a      	adds	r2, r3, #4
 8009092:	f107 030c 	add.w	r3, r7, #12
 8009096:	4611      	mov	r1, r2
 8009098:	4618      	mov	r0, r3
 800909a:	f000 fadc 	bl	8009656 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	4618      	mov	r0, r3
 80090a2:	3710      	adds	r7, #16
 80090a4:	46bd      	mov	sp, r7
 80090a6:	bd80      	pop	{r7, pc}

080090a8 <_ZN9__gnu_cxxeqIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80090a8:	b590      	push	{r4, r7, lr}
 80090aa:	b083      	sub	sp, #12
 80090ac:	af00      	add	r7, sp, #0
 80090ae:	6078      	str	r0, [r7, #4]
 80090b0:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f000 fadf 	bl	8009676 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80090b8:	4603      	mov	r3, r0
 80090ba:	681c      	ldr	r4, [r3, #0]
 80090bc:	6838      	ldr	r0, [r7, #0]
 80090be:	f000 fada 	bl	8009676 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80090c2:	4603      	mov	r3, r0
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	429c      	cmp	r4, r3
 80090c8:	bf0c      	ite	eq
 80090ca:	2301      	moveq	r3, #1
 80090cc:	2300      	movne	r3, #0
 80090ce:	b2db      	uxtb	r3, r3
 80090d0:	4618      	mov	r0, r3
 80090d2:	370c      	adds	r7, #12
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd90      	pop	{r4, r7, pc}

080090d8 <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80090d8:	b480      	push	{r7}
 80090da:	b083      	sub	sp, #12
 80090dc:	af00      	add	r7, sp, #0
 80090de:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	4618      	mov	r0, r3
 80090e4:	370c      	adds	r7, #12
 80090e6:	46bd      	mov	sp, r7
 80090e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ec:	4770      	bx	lr

080090ee <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 80090ee:	b580      	push	{r7, lr}
 80090f0:	b084      	sub	sp, #16
 80090f2:	af00      	add	r7, sp, #0
 80090f4:	60f8      	str	r0, [r7, #12]
 80090f6:	60b9      	str	r1, [r7, #8]
 80090f8:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 80090fa:	6878      	ldr	r0, [r7, #4]
 80090fc:	f7ff ffec 	bl	80090d8 <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 8009100:	4603      	mov	r3, r0
 8009102:	461a      	mov	r2, r3
 8009104:	68b9      	ldr	r1, [r7, #8]
 8009106:	68f8      	ldr	r0, [r7, #12]
 8009108:	f000 fac0 	bl	800968c <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800910c:	bf00      	nop
 800910e:	3710      	adds	r7, #16
 8009110:	46bd      	mov	sp, r7
 8009112:	bd80      	pop	{r7, pc}

08009114 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8009114:	b580      	push	{r7, lr}
 8009116:	b082      	sub	sp, #8
 8009118:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800911a:	4618      	mov	r0, r3
 800911c:	f000 f805 	bl	800912a <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8009120:	4603      	mov	r3, r0
      }
 8009122:	4618      	mov	r0, r3
 8009124:	3708      	adds	r7, #8
 8009126:	46bd      	mov	sp, r7
 8009128:	bd80      	pop	{r7, pc}

0800912a <_ZNSt6vectorIP12CommonSensorSaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800912a:	b480      	push	{r7}
 800912c:	b083      	sub	sp, #12
 800912e:	af00      	add	r7, sp, #0
 8009130:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8009132:	2301      	movs	r3, #1
      }
 8009134:	4618      	mov	r0, r3
 8009136:	370c      	adds	r7, #12
 8009138:	46bd      	mov	sp, r7
 800913a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800913e:	4770      	bx	lr

08009140 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009140:	b5b0      	push	{r4, r5, r7, lr}
 8009142:	b08c      	sub	sp, #48	; 0x30
 8009144:	af00      	add	r7, sp, #0
 8009146:	60f8      	str	r0, [r7, #12]
 8009148:	60b9      	str	r1, [r7, #8]
 800914a:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 800914c:	4a59      	ldr	r2, [pc, #356]	; (80092b4 <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 800914e:	2101      	movs	r1, #1
 8009150:	68f8      	ldr	r0, [r7, #12]
 8009152:	f000 fab1 	bl	80096b8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>
 8009156:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	681b      	ldr	r3, [r3, #0]
 800915c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	685b      	ldr	r3, [r3, #4]
 8009162:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8009164:	68f8      	ldr	r0, [r7, #12]
 8009166:	f7ff fc97 	bl	8008a98 <_ZNSt6vectorIP12CommonSensorSaIS1_EE5beginEv>
 800916a:	4603      	mov	r3, r0
 800916c:	617b      	str	r3, [r7, #20]
 800916e:	f107 0214 	add.w	r2, r7, #20
 8009172:	f107 0308 	add.w	r3, r7, #8
 8009176:	4611      	mov	r1, r2
 8009178:	4618      	mov	r0, r3
 800917a:	f000 fae4 	bl	8009746 <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 800917e:	4603      	mov	r3, r0
 8009180:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8009182:	68fb      	ldr	r3, [r7, #12]
 8009184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009186:	4618      	mov	r0, r3
 8009188:	f000 faf2 	bl	8009770 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>
 800918c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 800918e:	69bb      	ldr	r3, [r7, #24]
 8009190:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8009192:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8009194:	69fb      	ldr	r3, [r7, #28]
 8009196:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8009198:	69ba      	ldr	r2, [r7, #24]
 800919a:	18d5      	adds	r5, r2, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f7ff ff9b 	bl	80090d8 <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 80091a2:	4603      	mov	r3, r0
 80091a4:	461a      	mov	r2, r3
 80091a6:	4629      	mov	r1, r5
 80091a8:	4620      	mov	r0, r4
 80091aa:	f7ff ffa0 	bl	80090ee <_ZNSt16allocator_traitsISaIP12CommonSensorEE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 80091ae:	2300      	movs	r3, #0
 80091b0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 80091b2:	f7ff ffaf 	bl	8009114 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d027      	beq.n	800920c <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80091bc:	f107 0308 	add.w	r3, r7, #8
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7ff fee8 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80091c6:	4603      	mov	r3, r0
 80091c8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 80091ca:	68fb      	ldr	r3, [r7, #12]
 80091cc:	4618      	mov	r0, r3
 80091ce:	f7ff fe0b 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80091d2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 80091d4:	69ba      	ldr	r2, [r7, #24]
 80091d6:	4621      	mov	r1, r4
 80091d8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80091da:	f000 fadd 	bl	8009798 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 80091de:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 80091e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e2:	3304      	adds	r3, #4
 80091e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80091e6:	f107 0308 	add.w	r3, r7, #8
 80091ea:	4618      	mov	r0, r3
 80091ec:	f7ff fed3 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 80091f0:	4603      	mov	r3, r0
 80091f2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	4618      	mov	r0, r3
 80091f8:	f7ff fdf6 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 80091fc:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 80091fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009200:	6a39      	ldr	r1, [r7, #32]
 8009202:	4620      	mov	r0, r4
 8009204:	f000 fac8 	bl	8009798 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009208:	62f8      	str	r0, [r7, #44]	; 0x2c
 800920a:	e026      	b.n	800925a <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 800920c:	f107 0308 	add.w	r3, r7, #8
 8009210:	4618      	mov	r0, r3
 8009212:	f7ff fec0 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8009216:	4603      	mov	r3, r0
 8009218:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800921a:	68fb      	ldr	r3, [r7, #12]
 800921c:	4618      	mov	r0, r3
 800921e:	f7ff fde3 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8009222:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8009224:	69ba      	ldr	r2, [r7, #24]
 8009226:	4621      	mov	r1, r4
 8009228:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800922a:	f000 fac9 	bl	80097c0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 800922e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8009230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009232:	3304      	adds	r3, #4
 8009234:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8009236:	f107 0308 	add.w	r3, r7, #8
 800923a:	4618      	mov	r0, r3
 800923c:	f7ff feab 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8009240:	4603      	mov	r3, r0
 8009242:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8009244:	68fb      	ldr	r3, [r7, #12]
 8009246:	4618      	mov	r0, r3
 8009248:	f7ff fdce 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 800924c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 800924e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009250:	6a39      	ldr	r1, [r7, #32]
 8009252:	4620      	mov	r0, r4
 8009254:	f000 fab4 	bl	80097c0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8009258:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 800925a:	f7ff ff5b 	bl	8009114 <_ZNSt6vectorIP12CommonSensorSaIS1_EE15_S_use_relocateEv>
 800925e:	4603      	mov	r3, r0
 8009260:	f083 0301 	eor.w	r3, r3, #1
 8009264:	b2db      	uxtb	r3, r3
 8009266:	2b00      	cmp	r3, #0
 8009268:	d009      	beq.n	800927e <_ZNSt6vectorIP12CommonSensorSaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	4618      	mov	r0, r3
 800926e:	f7ff fdbb 	bl	8008de8 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8009272:	4603      	mov	r3, r0
 8009274:	461a      	mov	r2, r3
 8009276:	6a39      	ldr	r1, [r7, #32]
 8009278:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800927a:	f7ff fdc0 	bl	8008dfe <_ZSt8_DestroyIPP12CommonSensorS1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 800927e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	689a      	ldr	r2, [r3, #8]
 8009284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 800928a:	461a      	mov	r2, r3
 800928c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800928e:	f7ff fd98 	bl	8008dc2 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	69ba      	ldr	r2, [r7, #24]
 8009296:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8009298:	68fb      	ldr	r3, [r7, #12]
 800929a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800929c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 800929e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80092a0:	009b      	lsls	r3, r3, #2
 80092a2:	69ba      	ldr	r2, [r7, #24]
 80092a4:	441a      	add	r2, r3
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	609a      	str	r2, [r3, #8]
    }
 80092aa:	bf00      	nop
 80092ac:	3730      	adds	r7, #48	; 0x30
 80092ae:	46bd      	mov	sp, r7
 80092b0:	bdb0      	pop	{r4, r5, r7, pc}
 80092b2:	bf00      	nop
 80092b4:	0802560c 	.word	0x0802560c

080092b8 <_ZNKSt6vectorIP6PGV100SaIS1_EE5beginEv>:
      begin() const _GLIBCXX_NOEXCEPT
 80092b8:	b580      	push	{r7, lr}
 80092ba:	b084      	sub	sp, #16
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_start); }
 80092c0:	687a      	ldr	r2, [r7, #4]
 80092c2:	f107 030c 	add.w	r3, r7, #12
 80092c6:	4611      	mov	r1, r2
 80092c8:	4618      	mov	r0, r3
 80092ca:	f000 fa92 	bl	80097f2 <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	4618      	mov	r0, r3
 80092d2:	3710      	adds	r7, #16
 80092d4:	46bd      	mov	sp, r7
 80092d6:	bd80      	pop	{r7, pc}

080092d8 <_ZNKSt6vectorIP6PGV100SaIS1_EE3endEv>:
      end() const _GLIBCXX_NOEXCEPT
 80092d8:	b580      	push	{r7, lr}
 80092da:	b084      	sub	sp, #16
 80092dc:	af00      	add	r7, sp, #0
 80092de:	6078      	str	r0, [r7, #4]
      { return const_iterator(this->_M_impl._M_finish); }
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	1d1a      	adds	r2, r3, #4
 80092e4:	f107 030c 	add.w	r3, r7, #12
 80092e8:	4611      	mov	r1, r2
 80092ea:	4618      	mov	r0, r3
 80092ec:	f000 fa81 	bl	80097f2 <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	4618      	mov	r0, r3
 80092f4:	3710      	adds	r7, #16
 80092f6:	46bd      	mov	sp, r7
 80092f8:	bd80      	pop	{r7, pc}

080092fa <_ZN9__gnu_cxxeqIPKP6PGV100St6vectorIS2_SaIS2_EEEEbRKNS_17__normal_iteratorIT_T0_EESD_>:
    operator==(const __normal_iterator<_Iterator, _Container>& __lhs,
 80092fa:	b590      	push	{r4, r7, lr}
 80092fc:	b083      	sub	sp, #12
 80092fe:	af00      	add	r7, sp, #0
 8009300:	6078      	str	r0, [r7, #4]
 8009302:	6039      	str	r1, [r7, #0]
    { return __lhs.base() == __rhs.base(); }
 8009304:	6878      	ldr	r0, [r7, #4]
 8009306:	f000 fa84 	bl	8009812 <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800930a:	4603      	mov	r3, r0
 800930c:	681c      	ldr	r4, [r3, #0]
 800930e:	6838      	ldr	r0, [r7, #0]
 8009310:	f000 fa7f 	bl	8009812 <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8009314:	4603      	mov	r3, r0
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	429c      	cmp	r4, r3
 800931a:	bf0c      	ite	eq
 800931c:	2301      	moveq	r3, #1
 800931e:	2300      	movne	r3, #0
 8009320:	b2db      	uxtb	r3, r3
 8009322:	4618      	mov	r0, r3
 8009324:	370c      	adds	r7, #12
 8009326:	46bd      	mov	sp, r7
 8009328:	bd90      	pop	{r4, r7, pc}

0800932a <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 800932a:	b480      	push	{r7}
 800932c:	b083      	sub	sp, #12
 800932e:	af00      	add	r7, sp, #0
 8009330:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	4618      	mov	r0, r3
 8009336:	370c      	adds	r7, #12
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr

08009340 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a __attribute__((__unused__)), _Up* __p,
 8009340:	b580      	push	{r7, lr}
 8009342:	b084      	sub	sp, #16
 8009344:	af00      	add	r7, sp, #0
 8009346:	60f8      	str	r0, [r7, #12]
 8009348:	60b9      	str	r1, [r7, #8]
 800934a:	607a      	str	r2, [r7, #4]
	  __a.construct(__p, std::forward<_Args>(__args)...);
 800934c:	6878      	ldr	r0, [r7, #4]
 800934e:	f7ff ffec 	bl	800932a <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 8009352:	4603      	mov	r3, r0
 8009354:	461a      	mov	r2, r3
 8009356:	68b9      	ldr	r1, [r7, #8]
 8009358:	68f8      	ldr	r0, [r7, #12]
 800935a:	f000 fa65 	bl	8009828 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>
	}
 800935e:	bf00      	nop
 8009360:	3710      	adds	r7, #16
 8009362:	46bd      	mov	sp, r7
 8009364:	bd80      	pop	{r7, pc}

08009366 <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8009366:	b580      	push	{r7, lr}
 8009368:	b082      	sub	sp, #8
 800936a:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 800936c:	4618      	mov	r0, r3
 800936e:	f000 f805 	bl	800937c <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8009372:	4603      	mov	r3, r0
      }
 8009374:	4618      	mov	r0, r3
 8009376:	3708      	adds	r7, #8
 8009378:	46bd      	mov	sp, r7
 800937a:	bd80      	pop	{r7, pc}

0800937c <_ZNSt6vectorIP6PGV100SaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 800937c:	b480      	push	{r7}
 800937e:	b083      	sub	sp, #12
 8009380:	af00      	add	r7, sp, #0
 8009382:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8009384:	2301      	movs	r3, #1
      }
 8009386:	4618      	mov	r0, r3
 8009388:	370c      	adds	r7, #12
 800938a:	46bd      	mov	sp, r7
 800938c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009390:	4770      	bx	lr
	...

08009394 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8009394:	b5b0      	push	{r4, r5, r7, lr}
 8009396:	b08c      	sub	sp, #48	; 0x30
 8009398:	af00      	add	r7, sp, #0
 800939a:	60f8      	str	r0, [r7, #12]
 800939c:	60b9      	str	r1, [r7, #8]
 800939e:	607a      	str	r2, [r7, #4]
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
 80093a0:	4a59      	ldr	r2, [pc, #356]	; (8009508 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 80093a2:	2101      	movs	r1, #1
 80093a4:	68f8      	ldr	r0, [r7, #12]
 80093a6:	f000 fa55 	bl	8009854 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>
 80093aa:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	685b      	ldr	r3, [r3, #4]
 80093b6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 80093b8:	68f8      	ldr	r0, [r7, #12]
 80093ba:	f7ff fbd0 	bl	8008b5e <_ZNSt6vectorIP6PGV100SaIS1_EE5beginEv>
 80093be:	4603      	mov	r3, r0
 80093c0:	617b      	str	r3, [r7, #20]
 80093c2:	f107 0214 	add.w	r2, r7, #20
 80093c6:	f107 0308 	add.w	r3, r7, #8
 80093ca:	4611      	mov	r1, r2
 80093cc:	4618      	mov	r0, r3
 80093ce:	f000 fa88 	bl	80098e2 <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 80093d2:	4603      	mov	r3, r0
 80093d4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 80093d6:	68fb      	ldr	r3, [r7, #12]
 80093d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80093da:	4618      	mov	r0, r3
 80093dc:	f000 fa96 	bl	800990c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>
 80093e0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 80093e2:	69bb      	ldr	r3, [r7, #24]
 80093e4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 80093e6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 80093e8:	69fb      	ldr	r3, [r7, #28]
 80093ea:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 80093ec:	69ba      	ldr	r2, [r7, #24]
 80093ee:	18d5      	adds	r5, r2, r3
 80093f0:	6878      	ldr	r0, [r7, #4]
 80093f2:	f7ff ff9a 	bl	800932a <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 80093f6:	4603      	mov	r3, r0
 80093f8:	461a      	mov	r2, r3
 80093fa:	4629      	mov	r1, r5
 80093fc:	4620      	mov	r0, r4
 80093fe:	f7ff ff9f 	bl	8009340 <_ZNSt16allocator_traitsISaIP6PGV100EE9constructIS1_JS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8009402:	2300      	movs	r3, #0
 8009404:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8009406:	f7ff ffae 	bl	8009366 <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 800940a:	4603      	mov	r3, r0
 800940c:	2b00      	cmp	r3, #0
 800940e:	d027      	beq.n	8009460 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009410:	f107 0308 	add.w	r3, r7, #8
 8009414:	4618      	mov	r0, r3
 8009416:	f7ff fdfa 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800941a:	4603      	mov	r3, r0
 800941c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	4618      	mov	r0, r3
 8009422:	f7ff fd38 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009426:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8009428:	69ba      	ldr	r2, [r7, #24]
 800942a:	4621      	mov	r1, r4
 800942c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800942e:	f000 fa81 	bl	8009934 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8009432:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8009434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009436:	3304      	adds	r3, #4
 8009438:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 800943a:	f107 0308 	add.w	r3, r7, #8
 800943e:	4618      	mov	r0, r3
 8009440:	f7ff fde5 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8009444:	4603      	mov	r3, r0
 8009446:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8009448:	68fb      	ldr	r3, [r7, #12]
 800944a:	4618      	mov	r0, r3
 800944c:	f7ff fd23 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009450:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8009452:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009454:	6a39      	ldr	r1, [r7, #32]
 8009456:	4620      	mov	r0, r4
 8009458:	f000 fa6c 	bl	8009934 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 800945c:	62f8      	str	r0, [r7, #44]	; 0x2c
 800945e:	e026      	b.n	80094ae <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8009460:	f107 0308 	add.w	r3, r7, #8
 8009464:	4618      	mov	r0, r3
 8009466:	f7ff fdd2 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 800946a:	4603      	mov	r3, r0
 800946c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	4618      	mov	r0, r3
 8009472:	f7ff fd10 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009476:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8009478:	69ba      	ldr	r2, [r7, #24]
 800947a:	4621      	mov	r1, r4
 800947c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800947e:	f000 fa6d 	bl	800995c <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8009482:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8009484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009486:	3304      	adds	r3, #4
 8009488:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 800948a:	f107 0308 	add.w	r3, r7, #8
 800948e:	4618      	mov	r0, r3
 8009490:	f7ff fdbd 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 8009494:	4603      	mov	r3, r0
 8009496:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8009498:	68fb      	ldr	r3, [r7, #12]
 800949a:	4618      	mov	r0, r3
 800949c:	f7ff fcfb 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 80094a0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 80094a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a4:	6a39      	ldr	r1, [r7, #32]
 80094a6:	4620      	mov	r0, r4
 80094a8:	f000 fa58 	bl	800995c <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 80094ac:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 80094ae:	f7ff ff5a 	bl	8009366 <_ZNSt6vectorIP6PGV100SaIS1_EE15_S_use_relocateEv>
 80094b2:	4603      	mov	r3, r0
 80094b4:	f083 0301 	eor.w	r3, r3, #1
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d009      	beq.n	80094d2 <_ZNSt6vectorIP6PGV100SaIS1_EE17_M_realloc_insertIJS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	4618      	mov	r0, r3
 80094c2:	f7ff fce8 	bl	8008e96 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 80094c6:	4603      	mov	r3, r0
 80094c8:	461a      	mov	r2, r3
 80094ca:	6a39      	ldr	r1, [r7, #32]
 80094cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80094ce:	f7ff fced 	bl	8008eac <_ZSt8_DestroyIPP6PGV100S1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 80094d2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	689a      	ldr	r2, [r3, #8]
 80094d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094da:	1ad3      	subs	r3, r2, r3
 80094dc:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 80094de:	461a      	mov	r2, r3
 80094e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80094e2:	f7ff fcc5 	bl	8008e70 <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	69ba      	ldr	r2, [r7, #24]
 80094ea:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094f0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 80094f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094f4:	009b      	lsls	r3, r3, #2
 80094f6:	69ba      	ldr	r2, [r7, #24]
 80094f8:	441a      	add	r2, r3
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	609a      	str	r2, [r3, #8]
    }
 80094fe:	bf00      	nop
 8009500:	3730      	adds	r7, #48	; 0x30
 8009502:	46bd      	mov	sp, r7
 8009504:	bdb0      	pop	{r4, r5, r7, pc}
 8009506:	bf00      	nop
 8009508:	0802560c 	.word	0x0802560c

0800950c <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 800950c:	b580      	push	{r7, lr}
 800950e:	b082      	sub	sp, #8
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
 8009514:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8009516:	6878      	ldr	r0, [r7, #4]
 8009518:	f000 fa39 	bl	800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 800951c:	4602      	mov	r2, r0
 800951e:	683b      	ldr	r3, [r7, #0]
 8009520:	4293      	cmp	r3, r2
 8009522:	bf2c      	ite	cs
 8009524:	2301      	movcs	r3, #1
 8009526:	2300      	movcc	r3, #0
 8009528:	b2db      	uxtb	r3, r3
 800952a:	2b00      	cmp	r3, #0
 800952c:	d008      	beq.n	8009540 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 800952e:	6878      	ldr	r0, [r7, #4]
 8009530:	f000 fa2d 	bl	800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009534:	4603      	mov	r3, r0
 8009536:	461a      	mov	r2, r3
 8009538:	6839      	ldr	r1, [r7, #0]
 800953a:	4803      	ldr	r0, [pc, #12]	; (8009548 <_ZNKSt6vectorIP6PGV100SaIS1_EE14_M_range_checkEj+0x3c>)
 800953c:	f019 fc60 	bl	8022e00 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8009540:	bf00      	nop
 8009542:	3708      	adds	r7, #8
 8009544:	46bd      	mov	sp, r7
 8009546:	bd80      	pop	{r7, pc}
 8009548:	08025628 	.word	0x08025628

0800954c <_ZNKSt6vectorIP6PGV100SaIS1_EEixEj>:
      operator[](size_type __n) const _GLIBCXX_NOEXCEPT
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
 8009554:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	009b      	lsls	r3, r3, #2
 800955e:	4413      	add	r3, r2
      }
 8009560:	4618      	mov	r0, r3
 8009562:	370c      	adds	r7, #12
 8009564:	46bd      	mov	sp, r7
 8009566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956a:	4770      	bx	lr

0800956c <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800956c:	b480      	push	{r7}
 800956e:	b083      	sub	sp, #12
 8009570:	af00      	add	r7, sp, #0
 8009572:	6078      	str	r0, [r7, #4]
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	4618      	mov	r0, r3
 8009578:	370c      	adds	r7, #12
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr

08009582 <_ZNSt16allocator_traitsISaIP12CommonSensorEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8009582:	b580      	push	{r7, lr}
 8009584:	b084      	sub	sp, #16
 8009586:	af00      	add	r7, sp, #0
 8009588:	60f8      	str	r0, [r7, #12]
 800958a:	60b9      	str	r1, [r7, #8]
 800958c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800958e:	687a      	ldr	r2, [r7, #4]
 8009590:	68b9      	ldr	r1, [r7, #8]
 8009592:	68f8      	ldr	r0, [r7, #12]
 8009594:	f000 fa0b 	bl	80099ae <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>
 8009598:	bf00      	nop
 800959a:	3710      	adds	r7, #16
 800959c:	46bd      	mov	sp, r7
 800959e:	bd80      	pop	{r7, pc}

080095a0 <_ZSt8_DestroyIPP12CommonSensorEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80095a0:	b580      	push	{r7, lr}
 80095a2:	b082      	sub	sp, #8
 80095a4:	af00      	add	r7, sp, #0
 80095a6:	6078      	str	r0, [r7, #4]
 80095a8:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80095aa:	6839      	ldr	r1, [r7, #0]
 80095ac:	6878      	ldr	r0, [r7, #4]
 80095ae:	f000 fa0e 	bl	80099ce <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>
    }
 80095b2:	bf00      	nop
 80095b4:	3708      	adds	r7, #8
 80095b6:	46bd      	mov	sp, r7
 80095b8:	bd80      	pop	{r7, pc}

080095ba <_ZN9__gnu_cxx13new_allocatorIP6PGV100EC1Ev>:
 80095ba:	b480      	push	{r7}
 80095bc:	b083      	sub	sp, #12
 80095be:	af00      	add	r7, sp, #0
 80095c0:	6078      	str	r0, [r7, #4]
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	4618      	mov	r0, r3
 80095c6:	370c      	adds	r7, #12
 80095c8:	46bd      	mov	sp, r7
 80095ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095ce:	4770      	bx	lr

080095d0 <_ZNSt16allocator_traitsISaIP6PGV100EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 80095d0:	b580      	push	{r7, lr}
 80095d2:	b084      	sub	sp, #16
 80095d4:	af00      	add	r7, sp, #0
 80095d6:	60f8      	str	r0, [r7, #12]
 80095d8:	60b9      	str	r1, [r7, #8]
 80095da:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 80095dc:	687a      	ldr	r2, [r7, #4]
 80095de:	68b9      	ldr	r1, [r7, #8]
 80095e0:	68f8      	ldr	r0, [r7, #12]
 80095e2:	f000 f9ff 	bl	80099e4 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}

080095ee <_ZSt8_DestroyIPP6PGV100EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 80095ee:	b580      	push	{r7, lr}
 80095f0:	b082      	sub	sp, #8
 80095f2:	af00      	add	r7, sp, #0
 80095f4:	6078      	str	r0, [r7, #4]
 80095f6:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 80095f8:	6839      	ldr	r1, [r7, #0]
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f000 fa02 	bl	8009a04 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>
    }
 8009600:	bf00      	nop
 8009602:	3708      	adds	r7, #8
 8009604:	46bd      	mov	sp, r7
 8009606:	bd80      	pop	{r7, pc}

08009608 <_ZN9__gnu_cxx13new_allocatorIP5PCV80EC1Ev>:
 8009608:	b480      	push	{r7}
 800960a:	b083      	sub	sp, #12
 800960c:	af00      	add	r7, sp, #0
 800960e:	6078      	str	r0, [r7, #4]
 8009610:	687b      	ldr	r3, [r7, #4]
 8009612:	4618      	mov	r0, r3
 8009614:	370c      	adds	r7, #12
 8009616:	46bd      	mov	sp, r7
 8009618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800961c:	4770      	bx	lr

0800961e <_ZNSt16allocator_traitsISaIP5PCV80EE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 800961e:	b580      	push	{r7, lr}
 8009620:	b084      	sub	sp, #16
 8009622:	af00      	add	r7, sp, #0
 8009624:	60f8      	str	r0, [r7, #12]
 8009626:	60b9      	str	r1, [r7, #8]
 8009628:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 800962a:	687a      	ldr	r2, [r7, #4]
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	68f8      	ldr	r0, [r7, #12]
 8009630:	f000 f9f3 	bl	8009a1a <_ZN9__gnu_cxx13new_allocatorIP5PCV80E10deallocateEPS2_j>
 8009634:	bf00      	nop
 8009636:	3710      	adds	r7, #16
 8009638:	46bd      	mov	sp, r7
 800963a:	bd80      	pop	{r7, pc}

0800963c <_ZSt8_DestroyIPP5PCV80EvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8009646:	6839      	ldr	r1, [r7, #0]
 8009648:	6878      	ldr	r0, [r7, #4]
 800964a:	f000 f9f6 	bl	8009a3a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5PCV80EEvT_S5_>
    }
 800964e:	bf00      	nop
 8009650:	3708      	adds	r7, #8
 8009652:	46bd      	mov	sp, r7
 8009654:	bd80      	pop	{r7, pc}

08009656 <_ZN9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8009656:	b480      	push	{r7}
 8009658:	b083      	sub	sp, #12
 800965a:	af00      	add	r7, sp, #0
 800965c:	6078      	str	r0, [r7, #4]
 800965e:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	601a      	str	r2, [r3, #0]
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4618      	mov	r0, r3
 800966c:	370c      	adds	r7, #12
 800966e:	46bd      	mov	sp, r7
 8009670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009674:	4770      	bx	lr

08009676 <_ZNK9__gnu_cxx17__normal_iteratorIPKP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009676:	b480      	push	{r7}
 8009678:	b083      	sub	sp, #12
 800967a:	af00      	add	r7, sp, #0
 800967c:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	4618      	mov	r0, r3
 8009682:	370c      	adds	r7, #12
 8009684:	46bd      	mov	sp, r7
 8009686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800968a:	4770      	bx	lr

0800968c <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 800968c:	b590      	push	{r4, r7, lr}
 800968e:	b085      	sub	sp, #20
 8009690:	af00      	add	r7, sp, #0
 8009692:	60f8      	str	r0, [r7, #12]
 8009694:	60b9      	str	r1, [r7, #8]
 8009696:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff fd1d 	bl	80090d8 <_ZSt7forwardIP12CommonSensorEOT_RNSt16remove_referenceIS2_E4typeE>
 800969e:	4603      	mov	r3, r0
 80096a0:	681c      	ldr	r4, [r3, #0]
 80096a2:	68bb      	ldr	r3, [r7, #8]
 80096a4:	4619      	mov	r1, r3
 80096a6:	2004      	movs	r0, #4
 80096a8:	f7f8 fbff 	bl	8001eaa <_ZnwjPv>
 80096ac:	4603      	mov	r3, r0
 80096ae:	601c      	str	r4, [r3, #0]
 80096b0:	bf00      	nop
 80096b2:	3714      	adds	r7, #20
 80096b4:	46bd      	mov	sp, r7
 80096b6:	bd90      	pop	{r4, r7, pc}

080096b8 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80096b8:	b590      	push	{r4, r7, lr}
 80096ba:	b087      	sub	sp, #28
 80096bc:	af00      	add	r7, sp, #0
 80096be:	60f8      	str	r0, [r7, #12]
 80096c0:	60b9      	str	r1, [r7, #8]
 80096c2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80096c4:	68f8      	ldr	r0, [r7, #12]
 80096c6:	f000 f9c3 	bl	8009a50 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 80096ca:	4604      	mov	r4, r0
 80096cc:	68f8      	ldr	r0, [r7, #12]
 80096ce:	f000 f9d0 	bl	8009a72 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 80096d2:	4603      	mov	r3, r0
 80096d4:	1ae2      	subs	r2, r4, r3
 80096d6:	68bb      	ldr	r3, [r7, #8]
 80096d8:	429a      	cmp	r2, r3
 80096da:	bf34      	ite	cc
 80096dc:	2301      	movcc	r3, #1
 80096de:	2300      	movcs	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d002      	beq.n	80096ec <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80096e6:	6878      	ldr	r0, [r7, #4]
 80096e8:	f019 fb87 	bl	8022dfa <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80096ec:	68f8      	ldr	r0, [r7, #12]
 80096ee:	f000 f9c0 	bl	8009a72 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 80096f2:	4604      	mov	r4, r0
 80096f4:	68f8      	ldr	r0, [r7, #12]
 80096f6:	f000 f9bc 	bl	8009a72 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 80096fa:	4603      	mov	r3, r0
 80096fc:	613b      	str	r3, [r7, #16]
 80096fe:	f107 0208 	add.w	r2, r7, #8
 8009702:	f107 0310 	add.w	r3, r7, #16
 8009706:	4611      	mov	r1, r2
 8009708:	4618      	mov	r0, r3
 800970a:	f7fa faac 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 800970e:	4603      	mov	r3, r0
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	4423      	add	r3, r4
 8009714:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8009716:	68f8      	ldr	r0, [r7, #12]
 8009718:	f000 f9ab 	bl	8009a72 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>
 800971c:	4602      	mov	r2, r0
 800971e:	697b      	ldr	r3, [r7, #20]
 8009720:	4293      	cmp	r3, r2
 8009722:	d306      	bcc.n	8009732 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x7a>
 8009724:	68f8      	ldr	r0, [r7, #12]
 8009726:	f000 f993 	bl	8009a50 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 800972a:	4602      	mov	r2, r0
 800972c:	697b      	ldr	r3, [r7, #20]
 800972e:	4293      	cmp	r3, r2
 8009730:	d904      	bls.n	800973c <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x84>
 8009732:	68f8      	ldr	r0, [r7, #12]
 8009734:	f000 f98c 	bl	8009a50 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>
 8009738:	4603      	mov	r3, r0
 800973a:	e000      	b.n	800973e <_ZNKSt6vectorIP12CommonSensorSaIS1_EE12_M_check_lenEjPKc+0x86>
 800973c:	697b      	ldr	r3, [r7, #20]
      }
 800973e:	4618      	mov	r0, r3
 8009740:	371c      	adds	r7, #28
 8009742:	46bd      	mov	sp, r7
 8009744:	bd90      	pop	{r4, r7, pc}

08009746 <_ZN9__gnu_cxxmiIPP12CommonSensorSt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8009746:	b590      	push	{r4, r7, lr}
 8009748:	b083      	sub	sp, #12
 800974a:	af00      	add	r7, sp, #0
 800974c:	6078      	str	r0, [r7, #4]
 800974e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8009750:	6878      	ldr	r0, [r7, #4]
 8009752:	f7ff fc20 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8009756:	4603      	mov	r3, r0
 8009758:	681c      	ldr	r4, [r3, #0]
 800975a:	6838      	ldr	r0, [r7, #0]
 800975c:	f7ff fc1b 	bl	8008f96 <_ZNK9__gnu_cxx17__normal_iteratorIPP12CommonSensorSt6vectorIS2_SaIS2_EEE4baseEv>
 8009760:	4603      	mov	r3, r0
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	1ae3      	subs	r3, r4, r3
 8009766:	109b      	asrs	r3, r3, #2
 8009768:	4618      	mov	r0, r3
 800976a:	370c      	adds	r7, #12
 800976c:	46bd      	mov	sp, r7
 800976e:	bd90      	pop	{r4, r7, pc}

08009770 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8009770:	b580      	push	{r7, lr}
 8009772:	b082      	sub	sp, #8
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
 8009778:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	2b00      	cmp	r3, #0
 800977e:	d006      	beq.n	800978e <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x1e>
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6839      	ldr	r1, [r7, #0]
 8009784:	4618      	mov	r0, r3
 8009786:	f000 f984 	bl	8009a92 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>
 800978a:	4603      	mov	r3, r0
 800978c:	e000      	b.n	8009790 <_ZNSt12_Vector_baseIP12CommonSensorSaIS1_EE11_M_allocateEj+0x20>
 800978e:	2300      	movs	r3, #0
      }
 8009790:	4618      	mov	r0, r3
 8009792:	3708      	adds	r7, #8
 8009794:	46bd      	mov	sp, r7
 8009796:	bd80      	pop	{r7, pc}

08009798 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009798:	b590      	push	{r4, r7, lr}
 800979a:	b087      	sub	sp, #28
 800979c:	af02      	add	r7, sp, #8
 800979e:	60f8      	str	r0, [r7, #12]
 80097a0:	60b9      	str	r1, [r7, #8]
 80097a2:	607a      	str	r2, [r7, #4]
 80097a4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80097a6:	f88d 4000 	strb.w	r4, [sp]
 80097aa:	683b      	ldr	r3, [r7, #0]
 80097ac:	687a      	ldr	r2, [r7, #4]
 80097ae:	68b9      	ldr	r1, [r7, #8]
 80097b0:	68f8      	ldr	r0, [r7, #12]
 80097b2:	f000 f97d 	bl	8009ab0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 80097b6:	4603      	mov	r3, r0
      }
 80097b8:	4618      	mov	r0, r3
 80097ba:	3714      	adds	r7, #20
 80097bc:	46bd      	mov	sp, r7
 80097be:	bd90      	pop	{r4, r7, pc}

080097c0 <_ZSt34__uninitialized_move_if_noexcept_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80097c0:	b590      	push	{r4, r7, lr}
 80097c2:	b085      	sub	sp, #20
 80097c4:	af00      	add	r7, sp, #0
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	60b9      	str	r1, [r7, #8]
 80097ca:	607a      	str	r2, [r7, #4]
 80097cc:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80097ce:	68f8      	ldr	r0, [r7, #12]
 80097d0:	f000 f980 	bl	8009ad4 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 80097d4:	4604      	mov	r4, r0
 80097d6:	68b8      	ldr	r0, [r7, #8]
 80097d8:	f000 f97c 	bl	8009ad4 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>
 80097dc:	4601      	mov	r1, r0
 80097de:	683b      	ldr	r3, [r7, #0]
 80097e0:	687a      	ldr	r2, [r7, #4]
 80097e2:	4620      	mov	r0, r4
 80097e4:	f000 f985 	bl	8009af2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>
 80097e8:	4603      	mov	r3, r0
    }
 80097ea:	4618      	mov	r0, r3
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd90      	pop	{r4, r7, pc}

080097f2 <_ZN9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEEC1ERKS4_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80097f2:	b480      	push	{r7}
 80097f4:	b083      	sub	sp, #12
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80097fc:	683b      	ldr	r3, [r7, #0]
 80097fe:	681a      	ldr	r2, [r3, #0]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	601a      	str	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	4618      	mov	r0, r3
 8009808:	370c      	adds	r7, #12
 800980a:	46bd      	mov	sp, r7
 800980c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009810:	4770      	bx	lr

08009812 <_ZNK9__gnu_cxx17__normal_iteratorIPKP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8009812:	b480      	push	{r7}
 8009814:	b083      	sub	sp, #12
 8009816:	af00      	add	r7, sp, #0
 8009818:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	4618      	mov	r0, r3
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr

08009828 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E9constructIS2_JS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8009828:	b590      	push	{r4, r7, lr}
 800982a:	b085      	sub	sp, #20
 800982c:	af00      	add	r7, sp, #0
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	60b9      	str	r1, [r7, #8]
 8009832:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8009834:	6878      	ldr	r0, [r7, #4]
 8009836:	f7ff fd78 	bl	800932a <_ZSt7forwardIP6PGV100EOT_RNSt16remove_referenceIS2_E4typeE>
 800983a:	4603      	mov	r3, r0
 800983c:	681c      	ldr	r4, [r3, #0]
 800983e:	68bb      	ldr	r3, [r7, #8]
 8009840:	4619      	mov	r1, r3
 8009842:	2004      	movs	r0, #4
 8009844:	f7f8 fb31 	bl	8001eaa <_ZnwjPv>
 8009848:	4603      	mov	r3, r0
 800984a:	601c      	str	r4, [r3, #0]
 800984c:	bf00      	nop
 800984e:	3714      	adds	r7, #20
 8009850:	46bd      	mov	sp, r7
 8009852:	bd90      	pop	{r4, r7, pc}

08009854 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8009854:	b590      	push	{r4, r7, lr}
 8009856:	b087      	sub	sp, #28
 8009858:	af00      	add	r7, sp, #0
 800985a:	60f8      	str	r0, [r7, #12]
 800985c:	60b9      	str	r1, [r7, #8]
 800985e:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 8009860:	68f8      	ldr	r0, [r7, #12]
 8009862:	f000 f957 	bl	8009b14 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 8009866:	4604      	mov	r4, r0
 8009868:	68f8      	ldr	r0, [r7, #12]
 800986a:	f000 f890 	bl	800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 800986e:	4603      	mov	r3, r0
 8009870:	1ae2      	subs	r2, r4, r3
 8009872:	68bb      	ldr	r3, [r7, #8]
 8009874:	429a      	cmp	r2, r3
 8009876:	bf34      	ite	cc
 8009878:	2301      	movcc	r3, #1
 800987a:	2300      	movcs	r3, #0
 800987c:	b2db      	uxtb	r3, r3
 800987e:	2b00      	cmp	r3, #0
 8009880:	d002      	beq.n	8009888 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8009882:	6878      	ldr	r0, [r7, #4]
 8009884:	f019 fab9 	bl	8022dfa <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8009888:	68f8      	ldr	r0, [r7, #12]
 800988a:	f000 f880 	bl	800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 800988e:	4604      	mov	r4, r0
 8009890:	68f8      	ldr	r0, [r7, #12]
 8009892:	f000 f87c 	bl	800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 8009896:	4603      	mov	r3, r0
 8009898:	613b      	str	r3, [r7, #16]
 800989a:	f107 0208 	add.w	r2, r7, #8
 800989e:	f107 0310 	add.w	r3, r7, #16
 80098a2:	4611      	mov	r1, r2
 80098a4:	4618      	mov	r0, r3
 80098a6:	f7fa f9de 	bl	8003c66 <_ZSt3maxIjERKT_S2_S2_>
 80098aa:	4603      	mov	r3, r0
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4423      	add	r3, r4
 80098b0:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 80098b2:	68f8      	ldr	r0, [r7, #12]
 80098b4:	f000 f86b 	bl	800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>
 80098b8:	4602      	mov	r2, r0
 80098ba:	697b      	ldr	r3, [r7, #20]
 80098bc:	4293      	cmp	r3, r2
 80098be:	d306      	bcc.n	80098ce <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x7a>
 80098c0:	68f8      	ldr	r0, [r7, #12]
 80098c2:	f000 f927 	bl	8009b14 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 80098c6:	4602      	mov	r2, r0
 80098c8:	697b      	ldr	r3, [r7, #20]
 80098ca:	4293      	cmp	r3, r2
 80098cc:	d904      	bls.n	80098d8 <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x84>
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 f920 	bl	8009b14 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>
 80098d4:	4603      	mov	r3, r0
 80098d6:	e000      	b.n	80098da <_ZNKSt6vectorIP6PGV100SaIS1_EE12_M_check_lenEjPKc+0x86>
 80098d8:	697b      	ldr	r3, [r7, #20]
      }
 80098da:	4618      	mov	r0, r3
 80098dc:	371c      	adds	r7, #28
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd90      	pop	{r4, r7, pc}

080098e2 <_ZN9__gnu_cxxmiIPP6PGV100St6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80098e2:	b590      	push	{r4, r7, lr}
 80098e4:	b083      	sub	sp, #12
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	6078      	str	r0, [r7, #4]
 80098ea:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80098ec:	6878      	ldr	r0, [r7, #4]
 80098ee:	f7ff fb8e 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 80098f2:	4603      	mov	r3, r0
 80098f4:	681c      	ldr	r4, [r3, #0]
 80098f6:	6838      	ldr	r0, [r7, #0]
 80098f8:	f7ff fb89 	bl	800900e <_ZNK9__gnu_cxx17__normal_iteratorIPP6PGV100St6vectorIS2_SaIS2_EEE4baseEv>
 80098fc:	4603      	mov	r3, r0
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	1ae3      	subs	r3, r4, r3
 8009902:	109b      	asrs	r3, r3, #2
 8009904:	4618      	mov	r0, r3
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	bd90      	pop	{r4, r7, pc}

0800990c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 800990c:	b580      	push	{r7, lr}
 800990e:	b082      	sub	sp, #8
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	2b00      	cmp	r3, #0
 800991a:	d006      	beq.n	800992a <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x1e>
 800991c:	687b      	ldr	r3, [r7, #4]
 800991e:	6839      	ldr	r1, [r7, #0]
 8009920:	4618      	mov	r0, r3
 8009922:	f000 f908 	bl	8009b36 <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>
 8009926:	4603      	mov	r3, r0
 8009928:	e000      	b.n	800992c <_ZNSt12_Vector_baseIP6PGV100SaIS1_EE11_M_allocateEj+0x20>
 800992a:	2300      	movs	r3, #0
      }
 800992c:	4618      	mov	r0, r3
 800992e:	3708      	adds	r7, #8
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8009934:	b590      	push	{r4, r7, lr}
 8009936:	b087      	sub	sp, #28
 8009938:	af02      	add	r7, sp, #8
 800993a:	60f8      	str	r0, [r7, #12]
 800993c:	60b9      	str	r1, [r7, #8]
 800993e:	607a      	str	r2, [r7, #4]
 8009940:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 8009942:	f88d 4000 	strb.w	r4, [sp]
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	687a      	ldr	r2, [r7, #4]
 800994a:	68b9      	ldr	r1, [r7, #8]
 800994c:	68f8      	ldr	r0, [r7, #12]
 800994e:	f000 f901 	bl	8009b54 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8009952:	4603      	mov	r3, r0
      }
 8009954:	4618      	mov	r0, r3
 8009956:	3714      	adds	r7, #20
 8009958:	46bd      	mov	sp, r7
 800995a:	bd90      	pop	{r4, r7, pc}

0800995c <_ZSt34__uninitialized_move_if_noexcept_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 800995c:	b590      	push	{r4, r7, lr}
 800995e:	b085      	sub	sp, #20
 8009960:	af00      	add	r7, sp, #0
 8009962:	60f8      	str	r0, [r7, #12]
 8009964:	60b9      	str	r1, [r7, #8]
 8009966:	607a      	str	r2, [r7, #4]
 8009968:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800996a:	68f8      	ldr	r0, [r7, #12]
 800996c:	f000 f904 	bl	8009b78 <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 8009970:	4604      	mov	r4, r0
 8009972:	68b8      	ldr	r0, [r7, #8]
 8009974:	f000 f900 	bl	8009b78 <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>
 8009978:	4601      	mov	r1, r0
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	687a      	ldr	r2, [r7, #4]
 800997e:	4620      	mov	r0, r4
 8009980:	f000 f909 	bl	8009b96 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8009984:	4603      	mov	r3, r0
    }
 8009986:	4618      	mov	r0, r3
 8009988:	3714      	adds	r7, #20
 800998a:	46bd      	mov	sp, r7
 800998c:	bd90      	pop	{r4, r7, pc}

0800998e <_ZNKSt6vectorIP6PGV100SaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 800998e:	b480      	push	{r7}
 8009990:	b083      	sub	sp, #12
 8009992:	af00      	add	r7, sp, #0
 8009994:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	685a      	ldr	r2, [r3, #4]
 800999a:	687b      	ldr	r3, [r7, #4]
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	1ad3      	subs	r3, r2, r3
 80099a0:	109b      	asrs	r3, r3, #2
 80099a2:	4618      	mov	r0, r3
 80099a4:	370c      	adds	r7, #12
 80099a6:	46bd      	mov	sp, r7
 80099a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099ac:	4770      	bx	lr

080099ae <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80099ae:	b580      	push	{r7, lr}
 80099b0:	b084      	sub	sp, #16
 80099b2:	af00      	add	r7, sp, #0
 80099b4:	60f8      	str	r0, [r7, #12]
 80099b6:	60b9      	str	r1, [r7, #8]
 80099b8:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	009b      	lsls	r3, r3, #2
 80099be:	4619      	mov	r1, r3
 80099c0:	68b8      	ldr	r0, [r7, #8]
 80099c2:	f019 f9ef 	bl	8022da4 <_ZdlPvj>
      }
 80099c6:	bf00      	nop
 80099c8:	3710      	adds	r7, #16
 80099ca:	46bd      	mov	sp, r7
 80099cc:	bd80      	pop	{r7, pc}

080099ce <_ZNSt12_Destroy_auxILb1EE9__destroyIPP12CommonSensorEEvT_S5_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 80099ce:	b480      	push	{r7}
 80099d0:	b083      	sub	sp, #12
 80099d2:	af00      	add	r7, sp, #0
 80099d4:	6078      	str	r0, [r7, #4]
 80099d6:	6039      	str	r1, [r7, #0]
 80099d8:	bf00      	nop
 80099da:	370c      	adds	r7, #12
 80099dc:	46bd      	mov	sp, r7
 80099de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099e2:	4770      	bx	lr

080099e4 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 80099e4:	b580      	push	{r7, lr}
 80099e6:	b084      	sub	sp, #16
 80099e8:	af00      	add	r7, sp, #0
 80099ea:	60f8      	str	r0, [r7, #12]
 80099ec:	60b9      	str	r1, [r7, #8]
 80099ee:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	009b      	lsls	r3, r3, #2
 80099f4:	4619      	mov	r1, r3
 80099f6:	68b8      	ldr	r0, [r7, #8]
 80099f8:	f019 f9d4 	bl	8022da4 <_ZdlPvj>
      }
 80099fc:	bf00      	nop
 80099fe:	3710      	adds	r7, #16
 8009a00:	46bd      	mov	sp, r7
 8009a02:	bd80      	pop	{r7, pc}

08009a04 <_ZNSt12_Destroy_auxILb1EE9__destroyIPP6PGV100EEvT_S5_>:
 8009a04:	b480      	push	{r7}
 8009a06:	b083      	sub	sp, #12
 8009a08:	af00      	add	r7, sp, #0
 8009a0a:	6078      	str	r0, [r7, #4]
 8009a0c:	6039      	str	r1, [r7, #0]
 8009a0e:	bf00      	nop
 8009a10:	370c      	adds	r7, #12
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <_ZN9__gnu_cxx13new_allocatorIP5PCV80E10deallocateEPS2_j>:
      deallocate(_Tp* __p, size_type __t)
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b084      	sub	sp, #16
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	60f8      	str	r0, [r7, #12]
 8009a22:	60b9      	str	r1, [r7, #8]
 8009a24:	607a      	str	r2, [r7, #4]
	::operator delete(__p
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	009b      	lsls	r3, r3, #2
 8009a2a:	4619      	mov	r1, r3
 8009a2c:	68b8      	ldr	r0, [r7, #8]
 8009a2e:	f019 f9b9 	bl	8022da4 <_ZdlPvj>
      }
 8009a32:	bf00      	nop
 8009a34:	3710      	adds	r7, #16
 8009a36:	46bd      	mov	sp, r7
 8009a38:	bd80      	pop	{r7, pc}

08009a3a <_ZNSt12_Destroy_auxILb1EE9__destroyIPP5PCV80EEvT_S5_>:
 8009a3a:	b480      	push	{r7}
 8009a3c:	b083      	sub	sp, #12
 8009a3e:	af00      	add	r7, sp, #0
 8009a40:	6078      	str	r0, [r7, #4]
 8009a42:	6039      	str	r1, [r7, #0]
 8009a44:	bf00      	nop
 8009a46:	370c      	adds	r7, #12
 8009a48:	46bd      	mov	sp, r7
 8009a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a4e:	4770      	bx	lr

08009a50 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009a50:	b580      	push	{r7, lr}
 8009a52:	b082      	sub	sp, #8
 8009a54:	af00      	add	r7, sp, #0
 8009a56:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	4618      	mov	r0, r3
 8009a5c:	f000 f8c6 	bl	8009bec <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>
 8009a60:	4603      	mov	r3, r0
 8009a62:	4618      	mov	r0, r3
 8009a64:	f000 f8a8 	bl	8009bb8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>
 8009a68:	4603      	mov	r3, r0
 8009a6a:	4618      	mov	r0, r3
 8009a6c:	3708      	adds	r7, #8
 8009a6e:	46bd      	mov	sp, r7
 8009a70:	bd80      	pop	{r7, pc}

08009a72 <_ZNKSt6vectorIP12CommonSensorSaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8009a72:	b480      	push	{r7}
 8009a74:	b083      	sub	sp, #12
 8009a76:	af00      	add	r7, sp, #0
 8009a78:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	685a      	ldr	r2, [r3, #4]
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	109b      	asrs	r3, r3, #2
 8009a86:	4618      	mov	r0, r3
 8009a88:	370c      	adds	r7, #12
 8009a8a:	46bd      	mov	sp, r7
 8009a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a90:	4770      	bx	lr

08009a92 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8009a92:	b580      	push	{r7, lr}
 8009a94:	b082      	sub	sp, #8
 8009a96:	af00      	add	r7, sp, #0
 8009a98:	6078      	str	r0, [r7, #4]
 8009a9a:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	6839      	ldr	r1, [r7, #0]
 8009aa0:	6878      	ldr	r0, [r7, #4]
 8009aa2:	f000 f8ae 	bl	8009c02 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>
 8009aa6:	4603      	mov	r3, r0
 8009aa8:	4618      	mov	r0, r3
 8009aaa:	3708      	adds	r7, #8
 8009aac:	46bd      	mov	sp, r7
 8009aae:	bd80      	pop	{r7, pc}

08009ab0 <_ZNSt6vectorIP12CommonSensorSaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009ab0:	b580      	push	{r7, lr}
 8009ab2:	b084      	sub	sp, #16
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009abe:	683b      	ldr	r3, [r7, #0]
 8009ac0:	687a      	ldr	r2, [r7, #4]
 8009ac2:	68b9      	ldr	r1, [r7, #8]
 8009ac4:	68f8      	ldr	r0, [r7, #12]
 8009ac6:	f000 f8ba 	bl	8009c3e <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>
 8009aca:	4603      	mov	r3, r0
      }
 8009acc:	4618      	mov	r0, r3
 8009ace:	3710      	adds	r7, #16
 8009ad0:	46bd      	mov	sp, r7
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <_ZSt32__make_move_if_noexcept_iteratorIP12CommonSensorSt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009ad4:	b580      	push	{r7, lr}
 8009ad6:	b084      	sub	sp, #16
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009adc:	f107 030c 	add.w	r3, r7, #12
 8009ae0:	6879      	ldr	r1, [r7, #4]
 8009ae2:	4618      	mov	r0, r3
 8009ae4:	f000 f8c8 	bl	8009c78 <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>
 8009ae8:	68fb      	ldr	r3, [r7, #12]
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}

08009af2 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP12CommonSensorES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009af2:	b580      	push	{r7, lr}
 8009af4:	b084      	sub	sp, #16
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	60f8      	str	r0, [r7, #12]
 8009afa:	60b9      	str	r1, [r7, #8]
 8009afc:	607a      	str	r2, [r7, #4]
 8009afe:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009b00:	687a      	ldr	r2, [r7, #4]
 8009b02:	68b9      	ldr	r1, [r7, #8]
 8009b04:	68f8      	ldr	r0, [r7, #12]
 8009b06:	f000 f8c9 	bl	8009c9c <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	3710      	adds	r7, #16
 8009b10:	46bd      	mov	sp, r7
 8009b12:	bd80      	pop	{r7, pc}

08009b14 <_ZNKSt6vectorIP6PGV100SaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8009b14:	b580      	push	{r7, lr}
 8009b16:	b082      	sub	sp, #8
 8009b18:	af00      	add	r7, sp, #0
 8009b1a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	4618      	mov	r0, r3
 8009b20:	f000 f8e8 	bl	8009cf4 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>
 8009b24:	4603      	mov	r3, r0
 8009b26:	4618      	mov	r0, r3
 8009b28:	f000 f8ca 	bl	8009cc0 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>
 8009b2c:	4603      	mov	r3, r0
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3708      	adds	r7, #8
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}

08009b36 <_ZNSt16allocator_traitsISaIP6PGV100EE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 8009b36:	b580      	push	{r7, lr}
 8009b38:	b082      	sub	sp, #8
 8009b3a:	af00      	add	r7, sp, #0
 8009b3c:	6078      	str	r0, [r7, #4]
 8009b3e:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8009b40:	2200      	movs	r2, #0
 8009b42:	6839      	ldr	r1, [r7, #0]
 8009b44:	6878      	ldr	r0, [r7, #4]
 8009b46:	f000 f8e0 	bl	8009d0a <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>
 8009b4a:	4603      	mov	r3, r0
 8009b4c:	4618      	mov	r0, r3
 8009b4e:	3708      	adds	r7, #8
 8009b50:	46bd      	mov	sp, r7
 8009b52:	bd80      	pop	{r7, pc}

08009b54 <_ZNSt6vectorIP6PGV100SaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8009b54:	b580      	push	{r7, lr}
 8009b56:	b084      	sub	sp, #16
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	60f8      	str	r0, [r7, #12]
 8009b5c:	60b9      	str	r1, [r7, #8]
 8009b5e:	607a      	str	r2, [r7, #4]
 8009b60:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8009b62:	683b      	ldr	r3, [r7, #0]
 8009b64:	687a      	ldr	r2, [r7, #4]
 8009b66:	68b9      	ldr	r1, [r7, #8]
 8009b68:	68f8      	ldr	r0, [r7, #12]
 8009b6a:	f000 f8ec 	bl	8009d46 <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>
 8009b6e:	4603      	mov	r3, r0
      }
 8009b70:	4618      	mov	r0, r3
 8009b72:	3710      	adds	r7, #16
 8009b74:	46bd      	mov	sp, r7
 8009b76:	bd80      	pop	{r7, pc}

08009b78 <_ZSt32__make_move_if_noexcept_iteratorIP6PGV100St13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8009b78:	b580      	push	{r7, lr}
 8009b7a:	b084      	sub	sp, #16
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8009b80:	f107 030c 	add.w	r3, r7, #12
 8009b84:	6879      	ldr	r1, [r7, #4]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f8fa 	bl	8009d80 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>
 8009b8c:	68fb      	ldr	r3, [r7, #12]
 8009b8e:	4618      	mov	r0, r3
 8009b90:	3710      	adds	r7, #16
 8009b92:	46bd      	mov	sp, r7
 8009b94:	bd80      	pop	{r7, pc}

08009b96 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPP6PGV100ES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8009b96:	b580      	push	{r7, lr}
 8009b98:	b084      	sub	sp, #16
 8009b9a:	af00      	add	r7, sp, #0
 8009b9c:	60f8      	str	r0, [r7, #12]
 8009b9e:	60b9      	str	r1, [r7, #8]
 8009ba0:	607a      	str	r2, [r7, #4]
 8009ba2:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8009ba4:	687a      	ldr	r2, [r7, #4]
 8009ba6:	68b9      	ldr	r1, [r7, #8]
 8009ba8:	68f8      	ldr	r0, [r7, #12]
 8009baa:	f000 f8fb 	bl	8009da4 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 8009bae:	4603      	mov	r3, r0
 8009bb0:	4618      	mov	r0, r3
 8009bb2:	3710      	adds	r7, #16
 8009bb4:	46bd      	mov	sp, r7
 8009bb6:	bd80      	pop	{r7, pc}

08009bb8 <_ZNSt6vectorIP12CommonSensorSaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009bb8:	b580      	push	{r7, lr}
 8009bba:	b084      	sub	sp, #16
 8009bbc:	af00      	add	r7, sp, #0
 8009bbe:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009bc0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009bc4:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009bc6:	6878      	ldr	r0, [r7, #4]
 8009bc8:	f000 f8fe 	bl	8009dc8 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>
 8009bcc:	4603      	mov	r3, r0
 8009bce:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009bd0:	f107 0208 	add.w	r2, r7, #8
 8009bd4:	f107 030c 	add.w	r3, r7, #12
 8009bd8:	4611      	mov	r1, r2
 8009bda:	4618      	mov	r0, r3
 8009bdc:	f7fa fb00 	bl	80041e0 <_ZSt3minIjERKT_S2_S2_>
 8009be0:	4603      	mov	r3, r0
 8009be2:	681b      	ldr	r3, [r3, #0]
      }
 8009be4:	4618      	mov	r0, r3
 8009be6:	3710      	adds	r7, #16
 8009be8:	46bd      	mov	sp, r7
 8009bea:	bd80      	pop	{r7, pc}

08009bec <_ZNKSt12_Vector_baseIP12CommonSensorSaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009bec:	b480      	push	{r7}
 8009bee:	b083      	sub	sp, #12
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	4618      	mov	r0, r3
 8009bf8:	370c      	adds	r7, #12
 8009bfa:	46bd      	mov	sp, r7
 8009bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c00:	4770      	bx	lr

08009c02 <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b084      	sub	sp, #16
 8009c06:	af00      	add	r7, sp, #0
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009c0e:	68f8      	ldr	r0, [r7, #12]
 8009c10:	f000 f8e6 	bl	8009de0 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 8009c14:	4602      	mov	r2, r0
 8009c16:	68bb      	ldr	r3, [r7, #8]
 8009c18:	4293      	cmp	r3, r2
 8009c1a:	bf8c      	ite	hi
 8009c1c:	2301      	movhi	r3, #1
 8009c1e:	2300      	movls	r3, #0
 8009c20:	b2db      	uxtb	r3, r3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d001      	beq.n	8009c2a <_ZN9__gnu_cxx13new_allocatorIP12CommonSensorE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009c26:	f019 f8e2 	bl	8022dee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009c2a:	68bb      	ldr	r3, [r7, #8]
 8009c2c:	009b      	lsls	r3, r3, #2
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f019 f8c9 	bl	8022dc6 <_Znwj>
 8009c34:	4603      	mov	r3, r0
      }
 8009c36:	4618      	mov	r0, r3
 8009c38:	3710      	adds	r7, #16
 8009c3a:	46bd      	mov	sp, r7
 8009c3c:	bd80      	pop	{r7, pc}

08009c3e <_ZSt12__relocate_aIPP12CommonSensorS2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009c3e:	b5b0      	push	{r4, r5, r7, lr}
 8009c40:	b084      	sub	sp, #16
 8009c42:	af00      	add	r7, sp, #0
 8009c44:	60f8      	str	r0, [r7, #12]
 8009c46:	60b9      	str	r1, [r7, #8]
 8009c48:	607a      	str	r2, [r7, #4]
 8009c4a:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8009c4c:	68f8      	ldr	r0, [r7, #12]
 8009c4e:	f000 f8d3 	bl	8009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009c52:	4604      	mov	r4, r0
 8009c54:	68b8      	ldr	r0, [r7, #8]
 8009c56:	f000 f8cf 	bl	8009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009c5a:	4605      	mov	r5, r0
 8009c5c:	6878      	ldr	r0, [r7, #4]
 8009c5e:	f000 f8cb 	bl	8009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009c62:	4602      	mov	r2, r0
 8009c64:	683b      	ldr	r3, [r7, #0]
 8009c66:	4629      	mov	r1, r5
 8009c68:	4620      	mov	r0, r4
 8009c6a:	f000 f8d0 	bl	8009e0e <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8009c6e:	4603      	mov	r3, r0
    }
 8009c70:	4618      	mov	r0, r3
 8009c72:	3710      	adds	r7, #16
 8009c74:	46bd      	mov	sp, r7
 8009c76:	bdb0      	pop	{r4, r5, r7, pc}

08009c78 <_ZNSt13move_iteratorIPP12CommonSensorEC1ES2_>:
      move_iterator(iterator_type __i)
 8009c78:	b580      	push	{r7, lr}
 8009c7a:	b082      	sub	sp, #8
 8009c7c:	af00      	add	r7, sp, #0
 8009c7e:	6078      	str	r0, [r7, #4]
 8009c80:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8009c82:	463b      	mov	r3, r7
 8009c84:	4618      	mov	r0, r3
 8009c86:	f000 f8e0 	bl	8009e4a <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	681a      	ldr	r2, [r3, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	601a      	str	r2, [r3, #0]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	4618      	mov	r0, r3
 8009c96:	3708      	adds	r7, #8
 8009c98:	46bd      	mov	sp, r7
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <_ZSt18uninitialized_copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b086      	sub	sp, #24
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	60f8      	str	r0, [r7, #12]
 8009ca4:	60b9      	str	r1, [r7, #8]
 8009ca6:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009ca8:	2301      	movs	r3, #1
 8009caa:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	68b9      	ldr	r1, [r7, #8]
 8009cb0:	68f8      	ldr	r0, [r7, #12]
 8009cb2:	f000 f8d5 	bl	8009e60 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>
 8009cb6:	4603      	mov	r3, r0
    }
 8009cb8:	4618      	mov	r0, r3
 8009cba:	3718      	adds	r7, #24
 8009cbc:	46bd      	mov	sp, r7
 8009cbe:	bd80      	pop	{r7, pc}

08009cc0 <_ZNSt6vectorIP6PGV100SaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8009cc8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8009ccc:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8009cce:	6878      	ldr	r0, [r7, #4]
 8009cd0:	f000 f8d6 	bl	8009e80 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>
 8009cd4:	4603      	mov	r3, r0
 8009cd6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8009cd8:	f107 0208 	add.w	r2, r7, #8
 8009cdc:	f107 030c 	add.w	r3, r7, #12
 8009ce0:	4611      	mov	r1, r2
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7fa fa7c 	bl	80041e0 <_ZSt3minIjERKT_S2_S2_>
 8009ce8:	4603      	mov	r3, r0
 8009cea:	681b      	ldr	r3, [r3, #0]
      }
 8009cec:	4618      	mov	r0, r3
 8009cee:	3710      	adds	r7, #16
 8009cf0:	46bd      	mov	sp, r7
 8009cf2:	bd80      	pop	{r7, pc}

08009cf4 <_ZNKSt12_Vector_baseIP6PGV100SaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8009cf4:	b480      	push	{r7}
 8009cf6:	b083      	sub	sp, #12
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4618      	mov	r0, r3
 8009d00:	370c      	adds	r7, #12
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8009d0a:	b580      	push	{r7, lr}
 8009d0c:	b084      	sub	sp, #16
 8009d0e:	af00      	add	r7, sp, #0
 8009d10:	60f8      	str	r0, [r7, #12]
 8009d12:	60b9      	str	r1, [r7, #8]
 8009d14:	607a      	str	r2, [r7, #4]
	if (__n > this->_M_max_size())
 8009d16:	68f8      	ldr	r0, [r7, #12]
 8009d18:	f000 f8be 	bl	8009e98 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 8009d1c:	4602      	mov	r2, r0
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	4293      	cmp	r3, r2
 8009d22:	bf8c      	ite	hi
 8009d24:	2301      	movhi	r3, #1
 8009d26:	2300      	movls	r3, #0
 8009d28:	b2db      	uxtb	r3, r3
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	d001      	beq.n	8009d32 <_ZN9__gnu_cxx13new_allocatorIP6PGV100E8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8009d2e:	f019 f85e 	bl	8022dee <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8009d32:	68bb      	ldr	r3, [r7, #8]
 8009d34:	009b      	lsls	r3, r3, #2
 8009d36:	4618      	mov	r0, r3
 8009d38:	f019 f845 	bl	8022dc6 <_Znwj>
 8009d3c:	4603      	mov	r3, r0
      }
 8009d3e:	4618      	mov	r0, r3
 8009d40:	3710      	adds	r7, #16
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bd80      	pop	{r7, pc}

08009d46 <_ZSt12__relocate_aIPP6PGV100S2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8009d46:	b5b0      	push	{r4, r5, r7, lr}
 8009d48:	b084      	sub	sp, #16
 8009d4a:	af00      	add	r7, sp, #0
 8009d4c:	60f8      	str	r0, [r7, #12]
 8009d4e:	60b9      	str	r1, [r7, #8]
 8009d50:	607a      	str	r2, [r7, #4]
 8009d52:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 8009d54:	68f8      	ldr	r0, [r7, #12]
 8009d56:	f000 f8ab 	bl	8009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009d5a:	4604      	mov	r4, r0
 8009d5c:	68b8      	ldr	r0, [r7, #8]
 8009d5e:	f000 f8a7 	bl	8009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009d62:	4605      	mov	r5, r0
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f8a3 	bl	8009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	683b      	ldr	r3, [r7, #0]
 8009d6e:	4629      	mov	r1, r5
 8009d70:	4620      	mov	r0, r4
 8009d72:	f000 f8a8 	bl	8009ec6 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8009d76:	4603      	mov	r3, r0
    }
 8009d78:	4618      	mov	r0, r3
 8009d7a:	3710      	adds	r7, #16
 8009d7c:	46bd      	mov	sp, r7
 8009d7e:	bdb0      	pop	{r4, r5, r7, pc}

08009d80 <_ZNSt13move_iteratorIPP6PGV100EC1ES2_>:
      move_iterator(iterator_type __i)
 8009d80:	b580      	push	{r7, lr}
 8009d82:	b082      	sub	sp, #8
 8009d84:	af00      	add	r7, sp, #0
 8009d86:	6078      	str	r0, [r7, #4]
 8009d88:	6039      	str	r1, [r7, #0]
      : _M_current(std::move(__i)) { }
 8009d8a:	463b      	mov	r3, r7
 8009d8c:	4618      	mov	r0, r3
 8009d8e:	f000 f8b8 	bl	8009f02 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>
 8009d92:	4603      	mov	r3, r0
 8009d94:	681a      	ldr	r2, [r3, #0]
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	601a      	str	r2, [r3, #0]
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3708      	adds	r7, #8
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <_ZSt18uninitialized_copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8009da4:	b580      	push	{r7, lr}
 8009da6:	b086      	sub	sp, #24
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8009db0:	2301      	movs	r3, #1
 8009db2:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	68b9      	ldr	r1, [r7, #8]
 8009db8:	68f8      	ldr	r0, [r7, #12]
 8009dba:	f000 f8ad 	bl	8009f18 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>
 8009dbe:	4603      	mov	r3, r0
    }
 8009dc0:	4618      	mov	r0, r3
 8009dc2:	3718      	adds	r7, #24
 8009dc4:	46bd      	mov	sp, r7
 8009dc6:	bd80      	pop	{r7, pc}

08009dc8 <_ZNSt16allocator_traitsISaIP12CommonSensorEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8009dc8:	b580      	push	{r7, lr}
 8009dca:	b082      	sub	sp, #8
 8009dcc:	af00      	add	r7, sp, #0
 8009dce:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8009dd0:	6878      	ldr	r0, [r7, #4]
 8009dd2:	f000 f8b1 	bl	8009f38 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>
 8009dd6:	4603      	mov	r3, r0
      }
 8009dd8:	4618      	mov	r0, r3
 8009dda:	3708      	adds	r7, #8
 8009ddc:	46bd      	mov	sp, r7
 8009dde:	bd80      	pop	{r7, pc}

08009de0 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009de0:	b480      	push	{r7}
 8009de2:	b083      	sub	sp, #12
 8009de4:	af00      	add	r7, sp, #0
 8009de6:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009de8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009dec:	4618      	mov	r0, r3
 8009dee:	370c      	adds	r7, #12
 8009df0:	46bd      	mov	sp, r7
 8009df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009df6:	4770      	bx	lr

08009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>:
    __niter_base(_Iterator __it)
 8009df8:	b480      	push	{r7}
 8009dfa:	b083      	sub	sp, #12
 8009dfc:	af00      	add	r7, sp, #0
 8009dfe:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009e00:	687b      	ldr	r3, [r7, #4]
 8009e02:	4618      	mov	r0, r3
 8009e04:	370c      	adds	r7, #12
 8009e06:	46bd      	mov	sp, r7
 8009e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e0c:	4770      	bx	lr

08009e0e <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009e0e:	b580      	push	{r7, lr}
 8009e10:	b086      	sub	sp, #24
 8009e12:	af00      	add	r7, sp, #0
 8009e14:	60f8      	str	r0, [r7, #12]
 8009e16:	60b9      	str	r1, [r7, #8]
 8009e18:	607a      	str	r2, [r7, #4]
 8009e1a:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009e1c:	68ba      	ldr	r2, [r7, #8]
 8009e1e:	68fb      	ldr	r3, [r7, #12]
 8009e20:	1ad3      	subs	r3, r2, r3
 8009e22:	109b      	asrs	r3, r3, #2
 8009e24:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009e26:	697b      	ldr	r3, [r7, #20]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dd06      	ble.n	8009e3a <_ZSt14__relocate_a_1IP12CommonSensorS1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009e2c:	697b      	ldr	r3, [r7, #20]
 8009e2e:	009b      	lsls	r3, r3, #2
 8009e30:	461a      	mov	r2, r3
 8009e32:	68f9      	ldr	r1, [r7, #12]
 8009e34:	6878      	ldr	r0, [r7, #4]
 8009e36:	f01a f929 	bl	802408c <memmove>
      return __result + __count;
 8009e3a:	697b      	ldr	r3, [r7, #20]
 8009e3c:	009b      	lsls	r3, r3, #2
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	4413      	add	r3, r2
    }
 8009e42:	4618      	mov	r0, r3
 8009e44:	3718      	adds	r7, #24
 8009e46:	46bd      	mov	sp, r7
 8009e48:	bd80      	pop	{r7, pc}

08009e4a <_ZSt4moveIRPP12CommonSensorEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009e4a:	b480      	push	{r7}
 8009e4c:	b083      	sub	sp, #12
 8009e4e:	af00      	add	r7, sp, #0
 8009e50:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	4618      	mov	r0, r3
 8009e56:	370c      	adds	r7, #12
 8009e58:	46bd      	mov	sp, r7
 8009e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e5e:	4770      	bx	lr

08009e60 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP12CommonSensorES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009e60:	b580      	push	{r7, lr}
 8009e62:	b084      	sub	sp, #16
 8009e64:	af00      	add	r7, sp, #0
 8009e66:	60f8      	str	r0, [r7, #12]
 8009e68:	60b9      	str	r1, [r7, #8]
 8009e6a:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009e6c:	687a      	ldr	r2, [r7, #4]
 8009e6e:	68b9      	ldr	r1, [r7, #8]
 8009e70:	68f8      	ldr	r0, [r7, #12]
 8009e72:	f000 f86d 	bl	8009f50 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>
 8009e76:	4603      	mov	r3, r0
 8009e78:	4618      	mov	r0, r3
 8009e7a:	3710      	adds	r7, #16
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	bd80      	pop	{r7, pc}

08009e80 <_ZNSt16allocator_traitsISaIP6PGV100EE8max_sizeERKS2_>:
      max_size(const allocator_type& __a __attribute__((__unused__))) noexcept
 8009e80:	b580      	push	{r7, lr}
 8009e82:	b082      	sub	sp, #8
 8009e84:	af00      	add	r7, sp, #0
 8009e86:	6078      	str	r0, [r7, #4]
	return __a.max_size();
 8009e88:	6878      	ldr	r0, [r7, #4]
 8009e8a:	f000 f879 	bl	8009f80 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>
 8009e8e:	4603      	mov	r3, r0
      }
 8009e90:	4618      	mov	r0, r3
 8009e92:	3708      	adds	r7, #8
 8009e94:	46bd      	mov	sp, r7
 8009e96:	bd80      	pop	{r7, pc}

08009e98 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>:
      _M_max_size() const _GLIBCXX_USE_NOEXCEPT
 8009e98:	b480      	push	{r7}
 8009e9a:	b083      	sub	sp, #12
 8009e9c:	af00      	add	r7, sp, #0
 8009e9e:	6078      	str	r0, [r7, #4]
	return std::size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8009ea0:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8009ea4:	4618      	mov	r0, r3
 8009ea6:	370c      	adds	r7, #12
 8009ea8:	46bd      	mov	sp, r7
 8009eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eae:	4770      	bx	lr

08009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>:
    __niter_base(_Iterator __it)
 8009eb0:	b480      	push	{r7}
 8009eb2:	b083      	sub	sp, #12
 8009eb4:	af00      	add	r7, sp, #0
 8009eb6:	6078      	str	r0, [r7, #4]
    { return __it; }
 8009eb8:	687b      	ldr	r3, [r7, #4]
 8009eba:	4618      	mov	r0, r3
 8009ebc:	370c      	adds	r7, #12
 8009ebe:	46bd      	mov	sp, r7
 8009ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec4:	4770      	bx	lr

08009ec6 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8009ec6:	b580      	push	{r7, lr}
 8009ec8:	b086      	sub	sp, #24
 8009eca:	af00      	add	r7, sp, #0
 8009ecc:	60f8      	str	r0, [r7, #12]
 8009ece:	60b9      	str	r1, [r7, #8]
 8009ed0:	607a      	str	r2, [r7, #4]
 8009ed2:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8009ed4:	68ba      	ldr	r2, [r7, #8]
 8009ed6:	68fb      	ldr	r3, [r7, #12]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	109b      	asrs	r3, r3, #2
 8009edc:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8009ede:	697b      	ldr	r3, [r7, #20]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	dd06      	ble.n	8009ef2 <_ZSt14__relocate_a_1IP6PGV100S1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8009ee4:	697b      	ldr	r3, [r7, #20]
 8009ee6:	009b      	lsls	r3, r3, #2
 8009ee8:	461a      	mov	r2, r3
 8009eea:	68f9      	ldr	r1, [r7, #12]
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f01a f8cd 	bl	802408c <memmove>
      return __result + __count;
 8009ef2:	697b      	ldr	r3, [r7, #20]
 8009ef4:	009b      	lsls	r3, r3, #2
 8009ef6:	687a      	ldr	r2, [r7, #4]
 8009ef8:	4413      	add	r3, r2
    }
 8009efa:	4618      	mov	r0, r3
 8009efc:	3718      	adds	r7, #24
 8009efe:	46bd      	mov	sp, r7
 8009f00:	bd80      	pop	{r7, pc}

08009f02 <_ZSt4moveIRPP6PGV100EONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	4618      	mov	r0, r3
 8009f0e:	370c      	adds	r7, #12
 8009f10:	46bd      	mov	sp, r7
 8009f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f16:	4770      	bx	lr

08009f18 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPP6PGV100ES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8009f18:	b580      	push	{r7, lr}
 8009f1a:	b084      	sub	sp, #16
 8009f1c:	af00      	add	r7, sp, #0
 8009f1e:	60f8      	str	r0, [r7, #12]
 8009f20:	60b9      	str	r1, [r7, #8]
 8009f22:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8009f24:	687a      	ldr	r2, [r7, #4]
 8009f26:	68b9      	ldr	r1, [r7, #8]
 8009f28:	68f8      	ldr	r0, [r7, #12]
 8009f2a:	f000 f835 	bl	8009f98 <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	4618      	mov	r0, r3
 8009f32:	3710      	adds	r7, #16
 8009f34:	46bd      	mov	sp, r7
 8009f36:	bd80      	pop	{r7, pc}

08009f38 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009f38:	b580      	push	{r7, lr}
 8009f3a:	b082      	sub	sp, #8
 8009f3c:	af00      	add	r7, sp, #0
 8009f3e:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8009f40:	6878      	ldr	r0, [r7, #4]
 8009f42:	f7ff ff4d 	bl	8009de0 <_ZNK9__gnu_cxx13new_allocatorIP12CommonSensorE11_M_max_sizeEv>
 8009f46:	4603      	mov	r3, r0
 8009f48:	4618      	mov	r0, r3
 8009f4a:	3708      	adds	r7, #8
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	bd80      	pop	{r7, pc}

08009f50 <_ZSt4copyISt13move_iteratorIPP12CommonSensorES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8009f50:	b590      	push	{r4, r7, lr}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	60f8      	str	r0, [r7, #12]
 8009f58:	60b9      	str	r1, [r7, #8]
 8009f5a:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009f5c:	68f8      	ldr	r0, [r7, #12]
 8009f5e:	f000 f833 	bl	8009fc8 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009f62:	4604      	mov	r4, r0
 8009f64:	68b8      	ldr	r0, [r7, #8]
 8009f66:	f000 f82f 	bl	8009fc8 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	687a      	ldr	r2, [r7, #4]
 8009f6e:	4619      	mov	r1, r3
 8009f70:	4620      	mov	r0, r4
 8009f72:	f000 f83a 	bl	8009fea <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 8009f76:	4603      	mov	r3, r0
    }
 8009f78:	4618      	mov	r0, r3
 8009f7a:	3714      	adds	r7, #20
 8009f7c:	46bd      	mov	sp, r7
 8009f7e:	bd90      	pop	{r4, r7, pc}

08009f80 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8009f80:	b580      	push	{r7, lr}
 8009f82:	b082      	sub	sp, #8
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
      { return _M_max_size(); }
 8009f88:	6878      	ldr	r0, [r7, #4]
 8009f8a:	f7ff ff85 	bl	8009e98 <_ZNK9__gnu_cxx13new_allocatorIP6PGV100E11_M_max_sizeEv>
 8009f8e:	4603      	mov	r3, r0
 8009f90:	4618      	mov	r0, r3
 8009f92:	3708      	adds	r7, #8
 8009f94:	46bd      	mov	sp, r7
 8009f96:	bd80      	pop	{r7, pc}

08009f98 <_ZSt4copyISt13move_iteratorIPP6PGV100ES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 8009f98:	b590      	push	{r4, r7, lr}
 8009f9a:	b085      	sub	sp, #20
 8009f9c:	af00      	add	r7, sp, #0
 8009f9e:	60f8      	str	r0, [r7, #12]
 8009fa0:	60b9      	str	r1, [r7, #8]
 8009fa2:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8009fa4:	68f8      	ldr	r0, [r7, #12]
 8009fa6:	f000 f843 	bl	800a030 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009faa:	4604      	mov	r4, r0
 8009fac:	68b8      	ldr	r0, [r7, #8]
 8009fae:	f000 f83f 	bl	800a030 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	4619      	mov	r1, r3
 8009fb8:	4620      	mov	r0, r4
 8009fba:	f000 f84a 	bl	800a052 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 8009fbe:	4603      	mov	r3, r0
    }
 8009fc0:	4618      	mov	r0, r3
 8009fc2:	3714      	adds	r7, #20
 8009fc4:	46bd      	mov	sp, r7
 8009fc6:	bd90      	pop	{r4, r7, pc}

08009fc8 <_ZSt12__miter_baseIPP12CommonSensorEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8009fc8:	b580      	push	{r7, lr}
 8009fca:	b082      	sub	sp, #8
 8009fcc:	af00      	add	r7, sp, #0
 8009fce:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8009fd0:	1d3b      	adds	r3, r7, #4
 8009fd2:	4618      	mov	r0, r3
 8009fd4:	f000 f860 	bl	800a098 <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>
 8009fd8:	4603      	mov	r3, r0
 8009fda:	4618      	mov	r0, r3
 8009fdc:	f000 f868 	bl	800a0b0 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>
 8009fe0:	4603      	mov	r3, r0
 8009fe2:	4618      	mov	r0, r3
 8009fe4:	3708      	adds	r7, #8
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}

08009fea <_ZSt13__copy_move_aILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8009fea:	b5b0      	push	{r4, r5, r7, lr}
 8009fec:	b084      	sub	sp, #16
 8009fee:	af00      	add	r7, sp, #0
 8009ff0:	60f8      	str	r0, [r7, #12]
 8009ff2:	60b9      	str	r1, [r7, #8]
 8009ff4:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8009ff6:	68f8      	ldr	r0, [r7, #12]
 8009ff8:	f7ff fefe 	bl	8009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 8009ffc:	4604      	mov	r4, r0
 8009ffe:	68b8      	ldr	r0, [r7, #8]
 800a000:	f7ff fefa 	bl	8009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 800a004:	4605      	mov	r5, r0
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	4618      	mov	r0, r3
 800a00a:	f7ff fef5 	bl	8009df8 <_ZSt12__niter_baseIPP12CommonSensorET_S3_>
 800a00e:	4603      	mov	r3, r0
 800a010:	461a      	mov	r2, r3
 800a012:	4629      	mov	r1, r5
 800a014:	4620      	mov	r0, r4
 800a016:	f000 f856 	bl	800a0c6 <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 800a01a:	4602      	mov	r2, r0
 800a01c:	1d3b      	adds	r3, r7, #4
 800a01e:	4611      	mov	r1, r2
 800a020:	4618      	mov	r0, r3
 800a022:	f000 f860 	bl	800a0e6 <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>
 800a026:	4603      	mov	r3, r0
    }
 800a028:	4618      	mov	r0, r3
 800a02a:	3710      	adds	r7, #16
 800a02c:	46bd      	mov	sp, r7
 800a02e:	bdb0      	pop	{r4, r5, r7, pc}

0800a030 <_ZSt12__miter_baseIPP6PGV100EDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 800a030:	b580      	push	{r7, lr}
 800a032:	b082      	sub	sp, #8
 800a034:	af00      	add	r7, sp, #0
 800a036:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 800a038:	1d3b      	adds	r3, r7, #4
 800a03a:	4618      	mov	r0, r3
 800a03c:	f000 f85f 	bl	800a0fe <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>
 800a040:	4603      	mov	r3, r0
 800a042:	4618      	mov	r0, r3
 800a044:	f000 f867 	bl	800a116 <_ZSt12__miter_baseIPP6PGV100ET_S3_>
 800a048:	4603      	mov	r3, r0
 800a04a:	4618      	mov	r0, r3
 800a04c:	3708      	adds	r7, #8
 800a04e:	46bd      	mov	sp, r7
 800a050:	bd80      	pop	{r7, pc}

0800a052 <_ZSt13__copy_move_aILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800a052:	b5b0      	push	{r4, r5, r7, lr}
 800a054:	b084      	sub	sp, #16
 800a056:	af00      	add	r7, sp, #0
 800a058:	60f8      	str	r0, [r7, #12]
 800a05a:	60b9      	str	r1, [r7, #8]
 800a05c:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 800a05e:	68f8      	ldr	r0, [r7, #12]
 800a060:	f7ff ff26 	bl	8009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 800a064:	4604      	mov	r4, r0
 800a066:	68b8      	ldr	r0, [r7, #8]
 800a068:	f7ff ff22 	bl	8009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 800a06c:	4605      	mov	r5, r0
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	4618      	mov	r0, r3
 800a072:	f7ff ff1d 	bl	8009eb0 <_ZSt12__niter_baseIPP6PGV100ET_S3_>
 800a076:	4603      	mov	r3, r0
 800a078:	461a      	mov	r2, r3
 800a07a:	4629      	mov	r1, r5
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 f855 	bl	800a12c <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 800a082:	4602      	mov	r2, r0
 800a084:	1d3b      	adds	r3, r7, #4
 800a086:	4611      	mov	r1, r2
 800a088:	4618      	mov	r0, r3
 800a08a:	f000 f85f 	bl	800a14c <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>
 800a08e:	4603      	mov	r3, r0
    }
 800a090:	4618      	mov	r0, r3
 800a092:	3710      	adds	r7, #16
 800a094:	46bd      	mov	sp, r7
 800a096:	bdb0      	pop	{r4, r5, r7, pc}

0800a098 <_ZNKSt13move_iteratorIPP12CommonSensorE4baseEv>:
      base() const
 800a098:	b480      	push	{r7}
 800a09a:	b083      	sub	sp, #12
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	4618      	mov	r0, r3
 800a0a6:	370c      	adds	r7, #12
 800a0a8:	46bd      	mov	sp, r7
 800a0aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ae:	4770      	bx	lr

0800a0b0 <_ZSt12__miter_baseIPP12CommonSensorET_S3_>:
    __miter_base(_Iterator __it)
 800a0b0:	b480      	push	{r7}
 800a0b2:	b083      	sub	sp, #12
 800a0b4:	af00      	add	r7, sp, #0
 800a0b6:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	4618      	mov	r0, r3
 800a0bc:	370c      	adds	r7, #12
 800a0be:	46bd      	mov	sp, r7
 800a0c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0c4:	4770      	bx	lr

0800a0c6 <_ZSt14__copy_move_a1ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a0c6:	b580      	push	{r7, lr}
 800a0c8:	b084      	sub	sp, #16
 800a0ca:	af00      	add	r7, sp, #0
 800a0cc:	60f8      	str	r0, [r7, #12]
 800a0ce:	60b9      	str	r1, [r7, #8]
 800a0d0:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a0d2:	687a      	ldr	r2, [r7, #4]
 800a0d4:	68b9      	ldr	r1, [r7, #8]
 800a0d6:	68f8      	ldr	r0, [r7, #12]
 800a0d8:	f000 f844 	bl	800a164 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>
 800a0dc:	4603      	mov	r3, r0
 800a0de:	4618      	mov	r0, r3
 800a0e0:	3710      	adds	r7, #16
 800a0e2:	46bd      	mov	sp, r7
 800a0e4:	bd80      	pop	{r7, pc}

0800a0e6 <_ZSt12__niter_wrapIPP12CommonSensorET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a0e6:	b480      	push	{r7}
 800a0e8:	b083      	sub	sp, #12
 800a0ea:	af00      	add	r7, sp, #0
 800a0ec:	6078      	str	r0, [r7, #4]
 800a0ee:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a0f0:	683b      	ldr	r3, [r7, #0]
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	370c      	adds	r7, #12
 800a0f6:	46bd      	mov	sp, r7
 800a0f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0fc:	4770      	bx	lr

0800a0fe <_ZNKSt13move_iteratorIPP6PGV100E4baseEv>:
      base() const
 800a0fe:	b480      	push	{r7}
 800a100:	b083      	sub	sp, #12
 800a102:	af00      	add	r7, sp, #0
 800a104:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4618      	mov	r0, r3
 800a10c:	370c      	adds	r7, #12
 800a10e:	46bd      	mov	sp, r7
 800a110:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a114:	4770      	bx	lr

0800a116 <_ZSt12__miter_baseIPP6PGV100ET_S3_>:
    __miter_base(_Iterator __it)
 800a116:	b480      	push	{r7}
 800a118:	b083      	sub	sp, #12
 800a11a:	af00      	add	r7, sp, #0
 800a11c:	6078      	str	r0, [r7, #4]
    { return __it; }
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	4618      	mov	r0, r3
 800a122:	370c      	adds	r7, #12
 800a124:	46bd      	mov	sp, r7
 800a126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a12a:	4770      	bx	lr

0800a12c <_ZSt14__copy_move_a1ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a1(_II __first, _II __last, _OI __result)
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b084      	sub	sp, #16
 800a130:	af00      	add	r7, sp, #0
 800a132:	60f8      	str	r0, [r7, #12]
 800a134:	60b9      	str	r1, [r7, #8]
 800a136:	607a      	str	r2, [r7, #4]
    { return std::__copy_move_a2<_IsMove>(__first, __last, __result); }
 800a138:	687a      	ldr	r2, [r7, #4]
 800a13a:	68b9      	ldr	r1, [r7, #8]
 800a13c:	68f8      	ldr	r0, [r7, #12]
 800a13e:	f000 f821 	bl	800a184 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>
 800a142:	4603      	mov	r3, r0
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <_ZSt12__niter_wrapIPP6PGV100ET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800a14c:	b480      	push	{r7}
 800a14e:	b083      	sub	sp, #12
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
 800a154:	6039      	str	r1, [r7, #0]
    { return __res; }
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	4618      	mov	r0, r3
 800a15a:	370c      	adds	r7, #12
 800a15c:	46bd      	mov	sp, r7
 800a15e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a162:	4770      	bx	lr

0800a164 <_ZSt14__copy_move_a2ILb1EPP12CommonSensorS2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800a164:	b580      	push	{r7, lr}
 800a166:	b084      	sub	sp, #16
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800a170:	687a      	ldr	r2, [r7, #4]
 800a172:	68b9      	ldr	r1, [r7, #8]
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f815 	bl	800a1a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>
 800a17a:	4603      	mov	r3, r0
    }
 800a17c:	4618      	mov	r0, r3
 800a17e:	3710      	adds	r7, #16
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <_ZSt14__copy_move_a2ILb1EPP6PGV100S2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
			      _Category>::__copy_m(__first, __last, __result);
 800a190:	687a      	ldr	r2, [r7, #4]
 800a192:	68b9      	ldr	r1, [r7, #8]
 800a194:	68f8      	ldr	r0, [r7, #12]
 800a196:	f000 f822 	bl	800a1de <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>
 800a19a:	4603      	mov	r3, r0
    }
 800a19c:	4618      	mov	r0, r3
 800a19e:	3710      	adds	r7, #16
 800a1a0:	46bd      	mov	sp, r7
 800a1a2:	bd80      	pop	{r7, pc}

0800a1a4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800a1a4:	b580      	push	{r7, lr}
 800a1a6:	b086      	sub	sp, #24
 800a1a8:	af00      	add	r7, sp, #0
 800a1aa:	60f8      	str	r0, [r7, #12]
 800a1ac:	60b9      	str	r1, [r7, #8]
 800a1ae:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	1ad3      	subs	r3, r2, r3
 800a1b6:	109b      	asrs	r3, r3, #2
 800a1b8:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800a1ba:	697b      	ldr	r3, [r7, #20]
 800a1bc:	2b00      	cmp	r3, #0
 800a1be:	d006      	beq.n	800a1ce <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP12CommonSensorEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800a1c0:	697b      	ldr	r3, [r7, #20]
 800a1c2:	009b      	lsls	r3, r3, #2
 800a1c4:	461a      	mov	r2, r3
 800a1c6:	68f9      	ldr	r1, [r7, #12]
 800a1c8:	6878      	ldr	r0, [r7, #4]
 800a1ca:	f019 ff5f 	bl	802408c <memmove>
	  return __result + _Num;
 800a1ce:	697b      	ldr	r3, [r7, #20]
 800a1d0:	009b      	lsls	r3, r3, #2
 800a1d2:	687a      	ldr	r2, [r7, #4]
 800a1d4:	4413      	add	r3, r2
	}
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	3718      	adds	r7, #24
 800a1da:	46bd      	mov	sp, r7
 800a1dc:	bd80      	pop	{r7, pc}

0800a1de <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800a1de:	b580      	push	{r7, lr}
 800a1e0:	b086      	sub	sp, #24
 800a1e2:	af00      	add	r7, sp, #0
 800a1e4:	60f8      	str	r0, [r7, #12]
 800a1e6:	60b9      	str	r1, [r7, #8]
 800a1e8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 800a1ea:	68ba      	ldr	r2, [r7, #8]
 800a1ec:	68fb      	ldr	r3, [r7, #12]
 800a1ee:	1ad3      	subs	r3, r2, r3
 800a1f0:	109b      	asrs	r3, r3, #2
 800a1f2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	2b00      	cmp	r3, #0
 800a1f8:	d006      	beq.n	800a208 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIP6PGV100EEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 800a1fa:	697b      	ldr	r3, [r7, #20]
 800a1fc:	009b      	lsls	r3, r3, #2
 800a1fe:	461a      	mov	r2, r3
 800a200:	68f9      	ldr	r1, [r7, #12]
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f019 ff42 	bl	802408c <memmove>
	  return __result + _Num;
 800a208:	697b      	ldr	r3, [r7, #20]
 800a20a:	009b      	lsls	r3, r3, #2
 800a20c:	687a      	ldr	r2, [r7, #4]
 800a20e:	4413      	add	r3, r2
	}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <_Z17HAL_UsartTransmitP20__UART_HandleTypeDefPhi>:
//these four-values must be in stm32f7xx_it.h or .c


//----------------------------------------------------------------------------------------UART(No interrupt)
int HAL_UsartTransmit(UART_HandleTypeDef* huartx, uint8_t* todata, int datalength)
{
 800a218:	b580      	push	{r7, lr}
 800a21a:	b084      	sub	sp, #16
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	60f8      	str	r0, [r7, #12]
 800a220:	60b9      	str	r1, [r7, #8]
 800a222:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Transmit_IT(huartx, todata, datalength);
    /* Process Locked */
    // __HAL_LOCK(huartx);

	return HAL_UART_Transmit(huartx, todata, datalength, 10);
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	b29a      	uxth	r2, r3
 800a228:	230a      	movs	r3, #10
 800a22a:	68b9      	ldr	r1, [r7, #8]
 800a22c:	68f8      	ldr	r0, [r7, #12]
 800a22e:	f005 f99f 	bl	800f570 <HAL_UART_Transmit>
 800a232:	4603      	mov	r3, r0
}
 800a234:	4618      	mov	r0, r3
 800a236:	3710      	adds	r7, #16
 800a238:	46bd      	mov	sp, r7
 800a23a:	bd80      	pop	{r7, pc}

0800a23c <_Z16HAL_UsartReceiveP20__UART_HandleTypeDefPhi>:

int HAL_UsartReceive(UART_HandleTypeDef* huartx, uint8_t* fromdata, int datalength)
{
 800a23c:	b580      	push	{r7, lr}
 800a23e:	b084      	sub	sp, #16
 800a240:	af00      	add	r7, sp, #0
 800a242:	60f8      	str	r0, [r7, #12]
 800a244:	60b9      	str	r1, [r7, #8]
 800a246:	607a      	str	r2, [r7, #4]
	//return HAL_UART_Receive_IT(huartx, fromdata, datalength);
    /* Process Locked */
    // __HAL_LOCK(huartx);

	return HAL_UART_Receive(huartx, fromdata, datalength, 10);
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	b29a      	uxth	r2, r3
 800a24c:	230a      	movs	r3, #10
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	68f8      	ldr	r0, [r7, #12]
 800a252:	f005 fa10 	bl	800f676 <HAL_UART_Receive>
 800a256:	4603      	mov	r3, r0
}
 800a258:	4618      	mov	r0, r3
 800a25a:	3710      	adds	r7, #16
 800a25c:	46bd      	mov	sp, r7
 800a25e:	bd80      	pop	{r7, pc}

0800a260 <_Z15HAL_CANTransmitP19__CAN_HandleTypeDefPK19CAN_TxHeaderTypeDefPKhPm>:


//----------------------------------------------------------------------------------------CANOpen(No interrupt)
int HAL_CANTransmit(CAN_HandleTypeDef* hcanx, const CAN_TxHeaderTypeDef *pHeader,
					const uint8_t *aData, uint32_t *pTxMailbox)
{
 800a260:	b580      	push	{r7, lr}
 800a262:	b084      	sub	sp, #16
 800a264:	af00      	add	r7, sp, #0
 800a266:	60f8      	str	r0, [r7, #12]
 800a268:	60b9      	str	r1, [r7, #8]
 800a26a:	607a      	str	r2, [r7, #4]
 800a26c:	603b      	str	r3, [r7, #0]
	return HAL_CAN_AddTxMessage(hcanx, pHeader, aData, pTxMailbox);
 800a26e:	683b      	ldr	r3, [r7, #0]
 800a270:	687a      	ldr	r2, [r7, #4]
 800a272:	68b9      	ldr	r1, [r7, #8]
 800a274:	68f8      	ldr	r0, [r7, #12]
 800a276:	f001 fa68 	bl	800b74a <HAL_CAN_AddTxMessage>
 800a27a:	4603      	mov	r3, r0
}
 800a27c:	4618      	mov	r0, r3
 800a27e:	3710      	adds	r7, #16
 800a280:	46bd      	mov	sp, r7
 800a282:	bd80      	pop	{r7, pc}

0800a284 <_Z14HAL_CANReceiveP19__CAN_HandleTypeDefP19CAN_RxHeaderTypeDefPh>:

int HAL_CANReceive(CAN_HandleTypeDef *hcanx, CAN_RxHeaderTypeDef *pHeader, uint8_t *aData)
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b084      	sub	sp, #16
 800a288:	af00      	add	r7, sp, #0
 800a28a:	60f8      	str	r0, [r7, #12]
 800a28c:	60b9      	str	r1, [r7, #8]
 800a28e:	607a      	str	r2, [r7, #4]
	//while(HAL_CAN_GetRxFifoFillLevel(hcanx, CAN_RX_FIFO0 )!= HAL_OK)
	return HAL_CAN_GetRxMessage(hcanx, CAN_RX_FIFO0, pHeader, aData);
 800a290:	687b      	ldr	r3, [r7, #4]
 800a292:	68ba      	ldr	r2, [r7, #8]
 800a294:	2100      	movs	r1, #0
 800a296:	68f8      	ldr	r0, [r7, #12]
 800a298:	f001 fb80 	bl	800b99c <HAL_CAN_GetRxMessage>
 800a29c:	4603      	mov	r3, r0
}
 800a29e:	4618      	mov	r0, r3
 800a2a0:	3710      	adds	r7, #16
 800a2a2:	46bd      	mov	sp, r7
 800a2a4:	bd80      	pop	{r7, pc}

0800a2a6 <HAL_CAN_RxFifo0MsgPendingCallback>:



void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 800a2a6:	b580      	push	{r7, lr}
 800a2a8:	b08c      	sub	sp, #48	; 0x30
 800a2aa:	af00      	add	r7, sp, #0
 800a2ac:	6078      	str	r0, [r7, #4]
	CAN_RxHeaderTypeDef RxHeader;
	uint8_t RxData[8] = {0,};
 800a2ae:	2300      	movs	r3, #0
 800a2b0:	60fb      	str	r3, [r7, #12]
 800a2b2:	2300      	movs	r3, #0
 800a2b4:	613b      	str	r3, [r7, #16]

  /* Get RX message */
  if (HAL_CAN_GetRxMessage(CanHandle, CAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK)
 800a2b6:	f107 030c 	add.w	r3, r7, #12
 800a2ba:	f107 0214 	add.w	r2, r7, #20
 800a2be:	2100      	movs	r1, #0
 800a2c0:	6878      	ldr	r0, [r7, #4]
 800a2c2:	f001 fb6b 	bl	800b99c <HAL_CAN_GetRxMessage>
 800a2c6:	4603      	mov	r3, r0
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	bf14      	ite	ne
 800a2cc:	2301      	movne	r3, #1
 800a2ce:	2300      	moveq	r3, #0
 800a2d0:	b2db      	uxtb	r3, r3
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d001      	beq.n	800a2da <HAL_CAN_RxFifo0MsgPendingCallback+0x34>
  {
    /* Reception Error */
    Error_Handler();
 800a2d6:	f7f7 fde3 	bl	8001ea0 <Error_Handler>
  }

}
 800a2da:	bf00      	nop
 800a2dc:	3730      	adds	r7, #48	; 0x30
 800a2de:	46bd      	mov	sp, r7
 800a2e0:	bd80      	pop	{r7, pc}
	...

0800a2e4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 800a2e4:	b480      	push	{r7}
 800a2e6:	b085      	sub	sp, #20
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	4a07      	ldr	r2, [pc, #28]	; (800a310 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2f4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	4a06      	ldr	r2, [pc, #24]	; (800a314 <vApplicationGetIdleTaskMemory+0x30>)
 800a2fa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a302:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 800a304:	bf00      	nop
 800a306:	3714      	adds	r7, #20
 800a308:	46bd      	mov	sp, r7
 800a30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30e:	4770      	bx	lr
 800a310:	200008a4 	.word	0x200008a4
 800a314:	20000958 	.word	0x20000958

0800a318 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 800a318:	b480      	push	{r7}
 800a31a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800a31c:	f3bf 8f4f 	dsb	sy
}
 800a320:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a322:	f3bf 8f6f 	isb	sy
}
 800a326:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800a328:	4b0d      	ldr	r3, [pc, #52]	; (800a360 <SCB_EnableICache+0x48>)
 800a32a:	2200      	movs	r2, #0
 800a32c:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800a330:	f3bf 8f4f 	dsb	sy
}
 800a334:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a336:	f3bf 8f6f 	isb	sy
}
 800a33a:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800a33c:	4b08      	ldr	r3, [pc, #32]	; (800a360 <SCB_EnableICache+0x48>)
 800a33e:	695b      	ldr	r3, [r3, #20]
 800a340:	4a07      	ldr	r2, [pc, #28]	; (800a360 <SCB_EnableICache+0x48>)
 800a342:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800a346:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a348:	f3bf 8f4f 	dsb	sy
}
 800a34c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a34e:	f3bf 8f6f 	isb	sy
}
 800a352:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 800a354:	bf00      	nop
 800a356:	46bd      	mov	sp, r7
 800a358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a35c:	4770      	bx	lr
 800a35e:	bf00      	nop
 800a360:	e000ed00 	.word	0xe000ed00

0800a364 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 800a364:	b480      	push	{r7}
 800a366:	b085      	sub	sp, #20
 800a368:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 800a36a:	4b25      	ldr	r3, [pc, #148]	; (800a400 <SCB_EnableDCache+0x9c>)
 800a36c:	2200      	movs	r2, #0
 800a36e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800a372:	f3bf 8f4f 	dsb	sy
}
 800a376:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800a378:	4b21      	ldr	r3, [pc, #132]	; (800a400 <SCB_EnableDCache+0x9c>)
 800a37a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800a37e:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	0b5b      	lsrs	r3, r3, #13
 800a384:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800a388:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	08db      	lsrs	r3, r3, #3
 800a38e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800a392:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	015a      	lsls	r2, r3, #5
 800a398:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 800a39c:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800a39e:	68ba      	ldr	r2, [r7, #8]
 800a3a0:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800a3a2:	4917      	ldr	r1, [pc, #92]	; (800a400 <SCB_EnableDCache+0x9c>)
 800a3a4:	4313      	orrs	r3, r2
 800a3a6:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800a3aa:	68bb      	ldr	r3, [r7, #8]
 800a3ac:	1e5a      	subs	r2, r3, #1
 800a3ae:	60ba      	str	r2, [r7, #8]
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bf14      	ite	ne
 800a3b4:	2301      	movne	r3, #1
 800a3b6:	2300      	moveq	r3, #0
 800a3b8:	b2db      	uxtb	r3, r3
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d000      	beq.n	800a3c0 <SCB_EnableDCache+0x5c>
      do {
 800a3be:	e7e9      	b.n	800a394 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	1e5a      	subs	r2, r3, #1
 800a3c4:	60fa      	str	r2, [r7, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	bf14      	ite	ne
 800a3ca:	2301      	movne	r3, #1
 800a3cc:	2300      	moveq	r3, #0
 800a3ce:	b2db      	uxtb	r3, r3
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d000      	beq.n	800a3d6 <SCB_EnableDCache+0x72>
    do {
 800a3d4:	e7d9      	b.n	800a38a <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 800a3d6:	f3bf 8f4f 	dsb	sy
}
 800a3da:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 800a3dc:	4b08      	ldr	r3, [pc, #32]	; (800a400 <SCB_EnableDCache+0x9c>)
 800a3de:	695b      	ldr	r3, [r3, #20]
 800a3e0:	4a07      	ldr	r2, [pc, #28]	; (800a400 <SCB_EnableDCache+0x9c>)
 800a3e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a3e6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a3e8:	f3bf 8f4f 	dsb	sy
}
 800a3ec:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a3ee:	f3bf 8f6f 	isb	sy
}
 800a3f2:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 800a3f4:	bf00      	nop
 800a3f6:	3714      	adds	r7, #20
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3fe:	4770      	bx	lr
 800a400:	e000ed00 	.word	0xe000ed00

0800a404 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800a404:	b5b0      	push	{r4, r5, r7, lr}
 800a406:	b096      	sub	sp, #88	; 0x58
 800a408:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 800a40a:	f7ff ff85 	bl	800a318 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800a40e:	f7ff ffa9 	bl	800a364 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800a412:	f000 fedf 	bl	800b1d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800a416:	f7f7 f9ab 	bl	8001770 <SystemClock_Config>

  /* USER CODE END SysInit */

  /* USER CODE BEGIN 2 */

 	init_stm32f746();
 800a41a:	f7f7 f993 	bl	8001744 <init_stm32f746>

	Dprintf("Stm32f746 Initializing is complete!\n");
 800a41e:	482c      	ldr	r0, [pc, #176]	; (800a4d0 <main+0xcc>)
 800a420:	f7f6 fd8c 	bl	8000f3c <_Z7DprintfPKcz>

	/* USER CODE BEGIN 5 */
	//debug init
	Debug_Uart_Init();
 800a424:	f7f6 fdd0 	bl	8000fc8 <_Z15Debug_Uart_Initv>

	Dprintf("Module Initializing\n");
 800a428:	482a      	ldr	r0, [pc, #168]	; (800a4d4 <main+0xd0>)
 800a42a:	f7f6 fd87 	bl	8000f3c <_Z7DprintfPKcz>
	HAL_Delay(5000);
 800a42e:	f241 3088 	movw	r0, #5000	; 0x1388
 800a432:	f000 fefd 	bl	800b230 <HAL_Delay>

	//sensor manager initialize
	//need some times for boot pgv100
	SensorManager::GetInstance().CommonSensorInitialize();
 800a436:	f7fd ff73 	bl	8008320 <_ZN13SensorManager11GetInstanceEv>
 800a43a:	4603      	mov	r3, r0
 800a43c:	4618      	mov	r0, r3
 800a43e:	f7fe f91d 	bl	800867c <_ZN13SensorManager22CommonSensorInitializeEv>
	SensorManager::GetInstance().PGV100Initialize();
 800a442:	f7fd ff6d 	bl	8008320 <_ZN13SensorManager11GetInstanceEv>
 800a446:	4603      	mov	r3, r0
 800a448:	4618      	mov	r0, r3
 800a44a:	f7fe f9e5 	bl	8008818 <_ZN13SensorManager16PGV100InitializeEv>

	bg95test.Initialization();
 800a44e:	4822      	ldr	r0, [pc, #136]	; (800a4d8 <main+0xd4>)
 800a450:	f7f8 fa6f 	bl	8002932 <_ZN4BG9514InitializationEv>

	Dprintf("Module Initializing is complete!\n");
 800a454:	4821      	ldr	r0, [pc, #132]	; (800a4dc <main+0xd8>)
 800a456:	f7f6 fd71 	bl	8000f3c <_Z7DprintfPKcz>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of InitTask */
  osThreadDef(InitTask, StartInitTask, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800a45a:	4b21      	ldr	r3, [pc, #132]	; (800a4e0 <main+0xdc>)
 800a45c:	f107 043c 	add.w	r4, r7, #60	; 0x3c
 800a460:	461d      	mov	r5, r3
 800a462:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a464:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a466:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a46a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  InitTaskHandle = osThreadCreate(osThread(InitTask), NULL);
 800a46e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800a472:	2100      	movs	r1, #0
 800a474:	4618      	mov	r0, r3
 800a476:	f007 fc6f 	bl	8011d58 <osThreadCreate>
 800a47a:	4603      	mov	r3, r0
 800a47c:	4a19      	ldr	r2, [pc, #100]	; (800a4e4 <main+0xe0>)
 800a47e:	6013      	str	r3, [r2, #0]

  /* definition and creation of CommonSensorTask */
  osThreadDef(CommonSensorTas, StartCommonSensorTask, osPriorityLow, 0, configMINIMAL_STACK_SIZE);
 800a480:	4b19      	ldr	r3, [pc, #100]	; (800a4e8 <main+0xe4>)
 800a482:	f107 0420 	add.w	r4, r7, #32
 800a486:	461d      	mov	r5, r3
 800a488:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a48a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a48c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a490:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  CommonSensorTasHandle = osThreadCreate(osThread(CommonSensorTas), NULL);
 800a494:	f107 0320 	add.w	r3, r7, #32
 800a498:	2100      	movs	r1, #0
 800a49a:	4618      	mov	r0, r3
 800a49c:	f007 fc5c 	bl	8011d58 <osThreadCreate>
 800a4a0:	4603      	mov	r3, r0
 800a4a2:	4a12      	ldr	r2, [pc, #72]	; (800a4ec <main+0xe8>)
 800a4a4:	6013      	str	r3, [r2, #0]
  /* definition and creation of PGV100Task */
  //osThreadDef(PGV100Task, StartPGV100Task, osPriorityAboveNormal, 0, configMINIMAL_STACK_SIZE);
  //PGV100TaskHandle = osThreadCreate(osThread(PGV100Task), NULL);

  /* definition and creation of ETHTask */
  osThreadDef(ETHTask, StartETHTask, osPriorityNormal, 0, configMINIMAL_STACK_SIZE);
 800a4a6:	4b12      	ldr	r3, [pc, #72]	; (800a4f0 <main+0xec>)
 800a4a8:	1d3c      	adds	r4, r7, #4
 800a4aa:	461d      	mov	r5, r3
 800a4ac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a4ae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a4b0:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800a4b4:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  ETHTaskHandle = osThreadCreate(osThread(ETHTask), NULL);
 800a4b8:	1d3b      	adds	r3, r7, #4
 800a4ba:	2100      	movs	r1, #0
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f007 fc4b 	bl	8011d58 <osThreadCreate>
 800a4c2:	4603      	mov	r3, r0
 800a4c4:	4a0b      	ldr	r2, [pc, #44]	; (800a4f4 <main+0xf0>)
 800a4c6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 800a4c8:	f007 fc2f 	bl	8011d2a <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800a4cc:	e7fe      	b.n	800a4cc <main+0xc8>
 800a4ce:	bf00      	nop
 800a4d0:	08025698 	.word	0x08025698
 800a4d4:	080256c0 	.word	0x080256c0
 800a4d8:	20001968 	.word	0x20001968
 800a4dc:	080256d8 	.word	0x080256d8
 800a4e0:	080256fc 	.word	0x080256fc
 800a4e4:	20001958 	.word	0x20001958
 800a4e8:	08025718 	.word	0x08025718
 800a4ec:	2000195c 	.word	0x2000195c
 800a4f0:	08025734 	.word	0x08025734
 800a4f4:	20001960 	.word	0x20001960

0800a4f8 <_Z13StartInitTaskPKv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartInitTask */
void StartInitTask(void const *argument)
{
 800a4f8:	b580      	push	{r7, lr}
 800a4fa:	b082      	sub	sp, #8
 800a4fc:	af00      	add	r7, sp, #0
 800a4fe:	6078      	str	r0, [r7, #4]
	Dprintf("Ethernet Initializing\n");
 800a500:	4809      	ldr	r0, [pc, #36]	; (800a528 <_Z13StartInitTaskPKv+0x30>)
 800a502:	f7f6 fd1b 	bl	8000f3c <_Z7DprintfPKcz>

	/* init code for LWIP */
	MX_LWIP_Init();
 800a506:	f006 fdb7 	bl	8011078 <MX_LWIP_Init>

	//UdpRtosServerInit();
	UdpClientInit();
 800a50a:	f7f7 f907 	bl	800171c <_Z13UdpClientInitv>
	TcpServerInit();
 800a50e:	f7f7 f853 	bl	80015b8 <_Z13TcpServerInitv>

	Dprintf("Ethernet Initializing is complete!\n");
 800a512:	4806      	ldr	r0, [pc, #24]	; (800a52c <_Z13StartInitTaskPKv+0x34>)
 800a514:	f7f6 fd12 	bl	8000f3c <_Z7DprintfPKcz>

	/* Infinite loop */
	for(;;)
	{
		osDelay(1000);  //1000ms
 800a518:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800a51c:	f007 fc68 	bl	8011df0 <osDelay>
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		vTaskDelete(NULL);
 800a520:	2000      	movs	r0, #0
 800a522:	f009 f959 	bl	80137d8 <vTaskDelete>
		osDelay(1000);  //1000ms
 800a526:	e7f7      	b.n	800a518 <_Z13StartInitTaskPKv+0x20>
 800a528:	08025750 	.word	0x08025750
 800a52c:	08025768 	.word	0x08025768

0800a530 <_Z21StartCommonSensorTaskPKv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCommonSensorTask */
void StartCommonSensorTask(void const *argument)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b084      	sub	sp, #16
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCommonSensorTask */
	const TickType_t xTime = pdMS_TO_TICKS(1);
 800a538:	2301      	movs	r3, #1
 800a53a:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800a53c:	f009 fbb2 	bl	8013ca4 <xTaskGetTickCount>
 800a540:	4603      	mov	r3, r0
 800a542:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	//vTaskDelayUntil(&xLastWakeTime, xTime);
	SensorManager::GetInstance().CommonSensorDrive();
 800a544:	f7fd feec 	bl	8008320 <_ZN13SensorManager11GetInstanceEv>
 800a548:	4603      	mov	r3, r0
 800a54a:	4618      	mov	r0, r3
 800a54c:	f7fe f8a4 	bl	8008698 <_ZN13SensorManager17CommonSensorDriveEv>
	sensorsval = SensorManager::GetInstance().CommonSensorGetAllData();
 800a550:	f7fd fee6 	bl	8008320 <_ZN13SensorManager11GetInstanceEv>
 800a554:	4603      	mov	r3, r0
 800a556:	4618      	mov	r0, r3
 800a558:	f7fe f916 	bl	8008788 <_ZNK13SensorManager22CommonSensorGetAllDataEv>
 800a55c:	4603      	mov	r3, r0
 800a55e:	461a      	mov	r2, r3
 800a560:	4b05      	ldr	r3, [pc, #20]	; (800a578 <_Z21StartCommonSensorTaskPKv+0x48>)
 800a562:	801a      	strh	r2, [r3, #0]
    osDelay(1);
 800a564:	2001      	movs	r0, #1
 800a566:	f007 fc43 	bl	8011df0 <osDelay>
	vTaskDelayUntil(&xLastWakeTime, xTime);
 800a56a:	f107 0308 	add.w	r3, r7, #8
 800a56e:	2101      	movs	r1, #1
 800a570:	4618      	mov	r0, r3
 800a572:	f009 f9c3 	bl	80138fc <vTaskDelayUntil>
	SensorManager::GetInstance().CommonSensorDrive();
 800a576:	e7e5      	b.n	800a544 <_Z21StartCommonSensorTaskPKv+0x14>
 800a578:	20001964 	.word	0x20001964

0800a57c <_Z12StartETHTaskPKv>:
/* USER CODE END Header_StartETHTask */



void StartETHTask(void const *argument)
{
 800a57c:	b580      	push	{r7, lr}
 800a57e:	b084      	sub	sp, #16
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartETHTask */
	const TickType_t xTime = pdMS_TO_TICKS(50);
 800a584:	2332      	movs	r3, #50	; 0x32
 800a586:	60fb      	str	r3, [r7, #12]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 800a588:	f009 fb8c 	bl	8013ca4 <xTaskGetTickCount>
 800a58c:	4603      	mov	r3, r0
 800a58e:	60bb      	str	r3, [r7, #8]
  /* Infinite loop */
  for(;;)
  {
	  	DebugDrive();
 800a590:	f7f6 fd30 	bl	8000ff4 <_Z10DebugDrivev>
	  	bg95test.Drive();
 800a594:	4804      	ldr	r0, [pc, #16]	; (800a5a8 <_Z12StartETHTaskPKv+0x2c>)
 800a596:	f7f8 f9da 	bl	800294e <_ZN4BG955DriveEv>
		errup = SensorManager::GetInstance().PGV100IsErrUp();
*/
		//vTaskDelayUntil(&xLastWakeTime, xTime);
		//ethernetif_input(&gnetif);
		//sys_check_timeouts();
		vTaskDelayUntil(&xLastWakeTime, xTime);
 800a59a:	f107 0308 	add.w	r3, r7, #8
 800a59e:	2132      	movs	r1, #50	; 0x32
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	f009 f9ab 	bl	80138fc <vTaskDelayUntil>
	  	DebugDrive();
 800a5a6:	e7f3      	b.n	800a590 <_Z12StartETHTaskPKv+0x14>
 800a5a8:	20001968 	.word	0x20001968

0800a5ac <_Z41__static_initialization_and_destruction_0ii>:
		//osDelay(1);
  }
  /* USER CODE END StartETHTask */
}
 800a5ac:	b580      	push	{r7, lr}
 800a5ae:	b082      	sub	sp, #8
 800a5b0:	af00      	add	r7, sp, #0
 800a5b2:	6078      	str	r0, [r7, #4]
 800a5b4:	6039      	str	r1, [r7, #0]
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	2b01      	cmp	r3, #1
 800a5ba:	d108      	bne.n	800a5ce <_Z41__static_initialization_and_destruction_0ii+0x22>
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5c2:	4293      	cmp	r3, r2
 800a5c4:	d103      	bne.n	800a5ce <_Z41__static_initialization_and_destruction_0ii+0x22>
BG95 bg95test(&hcan1);
 800a5c6:	4909      	ldr	r1, [pc, #36]	; (800a5ec <_Z41__static_initialization_and_destruction_0ii+0x40>)
 800a5c8:	4809      	ldr	r0, [pc, #36]	; (800a5f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a5ca:	f7f7 fcc7 	bl	8001f5c <_ZN4BG95C1EP19__CAN_HandleTypeDef>
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d107      	bne.n	800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a5d4:	683b      	ldr	r3, [r7, #0]
 800a5d6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800a5da:	4293      	cmp	r3, r2
 800a5dc:	d102      	bne.n	800a5e4 <_Z41__static_initialization_and_destruction_0ii+0x38>
 800a5de:	4804      	ldr	r0, [pc, #16]	; (800a5f0 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 800a5e0:	f7f7 fd14 	bl	800200c <_ZN4BG95D1Ev>
}
 800a5e4:	bf00      	nop
 800a5e6:	3708      	adds	r7, #8
 800a5e8:	46bd      	mov	sp, r7
 800a5ea:	bd80      	pop	{r7, pc}
 800a5ec:	200004e0 	.word	0x200004e0
 800a5f0:	20001968 	.word	0x20001968

0800a5f4 <_GLOBAL__sub_I_InitTaskHandle>:
 800a5f4:	b580      	push	{r7, lr}
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a5fc:	2001      	movs	r0, #1
 800a5fe:	f7ff ffd5 	bl	800a5ac <_Z41__static_initialization_and_destruction_0ii>
 800a602:	bd80      	pop	{r7, pc}

0800a604 <_GLOBAL__sub_D_InitTaskHandle>:
 800a604:	b580      	push	{r7, lr}
 800a606:	af00      	add	r7, sp, #0
 800a608:	f64f 71ff 	movw	r1, #65535	; 0xffff
 800a60c:	2000      	movs	r0, #0
 800a60e:	f7ff ffcd 	bl	800a5ac <_Z41__static_initialization_and_destruction_0ii>
 800a612:	bd80      	pop	{r7, pc}

0800a614 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800a614:	b580      	push	{r7, lr}
 800a616:	b082      	sub	sp, #8
 800a618:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800a61a:	4b11      	ldr	r3, [pc, #68]	; (800a660 <HAL_MspInit+0x4c>)
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	4a10      	ldr	r2, [pc, #64]	; (800a660 <HAL_MspInit+0x4c>)
 800a620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a624:	6413      	str	r3, [r2, #64]	; 0x40
 800a626:	4b0e      	ldr	r3, [pc, #56]	; (800a660 <HAL_MspInit+0x4c>)
 800a628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a62a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a62e:	607b      	str	r3, [r7, #4]
 800a630:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a632:	4b0b      	ldr	r3, [pc, #44]	; (800a660 <HAL_MspInit+0x4c>)
 800a634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a636:	4a0a      	ldr	r2, [pc, #40]	; (800a660 <HAL_MspInit+0x4c>)
 800a638:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a63c:	6453      	str	r3, [r2, #68]	; 0x44
 800a63e:	4b08      	ldr	r3, [pc, #32]	; (800a660 <HAL_MspInit+0x4c>)
 800a640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a642:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a646:	603b      	str	r3, [r7, #0]
 800a648:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800a64a:	2200      	movs	r2, #0
 800a64c:	210f      	movs	r1, #15
 800a64e:	f06f 0001 	mvn.w	r0, #1
 800a652:	f001 fdc1 	bl	800c1d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800a656:	bf00      	nop
 800a658:	3708      	adds	r7, #8
 800a65a:	46bd      	mov	sp, r7
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	40023800 	.word	0x40023800

0800a664 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 800a664:	b580      	push	{r7, lr}
 800a666:	b08a      	sub	sp, #40	; 0x28
 800a668:	af00      	add	r7, sp, #0
 800a66a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a66c:	f107 0314 	add.w	r3, r7, #20
 800a670:	2200      	movs	r2, #0
 800a672:	601a      	str	r2, [r3, #0]
 800a674:	605a      	str	r2, [r3, #4]
 800a676:	609a      	str	r2, [r3, #8]
 800a678:	60da      	str	r2, [r3, #12]
 800a67a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	4a1b      	ldr	r2, [pc, #108]	; (800a6f0 <HAL_CAN_MspInit+0x8c>)
 800a682:	4293      	cmp	r3, r2
 800a684:	d130      	bne.n	800a6e8 <HAL_CAN_MspInit+0x84>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800a686:	4b1b      	ldr	r3, [pc, #108]	; (800a6f4 <HAL_CAN_MspInit+0x90>)
 800a688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a68a:	4a1a      	ldr	r2, [pc, #104]	; (800a6f4 <HAL_CAN_MspInit+0x90>)
 800a68c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800a690:	6413      	str	r3, [r2, #64]	; 0x40
 800a692:	4b18      	ldr	r3, [pc, #96]	; (800a6f4 <HAL_CAN_MspInit+0x90>)
 800a694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a696:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a69a:	613b      	str	r3, [r7, #16]
 800a69c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a69e:	4b15      	ldr	r3, [pc, #84]	; (800a6f4 <HAL_CAN_MspInit+0x90>)
 800a6a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6a2:	4a14      	ldr	r2, [pc, #80]	; (800a6f4 <HAL_CAN_MspInit+0x90>)
 800a6a4:	f043 0301 	orr.w	r3, r3, #1
 800a6a8:	6313      	str	r3, [r2, #48]	; 0x30
 800a6aa:	4b12      	ldr	r3, [pc, #72]	; (800a6f4 <HAL_CAN_MspInit+0x90>)
 800a6ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6ae:	f003 0301 	and.w	r3, r3, #1
 800a6b2:	60fb      	str	r3, [r7, #12]
 800a6b4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800a6b6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a6ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a6bc:	2302      	movs	r3, #2
 800a6be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a6c0:	2300      	movs	r3, #0
 800a6c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a6c4:	2303      	movs	r3, #3
 800a6c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800a6c8:	2309      	movs	r3, #9
 800a6ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a6cc:	f107 0314 	add.w	r3, r7, #20
 800a6d0:	4619      	mov	r1, r3
 800a6d2:	4809      	ldr	r0, [pc, #36]	; (800a6f8 <HAL_CAN_MspInit+0x94>)
 800a6d4:	f003 f878 	bl	800d7c8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 8, 0);
 800a6d8:	2200      	movs	r2, #0
 800a6da:	2108      	movs	r1, #8
 800a6dc:	2014      	movs	r0, #20
 800a6de:	f001 fd7b 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800a6e2:	2014      	movs	r0, #20
 800a6e4:	f001 fd94 	bl	800c210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800a6e8:	bf00      	nop
 800a6ea:	3728      	adds	r7, #40	; 0x28
 800a6ec:	46bd      	mov	sp, r7
 800a6ee:	bd80      	pop	{r7, pc}
 800a6f0:	40006400 	.word	0x40006400
 800a6f4:	40023800 	.word	0x40023800
 800a6f8:	40020000 	.word	0x40020000

0800a6fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800a6fc:	b580      	push	{r7, lr}
 800a6fe:	b084      	sub	sp, #16
 800a700:	af00      	add	r7, sp, #0
 800a702:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	4a0d      	ldr	r2, [pc, #52]	; (800a740 <HAL_TIM_Base_MspInit+0x44>)
 800a70a:	4293      	cmp	r3, r2
 800a70c:	d113      	bne.n	800a736 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 800a70e:	4b0d      	ldr	r3, [pc, #52]	; (800a744 <HAL_TIM_Base_MspInit+0x48>)
 800a710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a712:	4a0c      	ldr	r2, [pc, #48]	; (800a744 <HAL_TIM_Base_MspInit+0x48>)
 800a714:	f043 0320 	orr.w	r3, r3, #32
 800a718:	6413      	str	r3, [r2, #64]	; 0x40
 800a71a:	4b0a      	ldr	r3, [pc, #40]	; (800a744 <HAL_TIM_Base_MspInit+0x48>)
 800a71c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a71e:	f003 0320 	and.w	r3, r3, #32
 800a722:	60fb      	str	r3, [r7, #12]
 800a724:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 7, 0);
 800a726:	2200      	movs	r2, #0
 800a728:	2107      	movs	r1, #7
 800a72a:	2037      	movs	r0, #55	; 0x37
 800a72c:	f001 fd54 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800a730:	2037      	movs	r0, #55	; 0x37
 800a732:	f001 fd6d 	bl	800c210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 800a736:	bf00      	nop
 800a738:	3710      	adds	r7, #16
 800a73a:	46bd      	mov	sp, r7
 800a73c:	bd80      	pop	{r7, pc}
 800a73e:	bf00      	nop
 800a740:	40001400 	.word	0x40001400
 800a744:	40023800 	.word	0x40023800

0800a748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800a748:	b580      	push	{r7, lr}
 800a74a:	b0b4      	sub	sp, #208	; 0xd0
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a750:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a754:	2200      	movs	r2, #0
 800a756:	601a      	str	r2, [r3, #0]
 800a758:	605a      	str	r2, [r3, #4]
 800a75a:	609a      	str	r2, [r3, #8]
 800a75c:	60da      	str	r2, [r3, #12]
 800a75e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800a760:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a764:	2284      	movs	r2, #132	; 0x84
 800a766:	2100      	movs	r1, #0
 800a768:	4618      	mov	r0, r3
 800a76a:	f019 fca9 	bl	80240c0 <memset>
  if(huart->Instance==UART4)
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4aa6      	ldr	r2, [pc, #664]	; (800aa0c <HAL_UART_MspInit+0x2c4>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d146      	bne.n	800a806 <HAL_UART_MspInit+0xbe>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 800a778:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a77c:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800a77e:	2300      	movs	r3, #0
 800a780:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a784:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a788:	4618      	mov	r0, r3
 800a78a:	f003 ff07 	bl	800e59c <HAL_RCCEx_PeriphCLKConfig>
 800a78e:	4603      	mov	r3, r0
 800a790:	2b00      	cmp	r3, #0
 800a792:	d001      	beq.n	800a798 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 800a794:	f7f7 fb84 	bl	8001ea0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800a798:	4b9d      	ldr	r3, [pc, #628]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a79c:	4a9c      	ldr	r2, [pc, #624]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a79e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800a7a2:	6413      	str	r3, [r2, #64]	; 0x40
 800a7a4:	4b9a      	ldr	r3, [pc, #616]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800a7ac:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a7b0:	4b97      	ldr	r3, [pc, #604]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a7b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7b4:	4a96      	ldr	r2, [pc, #600]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a7b6:	f043 0304 	orr.w	r3, r3, #4
 800a7ba:	6313      	str	r3, [r2, #48]	; 0x30
 800a7bc:	4b94      	ldr	r3, [pc, #592]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a7be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a7c0:	f003 0304 	and.w	r3, r3, #4
 800a7c4:	633b      	str	r3, [r7, #48]	; 0x30
 800a7c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a7c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a7cc:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a7d0:	2302      	movs	r3, #2
 800a7d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a7dc:	2303      	movs	r3, #3
 800a7de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800a7e2:	2308      	movs	r3, #8
 800a7e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a7e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a7ec:	4619      	mov	r1, r3
 800a7ee:	4889      	ldr	r0, [pc, #548]	; (800aa14 <HAL_UART_MspInit+0x2cc>)
 800a7f0:	f002 ffea 	bl	800d7c8 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 8, 0);
 800a7f4:	2200      	movs	r2, #0
 800a7f6:	2108      	movs	r1, #8
 800a7f8:	2034      	movs	r0, #52	; 0x34
 800a7fa:	f001 fced 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 800a7fe:	2034      	movs	r0, #52	; 0x34
 800a800:	f001 fd06 	bl	800c210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800a804:	e15e      	b.n	800aac4 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==UART5)
 800a806:	687b      	ldr	r3, [r7, #4]
 800a808:	681b      	ldr	r3, [r3, #0]
 800a80a:	4a83      	ldr	r2, [pc, #524]	; (800aa18 <HAL_UART_MspInit+0x2d0>)
 800a80c:	4293      	cmp	r3, r2
 800a80e:	d167      	bne.n	800a8e0 <HAL_UART_MspInit+0x198>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800a810:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a814:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 800a816:	2300      	movs	r3, #0
 800a818:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a81c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a820:	4618      	mov	r0, r3
 800a822:	f003 febb 	bl	800e59c <HAL_RCCEx_PeriphCLKConfig>
 800a826:	4603      	mov	r3, r0
 800a828:	2b00      	cmp	r3, #0
 800a82a:	d001      	beq.n	800a830 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 800a82c:	f7f7 fb38 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800a830:	4b77      	ldr	r3, [pc, #476]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a834:	4a76      	ldr	r2, [pc, #472]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a836:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a83a:	6413      	str	r3, [r2, #64]	; 0x40
 800a83c:	4b74      	ldr	r3, [pc, #464]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a83e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a840:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a844:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a848:	4b71      	ldr	r3, [pc, #452]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a84a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a84c:	4a70      	ldr	r2, [pc, #448]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a84e:	f043 0304 	orr.w	r3, r3, #4
 800a852:	6313      	str	r3, [r2, #48]	; 0x30
 800a854:	4b6e      	ldr	r3, [pc, #440]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a858:	f003 0304 	and.w	r3, r3, #4
 800a85c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a85e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800a860:	4b6b      	ldr	r3, [pc, #428]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a864:	4a6a      	ldr	r2, [pc, #424]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a866:	f043 0308 	orr.w	r3, r3, #8
 800a86a:	6313      	str	r3, [r2, #48]	; 0x30
 800a86c:	4b68      	ldr	r3, [pc, #416]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a86e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a870:	f003 0308 	and.w	r3, r3, #8
 800a874:	627b      	str	r3, [r7, #36]	; 0x24
 800a876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800a878:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800a87c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a880:	2302      	movs	r3, #2
 800a882:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a886:	2300      	movs	r3, #0
 800a888:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a88c:	2303      	movs	r3, #3
 800a88e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a892:	2308      	movs	r3, #8
 800a894:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a898:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a89c:	4619      	mov	r1, r3
 800a89e:	485d      	ldr	r0, [pc, #372]	; (800aa14 <HAL_UART_MspInit+0x2cc>)
 800a8a0:	f002 ff92 	bl	800d7c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800a8a4:	2304      	movs	r3, #4
 800a8a6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a8aa:	2302      	movs	r3, #2
 800a8ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a8b6:	2303      	movs	r3, #3
 800a8b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800a8bc:	2308      	movs	r3, #8
 800a8be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800a8c2:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a8c6:	4619      	mov	r1, r3
 800a8c8:	4854      	ldr	r0, [pc, #336]	; (800aa1c <HAL_UART_MspInit+0x2d4>)
 800a8ca:	f002 ff7d 	bl	800d7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	2105      	movs	r1, #5
 800a8d2:	2035      	movs	r0, #53	; 0x35
 800a8d4:	f001 fc80 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800a8d8:	2035      	movs	r0, #53	; 0x35
 800a8da:	f001 fc99 	bl	800c210 <HAL_NVIC_EnableIRQ>
}
 800a8de:	e0f1      	b.n	800aac4 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART1)
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	4a4e      	ldr	r2, [pc, #312]	; (800aa20 <HAL_UART_MspInit+0x2d8>)
 800a8e6:	4293      	cmp	r3, r2
 800a8e8:	d144      	bne.n	800a974 <HAL_UART_MspInit+0x22c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800a8ea:	2340      	movs	r3, #64	; 0x40
 800a8ec:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	67fb      	str	r3, [r7, #124]	; 0x7c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a8f2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a8f6:	4618      	mov	r0, r3
 800a8f8:	f003 fe50 	bl	800e59c <HAL_RCCEx_PeriphCLKConfig>
 800a8fc:	4603      	mov	r3, r0
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d001      	beq.n	800a906 <HAL_UART_MspInit+0x1be>
      Error_Handler();
 800a902:	f7f7 facd 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 800a906:	4b42      	ldr	r3, [pc, #264]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a908:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a90a:	4a41      	ldr	r2, [pc, #260]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a90c:	f043 0310 	orr.w	r3, r3, #16
 800a910:	6453      	str	r3, [r2, #68]	; 0x44
 800a912:	4b3f      	ldr	r3, [pc, #252]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a916:	f003 0310 	and.w	r3, r3, #16
 800a91a:	623b      	str	r3, [r7, #32]
 800a91c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a91e:	4b3c      	ldr	r3, [pc, #240]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a922:	4a3b      	ldr	r2, [pc, #236]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a924:	f043 0301 	orr.w	r3, r3, #1
 800a928:	6313      	str	r3, [r2, #48]	; 0x30
 800a92a:	4b39      	ldr	r3, [pc, #228]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a92c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a92e:	f003 0301 	and.w	r3, r3, #1
 800a932:	61fb      	str	r3, [r7, #28]
 800a934:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800a936:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800a93a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a93e:	2302      	movs	r3, #2
 800a940:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a944:	2300      	movs	r3, #0
 800a946:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a94a:	2303      	movs	r3, #3
 800a94c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800a950:	2307      	movs	r3, #7
 800a952:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a956:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a95a:	4619      	mov	r1, r3
 800a95c:	4831      	ldr	r0, [pc, #196]	; (800aa24 <HAL_UART_MspInit+0x2dc>)
 800a95e:	f002 ff33 	bl	800d7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 14, 0);
 800a962:	2200      	movs	r2, #0
 800a964:	210e      	movs	r1, #14
 800a966:	2025      	movs	r0, #37	; 0x25
 800a968:	f001 fc36 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800a96c:	2025      	movs	r0, #37	; 0x25
 800a96e:	f001 fc4f 	bl	800c210 <HAL_NVIC_EnableIRQ>
}
 800a972:	e0a7      	b.n	800aac4 <HAL_UART_MspInit+0x37c>
  else if(huart->Instance==USART3)
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	4a2b      	ldr	r2, [pc, #172]	; (800aa28 <HAL_UART_MspInit+0x2e0>)
 800a97a:	4293      	cmp	r3, r2
 800a97c:	d158      	bne.n	800aa30 <HAL_UART_MspInit+0x2e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800a97e:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a982:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800a984:	2300      	movs	r3, #0
 800a986:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800a98a:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800a98e:	4618      	mov	r0, r3
 800a990:	f003 fe04 	bl	800e59c <HAL_RCCEx_PeriphCLKConfig>
 800a994:	4603      	mov	r3, r0
 800a996:	2b00      	cmp	r3, #0
 800a998:	d001      	beq.n	800a99e <HAL_UART_MspInit+0x256>
      Error_Handler();
 800a99a:	f7f7 fa81 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800a99e:	4b1c      	ldr	r3, [pc, #112]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a9a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9a2:	4a1b      	ldr	r2, [pc, #108]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a9a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a9a8:	6413      	str	r3, [r2, #64]	; 0x40
 800a9aa:	4b19      	ldr	r3, [pc, #100]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a9ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a9b2:	61bb      	str	r3, [r7, #24]
 800a9b4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a9b6:	4b16      	ldr	r3, [pc, #88]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a9b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9ba:	4a15      	ldr	r2, [pc, #84]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a9bc:	f043 0302 	orr.w	r3, r3, #2
 800a9c0:	6313      	str	r3, [r2, #48]	; 0x30
 800a9c2:	4b13      	ldr	r3, [pc, #76]	; (800aa10 <HAL_UART_MspInit+0x2c8>)
 800a9c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a9c6:	f003 0302 	and.w	r3, r3, #2
 800a9ca:	617b      	str	r3, [r7, #20]
 800a9cc:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800a9ce:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800a9d2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a9d6:	2302      	movs	r3, #2
 800a9d8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a9dc:	2300      	movs	r3, #0
 800a9de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a9e2:	2303      	movs	r3, #3
 800a9e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800a9e8:	2307      	movs	r3, #7
 800a9ea:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800a9ee:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800a9f2:	4619      	mov	r1, r3
 800a9f4:	480d      	ldr	r0, [pc, #52]	; (800aa2c <HAL_UART_MspInit+0x2e4>)
 800a9f6:	f002 fee7 	bl	800d7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 8, 0);
 800a9fa:	2200      	movs	r2, #0
 800a9fc:	2108      	movs	r1, #8
 800a9fe:	2027      	movs	r0, #39	; 0x27
 800aa00:	f001 fbea 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800aa04:	2027      	movs	r0, #39	; 0x27
 800aa06:	f001 fc03 	bl	800c210 <HAL_NVIC_EnableIRQ>
}
 800aa0a:	e05b      	b.n	800aac4 <HAL_UART_MspInit+0x37c>
 800aa0c:	40004c00 	.word	0x40004c00
 800aa10:	40023800 	.word	0x40023800
 800aa14:	40020800 	.word	0x40020800
 800aa18:	40005000 	.word	0x40005000
 800aa1c:	40020c00 	.word	0x40020c00
 800aa20:	40011000 	.word	0x40011000
 800aa24:	40020000 	.word	0x40020000
 800aa28:	40004800 	.word	0x40004800
 800aa2c:	40020400 	.word	0x40020400
  else if(huart->Instance==USART6)
 800aa30:	687b      	ldr	r3, [r7, #4]
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4a25      	ldr	r2, [pc, #148]	; (800aacc <HAL_UART_MspInit+0x384>)
 800aa36:	4293      	cmp	r3, r2
 800aa38:	d144      	bne.n	800aac4 <HAL_UART_MspInit+0x37c>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 800aa3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800aa3e:	63bb      	str	r3, [r7, #56]	; 0x38
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800aa40:	2300      	movs	r3, #0
 800aa42:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800aa46:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800aa4a:	4618      	mov	r0, r3
 800aa4c:	f003 fda6 	bl	800e59c <HAL_RCCEx_PeriphCLKConfig>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d001      	beq.n	800aa5a <HAL_UART_MspInit+0x312>
      Error_Handler();
 800aa56:	f7f7 fa23 	bl	8001ea0 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 800aa5a:	4b1d      	ldr	r3, [pc, #116]	; (800aad0 <HAL_UART_MspInit+0x388>)
 800aa5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa5e:	4a1c      	ldr	r2, [pc, #112]	; (800aad0 <HAL_UART_MspInit+0x388>)
 800aa60:	f043 0320 	orr.w	r3, r3, #32
 800aa64:	6453      	str	r3, [r2, #68]	; 0x44
 800aa66:	4b1a      	ldr	r3, [pc, #104]	; (800aad0 <HAL_UART_MspInit+0x388>)
 800aa68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa6a:	f003 0320 	and.w	r3, r3, #32
 800aa6e:	613b      	str	r3, [r7, #16]
 800aa70:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800aa72:	4b17      	ldr	r3, [pc, #92]	; (800aad0 <HAL_UART_MspInit+0x388>)
 800aa74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa76:	4a16      	ldr	r2, [pc, #88]	; (800aad0 <HAL_UART_MspInit+0x388>)
 800aa78:	f043 0304 	orr.w	r3, r3, #4
 800aa7c:	6313      	str	r3, [r2, #48]	; 0x30
 800aa7e:	4b14      	ldr	r3, [pc, #80]	; (800aad0 <HAL_UART_MspInit+0x388>)
 800aa80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aa82:	f003 0304 	and.w	r3, r3, #4
 800aa86:	60fb      	str	r3, [r7, #12]
 800aa88:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800aa8a:	23c0      	movs	r3, #192	; 0xc0
 800aa8c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800aa90:	2302      	movs	r3, #2
 800aa92:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800aa96:	2300      	movs	r3, #0
 800aa98:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800aa9c:	2303      	movs	r3, #3
 800aa9e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800aaa2:	2308      	movs	r3, #8
 800aaa4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800aaa8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800aaac:	4619      	mov	r1, r3
 800aaae:	4809      	ldr	r0, [pc, #36]	; (800aad4 <HAL_UART_MspInit+0x38c>)
 800aab0:	f002 fe8a 	bl	800d7c8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART6_IRQn, 8, 0);
 800aab4:	2200      	movs	r2, #0
 800aab6:	2108      	movs	r1, #8
 800aab8:	2047      	movs	r0, #71	; 0x47
 800aaba:	f001 fb8d 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 800aabe:	2047      	movs	r0, #71	; 0x47
 800aac0:	f001 fba6 	bl	800c210 <HAL_NVIC_EnableIRQ>
}
 800aac4:	bf00      	nop
 800aac6:	37d0      	adds	r7, #208	; 0xd0
 800aac8:	46bd      	mov	sp, r7
 800aaca:	bd80      	pop	{r7, pc}
 800aacc:	40011400 	.word	0x40011400
 800aad0:	40023800 	.word	0x40023800
 800aad4:	40020800 	.word	0x40020800

0800aad8 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 800aade:	1d3b      	adds	r3, r7, #4
 800aae0:	2200      	movs	r2, #0
 800aae2:	601a      	str	r2, [r3, #0]
 800aae4:	605a      	str	r2, [r3, #4]
 800aae6:	609a      	str	r2, [r3, #8]
 800aae8:	60da      	str	r2, [r3, #12]
 800aaea:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 800aaec:	4b23      	ldr	r3, [pc, #140]	; (800ab7c <HAL_FMC_MspInit+0xa4>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	2b00      	cmp	r3, #0
 800aaf2:	d13e      	bne.n	800ab72 <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 800aaf4:	4b21      	ldr	r3, [pc, #132]	; (800ab7c <HAL_FMC_MspInit+0xa4>)
 800aaf6:	2201      	movs	r2, #1
 800aaf8:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 800aafa:	4b21      	ldr	r3, [pc, #132]	; (800ab80 <HAL_FMC_MspInit+0xa8>)
 800aafc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aafe:	4a20      	ldr	r2, [pc, #128]	; (800ab80 <HAL_FMC_MspInit+0xa8>)
 800ab00:	f043 0301 	orr.w	r3, r3, #1
 800ab04:	6393      	str	r3, [r2, #56]	; 0x38
 800ab06:	4b1e      	ldr	r3, [pc, #120]	; (800ab80 <HAL_FMC_MspInit+0xa8>)
 800ab08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab0a:	f003 0301 	and.w	r3, r3, #1
 800ab0e:	603b      	str	r3, [r7, #0]
 800ab10:	683b      	ldr	r3, [r7, #0]
  PD1   ------> FMC_D3
  PD4   ------> FMC_NOE
  PD5   ------> FMC_NWE
  PD7   ------> FMC_NE1
  */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800ab12:	2307      	movs	r3, #7
 800ab14:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab16:	2302      	movs	r3, #2
 800ab18:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab1e:	2303      	movs	r3, #3
 800ab20:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ab22:	230c      	movs	r3, #12
 800ab24:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800ab26:	1d3b      	adds	r3, r7, #4
 800ab28:	4619      	mov	r1, r3
 800ab2a:	4816      	ldr	r0, [pc, #88]	; (800ab84 <HAL_FMC_MspInit+0xac>)
 800ab2c:	f002 fe4c 	bl	800d7c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 800ab30:	f64f 7380 	movw	r3, #65408	; 0xff80
 800ab34:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14
                          |GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab36:	2302      	movs	r3, #2
 800ab38:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab3a:	2300      	movs	r3, #0
 800ab3c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab3e:	2303      	movs	r3, #3
 800ab40:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ab42:	230c      	movs	r3, #12
 800ab44:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800ab46:	1d3b      	adds	r3, r7, #4
 800ab48:	4619      	mov	r1, r3
 800ab4a:	480f      	ldr	r0, [pc, #60]	; (800ab88 <HAL_FMC_MspInit+0xb0>)
 800ab4c:	f002 fe3c 	bl	800d7c8 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 800ab50:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 800ab54:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ab56:	2302      	movs	r3, #2
 800ab58:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ab5e:	2303      	movs	r3, #3
 800ab60:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800ab62:	230c      	movs	r3, #12
 800ab64:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800ab66:	1d3b      	adds	r3, r7, #4
 800ab68:	4619      	mov	r1, r3
 800ab6a:	4808      	ldr	r0, [pc, #32]	; (800ab8c <HAL_FMC_MspInit+0xb4>)
 800ab6c:	f002 fe2c 	bl	800d7c8 <HAL_GPIO_Init>
 800ab70:	e000      	b.n	800ab74 <HAL_FMC_MspInit+0x9c>
    return;
 800ab72:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 800ab74:	3718      	adds	r7, #24
 800ab76:	46bd      	mov	sp, r7
 800ab78:	bd80      	pop	{r7, pc}
 800ab7a:	bf00      	nop
 800ab7c:	200019e8 	.word	0x200019e8
 800ab80:	40023800 	.word	0x40023800
 800ab84:	40021400 	.word	0x40021400
 800ab88:	40021000 	.word	0x40021000
 800ab8c:	40020c00 	.word	0x40020c00

0800ab90 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 800ab90:	b580      	push	{r7, lr}
 800ab92:	b082      	sub	sp, #8
 800ab94:	af00      	add	r7, sp, #0
 800ab96:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 800ab98:	f7ff ff9e 	bl	800aad8 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 800ab9c:	bf00      	nop
 800ab9e:	3708      	adds	r7, #8
 800aba0:	46bd      	mov	sp, r7
 800aba2:	bd80      	pop	{r7, pc}

0800aba4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b08e      	sub	sp, #56	; 0x38
 800aba8:	af00      	add	r7, sp, #0
 800abaa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 800abac:	2300      	movs	r3, #0
 800abae:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 800abb0:	2300      	movs	r3, #0
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800abb4:	4b33      	ldr	r3, [pc, #204]	; (800ac84 <HAL_InitTick+0xe0>)
 800abb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abb8:	4a32      	ldr	r2, [pc, #200]	; (800ac84 <HAL_InitTick+0xe0>)
 800abba:	f043 0310 	orr.w	r3, r3, #16
 800abbe:	6413      	str	r3, [r2, #64]	; 0x40
 800abc0:	4b30      	ldr	r3, [pc, #192]	; (800ac84 <HAL_InitTick+0xe0>)
 800abc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abc4:	f003 0310 	and.w	r3, r3, #16
 800abc8:	60fb      	str	r3, [r7, #12]
 800abca:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800abcc:	f107 0210 	add.w	r2, r7, #16
 800abd0:	f107 0314 	add.w	r3, r7, #20
 800abd4:	4611      	mov	r1, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	f003 fcae 	bl	800e538 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800abdc:	6a3b      	ldr	r3, [r7, #32]
 800abde:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800abe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800abe2:	2b00      	cmp	r3, #0
 800abe4:	d103      	bne.n	800abee <HAL_InitTick+0x4a>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800abe6:	f003 fc7f 	bl	800e4e8 <HAL_RCC_GetPCLK1Freq>
 800abea:	6378      	str	r0, [r7, #52]	; 0x34
 800abec:	e004      	b.n	800abf8 <HAL_InitTick+0x54>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800abee:	f003 fc7b 	bl	800e4e8 <HAL_RCC_GetPCLK1Freq>
 800abf2:	4603      	mov	r3, r0
 800abf4:	005b      	lsls	r3, r3, #1
 800abf6:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800abf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800abfa:	4a23      	ldr	r2, [pc, #140]	; (800ac88 <HAL_InitTick+0xe4>)
 800abfc:	fba2 2303 	umull	r2, r3, r2, r3
 800ac00:	0c9b      	lsrs	r3, r3, #18
 800ac02:	3b01      	subs	r3, #1
 800ac04:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800ac06:	4b21      	ldr	r3, [pc, #132]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac08:	4a21      	ldr	r2, [pc, #132]	; (800ac90 <HAL_InitTick+0xec>)
 800ac0a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800ac0c:	4b1f      	ldr	r3, [pc, #124]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac0e:	f240 32e7 	movw	r2, #999	; 0x3e7
 800ac12:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800ac14:	4a1d      	ldr	r2, [pc, #116]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac18:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800ac1a:	4b1c      	ldr	r3, [pc, #112]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac1c:	2200      	movs	r2, #0
 800ac1e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800ac20:	4b1a      	ldr	r3, [pc, #104]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800ac26:	4b19      	ldr	r3, [pc, #100]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac28:	2200      	movs	r2, #0
 800ac2a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800ac2c:	4817      	ldr	r0, [pc, #92]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac2e:	f004 f8ed 	bl	800ee0c <HAL_TIM_Base_Init>
 800ac32:	4603      	mov	r3, r0
 800ac34:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800ac38:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac3c:	2b00      	cmp	r3, #0
 800ac3e:	d11b      	bne.n	800ac78 <HAL_InitTick+0xd4>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800ac40:	4812      	ldr	r0, [pc, #72]	; (800ac8c <HAL_InitTick+0xe8>)
 800ac42:	f004 f93b 	bl	800eebc <HAL_TIM_Base_Start_IT>
 800ac46:	4603      	mov	r3, r0
 800ac48:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800ac4c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d111      	bne.n	800ac78 <HAL_InitTick+0xd4>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800ac54:	2036      	movs	r0, #54	; 0x36
 800ac56:	f001 fadb 	bl	800c210 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2b0f      	cmp	r3, #15
 800ac5e:	d808      	bhi.n	800ac72 <HAL_InitTick+0xce>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 800ac60:	2200      	movs	r2, #0
 800ac62:	6879      	ldr	r1, [r7, #4]
 800ac64:	2036      	movs	r0, #54	; 0x36
 800ac66:	f001 fab7 	bl	800c1d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800ac6a:	4a0a      	ldr	r2, [pc, #40]	; (800ac94 <HAL_InitTick+0xf0>)
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	6013      	str	r3, [r2, #0]
 800ac70:	e002      	b.n	800ac78 <HAL_InitTick+0xd4>
      }
      else
      {
        status = HAL_ERROR;
 800ac72:	2301      	movs	r3, #1
 800ac74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800ac78:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800ac7c:	4618      	mov	r0, r3
 800ac7e:	3738      	adds	r7, #56	; 0x38
 800ac80:	46bd      	mov	sp, r7
 800ac82:	bd80      	pop	{r7, pc}
 800ac84:	40023800 	.word	0x40023800
 800ac88:	431bde83 	.word	0x431bde83
 800ac8c:	200019ec 	.word	0x200019ec
 800ac90:	40001000 	.word	0x40001000
 800ac94:	20000008 	.word	0x20000008

0800ac98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800ac98:	b480      	push	{r7}
 800ac9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800ac9c:	e7fe      	b.n	800ac9c <NMI_Handler+0x4>

0800ac9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ac9e:	b480      	push	{r7}
 800aca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800aca2:	e7fe      	b.n	800aca2 <HardFault_Handler+0x4>

0800aca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800aca4:	b480      	push	{r7}
 800aca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800aca8:	e7fe      	b.n	800aca8 <MemManage_Handler+0x4>

0800acaa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800acaa:	b480      	push	{r7}
 800acac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800acae:	e7fe      	b.n	800acae <BusFault_Handler+0x4>

0800acb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800acb0:	b480      	push	{r7}
 800acb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800acb4:	e7fe      	b.n	800acb4 <UsageFault_Handler+0x4>

0800acb6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800acb6:	b480      	push	{r7}
 800acb8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800acba:	bf00      	nop
 800acbc:	46bd      	mov	sp, r7
 800acbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acc2:	4770      	bx	lr

0800acc4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 800acc4:	b580      	push	{r7, lr}
 800acc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800acc8:	4802      	ldr	r0, [pc, #8]	; (800acd4 <CAN1_RX0_IRQHandler+0x10>)
 800acca:	f000 ff79 	bl	800bbc0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800acce:	bf00      	nop
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	200004e0 	.word	0x200004e0

0800acd8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800acdc:	4802      	ldr	r0, [pc, #8]	; (800ace8 <USART1_IRQHandler+0x10>)
 800acde:	f004 fe31 	bl	800f944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800ace2:	bf00      	nop
 800ace4:	bd80      	pop	{r7, pc}
 800ace6:	bf00      	nop
 800ace8:	2000068c 	.word	0x2000068c

0800acec <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800acec:	b580      	push	{r7, lr}
 800acee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800acf0:	4802      	ldr	r0, [pc, #8]	; (800acfc <USART3_IRQHandler+0x10>)
 800acf2:	f004 fe27 	bl	800f944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800acf6:	bf00      	nop
 800acf8:	bd80      	pop	{r7, pc}
 800acfa:	bf00      	nop
 800acfc:	20000714 	.word	0x20000714

0800ad00 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ad04:	4802      	ldr	r0, [pc, #8]	; (800ad10 <UART4_IRQHandler+0x10>)
 800ad06:	f004 fe1d 	bl	800f944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 800ad0a:	bf00      	nop
 800ad0c:	bd80      	pop	{r7, pc}
 800ad0e:	bf00      	nop
 800ad10:	2000057c 	.word	0x2000057c

0800ad14 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800ad14:	b580      	push	{r7, lr}
 800ad16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 800ad18:	4802      	ldr	r0, [pc, #8]	; (800ad24 <UART5_IRQHandler+0x10>)
 800ad1a:	f004 fe13 	bl	800f944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800ad1e:	bf00      	nop
 800ad20:	bd80      	pop	{r7, pc}
 800ad22:	bf00      	nop
 800ad24:	20000604 	.word	0x20000604

0800ad28 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800ad28:	b580      	push	{r7, lr}
 800ad2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800ad2c:	4802      	ldr	r0, [pc, #8]	; (800ad38 <TIM6_DAC_IRQHandler+0x10>)
 800ad2e:	f004 f93d 	bl	800efac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800ad32:	bf00      	nop
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	200019ec 	.word	0x200019ec

0800ad3c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 800ad3c:	b580      	push	{r7, lr}
 800ad3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 800ad40:	4802      	ldr	r0, [pc, #8]	; (800ad4c <TIM7_IRQHandler+0x10>)
 800ad42:	f004 f933 	bl	800efac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800ad46:	bf00      	nop
 800ad48:	bd80      	pop	{r7, pc}
 800ad4a:	bf00      	nop
 800ad4c:	20000530 	.word	0x20000530

0800ad50 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800ad54:	4802      	ldr	r0, [pc, #8]	; (800ad60 <ETH_IRQHandler+0x10>)
 800ad56:	f001 fe63 	bl	800ca20 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 800ad5a:	bf00      	nop
 800ad5c:	bd80      	pop	{r7, pc}
 800ad5e:	bf00      	nop
 800ad60:	2000641c 	.word	0x2000641c

0800ad64 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800ad64:	b580      	push	{r7, lr}
 800ad66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800ad68:	4802      	ldr	r0, [pc, #8]	; (800ad74 <USART6_IRQHandler+0x10>)
 800ad6a:	f004 fdeb 	bl	800f944 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800ad6e:	bf00      	nop
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	bf00      	nop
 800ad74:	2000079c 	.word	0x2000079c

0800ad78 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800ad78:	b480      	push	{r7}
 800ad7a:	af00      	add	r7, sp, #0
	return 1;
 800ad7c:	2301      	movs	r3, #1
}
 800ad7e:	4618      	mov	r0, r3
 800ad80:	46bd      	mov	sp, r7
 800ad82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad86:	4770      	bx	lr

0800ad88 <_kill>:

int _kill(int pid, int sig)
{
 800ad88:	b480      	push	{r7}
 800ad8a:	b083      	sub	sp, #12
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
 800ad90:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800ad92:	4b05      	ldr	r3, [pc, #20]	; (800ada8 <_kill+0x20>)
 800ad94:	2216      	movs	r2, #22
 800ad96:	601a      	str	r2, [r3, #0]
	return -1;
 800ad98:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ad9c:	4618      	mov	r0, r3
 800ad9e:	370c      	adds	r7, #12
 800ada0:	46bd      	mov	sp, r7
 800ada2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada6:	4770      	bx	lr
 800ada8:	2000c12c 	.word	0x2000c12c

0800adac <_exit>:

void _exit (int status)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b082      	sub	sp, #8
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800adb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800adb8:	6878      	ldr	r0, [r7, #4]
 800adba:	f7ff ffe5 	bl	800ad88 <_kill>
	while (1) {}		/* Make sure we hang here */
 800adbe:	e7fe      	b.n	800adbe <_exit+0x12>

0800adc0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	b086      	sub	sp, #24
 800adc4:	af00      	add	r7, sp, #0
 800adc6:	60f8      	str	r0, [r7, #12]
 800adc8:	60b9      	str	r1, [r7, #8]
 800adca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800adcc:	2300      	movs	r3, #0
 800adce:	617b      	str	r3, [r7, #20]
 800add0:	e00a      	b.n	800ade8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800add2:	f3af 8000 	nop.w
 800add6:	4601      	mov	r1, r0
 800add8:	68bb      	ldr	r3, [r7, #8]
 800adda:	1c5a      	adds	r2, r3, #1
 800addc:	60ba      	str	r2, [r7, #8]
 800adde:	b2ca      	uxtb	r2, r1
 800ade0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ade2:	697b      	ldr	r3, [r7, #20]
 800ade4:	3301      	adds	r3, #1
 800ade6:	617b      	str	r3, [r7, #20]
 800ade8:	697a      	ldr	r2, [r7, #20]
 800adea:	687b      	ldr	r3, [r7, #4]
 800adec:	429a      	cmp	r2, r3
 800adee:	dbf0      	blt.n	800add2 <_read+0x12>
	}

return len;
 800adf0:	687b      	ldr	r3, [r7, #4]
}
 800adf2:	4618      	mov	r0, r3
 800adf4:	3718      	adds	r7, #24
 800adf6:	46bd      	mov	sp, r7
 800adf8:	bd80      	pop	{r7, pc}

0800adfa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800adfa:	b580      	push	{r7, lr}
 800adfc:	b086      	sub	sp, #24
 800adfe:	af00      	add	r7, sp, #0
 800ae00:	60f8      	str	r0, [r7, #12]
 800ae02:	60b9      	str	r1, [r7, #8]
 800ae04:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
 800ae0a:	e009      	b.n	800ae20 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	1c5a      	adds	r2, r3, #1
 800ae10:	60ba      	str	r2, [r7, #8]
 800ae12:	781b      	ldrb	r3, [r3, #0]
 800ae14:	4618      	mov	r0, r3
 800ae16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae1a:	697b      	ldr	r3, [r7, #20]
 800ae1c:	3301      	adds	r3, #1
 800ae1e:	617b      	str	r3, [r7, #20]
 800ae20:	697a      	ldr	r2, [r7, #20]
 800ae22:	687b      	ldr	r3, [r7, #4]
 800ae24:	429a      	cmp	r2, r3
 800ae26:	dbf1      	blt.n	800ae0c <_write+0x12>
	}
	return len;
 800ae28:	687b      	ldr	r3, [r7, #4]
}
 800ae2a:	4618      	mov	r0, r3
 800ae2c:	3718      	adds	r7, #24
 800ae2e:	46bd      	mov	sp, r7
 800ae30:	bd80      	pop	{r7, pc}

0800ae32 <_close>:

int _close(int file)
{
 800ae32:	b480      	push	{r7}
 800ae34:	b083      	sub	sp, #12
 800ae36:	af00      	add	r7, sp, #0
 800ae38:	6078      	str	r0, [r7, #4]
	return -1;
 800ae3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 800ae3e:	4618      	mov	r0, r3
 800ae40:	370c      	adds	r7, #12
 800ae42:	46bd      	mov	sp, r7
 800ae44:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae48:	4770      	bx	lr

0800ae4a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ae4a:	b480      	push	{r7}
 800ae4c:	b083      	sub	sp, #12
 800ae4e:	af00      	add	r7, sp, #0
 800ae50:	6078      	str	r0, [r7, #4]
 800ae52:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800ae54:	683b      	ldr	r3, [r7, #0]
 800ae56:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800ae5a:	605a      	str	r2, [r3, #4]
	return 0;
 800ae5c:	2300      	movs	r3, #0
}
 800ae5e:	4618      	mov	r0, r3
 800ae60:	370c      	adds	r7, #12
 800ae62:	46bd      	mov	sp, r7
 800ae64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae68:	4770      	bx	lr

0800ae6a <_isatty>:

int _isatty(int file)
{
 800ae6a:	b480      	push	{r7}
 800ae6c:	b083      	sub	sp, #12
 800ae6e:	af00      	add	r7, sp, #0
 800ae70:	6078      	str	r0, [r7, #4]
	return 1;
 800ae72:	2301      	movs	r3, #1
}
 800ae74:	4618      	mov	r0, r3
 800ae76:	370c      	adds	r7, #12
 800ae78:	46bd      	mov	sp, r7
 800ae7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae7e:	4770      	bx	lr

0800ae80 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ae80:	b480      	push	{r7}
 800ae82:	b085      	sub	sp, #20
 800ae84:	af00      	add	r7, sp, #0
 800ae86:	60f8      	str	r0, [r7, #12]
 800ae88:	60b9      	str	r1, [r7, #8]
 800ae8a:	607a      	str	r2, [r7, #4]
	return 0;
 800ae8c:	2300      	movs	r3, #0
}
 800ae8e:	4618      	mov	r0, r3
 800ae90:	3714      	adds	r7, #20
 800ae92:	46bd      	mov	sp, r7
 800ae94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae98:	4770      	bx	lr
	...

0800ae9c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800aea0:	4b06      	ldr	r3, [pc, #24]	; (800aebc <SystemInit+0x20>)
 800aea2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800aea6:	4a05      	ldr	r2, [pc, #20]	; (800aebc <SystemInit+0x20>)
 800aea8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800aeac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800aeb0:	bf00      	nop
 800aeb2:	46bd      	mov	sp, r7
 800aeb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb8:	4770      	bx	lr
 800aeba:	bf00      	nop
 800aebc:	e000ed00 	.word	0xe000ed00

0800aec0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800aec0:	f8df d034 	ldr.w	sp, [pc, #52]	; 800aef8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800aec4:	480d      	ldr	r0, [pc, #52]	; (800aefc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800aec6:	490e      	ldr	r1, [pc, #56]	; (800af00 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800aec8:	4a0e      	ldr	r2, [pc, #56]	; (800af04 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800aeca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800aecc:	e002      	b.n	800aed4 <LoopCopyDataInit>

0800aece <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800aece:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800aed0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800aed2:	3304      	adds	r3, #4

0800aed4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800aed4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800aed6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800aed8:	d3f9      	bcc.n	800aece <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800aeda:	4a0b      	ldr	r2, [pc, #44]	; (800af08 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800aedc:	4c0b      	ldr	r4, [pc, #44]	; (800af0c <LoopFillZerobss+0x26>)
  movs r3, #0
 800aede:	2300      	movs	r3, #0
  b LoopFillZerobss
 800aee0:	e001      	b.n	800aee6 <LoopFillZerobss>

0800aee2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800aee2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800aee4:	3204      	adds	r2, #4

0800aee6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800aee6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800aee8:	d3fb      	bcc.n	800aee2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800aeea:	f7ff ffd7 	bl	800ae9c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800aeee:	f019 f877 	bl	8023fe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800aef2:	f7ff fa87 	bl	800a404 <main>
  bx  lr    
 800aef6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800aef8:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800aefc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800af00:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 800af04:	080290a8 	.word	0x080290a8
  ldr r2, =_sbss
 800af08:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 800af0c:	2000c1c0 	.word	0x2000c1c0

0800af10 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800af10:	e7fe      	b.n	800af10 <ADC_IRQHandler>

0800af12 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 800af12:	b480      	push	{r7}
 800af14:	b083      	sub	sp, #12
 800af16:	af00      	add	r7, sp, #0
 800af18:	6078      	str	r0, [r7, #4]
 800af1a:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d00b      	beq.n	800af3a <LAN8742_RegisterBusIO+0x28>
 800af22:	683b      	ldr	r3, [r7, #0]
 800af24:	68db      	ldr	r3, [r3, #12]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d007      	beq.n	800af3a <LAN8742_RegisterBusIO+0x28>
 800af2a:	683b      	ldr	r3, [r7, #0]
 800af2c:	689b      	ldr	r3, [r3, #8]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d003      	beq.n	800af3a <LAN8742_RegisterBusIO+0x28>
 800af32:	683b      	ldr	r3, [r7, #0]
 800af34:	691b      	ldr	r3, [r3, #16]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d102      	bne.n	800af40 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800af3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800af3e:	e014      	b.n	800af6a <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 800af40:	683b      	ldr	r3, [r7, #0]
 800af42:	681a      	ldr	r2, [r3, #0]
 800af44:	687b      	ldr	r3, [r7, #4]
 800af46:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800af48:	683b      	ldr	r3, [r7, #0]
 800af4a:	685a      	ldr	r2, [r3, #4]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	68da      	ldr	r2, [r3, #12]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800af58:	683b      	ldr	r3, [r7, #0]
 800af5a:	689a      	ldr	r2, [r3, #8]
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800af60:	683b      	ldr	r3, [r7, #0]
 800af62:	691a      	ldr	r2, [r3, #16]
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 800af68:	2300      	movs	r3, #0
}
 800af6a:	4618      	mov	r0, r3
 800af6c:	370c      	adds	r7, #12
 800af6e:	46bd      	mov	sp, r7
 800af70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af74:	4770      	bx	lr

0800af76 <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 800af76:	b580      	push	{r7, lr}
 800af78:	b086      	sub	sp, #24
 800af7a:	af00      	add	r7, sp, #0
 800af7c:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	2300      	movs	r3, #0
 800af84:	60bb      	str	r3, [r7, #8]
 800af86:	2300      	movs	r3, #0
 800af88:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800af8a:	2300      	movs	r3, #0
 800af8c:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	685b      	ldr	r3, [r3, #4]
 800af92:	2b00      	cmp	r3, #0
 800af94:	d17c      	bne.n	800b090 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800af96:	687b      	ldr	r3, [r7, #4]
 800af98:	689b      	ldr	r3, [r3, #8]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d002      	beq.n	800afa4 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	689b      	ldr	r3, [r3, #8]
 800afa2:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	2220      	movs	r2, #32
 800afa8:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800afaa:	2300      	movs	r3, #0
 800afac:	617b      	str	r3, [r7, #20]
 800afae:	e01c      	b.n	800afea <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	695b      	ldr	r3, [r3, #20]
 800afb4:	f107 0208 	add.w	r2, r7, #8
 800afb8:	2112      	movs	r1, #18
 800afba:	6978      	ldr	r0, [r7, #20]
 800afbc:	4798      	blx	r3
 800afbe:	4603      	mov	r3, r0
 800afc0:	2b00      	cmp	r3, #0
 800afc2:	da03      	bge.n	800afcc <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 800afc4:	f06f 0304 	mvn.w	r3, #4
 800afc8:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800afca:	e00b      	b.n	800afe4 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 800afcc:	68bb      	ldr	r3, [r7, #8]
 800afce:	f003 031f 	and.w	r3, r3, #31
 800afd2:	697a      	ldr	r2, [r7, #20]
 800afd4:	429a      	cmp	r2, r3
 800afd6:	d105      	bne.n	800afe4 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	697a      	ldr	r2, [r7, #20]
 800afdc:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 800afde:	2300      	movs	r3, #0
 800afe0:	613b      	str	r3, [r7, #16]
         break;
 800afe2:	e005      	b.n	800aff0 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800afe4:	697b      	ldr	r3, [r7, #20]
 800afe6:	3301      	adds	r3, #1
 800afe8:	617b      	str	r3, [r7, #20]
 800afea:	697b      	ldr	r3, [r7, #20]
 800afec:	2b1f      	cmp	r3, #31
 800afee:	d9df      	bls.n	800afb0 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 800aff0:	687b      	ldr	r3, [r7, #4]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	2b1f      	cmp	r3, #31
 800aff6:	d902      	bls.n	800affe <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800aff8:	f06f 0302 	mvn.w	r3, #2
 800affc:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 800affe:	693b      	ldr	r3, [r7, #16]
 800b000:	2b00      	cmp	r3, #0
 800b002:	d145      	bne.n	800b090 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 800b004:	687b      	ldr	r3, [r7, #4]
 800b006:	691b      	ldr	r3, [r3, #16]
 800b008:	687a      	ldr	r2, [r7, #4]
 800b00a:	6810      	ldr	r0, [r2, #0]
 800b00c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800b010:	2100      	movs	r1, #0
 800b012:	4798      	blx	r3
 800b014:	4603      	mov	r3, r0
 800b016:	2b00      	cmp	r3, #0
 800b018:	db37      	blt.n	800b08a <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	695b      	ldr	r3, [r3, #20]
 800b01e:	687a      	ldr	r2, [r7, #4]
 800b020:	6810      	ldr	r0, [r2, #0]
 800b022:	f107 0208 	add.w	r2, r7, #8
 800b026:	2100      	movs	r1, #0
 800b028:	4798      	blx	r3
 800b02a:	4603      	mov	r3, r0
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	db28      	blt.n	800b082 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 800b030:	687b      	ldr	r3, [r7, #4]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	4798      	blx	r3
 800b036:	4603      	mov	r3, r0
 800b038:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800b03a:	e01c      	b.n	800b076 <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	699b      	ldr	r3, [r3, #24]
 800b040:	4798      	blx	r3
 800b042:	4603      	mov	r3, r0
 800b044:	461a      	mov	r2, r3
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	1ad3      	subs	r3, r2, r3
 800b04a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800b04e:	d80e      	bhi.n	800b06e <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	695b      	ldr	r3, [r3, #20]
 800b054:	687a      	ldr	r2, [r7, #4]
 800b056:	6810      	ldr	r0, [r2, #0]
 800b058:	f107 0208 	add.w	r2, r7, #8
 800b05c:	2100      	movs	r1, #0
 800b05e:	4798      	blx	r3
 800b060:	4603      	mov	r3, r0
 800b062:	2b00      	cmp	r3, #0
 800b064:	da07      	bge.n	800b076 <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 800b066:	f06f 0304 	mvn.w	r3, #4
 800b06a:	613b      	str	r3, [r7, #16]
                 break;
 800b06c:	e010      	b.n	800b090 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 800b06e:	f06f 0301 	mvn.w	r3, #1
 800b072:	613b      	str	r3, [r7, #16]
               break;
 800b074:	e00c      	b.n	800b090 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d1dd      	bne.n	800b03c <LAN8742_Init+0xc6>
 800b080:	e006      	b.n	800b090 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 800b082:	f06f 0304 	mvn.w	r3, #4
 800b086:	613b      	str	r3, [r7, #16]
 800b088:	e002      	b.n	800b090 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800b08a:	f06f 0303 	mvn.w	r3, #3
 800b08e:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 800b090:	693b      	ldr	r3, [r7, #16]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d112      	bne.n	800b0bc <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800b096:	687b      	ldr	r3, [r7, #4]
 800b098:	699b      	ldr	r3, [r3, #24]
 800b09a:	4798      	blx	r3
 800b09c:	4603      	mov	r3, r0
 800b09e:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 800b0a0:	bf00      	nop
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	699b      	ldr	r3, [r3, #24]
 800b0a6:	4798      	blx	r3
 800b0a8:	4603      	mov	r3, r0
 800b0aa:	461a      	mov	r2, r3
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	1ad3      	subs	r3, r2, r3
 800b0b0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800b0b4:	d9f5      	bls.n	800b0a2 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	2201      	movs	r2, #1
 800b0ba:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 800b0bc:	693b      	ldr	r3, [r7, #16]
 }
 800b0be:	4618      	mov	r0, r3
 800b0c0:	3718      	adds	r7, #24
 800b0c2:	46bd      	mov	sp, r7
 800b0c4:	bd80      	pop	{r7, pc}

0800b0c6 <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800b0c6:	b580      	push	{r7, lr}
 800b0c8:	b084      	sub	sp, #16
 800b0ca:	af00      	add	r7, sp, #0
 800b0cc:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 800b0ce:	2300      	movs	r3, #0
 800b0d0:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	695b      	ldr	r3, [r3, #20]
 800b0d6:	687a      	ldr	r2, [r7, #4]
 800b0d8:	6810      	ldr	r0, [r2, #0]
 800b0da:	f107 020c 	add.w	r2, r7, #12
 800b0de:	2101      	movs	r1, #1
 800b0e0:	4798      	blx	r3
 800b0e2:	4603      	mov	r3, r0
 800b0e4:	2b00      	cmp	r3, #0
 800b0e6:	da02      	bge.n	800b0ee <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800b0e8:	f06f 0304 	mvn.w	r3, #4
 800b0ec:	e06e      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	695b      	ldr	r3, [r3, #20]
 800b0f2:	687a      	ldr	r2, [r7, #4]
 800b0f4:	6810      	ldr	r0, [r2, #0]
 800b0f6:	f107 020c 	add.w	r2, r7, #12
 800b0fa:	2101      	movs	r1, #1
 800b0fc:	4798      	blx	r3
 800b0fe:	4603      	mov	r3, r0
 800b100:	2b00      	cmp	r3, #0
 800b102:	da02      	bge.n	800b10a <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800b104:	f06f 0304 	mvn.w	r3, #4
 800b108:	e060      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	f003 0304 	and.w	r3, r3, #4
 800b110:	2b00      	cmp	r3, #0
 800b112:	d101      	bne.n	800b118 <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 800b114:	2301      	movs	r3, #1
 800b116:	e059      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	695b      	ldr	r3, [r3, #20]
 800b11c:	687a      	ldr	r2, [r7, #4]
 800b11e:	6810      	ldr	r0, [r2, #0]
 800b120:	f107 020c 	add.w	r2, r7, #12
 800b124:	2100      	movs	r1, #0
 800b126:	4798      	blx	r3
 800b128:	4603      	mov	r3, r0
 800b12a:	2b00      	cmp	r3, #0
 800b12c:	da02      	bge.n	800b134 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 800b12e:	f06f 0304 	mvn.w	r3, #4
 800b132:	e04b      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d11b      	bne.n	800b176 <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b144:	2b00      	cmp	r3, #0
 800b146:	d006      	beq.n	800b156 <LAN8742_GetLinkState+0x90>
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b14e:	2b00      	cmp	r3, #0
 800b150:	d001      	beq.n	800b156 <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800b152:	2302      	movs	r3, #2
 800b154:	e03a      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d001      	beq.n	800b164 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800b160:	2303      	movs	r3, #3
 800b162:	e033      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800b164:	68fb      	ldr	r3, [r7, #12]
 800b166:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800b16e:	2304      	movs	r3, #4
 800b170:	e02c      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800b172:	2305      	movs	r3, #5
 800b174:	e02a      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	695b      	ldr	r3, [r3, #20]
 800b17a:	687a      	ldr	r2, [r7, #4]
 800b17c:	6810      	ldr	r0, [r2, #0]
 800b17e:	f107 020c 	add.w	r2, r7, #12
 800b182:	211f      	movs	r1, #31
 800b184:	4798      	blx	r3
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	da02      	bge.n	800b192 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 800b18c:	f06f 0304 	mvn.w	r3, #4
 800b190:	e01c      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 800b192:	68fb      	ldr	r3, [r7, #12]
 800b194:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d101      	bne.n	800b1a0 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 800b19c:	2306      	movs	r3, #6
 800b19e:	e015      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 800b1a0:	68fb      	ldr	r3, [r7, #12]
 800b1a2:	f003 031c 	and.w	r3, r3, #28
 800b1a6:	2b18      	cmp	r3, #24
 800b1a8:	d101      	bne.n	800b1ae <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800b1aa:	2302      	movs	r3, #2
 800b1ac:	e00e      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 800b1ae:	68fb      	ldr	r3, [r7, #12]
 800b1b0:	f003 031c 	and.w	r3, r3, #28
 800b1b4:	2b08      	cmp	r3, #8
 800b1b6:	d101      	bne.n	800b1bc <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800b1b8:	2303      	movs	r3, #3
 800b1ba:	e007      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	f003 031c 	and.w	r3, r3, #28
 800b1c2:	2b14      	cmp	r3, #20
 800b1c4:	d101      	bne.n	800b1ca <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800b1c6:	2304      	movs	r3, #4
 800b1c8:	e000      	b.n	800b1cc <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800b1ca:	2305      	movs	r3, #5
    }				
  }
}
 800b1cc:	4618      	mov	r0, r3
 800b1ce:	3710      	adds	r7, #16
 800b1d0:	46bd      	mov	sp, r7
 800b1d2:	bd80      	pop	{r7, pc}

0800b1d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800b1d4:	b580      	push	{r7, lr}
 800b1d6:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800b1d8:	2003      	movs	r0, #3
 800b1da:	f000 fff2 	bl	800c1c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800b1de:	200f      	movs	r0, #15
 800b1e0:	f7ff fce0 	bl	800aba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800b1e4:	f7ff fa16 	bl	800a614 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800b1e8:	2300      	movs	r3, #0
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	bd80      	pop	{r7, pc}
	...

0800b1f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800b1f4:	4b06      	ldr	r3, [pc, #24]	; (800b210 <HAL_IncTick+0x20>)
 800b1f6:	781b      	ldrb	r3, [r3, #0]
 800b1f8:	461a      	mov	r2, r3
 800b1fa:	4b06      	ldr	r3, [pc, #24]	; (800b214 <HAL_IncTick+0x24>)
 800b1fc:	681b      	ldr	r3, [r3, #0]
 800b1fe:	4413      	add	r3, r2
 800b200:	4a04      	ldr	r2, [pc, #16]	; (800b214 <HAL_IncTick+0x24>)
 800b202:	6013      	str	r3, [r2, #0]
}
 800b204:	bf00      	nop
 800b206:	46bd      	mov	sp, r7
 800b208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b20c:	4770      	bx	lr
 800b20e:	bf00      	nop
 800b210:	2000000c 	.word	0x2000000c
 800b214:	20001a38 	.word	0x20001a38

0800b218 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800b218:	b480      	push	{r7}
 800b21a:	af00      	add	r7, sp, #0
  return uwTick;
 800b21c:	4b03      	ldr	r3, [pc, #12]	; (800b22c <HAL_GetTick+0x14>)
 800b21e:	681b      	ldr	r3, [r3, #0]
}
 800b220:	4618      	mov	r0, r3
 800b222:	46bd      	mov	sp, r7
 800b224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b228:	4770      	bx	lr
 800b22a:	bf00      	nop
 800b22c:	20001a38 	.word	0x20001a38

0800b230 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800b230:	b580      	push	{r7, lr}
 800b232:	b084      	sub	sp, #16
 800b234:	af00      	add	r7, sp, #0
 800b236:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800b238:	f7ff ffee 	bl	800b218 <HAL_GetTick>
 800b23c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b248:	d005      	beq.n	800b256 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800b24a:	4b0a      	ldr	r3, [pc, #40]	; (800b274 <HAL_Delay+0x44>)
 800b24c:	781b      	ldrb	r3, [r3, #0]
 800b24e:	461a      	mov	r2, r3
 800b250:	68fb      	ldr	r3, [r7, #12]
 800b252:	4413      	add	r3, r2
 800b254:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800b256:	bf00      	nop
 800b258:	f7ff ffde 	bl	800b218 <HAL_GetTick>
 800b25c:	4602      	mov	r2, r0
 800b25e:	68bb      	ldr	r3, [r7, #8]
 800b260:	1ad3      	subs	r3, r2, r3
 800b262:	68fa      	ldr	r2, [r7, #12]
 800b264:	429a      	cmp	r2, r3
 800b266:	d8f7      	bhi.n	800b258 <HAL_Delay+0x28>
  {
  }
}
 800b268:	bf00      	nop
 800b26a:	bf00      	nop
 800b26c:	3710      	adds	r7, #16
 800b26e:	46bd      	mov	sp, r7
 800b270:	bd80      	pop	{r7, pc}
 800b272:	bf00      	nop
 800b274:	2000000c 	.word	0x2000000c

0800b278 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800b278:	b580      	push	{r7, lr}
 800b27a:	b084      	sub	sp, #16
 800b27c:	af00      	add	r7, sp, #0
 800b27e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 800b280:	687b      	ldr	r3, [r7, #4]
 800b282:	2b00      	cmp	r3, #0
 800b284:	d101      	bne.n	800b28a <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800b286:	2301      	movs	r3, #1
 800b288:	e0ed      	b.n	800b466 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800b28a:	687b      	ldr	r3, [r7, #4]
 800b28c:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b290:	b2db      	uxtb	r3, r3
 800b292:	2b00      	cmp	r3, #0
 800b294:	d102      	bne.n	800b29c <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800b296:	6878      	ldr	r0, [r7, #4]
 800b298:	f7ff f9e4 	bl	800a664 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	681b      	ldr	r3, [r3, #0]
 800b2a0:	681a      	ldr	r2, [r3, #0]
 800b2a2:	687b      	ldr	r3, [r7, #4]
 800b2a4:	681b      	ldr	r3, [r3, #0]
 800b2a6:	f042 0201 	orr.w	r2, r2, #1
 800b2aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2ac:	f7ff ffb4 	bl	800b218 <HAL_GetTick>
 800b2b0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b2b2:	e012      	b.n	800b2da <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b2b4:	f7ff ffb0 	bl	800b218 <HAL_GetTick>
 800b2b8:	4602      	mov	r2, r0
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	1ad3      	subs	r3, r2, r3
 800b2be:	2b0a      	cmp	r3, #10
 800b2c0:	d90b      	bls.n	800b2da <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b2c2:	687b      	ldr	r3, [r7, #4]
 800b2c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2c6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2205      	movs	r2, #5
 800b2d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b2d6:	2301      	movs	r3, #1
 800b2d8:	e0c5      	b.n	800b466 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	685b      	ldr	r3, [r3, #4]
 800b2e0:	f003 0301 	and.w	r3, r3, #1
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d0e5      	beq.n	800b2b4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b2e8:	687b      	ldr	r3, [r7, #4]
 800b2ea:	681b      	ldr	r3, [r3, #0]
 800b2ec:	681a      	ldr	r2, [r3, #0]
 800b2ee:	687b      	ldr	r3, [r7, #4]
 800b2f0:	681b      	ldr	r3, [r3, #0]
 800b2f2:	f022 0202 	bic.w	r2, r2, #2
 800b2f6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800b2f8:	f7ff ff8e 	bl	800b218 <HAL_GetTick>
 800b2fc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b2fe:	e012      	b.n	800b326 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b300:	f7ff ff8a 	bl	800b218 <HAL_GetTick>
 800b304:	4602      	mov	r2, r0
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	1ad3      	subs	r3, r2, r3
 800b30a:	2b0a      	cmp	r3, #10
 800b30c:	d90b      	bls.n	800b326 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b312:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800b31a:	687b      	ldr	r3, [r7, #4]
 800b31c:	2205      	movs	r2, #5
 800b31e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800b322:	2301      	movs	r3, #1
 800b324:	e09f      	b.n	800b466 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800b326:	687b      	ldr	r3, [r7, #4]
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	685b      	ldr	r3, [r3, #4]
 800b32c:	f003 0302 	and.w	r3, r3, #2
 800b330:	2b00      	cmp	r3, #0
 800b332:	d1e5      	bne.n	800b300 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	7e1b      	ldrb	r3, [r3, #24]
 800b338:	2b01      	cmp	r3, #1
 800b33a:	d108      	bne.n	800b34e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	681a      	ldr	r2, [r3, #0]
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	681b      	ldr	r3, [r3, #0]
 800b346:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800b34a:	601a      	str	r2, [r3, #0]
 800b34c:	e007      	b.n	800b35e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b35c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	7e5b      	ldrb	r3, [r3, #25]
 800b362:	2b01      	cmp	r3, #1
 800b364:	d108      	bne.n	800b378 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	681a      	ldr	r2, [r3, #0]
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b374:	601a      	str	r2, [r3, #0]
 800b376:	e007      	b.n	800b388 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	681b      	ldr	r3, [r3, #0]
 800b37c:	681a      	ldr	r2, [r3, #0]
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b386:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800b388:	687b      	ldr	r3, [r7, #4]
 800b38a:	7e9b      	ldrb	r3, [r3, #26]
 800b38c:	2b01      	cmp	r3, #1
 800b38e:	d108      	bne.n	800b3a2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	681b      	ldr	r3, [r3, #0]
 800b394:	681a      	ldr	r2, [r3, #0]
 800b396:	687b      	ldr	r3, [r7, #4]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	f042 0220 	orr.w	r2, r2, #32
 800b39e:	601a      	str	r2, [r3, #0]
 800b3a0:	e007      	b.n	800b3b2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 800b3a2:	687b      	ldr	r3, [r7, #4]
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	681a      	ldr	r2, [r3, #0]
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	f022 0220 	bic.w	r2, r2, #32
 800b3b0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 800b3b2:	687b      	ldr	r3, [r7, #4]
 800b3b4:	7edb      	ldrb	r3, [r3, #27]
 800b3b6:	2b01      	cmp	r3, #1
 800b3b8:	d108      	bne.n	800b3cc <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	681a      	ldr	r2, [r3, #0]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	681b      	ldr	r3, [r3, #0]
 800b3c4:	f022 0210 	bic.w	r2, r2, #16
 800b3c8:	601a      	str	r2, [r3, #0]
 800b3ca:	e007      	b.n	800b3dc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	681a      	ldr	r2, [r3, #0]
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	f042 0210 	orr.w	r2, r2, #16
 800b3da:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800b3dc:	687b      	ldr	r3, [r7, #4]
 800b3de:	7f1b      	ldrb	r3, [r3, #28]
 800b3e0:	2b01      	cmp	r3, #1
 800b3e2:	d108      	bne.n	800b3f6 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b3e4:	687b      	ldr	r3, [r7, #4]
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	681a      	ldr	r2, [r3, #0]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	f042 0208 	orr.w	r2, r2, #8
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	e007      	b.n	800b406 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	681a      	ldr	r2, [r3, #0]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	681b      	ldr	r3, [r3, #0]
 800b400:	f022 0208 	bic.w	r2, r2, #8
 800b404:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	7f5b      	ldrb	r3, [r3, #29]
 800b40a:	2b01      	cmp	r3, #1
 800b40c:	d108      	bne.n	800b420 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b40e:	687b      	ldr	r3, [r7, #4]
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	f042 0204 	orr.w	r2, r2, #4
 800b41c:	601a      	str	r2, [r3, #0]
 800b41e:	e007      	b.n	800b430 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800b420:	687b      	ldr	r3, [r7, #4]
 800b422:	681b      	ldr	r3, [r3, #0]
 800b424:	681a      	ldr	r2, [r3, #0]
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	f022 0204 	bic.w	r2, r2, #4
 800b42e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	689a      	ldr	r2, [r3, #8]
 800b434:	687b      	ldr	r3, [r7, #4]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	431a      	orrs	r2, r3
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	691b      	ldr	r3, [r3, #16]
 800b43e:	431a      	orrs	r2, r3
 800b440:	687b      	ldr	r3, [r7, #4]
 800b442:	695b      	ldr	r3, [r3, #20]
 800b444:	ea42 0103 	orr.w	r1, r2, r3
 800b448:	687b      	ldr	r3, [r7, #4]
 800b44a:	685b      	ldr	r3, [r3, #4]
 800b44c:	1e5a      	subs	r2, r3, #1
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	430a      	orrs	r2, r1
 800b454:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	2200      	movs	r2, #0
 800b45a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2201      	movs	r2, #1
 800b460:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 800b464:	2300      	movs	r3, #0
}
 800b466:	4618      	mov	r0, r3
 800b468:	3710      	adds	r7, #16
 800b46a:	46bd      	mov	sp, r7
 800b46c:	bd80      	pop	{r7, pc}
	...

0800b470 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 800b470:	b480      	push	{r7}
 800b472:	b087      	sub	sp, #28
 800b474:	af00      	add	r7, sp, #0
 800b476:	6078      	str	r0, [r7, #4]
 800b478:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b480:	687b      	ldr	r3, [r7, #4]
 800b482:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b486:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 800b488:	7cfb      	ldrb	r3, [r7, #19]
 800b48a:	2b01      	cmp	r3, #1
 800b48c:	d003      	beq.n	800b496 <HAL_CAN_ConfigFilter+0x26>
 800b48e:	7cfb      	ldrb	r3, [r7, #19]
 800b490:	2b02      	cmp	r3, #2
 800b492:	f040 80be 	bne.w	800b612 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 800b496:	4b65      	ldr	r3, [pc, #404]	; (800b62c <HAL_CAN_ConfigFilter+0x1bc>)
 800b498:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b49a:	697b      	ldr	r3, [r7, #20]
 800b49c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4a0:	f043 0201 	orr.w	r2, r3, #1
 800b4a4:	697b      	ldr	r3, [r7, #20]
 800b4a6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 800b4aa:	697b      	ldr	r3, [r7, #20]
 800b4ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b4b0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 800b4b4:	697b      	ldr	r3, [r7, #20]
 800b4b6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 800b4ba:	697b      	ldr	r3, [r7, #20]
 800b4bc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4c4:	021b      	lsls	r3, r3, #8
 800b4c6:	431a      	orrs	r2, r3
 800b4c8:	697b      	ldr	r3, [r7, #20]
 800b4ca:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800b4ce:	683b      	ldr	r3, [r7, #0]
 800b4d0:	695b      	ldr	r3, [r3, #20]
 800b4d2:	f003 031f 	and.w	r3, r3, #31
 800b4d6:	2201      	movs	r2, #1
 800b4d8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4dc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800b4de:	697b      	ldr	r3, [r7, #20]
 800b4e0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b4e4:	68fb      	ldr	r3, [r7, #12]
 800b4e6:	43db      	mvns	r3, r3
 800b4e8:	401a      	ands	r2, r3
 800b4ea:	697b      	ldr	r3, [r7, #20]
 800b4ec:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800b4f0:	683b      	ldr	r3, [r7, #0]
 800b4f2:	69db      	ldr	r3, [r3, #28]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d123      	bne.n	800b540 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800b4f8:	697b      	ldr	r3, [r7, #20]
 800b4fa:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b4fe:	68fb      	ldr	r3, [r7, #12]
 800b500:	43db      	mvns	r3, r3
 800b502:	401a      	ands	r2, r3
 800b504:	697b      	ldr	r3, [r7, #20]
 800b506:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b50a:	683b      	ldr	r3, [r7, #0]
 800b50c:	68db      	ldr	r3, [r3, #12]
 800b50e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b510:	683b      	ldr	r3, [r7, #0]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b516:	683a      	ldr	r2, [r7, #0]
 800b518:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800b51a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b51c:	697b      	ldr	r3, [r7, #20]
 800b51e:	3248      	adds	r2, #72	; 0x48
 800b520:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b524:	683b      	ldr	r3, [r7, #0]
 800b526:	689b      	ldr	r3, [r3, #8]
 800b528:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800b52a:	683b      	ldr	r3, [r7, #0]
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b530:	683b      	ldr	r3, [r7, #0]
 800b532:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b534:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b536:	6979      	ldr	r1, [r7, #20]
 800b538:	3348      	adds	r3, #72	; 0x48
 800b53a:	00db      	lsls	r3, r3, #3
 800b53c:	440b      	add	r3, r1
 800b53e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 800b540:	683b      	ldr	r3, [r7, #0]
 800b542:	69db      	ldr	r3, [r3, #28]
 800b544:	2b01      	cmp	r3, #1
 800b546:	d122      	bne.n	800b58e <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800b548:	697b      	ldr	r3, [r7, #20]
 800b54a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	431a      	orrs	r2, r3
 800b552:	697b      	ldr	r3, [r7, #20]
 800b554:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b558:	683b      	ldr	r3, [r7, #0]
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800b55e:	683b      	ldr	r3, [r7, #0]
 800b560:	685b      	ldr	r3, [r3, #4]
 800b562:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b564:	683a      	ldr	r2, [r7, #0]
 800b566:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800b568:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800b56a:	697b      	ldr	r3, [r7, #20]
 800b56c:	3248      	adds	r2, #72	; 0x48
 800b56e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b572:	683b      	ldr	r3, [r7, #0]
 800b574:	689b      	ldr	r3, [r3, #8]
 800b576:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800b578:	683b      	ldr	r3, [r7, #0]
 800b57a:	68db      	ldr	r3, [r3, #12]
 800b57c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b57e:	683b      	ldr	r3, [r7, #0]
 800b580:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800b582:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800b584:	6979      	ldr	r1, [r7, #20]
 800b586:	3348      	adds	r3, #72	; 0x48
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	440b      	add	r3, r1
 800b58c:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	699b      	ldr	r3, [r3, #24]
 800b592:	2b00      	cmp	r3, #0
 800b594:	d109      	bne.n	800b5aa <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 800b596:	697b      	ldr	r3, [r7, #20]
 800b598:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b59c:	68fb      	ldr	r3, [r7, #12]
 800b59e:	43db      	mvns	r3, r3
 800b5a0:	401a      	ands	r2, r3
 800b5a2:	697b      	ldr	r3, [r7, #20]
 800b5a4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 800b5a8:	e007      	b.n	800b5ba <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 800b5aa:	697b      	ldr	r3, [r7, #20]
 800b5ac:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	431a      	orrs	r2, r3
 800b5b4:	697b      	ldr	r3, [r7, #20]
 800b5b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 800b5ba:	683b      	ldr	r3, [r7, #0]
 800b5bc:	691b      	ldr	r3, [r3, #16]
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d109      	bne.n	800b5d6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 800b5c2:	697b      	ldr	r3, [r7, #20]
 800b5c4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	43db      	mvns	r3, r3
 800b5cc:	401a      	ands	r2, r3
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 800b5d4:	e007      	b.n	800b5e6 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 800b5d6:	697b      	ldr	r3, [r7, #20]
 800b5d8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	431a      	orrs	r2, r3
 800b5e0:	697b      	ldr	r3, [r7, #20]
 800b5e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800b5e6:	683b      	ldr	r3, [r7, #0]
 800b5e8:	6a1b      	ldr	r3, [r3, #32]
 800b5ea:	2b01      	cmp	r3, #1
 800b5ec:	d107      	bne.n	800b5fe <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800b5ee:	697b      	ldr	r3, [r7, #20]
 800b5f0:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800b5f4:	68fb      	ldr	r3, [r7, #12]
 800b5f6:	431a      	orrs	r2, r3
 800b5f8:	697b      	ldr	r3, [r7, #20]
 800b5fa:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800b5fe:	697b      	ldr	r3, [r7, #20]
 800b600:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800b604:	f023 0201 	bic.w	r2, r3, #1
 800b608:	697b      	ldr	r3, [r7, #20]
 800b60a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800b60e:	2300      	movs	r3, #0
 800b610:	e006      	b.n	800b620 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b612:	687b      	ldr	r3, [r7, #4]
 800b614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b616:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b61e:	2301      	movs	r3, #1
  }
}
 800b620:	4618      	mov	r0, r3
 800b622:	371c      	adds	r7, #28
 800b624:	46bd      	mov	sp, r7
 800b626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b62a:	4770      	bx	lr
 800b62c:	40006400 	.word	0x40006400

0800b630 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800b630:	b580      	push	{r7, lr}
 800b632:	b084      	sub	sp, #16
 800b634:	af00      	add	r7, sp, #0
 800b636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800b638:	687b      	ldr	r3, [r7, #4]
 800b63a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b63e:	b2db      	uxtb	r3, r3
 800b640:	2b01      	cmp	r3, #1
 800b642:	d12e      	bne.n	800b6a2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800b644:	687b      	ldr	r3, [r7, #4]
 800b646:	2202      	movs	r2, #2
 800b648:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	681a      	ldr	r2, [r3, #0]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	681b      	ldr	r3, [r3, #0]
 800b656:	f022 0201 	bic.w	r2, r2, #1
 800b65a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b65c:	f7ff fddc 	bl	800b218 <HAL_GetTick>
 800b660:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b662:	e012      	b.n	800b68a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b664:	f7ff fdd8 	bl	800b218 <HAL_GetTick>
 800b668:	4602      	mov	r2, r0
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	1ad3      	subs	r3, r2, r3
 800b66e:	2b0a      	cmp	r3, #10
 800b670:	d90b      	bls.n	800b68a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b672:	687b      	ldr	r3, [r7, #4]
 800b674:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b676:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b67a:	687b      	ldr	r3, [r7, #4]
 800b67c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	2205      	movs	r2, #5
 800b682:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b686:	2301      	movs	r3, #1
 800b688:	e012      	b.n	800b6b0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	685b      	ldr	r3, [r3, #4]
 800b690:	f003 0301 	and.w	r3, r3, #1
 800b694:	2b00      	cmp	r3, #0
 800b696:	d1e5      	bne.n	800b664 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	2200      	movs	r2, #0
 800b69c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	e006      	b.n	800b6b0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6a6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800b6aa:	687b      	ldr	r3, [r7, #4]
 800b6ac:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b6ae:	2301      	movs	r3, #1
  }
}
 800b6b0:	4618      	mov	r0, r3
 800b6b2:	3710      	adds	r7, #16
 800b6b4:	46bd      	mov	sp, r7
 800b6b6:	bd80      	pop	{r7, pc}

0800b6b8 <HAL_CAN_Stop>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Stop(CAN_HandleTypeDef *hcan)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	b084      	sub	sp, #16
 800b6bc:	af00      	add	r7, sp, #0
 800b6be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_LISTENING)
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b6c6:	b2db      	uxtb	r3, r3
 800b6c8:	2b02      	cmp	r3, #2
 800b6ca:	d133      	bne.n	800b734 <HAL_CAN_Stop+0x7c>
  {
    /* Request initialisation */
    SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	681b      	ldr	r3, [r3, #0]
 800b6d0:	681a      	ldr	r2, [r3, #0]
 800b6d2:	687b      	ldr	r3, [r7, #4]
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	f042 0201 	orr.w	r2, r2, #1
 800b6da:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800b6dc:	f7ff fd9c 	bl	800b218 <HAL_GetTick>
 800b6e0:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b6e2:	e012      	b.n	800b70a <HAL_CAN_Stop+0x52>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800b6e4:	f7ff fd98 	bl	800b218 <HAL_GetTick>
 800b6e8:	4602      	mov	r2, r0
 800b6ea:	68fb      	ldr	r3, [r7, #12]
 800b6ec:	1ad3      	subs	r3, r2, r3
 800b6ee:	2b0a      	cmp	r3, #10
 800b6f0:	d90b      	bls.n	800b70a <HAL_CAN_Stop+0x52>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b6f6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800b6fa:	687b      	ldr	r3, [r7, #4]
 800b6fc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	2205      	movs	r2, #5
 800b702:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800b706:	2301      	movs	r3, #1
 800b708:	e01b      	b.n	800b742 <HAL_CAN_Stop+0x8a>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	681b      	ldr	r3, [r3, #0]
 800b70e:	685b      	ldr	r3, [r3, #4]
 800b710:	f003 0301 	and.w	r3, r3, #1
 800b714:	2b00      	cmp	r3, #0
 800b716:	d0e5      	beq.n	800b6e4 <HAL_CAN_Stop+0x2c>
      }
    }

    /* Exit from sleep mode */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800b718:	687b      	ldr	r3, [r7, #4]
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	681a      	ldr	r2, [r3, #0]
 800b71e:	687b      	ldr	r3, [r7, #4]
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f022 0202 	bic.w	r2, r2, #2
 800b726:	601a      	str	r2, [r3, #0]

    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_READY;
 800b728:	687b      	ldr	r3, [r7, #4]
 800b72a:	2201      	movs	r2, #1
 800b72c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Return function status */
    return HAL_OK;
 800b730:	2300      	movs	r3, #0
 800b732:	e006      	b.n	800b742 <HAL_CAN_Stop+0x8a>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_STARTED;
 800b734:	687b      	ldr	r3, [r7, #4]
 800b736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b738:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b740:	2301      	movs	r3, #1
  }
}
 800b742:	4618      	mov	r0, r3
 800b744:	3710      	adds	r7, #16
 800b746:	46bd      	mov	sp, r7
 800b748:	bd80      	pop	{r7, pc}

0800b74a <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 800b74a:	b480      	push	{r7}
 800b74c:	b089      	sub	sp, #36	; 0x24
 800b74e:	af00      	add	r7, sp, #0
 800b750:	60f8      	str	r0, [r7, #12]
 800b752:	60b9      	str	r1, [r7, #8]
 800b754:	607a      	str	r2, [r7, #4]
 800b756:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 800b758:	68fb      	ldr	r3, [r7, #12]
 800b75a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b75e:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800b760:	68fb      	ldr	r3, [r7, #12]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	689b      	ldr	r3, [r3, #8]
 800b766:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 800b768:	7ffb      	ldrb	r3, [r7, #31]
 800b76a:	2b01      	cmp	r3, #1
 800b76c:	d003      	beq.n	800b776 <HAL_CAN_AddTxMessage+0x2c>
 800b76e:	7ffb      	ldrb	r3, [r7, #31]
 800b770:	2b02      	cmp	r3, #2
 800b772:	f040 80ad 	bne.w	800b8d0 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b776:	69bb      	ldr	r3, [r7, #24]
 800b778:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b77c:	2b00      	cmp	r3, #0
 800b77e:	d10a      	bne.n	800b796 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800b786:	2b00      	cmp	r3, #0
 800b788:	d105      	bne.n	800b796 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800b78a:	69bb      	ldr	r3, [r7, #24]
 800b78c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800b790:	2b00      	cmp	r3, #0
 800b792:	f000 8095 	beq.w	800b8c0 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800b796:	69bb      	ldr	r3, [r7, #24]
 800b798:	0e1b      	lsrs	r3, r3, #24
 800b79a:	f003 0303 	and.w	r3, r3, #3
 800b79e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800b7a0:	2201      	movs	r2, #1
 800b7a2:	697b      	ldr	r3, [r7, #20]
 800b7a4:	409a      	lsls	r2, r3
 800b7a6:	683b      	ldr	r3, [r7, #0]
 800b7a8:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800b7aa:	68bb      	ldr	r3, [r7, #8]
 800b7ac:	689b      	ldr	r3, [r3, #8]
 800b7ae:	2b00      	cmp	r3, #0
 800b7b0:	d10d      	bne.n	800b7ce <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b7b2:	68bb      	ldr	r3, [r7, #8]
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800b7b8:	68bb      	ldr	r3, [r7, #8]
 800b7ba:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800b7bc:	68f9      	ldr	r1, [r7, #12]
 800b7be:	6809      	ldr	r1, [r1, #0]
 800b7c0:	431a      	orrs	r2, r3
 800b7c2:	697b      	ldr	r3, [r7, #20]
 800b7c4:	3318      	adds	r3, #24
 800b7c6:	011b      	lsls	r3, r3, #4
 800b7c8:	440b      	add	r3, r1
 800b7ca:	601a      	str	r2, [r3, #0]
 800b7cc:	e00f      	b.n	800b7ee <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	685b      	ldr	r3, [r3, #4]
 800b7d2:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800b7d4:	68bb      	ldr	r3, [r7, #8]
 800b7d6:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b7d8:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800b7da:	68bb      	ldr	r3, [r7, #8]
 800b7dc:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b7de:	68f9      	ldr	r1, [r7, #12]
 800b7e0:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800b7e2:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800b7e4:	697b      	ldr	r3, [r7, #20]
 800b7e6:	3318      	adds	r3, #24
 800b7e8:	011b      	lsls	r3, r3, #4
 800b7ea:	440b      	add	r3, r1
 800b7ec:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	6819      	ldr	r1, [r3, #0]
 800b7f2:	68bb      	ldr	r3, [r7, #8]
 800b7f4:	691a      	ldr	r2, [r3, #16]
 800b7f6:	697b      	ldr	r3, [r7, #20]
 800b7f8:	3318      	adds	r3, #24
 800b7fa:	011b      	lsls	r3, r3, #4
 800b7fc:	440b      	add	r3, r1
 800b7fe:	3304      	adds	r3, #4
 800b800:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800b802:	68bb      	ldr	r3, [r7, #8]
 800b804:	7d1b      	ldrb	r3, [r3, #20]
 800b806:	2b01      	cmp	r3, #1
 800b808:	d111      	bne.n	800b82e <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	681a      	ldr	r2, [r3, #0]
 800b80e:	697b      	ldr	r3, [r7, #20]
 800b810:	3318      	adds	r3, #24
 800b812:	011b      	lsls	r3, r3, #4
 800b814:	4413      	add	r3, r2
 800b816:	3304      	adds	r3, #4
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	6811      	ldr	r1, [r2, #0]
 800b81e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800b822:	697b      	ldr	r3, [r7, #20]
 800b824:	3318      	adds	r3, #24
 800b826:	011b      	lsls	r3, r3, #4
 800b828:	440b      	add	r3, r1
 800b82a:	3304      	adds	r3, #4
 800b82c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800b82e:	687b      	ldr	r3, [r7, #4]
 800b830:	3307      	adds	r3, #7
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	061a      	lsls	r2, r3, #24
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	3306      	adds	r3, #6
 800b83a:	781b      	ldrb	r3, [r3, #0]
 800b83c:	041b      	lsls	r3, r3, #16
 800b83e:	431a      	orrs	r2, r3
 800b840:	687b      	ldr	r3, [r7, #4]
 800b842:	3305      	adds	r3, #5
 800b844:	781b      	ldrb	r3, [r3, #0]
 800b846:	021b      	lsls	r3, r3, #8
 800b848:	4313      	orrs	r3, r2
 800b84a:	687a      	ldr	r2, [r7, #4]
 800b84c:	3204      	adds	r2, #4
 800b84e:	7812      	ldrb	r2, [r2, #0]
 800b850:	4610      	mov	r0, r2
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	6811      	ldr	r1, [r2, #0]
 800b856:	ea43 0200 	orr.w	r2, r3, r0
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	011b      	lsls	r3, r3, #4
 800b85e:	440b      	add	r3, r1
 800b860:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800b864:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	3303      	adds	r3, #3
 800b86a:	781b      	ldrb	r3, [r3, #0]
 800b86c:	061a      	lsls	r2, r3, #24
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	3302      	adds	r3, #2
 800b872:	781b      	ldrb	r3, [r3, #0]
 800b874:	041b      	lsls	r3, r3, #16
 800b876:	431a      	orrs	r2, r3
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	3301      	adds	r3, #1
 800b87c:	781b      	ldrb	r3, [r3, #0]
 800b87e:	021b      	lsls	r3, r3, #8
 800b880:	4313      	orrs	r3, r2
 800b882:	687a      	ldr	r2, [r7, #4]
 800b884:	7812      	ldrb	r2, [r2, #0]
 800b886:	4610      	mov	r0, r2
 800b888:	68fa      	ldr	r2, [r7, #12]
 800b88a:	6811      	ldr	r1, [r2, #0]
 800b88c:	ea43 0200 	orr.w	r2, r3, r0
 800b890:	697b      	ldr	r3, [r7, #20]
 800b892:	011b      	lsls	r3, r3, #4
 800b894:	440b      	add	r3, r1
 800b896:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800b89a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	681a      	ldr	r2, [r3, #0]
 800b8a0:	697b      	ldr	r3, [r7, #20]
 800b8a2:	3318      	adds	r3, #24
 800b8a4:	011b      	lsls	r3, r3, #4
 800b8a6:	4413      	add	r3, r2
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	68fa      	ldr	r2, [r7, #12]
 800b8ac:	6811      	ldr	r1, [r2, #0]
 800b8ae:	f043 0201 	orr.w	r2, r3, #1
 800b8b2:	697b      	ldr	r3, [r7, #20]
 800b8b4:	3318      	adds	r3, #24
 800b8b6:	011b      	lsls	r3, r3, #4
 800b8b8:	440b      	add	r3, r1
 800b8ba:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800b8bc:	2300      	movs	r3, #0
 800b8be:	e00e      	b.n	800b8de <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8c4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b8c8:	68fb      	ldr	r3, [r7, #12]
 800b8ca:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800b8cc:	2301      	movs	r3, #1
 800b8ce:	e006      	b.n	800b8de <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8d4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800b8d8:	68fb      	ldr	r3, [r7, #12]
 800b8da:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800b8dc:	2301      	movs	r3, #1
  }
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3724      	adds	r7, #36	; 0x24
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b085      	sub	sp, #20
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800b8f2:	2300      	movs	r3, #0
 800b8f4:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b8fc:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800b8fe:	7afb      	ldrb	r3, [r7, #11]
 800b900:	2b01      	cmp	r3, #1
 800b902:	d002      	beq.n	800b90a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 800b904:	7afb      	ldrb	r3, [r7, #11]
 800b906:	2b02      	cmp	r3, #2
 800b908:	d11d      	bne.n	800b946 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800b90a:	687b      	ldr	r3, [r7, #4]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	689b      	ldr	r3, [r3, #8]
 800b910:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800b914:	2b00      	cmp	r3, #0
 800b916:	d002      	beq.n	800b91e <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3301      	adds	r3, #1
 800b91c:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	689b      	ldr	r3, [r3, #8]
 800b924:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d002      	beq.n	800b932 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3301      	adds	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	689b      	ldr	r3, [r3, #8]
 800b938:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d002      	beq.n	800b946 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 800b940:	68fb      	ldr	r3, [r7, #12]
 800b942:	3301      	adds	r3, #1
 800b944:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800b946:	68fb      	ldr	r3, [r7, #12]
}
 800b948:	4618      	mov	r0, r3
 800b94a:	3714      	adds	r7, #20
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr

0800b954 <HAL_CAN_IsTxMessagePending>:
  *          - 0 : No pending transmission request on any selected Tx Mailboxes.
  *          - 1 : Pending transmission request on at least one of the selected
  *                Tx Mailbox.
  */
uint32_t HAL_CAN_IsTxMessagePending(const CAN_HandleTypeDef *hcan, uint32_t TxMailboxes)
{
 800b954:	b480      	push	{r7}
 800b956:	b085      	sub	sp, #20
 800b958:	af00      	add	r7, sp, #0
 800b95a:	6078      	str	r0, [r7, #4]
 800b95c:	6039      	str	r1, [r7, #0]
  uint32_t status = 0U;
 800b95e:	2300      	movs	r3, #0
 800b960:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b962:	687b      	ldr	r3, [r7, #4]
 800b964:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b968:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_TX_MAILBOX_LIST(TxMailboxes));

  if ((state == HAL_CAN_STATE_READY) ||
 800b96a:	7afb      	ldrb	r3, [r7, #11]
 800b96c:	2b01      	cmp	r3, #1
 800b96e:	d002      	beq.n	800b976 <HAL_CAN_IsTxMessagePending+0x22>
 800b970:	7afb      	ldrb	r3, [r7, #11]
 800b972:	2b02      	cmp	r3, #2
 800b974:	d10b      	bne.n	800b98e <HAL_CAN_IsTxMessagePending+0x3a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check pending transmission request on the selected Tx Mailboxes */
    if ((hcan->Instance->TSR & (TxMailboxes << CAN_TSR_TME0_Pos)) != (TxMailboxes << CAN_TSR_TME0_Pos))
 800b976:	687b      	ldr	r3, [r7, #4]
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	689a      	ldr	r2, [r3, #8]
 800b97c:	683b      	ldr	r3, [r7, #0]
 800b97e:	069b      	lsls	r3, r3, #26
 800b980:	401a      	ands	r2, r3
 800b982:	683b      	ldr	r3, [r7, #0]
 800b984:	069b      	lsls	r3, r3, #26
 800b986:	429a      	cmp	r2, r3
 800b988:	d001      	beq.n	800b98e <HAL_CAN_IsTxMessagePending+0x3a>
    {
      status = 1U;
 800b98a:	2301      	movs	r3, #1
 800b98c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return status */
  return status;
 800b98e:	68fb      	ldr	r3, [r7, #12]
}
 800b990:	4618      	mov	r0, r3
 800b992:	3714      	adds	r7, #20
 800b994:	46bd      	mov	sp, r7
 800b996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b99a:	4770      	bx	lr

0800b99c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800b99c:	b480      	push	{r7}
 800b99e:	b087      	sub	sp, #28
 800b9a0:	af00      	add	r7, sp, #0
 800b9a2:	60f8      	str	r0, [r7, #12]
 800b9a4:	60b9      	str	r1, [r7, #8]
 800b9a6:	607a      	str	r2, [r7, #4]
 800b9a8:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
 800b9ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 800b9b0:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800b9b2:	7dfb      	ldrb	r3, [r7, #23]
 800b9b4:	2b01      	cmp	r3, #1
 800b9b6:	d003      	beq.n	800b9c0 <HAL_CAN_GetRxMessage+0x24>
 800b9b8:	7dfb      	ldrb	r3, [r7, #23]
 800b9ba:	2b02      	cmp	r3, #2
 800b9bc:	f040 80f3 	bne.w	800bba6 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800b9c0:	68bb      	ldr	r3, [r7, #8]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d10e      	bne.n	800b9e4 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800b9c6:	68fb      	ldr	r3, [r7, #12]
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	68db      	ldr	r3, [r3, #12]
 800b9cc:	f003 0303 	and.w	r3, r3, #3
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d116      	bne.n	800ba02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9d8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b9dc:	68fb      	ldr	r3, [r7, #12]
 800b9de:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b9e0:	2301      	movs	r3, #1
 800b9e2:	e0e7      	b.n	800bbb4 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	691b      	ldr	r3, [r3, #16]
 800b9ea:	f003 0303 	and.w	r3, r3, #3
 800b9ee:	2b00      	cmp	r3, #0
 800b9f0:	d107      	bne.n	800ba02 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800b9f2:	68fb      	ldr	r3, [r7, #12]
 800b9f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b9f6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800b9fa:	68fb      	ldr	r3, [r7, #12]
 800b9fc:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	e0d8      	b.n	800bbb4 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800ba02:	68fb      	ldr	r3, [r7, #12]
 800ba04:	681a      	ldr	r2, [r3, #0]
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	331b      	adds	r3, #27
 800ba0a:	011b      	lsls	r3, r3, #4
 800ba0c:	4413      	add	r3, r2
 800ba0e:	681b      	ldr	r3, [r3, #0]
 800ba10:	f003 0204 	and.w	r2, r3, #4
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	689b      	ldr	r3, [r3, #8]
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d10c      	bne.n	800ba3a <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800ba20:	68fb      	ldr	r3, [r7, #12]
 800ba22:	681a      	ldr	r2, [r3, #0]
 800ba24:	68bb      	ldr	r3, [r7, #8]
 800ba26:	331b      	adds	r3, #27
 800ba28:	011b      	lsls	r3, r3, #4
 800ba2a:	4413      	add	r3, r2
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	0d5b      	lsrs	r3, r3, #21
 800ba30:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	601a      	str	r2, [r3, #0]
 800ba38:	e00b      	b.n	800ba52 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681a      	ldr	r2, [r3, #0]
 800ba3e:	68bb      	ldr	r3, [r7, #8]
 800ba40:	331b      	adds	r3, #27
 800ba42:	011b      	lsls	r3, r3, #4
 800ba44:	4413      	add	r3, r2
 800ba46:	681b      	ldr	r3, [r3, #0]
 800ba48:	08db      	lsrs	r3, r3, #3
 800ba4a:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 800ba4e:	687b      	ldr	r3, [r7, #4]
 800ba50:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	681a      	ldr	r2, [r3, #0]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	331b      	adds	r3, #27
 800ba5a:	011b      	lsls	r3, r3, #4
 800ba5c:	4413      	add	r3, r2
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f003 0202 	and.w	r2, r3, #2
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	681a      	ldr	r2, [r3, #0]
 800ba6c:	68bb      	ldr	r3, [r7, #8]
 800ba6e:	331b      	adds	r3, #27
 800ba70:	011b      	lsls	r3, r3, #4
 800ba72:	4413      	add	r3, r2
 800ba74:	3304      	adds	r3, #4
 800ba76:	681b      	ldr	r3, [r3, #0]
 800ba78:	f003 020f 	and.w	r2, r3, #15
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	331b      	adds	r3, #27
 800ba88:	011b      	lsls	r3, r3, #4
 800ba8a:	4413      	add	r3, r2
 800ba8c:	3304      	adds	r3, #4
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	0a1b      	lsrs	r3, r3, #8
 800ba92:	b2da      	uxtb	r2, r3
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	681a      	ldr	r2, [r3, #0]
 800ba9c:	68bb      	ldr	r3, [r7, #8]
 800ba9e:	331b      	adds	r3, #27
 800baa0:	011b      	lsls	r3, r3, #4
 800baa2:	4413      	add	r3, r2
 800baa4:	3304      	adds	r3, #4
 800baa6:	681b      	ldr	r3, [r3, #0]
 800baa8:	0c1b      	lsrs	r3, r3, #16
 800baaa:	b29a      	uxth	r2, r3
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	681a      	ldr	r2, [r3, #0]
 800bab4:	68bb      	ldr	r3, [r7, #8]
 800bab6:	011b      	lsls	r3, r3, #4
 800bab8:	4413      	add	r3, r2
 800baba:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800babe:	681b      	ldr	r3, [r3, #0]
 800bac0:	b2da      	uxtb	r2, r3
 800bac2:	683b      	ldr	r3, [r7, #0]
 800bac4:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800bac6:	68fb      	ldr	r3, [r7, #12]
 800bac8:	681a      	ldr	r2, [r3, #0]
 800baca:	68bb      	ldr	r3, [r7, #8]
 800bacc:	011b      	lsls	r3, r3, #4
 800bace:	4413      	add	r3, r2
 800bad0:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bad4:	681b      	ldr	r3, [r3, #0]
 800bad6:	0a1a      	lsrs	r2, r3, #8
 800bad8:	683b      	ldr	r3, [r7, #0]
 800bada:	3301      	adds	r3, #1
 800badc:	b2d2      	uxtb	r2, r2
 800bade:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800bae0:	68fb      	ldr	r3, [r7, #12]
 800bae2:	681a      	ldr	r2, [r3, #0]
 800bae4:	68bb      	ldr	r3, [r7, #8]
 800bae6:	011b      	lsls	r3, r3, #4
 800bae8:	4413      	add	r3, r2
 800baea:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	0c1a      	lsrs	r2, r3, #16
 800baf2:	683b      	ldr	r3, [r7, #0]
 800baf4:	3302      	adds	r3, #2
 800baf6:	b2d2      	uxtb	r2, r2
 800baf8:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800bafa:	68fb      	ldr	r3, [r7, #12]
 800bafc:	681a      	ldr	r2, [r3, #0]
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	011b      	lsls	r3, r3, #4
 800bb02:	4413      	add	r3, r2
 800bb04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	0e1a      	lsrs	r2, r3, #24
 800bb0c:	683b      	ldr	r3, [r7, #0]
 800bb0e:	3303      	adds	r3, #3
 800bb10:	b2d2      	uxtb	r2, r2
 800bb12:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	681a      	ldr	r2, [r3, #0]
 800bb18:	68bb      	ldr	r3, [r7, #8]
 800bb1a:	011b      	lsls	r3, r3, #4
 800bb1c:	4413      	add	r3, r2
 800bb1e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb22:	681a      	ldr	r2, [r3, #0]
 800bb24:	683b      	ldr	r3, [r7, #0]
 800bb26:	3304      	adds	r3, #4
 800bb28:	b2d2      	uxtb	r2, r2
 800bb2a:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800bb2c:	68fb      	ldr	r3, [r7, #12]
 800bb2e:	681a      	ldr	r2, [r3, #0]
 800bb30:	68bb      	ldr	r3, [r7, #8]
 800bb32:	011b      	lsls	r3, r3, #4
 800bb34:	4413      	add	r3, r2
 800bb36:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	0a1a      	lsrs	r2, r3, #8
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	3305      	adds	r3, #5
 800bb42:	b2d2      	uxtb	r2, r2
 800bb44:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800bb46:	68fb      	ldr	r3, [r7, #12]
 800bb48:	681a      	ldr	r2, [r3, #0]
 800bb4a:	68bb      	ldr	r3, [r7, #8]
 800bb4c:	011b      	lsls	r3, r3, #4
 800bb4e:	4413      	add	r3, r2
 800bb50:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	0c1a      	lsrs	r2, r3, #16
 800bb58:	683b      	ldr	r3, [r7, #0]
 800bb5a:	3306      	adds	r3, #6
 800bb5c:	b2d2      	uxtb	r2, r2
 800bb5e:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	681a      	ldr	r2, [r3, #0]
 800bb64:	68bb      	ldr	r3, [r7, #8]
 800bb66:	011b      	lsls	r3, r3, #4
 800bb68:	4413      	add	r3, r2
 800bb6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800bb6e:	681b      	ldr	r3, [r3, #0]
 800bb70:	0e1a      	lsrs	r2, r3, #24
 800bb72:	683b      	ldr	r3, [r7, #0]
 800bb74:	3307      	adds	r3, #7
 800bb76:	b2d2      	uxtb	r2, r2
 800bb78:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800bb7a:	68bb      	ldr	r3, [r7, #8]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d108      	bne.n	800bb92 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	68da      	ldr	r2, [r3, #12]
 800bb86:	68fb      	ldr	r3, [r7, #12]
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	f042 0220 	orr.w	r2, r2, #32
 800bb8e:	60da      	str	r2, [r3, #12]
 800bb90:	e007      	b.n	800bba2 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800bb92:	68fb      	ldr	r3, [r7, #12]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	691a      	ldr	r2, [r3, #16]
 800bb98:	68fb      	ldr	r3, [r7, #12]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f042 0220 	orr.w	r2, r2, #32
 800bba0:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800bba2:	2300      	movs	r3, #0
 800bba4:	e006      	b.n	800bbb4 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800bba6:	68fb      	ldr	r3, [r7, #12]
 800bba8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bbaa:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800bbae:	68fb      	ldr	r3, [r7, #12]
 800bbb0:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800bbb2:	2301      	movs	r3, #1
  }
}
 800bbb4:	4618      	mov	r0, r3
 800bbb6:	371c      	adds	r7, #28
 800bbb8:	46bd      	mov	sp, r7
 800bbba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbbe:	4770      	bx	lr

0800bbc0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	b08a      	sub	sp, #40	; 0x28
 800bbc4:	af00      	add	r7, sp, #0
 800bbc6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 800bbc8:	2300      	movs	r3, #0
 800bbca:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800bbcc:	687b      	ldr	r3, [r7, #4]
 800bbce:	681b      	ldr	r3, [r3, #0]
 800bbd0:	695b      	ldr	r3, [r3, #20]
 800bbd2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 800bbd4:	687b      	ldr	r3, [r7, #4]
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	685b      	ldr	r3, [r3, #4]
 800bbda:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800bbdc:	687b      	ldr	r3, [r7, #4]
 800bbde:	681b      	ldr	r3, [r3, #0]
 800bbe0:	689b      	ldr	r3, [r3, #8]
 800bbe2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	68db      	ldr	r3, [r3, #12]
 800bbea:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 800bbec:	687b      	ldr	r3, [r7, #4]
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	691b      	ldr	r3, [r3, #16]
 800bbf2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	699b      	ldr	r3, [r3, #24]
 800bbfa:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800bbfc:	6a3b      	ldr	r3, [r7, #32]
 800bbfe:	f003 0301 	and.w	r3, r3, #1
 800bc02:	2b00      	cmp	r3, #0
 800bc04:	d07c      	beq.n	800bd00 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 800bc06:	69bb      	ldr	r3, [r7, #24]
 800bc08:	f003 0301 	and.w	r3, r3, #1
 800bc0c:	2b00      	cmp	r3, #0
 800bc0e:	d023      	beq.n	800bc58 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800bc10:	687b      	ldr	r3, [r7, #4]
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	2201      	movs	r2, #1
 800bc16:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800bc18:	69bb      	ldr	r3, [r7, #24]
 800bc1a:	f003 0302 	and.w	r3, r3, #2
 800bc1e:	2b00      	cmp	r3, #0
 800bc20:	d003      	beq.n	800bc2a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800bc22:	6878      	ldr	r0, [r7, #4]
 800bc24:	f000 f983 	bl	800bf2e <HAL_CAN_TxMailbox0CompleteCallback>
 800bc28:	e016      	b.n	800bc58 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800bc2a:	69bb      	ldr	r3, [r7, #24]
 800bc2c:	f003 0304 	and.w	r3, r3, #4
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d004      	beq.n	800bc3e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 800bc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc36:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800bc3a:	627b      	str	r3, [r7, #36]	; 0x24
 800bc3c:	e00c      	b.n	800bc58 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800bc3e:	69bb      	ldr	r3, [r7, #24]
 800bc40:	f003 0308 	and.w	r3, r3, #8
 800bc44:	2b00      	cmp	r3, #0
 800bc46:	d004      	beq.n	800bc52 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800bc48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc4a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800bc4e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc50:	e002      	b.n	800bc58 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800bc52:	6878      	ldr	r0, [r7, #4]
 800bc54:	f000 f989 	bl	800bf6a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800bc58:	69bb      	ldr	r3, [r7, #24]
 800bc5a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d024      	beq.n	800bcac <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	681b      	ldr	r3, [r3, #0]
 800bc66:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bc6a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800bc6c:	69bb      	ldr	r3, [r7, #24]
 800bc6e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bc72:	2b00      	cmp	r3, #0
 800bc74:	d003      	beq.n	800bc7e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 800bc76:	6878      	ldr	r0, [r7, #4]
 800bc78:	f000 f963 	bl	800bf42 <HAL_CAN_TxMailbox1CompleteCallback>
 800bc7c:	e016      	b.n	800bcac <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800bc7e:	69bb      	ldr	r3, [r7, #24]
 800bc80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d004      	beq.n	800bc92 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800bc88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc8a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800bc8e:	627b      	str	r3, [r7, #36]	; 0x24
 800bc90:	e00c      	b.n	800bcac <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 800bc92:	69bb      	ldr	r3, [r7, #24]
 800bc94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d004      	beq.n	800bca6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800bc9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bc9e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bca2:	627b      	str	r3, [r7, #36]	; 0x24
 800bca4:	e002      	b.n	800bcac <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 800bca6:	6878      	ldr	r0, [r7, #4]
 800bca8:	f000 f969 	bl	800bf7e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800bcac:	69bb      	ldr	r3, [r7, #24]
 800bcae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d024      	beq.n	800bd00 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	681b      	ldr	r3, [r3, #0]
 800bcba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bcbe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800bcc0:	69bb      	ldr	r3, [r7, #24]
 800bcc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d003      	beq.n	800bcd2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 800bcca:	6878      	ldr	r0, [r7, #4]
 800bccc:	f000 f943 	bl	800bf56 <HAL_CAN_TxMailbox2CompleteCallback>
 800bcd0:	e016      	b.n	800bd00 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800bcd2:	69bb      	ldr	r3, [r7, #24]
 800bcd4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800bcd8:	2b00      	cmp	r3, #0
 800bcda:	d004      	beq.n	800bce6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800bcdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bce2:	627b      	str	r3, [r7, #36]	; 0x24
 800bce4:	e00c      	b.n	800bd00 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 800bce6:	69bb      	ldr	r3, [r7, #24]
 800bce8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	d004      	beq.n	800bcfa <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800bcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcf2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800bcf6:	627b      	str	r3, [r7, #36]	; 0x24
 800bcf8:	e002      	b.n	800bd00 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f000 f949 	bl	800bf92 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800bd00:	6a3b      	ldr	r3, [r7, #32]
 800bd02:	f003 0308 	and.w	r3, r3, #8
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d00c      	beq.n	800bd24 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	f003 0310 	and.w	r3, r3, #16
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d007      	beq.n	800bd24 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 800bd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800bd1a:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800bd1c:	687b      	ldr	r3, [r7, #4]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2210      	movs	r2, #16
 800bd22:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 800bd24:	6a3b      	ldr	r3, [r7, #32]
 800bd26:	f003 0304 	and.w	r3, r3, #4
 800bd2a:	2b00      	cmp	r3, #0
 800bd2c:	d00b      	beq.n	800bd46 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800bd2e:	697b      	ldr	r3, [r7, #20]
 800bd30:	f003 0308 	and.w	r3, r3, #8
 800bd34:	2b00      	cmp	r3, #0
 800bd36:	d006      	beq.n	800bd46 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800bd38:	687b      	ldr	r3, [r7, #4]
 800bd3a:	681b      	ldr	r3, [r3, #0]
 800bd3c:	2208      	movs	r2, #8
 800bd3e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800bd40:	6878      	ldr	r0, [r7, #4]
 800bd42:	f000 f930 	bl	800bfa6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 800bd46:	6a3b      	ldr	r3, [r7, #32]
 800bd48:	f003 0302 	and.w	r3, r3, #2
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d009      	beq.n	800bd64 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800bd50:	687b      	ldr	r3, [r7, #4]
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	f003 0303 	and.w	r3, r3, #3
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d002      	beq.n	800bd64 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800bd5e:	6878      	ldr	r0, [r7, #4]
 800bd60:	f7fe faa1 	bl	800a2a6 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800bd64:	6a3b      	ldr	r3, [r7, #32]
 800bd66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bd6a:	2b00      	cmp	r3, #0
 800bd6c:	d00c      	beq.n	800bd88 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800bd6e:	693b      	ldr	r3, [r7, #16]
 800bd70:	f003 0310 	and.w	r3, r3, #16
 800bd74:	2b00      	cmp	r3, #0
 800bd76:	d007      	beq.n	800bd88 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800bd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800bd7e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800bd80:	687b      	ldr	r3, [r7, #4]
 800bd82:	681b      	ldr	r3, [r3, #0]
 800bd84:	2210      	movs	r2, #16
 800bd86:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800bd88:	6a3b      	ldr	r3, [r7, #32]
 800bd8a:	f003 0320 	and.w	r3, r3, #32
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	d00b      	beq.n	800bdaa <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800bd92:	693b      	ldr	r3, [r7, #16]
 800bd94:	f003 0308 	and.w	r3, r3, #8
 800bd98:	2b00      	cmp	r3, #0
 800bd9a:	d006      	beq.n	800bdaa <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	681b      	ldr	r3, [r3, #0]
 800bda0:	2208      	movs	r2, #8
 800bda2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800bda4:	6878      	ldr	r0, [r7, #4]
 800bda6:	f000 f912 	bl	800bfce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	f003 0310 	and.w	r3, r3, #16
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d009      	beq.n	800bdc8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	681b      	ldr	r3, [r3, #0]
 800bdb8:	691b      	ldr	r3, [r3, #16]
 800bdba:	f003 0303 	and.w	r3, r3, #3
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d002      	beq.n	800bdc8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800bdc2:	6878      	ldr	r0, [r7, #4]
 800bdc4:	f000 f8f9 	bl	800bfba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 800bdc8:	6a3b      	ldr	r3, [r7, #32]
 800bdca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bdce:	2b00      	cmp	r3, #0
 800bdd0:	d00b      	beq.n	800bdea <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800bdd2:	69fb      	ldr	r3, [r7, #28]
 800bdd4:	f003 0310 	and.w	r3, r3, #16
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d006      	beq.n	800bdea <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800bddc:	687b      	ldr	r3, [r7, #4]
 800bdde:	681b      	ldr	r3, [r3, #0]
 800bde0:	2210      	movs	r2, #16
 800bde2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800bde4:	6878      	ldr	r0, [r7, #4]
 800bde6:	f000 f8fc 	bl	800bfe2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 800bdea:	6a3b      	ldr	r3, [r7, #32]
 800bdec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bdf0:	2b00      	cmp	r3, #0
 800bdf2:	d00b      	beq.n	800be0c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800bdf4:	69fb      	ldr	r3, [r7, #28]
 800bdf6:	f003 0308 	and.w	r3, r3, #8
 800bdfa:	2b00      	cmp	r3, #0
 800bdfc:	d006      	beq.n	800be0c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	2208      	movs	r2, #8
 800be04:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 800be06:	6878      	ldr	r0, [r7, #4]
 800be08:	f000 f8f5 	bl	800bff6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800be0c:	6a3b      	ldr	r3, [r7, #32]
 800be0e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800be12:	2b00      	cmp	r3, #0
 800be14:	d07b      	beq.n	800bf0e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 800be16:	69fb      	ldr	r3, [r7, #28]
 800be18:	f003 0304 	and.w	r3, r3, #4
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	d072      	beq.n	800bf06 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800be20:	6a3b      	ldr	r3, [r7, #32]
 800be22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800be26:	2b00      	cmp	r3, #0
 800be28:	d008      	beq.n	800be3c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800be30:	2b00      	cmp	r3, #0
 800be32:	d003      	beq.n	800be3c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 800be34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be36:	f043 0301 	orr.w	r3, r3, #1
 800be3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800be3c:	6a3b      	ldr	r3, [r7, #32]
 800be3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800be42:	2b00      	cmp	r3, #0
 800be44:	d008      	beq.n	800be58 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 800be46:	68fb      	ldr	r3, [r7, #12]
 800be48:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800be4c:	2b00      	cmp	r3, #0
 800be4e:	d003      	beq.n	800be58 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800be50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be52:	f043 0302 	orr.w	r3, r3, #2
 800be56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800be58:	6a3b      	ldr	r3, [r7, #32]
 800be5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800be5e:	2b00      	cmp	r3, #0
 800be60:	d008      	beq.n	800be74 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d003      	beq.n	800be74 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800be6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be6e:	f043 0304 	orr.w	r3, r3, #4
 800be72:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800be74:	6a3b      	ldr	r3, [r7, #32]
 800be76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d043      	beq.n	800bf06 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800be84:	2b00      	cmp	r3, #0
 800be86:	d03e      	beq.n	800bf06 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800be8e:	2b60      	cmp	r3, #96	; 0x60
 800be90:	d02b      	beq.n	800beea <HAL_CAN_IRQHandler+0x32a>
 800be92:	2b60      	cmp	r3, #96	; 0x60
 800be94:	d82e      	bhi.n	800bef4 <HAL_CAN_IRQHandler+0x334>
 800be96:	2b50      	cmp	r3, #80	; 0x50
 800be98:	d022      	beq.n	800bee0 <HAL_CAN_IRQHandler+0x320>
 800be9a:	2b50      	cmp	r3, #80	; 0x50
 800be9c:	d82a      	bhi.n	800bef4 <HAL_CAN_IRQHandler+0x334>
 800be9e:	2b40      	cmp	r3, #64	; 0x40
 800bea0:	d019      	beq.n	800bed6 <HAL_CAN_IRQHandler+0x316>
 800bea2:	2b40      	cmp	r3, #64	; 0x40
 800bea4:	d826      	bhi.n	800bef4 <HAL_CAN_IRQHandler+0x334>
 800bea6:	2b30      	cmp	r3, #48	; 0x30
 800bea8:	d010      	beq.n	800becc <HAL_CAN_IRQHandler+0x30c>
 800beaa:	2b30      	cmp	r3, #48	; 0x30
 800beac:	d822      	bhi.n	800bef4 <HAL_CAN_IRQHandler+0x334>
 800beae:	2b10      	cmp	r3, #16
 800beb0:	d002      	beq.n	800beb8 <HAL_CAN_IRQHandler+0x2f8>
 800beb2:	2b20      	cmp	r3, #32
 800beb4:	d005      	beq.n	800bec2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800beb6:	e01d      	b.n	800bef4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 800beb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beba:	f043 0308 	orr.w	r3, r3, #8
 800bebe:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bec0:	e019      	b.n	800bef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800bec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bec4:	f043 0310 	orr.w	r3, r3, #16
 800bec8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800beca:	e014      	b.n	800bef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800becc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bece:	f043 0320 	orr.w	r3, r3, #32
 800bed2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bed4:	e00f      	b.n	800bef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800bed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bedc:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bede:	e00a      	b.n	800bef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800bee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bee2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bee8:	e005      	b.n	800bef6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 800beea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800beec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bef0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800bef2:	e000      	b.n	800bef6 <HAL_CAN_IRQHandler+0x336>
            break;
 800bef4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	699a      	ldr	r2, [r3, #24]
 800befc:	687b      	ldr	r3, [r7, #4]
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 800bf04:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	2204      	movs	r2, #4
 800bf0c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800bf0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d008      	beq.n	800bf26 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800bf18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf1a:	431a      	orrs	r2, r3
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800bf20:	6878      	ldr	r0, [r7, #4]
 800bf22:	f000 f872 	bl	800c00a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 800bf26:	bf00      	nop
 800bf28:	3728      	adds	r7, #40	; 0x28
 800bf2a:	46bd      	mov	sp, r7
 800bf2c:	bd80      	pop	{r7, pc}

0800bf2e <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bf2e:	b480      	push	{r7}
 800bf30:	b083      	sub	sp, #12
 800bf32:	af00      	add	r7, sp, #0
 800bf34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 800bf36:	bf00      	nop
 800bf38:	370c      	adds	r7, #12
 800bf3a:	46bd      	mov	sp, r7
 800bf3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf40:	4770      	bx	lr

0800bf42 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bf42:	b480      	push	{r7}
 800bf44:	b083      	sub	sp, #12
 800bf46:	af00      	add	r7, sp, #0
 800bf48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800bf4a:	bf00      	nop
 800bf4c:	370c      	adds	r7, #12
 800bf4e:	46bd      	mov	sp, r7
 800bf50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf54:	4770      	bx	lr

0800bf56 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 800bf56:	b480      	push	{r7}
 800bf58:	b083      	sub	sp, #12
 800bf5a:	af00      	add	r7, sp, #0
 800bf5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 800bf5e:	bf00      	nop
 800bf60:	370c      	adds	r7, #12
 800bf62:	46bd      	mov	sp, r7
 800bf64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf68:	4770      	bx	lr

0800bf6a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bf6a:	b480      	push	{r7}
 800bf6c:	b083      	sub	sp, #12
 800bf6e:	af00      	add	r7, sp, #0
 800bf70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800bf72:	bf00      	nop
 800bf74:	370c      	adds	r7, #12
 800bf76:	46bd      	mov	sp, r7
 800bf78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf7c:	4770      	bx	lr

0800bf7e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bf7e:	b480      	push	{r7}
 800bf80:	b083      	sub	sp, #12
 800bf82:	af00      	add	r7, sp, #0
 800bf84:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800bf86:	bf00      	nop
 800bf88:	370c      	adds	r7, #12
 800bf8a:	46bd      	mov	sp, r7
 800bf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf90:	4770      	bx	lr

0800bf92 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800bf92:	b480      	push	{r7}
 800bf94:	b083      	sub	sp, #12
 800bf96:	af00      	add	r7, sp, #0
 800bf98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800bf9a:	bf00      	nop
 800bf9c:	370c      	adds	r7, #12
 800bf9e:	46bd      	mov	sp, r7
 800bfa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfa4:	4770      	bx	lr

0800bfa6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800bfa6:	b480      	push	{r7}
 800bfa8:	b083      	sub	sp, #12
 800bfaa:	af00      	add	r7, sp, #0
 800bfac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 800bfae:	bf00      	nop
 800bfb0:	370c      	adds	r7, #12
 800bfb2:	46bd      	mov	sp, r7
 800bfb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb8:	4770      	bx	lr

0800bfba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800bfba:	b480      	push	{r7}
 800bfbc:	b083      	sub	sp, #12
 800bfbe:	af00      	add	r7, sp, #0
 800bfc0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800bfc2:	bf00      	nop
 800bfc4:	370c      	adds	r7, #12
 800bfc6:	46bd      	mov	sp, r7
 800bfc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfcc:	4770      	bx	lr

0800bfce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 800bfce:	b480      	push	{r7}
 800bfd0:	b083      	sub	sp, #12
 800bfd2:	af00      	add	r7, sp, #0
 800bfd4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800bfd6:	bf00      	nop
 800bfd8:	370c      	adds	r7, #12
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe0:	4770      	bx	lr

0800bfe2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800bfe2:	b480      	push	{r7}
 800bfe4:	b083      	sub	sp, #12
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800bfea:	bf00      	nop
 800bfec:	370c      	adds	r7, #12
 800bfee:	46bd      	mov	sp, r7
 800bff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff4:	4770      	bx	lr

0800bff6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800bff6:	b480      	push	{r7}
 800bff8:	b083      	sub	sp, #12
 800bffa:	af00      	add	r7, sp, #0
 800bffc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 800bffe:	bf00      	nop
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr

0800c00a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800c00a:	b480      	push	{r7}
 800c00c:	b083      	sub	sp, #12
 800c00e:	af00      	add	r7, sp, #0
 800c010:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 800c012:	bf00      	nop
 800c014:	370c      	adds	r7, #12
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
	...

0800c020 <__NVIC_SetPriorityGrouping>:
{
 800c020:	b480      	push	{r7}
 800c022:	b085      	sub	sp, #20
 800c024:	af00      	add	r7, sp, #0
 800c026:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800c028:	687b      	ldr	r3, [r7, #4]
 800c02a:	f003 0307 	and.w	r3, r3, #7
 800c02e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800c030:	4b0b      	ldr	r3, [pc, #44]	; (800c060 <__NVIC_SetPriorityGrouping+0x40>)
 800c032:	68db      	ldr	r3, [r3, #12]
 800c034:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800c036:	68ba      	ldr	r2, [r7, #8]
 800c038:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800c03c:	4013      	ands	r3, r2
 800c03e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800c048:	4b06      	ldr	r3, [pc, #24]	; (800c064 <__NVIC_SetPriorityGrouping+0x44>)
 800c04a:	4313      	orrs	r3, r2
 800c04c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800c04e:	4a04      	ldr	r2, [pc, #16]	; (800c060 <__NVIC_SetPriorityGrouping+0x40>)
 800c050:	68bb      	ldr	r3, [r7, #8]
 800c052:	60d3      	str	r3, [r2, #12]
}
 800c054:	bf00      	nop
 800c056:	3714      	adds	r7, #20
 800c058:	46bd      	mov	sp, r7
 800c05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c05e:	4770      	bx	lr
 800c060:	e000ed00 	.word	0xe000ed00
 800c064:	05fa0000 	.word	0x05fa0000

0800c068 <__NVIC_GetPriorityGrouping>:
{
 800c068:	b480      	push	{r7}
 800c06a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800c06c:	4b04      	ldr	r3, [pc, #16]	; (800c080 <__NVIC_GetPriorityGrouping+0x18>)
 800c06e:	68db      	ldr	r3, [r3, #12]
 800c070:	0a1b      	lsrs	r3, r3, #8
 800c072:	f003 0307 	and.w	r3, r3, #7
}
 800c076:	4618      	mov	r0, r3
 800c078:	46bd      	mov	sp, r7
 800c07a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c07e:	4770      	bx	lr
 800c080:	e000ed00 	.word	0xe000ed00

0800c084 <__NVIC_EnableIRQ>:
{
 800c084:	b480      	push	{r7}
 800c086:	b083      	sub	sp, #12
 800c088:	af00      	add	r7, sp, #0
 800c08a:	4603      	mov	r3, r0
 800c08c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c08e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c092:	2b00      	cmp	r3, #0
 800c094:	db0b      	blt.n	800c0ae <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c096:	79fb      	ldrb	r3, [r7, #7]
 800c098:	f003 021f 	and.w	r2, r3, #31
 800c09c:	4907      	ldr	r1, [pc, #28]	; (800c0bc <__NVIC_EnableIRQ+0x38>)
 800c09e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0a2:	095b      	lsrs	r3, r3, #5
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	fa00 f202 	lsl.w	r2, r0, r2
 800c0aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800c0ae:	bf00      	nop
 800c0b0:	370c      	adds	r7, #12
 800c0b2:	46bd      	mov	sp, r7
 800c0b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0b8:	4770      	bx	lr
 800c0ba:	bf00      	nop
 800c0bc:	e000e100 	.word	0xe000e100

0800c0c0 <__NVIC_DisableIRQ>:
{
 800c0c0:	b480      	push	{r7}
 800c0c2:	b083      	sub	sp, #12
 800c0c4:	af00      	add	r7, sp, #0
 800c0c6:	4603      	mov	r3, r0
 800c0c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c0ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0ce:	2b00      	cmp	r3, #0
 800c0d0:	db12      	blt.n	800c0f8 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c0d2:	79fb      	ldrb	r3, [r7, #7]
 800c0d4:	f003 021f 	and.w	r2, r3, #31
 800c0d8:	490a      	ldr	r1, [pc, #40]	; (800c104 <__NVIC_DisableIRQ+0x44>)
 800c0da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c0de:	095b      	lsrs	r3, r3, #5
 800c0e0:	2001      	movs	r0, #1
 800c0e2:	fa00 f202 	lsl.w	r2, r0, r2
 800c0e6:	3320      	adds	r3, #32
 800c0e8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800c0ec:	f3bf 8f4f 	dsb	sy
}
 800c0f0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800c0f2:	f3bf 8f6f 	isb	sy
}
 800c0f6:	bf00      	nop
}
 800c0f8:	bf00      	nop
 800c0fa:	370c      	adds	r7, #12
 800c0fc:	46bd      	mov	sp, r7
 800c0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c102:	4770      	bx	lr
 800c104:	e000e100 	.word	0xe000e100

0800c108 <__NVIC_SetPriority>:
{
 800c108:	b480      	push	{r7}
 800c10a:	b083      	sub	sp, #12
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	6039      	str	r1, [r7, #0]
 800c112:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800c114:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c118:	2b00      	cmp	r3, #0
 800c11a:	db0a      	blt.n	800c132 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c11c:	683b      	ldr	r3, [r7, #0]
 800c11e:	b2da      	uxtb	r2, r3
 800c120:	490c      	ldr	r1, [pc, #48]	; (800c154 <__NVIC_SetPriority+0x4c>)
 800c122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c126:	0112      	lsls	r2, r2, #4
 800c128:	b2d2      	uxtb	r2, r2
 800c12a:	440b      	add	r3, r1
 800c12c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800c130:	e00a      	b.n	800c148 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c132:	683b      	ldr	r3, [r7, #0]
 800c134:	b2da      	uxtb	r2, r3
 800c136:	4908      	ldr	r1, [pc, #32]	; (800c158 <__NVIC_SetPriority+0x50>)
 800c138:	79fb      	ldrb	r3, [r7, #7]
 800c13a:	f003 030f 	and.w	r3, r3, #15
 800c13e:	3b04      	subs	r3, #4
 800c140:	0112      	lsls	r2, r2, #4
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	440b      	add	r3, r1
 800c146:	761a      	strb	r2, [r3, #24]
}
 800c148:	bf00      	nop
 800c14a:	370c      	adds	r7, #12
 800c14c:	46bd      	mov	sp, r7
 800c14e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c152:	4770      	bx	lr
 800c154:	e000e100 	.word	0xe000e100
 800c158:	e000ed00 	.word	0xe000ed00

0800c15c <NVIC_EncodePriority>:
{
 800c15c:	b480      	push	{r7}
 800c15e:	b089      	sub	sp, #36	; 0x24
 800c160:	af00      	add	r7, sp, #0
 800c162:	60f8      	str	r0, [r7, #12]
 800c164:	60b9      	str	r1, [r7, #8]
 800c166:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f003 0307 	and.w	r3, r3, #7
 800c16e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	f1c3 0307 	rsb	r3, r3, #7
 800c176:	2b04      	cmp	r3, #4
 800c178:	bf28      	it	cs
 800c17a:	2304      	movcs	r3, #4
 800c17c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800c17e:	69fb      	ldr	r3, [r7, #28]
 800c180:	3304      	adds	r3, #4
 800c182:	2b06      	cmp	r3, #6
 800c184:	d902      	bls.n	800c18c <NVIC_EncodePriority+0x30>
 800c186:	69fb      	ldr	r3, [r7, #28]
 800c188:	3b03      	subs	r3, #3
 800c18a:	e000      	b.n	800c18e <NVIC_EncodePriority+0x32>
 800c18c:	2300      	movs	r3, #0
 800c18e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c190:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800c194:	69bb      	ldr	r3, [r7, #24]
 800c196:	fa02 f303 	lsl.w	r3, r2, r3
 800c19a:	43da      	mvns	r2, r3
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	401a      	ands	r2, r3
 800c1a0:	697b      	ldr	r3, [r7, #20]
 800c1a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800c1a4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800c1a8:	697b      	ldr	r3, [r7, #20]
 800c1aa:	fa01 f303 	lsl.w	r3, r1, r3
 800c1ae:	43d9      	mvns	r1, r3
 800c1b0:	687b      	ldr	r3, [r7, #4]
 800c1b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800c1b4:	4313      	orrs	r3, r2
}
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	3724      	adds	r7, #36	; 0x24
 800c1ba:	46bd      	mov	sp, r7
 800c1bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1c0:	4770      	bx	lr

0800c1c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800c1ca:	6878      	ldr	r0, [r7, #4]
 800c1cc:	f7ff ff28 	bl	800c020 <__NVIC_SetPriorityGrouping>
}
 800c1d0:	bf00      	nop
 800c1d2:	3708      	adds	r7, #8
 800c1d4:	46bd      	mov	sp, r7
 800c1d6:	bd80      	pop	{r7, pc}

0800c1d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c1d8:	b580      	push	{r7, lr}
 800c1da:	b086      	sub	sp, #24
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	4603      	mov	r3, r0
 800c1e0:	60b9      	str	r1, [r7, #8]
 800c1e2:	607a      	str	r2, [r7, #4]
 800c1e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800c1e6:	2300      	movs	r3, #0
 800c1e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800c1ea:	f7ff ff3d 	bl	800c068 <__NVIC_GetPriorityGrouping>
 800c1ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	68b9      	ldr	r1, [r7, #8]
 800c1f4:	6978      	ldr	r0, [r7, #20]
 800c1f6:	f7ff ffb1 	bl	800c15c <NVIC_EncodePriority>
 800c1fa:	4602      	mov	r2, r0
 800c1fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f7ff ff80 	bl	800c108 <__NVIC_SetPriority>
}
 800c208:	bf00      	nop
 800c20a:	3718      	adds	r7, #24
 800c20c:	46bd      	mov	sp, r7
 800c20e:	bd80      	pop	{r7, pc}

0800c210 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c210:	b580      	push	{r7, lr}
 800c212:	b082      	sub	sp, #8
 800c214:	af00      	add	r7, sp, #0
 800c216:	4603      	mov	r3, r0
 800c218:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c21a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c21e:	4618      	mov	r0, r3
 800c220:	f7ff ff30 	bl	800c084 <__NVIC_EnableIRQ>
}
 800c224:	bf00      	nop
 800c226:	3708      	adds	r7, #8
 800c228:	46bd      	mov	sp, r7
 800c22a:	bd80      	pop	{r7, pc}

0800c22c <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800c22c:	b580      	push	{r7, lr}
 800c22e:	b082      	sub	sp, #8
 800c230:	af00      	add	r7, sp, #0
 800c232:	4603      	mov	r3, r0
 800c234:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800c236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c23a:	4618      	mov	r0, r3
 800c23c:	f7ff ff40 	bl	800c0c0 <__NVIC_DisableIRQ>
}
 800c240:	bf00      	nop
 800c242:	3708      	adds	r7, #8
 800c244:	46bd      	mov	sp, r7
 800c246:	bd80      	pop	{r7, pc}

0800c248 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c248:	b580      	push	{r7, lr}
 800c24a:	b084      	sub	sp, #16
 800c24c:	af00      	add	r7, sp, #0
 800c24e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c254:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800c256:	f7fe ffdf 	bl	800b218 <HAL_GetTick>
 800c25a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c262:	b2db      	uxtb	r3, r3
 800c264:	2b02      	cmp	r3, #2
 800c266:	d008      	beq.n	800c27a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	2280      	movs	r2, #128	; 0x80
 800c26c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c26e:	687b      	ldr	r3, [r7, #4]
 800c270:	2200      	movs	r2, #0
 800c272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800c276:	2301      	movs	r3, #1
 800c278:	e052      	b.n	800c320 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	681b      	ldr	r3, [r3, #0]
 800c27e:	681a      	ldr	r2, [r3, #0]
 800c280:	687b      	ldr	r3, [r7, #4]
 800c282:	681b      	ldr	r3, [r3, #0]
 800c284:	f022 0216 	bic.w	r2, r2, #22
 800c288:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800c28a:	687b      	ldr	r3, [r7, #4]
 800c28c:	681b      	ldr	r3, [r3, #0]
 800c28e:	695a      	ldr	r2, [r3, #20]
 800c290:	687b      	ldr	r3, [r7, #4]
 800c292:	681b      	ldr	r3, [r3, #0]
 800c294:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800c298:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800c29a:	687b      	ldr	r3, [r7, #4]
 800c29c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c29e:	2b00      	cmp	r3, #0
 800c2a0:	d103      	bne.n	800c2aa <HAL_DMA_Abort+0x62>
 800c2a2:	687b      	ldr	r3, [r7, #4]
 800c2a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800c2a6:	2b00      	cmp	r3, #0
 800c2a8:	d007      	beq.n	800c2ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	681a      	ldr	r2, [r3, #0]
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	f022 0208 	bic.w	r2, r2, #8
 800c2b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	681a      	ldr	r2, [r3, #0]
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	681b      	ldr	r3, [r3, #0]
 800c2c4:	f022 0201 	bic.w	r2, r2, #1
 800c2c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2ca:	e013      	b.n	800c2f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800c2cc:	f7fe ffa4 	bl	800b218 <HAL_GetTick>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	68bb      	ldr	r3, [r7, #8]
 800c2d4:	1ad3      	subs	r3, r2, r3
 800c2d6:	2b05      	cmp	r3, #5
 800c2d8:	d90c      	bls.n	800c2f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2220      	movs	r2, #32
 800c2de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800c2e0:	687b      	ldr	r3, [r7, #4]
 800c2e2:	2203      	movs	r2, #3
 800c2e4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800c2e8:	687b      	ldr	r3, [r7, #4]
 800c2ea:	2200      	movs	r2, #0
 800c2ec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 800c2f0:	2303      	movs	r3, #3
 800c2f2:	e015      	b.n	800c320 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	681b      	ldr	r3, [r3, #0]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	f003 0301 	and.w	r3, r3, #1
 800c2fe:	2b00      	cmp	r3, #0
 800c300:	d1e4      	bne.n	800c2cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c306:	223f      	movs	r2, #63	; 0x3f
 800c308:	409a      	lsls	r2, r3
 800c30a:	68fb      	ldr	r3, [r7, #12]
 800c30c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800c30e:	687b      	ldr	r3, [r7, #4]
 800c310:	2201      	movs	r2, #1
 800c312:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	2200      	movs	r2, #0
 800c31a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 800c31e:	2300      	movs	r3, #0
}
 800c320:	4618      	mov	r0, r3
 800c322:	3710      	adds	r7, #16
 800c324:	46bd      	mov	sp, r7
 800c326:	bd80      	pop	{r7, pc}

0800c328 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c328:	b480      	push	{r7}
 800c32a:	b083      	sub	sp, #12
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b02      	cmp	r3, #2
 800c33a:	d004      	beq.n	800c346 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	2280      	movs	r2, #128	; 0x80
 800c340:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800c342:	2301      	movs	r3, #1
 800c344:	e00c      	b.n	800c360 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	2205      	movs	r2, #5
 800c34a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	681a      	ldr	r2, [r3, #0]
 800c354:	687b      	ldr	r3, [r7, #4]
 800c356:	681b      	ldr	r3, [r3, #0]
 800c358:	f022 0201 	bic.w	r2, r2, #1
 800c35c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800c35e:	2300      	movs	r3, #0
}
 800c360:	4618      	mov	r0, r3
 800c362:	370c      	adds	r7, #12
 800c364:	46bd      	mov	sp, r7
 800c366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c36a:	4770      	bx	lr

0800c36c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800c36c:	b580      	push	{r7, lr}
 800c36e:	b084      	sub	sp, #16
 800c370:	af00      	add	r7, sp, #0
 800c372:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	2b00      	cmp	r3, #0
 800c378:	d101      	bne.n	800c37e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800c37a:	2301      	movs	r3, #1
 800c37c:	e06a      	b.n	800c454 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c384:	2b00      	cmp	r3, #0
 800c386:	d106      	bne.n	800c396 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	2223      	movs	r2, #35	; 0x23
 800c38c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800c390:	6878      	ldr	r0, [r7, #4]
 800c392:	f005 fa89 	bl	80118a8 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800c396:	4b31      	ldr	r3, [pc, #196]	; (800c45c <HAL_ETH_Init+0xf0>)
 800c398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c39a:	4a30      	ldr	r2, [pc, #192]	; (800c45c <HAL_ETH_Init+0xf0>)
 800c39c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800c3a0:	6453      	str	r3, [r2, #68]	; 0x44
 800c3a2:	4b2e      	ldr	r3, [pc, #184]	; (800c45c <HAL_ETH_Init+0xf0>)
 800c3a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c3a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800c3aa:	60bb      	str	r3, [r7, #8]
 800c3ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 800c3ae:	4b2c      	ldr	r3, [pc, #176]	; (800c460 <HAL_ETH_Init+0xf4>)
 800c3b0:	685b      	ldr	r3, [r3, #4]
 800c3b2:	4a2b      	ldr	r2, [pc, #172]	; (800c460 <HAL_ETH_Init+0xf4>)
 800c3b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800c3b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800c3ba:	4b29      	ldr	r3, [pc, #164]	; (800c460 <HAL_ETH_Init+0xf4>)
 800c3bc:	685a      	ldr	r2, [r3, #4]
 800c3be:	687b      	ldr	r3, [r7, #4]
 800c3c0:	689b      	ldr	r3, [r3, #8]
 800c3c2:	4927      	ldr	r1, [pc, #156]	; (800c460 <HAL_ETH_Init+0xf4>)
 800c3c4:	4313      	orrs	r3, r2
 800c3c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800c3c8:	4b25      	ldr	r3, [pc, #148]	; (800c460 <HAL_ETH_Init+0xf4>)
 800c3ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	681b      	ldr	r3, [r3, #0]
 800c3d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c3d4:	681b      	ldr	r3, [r3, #0]
 800c3d6:	687a      	ldr	r2, [r7, #4]
 800c3d8:	6812      	ldr	r2, [r2, #0]
 800c3da:	f043 0301 	orr.w	r3, r3, #1
 800c3de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c3e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800c3e4:	f7fe ff18 	bl	800b218 <HAL_GetTick>
 800c3e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800c3ea:	e011      	b.n	800c410 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800c3ec:	f7fe ff14 	bl	800b218 <HAL_GetTick>
 800c3f0:	4602      	mov	r2, r0
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	1ad3      	subs	r3, r2, r3
 800c3f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800c3fa:	d909      	bls.n	800c410 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800c3fc:	687b      	ldr	r3, [r7, #4]
 800c3fe:	2204      	movs	r2, #4
 800c400:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	22e0      	movs	r2, #224	; 0xe0
 800c408:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e021      	b.n	800c454 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800c410:	687b      	ldr	r3, [r7, #4]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 0301 	and.w	r3, r3, #1
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1e4      	bne.n	800c3ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800c422:	6878      	ldr	r0, [r7, #4]
 800c424:	f000 ff2c 	bl	800d280 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800c428:	6878      	ldr	r0, [r7, #4]
 800c42a:	f000 ffd3 	bl	800d3d4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800c42e:	6878      	ldr	r0, [r7, #4]
 800c430:	f001 f829 	bl	800d486 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	685b      	ldr	r3, [r3, #4]
 800c438:	461a      	mov	r2, r3
 800c43a:	2100      	movs	r1, #0
 800c43c:	6878      	ldr	r0, [r7, #4]
 800c43e:	f000 ff91 	bl	800d364 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2200      	movs	r2, #0
 800c446:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	2210      	movs	r2, #16
 800c44e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800c452:	2300      	movs	r3, #0
}
 800c454:	4618      	mov	r0, r3
 800c456:	3710      	adds	r7, #16
 800c458:	46bd      	mov	sp, r7
 800c45a:	bd80      	pop	{r7, pc}
 800c45c:	40023800 	.word	0x40023800
 800c460:	40013800 	.word	0x40013800

0800c464 <HAL_ETH_Start>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start(ETH_HandleTypeDef *heth)
{
 800c464:	b580      	push	{r7, lr}
 800c466:	b084      	sub	sp, #16
 800c468:	af00      	add	r7, sp, #0
 800c46a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c472:	2b10      	cmp	r3, #16
 800c474:	d150      	bne.n	800c518 <HAL_ETH_Start+0xb4>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c476:	687b      	ldr	r3, [r7, #4]
 800c478:	2223      	movs	r2, #35	; 0x23
 800c47a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	2204      	movs	r2, #4
 800c482:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800c484:	6878      	ldr	r0, [r7, #4]
 800c486:	f000 f9fb 	bl	800c880 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	681a      	ldr	r2, [r3, #0]
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	f042 0208 	orr.w	r2, r2, #8
 800c498:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c49a:	687b      	ldr	r3, [r7, #4]
 800c49c:	681b      	ldr	r3, [r3, #0]
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c4a2:	2001      	movs	r0, #1
 800c4a4:	f7fe fec4 	bl	800b230 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	68fa      	ldr	r2, [r7, #12]
 800c4ae:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f042 0204 	orr.w	r2, r2, #4
 800c4be:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	681b      	ldr	r3, [r3, #0]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c4c8:	2001      	movs	r0, #1
 800c4ca:	f7fe feb1 	bl	800b230 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c4ce:	687b      	ldr	r3, [r7, #4]
 800c4d0:	681b      	ldr	r3, [r3, #0]
 800c4d2:	68fa      	ldr	r2, [r7, #12]
 800c4d4:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800c4d6:	6878      	ldr	r0, [r7, #4]
 800c4d8:	f000 fd73 	bl	800cfc2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800c4dc:	687b      	ldr	r3, [r7, #4]
 800c4de:	681b      	ldr	r3, [r3, #0]
 800c4e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4e4:	699b      	ldr	r3, [r3, #24]
 800c4e6:	687a      	ldr	r2, [r7, #4]
 800c4e8:	6812      	ldr	r2, [r2, #0]
 800c4ea:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c4ee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c4f2:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c4fc:	699b      	ldr	r3, [r3, #24]
 800c4fe:	687a      	ldr	r2, [r7, #4]
 800c500:	6812      	ldr	r2, [r2, #0]
 800c502:	f043 0302 	orr.w	r3, r3, #2
 800c506:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c50a:	6193      	str	r3, [r2, #24]

    heth->gState = HAL_ETH_STATE_STARTED;
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	2223      	movs	r2, #35	; 0x23
 800c510:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800c514:	2300      	movs	r3, #0
 800c516:	e000      	b.n	800c51a <HAL_ETH_Start+0xb6>
  }
  else
  {
    return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
  }
}
 800c51a:	4618      	mov	r0, r3
 800c51c:	3710      	adds	r7, #16
 800c51e:	46bd      	mov	sp, r7
 800c520:	bd80      	pop	{r7, pc}
	...

0800c524 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 800c524:	b580      	push	{r7, lr}
 800c526:	b084      	sub	sp, #16
 800c528:	af00      	add	r7, sp, #0
 800c52a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c532:	2b10      	cmp	r3, #16
 800c534:	d17b      	bne.n	800c62e <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800c536:	687b      	ldr	r3, [r7, #4]
 800c538:	2223      	movs	r2, #35	; 0x23
 800c53a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	2201      	movs	r2, #1
 800c542:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800c54a:	687b      	ldr	r3, [r7, #4]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 800c552:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 800c554:	687b      	ldr	r3, [r7, #4]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800c55c:	687b      	ldr	r3, [r7, #4]
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	4b35      	ldr	r3, [pc, #212]	; (800c638 <HAL_ETH_Start_IT+0x114>)
 800c562:	430b      	orrs	r3, r1
 800c564:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800c568:	687b      	ldr	r3, [r7, #4]
 800c56a:	681b      	ldr	r3, [r3, #0]
 800c56c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	681b      	ldr	r3, [r3, #0]
 800c574:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800c578:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	2204      	movs	r2, #4
 800c580:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800c582:	6878      	ldr	r0, [r7, #4]
 800c584:	f000 f97c 	bl	800c880 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	681b      	ldr	r3, [r3, #0]
 800c58c:	681a      	ldr	r2, [r3, #0]
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	681b      	ldr	r3, [r3, #0]
 800c592:	f042 0208 	orr.w	r2, r2, #8
 800c596:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c598:	687b      	ldr	r3, [r7, #4]
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	681b      	ldr	r3, [r3, #0]
 800c59e:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c5a0:	2001      	movs	r0, #1
 800c5a2:	f7fe fe45 	bl	800b230 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	681b      	ldr	r3, [r3, #0]
 800c5aa:	68fa      	ldr	r2, [r7, #12]
 800c5ac:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	681b      	ldr	r3, [r3, #0]
 800c5b2:	681a      	ldr	r2, [r3, #0]
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	681b      	ldr	r3, [r3, #0]
 800c5b8:	f042 0204 	orr.w	r2, r2, #4
 800c5bc:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	681b      	ldr	r3, [r3, #0]
 800c5c2:	681b      	ldr	r3, [r3, #0]
 800c5c4:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800c5c6:	2001      	movs	r0, #1
 800c5c8:	f7fe fe32 	bl	800b230 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	68fa      	ldr	r2, [r7, #12]
 800c5d2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 800c5d4:	6878      	ldr	r0, [r7, #4]
 800c5d6:	f000 fcf4 	bl	800cfc2 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800c5da:	687b      	ldr	r3, [r7, #4]
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5e2:	699b      	ldr	r3, [r3, #24]
 800c5e4:	687a      	ldr	r2, [r7, #4]
 800c5e6:	6812      	ldr	r2, [r2, #0]
 800c5e8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800c5ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c5f0:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	681b      	ldr	r3, [r3, #0]
 800c5f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c5fa:	699b      	ldr	r3, [r3, #24]
 800c5fc:	687a      	ldr	r2, [r7, #4]
 800c5fe:	6812      	ldr	r2, [r2, #0]
 800c600:	f043 0302 	orr.w	r3, r3, #2
 800c604:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c608:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800c60a:	687b      	ldr	r3, [r7, #4]
 800c60c:	681b      	ldr	r3, [r3, #0]
 800c60e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c612:	69d9      	ldr	r1, [r3, #28]
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	681a      	ldr	r2, [r3, #0]
 800c618:	4b08      	ldr	r3, [pc, #32]	; (800c63c <HAL_ETH_Start_IT+0x118>)
 800c61a:	430b      	orrs	r3, r1
 800c61c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800c620:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	2223      	movs	r2, #35	; 0x23
 800c626:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800c62a:	2300      	movs	r3, #0
 800c62c:	e000      	b.n	800c630 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 800c62e:	2301      	movs	r3, #1
  }
}
 800c630:	4618      	mov	r0, r3
 800c632:	3710      	adds	r7, #16
 800c634:	46bd      	mov	sp, r7
 800c636:	bd80      	pop	{r7, pc}
 800c638:	00020060 	.word	0x00020060
 800c63c:	0001a0c1 	.word	0x0001a0c1

0800c640 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 800c640:	b580      	push	{r7, lr}
 800c642:	b082      	sub	sp, #8
 800c644:	af00      	add	r7, sp, #0
 800c646:	6078      	str	r0, [r7, #4]
 800c648:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d109      	bne.n	800c664 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c656:	f043 0201 	orr.w	r2, r3, #1
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800c660:	2301      	movs	r3, #1
 800c662:	e045      	b.n	800c6f0 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c66a:	2b23      	cmp	r3, #35	; 0x23
 800c66c:	d13f      	bne.n	800c6ee <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800c66e:	683b      	ldr	r3, [r7, #0]
 800c670:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800c676:	2201      	movs	r2, #1
 800c678:	6839      	ldr	r1, [r7, #0]
 800c67a:	6878      	ldr	r0, [r7, #4]
 800c67c:	f000 ff70 	bl	800d560 <ETH_Prepare_Tx_Descriptors>
 800c680:	4603      	mov	r3, r0
 800c682:	2b00      	cmp	r3, #0
 800c684:	d009      	beq.n	800c69a <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800c686:	687b      	ldr	r3, [r7, #4]
 800c688:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c68c:	f043 0202 	orr.w	r2, r3, #2
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800c696:	2301      	movs	r3, #1
 800c698:	e02a      	b.n	800c6f0 <HAL_ETH_Transmit_IT+0xb0>
  __ASM volatile ("dsb 0xF":::"memory");
 800c69a:	f3bf 8f4f 	dsb	sy
}
 800c69e:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 800c6a0:	687b      	ldr	r3, [r7, #4]
 800c6a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6a4:	1c5a      	adds	r2, r3, #1
 800c6a6:	687b      	ldr	r3, [r7, #4]
 800c6a8:	629a      	str	r2, [r3, #40]	; 0x28
 800c6aa:	687b      	ldr	r3, [r7, #4]
 800c6ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6ae:	2b03      	cmp	r3, #3
 800c6b0:	d904      	bls.n	800c6bc <HAL_ETH_Transmit_IT+0x7c>
 800c6b2:	687b      	ldr	r3, [r7, #4]
 800c6b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6b6:	1f1a      	subs	r2, r3, #4
 800c6b8:	687b      	ldr	r3, [r7, #4]
 800c6ba:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6c4:	695b      	ldr	r3, [r3, #20]
 800c6c6:	f003 0304 	and.w	r3, r3, #4
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	d00d      	beq.n	800c6ea <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	681b      	ldr	r3, [r3, #0]
 800c6d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6d6:	461a      	mov	r2, r3
 800c6d8:	2304      	movs	r3, #4
 800c6da:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 800c6dc:	687b      	ldr	r3, [r7, #4]
 800c6de:	681b      	ldr	r3, [r3, #0]
 800c6e0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c6e4:	461a      	mov	r2, r3
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800c6ea:	2300      	movs	r3, #0
 800c6ec:	e000      	b.n	800c6f0 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800c6ee:	2301      	movs	r3, #1
  }
}
 800c6f0:	4618      	mov	r0, r3
 800c6f2:	3708      	adds	r7, #8
 800c6f4:	46bd      	mov	sp, r7
 800c6f6:	bd80      	pop	{r7, pc}

0800c6f8 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b088      	sub	sp, #32
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
 800c700:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800c702:	2300      	movs	r3, #0
 800c704:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800c706:	2300      	movs	r3, #0
 800c708:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800c70a:	683b      	ldr	r3, [r7, #0]
 800c70c:	2b00      	cmp	r3, #0
 800c70e:	d109      	bne.n	800c724 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800c716:	f043 0201 	orr.w	r2, r3, #1
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800c720:	2301      	movs	r3, #1
 800c722:	e0a8      	b.n	800c876 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c72a:	2b23      	cmp	r3, #35	; 0x23
 800c72c:	d001      	beq.n	800c732 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800c72e:	2301      	movs	r3, #1
 800c730:	e0a1      	b.n	800c876 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800c732:	687b      	ldr	r3, [r7, #4]
 800c734:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800c736:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	69fa      	ldr	r2, [r7, #28]
 800c73c:	3212      	adds	r2, #18
 800c73e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c742:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c748:	f1c3 0304 	rsb	r3, r3, #4
 800c74c:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800c74e:	e06a      	b.n	800c826 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800c750:	69bb      	ldr	r3, [r7, #24]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d007      	beq.n	800c76c <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 800c75c:	69bb      	ldr	r3, [r7, #24]
 800c75e:	699a      	ldr	r2, [r3, #24]
 800c760:	687b      	ldr	r3, [r7, #4]
 800c762:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 800c764:	69bb      	ldr	r3, [r7, #24]
 800c766:	69da      	ldr	r2, [r3, #28]
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 800c76c:	69bb      	ldr	r3, [r7, #24]
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c774:	2b00      	cmp	r3, #0
 800c776:	d103      	bne.n	800c780 <HAL_ETH_ReadData+0x88>
 800c778:	687b      	ldr	r3, [r7, #4]
 800c77a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c77c:	2b00      	cmp	r3, #0
 800c77e:	d040      	beq.n	800c802 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800c780:	69bb      	ldr	r3, [r7, #24]
 800c782:	681b      	ldr	r3, [r3, #0]
 800c784:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d005      	beq.n	800c798 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 800c78c:	687b      	ldr	r3, [r7, #4]
 800c78e:	2200      	movs	r2, #0
 800c790:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	2200      	movs	r2, #0
 800c796:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	695b      	ldr	r3, [r3, #20]
 800c79c:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 800c79e:	69bb      	ldr	r3, [r7, #24]
 800c7a0:	681b      	ldr	r3, [r3, #0]
 800c7a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d00c      	beq.n	800c7c4 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800c7aa:	69bb      	ldr	r3, [r7, #24]
 800c7ac:	681b      	ldr	r3, [r3, #0]
 800c7ae:	0c1b      	lsrs	r3, r3, #16
 800c7b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800c7b4:	3b04      	subs	r3, #4
 800c7b6:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800c7b8:	69bb      	ldr	r3, [r7, #24]
 800c7ba:	681a      	ldr	r2, [r3, #0]
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 800c7c0:	2301      	movs	r3, #1
 800c7c2:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	689a      	ldr	r2, [r3, #8]
 800c7c8:	69bb      	ldr	r3, [r7, #24]
 800c7ca:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800c7d8:	69bb      	ldr	r3, [r7, #24]
 800c7da:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 800c7dc:	461a      	mov	r2, r3
 800c7de:	693b      	ldr	r3, [r7, #16]
 800c7e0:	b29b      	uxth	r3, r3
 800c7e2:	f005 fa2b 	bl	8011c3c <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c7ea:	1c5a      	adds	r2, r3, #1
 800c7ec:	687b      	ldr	r3, [r7, #4]
 800c7ee:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c7f4:	693b      	ldr	r3, [r7, #16]
 800c7f6:	441a      	add	r2, r3
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 800c7fc:	69bb      	ldr	r3, [r7, #24]
 800c7fe:	2200      	movs	r2, #0
 800c800:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 800c802:	69fb      	ldr	r3, [r7, #28]
 800c804:	3301      	adds	r3, #1
 800c806:	61fb      	str	r3, [r7, #28]
 800c808:	69fb      	ldr	r3, [r7, #28]
 800c80a:	2b03      	cmp	r3, #3
 800c80c:	d902      	bls.n	800c814 <HAL_ETH_ReadData+0x11c>
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	3b04      	subs	r3, #4
 800c812:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	69fa      	ldr	r2, [r7, #28]
 800c818:	3212      	adds	r2, #18
 800c81a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c81e:	61bb      	str	r3, [r7, #24]
    desccnt++;
 800c820:	697b      	ldr	r3, [r7, #20]
 800c822:	3301      	adds	r3, #1
 800c824:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800c826:	69bb      	ldr	r3, [r7, #24]
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	db06      	blt.n	800c83c <HAL_ETH_ReadData+0x144>
 800c82e:	697a      	ldr	r2, [r7, #20]
 800c830:	68bb      	ldr	r3, [r7, #8]
 800c832:	429a      	cmp	r2, r3
 800c834:	d202      	bcs.n	800c83c <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 800c836:	7bfb      	ldrb	r3, [r7, #15]
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d089      	beq.n	800c750 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 800c83c:	687b      	ldr	r3, [r7, #4]
 800c83e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800c840:	697b      	ldr	r3, [r7, #20]
 800c842:	441a      	add	r2, r3
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800c848:	687b      	ldr	r3, [r7, #4]
 800c84a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c84c:	2b00      	cmp	r3, #0
 800c84e:	d002      	beq.n	800c856 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 800c850:	6878      	ldr	r0, [r7, #4]
 800c852:	f000 f815 	bl	800c880 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800c856:	687b      	ldr	r3, [r7, #4]
 800c858:	69fa      	ldr	r2, [r7, #28]
 800c85a:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 800c85c:	7bfb      	ldrb	r3, [r7, #15]
 800c85e:	2b01      	cmp	r3, #1
 800c860:	d108      	bne.n	800c874 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800c866:	683b      	ldr	r3, [r7, #0]
 800c868:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	2200      	movs	r2, #0
 800c86e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800c870:	2300      	movs	r3, #0
 800c872:	e000      	b.n	800c876 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 800c874:	2301      	movs	r3, #1
}
 800c876:	4618      	mov	r0, r3
 800c878:	3720      	adds	r7, #32
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}
	...

0800c880 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 800c880:	b580      	push	{r7, lr}
 800c882:	b088      	sub	sp, #32
 800c884:	af00      	add	r7, sp, #0
 800c886:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800c888:	2300      	movs	r3, #0
 800c88a:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 800c88c:	2301      	movs	r3, #1
 800c88e:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c894:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	69fa      	ldr	r2, [r7, #28]
 800c89a:	3212      	adds	r2, #18
 800c89c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c8a0:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 800c8a2:	687b      	ldr	r3, [r7, #4]
 800c8a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c8a6:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800c8a8:	e040      	b.n	800c92c <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800c8aa:	697b      	ldr	r3, [r7, #20]
 800c8ac:	6a1b      	ldr	r3, [r3, #32]
 800c8ae:	2b00      	cmp	r3, #0
 800c8b0:	d112      	bne.n	800c8d8 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 800c8b2:	f107 030c 	add.w	r3, r7, #12
 800c8b6:	4618      	mov	r0, r3
 800c8b8:	f005 f990 	bl	8011bdc <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 800c8bc:	68fb      	ldr	r3, [r7, #12]
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d102      	bne.n	800c8c8 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 800c8c2:	2300      	movs	r3, #0
 800c8c4:	74fb      	strb	r3, [r7, #19]
 800c8c6:	e007      	b.n	800c8d8 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800c8c8:	68fb      	ldr	r3, [r7, #12]
 800c8ca:	461a      	mov	r2, r3
 800c8cc:	697b      	ldr	r3, [r7, #20]
 800c8ce:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 800c8d0:	68fb      	ldr	r3, [r7, #12]
 800c8d2:	461a      	mov	r2, r3
 800c8d4:	697b      	ldr	r3, [r7, #20]
 800c8d6:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800c8d8:	7cfb      	ldrb	r3, [r7, #19]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d026      	beq.n	800c92c <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 800c8de:	687b      	ldr	r3, [r7, #4]
 800c8e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d103      	bne.n	800c8ee <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800c8e6:	697b      	ldr	r3, [r7, #20]
 800c8e8:	4a1e      	ldr	r2, [pc, #120]	; (800c964 <ETH_UpdateDescriptor+0xe4>)
 800c8ea:	605a      	str	r2, [r3, #4]
 800c8ec:	e003      	b.n	800c8f6 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800c8ee:	697b      	ldr	r3, [r7, #20]
 800c8f0:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800c8f4:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800c8f6:	f3bf 8f5f 	dmb	sy
}
 800c8fa:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 800c8fc:	697b      	ldr	r3, [r7, #20]
 800c8fe:	681b      	ldr	r3, [r3, #0]
 800c900:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800c904:	697b      	ldr	r3, [r7, #20]
 800c906:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800c908:	69fb      	ldr	r3, [r7, #28]
 800c90a:	3301      	adds	r3, #1
 800c90c:	61fb      	str	r3, [r7, #28]
 800c90e:	69fb      	ldr	r3, [r7, #28]
 800c910:	2b03      	cmp	r3, #3
 800c912:	d902      	bls.n	800c91a <ETH_UpdateDescriptor+0x9a>
 800c914:	69fb      	ldr	r3, [r7, #28]
 800c916:	3b04      	subs	r3, #4
 800c918:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	69fa      	ldr	r2, [r7, #28]
 800c91e:	3212      	adds	r2, #18
 800c920:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800c924:	617b      	str	r3, [r7, #20]
      desccount--;
 800c926:	69bb      	ldr	r3, [r7, #24]
 800c928:	3b01      	subs	r3, #1
 800c92a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 800c92c:	69bb      	ldr	r3, [r7, #24]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d002      	beq.n	800c938 <ETH_UpdateDescriptor+0xb8>
 800c932:	7cfb      	ldrb	r3, [r7, #19]
 800c934:	2b00      	cmp	r3, #0
 800c936:	d1b8      	bne.n	800c8aa <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 800c938:	687b      	ldr	r3, [r7, #4]
 800c93a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c93c:	69ba      	ldr	r2, [r7, #24]
 800c93e:	429a      	cmp	r2, r3
 800c940:	d00c      	beq.n	800c95c <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800c94a:	461a      	mov	r2, r3
 800c94c:	2300      	movs	r3, #0
 800c94e:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	69fa      	ldr	r2, [r7, #28]
 800c954:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800c956:	687b      	ldr	r3, [r7, #4]
 800c958:	69ba      	ldr	r2, [r7, #24]
 800c95a:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 800c95c:	bf00      	nop
 800c95e:	3720      	adds	r7, #32
 800c960:	46bd      	mov	sp, r7
 800c962:	bd80      	pop	{r7, pc}
 800c964:	800045f8 	.word	0x800045f8

0800c968 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b086      	sub	sp, #24
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	3318      	adds	r3, #24
 800c974:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 800c976:	68bb      	ldr	r3, [r7, #8]
 800c978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c97a:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 800c97c:	68bb      	ldr	r3, [r7, #8]
 800c97e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c980:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 800c982:	2301      	movs	r3, #1
 800c984:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800c986:	e03f      	b.n	800ca08 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 800c988:	2301      	movs	r3, #1
 800c98a:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 800c98c:	697b      	ldr	r3, [r7, #20]
 800c98e:	3b01      	subs	r3, #1
 800c990:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 800c992:	68ba      	ldr	r2, [r7, #8]
 800c994:	693b      	ldr	r3, [r7, #16]
 800c996:	3304      	adds	r3, #4
 800c998:	009b      	lsls	r3, r3, #2
 800c99a:	4413      	add	r3, r2
 800c99c:	685b      	ldr	r3, [r3, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d106      	bne.n	800c9b0 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800c9a2:	693b      	ldr	r3, [r7, #16]
 800c9a4:	3301      	adds	r3, #1
 800c9a6:	f003 0303 	and.w	r3, r3, #3
 800c9aa:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 800c9ac:	2300      	movs	r3, #0
 800c9ae:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 800c9b0:	7bbb      	ldrb	r3, [r7, #14]
 800c9b2:	2b00      	cmp	r3, #0
 800c9b4:	d028      	beq.n	800ca08 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	68d9      	ldr	r1, [r3, #12]
 800c9ba:	693a      	ldr	r2, [r7, #16]
 800c9bc:	4613      	mov	r3, r2
 800c9be:	009b      	lsls	r3, r3, #2
 800c9c0:	4413      	add	r3, r2
 800c9c2:	00db      	lsls	r3, r3, #3
 800c9c4:	440b      	add	r3, r1
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	db1b      	blt.n	800ca04 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 800c9cc:	68ba      	ldr	r2, [r7, #8]
 800c9ce:	693b      	ldr	r3, [r7, #16]
 800c9d0:	3304      	adds	r3, #4
 800c9d2:	009b      	lsls	r3, r3, #2
 800c9d4:	4413      	add	r3, r2
 800c9d6:	685b      	ldr	r3, [r3, #4]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f005 f971 	bl	8011cc0 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800c9de:	68ba      	ldr	r2, [r7, #8]
 800c9e0:	693b      	ldr	r3, [r7, #16]
 800c9e2:	3304      	adds	r3, #4
 800c9e4:	009b      	lsls	r3, r3, #2
 800c9e6:	4413      	add	r3, r2
 800c9e8:	2200      	movs	r2, #0
 800c9ea:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	3301      	adds	r3, #1
 800c9f0:	f003 0303 	and.w	r3, r3, #3
 800c9f4:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800c9f6:	68bb      	ldr	r3, [r7, #8]
 800c9f8:	697a      	ldr	r2, [r7, #20]
 800c9fa:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 800c9fc:	68bb      	ldr	r3, [r7, #8]
 800c9fe:	693a      	ldr	r2, [r7, #16]
 800ca00:	62da      	str	r2, [r3, #44]	; 0x2c
 800ca02:	e001      	b.n	800ca08 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 800ca04:	2300      	movs	r3, #0
 800ca06:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800ca08:	697b      	ldr	r3, [r7, #20]
 800ca0a:	2b00      	cmp	r3, #0
 800ca0c:	d002      	beq.n	800ca14 <HAL_ETH_ReleaseTxPacket+0xac>
 800ca0e:	7bfb      	ldrb	r3, [r7, #15]
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d1b9      	bne.n	800c988 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 800ca14:	2300      	movs	r3, #0
}
 800ca16:	4618      	mov	r0, r3
 800ca18:	3718      	adds	r7, #24
 800ca1a:	46bd      	mov	sp, r7
 800ca1c:	bd80      	pop	{r7, pc}
	...

0800ca20 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 800ca20:	b580      	push	{r7, lr}
 800ca22:	b082      	sub	sp, #8
 800ca24:	af00      	add	r7, sp, #0
 800ca26:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 800ca28:	687b      	ldr	r3, [r7, #4]
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca30:	695b      	ldr	r3, [r3, #20]
 800ca32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca36:	2b40      	cmp	r3, #64	; 0x40
 800ca38:	d112      	bne.n	800ca60 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 800ca3a:	687b      	ldr	r3, [r7, #4]
 800ca3c:	681b      	ldr	r3, [r3, #0]
 800ca3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca42:	69db      	ldr	r3, [r3, #28]
 800ca44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ca48:	2b40      	cmp	r3, #64	; 0x40
 800ca4a:	d109      	bne.n	800ca60 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca54:	461a      	mov	r2, r3
 800ca56:	4b50      	ldr	r3, [pc, #320]	; (800cb98 <HAL_ETH_IRQHandler+0x178>)
 800ca58:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f004 fc88 	bl	8011370 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	681b      	ldr	r3, [r3, #0]
 800ca64:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca68:	695b      	ldr	r3, [r3, #20]
 800ca6a:	f003 0301 	and.w	r3, r3, #1
 800ca6e:	2b01      	cmp	r3, #1
 800ca70:	d113      	bne.n	800ca9a <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca7a:	69db      	ldr	r3, [r3, #28]
 800ca7c:	f003 0301 	and.w	r3, r3, #1
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d10a      	bne.n	800ca9a <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ca8c:	461a      	mov	r2, r3
 800ca8e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800ca92:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 800ca94:	6878      	ldr	r0, [r7, #4]
 800ca96:	f004 fc7b 	bl	8011390 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caa2:	695b      	ldr	r3, [r3, #20]
 800caa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800caa8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800caac:	d14c      	bne.n	800cb48 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cab6:	69db      	ldr	r3, [r3, #28]
 800cab8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cabc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cac0:	d142      	bne.n	800cb48 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800cac8:	f043 0208 	orr.w	r2, r3, #8
 800cacc:	687b      	ldr	r3, [r7, #4]
 800cace:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	681b      	ldr	r3, [r3, #0]
 800cad6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cada:	695b      	ldr	r3, [r3, #20]
 800cadc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800cae4:	d11a      	bne.n	800cb1c <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	681b      	ldr	r3, [r3, #0]
 800caea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800caee:	695a      	ldr	r2, [r3, #20]
 800caf0:	4b2a      	ldr	r3, [pc, #168]	; (800cb9c <HAL_ETH_IRQHandler+0x17c>)
 800caf2:	4013      	ands	r3, r2
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	681b      	ldr	r3, [r3, #0]
 800cafe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb02:	69db      	ldr	r3, [r3, #28]
 800cb04:	687a      	ldr	r2, [r7, #4]
 800cb06:	6812      	ldr	r2, [r2, #0]
 800cb08:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 800cb0c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cb10:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	22e0      	movs	r2, #224	; 0xe0
 800cb16:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 800cb1a:	e012      	b.n	800cb42 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800cb1c:	687b      	ldr	r3, [r7, #4]
 800cb1e:	681b      	ldr	r3, [r3, #0]
 800cb20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb24:	695a      	ldr	r2, [r3, #20]
 800cb26:	f248 6380 	movw	r3, #34432	; 0x8680
 800cb2a:	4013      	ands	r3, r2
 800cb2c:	687a      	ldr	r2, [r7, #4]
 800cb2e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	681b      	ldr	r3, [r3, #0]
 800cb36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cb3a:	461a      	mov	r2, r3
 800cb3c:	f248 6380 	movw	r3, #34432	; 0x8680
 800cb40:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f004 fc34 	bl	80113b0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 800cb48:	687b      	ldr	r3, [r7, #4]
 800cb4a:	681b      	ldr	r3, [r3, #0]
 800cb4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800cb4e:	f003 0308 	and.w	r3, r3, #8
 800cb52:	2b08      	cmp	r3, #8
 800cb54:	d10e      	bne.n	800cb74 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800cb56:	687b      	ldr	r3, [r7, #4]
 800cb58:	681b      	ldr	r3, [r3, #0]
 800cb5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb5c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800cb60:	687b      	ldr	r3, [r7, #4]
 800cb62:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800cb66:	6878      	ldr	r0, [r7, #4]
 800cb68:	f000 f81c 	bl	800cba4 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 800cb6c:	687b      	ldr	r3, [r7, #4]
 800cb6e:	2200      	movs	r2, #0
 800cb70:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 800cb74:	4b0a      	ldr	r3, [pc, #40]	; (800cba0 <HAL_ETH_IRQHandler+0x180>)
 800cb76:	695b      	ldr	r3, [r3, #20]
 800cb78:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800cb7c:	2b00      	cmp	r3, #0
 800cb7e:	d006      	beq.n	800cb8e <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 800cb80:	4b07      	ldr	r3, [pc, #28]	; (800cba0 <HAL_ETH_IRQHandler+0x180>)
 800cb82:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800cb86:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 800cb88:	6878      	ldr	r0, [r7, #4]
 800cb8a:	f000 f815 	bl	800cbb8 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800cb8e:	bf00      	nop
 800cb90:	3708      	adds	r7, #8
 800cb92:	46bd      	mov	sp, r7
 800cb94:	bd80      	pop	{r7, pc}
 800cb96:	bf00      	nop
 800cb98:	00010040 	.word	0x00010040
 800cb9c:	007e2000 	.word	0x007e2000
 800cba0:	40013c00 	.word	0x40013c00

0800cba4 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 800cba4:	b480      	push	{r7}
 800cba6:	b083      	sub	sp, #12
 800cba8:	af00      	add	r7, sp, #0
 800cbaa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 800cbac:	bf00      	nop
 800cbae:	370c      	adds	r7, #12
 800cbb0:	46bd      	mov	sp, r7
 800cbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbb6:	4770      	bx	lr

0800cbb8 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 800cbb8:	b480      	push	{r7}
 800cbba:	b083      	sub	sp, #12
 800cbbc:	af00      	add	r7, sp, #0
 800cbbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800cbc0:	bf00      	nop
 800cbc2:	370c      	adds	r7, #12
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbca:	4770      	bx	lr

0800cbcc <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 800cbcc:	b580      	push	{r7, lr}
 800cbce:	b086      	sub	sp, #24
 800cbd0:	af00      	add	r7, sp, #0
 800cbd2:	60f8      	str	r0, [r7, #12]
 800cbd4:	60b9      	str	r1, [r7, #8]
 800cbd6:	607a      	str	r2, [r7, #4]
 800cbd8:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800cbda:	68fb      	ldr	r3, [r7, #12]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	691b      	ldr	r3, [r3, #16]
 800cbe0:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800cbe2:	697b      	ldr	r3, [r7, #20]
 800cbe4:	f003 031c 	and.w	r3, r3, #28
 800cbe8:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800cbea:	68bb      	ldr	r3, [r7, #8]
 800cbec:	02db      	lsls	r3, r3, #11
 800cbee:	b29b      	uxth	r3, r3
 800cbf0:	697a      	ldr	r2, [r7, #20]
 800cbf2:	4313      	orrs	r3, r2
 800cbf4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	019b      	lsls	r3, r3, #6
 800cbfa:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800cbfe:	697a      	ldr	r2, [r7, #20]
 800cc00:	4313      	orrs	r3, r2
 800cc02:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	f023 0302 	bic.w	r3, r3, #2
 800cc0a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 800cc0c:	697b      	ldr	r3, [r7, #20]
 800cc0e:	f043 0301 	orr.w	r3, r3, #1
 800cc12:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	697a      	ldr	r2, [r7, #20]
 800cc1a:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 800cc1c:	f7fe fafc 	bl	800b218 <HAL_GetTick>
 800cc20:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800cc22:	e00d      	b.n	800cc40 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 800cc24:	f7fe faf8 	bl	800b218 <HAL_GetTick>
 800cc28:	4602      	mov	r2, r0
 800cc2a:	693b      	ldr	r3, [r7, #16]
 800cc2c:	1ad3      	subs	r3, r2, r3
 800cc2e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc32:	d301      	bcc.n	800cc38 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 800cc34:	2301      	movs	r3, #1
 800cc36:	e010      	b.n	800cc5a <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	691b      	ldr	r3, [r3, #16]
 800cc3e:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800cc40:	697b      	ldr	r3, [r7, #20]
 800cc42:	f003 0301 	and.w	r3, r3, #1
 800cc46:	2b00      	cmp	r3, #0
 800cc48:	d1ec      	bne.n	800cc24 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	695b      	ldr	r3, [r3, #20]
 800cc50:	b29b      	uxth	r3, r3
 800cc52:	461a      	mov	r2, r3
 800cc54:	683b      	ldr	r3, [r7, #0]
 800cc56:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800cc58:	2300      	movs	r3, #0
}
 800cc5a:	4618      	mov	r0, r3
 800cc5c:	3718      	adds	r7, #24
 800cc5e:	46bd      	mov	sp, r7
 800cc60:	bd80      	pop	{r7, pc}

0800cc62 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 800cc62:	b580      	push	{r7, lr}
 800cc64:	b086      	sub	sp, #24
 800cc66:	af00      	add	r7, sp, #0
 800cc68:	60f8      	str	r0, [r7, #12]
 800cc6a:	60b9      	str	r1, [r7, #8]
 800cc6c:	607a      	str	r2, [r7, #4]
 800cc6e:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	681b      	ldr	r3, [r3, #0]
 800cc74:	691b      	ldr	r3, [r3, #16]
 800cc76:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	f003 031c 	and.w	r3, r3, #28
 800cc7e:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 800cc80:	68bb      	ldr	r3, [r7, #8]
 800cc82:	02db      	lsls	r3, r3, #11
 800cc84:	b29b      	uxth	r3, r3
 800cc86:	697a      	ldr	r2, [r7, #20]
 800cc88:	4313      	orrs	r3, r2
 800cc8a:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	019b      	lsls	r3, r3, #6
 800cc90:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800cc94:	697a      	ldr	r2, [r7, #20]
 800cc96:	4313      	orrs	r3, r2
 800cc98:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 800cc9a:	697b      	ldr	r3, [r7, #20]
 800cc9c:	f043 0302 	orr.w	r3, r3, #2
 800cca0:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800cca2:	697b      	ldr	r3, [r7, #20]
 800cca4:	f043 0301 	orr.w	r3, r3, #1
 800cca8:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	b29a      	uxth	r2, r3
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 800ccb4:	68fb      	ldr	r3, [r7, #12]
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	697a      	ldr	r2, [r7, #20]
 800ccba:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 800ccbc:	f7fe faac 	bl	800b218 <HAL_GetTick>
 800ccc0:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800ccc2:	e00d      	b.n	800cce0 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 800ccc4:	f7fe faa8 	bl	800b218 <HAL_GetTick>
 800ccc8:	4602      	mov	r2, r0
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	1ad3      	subs	r3, r2, r3
 800ccce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ccd2:	d301      	bcc.n	800ccd8 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 800ccd4:	2301      	movs	r3, #1
 800ccd6:	e009      	b.n	800ccec <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	681b      	ldr	r3, [r3, #0]
 800ccdc:	691b      	ldr	r3, [r3, #16]
 800ccde:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800cce0:	697b      	ldr	r3, [r7, #20]
 800cce2:	f003 0301 	and.w	r3, r3, #1
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d1ec      	bne.n	800ccc4 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800ccea:	2300      	movs	r3, #0
}
 800ccec:	4618      	mov	r0, r3
 800ccee:	3718      	adds	r7, #24
 800ccf0:	46bd      	mov	sp, r7
 800ccf2:	bd80      	pop	{r7, pc}

0800ccf4 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 800ccf4:	b480      	push	{r7}
 800ccf6:	b083      	sub	sp, #12
 800ccf8:	af00      	add	r7, sp, #0
 800ccfa:	6078      	str	r0, [r7, #4]
 800ccfc:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800ccfe:	683b      	ldr	r3, [r7, #0]
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d101      	bne.n	800cd08 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 800cd04:	2301      	movs	r3, #1
 800cd06:	e0d9      	b.n	800cebc <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	681b      	ldr	r3, [r3, #0]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	f003 0310 	and.w	r3, r3, #16
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	bf14      	ite	ne
 800cd16:	2301      	movne	r3, #1
 800cd18:	2300      	moveq	r3, #0
 800cd1a:	b2db      	uxtb	r3, r3
 800cd1c:	461a      	mov	r2, r3
 800cd1e:	683b      	ldr	r3, [r7, #0]
 800cd20:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 800cd24:	687b      	ldr	r3, [r7, #4]
 800cd26:	681b      	ldr	r3, [r3, #0]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f003 0260 	and.w	r2, r3, #96	; 0x60
 800cd2e:	683b      	ldr	r3, [r7, #0]
 800cd30:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 800cd32:	687b      	ldr	r3, [r7, #4]
 800cd34:	681b      	ldr	r3, [r3, #0]
 800cd36:	681b      	ldr	r3, [r3, #0]
 800cd38:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	bf0c      	ite	eq
 800cd40:	2301      	moveq	r3, #1
 800cd42:	2300      	movne	r3, #0
 800cd44:	b2db      	uxtb	r3, r3
 800cd46:	461a      	mov	r2, r3
 800cd48:	683b      	ldr	r3, [r7, #0]
 800cd4a:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	681b      	ldr	r3, [r3, #0]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	bf14      	ite	ne
 800cd5c:	2301      	movne	r3, #1
 800cd5e:	2300      	moveq	r3, #0
 800cd60:	b2db      	uxtb	r3, r3
 800cd62:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	681b      	ldr	r3, [r3, #0]
 800cd6c:	681b      	ldr	r3, [r3, #0]
 800cd6e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	bf0c      	ite	eq
 800cd76:	2301      	moveq	r3, #1
 800cd78:	2300      	movne	r3, #0
 800cd7a:	b2db      	uxtb	r3, r3
 800cd7c:	461a      	mov	r2, r3
 800cd7e:	683b      	ldr	r3, [r7, #0]
 800cd80:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	bf14      	ite	ne
 800cd90:	2301      	movne	r3, #1
 800cd92:	2300      	moveq	r3, #0
 800cd94:	b2db      	uxtb	r3, r3
 800cd96:	461a      	mov	r2, r3
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	681b      	ldr	r3, [r3, #0]
 800cda2:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 800cda6:	683b      	ldr	r3, [r7, #0]
 800cda8:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 800cdaa:	687b      	ldr	r3, [r7, #4]
 800cdac:	681b      	ldr	r3, [r3, #0]
 800cdae:	681b      	ldr	r3, [r3, #0]
 800cdb0:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 800cdb4:	683b      	ldr	r3, [r7, #0]
 800cdb6:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 800cdb8:	687b      	ldr	r3, [r7, #4]
 800cdba:	681b      	ldr	r3, [r3, #0]
 800cdbc:	681b      	ldr	r3, [r3, #0]
 800cdbe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800cdc2:	2b00      	cmp	r3, #0
 800cdc4:	bf0c      	ite	eq
 800cdc6:	2301      	moveq	r3, #1
 800cdc8:	2300      	movne	r3, #0
 800cdca:	b2db      	uxtb	r3, r3
 800cdcc:	461a      	mov	r2, r3
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	681b      	ldr	r3, [r3, #0]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800cddc:	2b00      	cmp	r3, #0
 800cdde:	bf0c      	ite	eq
 800cde0:	2301      	moveq	r3, #1
 800cde2:	2300      	movne	r3, #0
 800cde4:	b2db      	uxtb	r3, r3
 800cde6:	461a      	mov	r2, r3
 800cde8:	683b      	ldr	r3, [r7, #0]
 800cdea:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	681b      	ldr	r3, [r3, #0]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	bf14      	ite	ne
 800cdfa:	2301      	movne	r3, #1
 800cdfc:	2300      	moveq	r3, #0
 800cdfe:	b2db      	uxtb	r3, r3
 800ce00:	461a      	mov	r2, r3
 800ce02:	683b      	ldr	r3, [r7, #0]
 800ce04:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	681b      	ldr	r3, [r3, #0]
 800ce0c:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	681b      	ldr	r3, [r3, #0]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800ce1e:	2b00      	cmp	r3, #0
 800ce20:	bf14      	ite	ne
 800ce22:	2301      	movne	r3, #1
 800ce24:	2300      	moveq	r3, #0
 800ce26:	b2db      	uxtb	r3, r3
 800ce28:	461a      	mov	r2, r3
 800ce2a:	683b      	ldr	r3, [r7, #0]
 800ce2c:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	699b      	ldr	r3, [r3, #24]
 800ce34:	f003 0302 	and.w	r3, r3, #2
 800ce38:	2b00      	cmp	r3, #0
 800ce3a:	bf14      	ite	ne
 800ce3c:	2301      	movne	r3, #1
 800ce3e:	2300      	moveq	r3, #0
 800ce40:	b2db      	uxtb	r3, r3
 800ce42:	461a      	mov	r2, r3
 800ce44:	683b      	ldr	r3, [r7, #0]
 800ce46:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	681b      	ldr	r3, [r3, #0]
 800ce4e:	699b      	ldr	r3, [r3, #24]
 800ce50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	bf0c      	ite	eq
 800ce58:	2301      	moveq	r3, #1
 800ce5a:	2300      	movne	r3, #0
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	461a      	mov	r2, r3
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800ce66:	687b      	ldr	r3, [r7, #4]
 800ce68:	681b      	ldr	r3, [r3, #0]
 800ce6a:	699b      	ldr	r3, [r3, #24]
 800ce6c:	f003 0230 	and.w	r2, r3, #48	; 0x30
 800ce70:	683b      	ldr	r3, [r7, #0]
 800ce72:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 800ce74:	687b      	ldr	r3, [r7, #4]
 800ce76:	681b      	ldr	r3, [r3, #0]
 800ce78:	699b      	ldr	r3, [r3, #24]
 800ce7a:	0c1b      	lsrs	r3, r3, #16
 800ce7c:	b29a      	uxth	r2, r3
 800ce7e:	683b      	ldr	r3, [r7, #0]
 800ce80:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 800ce82:	687b      	ldr	r3, [r7, #4]
 800ce84:	681b      	ldr	r3, [r3, #0]
 800ce86:	699b      	ldr	r3, [r3, #24]
 800ce88:	f003 0304 	and.w	r3, r3, #4
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	bf14      	ite	ne
 800ce90:	2301      	movne	r3, #1
 800ce92:	2300      	moveq	r3, #0
 800ce94:	b2db      	uxtb	r3, r3
 800ce96:	461a      	mov	r2, r3
 800ce98:	683b      	ldr	r3, [r7, #0]
 800ce9a:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800ce9e:	687b      	ldr	r3, [r7, #4]
 800cea0:	681b      	ldr	r3, [r3, #0]
 800cea2:	699b      	ldr	r3, [r3, #24]
 800cea4:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bf14      	ite	ne
 800ceac:	2301      	movne	r3, #1
 800ceae:	2300      	moveq	r3, #0
 800ceb0:	b2db      	uxtb	r3, r3
 800ceb2:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 800ceba:	2300      	movs	r3, #0
}
 800cebc:	4618      	mov	r0, r3
 800cebe:	370c      	adds	r7, #12
 800cec0:	46bd      	mov	sp, r7
 800cec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cec6:	4770      	bx	lr

0800cec8 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800cec8:	b580      	push	{r7, lr}
 800ceca:	b082      	sub	sp, #8
 800cecc:	af00      	add	r7, sp, #0
 800cece:	6078      	str	r0, [r7, #4]
 800ced0:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800ced2:	683b      	ldr	r3, [r7, #0]
 800ced4:	2b00      	cmp	r3, #0
 800ced6:	d101      	bne.n	800cedc <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800ced8:	2301      	movs	r3, #1
 800ceda:	e00b      	b.n	800cef4 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cee2:	2b10      	cmp	r3, #16
 800cee4:	d105      	bne.n	800cef2 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800cee6:	6839      	ldr	r1, [r7, #0]
 800cee8:	6878      	ldr	r0, [r7, #4]
 800ceea:	f000 f88f 	bl	800d00c <ETH_SetMACConfig>

    return HAL_OK;
 800ceee:	2300      	movs	r3, #0
 800cef0:	e000      	b.n	800cef4 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800cef2:	2301      	movs	r3, #1
  }
}
 800cef4:	4618      	mov	r0, r3
 800cef6:	3708      	adds	r7, #8
 800cef8:	46bd      	mov	sp, r7
 800cefa:	bd80      	pop	{r7, pc}

0800cefc <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b084      	sub	sp, #16
 800cf00:	af00      	add	r7, sp, #0
 800cf02:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800cf04:	687b      	ldr	r3, [r7, #4]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	691b      	ldr	r3, [r3, #16]
 800cf0a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 800cf0c:	68fb      	ldr	r3, [r7, #12]
 800cf0e:	f023 031c 	bic.w	r3, r3, #28
 800cf12:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800cf14:	f001 fadc 	bl	800e4d0 <HAL_RCC_GetHCLKFreq>
 800cf18:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800cf1a:	68bb      	ldr	r3, [r7, #8]
 800cf1c:	4a1d      	ldr	r2, [pc, #116]	; (800cf94 <HAL_ETH_SetMDIOClockRange+0x98>)
 800cf1e:	4293      	cmp	r3, r2
 800cf20:	d908      	bls.n	800cf34 <HAL_ETH_SetMDIOClockRange+0x38>
 800cf22:	68bb      	ldr	r3, [r7, #8]
 800cf24:	4a1c      	ldr	r2, [pc, #112]	; (800cf98 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800cf26:	4293      	cmp	r3, r2
 800cf28:	d804      	bhi.n	800cf34 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800cf2a:	68fb      	ldr	r3, [r7, #12]
 800cf2c:	f043 0308 	orr.w	r3, r3, #8
 800cf30:	60fb      	str	r3, [r7, #12]
 800cf32:	e027      	b.n	800cf84 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800cf34:	68bb      	ldr	r3, [r7, #8]
 800cf36:	4a18      	ldr	r2, [pc, #96]	; (800cf98 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800cf38:	4293      	cmp	r3, r2
 800cf3a:	d908      	bls.n	800cf4e <HAL_ETH_SetMDIOClockRange+0x52>
 800cf3c:	68bb      	ldr	r3, [r7, #8]
 800cf3e:	4a17      	ldr	r2, [pc, #92]	; (800cf9c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800cf40:	4293      	cmp	r3, r2
 800cf42:	d204      	bcs.n	800cf4e <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800cf44:	68fb      	ldr	r3, [r7, #12]
 800cf46:	f043 030c 	orr.w	r3, r3, #12
 800cf4a:	60fb      	str	r3, [r7, #12]
 800cf4c:	e01a      	b.n	800cf84 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800cf4e:	68bb      	ldr	r3, [r7, #8]
 800cf50:	4a12      	ldr	r2, [pc, #72]	; (800cf9c <HAL_ETH_SetMDIOClockRange+0xa0>)
 800cf52:	4293      	cmp	r3, r2
 800cf54:	d303      	bcc.n	800cf5e <HAL_ETH_SetMDIOClockRange+0x62>
 800cf56:	68bb      	ldr	r3, [r7, #8]
 800cf58:	4a11      	ldr	r2, [pc, #68]	; (800cfa0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800cf5a:	4293      	cmp	r3, r2
 800cf5c:	d911      	bls.n	800cf82 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800cf5e:	68bb      	ldr	r3, [r7, #8]
 800cf60:	4a0f      	ldr	r2, [pc, #60]	; (800cfa0 <HAL_ETH_SetMDIOClockRange+0xa4>)
 800cf62:	4293      	cmp	r3, r2
 800cf64:	d908      	bls.n	800cf78 <HAL_ETH_SetMDIOClockRange+0x7c>
 800cf66:	68bb      	ldr	r3, [r7, #8]
 800cf68:	4a0e      	ldr	r2, [pc, #56]	; (800cfa4 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800cf6a:	4293      	cmp	r3, r2
 800cf6c:	d804      	bhi.n	800cf78 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 800cf6e:	68fb      	ldr	r3, [r7, #12]
 800cf70:	f043 0304 	orr.w	r3, r3, #4
 800cf74:	60fb      	str	r3, [r7, #12]
 800cf76:	e005      	b.n	800cf84 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800cf78:	68fb      	ldr	r3, [r7, #12]
 800cf7a:	f043 0310 	orr.w	r3, r3, #16
 800cf7e:	60fb      	str	r3, [r7, #12]
 800cf80:	e000      	b.n	800cf84 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 800cf82:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	681b      	ldr	r3, [r3, #0]
 800cf88:	68fa      	ldr	r2, [r7, #12]
 800cf8a:	611a      	str	r2, [r3, #16]
}
 800cf8c:	bf00      	nop
 800cf8e:	3710      	adds	r7, #16
 800cf90:	46bd      	mov	sp, r7
 800cf92:	bd80      	pop	{r7, pc}
 800cf94:	01312cff 	.word	0x01312cff
 800cf98:	02160ebf 	.word	0x02160ebf
 800cf9c:	03938700 	.word	0x03938700
 800cfa0:	05f5e0ff 	.word	0x05f5e0ff
 800cfa4:	08f0d17f 	.word	0x08f0d17f

0800cfa8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800cfa8:	b480      	push	{r7}
 800cfaa:	b083      	sub	sp, #12
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800cfb6:	4618      	mov	r0, r3
 800cfb8:	370c      	adds	r7, #12
 800cfba:	46bd      	mov	sp, r7
 800cfbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfc0:	4770      	bx	lr

0800cfc2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800cfc2:	b580      	push	{r7, lr}
 800cfc4:	b084      	sub	sp, #16
 800cfc6:	af00      	add	r7, sp, #0
 800cfc8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfd6:	699b      	ldr	r3, [r3, #24]
 800cfd8:	687a      	ldr	r2, [r7, #4]
 800cfda:	6812      	ldr	r2, [r2, #0]
 800cfdc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cfe0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800cfe4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	681b      	ldr	r3, [r3, #0]
 800cfea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800cfee:	699b      	ldr	r3, [r3, #24]
 800cff0:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800cff2:	2001      	movs	r0, #1
 800cff4:	f7fe f91c 	bl	800b230 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d002:	6193      	str	r3, [r2, #24]
}
 800d004:	bf00      	nop
 800d006:	3710      	adds	r7, #16
 800d008:	46bd      	mov	sp, r7
 800d00a:	bd80      	pop	{r7, pc}

0800d00c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800d00c:	b580      	push	{r7, lr}
 800d00e:	b084      	sub	sp, #16
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	681b      	ldr	r3, [r3, #0]
 800d01a:	681b      	ldr	r3, [r3, #0]
 800d01c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800d01e:	68fa      	ldr	r2, [r7, #12]
 800d020:	4b51      	ldr	r3, [pc, #324]	; (800d168 <ETH_SetMACConfig+0x15c>)
 800d022:	4013      	ands	r3, r2
 800d024:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800d026:	683b      	ldr	r3, [r7, #0]
 800d028:	7c1b      	ldrb	r3, [r3, #16]
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d102      	bne.n	800d034 <ETH_SetMACConfig+0x28>
 800d02e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800d032:	e000      	b.n	800d036 <ETH_SetMACConfig+0x2a>
 800d034:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800d036:	683b      	ldr	r3, [r7, #0]
 800d038:	7c5b      	ldrb	r3, [r3, #17]
 800d03a:	2b00      	cmp	r3, #0
 800d03c:	d102      	bne.n	800d044 <ETH_SetMACConfig+0x38>
 800d03e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d042:	e000      	b.n	800d046 <ETH_SetMACConfig+0x3a>
 800d044:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800d046:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 800d048:	683b      	ldr	r3, [r7, #0]
 800d04a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800d04c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800d04e:	683b      	ldr	r3, [r7, #0]
 800d050:	7fdb      	ldrb	r3, [r3, #31]
 800d052:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800d054:	431a      	orrs	r2, r3
                        macconf->Speed |
 800d056:	683b      	ldr	r3, [r7, #0]
 800d058:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800d05a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800d05c:	683a      	ldr	r2, [r7, #0]
 800d05e:	7f92      	ldrb	r2, [r2, #30]
 800d060:	2a00      	cmp	r2, #0
 800d062:	d102      	bne.n	800d06a <ETH_SetMACConfig+0x5e>
 800d064:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800d068:	e000      	b.n	800d06c <ETH_SetMACConfig+0x60>
 800d06a:	2200      	movs	r2, #0
                        macconf->Speed |
 800d06c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800d06e:	683b      	ldr	r3, [r7, #0]
 800d070:	7f1b      	ldrb	r3, [r3, #28]
 800d072:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800d074:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800d076:	683b      	ldr	r3, [r7, #0]
 800d078:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800d07a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800d07c:	683b      	ldr	r3, [r7, #0]
 800d07e:	791b      	ldrb	r3, [r3, #4]
 800d080:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800d082:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800d084:	683a      	ldr	r2, [r7, #0]
 800d086:	f892 2020 	ldrb.w	r2, [r2, #32]
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	d102      	bne.n	800d094 <ETH_SetMACConfig+0x88>
 800d08e:	f44f 7200 	mov.w	r2, #512	; 0x200
 800d092:	e000      	b.n	800d096 <ETH_SetMACConfig+0x8a>
 800d094:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800d096:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800d098:	683b      	ldr	r3, [r7, #0]
 800d09a:	7bdb      	ldrb	r3, [r3, #15]
 800d09c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800d09e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800d0a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d0ac:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800d0ae:	4313      	orrs	r3, r2
 800d0b0:	68fa      	ldr	r2, [r7, #12]
 800d0b2:	4313      	orrs	r3, r2
 800d0b4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800d0b6:	687b      	ldr	r3, [r7, #4]
 800d0b8:	681b      	ldr	r3, [r3, #0]
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	681b      	ldr	r3, [r3, #0]
 800d0c2:	681b      	ldr	r3, [r3, #0]
 800d0c4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d0c6:	2001      	movs	r0, #1
 800d0c8:	f7fe f8b2 	bl	800b230 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	68fa      	ldr	r2, [r7, #12]
 800d0d2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	699b      	ldr	r3, [r3, #24]
 800d0da:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 800d0dc:	68fa      	ldr	r2, [r7, #12]
 800d0de:	f64f 7341 	movw	r3, #65345	; 0xff41
 800d0e2:	4013      	ands	r3, r2
 800d0e4:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800d0ea:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800d0ec:	683a      	ldr	r2, [r7, #0]
 800d0ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800d0f2:	2a00      	cmp	r2, #0
 800d0f4:	d101      	bne.n	800d0fa <ETH_SetMACConfig+0xee>
 800d0f6:	2280      	movs	r2, #128	; 0x80
 800d0f8:	e000      	b.n	800d0fc <ETH_SetMACConfig+0xf0>
 800d0fa:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800d0fc:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800d0fe:	683b      	ldr	r3, [r7, #0]
 800d100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800d102:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800d104:	683a      	ldr	r2, [r7, #0]
 800d106:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800d10a:	2a01      	cmp	r2, #1
 800d10c:	d101      	bne.n	800d112 <ETH_SetMACConfig+0x106>
 800d10e:	2208      	movs	r2, #8
 800d110:	e000      	b.n	800d114 <ETH_SetMACConfig+0x108>
 800d112:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800d114:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800d116:	683a      	ldr	r2, [r7, #0]
 800d118:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 800d11c:	2a01      	cmp	r2, #1
 800d11e:	d101      	bne.n	800d124 <ETH_SetMACConfig+0x118>
 800d120:	2204      	movs	r2, #4
 800d122:	e000      	b.n	800d126 <ETH_SetMACConfig+0x11a>
 800d124:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800d126:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 800d128:	683a      	ldr	r2, [r7, #0]
 800d12a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800d12e:	2a01      	cmp	r2, #1
 800d130:	d101      	bne.n	800d136 <ETH_SetMACConfig+0x12a>
 800d132:	2202      	movs	r2, #2
 800d134:	e000      	b.n	800d138 <ETH_SetMACConfig+0x12c>
 800d136:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800d138:	4313      	orrs	r3, r2
 800d13a:	68fa      	ldr	r2, [r7, #12]
 800d13c:	4313      	orrs	r3, r2
 800d13e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 800d140:	687b      	ldr	r3, [r7, #4]
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	68fa      	ldr	r2, [r7, #12]
 800d146:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	699b      	ldr	r3, [r3, #24]
 800d14e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d150:	2001      	movs	r0, #1
 800d152:	f7fe f86d 	bl	800b230 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800d156:	687b      	ldr	r3, [r7, #4]
 800d158:	681b      	ldr	r3, [r3, #0]
 800d15a:	68fa      	ldr	r2, [r7, #12]
 800d15c:	619a      	str	r2, [r3, #24]
}
 800d15e:	bf00      	nop
 800d160:	3710      	adds	r7, #16
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	ff20810f 	.word	0xff20810f

0800d16c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800d16c:	b580      	push	{r7, lr}
 800d16e:	b084      	sub	sp, #16
 800d170:	af00      	add	r7, sp, #0
 800d172:	6078      	str	r0, [r7, #4]
 800d174:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d17e:	699b      	ldr	r3, [r3, #24]
 800d180:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	4b3d      	ldr	r3, [pc, #244]	; (800d27c <ETH_SetDMAConfig+0x110>)
 800d186:	4013      	ands	r3, r2
 800d188:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800d18a:	683b      	ldr	r3, [r7, #0]
 800d18c:	7b1b      	ldrb	r3, [r3, #12]
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d102      	bne.n	800d198 <ETH_SetDMAConfig+0x2c>
 800d192:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800d196:	e000      	b.n	800d19a <ETH_SetDMAConfig+0x2e>
 800d198:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800d19a:	683b      	ldr	r3, [r7, #0]
 800d19c:	7b5b      	ldrb	r3, [r3, #13]
 800d19e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800d1a0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800d1a2:	683a      	ldr	r2, [r7, #0]
 800d1a4:	7f52      	ldrb	r2, [r2, #29]
 800d1a6:	2a00      	cmp	r2, #0
 800d1a8:	d102      	bne.n	800d1b0 <ETH_SetDMAConfig+0x44>
 800d1aa:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800d1ae:	e000      	b.n	800d1b2 <ETH_SetDMAConfig+0x46>
 800d1b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800d1b2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800d1b4:	683b      	ldr	r3, [r7, #0]
 800d1b6:	7b9b      	ldrb	r3, [r3, #14]
 800d1b8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800d1ba:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 800d1bc:	683b      	ldr	r3, [r7, #0]
 800d1be:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800d1c0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	7f1b      	ldrb	r3, [r3, #28]
 800d1c6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800d1c8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800d1ca:	683b      	ldr	r3, [r7, #0]
 800d1cc:	7f9b      	ldrb	r3, [r3, #30]
 800d1ce:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800d1d0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800d1d2:	683b      	ldr	r3, [r7, #0]
 800d1d4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800d1d6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800d1d8:	683b      	ldr	r3, [r7, #0]
 800d1da:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800d1de:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	68fa      	ldr	r2, [r7, #12]
 800d1e4:	4313      	orrs	r3, r2
 800d1e6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1f0:	461a      	mov	r2, r3
 800d1f2:	68fb      	ldr	r3, [r7, #12]
 800d1f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	681b      	ldr	r3, [r3, #0]
 800d1fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d1fe:	699b      	ldr	r3, [r3, #24]
 800d200:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d202:	2001      	movs	r0, #1
 800d204:	f7fe f814 	bl	800b230 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681b      	ldr	r3, [r3, #0]
 800d20c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d210:	461a      	mov	r2, r3
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800d216:	683b      	ldr	r3, [r7, #0]
 800d218:	791b      	ldrb	r3, [r3, #4]
 800d21a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 800d21c:	683b      	ldr	r3, [r7, #0]
 800d21e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800d220:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800d222:	683b      	ldr	r3, [r7, #0]
 800d224:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800d226:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800d22c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800d22e:	683b      	ldr	r3, [r7, #0]
 800d230:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800d234:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800d236:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800d238:	683b      	ldr	r3, [r7, #0]
 800d23a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d23c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 800d23e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 800d240:	683b      	ldr	r3, [r7, #0]
 800d242:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800d244:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	6812      	ldr	r2, [r2, #0]
 800d24a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800d24e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800d252:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	681b      	ldr	r3, [r3, #0]
 800d258:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800d260:	2001      	movs	r0, #1
 800d262:	f7fd ffe5 	bl	800b230 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800d266:	687b      	ldr	r3, [r7, #4]
 800d268:	681b      	ldr	r3, [r3, #0]
 800d26a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d26e:	461a      	mov	r2, r3
 800d270:	68fb      	ldr	r3, [r7, #12]
 800d272:	6013      	str	r3, [r2, #0]
}
 800d274:	bf00      	nop
 800d276:	3710      	adds	r7, #16
 800d278:	46bd      	mov	sp, r7
 800d27a:	bd80      	pop	{r7, pc}
 800d27c:	f8de3f23 	.word	0xf8de3f23

0800d280 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800d280:	b580      	push	{r7, lr}
 800d282:	b0a6      	sub	sp, #152	; 0x98
 800d284:	af00      	add	r7, sp, #0
 800d286:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800d288:	2301      	movs	r3, #1
 800d28a:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800d28e:	2301      	movs	r3, #1
 800d290:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 800d294:	2300      	movs	r3, #0
 800d296:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800d298:	2300      	movs	r3, #0
 800d29a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800d29e:	2301      	movs	r3, #1
 800d2a0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800d2aa:	2301      	movs	r3, #1
 800d2ac:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800d2b0:	2300      	movs	r3, #0
 800d2b2:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800d2b6:	2300      	movs	r3, #0
 800d2b8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800d2bc:	2300      	movs	r3, #0
 800d2be:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800d2c0:	2300      	movs	r3, #0
 800d2c2:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800d2ca:	2300      	movs	r3, #0
 800d2cc:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800d2d6:	2300      	movs	r3, #0
 800d2d8:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800d2e2:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800d2e6:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800d2e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800d2ec:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800d2ee:	2300      	movs	r3, #0
 800d2f0:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800d2f4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800d2f8:	4619      	mov	r1, r3
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f7ff fe86 	bl	800d00c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800d300:	2301      	movs	r3, #1
 800d302:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800d304:	2301      	movs	r3, #1
 800d306:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800d308:	2301      	movs	r3, #1
 800d30a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800d30e:	2301      	movs	r3, #1
 800d310:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800d312:	2300      	movs	r3, #0
 800d314:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800d316:	2300      	movs	r3, #0
 800d318:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800d31c:	2300      	movs	r3, #0
 800d31e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800d322:	2300      	movs	r3, #0
 800d324:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800d326:	2301      	movs	r3, #1
 800d328:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800d32c:	2301      	movs	r3, #1
 800d32e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800d330:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800d334:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800d336:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800d33a:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800d33c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d340:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800d342:	2301      	movs	r3, #1
 800d344:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 800d348:	2300      	movs	r3, #0
 800d34a:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800d34c:	2300      	movs	r3, #0
 800d34e:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800d350:	f107 0308 	add.w	r3, r7, #8
 800d354:	4619      	mov	r1, r3
 800d356:	6878      	ldr	r0, [r7, #4]
 800d358:	f7ff ff08 	bl	800d16c <ETH_SetDMAConfig>
}
 800d35c:	bf00      	nop
 800d35e:	3798      	adds	r7, #152	; 0x98
 800d360:	46bd      	mov	sp, r7
 800d362:	bd80      	pop	{r7, pc}

0800d364 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800d364:	b480      	push	{r7}
 800d366:	b087      	sub	sp, #28
 800d368:	af00      	add	r7, sp, #0
 800d36a:	60f8      	str	r0, [r7, #12]
 800d36c:	60b9      	str	r1, [r7, #8]
 800d36e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	3305      	adds	r3, #5
 800d374:	781b      	ldrb	r3, [r3, #0]
 800d376:	021b      	lsls	r3, r3, #8
 800d378:	687a      	ldr	r2, [r7, #4]
 800d37a:	3204      	adds	r2, #4
 800d37c:	7812      	ldrb	r2, [r2, #0]
 800d37e:	4313      	orrs	r3, r2
 800d380:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 800d382:	68ba      	ldr	r2, [r7, #8]
 800d384:	4b11      	ldr	r3, [pc, #68]	; (800d3cc <ETH_MACAddressConfig+0x68>)
 800d386:	4413      	add	r3, r2
 800d388:	461a      	mov	r2, r3
 800d38a:	697b      	ldr	r3, [r7, #20]
 800d38c:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800d38e:	687b      	ldr	r3, [r7, #4]
 800d390:	3303      	adds	r3, #3
 800d392:	781b      	ldrb	r3, [r3, #0]
 800d394:	061a      	lsls	r2, r3, #24
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	3302      	adds	r3, #2
 800d39a:	781b      	ldrb	r3, [r3, #0]
 800d39c:	041b      	lsls	r3, r3, #16
 800d39e:	431a      	orrs	r2, r3
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	3301      	adds	r3, #1
 800d3a4:	781b      	ldrb	r3, [r3, #0]
 800d3a6:	021b      	lsls	r3, r3, #8
 800d3a8:	4313      	orrs	r3, r2
 800d3aa:	687a      	ldr	r2, [r7, #4]
 800d3ac:	7812      	ldrb	r2, [r2, #0]
 800d3ae:	4313      	orrs	r3, r2
 800d3b0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800d3b2:	68ba      	ldr	r2, [r7, #8]
 800d3b4:	4b06      	ldr	r3, [pc, #24]	; (800d3d0 <ETH_MACAddressConfig+0x6c>)
 800d3b6:	4413      	add	r3, r2
 800d3b8:	461a      	mov	r2, r3
 800d3ba:	697b      	ldr	r3, [r7, #20]
 800d3bc:	6013      	str	r3, [r2, #0]
}
 800d3be:	bf00      	nop
 800d3c0:	371c      	adds	r7, #28
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3c8:	4770      	bx	lr
 800d3ca:	bf00      	nop
 800d3cc:	40028040 	.word	0x40028040
 800d3d0:	40028044 	.word	0x40028044

0800d3d4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800d3d4:	b480      	push	{r7}
 800d3d6:	b085      	sub	sp, #20
 800d3d8:	af00      	add	r7, sp, #0
 800d3da:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800d3dc:	2300      	movs	r3, #0
 800d3de:	60fb      	str	r3, [r7, #12]
 800d3e0:	e03e      	b.n	800d460 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	68d9      	ldr	r1, [r3, #12]
 800d3e6:	68fa      	ldr	r2, [r7, #12]
 800d3e8:	4613      	mov	r3, r2
 800d3ea:	009b      	lsls	r3, r3, #2
 800d3ec:	4413      	add	r3, r2
 800d3ee:	00db      	lsls	r3, r3, #3
 800d3f0:	440b      	add	r3, r1
 800d3f2:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800d3f4:	68bb      	ldr	r3, [r7, #8]
 800d3f6:	2200      	movs	r2, #0
 800d3f8:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800d3fa:	68bb      	ldr	r3, [r7, #8]
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800d400:	68bb      	ldr	r3, [r7, #8]
 800d402:	2200      	movs	r2, #0
 800d404:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800d406:	68bb      	ldr	r3, [r7, #8]
 800d408:	2200      	movs	r2, #0
 800d40a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800d40c:	68b9      	ldr	r1, [r7, #8]
 800d40e:	687b      	ldr	r3, [r7, #4]
 800d410:	68fa      	ldr	r2, [r7, #12]
 800d412:	3206      	adds	r2, #6
 800d414:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800d418:	68bb      	ldr	r3, [r7, #8]
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800d420:	68bb      	ldr	r3, [r7, #8]
 800d422:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800d424:	68fb      	ldr	r3, [r7, #12]
 800d426:	2b02      	cmp	r3, #2
 800d428:	d80c      	bhi.n	800d444 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	68d9      	ldr	r1, [r3, #12]
 800d42e:	68fb      	ldr	r3, [r7, #12]
 800d430:	1c5a      	adds	r2, r3, #1
 800d432:	4613      	mov	r3, r2
 800d434:	009b      	lsls	r3, r3, #2
 800d436:	4413      	add	r3, r2
 800d438:	00db      	lsls	r3, r3, #3
 800d43a:	440b      	add	r3, r1
 800d43c:	461a      	mov	r2, r3
 800d43e:	68bb      	ldr	r3, [r7, #8]
 800d440:	60da      	str	r2, [r3, #12]
 800d442:	e004      	b.n	800d44e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800d444:	687b      	ldr	r3, [r7, #4]
 800d446:	68db      	ldr	r3, [r3, #12]
 800d448:	461a      	mov	r2, r3
 800d44a:	68bb      	ldr	r3, [r7, #8]
 800d44c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800d44e:	68bb      	ldr	r3, [r7, #8]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800d456:	68bb      	ldr	r3, [r7, #8]
 800d458:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	3301      	adds	r3, #1
 800d45e:	60fb      	str	r3, [r7, #12]
 800d460:	68fb      	ldr	r3, [r7, #12]
 800d462:	2b03      	cmp	r3, #3
 800d464:	d9bd      	bls.n	800d3e2 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800d466:	687b      	ldr	r3, [r7, #4]
 800d468:	2200      	movs	r2, #0
 800d46a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800d46c:	687b      	ldr	r3, [r7, #4]
 800d46e:	68da      	ldr	r2, [r3, #12]
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d478:	611a      	str	r2, [r3, #16]
}
 800d47a:	bf00      	nop
 800d47c:	3714      	adds	r7, #20
 800d47e:	46bd      	mov	sp, r7
 800d480:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d484:	4770      	bx	lr

0800d486 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800d486:	b480      	push	{r7}
 800d488:	b085      	sub	sp, #20
 800d48a:	af00      	add	r7, sp, #0
 800d48c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d48e:	2300      	movs	r3, #0
 800d490:	60fb      	str	r3, [r7, #12]
 800d492:	e046      	b.n	800d522 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800d494:	687b      	ldr	r3, [r7, #4]
 800d496:	6919      	ldr	r1, [r3, #16]
 800d498:	68fa      	ldr	r2, [r7, #12]
 800d49a:	4613      	mov	r3, r2
 800d49c:	009b      	lsls	r3, r3, #2
 800d49e:	4413      	add	r3, r2
 800d4a0:	00db      	lsls	r3, r3, #3
 800d4a2:	440b      	add	r3, r1
 800d4a4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800d4a6:	68bb      	ldr	r3, [r7, #8]
 800d4a8:	2200      	movs	r2, #0
 800d4aa:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800d4ac:	68bb      	ldr	r3, [r7, #8]
 800d4ae:	2200      	movs	r2, #0
 800d4b0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800d4b8:	68bb      	ldr	r3, [r7, #8]
 800d4ba:	2200      	movs	r2, #0
 800d4bc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800d4be:	68bb      	ldr	r3, [r7, #8]
 800d4c0:	2200      	movs	r2, #0
 800d4c2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800d4c4:	68bb      	ldr	r3, [r7, #8]
 800d4c6:	2200      	movs	r2, #0
 800d4c8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800d4ca:	68bb      	ldr	r3, [r7, #8]
 800d4cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d4d0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800d4d2:	68bb      	ldr	r3, [r7, #8]
 800d4d4:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800d4d8:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800d4da:	68bb      	ldr	r3, [r7, #8]
 800d4dc:	685b      	ldr	r3, [r3, #4]
 800d4de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d4e2:	68bb      	ldr	r3, [r7, #8]
 800d4e4:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800d4e6:	68b9      	ldr	r1, [r7, #8]
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	68fa      	ldr	r2, [r7, #12]
 800d4ec:	3212      	adds	r2, #18
 800d4ee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800d4f2:	68fb      	ldr	r3, [r7, #12]
 800d4f4:	2b02      	cmp	r3, #2
 800d4f6:	d80c      	bhi.n	800d512 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	6919      	ldr	r1, [r3, #16]
 800d4fc:	68fb      	ldr	r3, [r7, #12]
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	4613      	mov	r3, r2
 800d502:	009b      	lsls	r3, r3, #2
 800d504:	4413      	add	r3, r2
 800d506:	00db      	lsls	r3, r3, #3
 800d508:	440b      	add	r3, r1
 800d50a:	461a      	mov	r2, r3
 800d50c:	68bb      	ldr	r3, [r7, #8]
 800d50e:	60da      	str	r2, [r3, #12]
 800d510:	e004      	b.n	800d51c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	691b      	ldr	r3, [r3, #16]
 800d516:	461a      	mov	r2, r3
 800d518:	68bb      	ldr	r3, [r7, #8]
 800d51a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	3301      	adds	r3, #1
 800d520:	60fb      	str	r3, [r7, #12]
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	2b03      	cmp	r3, #3
 800d526:	d9b5      	bls.n	800d494 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	2200      	movs	r2, #0
 800d52c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800d52e:	687b      	ldr	r3, [r7, #4]
 800d530:	2200      	movs	r2, #0
 800d532:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	2200      	movs	r2, #0
 800d538:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800d53a:	687b      	ldr	r3, [r7, #4]
 800d53c:	2200      	movs	r2, #0
 800d53e:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	2200      	movs	r2, #0
 800d544:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	691a      	ldr	r2, [r3, #16]
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800d552:	60da      	str	r2, [r3, #12]
}
 800d554:	bf00      	nop
 800d556:	3714      	adds	r7, #20
 800d558:	46bd      	mov	sp, r7
 800d55a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d55e:	4770      	bx	lr

0800d560 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 800d560:	b480      	push	{r7}
 800d562:	b08d      	sub	sp, #52	; 0x34
 800d564:	af00      	add	r7, sp, #0
 800d566:	60f8      	str	r0, [r7, #12]
 800d568:	60b9      	str	r1, [r7, #8]
 800d56a:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	3318      	adds	r3, #24
 800d570:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800d572:	697b      	ldr	r3, [r7, #20]
 800d574:	691b      	ldr	r3, [r3, #16]
 800d576:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	691b      	ldr	r3, [r3, #16]
 800d57c:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 800d57e:	2300      	movs	r3, #0
 800d580:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d582:	697b      	ldr	r3, [r7, #20]
 800d584:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d586:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d58a:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 800d58c:	68bb      	ldr	r3, [r7, #8]
 800d58e:	689b      	ldr	r3, [r3, #8]
 800d590:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 800d592:	2300      	movs	r3, #0
 800d594:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800d596:	6a3b      	ldr	r3, [r7, #32]
 800d598:	681b      	ldr	r3, [r3, #0]
 800d59a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d59e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d5a2:	d007      	beq.n	800d5b4 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800d5a4:	697a      	ldr	r2, [r7, #20]
 800d5a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d5a8:	3304      	adds	r3, #4
 800d5aa:	009b      	lsls	r3, r3, #2
 800d5ac:	4413      	add	r3, r2
 800d5ae:	685b      	ldr	r3, [r3, #4]
 800d5b0:	2b00      	cmp	r3, #0
 800d5b2:	d001      	beq.n	800d5b8 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 800d5b4:	2302      	movs	r3, #2
 800d5b6:	e0ff      	b.n	800d7b8 <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800d5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5ba:	3301      	adds	r3, #1
 800d5bc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800d5be:	69fb      	ldr	r3, [r7, #28]
 800d5c0:	681b      	ldr	r3, [r3, #0]
 800d5c2:	461a      	mov	r2, r3
 800d5c4:	6a3b      	ldr	r3, [r7, #32]
 800d5c6:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800d5c8:	6a3b      	ldr	r3, [r7, #32]
 800d5ca:	685a      	ldr	r2, [r3, #4]
 800d5cc:	4b7d      	ldr	r3, [pc, #500]	; (800d7c4 <ETH_Prepare_Tx_Descriptors+0x264>)
 800d5ce:	4013      	ands	r3, r2
 800d5d0:	69fa      	ldr	r2, [r7, #28]
 800d5d2:	6852      	ldr	r2, [r2, #4]
 800d5d4:	431a      	orrs	r2, r3
 800d5d6:	6a3b      	ldr	r3, [r7, #32]
 800d5d8:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800d5da:	68bb      	ldr	r3, [r7, #8]
 800d5dc:	681b      	ldr	r3, [r3, #0]
 800d5de:	f003 0301 	and.w	r3, r3, #1
 800d5e2:	2b00      	cmp	r3, #0
 800d5e4:	d008      	beq.n	800d5f8 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800d5e6:	6a3b      	ldr	r3, [r7, #32]
 800d5e8:	681b      	ldr	r3, [r3, #0]
 800d5ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800d5ee:	68bb      	ldr	r3, [r7, #8]
 800d5f0:	695b      	ldr	r3, [r3, #20]
 800d5f2:	431a      	orrs	r2, r3
 800d5f4:	6a3b      	ldr	r3, [r7, #32]
 800d5f6:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800d5f8:	68bb      	ldr	r3, [r7, #8]
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	f003 0320 	and.w	r3, r3, #32
 800d600:	2b00      	cmp	r3, #0
 800d602:	d008      	beq.n	800d616 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 800d604:	6a3b      	ldr	r3, [r7, #32]
 800d606:	681b      	ldr	r3, [r3, #0]
 800d608:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	691b      	ldr	r3, [r3, #16]
 800d610:	431a      	orrs	r2, r3
 800d612:	6a3b      	ldr	r3, [r7, #32]
 800d614:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800d616:	68bb      	ldr	r3, [r7, #8]
 800d618:	681b      	ldr	r3, [r3, #0]
 800d61a:	f003 0304 	and.w	r3, r3, #4
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d005      	beq.n	800d62e <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800d622:	6a3b      	ldr	r3, [r7, #32]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800d62a:	6a3b      	ldr	r3, [r7, #32]
 800d62c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800d62e:	6a3b      	ldr	r3, [r7, #32]
 800d630:	681b      	ldr	r3, [r3, #0]
 800d632:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800d636:	6a3b      	ldr	r3, [r7, #32]
 800d638:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 800d63a:	f3bf 8f5f 	dmb	sy
}
 800d63e:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d640:	6a3b      	ldr	r3, [r7, #32]
 800d642:	681b      	ldr	r3, [r3, #0]
 800d644:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d648:	6a3b      	ldr	r3, [r7, #32]
 800d64a:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800d64c:	e082      	b.n	800d754 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800d64e:	6a3b      	ldr	r3, [r7, #32]
 800d650:	681b      	ldr	r3, [r3, #0]
 800d652:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 800d656:	6a3b      	ldr	r3, [r7, #32]
 800d658:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2b00      	cmp	r3, #0
 800d65e:	d006      	beq.n	800d66e <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d660:	6a3b      	ldr	r3, [r7, #32]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d668:	6a3b      	ldr	r3, [r7, #32]
 800d66a:	601a      	str	r2, [r3, #0]
 800d66c:	e005      	b.n	800d67a <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d66e:	6a3b      	ldr	r3, [r7, #32]
 800d670:	681b      	ldr	r3, [r3, #0]
 800d672:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800d67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67c:	3301      	adds	r3, #1
 800d67e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d682:	2b03      	cmp	r3, #3
 800d684:	d902      	bls.n	800d68c <ETH_Prepare_Tx_Descriptors+0x12c>
 800d686:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d688:	3b04      	subs	r3, #4
 800d68a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d68c:	697b      	ldr	r3, [r7, #20]
 800d68e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d694:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800d696:	6a3b      	ldr	r3, [r7, #32]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800d69e:	6a3b      	ldr	r3, [r7, #32]
 800d6a0:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800d6a2:	6a3b      	ldr	r3, [r7, #32]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800d6aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800d6ae:	d007      	beq.n	800d6c0 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 800d6b0:	697a      	ldr	r2, [r7, #20]
 800d6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b4:	3304      	adds	r3, #4
 800d6b6:	009b      	lsls	r3, r3, #2
 800d6b8:	4413      	add	r3, r2
 800d6ba:	685b      	ldr	r3, [r3, #4]
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d029      	beq.n	800d714 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 800d6c0:	693b      	ldr	r3, [r7, #16]
 800d6c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d6c4:	697b      	ldr	r3, [r7, #20]
 800d6c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d6cc:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	62bb      	str	r3, [r7, #40]	; 0x28
 800d6d2:	e019      	b.n	800d708 <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 800d6d4:	f3bf 8f5f 	dmb	sy
}
 800d6d8:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d6da:	6a3b      	ldr	r3, [r7, #32]
 800d6dc:	681b      	ldr	r3, [r3, #0]
 800d6de:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800d6e2:	6a3b      	ldr	r3, [r7, #32]
 800d6e4:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800d6e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6ee:	2b03      	cmp	r3, #3
 800d6f0:	d902      	bls.n	800d6f8 <ETH_Prepare_Tx_Descriptors+0x198>
 800d6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f4:	3b04      	subs	r3, #4
 800d6f6:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800d6f8:	697b      	ldr	r3, [r7, #20]
 800d6fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d6fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d700:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 800d702:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d704:	3301      	adds	r3, #1
 800d706:	62bb      	str	r3, [r7, #40]	; 0x28
 800d708:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d70a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d70c:	429a      	cmp	r2, r3
 800d70e:	d3e1      	bcc.n	800d6d4 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 800d710:	2302      	movs	r3, #2
 800d712:	e051      	b.n	800d7b8 <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 800d714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d716:	3301      	adds	r3, #1
 800d718:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800d71a:	69fb      	ldr	r3, [r7, #28]
 800d71c:	689b      	ldr	r3, [r3, #8]
 800d71e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	461a      	mov	r2, r3
 800d726:	6a3b      	ldr	r3, [r7, #32]
 800d728:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800d72a:	6a3b      	ldr	r3, [r7, #32]
 800d72c:	685a      	ldr	r2, [r3, #4]
 800d72e:	4b25      	ldr	r3, [pc, #148]	; (800d7c4 <ETH_Prepare_Tx_Descriptors+0x264>)
 800d730:	4013      	ands	r3, r2
 800d732:	69fa      	ldr	r2, [r7, #28]
 800d734:	6852      	ldr	r2, [r2, #4]
 800d736:	431a      	orrs	r2, r3
 800d738:	6a3b      	ldr	r3, [r7, #32]
 800d73a:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	3301      	adds	r3, #1
 800d740:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 800d742:	f3bf 8f5f 	dmb	sy
}
 800d746:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800d748:	6a3b      	ldr	r3, [r7, #32]
 800d74a:	681b      	ldr	r3, [r3, #0]
 800d74c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800d750:	6a3b      	ldr	r3, [r7, #32]
 800d752:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800d754:	69fb      	ldr	r3, [r7, #28]
 800d756:	689b      	ldr	r3, [r3, #8]
 800d758:	2b00      	cmp	r3, #0
 800d75a:	f47f af78 	bne.w	800d64e <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 800d75e:	687b      	ldr	r3, [r7, #4]
 800d760:	2b00      	cmp	r3, #0
 800d762:	d006      	beq.n	800d772 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	681b      	ldr	r3, [r3, #0]
 800d768:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	601a      	str	r2, [r3, #0]
 800d770:	e005      	b.n	800d77e <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800d772:	6a3b      	ldr	r3, [r7, #32]
 800d774:	681b      	ldr	r3, [r3, #0]
 800d776:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800d77a:	6a3b      	ldr	r3, [r7, #32]
 800d77c:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 800d77e:	6a3b      	ldr	r3, [r7, #32]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800d786:	6a3b      	ldr	r3, [r7, #32]
 800d788:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800d78a:	697b      	ldr	r3, [r7, #20]
 800d78c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d78e:	6979      	ldr	r1, [r7, #20]
 800d790:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d792:	3304      	adds	r3, #4
 800d794:	009b      	lsls	r3, r3, #2
 800d796:	440b      	add	r3, r1
 800d798:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800d79a:	697b      	ldr	r3, [r7, #20]
 800d79c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d79e:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 800d7a0:	b672      	cpsid	i
}
 800d7a2:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 800d7a4:	697b      	ldr	r3, [r7, #20]
 800d7a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d7a8:	69bb      	ldr	r3, [r7, #24]
 800d7aa:	4413      	add	r3, r2
 800d7ac:	1c5a      	adds	r2, r3, #1
 800d7ae:	697b      	ldr	r3, [r7, #20]
 800d7b0:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 800d7b2:	b662      	cpsie	i
}
 800d7b4:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800d7b6:	2300      	movs	r3, #0
}
 800d7b8:	4618      	mov	r0, r3
 800d7ba:	3734      	adds	r7, #52	; 0x34
 800d7bc:	46bd      	mov	sp, r7
 800d7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7c2:	4770      	bx	lr
 800d7c4:	ffffe000 	.word	0xffffe000

0800d7c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800d7c8:	b480      	push	{r7}
 800d7ca:	b089      	sub	sp, #36	; 0x24
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
 800d7d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800d7d2:	2300      	movs	r3, #0
 800d7d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800d7d6:	2300      	movs	r3, #0
 800d7d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800d7da:	2300      	movs	r3, #0
 800d7dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800d7e2:	2300      	movs	r3, #0
 800d7e4:	61fb      	str	r3, [r7, #28]
 800d7e6:	e175      	b.n	800dad4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800d7e8:	2201      	movs	r2, #1
 800d7ea:	69fb      	ldr	r3, [r7, #28]
 800d7ec:	fa02 f303 	lsl.w	r3, r2, r3
 800d7f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800d7f2:	683b      	ldr	r3, [r7, #0]
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	697a      	ldr	r2, [r7, #20]
 800d7f8:	4013      	ands	r3, r2
 800d7fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800d7fc:	693a      	ldr	r2, [r7, #16]
 800d7fe:	697b      	ldr	r3, [r7, #20]
 800d800:	429a      	cmp	r2, r3
 800d802:	f040 8164 	bne.w	800dace <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d806:	683b      	ldr	r3, [r7, #0]
 800d808:	685b      	ldr	r3, [r3, #4]
 800d80a:	f003 0303 	and.w	r3, r3, #3
 800d80e:	2b01      	cmp	r3, #1
 800d810:	d005      	beq.n	800d81e <HAL_GPIO_Init+0x56>
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	685b      	ldr	r3, [r3, #4]
 800d816:	f003 0303 	and.w	r3, r3, #3
 800d81a:	2b02      	cmp	r3, #2
 800d81c:	d130      	bne.n	800d880 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	689b      	ldr	r3, [r3, #8]
 800d822:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800d824:	69fb      	ldr	r3, [r7, #28]
 800d826:	005b      	lsls	r3, r3, #1
 800d828:	2203      	movs	r2, #3
 800d82a:	fa02 f303 	lsl.w	r3, r2, r3
 800d82e:	43db      	mvns	r3, r3
 800d830:	69ba      	ldr	r2, [r7, #24]
 800d832:	4013      	ands	r3, r2
 800d834:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800d836:	683b      	ldr	r3, [r7, #0]
 800d838:	68da      	ldr	r2, [r3, #12]
 800d83a:	69fb      	ldr	r3, [r7, #28]
 800d83c:	005b      	lsls	r3, r3, #1
 800d83e:	fa02 f303 	lsl.w	r3, r2, r3
 800d842:	69ba      	ldr	r2, [r7, #24]
 800d844:	4313      	orrs	r3, r2
 800d846:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d848:	687b      	ldr	r3, [r7, #4]
 800d84a:	69ba      	ldr	r2, [r7, #24]
 800d84c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d84e:	687b      	ldr	r3, [r7, #4]
 800d850:	685b      	ldr	r3, [r3, #4]
 800d852:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d854:	2201      	movs	r2, #1
 800d856:	69fb      	ldr	r3, [r7, #28]
 800d858:	fa02 f303 	lsl.w	r3, r2, r3
 800d85c:	43db      	mvns	r3, r3
 800d85e:	69ba      	ldr	r2, [r7, #24]
 800d860:	4013      	ands	r3, r2
 800d862:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d864:	683b      	ldr	r3, [r7, #0]
 800d866:	685b      	ldr	r3, [r3, #4]
 800d868:	091b      	lsrs	r3, r3, #4
 800d86a:	f003 0201 	and.w	r2, r3, #1
 800d86e:	69fb      	ldr	r3, [r7, #28]
 800d870:	fa02 f303 	lsl.w	r3, r2, r3
 800d874:	69ba      	ldr	r2, [r7, #24]
 800d876:	4313      	orrs	r3, r2
 800d878:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d87a:	687b      	ldr	r3, [r7, #4]
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d880:	683b      	ldr	r3, [r7, #0]
 800d882:	685b      	ldr	r3, [r3, #4]
 800d884:	f003 0303 	and.w	r3, r3, #3
 800d888:	2b03      	cmp	r3, #3
 800d88a:	d017      	beq.n	800d8bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d88c:	687b      	ldr	r3, [r7, #4]
 800d88e:	68db      	ldr	r3, [r3, #12]
 800d890:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 800d892:	69fb      	ldr	r3, [r7, #28]
 800d894:	005b      	lsls	r3, r3, #1
 800d896:	2203      	movs	r2, #3
 800d898:	fa02 f303 	lsl.w	r3, r2, r3
 800d89c:	43db      	mvns	r3, r3
 800d89e:	69ba      	ldr	r2, [r7, #24]
 800d8a0:	4013      	ands	r3, r2
 800d8a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 800d8a4:	683b      	ldr	r3, [r7, #0]
 800d8a6:	689a      	ldr	r2, [r3, #8]
 800d8a8:	69fb      	ldr	r3, [r7, #28]
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	fa02 f303 	lsl.w	r3, r2, r3
 800d8b0:	69ba      	ldr	r2, [r7, #24]
 800d8b2:	4313      	orrs	r3, r2
 800d8b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	69ba      	ldr	r2, [r7, #24]
 800d8ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d8bc:	683b      	ldr	r3, [r7, #0]
 800d8be:	685b      	ldr	r3, [r3, #4]
 800d8c0:	f003 0303 	and.w	r3, r3, #3
 800d8c4:	2b02      	cmp	r3, #2
 800d8c6:	d123      	bne.n	800d910 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800d8c8:	69fb      	ldr	r3, [r7, #28]
 800d8ca:	08da      	lsrs	r2, r3, #3
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	3208      	adds	r2, #8
 800d8d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d8d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800d8d6:	69fb      	ldr	r3, [r7, #28]
 800d8d8:	f003 0307 	and.w	r3, r3, #7
 800d8dc:	009b      	lsls	r3, r3, #2
 800d8de:	220f      	movs	r2, #15
 800d8e0:	fa02 f303 	lsl.w	r3, r2, r3
 800d8e4:	43db      	mvns	r3, r3
 800d8e6:	69ba      	ldr	r2, [r7, #24]
 800d8e8:	4013      	ands	r3, r2
 800d8ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 800d8ec:	683b      	ldr	r3, [r7, #0]
 800d8ee:	691a      	ldr	r2, [r3, #16]
 800d8f0:	69fb      	ldr	r3, [r7, #28]
 800d8f2:	f003 0307 	and.w	r3, r3, #7
 800d8f6:	009b      	lsls	r3, r3, #2
 800d8f8:	fa02 f303 	lsl.w	r3, r2, r3
 800d8fc:	69ba      	ldr	r2, [r7, #24]
 800d8fe:	4313      	orrs	r3, r2
 800d900:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800d902:	69fb      	ldr	r3, [r7, #28]
 800d904:	08da      	lsrs	r2, r3, #3
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	3208      	adds	r2, #8
 800d90a:	69b9      	ldr	r1, [r7, #24]
 800d90c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800d916:	69fb      	ldr	r3, [r7, #28]
 800d918:	005b      	lsls	r3, r3, #1
 800d91a:	2203      	movs	r2, #3
 800d91c:	fa02 f303 	lsl.w	r3, r2, r3
 800d920:	43db      	mvns	r3, r3
 800d922:	69ba      	ldr	r2, [r7, #24]
 800d924:	4013      	ands	r3, r2
 800d926:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800d928:	683b      	ldr	r3, [r7, #0]
 800d92a:	685b      	ldr	r3, [r3, #4]
 800d92c:	f003 0203 	and.w	r2, r3, #3
 800d930:	69fb      	ldr	r3, [r7, #28]
 800d932:	005b      	lsls	r3, r3, #1
 800d934:	fa02 f303 	lsl.w	r3, r2, r3
 800d938:	69ba      	ldr	r2, [r7, #24]
 800d93a:	4313      	orrs	r3, r2
 800d93c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	69ba      	ldr	r2, [r7, #24]
 800d942:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	685b      	ldr	r3, [r3, #4]
 800d948:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	f000 80be 	beq.w	800dace <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d952:	4b66      	ldr	r3, [pc, #408]	; (800daec <HAL_GPIO_Init+0x324>)
 800d954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d956:	4a65      	ldr	r2, [pc, #404]	; (800daec <HAL_GPIO_Init+0x324>)
 800d958:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800d95c:	6453      	str	r3, [r2, #68]	; 0x44
 800d95e:	4b63      	ldr	r3, [pc, #396]	; (800daec <HAL_GPIO_Init+0x324>)
 800d960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d962:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800d966:	60fb      	str	r3, [r7, #12]
 800d968:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800d96a:	4a61      	ldr	r2, [pc, #388]	; (800daf0 <HAL_GPIO_Init+0x328>)
 800d96c:	69fb      	ldr	r3, [r7, #28]
 800d96e:	089b      	lsrs	r3, r3, #2
 800d970:	3302      	adds	r3, #2
 800d972:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d976:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800d978:	69fb      	ldr	r3, [r7, #28]
 800d97a:	f003 0303 	and.w	r3, r3, #3
 800d97e:	009b      	lsls	r3, r3, #2
 800d980:	220f      	movs	r2, #15
 800d982:	fa02 f303 	lsl.w	r3, r2, r3
 800d986:	43db      	mvns	r3, r3
 800d988:	69ba      	ldr	r2, [r7, #24]
 800d98a:	4013      	ands	r3, r2
 800d98c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	4a58      	ldr	r2, [pc, #352]	; (800daf4 <HAL_GPIO_Init+0x32c>)
 800d992:	4293      	cmp	r3, r2
 800d994:	d037      	beq.n	800da06 <HAL_GPIO_Init+0x23e>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a57      	ldr	r2, [pc, #348]	; (800daf8 <HAL_GPIO_Init+0x330>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d031      	beq.n	800da02 <HAL_GPIO_Init+0x23a>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a56      	ldr	r2, [pc, #344]	; (800dafc <HAL_GPIO_Init+0x334>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d02b      	beq.n	800d9fe <HAL_GPIO_Init+0x236>
 800d9a6:	687b      	ldr	r3, [r7, #4]
 800d9a8:	4a55      	ldr	r2, [pc, #340]	; (800db00 <HAL_GPIO_Init+0x338>)
 800d9aa:	4293      	cmp	r3, r2
 800d9ac:	d025      	beq.n	800d9fa <HAL_GPIO_Init+0x232>
 800d9ae:	687b      	ldr	r3, [r7, #4]
 800d9b0:	4a54      	ldr	r2, [pc, #336]	; (800db04 <HAL_GPIO_Init+0x33c>)
 800d9b2:	4293      	cmp	r3, r2
 800d9b4:	d01f      	beq.n	800d9f6 <HAL_GPIO_Init+0x22e>
 800d9b6:	687b      	ldr	r3, [r7, #4]
 800d9b8:	4a53      	ldr	r2, [pc, #332]	; (800db08 <HAL_GPIO_Init+0x340>)
 800d9ba:	4293      	cmp	r3, r2
 800d9bc:	d019      	beq.n	800d9f2 <HAL_GPIO_Init+0x22a>
 800d9be:	687b      	ldr	r3, [r7, #4]
 800d9c0:	4a52      	ldr	r2, [pc, #328]	; (800db0c <HAL_GPIO_Init+0x344>)
 800d9c2:	4293      	cmp	r3, r2
 800d9c4:	d013      	beq.n	800d9ee <HAL_GPIO_Init+0x226>
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	4a51      	ldr	r2, [pc, #324]	; (800db10 <HAL_GPIO_Init+0x348>)
 800d9ca:	4293      	cmp	r3, r2
 800d9cc:	d00d      	beq.n	800d9ea <HAL_GPIO_Init+0x222>
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	4a50      	ldr	r2, [pc, #320]	; (800db14 <HAL_GPIO_Init+0x34c>)
 800d9d2:	4293      	cmp	r3, r2
 800d9d4:	d007      	beq.n	800d9e6 <HAL_GPIO_Init+0x21e>
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	4a4f      	ldr	r2, [pc, #316]	; (800db18 <HAL_GPIO_Init+0x350>)
 800d9da:	4293      	cmp	r3, r2
 800d9dc:	d101      	bne.n	800d9e2 <HAL_GPIO_Init+0x21a>
 800d9de:	2309      	movs	r3, #9
 800d9e0:	e012      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9e2:	230a      	movs	r3, #10
 800d9e4:	e010      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9e6:	2308      	movs	r3, #8
 800d9e8:	e00e      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9ea:	2307      	movs	r3, #7
 800d9ec:	e00c      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9ee:	2306      	movs	r3, #6
 800d9f0:	e00a      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9f2:	2305      	movs	r3, #5
 800d9f4:	e008      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9f6:	2304      	movs	r3, #4
 800d9f8:	e006      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9fa:	2303      	movs	r3, #3
 800d9fc:	e004      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800d9fe:	2302      	movs	r3, #2
 800da00:	e002      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800da02:	2301      	movs	r3, #1
 800da04:	e000      	b.n	800da08 <HAL_GPIO_Init+0x240>
 800da06:	2300      	movs	r3, #0
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	f002 0203 	and.w	r2, r2, #3
 800da0e:	0092      	lsls	r2, r2, #2
 800da10:	4093      	lsls	r3, r2
 800da12:	69ba      	ldr	r2, [r7, #24]
 800da14:	4313      	orrs	r3, r2
 800da16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800da18:	4935      	ldr	r1, [pc, #212]	; (800daf0 <HAL_GPIO_Init+0x328>)
 800da1a:	69fb      	ldr	r3, [r7, #28]
 800da1c:	089b      	lsrs	r3, r3, #2
 800da1e:	3302      	adds	r3, #2
 800da20:	69ba      	ldr	r2, [r7, #24]
 800da22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800da26:	4b3d      	ldr	r3, [pc, #244]	; (800db1c <HAL_GPIO_Init+0x354>)
 800da28:	689b      	ldr	r3, [r3, #8]
 800da2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800da2c:	693b      	ldr	r3, [r7, #16]
 800da2e:	43db      	mvns	r3, r3
 800da30:	69ba      	ldr	r2, [r7, #24]
 800da32:	4013      	ands	r3, r2
 800da34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800da36:	683b      	ldr	r3, [r7, #0]
 800da38:	685b      	ldr	r3, [r3, #4]
 800da3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800da3e:	2b00      	cmp	r3, #0
 800da40:	d003      	beq.n	800da4a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800da42:	69ba      	ldr	r2, [r7, #24]
 800da44:	693b      	ldr	r3, [r7, #16]
 800da46:	4313      	orrs	r3, r2
 800da48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800da4a:	4a34      	ldr	r2, [pc, #208]	; (800db1c <HAL_GPIO_Init+0x354>)
 800da4c:	69bb      	ldr	r3, [r7, #24]
 800da4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800da50:	4b32      	ldr	r3, [pc, #200]	; (800db1c <HAL_GPIO_Init+0x354>)
 800da52:	68db      	ldr	r3, [r3, #12]
 800da54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800da56:	693b      	ldr	r3, [r7, #16]
 800da58:	43db      	mvns	r3, r3
 800da5a:	69ba      	ldr	r2, [r7, #24]
 800da5c:	4013      	ands	r3, r2
 800da5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	685b      	ldr	r3, [r3, #4]
 800da64:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d003      	beq.n	800da74 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800da6c:	69ba      	ldr	r2, [r7, #24]
 800da6e:	693b      	ldr	r3, [r7, #16]
 800da70:	4313      	orrs	r3, r2
 800da72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800da74:	4a29      	ldr	r2, [pc, #164]	; (800db1c <HAL_GPIO_Init+0x354>)
 800da76:	69bb      	ldr	r3, [r7, #24]
 800da78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800da7a:	4b28      	ldr	r3, [pc, #160]	; (800db1c <HAL_GPIO_Init+0x354>)
 800da7c:	685b      	ldr	r3, [r3, #4]
 800da7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800da80:	693b      	ldr	r3, [r7, #16]
 800da82:	43db      	mvns	r3, r3
 800da84:	69ba      	ldr	r2, [r7, #24]
 800da86:	4013      	ands	r3, r2
 800da88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800da8a:	683b      	ldr	r3, [r7, #0]
 800da8c:	685b      	ldr	r3, [r3, #4]
 800da8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800da92:	2b00      	cmp	r3, #0
 800da94:	d003      	beq.n	800da9e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800da96:	69ba      	ldr	r2, [r7, #24]
 800da98:	693b      	ldr	r3, [r7, #16]
 800da9a:	4313      	orrs	r3, r2
 800da9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800da9e:	4a1f      	ldr	r2, [pc, #124]	; (800db1c <HAL_GPIO_Init+0x354>)
 800daa0:	69bb      	ldr	r3, [r7, #24]
 800daa2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800daa4:	4b1d      	ldr	r3, [pc, #116]	; (800db1c <HAL_GPIO_Init+0x354>)
 800daa6:	681b      	ldr	r3, [r3, #0]
 800daa8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800daaa:	693b      	ldr	r3, [r7, #16]
 800daac:	43db      	mvns	r3, r3
 800daae:	69ba      	ldr	r2, [r7, #24]
 800dab0:	4013      	ands	r3, r2
 800dab2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800dab4:	683b      	ldr	r3, [r7, #0]
 800dab6:	685b      	ldr	r3, [r3, #4]
 800dab8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dabc:	2b00      	cmp	r3, #0
 800dabe:	d003      	beq.n	800dac8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800dac0:	69ba      	ldr	r2, [r7, #24]
 800dac2:	693b      	ldr	r3, [r7, #16]
 800dac4:	4313      	orrs	r3, r2
 800dac6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800dac8:	4a14      	ldr	r2, [pc, #80]	; (800db1c <HAL_GPIO_Init+0x354>)
 800daca:	69bb      	ldr	r3, [r7, #24]
 800dacc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	3301      	adds	r3, #1
 800dad2:	61fb      	str	r3, [r7, #28]
 800dad4:	69fb      	ldr	r3, [r7, #28]
 800dad6:	2b0f      	cmp	r3, #15
 800dad8:	f67f ae86 	bls.w	800d7e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 800dadc:	bf00      	nop
 800dade:	bf00      	nop
 800dae0:	3724      	adds	r7, #36	; 0x24
 800dae2:	46bd      	mov	sp, r7
 800dae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dae8:	4770      	bx	lr
 800daea:	bf00      	nop
 800daec:	40023800 	.word	0x40023800
 800daf0:	40013800 	.word	0x40013800
 800daf4:	40020000 	.word	0x40020000
 800daf8:	40020400 	.word	0x40020400
 800dafc:	40020800 	.word	0x40020800
 800db00:	40020c00 	.word	0x40020c00
 800db04:	40021000 	.word	0x40021000
 800db08:	40021400 	.word	0x40021400
 800db0c:	40021800 	.word	0x40021800
 800db10:	40021c00 	.word	0x40021c00
 800db14:	40022000 	.word	0x40022000
 800db18:	40022400 	.word	0x40022400
 800db1c:	40013c00 	.word	0x40013c00

0800db20 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800db20:	b480      	push	{r7}
 800db22:	b085      	sub	sp, #20
 800db24:	af00      	add	r7, sp, #0
 800db26:	6078      	str	r0, [r7, #4]
 800db28:	460b      	mov	r3, r1
 800db2a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	691a      	ldr	r2, [r3, #16]
 800db30:	887b      	ldrh	r3, [r7, #2]
 800db32:	4013      	ands	r3, r2
 800db34:	2b00      	cmp	r3, #0
 800db36:	d002      	beq.n	800db3e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800db38:	2301      	movs	r3, #1
 800db3a:	73fb      	strb	r3, [r7, #15]
 800db3c:	e001      	b.n	800db42 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800db3e:	2300      	movs	r3, #0
 800db40:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800db42:	7bfb      	ldrb	r3, [r7, #15]
}
 800db44:	4618      	mov	r0, r3
 800db46:	3714      	adds	r7, #20
 800db48:	46bd      	mov	sp, r7
 800db4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4e:	4770      	bx	lr

0800db50 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800db50:	b480      	push	{r7}
 800db52:	b083      	sub	sp, #12
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	460b      	mov	r3, r1
 800db5a:	807b      	strh	r3, [r7, #2]
 800db5c:	4613      	mov	r3, r2
 800db5e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800db60:	787b      	ldrb	r3, [r7, #1]
 800db62:	2b00      	cmp	r3, #0
 800db64:	d003      	beq.n	800db6e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800db66:	887a      	ldrh	r2, [r7, #2]
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800db6c:	e003      	b.n	800db76 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800db6e:	887b      	ldrh	r3, [r7, #2]
 800db70:	041a      	lsls	r2, r3, #16
 800db72:	687b      	ldr	r3, [r7, #4]
 800db74:	619a      	str	r2, [r3, #24]
}
 800db76:	bf00      	nop
 800db78:	370c      	adds	r7, #12
 800db7a:	46bd      	mov	sp, r7
 800db7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db80:	4770      	bx	lr
	...

0800db84 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800db84:	b580      	push	{r7, lr}
 800db86:	b082      	sub	sp, #8
 800db88:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800db8a:	2300      	movs	r3, #0
 800db8c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800db8e:	4b23      	ldr	r3, [pc, #140]	; (800dc1c <HAL_PWREx_EnableOverDrive+0x98>)
 800db90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db92:	4a22      	ldr	r2, [pc, #136]	; (800dc1c <HAL_PWREx_EnableOverDrive+0x98>)
 800db94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800db98:	6413      	str	r3, [r2, #64]	; 0x40
 800db9a:	4b20      	ldr	r3, [pc, #128]	; (800dc1c <HAL_PWREx_EnableOverDrive+0x98>)
 800db9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dba2:	603b      	str	r3, [r7, #0]
 800dba4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800dba6:	4b1e      	ldr	r3, [pc, #120]	; (800dc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dba8:	681b      	ldr	r3, [r3, #0]
 800dbaa:	4a1d      	ldr	r2, [pc, #116]	; (800dc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dbac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dbb0:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dbb2:	f7fd fb31 	bl	800b218 <HAL_GetTick>
 800dbb6:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dbb8:	e009      	b.n	800dbce <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dbba:	f7fd fb2d 	bl	800b218 <HAL_GetTick>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	687b      	ldr	r3, [r7, #4]
 800dbc2:	1ad3      	subs	r3, r2, r3
 800dbc4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbc8:	d901      	bls.n	800dbce <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800dbca:	2303      	movs	r3, #3
 800dbcc:	e022      	b.n	800dc14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800dbce:	4b14      	ldr	r3, [pc, #80]	; (800dc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800dbd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dbda:	d1ee      	bne.n	800dbba <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800dbdc:	4b10      	ldr	r3, [pc, #64]	; (800dc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	4a0f      	ldr	r2, [pc, #60]	; (800dc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dbe2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dbe6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800dbe8:	f7fd fb16 	bl	800b218 <HAL_GetTick>
 800dbec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dbee:	e009      	b.n	800dc04 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800dbf0:	f7fd fb12 	bl	800b218 <HAL_GetTick>
 800dbf4:	4602      	mov	r2, r0
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	1ad3      	subs	r3, r2, r3
 800dbfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800dbfe:	d901      	bls.n	800dc04 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 800dc00:	2303      	movs	r3, #3
 800dc02:	e007      	b.n	800dc14 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800dc04:	4b06      	ldr	r3, [pc, #24]	; (800dc20 <HAL_PWREx_EnableOverDrive+0x9c>)
 800dc06:	685b      	ldr	r3, [r3, #4]
 800dc08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc0c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800dc10:	d1ee      	bne.n	800dbf0 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800dc12:	2300      	movs	r3, #0
}
 800dc14:	4618      	mov	r0, r3
 800dc16:	3708      	adds	r7, #8
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}
 800dc1c:	40023800 	.word	0x40023800
 800dc20:	40007000 	.word	0x40007000

0800dc24 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800dc24:	b580      	push	{r7, lr}
 800dc26:	b086      	sub	sp, #24
 800dc28:	af00      	add	r7, sp, #0
 800dc2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800dc2c:	2300      	movs	r3, #0
 800dc2e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800dc30:	687b      	ldr	r3, [r7, #4]
 800dc32:	2b00      	cmp	r3, #0
 800dc34:	d101      	bne.n	800dc3a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800dc36:	2301      	movs	r3, #1
 800dc38:	e291      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	681b      	ldr	r3, [r3, #0]
 800dc3e:	f003 0301 	and.w	r3, r3, #1
 800dc42:	2b00      	cmp	r3, #0
 800dc44:	f000 8087 	beq.w	800dd56 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800dc48:	4b96      	ldr	r3, [pc, #600]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dc4a:	689b      	ldr	r3, [r3, #8]
 800dc4c:	f003 030c 	and.w	r3, r3, #12
 800dc50:	2b04      	cmp	r3, #4
 800dc52:	d00c      	beq.n	800dc6e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800dc54:	4b93      	ldr	r3, [pc, #588]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dc56:	689b      	ldr	r3, [r3, #8]
 800dc58:	f003 030c 	and.w	r3, r3, #12
 800dc5c:	2b08      	cmp	r3, #8
 800dc5e:	d112      	bne.n	800dc86 <HAL_RCC_OscConfig+0x62>
 800dc60:	4b90      	ldr	r3, [pc, #576]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dc62:	685b      	ldr	r3, [r3, #4]
 800dc64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dc68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800dc6c:	d10b      	bne.n	800dc86 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dc6e:	4b8d      	ldr	r3, [pc, #564]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dc76:	2b00      	cmp	r3, #0
 800dc78:	d06c      	beq.n	800dd54 <HAL_RCC_OscConfig+0x130>
 800dc7a:	687b      	ldr	r3, [r7, #4]
 800dc7c:	685b      	ldr	r3, [r3, #4]
 800dc7e:	2b00      	cmp	r3, #0
 800dc80:	d168      	bne.n	800dd54 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800dc82:	2301      	movs	r3, #1
 800dc84:	e26b      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800dc86:	687b      	ldr	r3, [r7, #4]
 800dc88:	685b      	ldr	r3, [r3, #4]
 800dc8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800dc8e:	d106      	bne.n	800dc9e <HAL_RCC_OscConfig+0x7a>
 800dc90:	4b84      	ldr	r3, [pc, #528]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	4a83      	ldr	r2, [pc, #524]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dc96:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dc9a:	6013      	str	r3, [r2, #0]
 800dc9c:	e02e      	b.n	800dcfc <HAL_RCC_OscConfig+0xd8>
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	685b      	ldr	r3, [r3, #4]
 800dca2:	2b00      	cmp	r3, #0
 800dca4:	d10c      	bne.n	800dcc0 <HAL_RCC_OscConfig+0x9c>
 800dca6:	4b7f      	ldr	r3, [pc, #508]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a7e      	ldr	r2, [pc, #504]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcac:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcb0:	6013      	str	r3, [r2, #0]
 800dcb2:	4b7c      	ldr	r3, [pc, #496]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcb4:	681b      	ldr	r3, [r3, #0]
 800dcb6:	4a7b      	ldr	r2, [pc, #492]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcb8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcbc:	6013      	str	r3, [r2, #0]
 800dcbe:	e01d      	b.n	800dcfc <HAL_RCC_OscConfig+0xd8>
 800dcc0:	687b      	ldr	r3, [r7, #4]
 800dcc2:	685b      	ldr	r3, [r3, #4]
 800dcc4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800dcc8:	d10c      	bne.n	800dce4 <HAL_RCC_OscConfig+0xc0>
 800dcca:	4b76      	ldr	r3, [pc, #472]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dccc:	681b      	ldr	r3, [r3, #0]
 800dcce:	4a75      	ldr	r2, [pc, #468]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcd0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800dcd4:	6013      	str	r3, [r2, #0]
 800dcd6:	4b73      	ldr	r3, [pc, #460]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcd8:	681b      	ldr	r3, [r3, #0]
 800dcda:	4a72      	ldr	r2, [pc, #456]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcdc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800dce0:	6013      	str	r3, [r2, #0]
 800dce2:	e00b      	b.n	800dcfc <HAL_RCC_OscConfig+0xd8>
 800dce4:	4b6f      	ldr	r3, [pc, #444]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	4a6e      	ldr	r2, [pc, #440]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800dcee:	6013      	str	r3, [r2, #0]
 800dcf0:	4b6c      	ldr	r3, [pc, #432]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	4a6b      	ldr	r2, [pc, #428]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dcf6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800dcfa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800dcfc:	687b      	ldr	r3, [r7, #4]
 800dcfe:	685b      	ldr	r3, [r3, #4]
 800dd00:	2b00      	cmp	r3, #0
 800dd02:	d013      	beq.n	800dd2c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd04:	f7fd fa88 	bl	800b218 <HAL_GetTick>
 800dd08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd0a:	e008      	b.n	800dd1e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd0c:	f7fd fa84 	bl	800b218 <HAL_GetTick>
 800dd10:	4602      	mov	r2, r0
 800dd12:	693b      	ldr	r3, [r7, #16]
 800dd14:	1ad3      	subs	r3, r2, r3
 800dd16:	2b64      	cmp	r3, #100	; 0x64
 800dd18:	d901      	bls.n	800dd1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800dd1a:	2303      	movs	r3, #3
 800dd1c:	e21f      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800dd1e:	4b61      	ldr	r3, [pc, #388]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dd20:	681b      	ldr	r3, [r3, #0]
 800dd22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d0f0      	beq.n	800dd0c <HAL_RCC_OscConfig+0xe8>
 800dd2a:	e014      	b.n	800dd56 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800dd2c:	f7fd fa74 	bl	800b218 <HAL_GetTick>
 800dd30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd32:	e008      	b.n	800dd46 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800dd34:	f7fd fa70 	bl	800b218 <HAL_GetTick>
 800dd38:	4602      	mov	r2, r0
 800dd3a:	693b      	ldr	r3, [r7, #16]
 800dd3c:	1ad3      	subs	r3, r2, r3
 800dd3e:	2b64      	cmp	r3, #100	; 0x64
 800dd40:	d901      	bls.n	800dd46 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800dd42:	2303      	movs	r3, #3
 800dd44:	e20b      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800dd46:	4b57      	ldr	r3, [pc, #348]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800dd4e:	2b00      	cmp	r3, #0
 800dd50:	d1f0      	bne.n	800dd34 <HAL_RCC_OscConfig+0x110>
 800dd52:	e000      	b.n	800dd56 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800dd54:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800dd56:	687b      	ldr	r3, [r7, #4]
 800dd58:	681b      	ldr	r3, [r3, #0]
 800dd5a:	f003 0302 	and.w	r3, r3, #2
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d069      	beq.n	800de36 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800dd62:	4b50      	ldr	r3, [pc, #320]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dd64:	689b      	ldr	r3, [r3, #8]
 800dd66:	f003 030c 	and.w	r3, r3, #12
 800dd6a:	2b00      	cmp	r3, #0
 800dd6c:	d00b      	beq.n	800dd86 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800dd6e:	4b4d      	ldr	r3, [pc, #308]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dd70:	689b      	ldr	r3, [r3, #8]
 800dd72:	f003 030c 	and.w	r3, r3, #12
 800dd76:	2b08      	cmp	r3, #8
 800dd78:	d11c      	bne.n	800ddb4 <HAL_RCC_OscConfig+0x190>
 800dd7a:	4b4a      	ldr	r3, [pc, #296]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dd7c:	685b      	ldr	r3, [r3, #4]
 800dd7e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800dd82:	2b00      	cmp	r3, #0
 800dd84:	d116      	bne.n	800ddb4 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800dd86:	4b47      	ldr	r3, [pc, #284]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dd88:	681b      	ldr	r3, [r3, #0]
 800dd8a:	f003 0302 	and.w	r3, r3, #2
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d005      	beq.n	800dd9e <HAL_RCC_OscConfig+0x17a>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68db      	ldr	r3, [r3, #12]
 800dd96:	2b01      	cmp	r3, #1
 800dd98:	d001      	beq.n	800dd9e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800dd9a:	2301      	movs	r3, #1
 800dd9c:	e1df      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800dd9e:	4b41      	ldr	r3, [pc, #260]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dda0:	681b      	ldr	r3, [r3, #0]
 800dda2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800dda6:	687b      	ldr	r3, [r7, #4]
 800dda8:	691b      	ldr	r3, [r3, #16]
 800ddaa:	00db      	lsls	r3, r3, #3
 800ddac:	493d      	ldr	r1, [pc, #244]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800ddae:	4313      	orrs	r3, r2
 800ddb0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800ddb2:	e040      	b.n	800de36 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800ddb4:	687b      	ldr	r3, [r7, #4]
 800ddb6:	68db      	ldr	r3, [r3, #12]
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d023      	beq.n	800de04 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800ddbc:	4b39      	ldr	r3, [pc, #228]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800ddbe:	681b      	ldr	r3, [r3, #0]
 800ddc0:	4a38      	ldr	r2, [pc, #224]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800ddc2:	f043 0301 	orr.w	r3, r3, #1
 800ddc6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ddc8:	f7fd fa26 	bl	800b218 <HAL_GetTick>
 800ddcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800ddce:	e008      	b.n	800dde2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800ddd0:	f7fd fa22 	bl	800b218 <HAL_GetTick>
 800ddd4:	4602      	mov	r2, r0
 800ddd6:	693b      	ldr	r3, [r7, #16]
 800ddd8:	1ad3      	subs	r3, r2, r3
 800ddda:	2b02      	cmp	r3, #2
 800dddc:	d901      	bls.n	800dde2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 800ddde:	2303      	movs	r3, #3
 800dde0:	e1bd      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800dde2:	4b30      	ldr	r3, [pc, #192]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	f003 0302 	and.w	r3, r3, #2
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d0f0      	beq.n	800ddd0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800ddee:	4b2d      	ldr	r3, [pc, #180]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800ddf0:	681b      	ldr	r3, [r3, #0]
 800ddf2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800ddf6:	687b      	ldr	r3, [r7, #4]
 800ddf8:	691b      	ldr	r3, [r3, #16]
 800ddfa:	00db      	lsls	r3, r3, #3
 800ddfc:	4929      	ldr	r1, [pc, #164]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800ddfe:	4313      	orrs	r3, r2
 800de00:	600b      	str	r3, [r1, #0]
 800de02:	e018      	b.n	800de36 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800de04:	4b27      	ldr	r3, [pc, #156]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	4a26      	ldr	r2, [pc, #152]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de0a:	f023 0301 	bic.w	r3, r3, #1
 800de0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800de10:	f7fd fa02 	bl	800b218 <HAL_GetTick>
 800de14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de16:	e008      	b.n	800de2a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800de18:	f7fd f9fe 	bl	800b218 <HAL_GetTick>
 800de1c:	4602      	mov	r2, r0
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	1ad3      	subs	r3, r2, r3
 800de22:	2b02      	cmp	r3, #2
 800de24:	d901      	bls.n	800de2a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800de26:	2303      	movs	r3, #3
 800de28:	e199      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800de2a:	4b1e      	ldr	r3, [pc, #120]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de2c:	681b      	ldr	r3, [r3, #0]
 800de2e:	f003 0302 	and.w	r3, r3, #2
 800de32:	2b00      	cmp	r3, #0
 800de34:	d1f0      	bne.n	800de18 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	681b      	ldr	r3, [r3, #0]
 800de3a:	f003 0308 	and.w	r3, r3, #8
 800de3e:	2b00      	cmp	r3, #0
 800de40:	d038      	beq.n	800deb4 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	695b      	ldr	r3, [r3, #20]
 800de46:	2b00      	cmp	r3, #0
 800de48:	d019      	beq.n	800de7e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800de4a:	4b16      	ldr	r3, [pc, #88]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de4e:	4a15      	ldr	r2, [pc, #84]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de50:	f043 0301 	orr.w	r3, r3, #1
 800de54:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de56:	f7fd f9df 	bl	800b218 <HAL_GetTick>
 800de5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de5c:	e008      	b.n	800de70 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de5e:	f7fd f9db 	bl	800b218 <HAL_GetTick>
 800de62:	4602      	mov	r2, r0
 800de64:	693b      	ldr	r3, [r7, #16]
 800de66:	1ad3      	subs	r3, r2, r3
 800de68:	2b02      	cmp	r3, #2
 800de6a:	d901      	bls.n	800de70 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800de6c:	2303      	movs	r3, #3
 800de6e:	e176      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800de70:	4b0c      	ldr	r3, [pc, #48]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de74:	f003 0302 	and.w	r3, r3, #2
 800de78:	2b00      	cmp	r3, #0
 800de7a:	d0f0      	beq.n	800de5e <HAL_RCC_OscConfig+0x23a>
 800de7c:	e01a      	b.n	800deb4 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800de7e:	4b09      	ldr	r3, [pc, #36]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de82:	4a08      	ldr	r2, [pc, #32]	; (800dea4 <HAL_RCC_OscConfig+0x280>)
 800de84:	f023 0301 	bic.w	r3, r3, #1
 800de88:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800de8a:	f7fd f9c5 	bl	800b218 <HAL_GetTick>
 800de8e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800de90:	e00a      	b.n	800dea8 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800de92:	f7fd f9c1 	bl	800b218 <HAL_GetTick>
 800de96:	4602      	mov	r2, r0
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	1ad3      	subs	r3, r2, r3
 800de9c:	2b02      	cmp	r3, #2
 800de9e:	d903      	bls.n	800dea8 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800dea0:	2303      	movs	r3, #3
 800dea2:	e15c      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
 800dea4:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800dea8:	4b91      	ldr	r3, [pc, #580]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800deaa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800deac:	f003 0302 	and.w	r3, r3, #2
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	d1ee      	bne.n	800de92 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800deb4:	687b      	ldr	r3, [r7, #4]
 800deb6:	681b      	ldr	r3, [r3, #0]
 800deb8:	f003 0304 	and.w	r3, r3, #4
 800debc:	2b00      	cmp	r3, #0
 800debe:	f000 80a4 	beq.w	800e00a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800dec2:	4b8b      	ldr	r3, [pc, #556]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800dec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dec6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800deca:	2b00      	cmp	r3, #0
 800decc:	d10d      	bne.n	800deea <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 800dece:	4b88      	ldr	r3, [pc, #544]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800ded0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ded2:	4a87      	ldr	r2, [pc, #540]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800ded4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ded8:	6413      	str	r3, [r2, #64]	; 0x40
 800deda:	4b85      	ldr	r3, [pc, #532]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800dedc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800dee2:	60bb      	str	r3, [r7, #8]
 800dee4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800dee6:	2301      	movs	r3, #1
 800dee8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800deea:	4b82      	ldr	r3, [pc, #520]	; (800e0f4 <HAL_RCC_OscConfig+0x4d0>)
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800def2:	2b00      	cmp	r3, #0
 800def4:	d118      	bne.n	800df28 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800def6:	4b7f      	ldr	r3, [pc, #508]	; (800e0f4 <HAL_RCC_OscConfig+0x4d0>)
 800def8:	681b      	ldr	r3, [r3, #0]
 800defa:	4a7e      	ldr	r2, [pc, #504]	; (800e0f4 <HAL_RCC_OscConfig+0x4d0>)
 800defc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800df00:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800df02:	f7fd f989 	bl	800b218 <HAL_GetTick>
 800df06:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800df08:	e008      	b.n	800df1c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800df0a:	f7fd f985 	bl	800b218 <HAL_GetTick>
 800df0e:	4602      	mov	r2, r0
 800df10:	693b      	ldr	r3, [r7, #16]
 800df12:	1ad3      	subs	r3, r2, r3
 800df14:	2b64      	cmp	r3, #100	; 0x64
 800df16:	d901      	bls.n	800df1c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800df18:	2303      	movs	r3, #3
 800df1a:	e120      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800df1c:	4b75      	ldr	r3, [pc, #468]	; (800e0f4 <HAL_RCC_OscConfig+0x4d0>)
 800df1e:	681b      	ldr	r3, [r3, #0]
 800df20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800df24:	2b00      	cmp	r3, #0
 800df26:	d0f0      	beq.n	800df0a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	689b      	ldr	r3, [r3, #8]
 800df2c:	2b01      	cmp	r3, #1
 800df2e:	d106      	bne.n	800df3e <HAL_RCC_OscConfig+0x31a>
 800df30:	4b6f      	ldr	r3, [pc, #444]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df34:	4a6e      	ldr	r2, [pc, #440]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df36:	f043 0301 	orr.w	r3, r3, #1
 800df3a:	6713      	str	r3, [r2, #112]	; 0x70
 800df3c:	e02d      	b.n	800df9a <HAL_RCC_OscConfig+0x376>
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	689b      	ldr	r3, [r3, #8]
 800df42:	2b00      	cmp	r3, #0
 800df44:	d10c      	bne.n	800df60 <HAL_RCC_OscConfig+0x33c>
 800df46:	4b6a      	ldr	r3, [pc, #424]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df4a:	4a69      	ldr	r2, [pc, #420]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df4c:	f023 0301 	bic.w	r3, r3, #1
 800df50:	6713      	str	r3, [r2, #112]	; 0x70
 800df52:	4b67      	ldr	r3, [pc, #412]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df56:	4a66      	ldr	r2, [pc, #408]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df58:	f023 0304 	bic.w	r3, r3, #4
 800df5c:	6713      	str	r3, [r2, #112]	; 0x70
 800df5e:	e01c      	b.n	800df9a <HAL_RCC_OscConfig+0x376>
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	689b      	ldr	r3, [r3, #8]
 800df64:	2b05      	cmp	r3, #5
 800df66:	d10c      	bne.n	800df82 <HAL_RCC_OscConfig+0x35e>
 800df68:	4b61      	ldr	r3, [pc, #388]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df6c:	4a60      	ldr	r2, [pc, #384]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df6e:	f043 0304 	orr.w	r3, r3, #4
 800df72:	6713      	str	r3, [r2, #112]	; 0x70
 800df74:	4b5e      	ldr	r3, [pc, #376]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df78:	4a5d      	ldr	r2, [pc, #372]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df7a:	f043 0301 	orr.w	r3, r3, #1
 800df7e:	6713      	str	r3, [r2, #112]	; 0x70
 800df80:	e00b      	b.n	800df9a <HAL_RCC_OscConfig+0x376>
 800df82:	4b5b      	ldr	r3, [pc, #364]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df86:	4a5a      	ldr	r2, [pc, #360]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df88:	f023 0301 	bic.w	r3, r3, #1
 800df8c:	6713      	str	r3, [r2, #112]	; 0x70
 800df8e:	4b58      	ldr	r3, [pc, #352]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800df92:	4a57      	ldr	r2, [pc, #348]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800df94:	f023 0304 	bic.w	r3, r3, #4
 800df98:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	689b      	ldr	r3, [r3, #8]
 800df9e:	2b00      	cmp	r3, #0
 800dfa0:	d015      	beq.n	800dfce <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfa2:	f7fd f939 	bl	800b218 <HAL_GetTick>
 800dfa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfa8:	e00a      	b.n	800dfc0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfaa:	f7fd f935 	bl	800b218 <HAL_GetTick>
 800dfae:	4602      	mov	r2, r0
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	1ad3      	subs	r3, r2, r3
 800dfb4:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfb8:	4293      	cmp	r3, r2
 800dfba:	d901      	bls.n	800dfc0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800dfbc:	2303      	movs	r3, #3
 800dfbe:	e0ce      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800dfc0:	4b4b      	ldr	r3, [pc, #300]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800dfc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfc4:	f003 0302 	and.w	r3, r3, #2
 800dfc8:	2b00      	cmp	r3, #0
 800dfca:	d0ee      	beq.n	800dfaa <HAL_RCC_OscConfig+0x386>
 800dfcc:	e014      	b.n	800dff8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800dfce:	f7fd f923 	bl	800b218 <HAL_GetTick>
 800dfd2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dfd4:	e00a      	b.n	800dfec <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800dfd6:	f7fd f91f 	bl	800b218 <HAL_GetTick>
 800dfda:	4602      	mov	r2, r0
 800dfdc:	693b      	ldr	r3, [r7, #16]
 800dfde:	1ad3      	subs	r3, r2, r3
 800dfe0:	f241 3288 	movw	r2, #5000	; 0x1388
 800dfe4:	4293      	cmp	r3, r2
 800dfe6:	d901      	bls.n	800dfec <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 800dfe8:	2303      	movs	r3, #3
 800dfea:	e0b8      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800dfec:	4b40      	ldr	r3, [pc, #256]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800dfee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dff0:	f003 0302 	and.w	r3, r3, #2
 800dff4:	2b00      	cmp	r3, #0
 800dff6:	d1ee      	bne.n	800dfd6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800dff8:	7dfb      	ldrb	r3, [r7, #23]
 800dffa:	2b01      	cmp	r3, #1
 800dffc:	d105      	bne.n	800e00a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800dffe:	4b3c      	ldr	r3, [pc, #240]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e000:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e002:	4a3b      	ldr	r2, [pc, #236]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e004:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800e008:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	699b      	ldr	r3, [r3, #24]
 800e00e:	2b00      	cmp	r3, #0
 800e010:	f000 80a4 	beq.w	800e15c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800e014:	4b36      	ldr	r3, [pc, #216]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e016:	689b      	ldr	r3, [r3, #8]
 800e018:	f003 030c 	and.w	r3, r3, #12
 800e01c:	2b08      	cmp	r3, #8
 800e01e:	d06b      	beq.n	800e0f8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	699b      	ldr	r3, [r3, #24]
 800e024:	2b02      	cmp	r3, #2
 800e026:	d149      	bne.n	800e0bc <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e028:	4b31      	ldr	r3, [pc, #196]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	4a30      	ldr	r2, [pc, #192]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e02e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e034:	f7fd f8f0 	bl	800b218 <HAL_GetTick>
 800e038:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e03a:	e008      	b.n	800e04e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e03c:	f7fd f8ec 	bl	800b218 <HAL_GetTick>
 800e040:	4602      	mov	r2, r0
 800e042:	693b      	ldr	r3, [r7, #16]
 800e044:	1ad3      	subs	r3, r2, r3
 800e046:	2b02      	cmp	r3, #2
 800e048:	d901      	bls.n	800e04e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800e04a:	2303      	movs	r3, #3
 800e04c:	e087      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e04e:	4b28      	ldr	r3, [pc, #160]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e050:	681b      	ldr	r3, [r3, #0]
 800e052:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e056:	2b00      	cmp	r3, #0
 800e058:	d1f0      	bne.n	800e03c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	69da      	ldr	r2, [r3, #28]
 800e05e:	687b      	ldr	r3, [r7, #4]
 800e060:	6a1b      	ldr	r3, [r3, #32]
 800e062:	431a      	orrs	r2, r3
 800e064:	687b      	ldr	r3, [r7, #4]
 800e066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e068:	019b      	lsls	r3, r3, #6
 800e06a:	431a      	orrs	r2, r3
 800e06c:	687b      	ldr	r3, [r7, #4]
 800e06e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e070:	085b      	lsrs	r3, r3, #1
 800e072:	3b01      	subs	r3, #1
 800e074:	041b      	lsls	r3, r3, #16
 800e076:	431a      	orrs	r2, r3
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e07c:	061b      	lsls	r3, r3, #24
 800e07e:	4313      	orrs	r3, r2
 800e080:	4a1b      	ldr	r2, [pc, #108]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e082:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800e086:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800e088:	4b19      	ldr	r3, [pc, #100]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e08a:	681b      	ldr	r3, [r3, #0]
 800e08c:	4a18      	ldr	r2, [pc, #96]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e08e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800e092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e094:	f7fd f8c0 	bl	800b218 <HAL_GetTick>
 800e098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e09a:	e008      	b.n	800e0ae <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e09c:	f7fd f8bc 	bl	800b218 <HAL_GetTick>
 800e0a0:	4602      	mov	r2, r0
 800e0a2:	693b      	ldr	r3, [r7, #16]
 800e0a4:	1ad3      	subs	r3, r2, r3
 800e0a6:	2b02      	cmp	r3, #2
 800e0a8:	d901      	bls.n	800e0ae <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 800e0aa:	2303      	movs	r3, #3
 800e0ac:	e057      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e0ae:	4b10      	ldr	r3, [pc, #64]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d0f0      	beq.n	800e09c <HAL_RCC_OscConfig+0x478>
 800e0ba:	e04f      	b.n	800e15c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800e0bc:	4b0c      	ldr	r3, [pc, #48]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e0be:	681b      	ldr	r3, [r3, #0]
 800e0c0:	4a0b      	ldr	r2, [pc, #44]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e0c2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e0c6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e0c8:	f7fd f8a6 	bl	800b218 <HAL_GetTick>
 800e0cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0ce:	e008      	b.n	800e0e2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800e0d0:	f7fd f8a2 	bl	800b218 <HAL_GetTick>
 800e0d4:	4602      	mov	r2, r0
 800e0d6:	693b      	ldr	r3, [r7, #16]
 800e0d8:	1ad3      	subs	r3, r2, r3
 800e0da:	2b02      	cmp	r3, #2
 800e0dc:	d901      	bls.n	800e0e2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 800e0de:	2303      	movs	r3, #3
 800e0e0:	e03d      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800e0e2:	4b03      	ldr	r3, [pc, #12]	; (800e0f0 <HAL_RCC_OscConfig+0x4cc>)
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e0ea:	2b00      	cmp	r3, #0
 800e0ec:	d1f0      	bne.n	800e0d0 <HAL_RCC_OscConfig+0x4ac>
 800e0ee:	e035      	b.n	800e15c <HAL_RCC_OscConfig+0x538>
 800e0f0:	40023800 	.word	0x40023800
 800e0f4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 800e0f8:	4b1b      	ldr	r3, [pc, #108]	; (800e168 <HAL_RCC_OscConfig+0x544>)
 800e0fa:	685b      	ldr	r3, [r3, #4]
 800e0fc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	699b      	ldr	r3, [r3, #24]
 800e102:	2b01      	cmp	r3, #1
 800e104:	d028      	beq.n	800e158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800e110:	429a      	cmp	r2, r3
 800e112:	d121      	bne.n	800e158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e114:	68fb      	ldr	r3, [r7, #12]
 800e116:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800e11e:	429a      	cmp	r2, r3
 800e120:	d11a      	bne.n	800e158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e122:	68fa      	ldr	r2, [r7, #12]
 800e124:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800e128:	4013      	ands	r3, r2
 800e12a:	687a      	ldr	r2, [r7, #4]
 800e12c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e12e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800e130:	4293      	cmp	r3, r2
 800e132:	d111      	bne.n	800e158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e134:	68fb      	ldr	r3, [r7, #12]
 800e136:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800e13a:	687b      	ldr	r3, [r7, #4]
 800e13c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e13e:	085b      	lsrs	r3, r3, #1
 800e140:	3b01      	subs	r3, #1
 800e142:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800e144:	429a      	cmp	r2, r3
 800e146:	d107      	bne.n	800e158 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800e14e:	687b      	ldr	r3, [r7, #4]
 800e150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e152:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800e154:	429a      	cmp	r2, r3
 800e156:	d001      	beq.n	800e15c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800e158:	2301      	movs	r3, #1
 800e15a:	e000      	b.n	800e15e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 800e15c:	2300      	movs	r3, #0
}
 800e15e:	4618      	mov	r0, r3
 800e160:	3718      	adds	r7, #24
 800e162:	46bd      	mov	sp, r7
 800e164:	bd80      	pop	{r7, pc}
 800e166:	bf00      	nop
 800e168:	40023800 	.word	0x40023800

0800e16c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
 800e174:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800e176:	2300      	movs	r3, #0
 800e178:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800e17a:	687b      	ldr	r3, [r7, #4]
 800e17c:	2b00      	cmp	r3, #0
 800e17e:	d101      	bne.n	800e184 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800e180:	2301      	movs	r3, #1
 800e182:	e0d0      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800e184:	4b6a      	ldr	r3, [pc, #424]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e186:	681b      	ldr	r3, [r3, #0]
 800e188:	f003 030f 	and.w	r3, r3, #15
 800e18c:	683a      	ldr	r2, [r7, #0]
 800e18e:	429a      	cmp	r2, r3
 800e190:	d910      	bls.n	800e1b4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e192:	4b67      	ldr	r3, [pc, #412]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e194:	681b      	ldr	r3, [r3, #0]
 800e196:	f023 020f 	bic.w	r2, r3, #15
 800e19a:	4965      	ldr	r1, [pc, #404]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e19c:	683b      	ldr	r3, [r7, #0]
 800e19e:	4313      	orrs	r3, r2
 800e1a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e1a2:	4b63      	ldr	r3, [pc, #396]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	f003 030f 	and.w	r3, r3, #15
 800e1aa:	683a      	ldr	r2, [r7, #0]
 800e1ac:	429a      	cmp	r2, r3
 800e1ae:	d001      	beq.n	800e1b4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800e1b0:	2301      	movs	r3, #1
 800e1b2:	e0b8      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800e1b4:	687b      	ldr	r3, [r7, #4]
 800e1b6:	681b      	ldr	r3, [r3, #0]
 800e1b8:	f003 0302 	and.w	r3, r3, #2
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	d020      	beq.n	800e202 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e1c0:	687b      	ldr	r3, [r7, #4]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	f003 0304 	and.w	r3, r3, #4
 800e1c8:	2b00      	cmp	r3, #0
 800e1ca:	d005      	beq.n	800e1d8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800e1cc:	4b59      	ldr	r3, [pc, #356]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e1ce:	689b      	ldr	r3, [r3, #8]
 800e1d0:	4a58      	ldr	r2, [pc, #352]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e1d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800e1d6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e1d8:	687b      	ldr	r3, [r7, #4]
 800e1da:	681b      	ldr	r3, [r3, #0]
 800e1dc:	f003 0308 	and.w	r3, r3, #8
 800e1e0:	2b00      	cmp	r3, #0
 800e1e2:	d005      	beq.n	800e1f0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800e1e4:	4b53      	ldr	r3, [pc, #332]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e1e6:	689b      	ldr	r3, [r3, #8]
 800e1e8:	4a52      	ldr	r2, [pc, #328]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e1ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800e1ee:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800e1f0:	4b50      	ldr	r3, [pc, #320]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e1f2:	689b      	ldr	r3, [r3, #8]
 800e1f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	689b      	ldr	r3, [r3, #8]
 800e1fc:	494d      	ldr	r1, [pc, #308]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e1fe:	4313      	orrs	r3, r2
 800e200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800e202:	687b      	ldr	r3, [r7, #4]
 800e204:	681b      	ldr	r3, [r3, #0]
 800e206:	f003 0301 	and.w	r3, r3, #1
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d040      	beq.n	800e290 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800e20e:	687b      	ldr	r3, [r7, #4]
 800e210:	685b      	ldr	r3, [r3, #4]
 800e212:	2b01      	cmp	r3, #1
 800e214:	d107      	bne.n	800e226 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800e216:	4b47      	ldr	r3, [pc, #284]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e218:	681b      	ldr	r3, [r3, #0]
 800e21a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d115      	bne.n	800e24e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e222:	2301      	movs	r3, #1
 800e224:	e07f      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	685b      	ldr	r3, [r3, #4]
 800e22a:	2b02      	cmp	r3, #2
 800e22c:	d107      	bne.n	800e23e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800e22e:	4b41      	ldr	r3, [pc, #260]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e230:	681b      	ldr	r3, [r3, #0]
 800e232:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e236:	2b00      	cmp	r3, #0
 800e238:	d109      	bne.n	800e24e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e23a:	2301      	movs	r3, #1
 800e23c:	e073      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800e23e:	4b3d      	ldr	r3, [pc, #244]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e240:	681b      	ldr	r3, [r3, #0]
 800e242:	f003 0302 	and.w	r3, r3, #2
 800e246:	2b00      	cmp	r3, #0
 800e248:	d101      	bne.n	800e24e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800e24a:	2301      	movs	r3, #1
 800e24c:	e06b      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800e24e:	4b39      	ldr	r3, [pc, #228]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e250:	689b      	ldr	r3, [r3, #8]
 800e252:	f023 0203 	bic.w	r2, r3, #3
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	685b      	ldr	r3, [r3, #4]
 800e25a:	4936      	ldr	r1, [pc, #216]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e25c:	4313      	orrs	r3, r2
 800e25e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e260:	f7fc ffda 	bl	800b218 <HAL_GetTick>
 800e264:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e266:	e00a      	b.n	800e27e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800e268:	f7fc ffd6 	bl	800b218 <HAL_GetTick>
 800e26c:	4602      	mov	r2, r0
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	1ad3      	subs	r3, r2, r3
 800e272:	f241 3288 	movw	r2, #5000	; 0x1388
 800e276:	4293      	cmp	r3, r2
 800e278:	d901      	bls.n	800e27e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800e27a:	2303      	movs	r3, #3
 800e27c:	e053      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800e27e:	4b2d      	ldr	r3, [pc, #180]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e280:	689b      	ldr	r3, [r3, #8]
 800e282:	f003 020c 	and.w	r2, r3, #12
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	009b      	lsls	r3, r3, #2
 800e28c:	429a      	cmp	r2, r3
 800e28e:	d1eb      	bne.n	800e268 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800e290:	4b27      	ldr	r3, [pc, #156]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e292:	681b      	ldr	r3, [r3, #0]
 800e294:	f003 030f 	and.w	r3, r3, #15
 800e298:	683a      	ldr	r2, [r7, #0]
 800e29a:	429a      	cmp	r2, r3
 800e29c:	d210      	bcs.n	800e2c0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800e29e:	4b24      	ldr	r3, [pc, #144]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	f023 020f 	bic.w	r2, r3, #15
 800e2a6:	4922      	ldr	r1, [pc, #136]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e2a8:	683b      	ldr	r3, [r7, #0]
 800e2aa:	4313      	orrs	r3, r2
 800e2ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800e2ae:	4b20      	ldr	r3, [pc, #128]	; (800e330 <HAL_RCC_ClockConfig+0x1c4>)
 800e2b0:	681b      	ldr	r3, [r3, #0]
 800e2b2:	f003 030f 	and.w	r3, r3, #15
 800e2b6:	683a      	ldr	r2, [r7, #0]
 800e2b8:	429a      	cmp	r2, r3
 800e2ba:	d001      	beq.n	800e2c0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 800e2bc:	2301      	movs	r3, #1
 800e2be:	e032      	b.n	800e326 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	681b      	ldr	r3, [r3, #0]
 800e2c4:	f003 0304 	and.w	r3, r3, #4
 800e2c8:	2b00      	cmp	r3, #0
 800e2ca:	d008      	beq.n	800e2de <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800e2cc:	4b19      	ldr	r3, [pc, #100]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e2ce:	689b      	ldr	r3, [r3, #8]
 800e2d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800e2d4:	687b      	ldr	r3, [r7, #4]
 800e2d6:	68db      	ldr	r3, [r3, #12]
 800e2d8:	4916      	ldr	r1, [pc, #88]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e2da:	4313      	orrs	r3, r2
 800e2dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800e2de:	687b      	ldr	r3, [r7, #4]
 800e2e0:	681b      	ldr	r3, [r3, #0]
 800e2e2:	f003 0308 	and.w	r3, r3, #8
 800e2e6:	2b00      	cmp	r3, #0
 800e2e8:	d009      	beq.n	800e2fe <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800e2ea:	4b12      	ldr	r3, [pc, #72]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e2ec:	689b      	ldr	r3, [r3, #8]
 800e2ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	691b      	ldr	r3, [r3, #16]
 800e2f6:	00db      	lsls	r3, r3, #3
 800e2f8:	490e      	ldr	r1, [pc, #56]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e2fa:	4313      	orrs	r3, r2
 800e2fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800e2fe:	f000 f821 	bl	800e344 <HAL_RCC_GetSysClockFreq>
 800e302:	4602      	mov	r2, r0
 800e304:	4b0b      	ldr	r3, [pc, #44]	; (800e334 <HAL_RCC_ClockConfig+0x1c8>)
 800e306:	689b      	ldr	r3, [r3, #8]
 800e308:	091b      	lsrs	r3, r3, #4
 800e30a:	f003 030f 	and.w	r3, r3, #15
 800e30e:	490a      	ldr	r1, [pc, #40]	; (800e338 <HAL_RCC_ClockConfig+0x1cc>)
 800e310:	5ccb      	ldrb	r3, [r1, r3]
 800e312:	fa22 f303 	lsr.w	r3, r2, r3
 800e316:	4a09      	ldr	r2, [pc, #36]	; (800e33c <HAL_RCC_ClockConfig+0x1d0>)
 800e318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800e31a:	4b09      	ldr	r3, [pc, #36]	; (800e340 <HAL_RCC_ClockConfig+0x1d4>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	4618      	mov	r0, r3
 800e320:	f7fc fc40 	bl	800aba4 <HAL_InitTick>

  return HAL_OK;
 800e324:	2300      	movs	r3, #0
}
 800e326:	4618      	mov	r0, r3
 800e328:	3710      	adds	r7, #16
 800e32a:	46bd      	mov	sp, r7
 800e32c:	bd80      	pop	{r7, pc}
 800e32e:	bf00      	nop
 800e330:	40023c00 	.word	0x40023c00
 800e334:	40023800 	.word	0x40023800
 800e338:	08028d50 	.word	0x08028d50
 800e33c:	20000004 	.word	0x20000004
 800e340:	20000008 	.word	0x20000008

0800e344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800e344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800e348:	b090      	sub	sp, #64	; 0x40
 800e34a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800e34c:	2300      	movs	r3, #0
 800e34e:	637b      	str	r3, [r7, #52]	; 0x34
 800e350:	2300      	movs	r3, #0
 800e352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e354:	2300      	movs	r3, #0
 800e356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0;
 800e358:	2300      	movs	r3, #0
 800e35a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800e35c:	4b59      	ldr	r3, [pc, #356]	; (800e4c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800e35e:	689b      	ldr	r3, [r3, #8]
 800e360:	f003 030c 	and.w	r3, r3, #12
 800e364:	2b08      	cmp	r3, #8
 800e366:	d00d      	beq.n	800e384 <HAL_RCC_GetSysClockFreq+0x40>
 800e368:	2b08      	cmp	r3, #8
 800e36a:	f200 80a1 	bhi.w	800e4b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800e36e:	2b00      	cmp	r3, #0
 800e370:	d002      	beq.n	800e378 <HAL_RCC_GetSysClockFreq+0x34>
 800e372:	2b04      	cmp	r3, #4
 800e374:	d003      	beq.n	800e37e <HAL_RCC_GetSysClockFreq+0x3a>
 800e376:	e09b      	b.n	800e4b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800e378:	4b53      	ldr	r3, [pc, #332]	; (800e4c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800e37a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e37c:	e09b      	b.n	800e4b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800e37e:	4b53      	ldr	r3, [pc, #332]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x188>)
 800e380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e382:	e098      	b.n	800e4b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800e384:	4b4f      	ldr	r3, [pc, #316]	; (800e4c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800e386:	685b      	ldr	r3, [r3, #4]
 800e388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e38c:	637b      	str	r3, [r7, #52]	; 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800e38e:	4b4d      	ldr	r3, [pc, #308]	; (800e4c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800e390:	685b      	ldr	r3, [r3, #4]
 800e392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e396:	2b00      	cmp	r3, #0
 800e398:	d028      	beq.n	800e3ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e39a:	4b4a      	ldr	r3, [pc, #296]	; (800e4c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800e39c:	685b      	ldr	r3, [r3, #4]
 800e39e:	099b      	lsrs	r3, r3, #6
 800e3a0:	2200      	movs	r2, #0
 800e3a2:	623b      	str	r3, [r7, #32]
 800e3a4:	627a      	str	r2, [r7, #36]	; 0x24
 800e3a6:	6a3b      	ldr	r3, [r7, #32]
 800e3a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800e3ac:	2100      	movs	r1, #0
 800e3ae:	4b47      	ldr	r3, [pc, #284]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x188>)
 800e3b0:	fb03 f201 	mul.w	r2, r3, r1
 800e3b4:	2300      	movs	r3, #0
 800e3b6:	fb00 f303 	mul.w	r3, r0, r3
 800e3ba:	4413      	add	r3, r2
 800e3bc:	4a43      	ldr	r2, [pc, #268]	; (800e4cc <HAL_RCC_GetSysClockFreq+0x188>)
 800e3be:	fba0 1202 	umull	r1, r2, r0, r2
 800e3c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800e3c4:	460a      	mov	r2, r1
 800e3c6:	62ba      	str	r2, [r7, #40]	; 0x28
 800e3c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e3ca:	4413      	add	r3, r2
 800e3cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e3ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e3d0:	2200      	movs	r2, #0
 800e3d2:	61bb      	str	r3, [r7, #24]
 800e3d4:	61fa      	str	r2, [r7, #28]
 800e3d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e3da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800e3de:	f7f2 fc03 	bl	8000be8 <__aeabi_uldivmod>
 800e3e2:	4602      	mov	r2, r0
 800e3e4:	460b      	mov	r3, r1
 800e3e6:	4613      	mov	r3, r2
 800e3e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e3ea:	e053      	b.n	800e494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800e3ec:	4b35      	ldr	r3, [pc, #212]	; (800e4c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800e3ee:	685b      	ldr	r3, [r3, #4]
 800e3f0:	099b      	lsrs	r3, r3, #6
 800e3f2:	2200      	movs	r2, #0
 800e3f4:	613b      	str	r3, [r7, #16]
 800e3f6:	617a      	str	r2, [r7, #20]
 800e3f8:	693b      	ldr	r3, [r7, #16]
 800e3fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800e3fe:	f04f 0b00 	mov.w	fp, #0
 800e402:	4652      	mov	r2, sl
 800e404:	465b      	mov	r3, fp
 800e406:	f04f 0000 	mov.w	r0, #0
 800e40a:	f04f 0100 	mov.w	r1, #0
 800e40e:	0159      	lsls	r1, r3, #5
 800e410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800e414:	0150      	lsls	r0, r2, #5
 800e416:	4602      	mov	r2, r0
 800e418:	460b      	mov	r3, r1
 800e41a:	ebb2 080a 	subs.w	r8, r2, sl
 800e41e:	eb63 090b 	sbc.w	r9, r3, fp
 800e422:	f04f 0200 	mov.w	r2, #0
 800e426:	f04f 0300 	mov.w	r3, #0
 800e42a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800e42e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800e432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800e436:	ebb2 0408 	subs.w	r4, r2, r8
 800e43a:	eb63 0509 	sbc.w	r5, r3, r9
 800e43e:	f04f 0200 	mov.w	r2, #0
 800e442:	f04f 0300 	mov.w	r3, #0
 800e446:	00eb      	lsls	r3, r5, #3
 800e448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e44c:	00e2      	lsls	r2, r4, #3
 800e44e:	4614      	mov	r4, r2
 800e450:	461d      	mov	r5, r3
 800e452:	eb14 030a 	adds.w	r3, r4, sl
 800e456:	603b      	str	r3, [r7, #0]
 800e458:	eb45 030b 	adc.w	r3, r5, fp
 800e45c:	607b      	str	r3, [r7, #4]
 800e45e:	f04f 0200 	mov.w	r2, #0
 800e462:	f04f 0300 	mov.w	r3, #0
 800e466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800e46a:	4629      	mov	r1, r5
 800e46c:	028b      	lsls	r3, r1, #10
 800e46e:	4621      	mov	r1, r4
 800e470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800e474:	4621      	mov	r1, r4
 800e476:	028a      	lsls	r2, r1, #10
 800e478:	4610      	mov	r0, r2
 800e47a:	4619      	mov	r1, r3
 800e47c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e47e:	2200      	movs	r2, #0
 800e480:	60bb      	str	r3, [r7, #8]
 800e482:	60fa      	str	r2, [r7, #12]
 800e484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e488:	f7f2 fbae 	bl	8000be8 <__aeabi_uldivmod>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4613      	mov	r3, r2
 800e492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 800e494:	4b0b      	ldr	r3, [pc, #44]	; (800e4c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800e496:	685b      	ldr	r3, [r3, #4]
 800e498:	0c1b      	lsrs	r3, r3, #16
 800e49a:	f003 0303 	and.w	r3, r3, #3
 800e49e:	3301      	adds	r3, #1
 800e4a0:	005b      	lsls	r3, r3, #1
 800e4a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco / pllp;
 800e4a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800e4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e4a8:	fbb2 f3f3 	udiv	r3, r2, r3
 800e4ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e4ae:	e002      	b.n	800e4b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800e4b0:	4b05      	ldr	r3, [pc, #20]	; (800e4c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800e4b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800e4b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800e4b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800e4b8:	4618      	mov	r0, r3
 800e4ba:	3740      	adds	r7, #64	; 0x40
 800e4bc:	46bd      	mov	sp, r7
 800e4be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e4c2:	bf00      	nop
 800e4c4:	40023800 	.word	0x40023800
 800e4c8:	00f42400 	.word	0x00f42400
 800e4cc:	017d7840 	.word	0x017d7840

0800e4d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800e4d0:	b480      	push	{r7}
 800e4d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800e4d4:	4b03      	ldr	r3, [pc, #12]	; (800e4e4 <HAL_RCC_GetHCLKFreq+0x14>)
 800e4d6:	681b      	ldr	r3, [r3, #0]
}
 800e4d8:	4618      	mov	r0, r3
 800e4da:	46bd      	mov	sp, r7
 800e4dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e0:	4770      	bx	lr
 800e4e2:	bf00      	nop
 800e4e4:	20000004 	.word	0x20000004

0800e4e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800e4e8:	b580      	push	{r7, lr}
 800e4ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800e4ec:	f7ff fff0 	bl	800e4d0 <HAL_RCC_GetHCLKFreq>
 800e4f0:	4602      	mov	r2, r0
 800e4f2:	4b05      	ldr	r3, [pc, #20]	; (800e508 <HAL_RCC_GetPCLK1Freq+0x20>)
 800e4f4:	689b      	ldr	r3, [r3, #8]
 800e4f6:	0a9b      	lsrs	r3, r3, #10
 800e4f8:	f003 0307 	and.w	r3, r3, #7
 800e4fc:	4903      	ldr	r1, [pc, #12]	; (800e50c <HAL_RCC_GetPCLK1Freq+0x24>)
 800e4fe:	5ccb      	ldrb	r3, [r1, r3]
 800e500:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e504:	4618      	mov	r0, r3
 800e506:	bd80      	pop	{r7, pc}
 800e508:	40023800 	.word	0x40023800
 800e50c:	08028d60 	.word	0x08028d60

0800e510 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800e510:	b580      	push	{r7, lr}
 800e512:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800e514:	f7ff ffdc 	bl	800e4d0 <HAL_RCC_GetHCLKFreq>
 800e518:	4602      	mov	r2, r0
 800e51a:	4b05      	ldr	r3, [pc, #20]	; (800e530 <HAL_RCC_GetPCLK2Freq+0x20>)
 800e51c:	689b      	ldr	r3, [r3, #8]
 800e51e:	0b5b      	lsrs	r3, r3, #13
 800e520:	f003 0307 	and.w	r3, r3, #7
 800e524:	4903      	ldr	r1, [pc, #12]	; (800e534 <HAL_RCC_GetPCLK2Freq+0x24>)
 800e526:	5ccb      	ldrb	r3, [r1, r3]
 800e528:	fa22 f303 	lsr.w	r3, r2, r3
}
 800e52c:	4618      	mov	r0, r3
 800e52e:	bd80      	pop	{r7, pc}
 800e530:	40023800 	.word	0x40023800
 800e534:	08028d60 	.word	0x08028d60

0800e538 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800e538:	b480      	push	{r7}
 800e53a:	b083      	sub	sp, #12
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
 800e540:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800e542:	687b      	ldr	r3, [r7, #4]
 800e544:	220f      	movs	r2, #15
 800e546:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800e548:	4b12      	ldr	r3, [pc, #72]	; (800e594 <HAL_RCC_GetClockConfig+0x5c>)
 800e54a:	689b      	ldr	r3, [r3, #8]
 800e54c:	f003 0203 	and.w	r2, r3, #3
 800e550:	687b      	ldr	r3, [r7, #4]
 800e552:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800e554:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <HAL_RCC_GetClockConfig+0x5c>)
 800e556:	689b      	ldr	r3, [r3, #8]
 800e558:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800e560:	4b0c      	ldr	r3, [pc, #48]	; (800e594 <HAL_RCC_GetClockConfig+0x5c>)
 800e562:	689b      	ldr	r3, [r3, #8]
 800e564:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e568:	687b      	ldr	r3, [r7, #4]
 800e56a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800e56c:	4b09      	ldr	r3, [pc, #36]	; (800e594 <HAL_RCC_GetClockConfig+0x5c>)
 800e56e:	689b      	ldr	r3, [r3, #8]
 800e570:	08db      	lsrs	r3, r3, #3
 800e572:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800e57a:	4b07      	ldr	r3, [pc, #28]	; (800e598 <HAL_RCC_GetClockConfig+0x60>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	f003 020f 	and.w	r2, r3, #15
 800e582:	683b      	ldr	r3, [r7, #0]
 800e584:	601a      	str	r2, [r3, #0]
}
 800e586:	bf00      	nop
 800e588:	370c      	adds	r7, #12
 800e58a:	46bd      	mov	sp, r7
 800e58c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e590:	4770      	bx	lr
 800e592:	bf00      	nop
 800e594:	40023800 	.word	0x40023800
 800e598:	40023c00 	.word	0x40023c00

0800e59c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e59c:	b580      	push	{r7, lr}
 800e59e:	b088      	sub	sp, #32
 800e5a0:	af00      	add	r7, sp, #0
 800e5a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800e5a4:	2300      	movs	r3, #0
 800e5a6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800e5ac:	2300      	movs	r3, #0
 800e5ae:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800e5b0:	2300      	movs	r3, #0
 800e5b2:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800e5b8:	687b      	ldr	r3, [r7, #4]
 800e5ba:	681b      	ldr	r3, [r3, #0]
 800e5bc:	f003 0301 	and.w	r3, r3, #1
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d012      	beq.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800e5c4:	4b69      	ldr	r3, [pc, #420]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e5c6:	689b      	ldr	r3, [r3, #8]
 800e5c8:	4a68      	ldr	r2, [pc, #416]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e5ca:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e5ce:	6093      	str	r3, [r2, #8]
 800e5d0:	4b66      	ldr	r3, [pc, #408]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e5d2:	689a      	ldr	r2, [r3, #8]
 800e5d4:	687b      	ldr	r3, [r7, #4]
 800e5d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5d8:	4964      	ldr	r1, [pc, #400]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e5da:	4313      	orrs	r3, r2
 800e5dc:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800e5de:	687b      	ldr	r3, [r7, #4]
 800e5e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800e5e2:	2b00      	cmp	r3, #0
 800e5e4:	d101      	bne.n	800e5ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800e5e6:	2301      	movs	r3, #1
 800e5e8:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	681b      	ldr	r3, [r3, #0]
 800e5ee:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e5f2:	2b00      	cmp	r3, #0
 800e5f4:	d017      	beq.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800e5f6:	4b5d      	ldr	r3, [pc, #372]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e5f8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e5fc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e604:	4959      	ldr	r1, [pc, #356]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e606:	4313      	orrs	r3, r2
 800e608:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e610:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800e614:	d101      	bne.n	800e61a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800e616:	2301      	movs	r3, #1
 800e618:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e61e:	2b00      	cmp	r3, #0
 800e620:	d101      	bne.n	800e626 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800e622:	2301      	movs	r3, #1
 800e624:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800e626:	687b      	ldr	r3, [r7, #4]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d017      	beq.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800e632:	4b4e      	ldr	r3, [pc, #312]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e634:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e640:	494a      	ldr	r1, [pc, #296]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e642:	4313      	orrs	r3, r2
 800e644:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e64c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800e650:	d101      	bne.n	800e656 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800e652:	2301      	movs	r3, #1
 800e654:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	d101      	bne.n	800e662 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800e65e:	2301      	movs	r3, #1
 800e660:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800e662:	687b      	ldr	r3, [r7, #4]
 800e664:	681b      	ldr	r3, [r3, #0]
 800e666:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800e66a:	2b00      	cmp	r3, #0
 800e66c:	d001      	beq.n	800e672 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800e66e:	2301      	movs	r3, #1
 800e670:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	681b      	ldr	r3, [r3, #0]
 800e676:	f003 0320 	and.w	r3, r3, #32
 800e67a:	2b00      	cmp	r3, #0
 800e67c:	f000 808b 	beq.w	800e796 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800e680:	4b3a      	ldr	r3, [pc, #232]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e682:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e684:	4a39      	ldr	r2, [pc, #228]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e686:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800e68a:	6413      	str	r3, [r2, #64]	; 0x40
 800e68c:	4b37      	ldr	r3, [pc, #220]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e68e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800e694:	60bb      	str	r3, [r7, #8]
 800e696:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800e698:	4b35      	ldr	r3, [pc, #212]	; (800e770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	4a34      	ldr	r2, [pc, #208]	; (800e770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e69e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800e6a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800e6a4:	f7fc fdb8 	bl	800b218 <HAL_GetTick>
 800e6a8:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e6aa:	e008      	b.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800e6ac:	f7fc fdb4 	bl	800b218 <HAL_GetTick>
 800e6b0:	4602      	mov	r2, r0
 800e6b2:	697b      	ldr	r3, [r7, #20]
 800e6b4:	1ad3      	subs	r3, r2, r3
 800e6b6:	2b64      	cmp	r3, #100	; 0x64
 800e6b8:	d901      	bls.n	800e6be <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800e6ba:	2303      	movs	r3, #3
 800e6bc:	e357      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800e6be:	4b2c      	ldr	r3, [pc, #176]	; (800e770 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800e6c0:	681b      	ldr	r3, [r3, #0]
 800e6c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d0f0      	beq.n	800e6ac <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800e6ca:	4b28      	ldr	r3, [pc, #160]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6d2:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800e6d4:	693b      	ldr	r3, [r7, #16]
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d035      	beq.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800e6da:	687b      	ldr	r3, [r7, #4]
 800e6dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e6de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e6e2:	693a      	ldr	r2, [r7, #16]
 800e6e4:	429a      	cmp	r2, r3
 800e6e6:	d02e      	beq.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800e6e8:	4b20      	ldr	r3, [pc, #128]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800e6f0:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800e6f2:	4b1e      	ldr	r3, [pc, #120]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e6f6:	4a1d      	ldr	r2, [pc, #116]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e6f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6fc:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800e6fe:	4b1b      	ldr	r3, [pc, #108]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e702:	4a1a      	ldr	r2, [pc, #104]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e704:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800e708:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800e70a:	4a18      	ldr	r2, [pc, #96]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e70c:	693b      	ldr	r3, [r7, #16]
 800e70e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800e710:	4b16      	ldr	r3, [pc, #88]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e714:	f003 0301 	and.w	r3, r3, #1
 800e718:	2b01      	cmp	r3, #1
 800e71a:	d114      	bne.n	800e746 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800e71c:	f7fc fd7c 	bl	800b218 <HAL_GetTick>
 800e720:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e722:	e00a      	b.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800e724:	f7fc fd78 	bl	800b218 <HAL_GetTick>
 800e728:	4602      	mov	r2, r0
 800e72a:	697b      	ldr	r3, [r7, #20]
 800e72c:	1ad3      	subs	r3, r2, r3
 800e72e:	f241 3288 	movw	r2, #5000	; 0x1388
 800e732:	4293      	cmp	r3, r2
 800e734:	d901      	bls.n	800e73a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800e736:	2303      	movs	r3, #3
 800e738:	e319      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800e73a:	4b0c      	ldr	r3, [pc, #48]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e73c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e73e:	f003 0302 	and.w	r3, r3, #2
 800e742:	2b00      	cmp	r3, #0
 800e744:	d0ee      	beq.n	800e724 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800e746:	687b      	ldr	r3, [r7, #4]
 800e748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e74a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800e74e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800e752:	d111      	bne.n	800e778 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 800e754:	4b05      	ldr	r3, [pc, #20]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e756:	689b      	ldr	r3, [r3, #8]
 800e758:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800e760:	4b04      	ldr	r3, [pc, #16]	; (800e774 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800e762:	400b      	ands	r3, r1
 800e764:	4901      	ldr	r1, [pc, #4]	; (800e76c <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800e766:	4313      	orrs	r3, r2
 800e768:	608b      	str	r3, [r1, #8]
 800e76a:	e00b      	b.n	800e784 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 800e76c:	40023800 	.word	0x40023800
 800e770:	40007000 	.word	0x40007000
 800e774:	0ffffcff 	.word	0x0ffffcff
 800e778:	4baa      	ldr	r3, [pc, #680]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e77a:	689b      	ldr	r3, [r3, #8]
 800e77c:	4aa9      	ldr	r2, [pc, #676]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e77e:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800e782:	6093      	str	r3, [r2, #8]
 800e784:	4ba7      	ldr	r3, [pc, #668]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e786:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e78c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e790:	49a4      	ldr	r1, [pc, #656]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e792:	4313      	orrs	r3, r2
 800e794:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800e796:	687b      	ldr	r3, [r7, #4]
 800e798:	681b      	ldr	r3, [r3, #0]
 800e79a:	f003 0310 	and.w	r3, r3, #16
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d010      	beq.n	800e7c4 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800e7a2:	4ba0      	ldr	r3, [pc, #640]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e7a8:	4a9e      	ldr	r2, [pc, #632]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800e7ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800e7b2:	4b9c      	ldr	r3, [pc, #624]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7b4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800e7b8:	687b      	ldr	r3, [r7, #4]
 800e7ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e7bc:	4999      	ldr	r1, [pc, #612]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7be:	4313      	orrs	r3, r2
 800e7c0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800e7c4:	687b      	ldr	r3, [r7, #4]
 800e7c6:	681b      	ldr	r3, [r3, #0]
 800e7c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800e7cc:	2b00      	cmp	r3, #0
 800e7ce:	d00a      	beq.n	800e7e6 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800e7d0:	4b94      	ldr	r3, [pc, #592]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7d6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800e7da:	687b      	ldr	r3, [r7, #4]
 800e7dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800e7de:	4991      	ldr	r1, [pc, #580]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7e0:	4313      	orrs	r3, r2
 800e7e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e7ee:	2b00      	cmp	r3, #0
 800e7f0:	d00a      	beq.n	800e808 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800e7f2:	4b8c      	ldr	r3, [pc, #560]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e7f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800e800:	4988      	ldr	r1, [pc, #544]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e802:	4313      	orrs	r3, r2
 800e804:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800e808:	687b      	ldr	r3, [r7, #4]
 800e80a:	681b      	ldr	r3, [r3, #0]
 800e80c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e810:	2b00      	cmp	r3, #0
 800e812:	d00a      	beq.n	800e82a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800e814:	4b83      	ldr	r3, [pc, #524]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e81a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e822:	4980      	ldr	r1, [pc, #512]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e824:	4313      	orrs	r3, r2
 800e826:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	681b      	ldr	r3, [r3, #0]
 800e82e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e832:	2b00      	cmp	r3, #0
 800e834:	d00a      	beq.n	800e84c <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800e836:	4b7b      	ldr	r3, [pc, #492]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e838:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e83c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e844:	4977      	ldr	r1, [pc, #476]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e846:	4313      	orrs	r3, r2
 800e848:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	681b      	ldr	r3, [r3, #0]
 800e850:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e854:	2b00      	cmp	r3, #0
 800e856:	d00a      	beq.n	800e86e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800e858:	4b72      	ldr	r3, [pc, #456]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e85a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e85e:	f023 0203 	bic.w	r2, r3, #3
 800e862:	687b      	ldr	r3, [r7, #4]
 800e864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800e866:	496f      	ldr	r1, [pc, #444]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e868:	4313      	orrs	r3, r2
 800e86a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800e86e:	687b      	ldr	r3, [r7, #4]
 800e870:	681b      	ldr	r3, [r3, #0]
 800e872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e876:	2b00      	cmp	r3, #0
 800e878:	d00a      	beq.n	800e890 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800e87a:	4b6a      	ldr	r3, [pc, #424]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e87c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e880:	f023 020c 	bic.w	r2, r3, #12
 800e884:	687b      	ldr	r3, [r7, #4]
 800e886:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e888:	4966      	ldr	r1, [pc, #408]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e88a:	4313      	orrs	r3, r2
 800e88c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800e890:	687b      	ldr	r3, [r7, #4]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e898:	2b00      	cmp	r3, #0
 800e89a:	d00a      	beq.n	800e8b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800e89c:	4b61      	ldr	r3, [pc, #388]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e89e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8a2:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8aa:	495e      	ldr	r1, [pc, #376]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e8ac:	4313      	orrs	r3, r2
 800e8ae:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800e8ba:	2b00      	cmp	r3, #0
 800e8bc:	d00a      	beq.n	800e8d4 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800e8be:	4b59      	ldr	r3, [pc, #356]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e8c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8c4:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800e8c8:	687b      	ldr	r3, [r7, #4]
 800e8ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8cc:	4955      	ldr	r1, [pc, #340]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e8ce:	4313      	orrs	r3, r2
 800e8d0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800e8d4:	687b      	ldr	r3, [r7, #4]
 800e8d6:	681b      	ldr	r3, [r3, #0]
 800e8d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00a      	beq.n	800e8f6 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800e8e0:	4b50      	ldr	r3, [pc, #320]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e8e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e8e6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8ee:	494d      	ldr	r1, [pc, #308]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e8f0:	4313      	orrs	r3, r2
 800e8f2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	681b      	ldr	r3, [r3, #0]
 800e8fa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d00a      	beq.n	800e918 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800e902:	4b48      	ldr	r3, [pc, #288]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e904:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e908:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800e90c:	687b      	ldr	r3, [r7, #4]
 800e90e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e910:	4944      	ldr	r1, [pc, #272]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e912:	4313      	orrs	r3, r2
 800e914:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	681b      	ldr	r3, [r3, #0]
 800e91c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800e920:	2b00      	cmp	r3, #0
 800e922:	d00a      	beq.n	800e93a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800e924:	4b3f      	ldr	r3, [pc, #252]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e926:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e92a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e932:	493c      	ldr	r1, [pc, #240]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e934:	4313      	orrs	r3, r2
 800e936:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800e93a:	687b      	ldr	r3, [r7, #4]
 800e93c:	681b      	ldr	r3, [r3, #0]
 800e93e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800e942:	2b00      	cmp	r3, #0
 800e944:	d00a      	beq.n	800e95c <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800e946:	4b37      	ldr	r3, [pc, #220]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e948:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e94c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800e950:	687b      	ldr	r3, [r7, #4]
 800e952:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e954:	4933      	ldr	r1, [pc, #204]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e956:	4313      	orrs	r3, r2
 800e958:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	681b      	ldr	r3, [r3, #0]
 800e960:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e964:	2b00      	cmp	r3, #0
 800e966:	d00a      	beq.n	800e97e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800e968:	4b2e      	ldr	r3, [pc, #184]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e96a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e96e:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800e972:	687b      	ldr	r3, [r7, #4]
 800e974:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e976:	492b      	ldr	r1, [pc, #172]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e978:	4313      	orrs	r3, r2
 800e97a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800e97e:	687b      	ldr	r3, [r7, #4]
 800e980:	681b      	ldr	r3, [r3, #0]
 800e982:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800e986:	2b00      	cmp	r3, #0
 800e988:	d011      	beq.n	800e9ae <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800e98a:	4b26      	ldr	r3, [pc, #152]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e98c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e990:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800e994:	687b      	ldr	r3, [r7, #4]
 800e996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e998:	4922      	ldr	r1, [pc, #136]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e99a:	4313      	orrs	r3, r2
 800e99c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800e9a0:	687b      	ldr	r3, [r7, #4]
 800e9a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800e9a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800e9a8:	d101      	bne.n	800e9ae <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800e9aa:	2301      	movs	r3, #1
 800e9ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	681b      	ldr	r3, [r3, #0]
 800e9b2:	f003 0308 	and.w	r3, r3, #8
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d001      	beq.n	800e9be <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800e9ba:	2301      	movs	r3, #1
 800e9bc:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800e9be:	687b      	ldr	r3, [r7, #4]
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e9c6:	2b00      	cmp	r3, #0
 800e9c8:	d00a      	beq.n	800e9e0 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800e9ca:	4b16      	ldr	r3, [pc, #88]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e9cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9d0:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e9d8:	4912      	ldr	r1, [pc, #72]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e9da:	4313      	orrs	r3, r2
 800e9dc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e9e8:	2b00      	cmp	r3, #0
 800e9ea:	d00b      	beq.n	800ea04 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800e9ec:	4b0d      	ldr	r3, [pc, #52]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e9ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e9f2:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e9fc:	4909      	ldr	r1, [pc, #36]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800ea04:	69fb      	ldr	r3, [r7, #28]
 800ea06:	2b01      	cmp	r3, #1
 800ea08:	d006      	beq.n	800ea18 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	681b      	ldr	r3, [r3, #0]
 800ea0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ea12:	2b00      	cmp	r3, #0
 800ea14:	f000 80d9 	beq.w	800ebca <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 800ea18:	4b02      	ldr	r3, [pc, #8]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ea1a:	681b      	ldr	r3, [r3, #0]
 800ea1c:	4a01      	ldr	r2, [pc, #4]	; (800ea24 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800ea1e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800ea22:	e001      	b.n	800ea28 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800ea24:	40023800 	.word	0x40023800
 800ea28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ea2a:	f7fc fbf5 	bl	800b218 <HAL_GetTick>
 800ea2e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ea30:	e008      	b.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ea32:	f7fc fbf1 	bl	800b218 <HAL_GetTick>
 800ea36:	4602      	mov	r2, r0
 800ea38:	697b      	ldr	r3, [r7, #20]
 800ea3a:	1ad3      	subs	r3, r2, r3
 800ea3c:	2b64      	cmp	r3, #100	; 0x64
 800ea3e:	d901      	bls.n	800ea44 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ea40:	2303      	movs	r3, #3
 800ea42:	e194      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800ea44:	4b6c      	ldr	r3, [pc, #432]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d1f0      	bne.n	800ea32 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	681b      	ldr	r3, [r3, #0]
 800ea54:	f003 0301 	and.w	r3, r3, #1
 800ea58:	2b00      	cmp	r3, #0
 800ea5a:	d021      	beq.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea60:	2b00      	cmp	r3, #0
 800ea62:	d11d      	bne.n	800eaa0 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800ea64:	4b64      	ldr	r3, [pc, #400]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ea66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea6a:	0c1b      	lsrs	r3, r3, #16
 800ea6c:	f003 0303 	and.w	r3, r3, #3
 800ea70:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800ea72:	4b61      	ldr	r3, [pc, #388]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ea74:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ea78:	0e1b      	lsrs	r3, r3, #24
 800ea7a:	f003 030f 	and.w	r3, r3, #15
 800ea7e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	685b      	ldr	r3, [r3, #4]
 800ea84:	019a      	lsls	r2, r3, #6
 800ea86:	693b      	ldr	r3, [r7, #16]
 800ea88:	041b      	lsls	r3, r3, #16
 800ea8a:	431a      	orrs	r2, r3
 800ea8c:	68fb      	ldr	r3, [r7, #12]
 800ea8e:	061b      	lsls	r3, r3, #24
 800ea90:	431a      	orrs	r2, r3
 800ea92:	687b      	ldr	r3, [r7, #4]
 800ea94:	689b      	ldr	r3, [r3, #8]
 800ea96:	071b      	lsls	r3, r3, #28
 800ea98:	4957      	ldr	r1, [pc, #348]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ea9a:	4313      	orrs	r3, r2
 800ea9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	681b      	ldr	r3, [r3, #0]
 800eaa4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d004      	beq.n	800eab6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800eaac:	687b      	ldr	r3, [r7, #4]
 800eaae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eab0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800eab4:	d00a      	beq.n	800eacc <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	681b      	ldr	r3, [r3, #0]
 800eaba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800eabe:	2b00      	cmp	r3, #0
 800eac0:	d02e      	beq.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eac6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800eaca:	d129      	bne.n	800eb20 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800eacc:	4b4a      	ldr	r3, [pc, #296]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eace:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ead2:	0c1b      	lsrs	r3, r3, #16
 800ead4:	f003 0303 	and.w	r3, r3, #3
 800ead8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eada:	4b47      	ldr	r3, [pc, #284]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eadc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eae0:	0f1b      	lsrs	r3, r3, #28
 800eae2:	f003 0307 	and.w	r3, r3, #7
 800eae6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	685b      	ldr	r3, [r3, #4]
 800eaec:	019a      	lsls	r2, r3, #6
 800eaee:	693b      	ldr	r3, [r7, #16]
 800eaf0:	041b      	lsls	r3, r3, #16
 800eaf2:	431a      	orrs	r2, r3
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	68db      	ldr	r3, [r3, #12]
 800eaf8:	061b      	lsls	r3, r3, #24
 800eafa:	431a      	orrs	r2, r3
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	071b      	lsls	r3, r3, #28
 800eb00:	493d      	ldr	r1, [pc, #244]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb02:	4313      	orrs	r3, r2
 800eb04:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800eb08:	4b3b      	ldr	r3, [pc, #236]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800eb0e:	f023 021f 	bic.w	r2, r3, #31
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb16:	3b01      	subs	r3, #1
 800eb18:	4937      	ldr	r1, [pc, #220]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb1a:	4313      	orrs	r3, r2
 800eb1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	681b      	ldr	r3, [r3, #0]
 800eb24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800eb28:	2b00      	cmp	r3, #0
 800eb2a:	d01d      	beq.n	800eb68 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800eb2c:	4b32      	ldr	r3, [pc, #200]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb32:	0e1b      	lsrs	r3, r3, #24
 800eb34:	f003 030f 	and.w	r3, r3, #15
 800eb38:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800eb3a:	4b2f      	ldr	r3, [pc, #188]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb3c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb40:	0f1b      	lsrs	r3, r3, #28
 800eb42:	f003 0307 	and.w	r3, r3, #7
 800eb46:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	685b      	ldr	r3, [r3, #4]
 800eb4c:	019a      	lsls	r2, r3, #6
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	691b      	ldr	r3, [r3, #16]
 800eb52:	041b      	lsls	r3, r3, #16
 800eb54:	431a      	orrs	r2, r3
 800eb56:	693b      	ldr	r3, [r7, #16]
 800eb58:	061b      	lsls	r3, r3, #24
 800eb5a:	431a      	orrs	r2, r3
 800eb5c:	68fb      	ldr	r3, [r7, #12]
 800eb5e:	071b      	lsls	r3, r3, #28
 800eb60:	4925      	ldr	r1, [pc, #148]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb62:	4313      	orrs	r3, r2
 800eb64:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800eb68:	687b      	ldr	r3, [r7, #4]
 800eb6a:	681b      	ldr	r3, [r3, #0]
 800eb6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d011      	beq.n	800eb98 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	685b      	ldr	r3, [r3, #4]
 800eb78:	019a      	lsls	r2, r3, #6
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	691b      	ldr	r3, [r3, #16]
 800eb7e:	041b      	lsls	r3, r3, #16
 800eb80:	431a      	orrs	r2, r3
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	68db      	ldr	r3, [r3, #12]
 800eb86:	061b      	lsls	r3, r3, #24
 800eb88:	431a      	orrs	r2, r3
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	689b      	ldr	r3, [r3, #8]
 800eb8e:	071b      	lsls	r3, r3, #28
 800eb90:	4919      	ldr	r1, [pc, #100]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb92:	4313      	orrs	r3, r2
 800eb94:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800eb98:	4b17      	ldr	r3, [pc, #92]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb9a:	681b      	ldr	r3, [r3, #0]
 800eb9c:	4a16      	ldr	r2, [pc, #88]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800eb9e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800eba2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800eba4:	f7fc fb38 	bl	800b218 <HAL_GetTick>
 800eba8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ebaa:	e008      	b.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800ebac:	f7fc fb34 	bl	800b218 <HAL_GetTick>
 800ebb0:	4602      	mov	r2, r0
 800ebb2:	697b      	ldr	r3, [r7, #20]
 800ebb4:	1ad3      	subs	r3, r2, r3
 800ebb6:	2b64      	cmp	r3, #100	; 0x64
 800ebb8:	d901      	bls.n	800ebbe <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ebba:	2303      	movs	r3, #3
 800ebbc:	e0d7      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800ebbe:	4b0e      	ldr	r3, [pc, #56]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ebc0:	681b      	ldr	r3, [r3, #0]
 800ebc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ebc6:	2b00      	cmp	r3, #0
 800ebc8:	d0f0      	beq.n	800ebac <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800ebca:	69bb      	ldr	r3, [r7, #24]
 800ebcc:	2b01      	cmp	r3, #1
 800ebce:	f040 80cd 	bne.w	800ed6c <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800ebd2:	4b09      	ldr	r3, [pc, #36]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ebd4:	681b      	ldr	r3, [r3, #0]
 800ebd6:	4a08      	ldr	r2, [pc, #32]	; (800ebf8 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800ebd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800ebdc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ebde:	f7fc fb1b 	bl	800b218 <HAL_GetTick>
 800ebe2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ebe4:	e00a      	b.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ebe6:	f7fc fb17 	bl	800b218 <HAL_GetTick>
 800ebea:	4602      	mov	r2, r0
 800ebec:	697b      	ldr	r3, [r7, #20]
 800ebee:	1ad3      	subs	r3, r2, r3
 800ebf0:	2b64      	cmp	r3, #100	; 0x64
 800ebf2:	d903      	bls.n	800ebfc <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ebf4:	2303      	movs	r3, #3
 800ebf6:	e0ba      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800ebf8:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800ebfc:	4b5e      	ldr	r3, [pc, #376]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ebfe:	681b      	ldr	r3, [r3, #0]
 800ec00:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ec04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ec08:	d0ed      	beq.n	800ebe6 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ec0a:	687b      	ldr	r3, [r7, #4]
 800ec0c:	681b      	ldr	r3, [r3, #0]
 800ec0e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ec12:	2b00      	cmp	r3, #0
 800ec14:	d003      	beq.n	800ec1e <HAL_RCCEx_PeriphCLKConfig+0x682>
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ec1a:	2b00      	cmp	r3, #0
 800ec1c:	d009      	beq.n	800ec32 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ec1e:	687b      	ldr	r3, [r7, #4]
 800ec20:	681b      	ldr	r3, [r3, #0]
 800ec22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800ec26:	2b00      	cmp	r3, #0
 800ec28:	d02e      	beq.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d12a      	bne.n	800ec88 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ec32:	4b51      	ldr	r3, [pc, #324]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ec34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec38:	0c1b      	lsrs	r3, r3, #16
 800ec3a:	f003 0303 	and.w	r3, r3, #3
 800ec3e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ec40:	4b4d      	ldr	r3, [pc, #308]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ec42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ec46:	0f1b      	lsrs	r3, r3, #28
 800ec48:	f003 0307 	and.w	r3, r3, #7
 800ec4c:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	019a      	lsls	r2, r3, #6
 800ec54:	693b      	ldr	r3, [r7, #16]
 800ec56:	041b      	lsls	r3, r3, #16
 800ec58:	431a      	orrs	r2, r3
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	699b      	ldr	r3, [r3, #24]
 800ec5e:	061b      	lsls	r3, r3, #24
 800ec60:	431a      	orrs	r2, r3
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	071b      	lsls	r3, r3, #28
 800ec66:	4944      	ldr	r1, [pc, #272]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ec68:	4313      	orrs	r3, r2
 800ec6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800ec6e:	4b42      	ldr	r3, [pc, #264]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ec70:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ec74:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 800ec78:	687b      	ldr	r3, [r7, #4]
 800ec7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ec7c:	3b01      	subs	r3, #1
 800ec7e:	021b      	lsls	r3, r3, #8
 800ec80:	493d      	ldr	r1, [pc, #244]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ec82:	4313      	orrs	r3, r2
 800ec84:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 800ec88:	687b      	ldr	r3, [r7, #4]
 800ec8a:	681b      	ldr	r3, [r3, #0]
 800ec8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d022      	beq.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0x73e>
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec98:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800ec9c:	d11d      	bne.n	800ecda <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ec9e:	4b36      	ldr	r3, [pc, #216]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800eca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eca4:	0e1b      	lsrs	r3, r3, #24
 800eca6:	f003 030f 	and.w	r3, r3, #15
 800ecaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800ecac:	4b32      	ldr	r3, [pc, #200]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ecae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecb2:	0f1b      	lsrs	r3, r3, #28
 800ecb4:	f003 0307 	and.w	r3, r3, #7
 800ecb8:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	695b      	ldr	r3, [r3, #20]
 800ecbe:	019a      	lsls	r2, r3, #6
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	6a1b      	ldr	r3, [r3, #32]
 800ecc4:	041b      	lsls	r3, r3, #16
 800ecc6:	431a      	orrs	r2, r3
 800ecc8:	693b      	ldr	r3, [r7, #16]
 800ecca:	061b      	lsls	r3, r3, #24
 800eccc:	431a      	orrs	r2, r3
 800ecce:	68fb      	ldr	r3, [r7, #12]
 800ecd0:	071b      	lsls	r3, r3, #28
 800ecd2:	4929      	ldr	r1, [pc, #164]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800ecda:	687b      	ldr	r3, [r7, #4]
 800ecdc:	681b      	ldr	r3, [r3, #0]
 800ecde:	f003 0308 	and.w	r3, r3, #8
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d028      	beq.n	800ed38 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800ece6:	4b24      	ldr	r3, [pc, #144]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ece8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecec:	0e1b      	lsrs	r3, r3, #24
 800ecee:	f003 030f 	and.w	r3, r3, #15
 800ecf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800ecf4:	4b20      	ldr	r3, [pc, #128]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ecf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800ecfa:	0c1b      	lsrs	r3, r3, #16
 800ecfc:	f003 0303 	and.w	r3, r3, #3
 800ed00:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800ed02:	687b      	ldr	r3, [r7, #4]
 800ed04:	695b      	ldr	r3, [r3, #20]
 800ed06:	019a      	lsls	r2, r3, #6
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	041b      	lsls	r3, r3, #16
 800ed0c:	431a      	orrs	r2, r3
 800ed0e:	693b      	ldr	r3, [r7, #16]
 800ed10:	061b      	lsls	r3, r3, #24
 800ed12:	431a      	orrs	r2, r3
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	69db      	ldr	r3, [r3, #28]
 800ed18:	071b      	lsls	r3, r3, #28
 800ed1a:	4917      	ldr	r1, [pc, #92]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ed1c:	4313      	orrs	r3, r2
 800ed1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800ed22:	4b15      	ldr	r3, [pc, #84]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ed24:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800ed28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800ed2c:	687b      	ldr	r3, [r7, #4]
 800ed2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed30:	4911      	ldr	r1, [pc, #68]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ed32:	4313      	orrs	r3, r2
 800ed34:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800ed38:	4b0f      	ldr	r3, [pc, #60]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ed3a:	681b      	ldr	r3, [r3, #0]
 800ed3c:	4a0e      	ldr	r2, [pc, #56]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ed3e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800ed42:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ed44:	f7fc fa68 	bl	800b218 <HAL_GetTick>
 800ed48:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ed4a:	e008      	b.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800ed4c:	f7fc fa64 	bl	800b218 <HAL_GetTick>
 800ed50:	4602      	mov	r2, r0
 800ed52:	697b      	ldr	r3, [r7, #20]
 800ed54:	1ad3      	subs	r3, r2, r3
 800ed56:	2b64      	cmp	r3, #100	; 0x64
 800ed58:	d901      	bls.n	800ed5e <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800ed5a:	2303      	movs	r3, #3
 800ed5c:	e007      	b.n	800ed6e <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800ed5e:	4b06      	ldr	r3, [pc, #24]	; (800ed78 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800ed60:	681b      	ldr	r3, [r3, #0]
 800ed62:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800ed66:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800ed6a:	d1ef      	bne.n	800ed4c <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 800ed6c:	2300      	movs	r3, #0
}
 800ed6e:	4618      	mov	r0, r3
 800ed70:	3720      	adds	r7, #32
 800ed72:	46bd      	mov	sp, r7
 800ed74:	bd80      	pop	{r7, pc}
 800ed76:	bf00      	nop
 800ed78:	40023800 	.word	0x40023800

0800ed7c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800ed7c:	b580      	push	{r7, lr}
 800ed7e:	b084      	sub	sp, #16
 800ed80:	af00      	add	r7, sp, #0
 800ed82:	60f8      	str	r0, [r7, #12]
 800ed84:	60b9      	str	r1, [r7, #8]
 800ed86:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 800ed88:	68fb      	ldr	r3, [r7, #12]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d101      	bne.n	800ed92 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800ed8e:	2301      	movs	r3, #1
 800ed90:	e038      	b.n	800ee04 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 800ed92:	68fb      	ldr	r3, [r7, #12]
 800ed94:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed98:	b2db      	uxtb	r3, r3
 800ed9a:	2b00      	cmp	r3, #0
 800ed9c:	d106      	bne.n	800edac <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f7fb fef2 	bl	800ab90 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800edac:	68fb      	ldr	r3, [r7, #12]
 800edae:	681a      	ldr	r2, [r3, #0]
 800edb0:	68fb      	ldr	r3, [r7, #12]
 800edb2:	3308      	adds	r3, #8
 800edb4:	4619      	mov	r1, r3
 800edb6:	4610      	mov	r0, r2
 800edb8:	f002 f846 	bl	8010e48 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800edbc:	68fb      	ldr	r3, [r7, #12]
 800edbe:	6818      	ldr	r0, [r3, #0]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	689b      	ldr	r3, [r3, #8]
 800edc4:	461a      	mov	r2, r3
 800edc6:	68b9      	ldr	r1, [r7, #8]
 800edc8:	f002 f8ce 	bl	8010f68 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	6858      	ldr	r0, [r3, #4]
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	689a      	ldr	r2, [r3, #8]
 800edd4:	68fb      	ldr	r3, [r7, #12]
 800edd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edd8:	6879      	ldr	r1, [r7, #4]
 800edda:	f002 f915 	bl	8011008 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	6892      	ldr	r2, [r2, #8]
 800ede6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800edea:	68fb      	ldr	r3, [r7, #12]
 800edec:	681b      	ldr	r3, [r3, #0]
 800edee:	68fa      	ldr	r2, [r7, #12]
 800edf0:	6892      	ldr	r2, [r2, #8]
 800edf2:	f041 0101 	orr.w	r1, r1, #1
 800edf6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	2201      	movs	r2, #1
 800edfe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  return HAL_OK;
 800ee02:	2300      	movs	r3, #0
}
 800ee04:	4618      	mov	r0, r3
 800ee06:	3710      	adds	r7, #16
 800ee08:	46bd      	mov	sp, r7
 800ee0a:	bd80      	pop	{r7, pc}

0800ee0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800ee0c:	b580      	push	{r7, lr}
 800ee0e:	b082      	sub	sp, #8
 800ee10:	af00      	add	r7, sp, #0
 800ee12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ee14:	687b      	ldr	r3, [r7, #4]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d101      	bne.n	800ee1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800ee1a:	2301      	movs	r3, #1
 800ee1c:	e049      	b.n	800eeb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ee24:	b2db      	uxtb	r3, r3
 800ee26:	2b00      	cmp	r3, #0
 800ee28:	d106      	bne.n	800ee38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ee2a:	687b      	ldr	r3, [r7, #4]
 800ee2c:	2200      	movs	r2, #0
 800ee2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800ee32:	6878      	ldr	r0, [r7, #4]
 800ee34:	f7fb fc62 	bl	800a6fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ee38:	687b      	ldr	r3, [r7, #4]
 800ee3a:	2202      	movs	r2, #2
 800ee3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800ee40:	687b      	ldr	r3, [r7, #4]
 800ee42:	681a      	ldr	r2, [r3, #0]
 800ee44:	687b      	ldr	r3, [r7, #4]
 800ee46:	3304      	adds	r3, #4
 800ee48:	4619      	mov	r1, r3
 800ee4a:	4610      	mov	r0, r2
 800ee4c:	f000 f9f6 	bl	800f23c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ee50:	687b      	ldr	r3, [r7, #4]
 800ee52:	2201      	movs	r2, #1
 800ee54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee58:	687b      	ldr	r3, [r7, #4]
 800ee5a:	2201      	movs	r2, #1
 800ee5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800ee60:	687b      	ldr	r3, [r7, #4]
 800ee62:	2201      	movs	r2, #1
 800ee64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800ee68:	687b      	ldr	r3, [r7, #4]
 800ee6a:	2201      	movs	r2, #1
 800ee6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	2201      	movs	r2, #1
 800ee74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800ee78:	687b      	ldr	r3, [r7, #4]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	2201      	movs	r2, #1
 800ee84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ee88:	687b      	ldr	r3, [r7, #4]
 800ee8a:	2201      	movs	r2, #1
 800ee8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ee90:	687b      	ldr	r3, [r7, #4]
 800ee92:	2201      	movs	r2, #1
 800ee94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ee98:	687b      	ldr	r3, [r7, #4]
 800ee9a:	2201      	movs	r2, #1
 800ee9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800eea0:	687b      	ldr	r3, [r7, #4]
 800eea2:	2201      	movs	r2, #1
 800eea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800eea8:	687b      	ldr	r3, [r7, #4]
 800eeaa:	2201      	movs	r2, #1
 800eeac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800eeb0:	2300      	movs	r3, #0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	3708      	adds	r7, #8
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
	...

0800eebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800eebc:	b480      	push	{r7}
 800eebe:	b085      	sub	sp, #20
 800eec0:	af00      	add	r7, sp, #0
 800eec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800eec4:	687b      	ldr	r3, [r7, #4]
 800eec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800eeca:	b2db      	uxtb	r3, r3
 800eecc:	2b01      	cmp	r3, #1
 800eece:	d001      	beq.n	800eed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800eed0:	2301      	movs	r3, #1
 800eed2:	e054      	b.n	800ef7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800eed4:	687b      	ldr	r3, [r7, #4]
 800eed6:	2202      	movs	r2, #2
 800eed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	68da      	ldr	r2, [r3, #12]
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	f042 0201 	orr.w	r2, r2, #1
 800eeea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	681b      	ldr	r3, [r3, #0]
 800eef0:	4a26      	ldr	r2, [pc, #152]	; (800ef8c <HAL_TIM_Base_Start_IT+0xd0>)
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d022      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800eef6:	687b      	ldr	r3, [r7, #4]
 800eef8:	681b      	ldr	r3, [r3, #0]
 800eefa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800eefe:	d01d      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800ef00:	687b      	ldr	r3, [r7, #4]
 800ef02:	681b      	ldr	r3, [r3, #0]
 800ef04:	4a22      	ldr	r2, [pc, #136]	; (800ef90 <HAL_TIM_Base_Start_IT+0xd4>)
 800ef06:	4293      	cmp	r3, r2
 800ef08:	d018      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800ef0a:	687b      	ldr	r3, [r7, #4]
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	4a21      	ldr	r2, [pc, #132]	; (800ef94 <HAL_TIM_Base_Start_IT+0xd8>)
 800ef10:	4293      	cmp	r3, r2
 800ef12:	d013      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800ef14:	687b      	ldr	r3, [r7, #4]
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	4a1f      	ldr	r2, [pc, #124]	; (800ef98 <HAL_TIM_Base_Start_IT+0xdc>)
 800ef1a:	4293      	cmp	r3, r2
 800ef1c:	d00e      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800ef1e:	687b      	ldr	r3, [r7, #4]
 800ef20:	681b      	ldr	r3, [r3, #0]
 800ef22:	4a1e      	ldr	r2, [pc, #120]	; (800ef9c <HAL_TIM_Base_Start_IT+0xe0>)
 800ef24:	4293      	cmp	r3, r2
 800ef26:	d009      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800ef28:	687b      	ldr	r3, [r7, #4]
 800ef2a:	681b      	ldr	r3, [r3, #0]
 800ef2c:	4a1c      	ldr	r2, [pc, #112]	; (800efa0 <HAL_TIM_Base_Start_IT+0xe4>)
 800ef2e:	4293      	cmp	r3, r2
 800ef30:	d004      	beq.n	800ef3c <HAL_TIM_Base_Start_IT+0x80>
 800ef32:	687b      	ldr	r3, [r7, #4]
 800ef34:	681b      	ldr	r3, [r3, #0]
 800ef36:	4a1b      	ldr	r2, [pc, #108]	; (800efa4 <HAL_TIM_Base_Start_IT+0xe8>)
 800ef38:	4293      	cmp	r3, r2
 800ef3a:	d115      	bne.n	800ef68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	681b      	ldr	r3, [r3, #0]
 800ef40:	689a      	ldr	r2, [r3, #8]
 800ef42:	4b19      	ldr	r3, [pc, #100]	; (800efa8 <HAL_TIM_Base_Start_IT+0xec>)
 800ef44:	4013      	ands	r3, r2
 800ef46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	2b06      	cmp	r3, #6
 800ef4c:	d015      	beq.n	800ef7a <HAL_TIM_Base_Start_IT+0xbe>
 800ef4e:	68fb      	ldr	r3, [r7, #12]
 800ef50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800ef54:	d011      	beq.n	800ef7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800ef56:	687b      	ldr	r3, [r7, #4]
 800ef58:	681b      	ldr	r3, [r3, #0]
 800ef5a:	681a      	ldr	r2, [r3, #0]
 800ef5c:	687b      	ldr	r3, [r7, #4]
 800ef5e:	681b      	ldr	r3, [r3, #0]
 800ef60:	f042 0201 	orr.w	r2, r2, #1
 800ef64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef66:	e008      	b.n	800ef7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ef68:	687b      	ldr	r3, [r7, #4]
 800ef6a:	681b      	ldr	r3, [r3, #0]
 800ef6c:	681a      	ldr	r2, [r3, #0]
 800ef6e:	687b      	ldr	r3, [r7, #4]
 800ef70:	681b      	ldr	r3, [r3, #0]
 800ef72:	f042 0201 	orr.w	r2, r2, #1
 800ef76:	601a      	str	r2, [r3, #0]
 800ef78:	e000      	b.n	800ef7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ef7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3714      	adds	r7, #20
 800ef82:	46bd      	mov	sp, r7
 800ef84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef88:	4770      	bx	lr
 800ef8a:	bf00      	nop
 800ef8c:	40010000 	.word	0x40010000
 800ef90:	40000400 	.word	0x40000400
 800ef94:	40000800 	.word	0x40000800
 800ef98:	40000c00 	.word	0x40000c00
 800ef9c:	40010400 	.word	0x40010400
 800efa0:	40014000 	.word	0x40014000
 800efa4:	40001800 	.word	0x40001800
 800efa8:	00010007 	.word	0x00010007

0800efac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800efac:	b580      	push	{r7, lr}
 800efae:	b082      	sub	sp, #8
 800efb0:	af00      	add	r7, sp, #0
 800efb2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800efb4:	687b      	ldr	r3, [r7, #4]
 800efb6:	681b      	ldr	r3, [r3, #0]
 800efb8:	691b      	ldr	r3, [r3, #16]
 800efba:	f003 0302 	and.w	r3, r3, #2
 800efbe:	2b02      	cmp	r3, #2
 800efc0:	d122      	bne.n	800f008 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	68db      	ldr	r3, [r3, #12]
 800efc8:	f003 0302 	and.w	r3, r3, #2
 800efcc:	2b02      	cmp	r3, #2
 800efce:	d11b      	bne.n	800f008 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800efd0:	687b      	ldr	r3, [r7, #4]
 800efd2:	681b      	ldr	r3, [r3, #0]
 800efd4:	f06f 0202 	mvn.w	r2, #2
 800efd8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800efda:	687b      	ldr	r3, [r7, #4]
 800efdc:	2201      	movs	r2, #1
 800efde:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800efe0:	687b      	ldr	r3, [r7, #4]
 800efe2:	681b      	ldr	r3, [r3, #0]
 800efe4:	699b      	ldr	r3, [r3, #24]
 800efe6:	f003 0303 	and.w	r3, r3, #3
 800efea:	2b00      	cmp	r3, #0
 800efec:	d003      	beq.n	800eff6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800efee:	6878      	ldr	r0, [r7, #4]
 800eff0:	f000 f905 	bl	800f1fe <HAL_TIM_IC_CaptureCallback>
 800eff4:	e005      	b.n	800f002 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800eff6:	6878      	ldr	r0, [r7, #4]
 800eff8:	f000 f8f7 	bl	800f1ea <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800effc:	6878      	ldr	r0, [r7, #4]
 800effe:	f000 f908 	bl	800f212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f002:	687b      	ldr	r3, [r7, #4]
 800f004:	2200      	movs	r2, #0
 800f006:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800f008:	687b      	ldr	r3, [r7, #4]
 800f00a:	681b      	ldr	r3, [r3, #0]
 800f00c:	691b      	ldr	r3, [r3, #16]
 800f00e:	f003 0304 	and.w	r3, r3, #4
 800f012:	2b04      	cmp	r3, #4
 800f014:	d122      	bne.n	800f05c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800f016:	687b      	ldr	r3, [r7, #4]
 800f018:	681b      	ldr	r3, [r3, #0]
 800f01a:	68db      	ldr	r3, [r3, #12]
 800f01c:	f003 0304 	and.w	r3, r3, #4
 800f020:	2b04      	cmp	r3, #4
 800f022:	d11b      	bne.n	800f05c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	681b      	ldr	r3, [r3, #0]
 800f028:	f06f 0204 	mvn.w	r2, #4
 800f02c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	2202      	movs	r2, #2
 800f032:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800f034:	687b      	ldr	r3, [r7, #4]
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d003      	beq.n	800f04a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f042:	6878      	ldr	r0, [r7, #4]
 800f044:	f000 f8db 	bl	800f1fe <HAL_TIM_IC_CaptureCallback>
 800f048:	e005      	b.n	800f056 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f04a:	6878      	ldr	r0, [r7, #4]
 800f04c:	f000 f8cd 	bl	800f1ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f050:	6878      	ldr	r0, [r7, #4]
 800f052:	f000 f8de 	bl	800f212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f056:	687b      	ldr	r3, [r7, #4]
 800f058:	2200      	movs	r2, #0
 800f05a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800f05c:	687b      	ldr	r3, [r7, #4]
 800f05e:	681b      	ldr	r3, [r3, #0]
 800f060:	691b      	ldr	r3, [r3, #16]
 800f062:	f003 0308 	and.w	r3, r3, #8
 800f066:	2b08      	cmp	r3, #8
 800f068:	d122      	bne.n	800f0b0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	681b      	ldr	r3, [r3, #0]
 800f06e:	68db      	ldr	r3, [r3, #12]
 800f070:	f003 0308 	and.w	r3, r3, #8
 800f074:	2b08      	cmp	r3, #8
 800f076:	d11b      	bne.n	800f0b0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800f078:	687b      	ldr	r3, [r7, #4]
 800f07a:	681b      	ldr	r3, [r3, #0]
 800f07c:	f06f 0208 	mvn.w	r2, #8
 800f080:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	2204      	movs	r2, #4
 800f086:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800f088:	687b      	ldr	r3, [r7, #4]
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	69db      	ldr	r3, [r3, #28]
 800f08e:	f003 0303 	and.w	r3, r3, #3
 800f092:	2b00      	cmp	r3, #0
 800f094:	d003      	beq.n	800f09e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f096:	6878      	ldr	r0, [r7, #4]
 800f098:	f000 f8b1 	bl	800f1fe <HAL_TIM_IC_CaptureCallback>
 800f09c:	e005      	b.n	800f0aa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f09e:	6878      	ldr	r0, [r7, #4]
 800f0a0:	f000 f8a3 	bl	800f1ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0a4:	6878      	ldr	r0, [r7, #4]
 800f0a6:	f000 f8b4 	bl	800f212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2200      	movs	r2, #0
 800f0ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800f0b0:	687b      	ldr	r3, [r7, #4]
 800f0b2:	681b      	ldr	r3, [r3, #0]
 800f0b4:	691b      	ldr	r3, [r3, #16]
 800f0b6:	f003 0310 	and.w	r3, r3, #16
 800f0ba:	2b10      	cmp	r3, #16
 800f0bc:	d122      	bne.n	800f104 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	681b      	ldr	r3, [r3, #0]
 800f0c2:	68db      	ldr	r3, [r3, #12]
 800f0c4:	f003 0310 	and.w	r3, r3, #16
 800f0c8:	2b10      	cmp	r3, #16
 800f0ca:	d11b      	bne.n	800f104 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800f0cc:	687b      	ldr	r3, [r7, #4]
 800f0ce:	681b      	ldr	r3, [r3, #0]
 800f0d0:	f06f 0210 	mvn.w	r2, #16
 800f0d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800f0d6:	687b      	ldr	r3, [r7, #4]
 800f0d8:	2208      	movs	r2, #8
 800f0da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	681b      	ldr	r3, [r3, #0]
 800f0e0:	69db      	ldr	r3, [r3, #28]
 800f0e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	d003      	beq.n	800f0f2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800f0ea:	6878      	ldr	r0, [r7, #4]
 800f0ec:	f000 f887 	bl	800f1fe <HAL_TIM_IC_CaptureCallback>
 800f0f0:	e005      	b.n	800f0fe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800f0f2:	6878      	ldr	r0, [r7, #4]
 800f0f4:	f000 f879 	bl	800f1ea <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800f0f8:	6878      	ldr	r0, [r7, #4]
 800f0fa:	f000 f88a 	bl	800f212 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800f0fe:	687b      	ldr	r3, [r7, #4]
 800f100:	2200      	movs	r2, #0
 800f102:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800f104:	687b      	ldr	r3, [r7, #4]
 800f106:	681b      	ldr	r3, [r3, #0]
 800f108:	691b      	ldr	r3, [r3, #16]
 800f10a:	f003 0301 	and.w	r3, r3, #1
 800f10e:	2b01      	cmp	r3, #1
 800f110:	d10e      	bne.n	800f130 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800f112:	687b      	ldr	r3, [r7, #4]
 800f114:	681b      	ldr	r3, [r3, #0]
 800f116:	68db      	ldr	r3, [r3, #12]
 800f118:	f003 0301 	and.w	r3, r3, #1
 800f11c:	2b01      	cmp	r3, #1
 800f11e:	d107      	bne.n	800f130 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800f120:	687b      	ldr	r3, [r7, #4]
 800f122:	681b      	ldr	r3, [r3, #0]
 800f124:	f06f 0201 	mvn.w	r2, #1
 800f128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800f12a:	6878      	ldr	r0, [r7, #4]
 800f12c:	f7f2 fea6 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800f130:	687b      	ldr	r3, [r7, #4]
 800f132:	681b      	ldr	r3, [r3, #0]
 800f134:	691b      	ldr	r3, [r3, #16]
 800f136:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f13a:	2b80      	cmp	r3, #128	; 0x80
 800f13c:	d10e      	bne.n	800f15c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f13e:	687b      	ldr	r3, [r7, #4]
 800f140:	681b      	ldr	r3, [r3, #0]
 800f142:	68db      	ldr	r3, [r3, #12]
 800f144:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f148:	2b80      	cmp	r3, #128	; 0x80
 800f14a:	d107      	bne.n	800f15c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800f154:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800f156:	6878      	ldr	r0, [r7, #4]
 800f158:	f000 f9a8 	bl	800f4ac <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800f15c:	687b      	ldr	r3, [r7, #4]
 800f15e:	681b      	ldr	r3, [r3, #0]
 800f160:	691b      	ldr	r3, [r3, #16]
 800f162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f166:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800f16a:	d10e      	bne.n	800f18a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800f16c:	687b      	ldr	r3, [r7, #4]
 800f16e:	681b      	ldr	r3, [r3, #0]
 800f170:	68db      	ldr	r3, [r3, #12]
 800f172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f176:	2b80      	cmp	r3, #128	; 0x80
 800f178:	d107      	bne.n	800f18a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800f17a:	687b      	ldr	r3, [r7, #4]
 800f17c:	681b      	ldr	r3, [r3, #0]
 800f17e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800f182:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800f184:	6878      	ldr	r0, [r7, #4]
 800f186:	f000 f99b 	bl	800f4c0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	681b      	ldr	r3, [r3, #0]
 800f18e:	691b      	ldr	r3, [r3, #16]
 800f190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f194:	2b40      	cmp	r3, #64	; 0x40
 800f196:	d10e      	bne.n	800f1b6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	681b      	ldr	r3, [r3, #0]
 800f19c:	68db      	ldr	r3, [r3, #12]
 800f19e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1a2:	2b40      	cmp	r3, #64	; 0x40
 800f1a4:	d107      	bne.n	800f1b6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800f1ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800f1b0:	6878      	ldr	r0, [r7, #4]
 800f1b2:	f000 f838 	bl	800f226 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	681b      	ldr	r3, [r3, #0]
 800f1ba:	691b      	ldr	r3, [r3, #16]
 800f1bc:	f003 0320 	and.w	r3, r3, #32
 800f1c0:	2b20      	cmp	r3, #32
 800f1c2:	d10e      	bne.n	800f1e2 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	681b      	ldr	r3, [r3, #0]
 800f1c8:	68db      	ldr	r3, [r3, #12]
 800f1ca:	f003 0320 	and.w	r3, r3, #32
 800f1ce:	2b20      	cmp	r3, #32
 800f1d0:	d107      	bne.n	800f1e2 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800f1d2:	687b      	ldr	r3, [r7, #4]
 800f1d4:	681b      	ldr	r3, [r3, #0]
 800f1d6:	f06f 0220 	mvn.w	r2, #32
 800f1da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800f1dc:	6878      	ldr	r0, [r7, #4]
 800f1de:	f000 f95b 	bl	800f498 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800f1e2:	bf00      	nop
 800f1e4:	3708      	adds	r7, #8
 800f1e6:	46bd      	mov	sp, r7
 800f1e8:	bd80      	pop	{r7, pc}

0800f1ea <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800f1ea:	b480      	push	{r7}
 800f1ec:	b083      	sub	sp, #12
 800f1ee:	af00      	add	r7, sp, #0
 800f1f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800f1f2:	bf00      	nop
 800f1f4:	370c      	adds	r7, #12
 800f1f6:	46bd      	mov	sp, r7
 800f1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1fc:	4770      	bx	lr

0800f1fe <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800f1fe:	b480      	push	{r7}
 800f200:	b083      	sub	sp, #12
 800f202:	af00      	add	r7, sp, #0
 800f204:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800f206:	bf00      	nop
 800f208:	370c      	adds	r7, #12
 800f20a:	46bd      	mov	sp, r7
 800f20c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f210:	4770      	bx	lr

0800f212 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800f212:	b480      	push	{r7}
 800f214:	b083      	sub	sp, #12
 800f216:	af00      	add	r7, sp, #0
 800f218:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800f21a:	bf00      	nop
 800f21c:	370c      	adds	r7, #12
 800f21e:	46bd      	mov	sp, r7
 800f220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f224:	4770      	bx	lr

0800f226 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800f226:	b480      	push	{r7}
 800f228:	b083      	sub	sp, #12
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800f22e:	bf00      	nop
 800f230:	370c      	adds	r7, #12
 800f232:	46bd      	mov	sp, r7
 800f234:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f238:	4770      	bx	lr
	...

0800f23c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800f23c:	b480      	push	{r7}
 800f23e:	b085      	sub	sp, #20
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	681b      	ldr	r3, [r3, #0]
 800f24a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800f24c:	687b      	ldr	r3, [r7, #4]
 800f24e:	4a40      	ldr	r2, [pc, #256]	; (800f350 <TIM_Base_SetConfig+0x114>)
 800f250:	4293      	cmp	r3, r2
 800f252:	d013      	beq.n	800f27c <TIM_Base_SetConfig+0x40>
 800f254:	687b      	ldr	r3, [r7, #4]
 800f256:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f25a:	d00f      	beq.n	800f27c <TIM_Base_SetConfig+0x40>
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	4a3d      	ldr	r2, [pc, #244]	; (800f354 <TIM_Base_SetConfig+0x118>)
 800f260:	4293      	cmp	r3, r2
 800f262:	d00b      	beq.n	800f27c <TIM_Base_SetConfig+0x40>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	4a3c      	ldr	r2, [pc, #240]	; (800f358 <TIM_Base_SetConfig+0x11c>)
 800f268:	4293      	cmp	r3, r2
 800f26a:	d007      	beq.n	800f27c <TIM_Base_SetConfig+0x40>
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	4a3b      	ldr	r2, [pc, #236]	; (800f35c <TIM_Base_SetConfig+0x120>)
 800f270:	4293      	cmp	r3, r2
 800f272:	d003      	beq.n	800f27c <TIM_Base_SetConfig+0x40>
 800f274:	687b      	ldr	r3, [r7, #4]
 800f276:	4a3a      	ldr	r2, [pc, #232]	; (800f360 <TIM_Base_SetConfig+0x124>)
 800f278:	4293      	cmp	r3, r2
 800f27a:	d108      	bne.n	800f28e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f282:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800f284:	683b      	ldr	r3, [r7, #0]
 800f286:	685b      	ldr	r3, [r3, #4]
 800f288:	68fa      	ldr	r2, [r7, #12]
 800f28a:	4313      	orrs	r3, r2
 800f28c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	4a2f      	ldr	r2, [pc, #188]	; (800f350 <TIM_Base_SetConfig+0x114>)
 800f292:	4293      	cmp	r3, r2
 800f294:	d02b      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f29c:	d027      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	4a2c      	ldr	r2, [pc, #176]	; (800f354 <TIM_Base_SetConfig+0x118>)
 800f2a2:	4293      	cmp	r3, r2
 800f2a4:	d023      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	4a2b      	ldr	r2, [pc, #172]	; (800f358 <TIM_Base_SetConfig+0x11c>)
 800f2aa:	4293      	cmp	r3, r2
 800f2ac:	d01f      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2ae:	687b      	ldr	r3, [r7, #4]
 800f2b0:	4a2a      	ldr	r2, [pc, #168]	; (800f35c <TIM_Base_SetConfig+0x120>)
 800f2b2:	4293      	cmp	r3, r2
 800f2b4:	d01b      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2b6:	687b      	ldr	r3, [r7, #4]
 800f2b8:	4a29      	ldr	r2, [pc, #164]	; (800f360 <TIM_Base_SetConfig+0x124>)
 800f2ba:	4293      	cmp	r3, r2
 800f2bc:	d017      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	4a28      	ldr	r2, [pc, #160]	; (800f364 <TIM_Base_SetConfig+0x128>)
 800f2c2:	4293      	cmp	r3, r2
 800f2c4:	d013      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	4a27      	ldr	r2, [pc, #156]	; (800f368 <TIM_Base_SetConfig+0x12c>)
 800f2ca:	4293      	cmp	r3, r2
 800f2cc:	d00f      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2ce:	687b      	ldr	r3, [r7, #4]
 800f2d0:	4a26      	ldr	r2, [pc, #152]	; (800f36c <TIM_Base_SetConfig+0x130>)
 800f2d2:	4293      	cmp	r3, r2
 800f2d4:	d00b      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	4a25      	ldr	r2, [pc, #148]	; (800f370 <TIM_Base_SetConfig+0x134>)
 800f2da:	4293      	cmp	r3, r2
 800f2dc:	d007      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	4a24      	ldr	r2, [pc, #144]	; (800f374 <TIM_Base_SetConfig+0x138>)
 800f2e2:	4293      	cmp	r3, r2
 800f2e4:	d003      	beq.n	800f2ee <TIM_Base_SetConfig+0xb2>
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	4a23      	ldr	r2, [pc, #140]	; (800f378 <TIM_Base_SetConfig+0x13c>)
 800f2ea:	4293      	cmp	r3, r2
 800f2ec:	d108      	bne.n	800f300 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800f2ee:	68fb      	ldr	r3, [r7, #12]
 800f2f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800f2f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	68db      	ldr	r3, [r3, #12]
 800f2fa:	68fa      	ldr	r2, [r7, #12]
 800f2fc:	4313      	orrs	r3, r2
 800f2fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800f300:	68fb      	ldr	r3, [r7, #12]
 800f302:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800f306:	683b      	ldr	r3, [r7, #0]
 800f308:	695b      	ldr	r3, [r3, #20]
 800f30a:	4313      	orrs	r3, r2
 800f30c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	68fa      	ldr	r2, [r7, #12]
 800f312:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800f314:	683b      	ldr	r3, [r7, #0]
 800f316:	689a      	ldr	r2, [r3, #8]
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800f31c:	683b      	ldr	r3, [r7, #0]
 800f31e:	681a      	ldr	r2, [r3, #0]
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	4a0a      	ldr	r2, [pc, #40]	; (800f350 <TIM_Base_SetConfig+0x114>)
 800f328:	4293      	cmp	r3, r2
 800f32a:	d003      	beq.n	800f334 <TIM_Base_SetConfig+0xf8>
 800f32c:	687b      	ldr	r3, [r7, #4]
 800f32e:	4a0c      	ldr	r2, [pc, #48]	; (800f360 <TIM_Base_SetConfig+0x124>)
 800f330:	4293      	cmp	r3, r2
 800f332:	d103      	bne.n	800f33c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800f334:	683b      	ldr	r3, [r7, #0]
 800f336:	691a      	ldr	r2, [r3, #16]
 800f338:	687b      	ldr	r3, [r7, #4]
 800f33a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800f33c:	687b      	ldr	r3, [r7, #4]
 800f33e:	2201      	movs	r2, #1
 800f340:	615a      	str	r2, [r3, #20]
}
 800f342:	bf00      	nop
 800f344:	3714      	adds	r7, #20
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr
 800f34e:	bf00      	nop
 800f350:	40010000 	.word	0x40010000
 800f354:	40000400 	.word	0x40000400
 800f358:	40000800 	.word	0x40000800
 800f35c:	40000c00 	.word	0x40000c00
 800f360:	40010400 	.word	0x40010400
 800f364:	40014000 	.word	0x40014000
 800f368:	40014400 	.word	0x40014400
 800f36c:	40014800 	.word	0x40014800
 800f370:	40001800 	.word	0x40001800
 800f374:	40001c00 	.word	0x40001c00
 800f378:	40002000 	.word	0x40002000

0800f37c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800f37c:	b480      	push	{r7}
 800f37e:	b085      	sub	sp, #20
 800f380:	af00      	add	r7, sp, #0
 800f382:	6078      	str	r0, [r7, #4]
 800f384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d101      	bne.n	800f394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800f390:	2302      	movs	r3, #2
 800f392:	e06d      	b.n	800f470 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	2201      	movs	r2, #1
 800f398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	2202      	movs	r2, #2
 800f3a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800f3a4:	687b      	ldr	r3, [r7, #4]
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	685b      	ldr	r3, [r3, #4]
 800f3aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	681b      	ldr	r3, [r3, #0]
 800f3b0:	689b      	ldr	r3, [r3, #8]
 800f3b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	681b      	ldr	r3, [r3, #0]
 800f3b8:	4a30      	ldr	r2, [pc, #192]	; (800f47c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f3ba:	4293      	cmp	r3, r2
 800f3bc:	d004      	beq.n	800f3c8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800f3be:	687b      	ldr	r3, [r7, #4]
 800f3c0:	681b      	ldr	r3, [r3, #0]
 800f3c2:	4a2f      	ldr	r2, [pc, #188]	; (800f480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f3c4:	4293      	cmp	r3, r2
 800f3c6:	d108      	bne.n	800f3da <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800f3ce:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800f3d0:	683b      	ldr	r3, [r7, #0]
 800f3d2:	685b      	ldr	r3, [r3, #4]
 800f3d4:	68fa      	ldr	r2, [r7, #12]
 800f3d6:	4313      	orrs	r3, r2
 800f3d8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800f3da:	68fb      	ldr	r3, [r7, #12]
 800f3dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800f3e0:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800f3e2:	683b      	ldr	r3, [r7, #0]
 800f3e4:	681b      	ldr	r3, [r3, #0]
 800f3e6:	68fa      	ldr	r2, [r7, #12]
 800f3e8:	4313      	orrs	r3, r2
 800f3ea:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	681b      	ldr	r3, [r3, #0]
 800f3f0:	68fa      	ldr	r2, [r7, #12]
 800f3f2:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	681b      	ldr	r3, [r3, #0]
 800f3f8:	4a20      	ldr	r2, [pc, #128]	; (800f47c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 800f3fa:	4293      	cmp	r3, r2
 800f3fc:	d022      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	681b      	ldr	r3, [r3, #0]
 800f402:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800f406:	d01d      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	4a1d      	ldr	r2, [pc, #116]	; (800f484 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800f40e:	4293      	cmp	r3, r2
 800f410:	d018      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	4a1c      	ldr	r2, [pc, #112]	; (800f488 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 800f418:	4293      	cmp	r3, r2
 800f41a:	d013      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f41c:	687b      	ldr	r3, [r7, #4]
 800f41e:	681b      	ldr	r3, [r3, #0]
 800f420:	4a1a      	ldr	r2, [pc, #104]	; (800f48c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800f422:	4293      	cmp	r3, r2
 800f424:	d00e      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	4a15      	ldr	r2, [pc, #84]	; (800f480 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800f42c:	4293      	cmp	r3, r2
 800f42e:	d009      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f430:	687b      	ldr	r3, [r7, #4]
 800f432:	681b      	ldr	r3, [r3, #0]
 800f434:	4a16      	ldr	r2, [pc, #88]	; (800f490 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800f436:	4293      	cmp	r3, r2
 800f438:	d004      	beq.n	800f444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800f43a:	687b      	ldr	r3, [r7, #4]
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	4a15      	ldr	r2, [pc, #84]	; (800f494 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800f440:	4293      	cmp	r3, r2
 800f442:	d10c      	bne.n	800f45e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800f444:	68bb      	ldr	r3, [r7, #8]
 800f446:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800f44a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	689b      	ldr	r3, [r3, #8]
 800f450:	68ba      	ldr	r2, [r7, #8]
 800f452:	4313      	orrs	r3, r2
 800f454:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800f456:	687b      	ldr	r3, [r7, #4]
 800f458:	681b      	ldr	r3, [r3, #0]
 800f45a:	68ba      	ldr	r2, [r7, #8]
 800f45c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2201      	movs	r2, #1
 800f462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2200      	movs	r2, #0
 800f46a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800f46e:	2300      	movs	r3, #0
}
 800f470:	4618      	mov	r0, r3
 800f472:	3714      	adds	r7, #20
 800f474:	46bd      	mov	sp, r7
 800f476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f47a:	4770      	bx	lr
 800f47c:	40010000 	.word	0x40010000
 800f480:	40010400 	.word	0x40010400
 800f484:	40000400 	.word	0x40000400
 800f488:	40000800 	.word	0x40000800
 800f48c:	40000c00 	.word	0x40000c00
 800f490:	40014000 	.word	0x40014000
 800f494:	40001800 	.word	0x40001800

0800f498 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800f498:	b480      	push	{r7}
 800f49a:	b083      	sub	sp, #12
 800f49c:	af00      	add	r7, sp, #0
 800f49e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800f4a0:	bf00      	nop
 800f4a2:	370c      	adds	r7, #12
 800f4a4:	46bd      	mov	sp, r7
 800f4a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4aa:	4770      	bx	lr

0800f4ac <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800f4ac:	b480      	push	{r7}
 800f4ae:	b083      	sub	sp, #12
 800f4b0:	af00      	add	r7, sp, #0
 800f4b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800f4b4:	bf00      	nop
 800f4b6:	370c      	adds	r7, #12
 800f4b8:	46bd      	mov	sp, r7
 800f4ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4be:	4770      	bx	lr

0800f4c0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b083      	sub	sp, #12
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800f4c8:	bf00      	nop
 800f4ca:	370c      	adds	r7, #12
 800f4cc:	46bd      	mov	sp, r7
 800f4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4d2:	4770      	bx	lr

0800f4d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800f4d4:	b580      	push	{r7, lr}
 800f4d6:	b082      	sub	sp, #8
 800f4d8:	af00      	add	r7, sp, #0
 800f4da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	2b00      	cmp	r3, #0
 800f4e0:	d101      	bne.n	800f4e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800f4e2:	2301      	movs	r3, #1
 800f4e4:	e040      	b.n	800f568 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f4ea:	2b00      	cmp	r3, #0
 800f4ec:	d106      	bne.n	800f4fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	2200      	movs	r2, #0
 800f4f2:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800f4f6:	6878      	ldr	r0, [r7, #4]
 800f4f8:	f7fb f926 	bl	800a748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	2224      	movs	r2, #36	; 0x24
 800f500:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	681b      	ldr	r3, [r3, #0]
 800f506:	681a      	ldr	r2, [r3, #0]
 800f508:	687b      	ldr	r3, [r7, #4]
 800f50a:	681b      	ldr	r3, [r3, #0]
 800f50c:	f022 0201 	bic.w	r2, r2, #1
 800f510:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800f512:	6878      	ldr	r0, [r7, #4]
 800f514:	f000 fd08 	bl	800ff28 <UART_SetConfig>
 800f518:	4603      	mov	r3, r0
 800f51a:	2b01      	cmp	r3, #1
 800f51c:	d101      	bne.n	800f522 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800f51e:	2301      	movs	r3, #1
 800f520:	e022      	b.n	800f568 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f526:	2b00      	cmp	r3, #0
 800f528:	d002      	beq.n	800f530 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f000 ff60 	bl	80103f0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800f530:	687b      	ldr	r3, [r7, #4]
 800f532:	681b      	ldr	r3, [r3, #0]
 800f534:	685a      	ldr	r2, [r3, #4]
 800f536:	687b      	ldr	r3, [r7, #4]
 800f538:	681b      	ldr	r3, [r3, #0]
 800f53a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800f53e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	681b      	ldr	r3, [r3, #0]
 800f544:	689a      	ldr	r2, [r3, #8]
 800f546:	687b      	ldr	r3, [r7, #4]
 800f548:	681b      	ldr	r3, [r3, #0]
 800f54a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800f54e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800f550:	687b      	ldr	r3, [r7, #4]
 800f552:	681b      	ldr	r3, [r3, #0]
 800f554:	681a      	ldr	r2, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	f042 0201 	orr.w	r2, r2, #1
 800f55e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800f560:	6878      	ldr	r0, [r7, #4]
 800f562:	f000 ffe7 	bl	8010534 <UART_CheckIdleState>
 800f566:	4603      	mov	r3, r0
}
 800f568:	4618      	mov	r0, r3
 800f56a:	3708      	adds	r7, #8
 800f56c:	46bd      	mov	sp, r7
 800f56e:	bd80      	pop	{r7, pc}

0800f570 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f570:	b580      	push	{r7, lr}
 800f572:	b08a      	sub	sp, #40	; 0x28
 800f574:	af02      	add	r7, sp, #8
 800f576:	60f8      	str	r0, [r7, #12]
 800f578:	60b9      	str	r1, [r7, #8]
 800f57a:	603b      	str	r3, [r7, #0]
 800f57c:	4613      	mov	r3, r2
 800f57e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f584:	2b20      	cmp	r3, #32
 800f586:	d171      	bne.n	800f66c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 800f588:	68bb      	ldr	r3, [r7, #8]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d002      	beq.n	800f594 <HAL_UART_Transmit+0x24>
 800f58e:	88fb      	ldrh	r3, [r7, #6]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d101      	bne.n	800f598 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800f594:	2301      	movs	r3, #1
 800f596:	e06a      	b.n	800f66e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f598:	68fb      	ldr	r3, [r7, #12]
 800f59a:	2200      	movs	r2, #0
 800f59c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2221      	movs	r2, #33	; 0x21
 800f5a4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f5a6:	f7fb fe37 	bl	800b218 <HAL_GetTick>
 800f5aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800f5ac:	68fb      	ldr	r3, [r7, #12]
 800f5ae:	88fa      	ldrh	r2, [r7, #6]
 800f5b0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	88fa      	ldrh	r2, [r7, #6]
 800f5b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f5bc:	68fb      	ldr	r3, [r7, #12]
 800f5be:	689b      	ldr	r3, [r3, #8]
 800f5c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f5c4:	d108      	bne.n	800f5d8 <HAL_UART_Transmit+0x68>
 800f5c6:	68fb      	ldr	r3, [r7, #12]
 800f5c8:	691b      	ldr	r3, [r3, #16]
 800f5ca:	2b00      	cmp	r3, #0
 800f5cc:	d104      	bne.n	800f5d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 800f5ce:	2300      	movs	r3, #0
 800f5d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800f5d2:	68bb      	ldr	r3, [r7, #8]
 800f5d4:	61bb      	str	r3, [r7, #24]
 800f5d6:	e003      	b.n	800f5e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 800f5d8:	68bb      	ldr	r3, [r7, #8]
 800f5da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f5dc:	2300      	movs	r3, #0
 800f5de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800f5e0:	e02c      	b.n	800f63c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800f5e2:	683b      	ldr	r3, [r7, #0]
 800f5e4:	9300      	str	r3, [sp, #0]
 800f5e6:	697b      	ldr	r3, [r7, #20]
 800f5e8:	2200      	movs	r2, #0
 800f5ea:	2180      	movs	r1, #128	; 0x80
 800f5ec:	68f8      	ldr	r0, [r7, #12]
 800f5ee:	f000 ffd8 	bl	80105a2 <UART_WaitOnFlagUntilTimeout>
 800f5f2:	4603      	mov	r3, r0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d001      	beq.n	800f5fc <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800f5f8:	2303      	movs	r3, #3
 800f5fa:	e038      	b.n	800f66e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 800f5fc:	69fb      	ldr	r3, [r7, #28]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d10b      	bne.n	800f61a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800f602:	69bb      	ldr	r3, [r7, #24]
 800f604:	881b      	ldrh	r3, [r3, #0]
 800f606:	461a      	mov	r2, r3
 800f608:	68fb      	ldr	r3, [r7, #12]
 800f60a:	681b      	ldr	r3, [r3, #0]
 800f60c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800f610:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800f612:	69bb      	ldr	r3, [r7, #24]
 800f614:	3302      	adds	r3, #2
 800f616:	61bb      	str	r3, [r7, #24]
 800f618:	e007      	b.n	800f62a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800f61a:	69fb      	ldr	r3, [r7, #28]
 800f61c:	781a      	ldrb	r2, [r3, #0]
 800f61e:	68fb      	ldr	r3, [r7, #12]
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800f624:	69fb      	ldr	r3, [r7, #28]
 800f626:	3301      	adds	r3, #1
 800f628:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800f62a:	68fb      	ldr	r3, [r7, #12]
 800f62c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f630:	b29b      	uxth	r3, r3
 800f632:	3b01      	subs	r3, #1
 800f634:	b29a      	uxth	r2, r3
 800f636:	68fb      	ldr	r3, [r7, #12]
 800f638:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800f642:	b29b      	uxth	r3, r3
 800f644:	2b00      	cmp	r3, #0
 800f646:	d1cc      	bne.n	800f5e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	9300      	str	r3, [sp, #0]
 800f64c:	697b      	ldr	r3, [r7, #20]
 800f64e:	2200      	movs	r2, #0
 800f650:	2140      	movs	r1, #64	; 0x40
 800f652:	68f8      	ldr	r0, [r7, #12]
 800f654:	f000 ffa5 	bl	80105a2 <UART_WaitOnFlagUntilTimeout>
 800f658:	4603      	mov	r3, r0
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d001      	beq.n	800f662 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 800f65e:	2303      	movs	r3, #3
 800f660:	e005      	b.n	800f66e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800f662:	68fb      	ldr	r3, [r7, #12]
 800f664:	2220      	movs	r2, #32
 800f666:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800f668:	2300      	movs	r3, #0
 800f66a:	e000      	b.n	800f66e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 800f66c:	2302      	movs	r3, #2
  }
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3720      	adds	r7, #32
 800f672:	46bd      	mov	sp, r7
 800f674:	bd80      	pop	{r7, pc}

0800f676 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800f676:	b580      	push	{r7, lr}
 800f678:	b08a      	sub	sp, #40	; 0x28
 800f67a:	af02      	add	r7, sp, #8
 800f67c:	60f8      	str	r0, [r7, #12]
 800f67e:	60b9      	str	r1, [r7, #8]
 800f680:	603b      	str	r3, [r7, #0]
 800f682:	4613      	mov	r3, r2
 800f684:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f68c:	2b20      	cmp	r3, #32
 800f68e:	f040 80b1 	bne.w	800f7f4 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f692:	68bb      	ldr	r3, [r7, #8]
 800f694:	2b00      	cmp	r3, #0
 800f696:	d002      	beq.n	800f69e <HAL_UART_Receive+0x28>
 800f698:	88fb      	ldrh	r3, [r7, #6]
 800f69a:	2b00      	cmp	r3, #0
 800f69c:	d101      	bne.n	800f6a2 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 800f69e:	2301      	movs	r3, #1
 800f6a0:	e0a9      	b.n	800f7f6 <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f6a2:	68fb      	ldr	r3, [r7, #12]
 800f6a4:	2200      	movs	r2, #0
 800f6a6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	2222      	movs	r2, #34	; 0x22
 800f6ae:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f6b2:	68fb      	ldr	r3, [r7, #12]
 800f6b4:	2200      	movs	r2, #0
 800f6b6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800f6b8:	f7fb fdae 	bl	800b218 <HAL_GetTick>
 800f6bc:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 800f6be:	68fb      	ldr	r3, [r7, #12]
 800f6c0:	88fa      	ldrh	r2, [r7, #6]
 800f6c2:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 800f6c6:	68fb      	ldr	r3, [r7, #12]
 800f6c8:	88fa      	ldrh	r2, [r7, #6]
 800f6ca:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 800f6ce:	68fb      	ldr	r3, [r7, #12]
 800f6d0:	689b      	ldr	r3, [r3, #8]
 800f6d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f6d6:	d10e      	bne.n	800f6f6 <HAL_UART_Receive+0x80>
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	691b      	ldr	r3, [r3, #16]
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d105      	bne.n	800f6ec <HAL_UART_Receive+0x76>
 800f6e0:	68fb      	ldr	r3, [r7, #12]
 800f6e2:	f240 12ff 	movw	r2, #511	; 0x1ff
 800f6e6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f6ea:	e02d      	b.n	800f748 <HAL_UART_Receive+0xd2>
 800f6ec:	68fb      	ldr	r3, [r7, #12]
 800f6ee:	22ff      	movs	r2, #255	; 0xff
 800f6f0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f6f4:	e028      	b.n	800f748 <HAL_UART_Receive+0xd2>
 800f6f6:	68fb      	ldr	r3, [r7, #12]
 800f6f8:	689b      	ldr	r3, [r3, #8]
 800f6fa:	2b00      	cmp	r3, #0
 800f6fc:	d10d      	bne.n	800f71a <HAL_UART_Receive+0xa4>
 800f6fe:	68fb      	ldr	r3, [r7, #12]
 800f700:	691b      	ldr	r3, [r3, #16]
 800f702:	2b00      	cmp	r3, #0
 800f704:	d104      	bne.n	800f710 <HAL_UART_Receive+0x9a>
 800f706:	68fb      	ldr	r3, [r7, #12]
 800f708:	22ff      	movs	r2, #255	; 0xff
 800f70a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f70e:	e01b      	b.n	800f748 <HAL_UART_Receive+0xd2>
 800f710:	68fb      	ldr	r3, [r7, #12]
 800f712:	227f      	movs	r2, #127	; 0x7f
 800f714:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f718:	e016      	b.n	800f748 <HAL_UART_Receive+0xd2>
 800f71a:	68fb      	ldr	r3, [r7, #12]
 800f71c:	689b      	ldr	r3, [r3, #8]
 800f71e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800f722:	d10d      	bne.n	800f740 <HAL_UART_Receive+0xca>
 800f724:	68fb      	ldr	r3, [r7, #12]
 800f726:	691b      	ldr	r3, [r3, #16]
 800f728:	2b00      	cmp	r3, #0
 800f72a:	d104      	bne.n	800f736 <HAL_UART_Receive+0xc0>
 800f72c:	68fb      	ldr	r3, [r7, #12]
 800f72e:	227f      	movs	r2, #127	; 0x7f
 800f730:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f734:	e008      	b.n	800f748 <HAL_UART_Receive+0xd2>
 800f736:	68fb      	ldr	r3, [r7, #12]
 800f738:	223f      	movs	r2, #63	; 0x3f
 800f73a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800f73e:	e003      	b.n	800f748 <HAL_UART_Receive+0xd2>
 800f740:	68fb      	ldr	r3, [r7, #12]
 800f742:	2200      	movs	r2, #0
 800f744:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800f74e:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	689b      	ldr	r3, [r3, #8]
 800f754:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f758:	d108      	bne.n	800f76c <HAL_UART_Receive+0xf6>
 800f75a:	68fb      	ldr	r3, [r7, #12]
 800f75c:	691b      	ldr	r3, [r3, #16]
 800f75e:	2b00      	cmp	r3, #0
 800f760:	d104      	bne.n	800f76c <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 800f762:	2300      	movs	r3, #0
 800f764:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800f766:	68bb      	ldr	r3, [r7, #8]
 800f768:	61bb      	str	r3, [r7, #24]
 800f76a:	e003      	b.n	800f774 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800f770:	2300      	movs	r3, #0
 800f772:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 800f774:	e032      	b.n	800f7dc <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	9300      	str	r3, [sp, #0]
 800f77a:	697b      	ldr	r3, [r7, #20]
 800f77c:	2200      	movs	r2, #0
 800f77e:	2120      	movs	r1, #32
 800f780:	68f8      	ldr	r0, [r7, #12]
 800f782:	f000 ff0e 	bl	80105a2 <UART_WaitOnFlagUntilTimeout>
 800f786:	4603      	mov	r3, r0
 800f788:	2b00      	cmp	r3, #0
 800f78a:	d001      	beq.n	800f790 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 800f78c:	2303      	movs	r3, #3
 800f78e:	e032      	b.n	800f7f6 <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	2b00      	cmp	r3, #0
 800f794:	d10c      	bne.n	800f7b0 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 800f796:	68fb      	ldr	r3, [r7, #12]
 800f798:	681b      	ldr	r3, [r3, #0]
 800f79a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f79c:	b29a      	uxth	r2, r3
 800f79e:	8a7b      	ldrh	r3, [r7, #18]
 800f7a0:	4013      	ands	r3, r2
 800f7a2:	b29a      	uxth	r2, r3
 800f7a4:	69bb      	ldr	r3, [r7, #24]
 800f7a6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800f7a8:	69bb      	ldr	r3, [r7, #24]
 800f7aa:	3302      	adds	r3, #2
 800f7ac:	61bb      	str	r3, [r7, #24]
 800f7ae:	e00c      	b.n	800f7ca <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 800f7b0:	68fb      	ldr	r3, [r7, #12]
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f7b6:	b2da      	uxtb	r2, r3
 800f7b8:	8a7b      	ldrh	r3, [r7, #18]
 800f7ba:	b2db      	uxtb	r3, r3
 800f7bc:	4013      	ands	r3, r2
 800f7be:	b2da      	uxtb	r2, r3
 800f7c0:	69fb      	ldr	r3, [r7, #28]
 800f7c2:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 800f7c4:	69fb      	ldr	r3, [r7, #28]
 800f7c6:	3301      	adds	r3, #1
 800f7c8:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f7d0:	b29b      	uxth	r3, r3
 800f7d2:	3b01      	subs	r3, #1
 800f7d4:	b29a      	uxth	r2, r3
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800f7e2:	b29b      	uxth	r3, r3
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	d1c6      	bne.n	800f776 <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	2220      	movs	r2, #32
 800f7ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800f7f0:	2300      	movs	r3, #0
 800f7f2:	e000      	b.n	800f7f6 <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 800f7f4:	2302      	movs	r3, #2
  }
}
 800f7f6:	4618      	mov	r0, r3
 800f7f8:	3720      	adds	r7, #32
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}
	...

0800f800 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800f800:	b480      	push	{r7}
 800f802:	b08b      	sub	sp, #44	; 0x2c
 800f804:	af00      	add	r7, sp, #0
 800f806:	60f8      	str	r0, [r7, #12]
 800f808:	60b9      	str	r1, [r7, #8]
 800f80a:	4613      	mov	r3, r2
 800f80c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800f80e:	68fb      	ldr	r3, [r7, #12]
 800f810:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f812:	2b20      	cmp	r3, #32
 800f814:	d147      	bne.n	800f8a6 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	2b00      	cmp	r3, #0
 800f81a:	d002      	beq.n	800f822 <HAL_UART_Transmit_IT+0x22>
 800f81c:	88fb      	ldrh	r3, [r7, #6]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d101      	bne.n	800f826 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800f822:	2301      	movs	r3, #1
 800f824:	e040      	b.n	800f8a8 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	68ba      	ldr	r2, [r7, #8]
 800f82a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800f82c:	68fb      	ldr	r3, [r7, #12]
 800f82e:	88fa      	ldrh	r2, [r7, #6]
 800f830:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	88fa      	ldrh	r2, [r7, #6]
 800f838:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800f83c:	68fb      	ldr	r3, [r7, #12]
 800f83e:	2200      	movs	r2, #0
 800f840:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800f842:	68fb      	ldr	r3, [r7, #12]
 800f844:	2200      	movs	r2, #0
 800f846:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800f84a:	68fb      	ldr	r3, [r7, #12]
 800f84c:	2221      	movs	r2, #33	; 0x21
 800f84e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800f850:	68fb      	ldr	r3, [r7, #12]
 800f852:	689b      	ldr	r3, [r3, #8]
 800f854:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f858:	d107      	bne.n	800f86a <HAL_UART_Transmit_IT+0x6a>
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	691b      	ldr	r3, [r3, #16]
 800f85e:	2b00      	cmp	r3, #0
 800f860:	d103      	bne.n	800f86a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800f862:	68fb      	ldr	r3, [r7, #12]
 800f864:	4a13      	ldr	r2, [pc, #76]	; (800f8b4 <HAL_UART_Transmit_IT+0xb4>)
 800f866:	66da      	str	r2, [r3, #108]	; 0x6c
 800f868:	e002      	b.n	800f870 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800f86a:	68fb      	ldr	r3, [r7, #12]
 800f86c:	4a12      	ldr	r2, [pc, #72]	; (800f8b8 <HAL_UART_Transmit_IT+0xb8>)
 800f86e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681b      	ldr	r3, [r3, #0]
 800f874:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f876:	697b      	ldr	r3, [r7, #20]
 800f878:	e853 3f00 	ldrex	r3, [r3]
 800f87c:	613b      	str	r3, [r7, #16]
   return(result);
 800f87e:	693b      	ldr	r3, [r7, #16]
 800f880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f884:	627b      	str	r3, [r7, #36]	; 0x24
 800f886:	68fb      	ldr	r3, [r7, #12]
 800f888:	681b      	ldr	r3, [r3, #0]
 800f88a:	461a      	mov	r2, r3
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	623b      	str	r3, [r7, #32]
 800f890:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f892:	69f9      	ldr	r1, [r7, #28]
 800f894:	6a3a      	ldr	r2, [r7, #32]
 800f896:	e841 2300 	strex	r3, r2, [r1]
 800f89a:	61bb      	str	r3, [r7, #24]
   return(result);
 800f89c:	69bb      	ldr	r3, [r7, #24]
 800f89e:	2b00      	cmp	r3, #0
 800f8a0:	d1e6      	bne.n	800f870 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800f8a2:	2300      	movs	r3, #0
 800f8a4:	e000      	b.n	800f8a8 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800f8a6:	2302      	movs	r3, #2
  }
}
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	372c      	adds	r7, #44	; 0x2c
 800f8ac:	46bd      	mov	sp, r7
 800f8ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f8b2:	4770      	bx	lr
 800f8b4:	08010a67 	.word	0x08010a67
 800f8b8:	080109b1 	.word	0x080109b1

0800f8bc <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800f8bc:	b580      	push	{r7, lr}
 800f8be:	b08a      	sub	sp, #40	; 0x28
 800f8c0:	af00      	add	r7, sp, #0
 800f8c2:	60f8      	str	r0, [r7, #12]
 800f8c4:	60b9      	str	r1, [r7, #8]
 800f8c6:	4613      	mov	r3, r2
 800f8c8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800f8ca:	68fb      	ldr	r3, [r7, #12]
 800f8cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800f8d0:	2b20      	cmp	r3, #32
 800f8d2:	d132      	bne.n	800f93a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800f8d4:	68bb      	ldr	r3, [r7, #8]
 800f8d6:	2b00      	cmp	r3, #0
 800f8d8:	d002      	beq.n	800f8e0 <HAL_UART_Receive_IT+0x24>
 800f8da:	88fb      	ldrh	r3, [r7, #6]
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	d101      	bne.n	800f8e4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800f8e0:	2301      	movs	r3, #1
 800f8e2:	e02b      	b.n	800f93c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	2200      	movs	r2, #0
 800f8e8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800f8ea:	68fb      	ldr	r3, [r7, #12]
 800f8ec:	681b      	ldr	r3, [r3, #0]
 800f8ee:	685b      	ldr	r3, [r3, #4]
 800f8f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800f8f4:	2b00      	cmp	r3, #0
 800f8f6:	d018      	beq.n	800f92a <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	681b      	ldr	r3, [r3, #0]
 800f8fc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800f8fe:	697b      	ldr	r3, [r7, #20]
 800f900:	e853 3f00 	ldrex	r3, [r3]
 800f904:	613b      	str	r3, [r7, #16]
   return(result);
 800f906:	693b      	ldr	r3, [r7, #16]
 800f908:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800f90c:	627b      	str	r3, [r7, #36]	; 0x24
 800f90e:	68fb      	ldr	r3, [r7, #12]
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	461a      	mov	r2, r3
 800f914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f916:	623b      	str	r3, [r7, #32]
 800f918:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800f91a:	69f9      	ldr	r1, [r7, #28]
 800f91c:	6a3a      	ldr	r2, [r7, #32]
 800f91e:	e841 2300 	strex	r3, r2, [r1]
 800f922:	61bb      	str	r3, [r7, #24]
   return(result);
 800f924:	69bb      	ldr	r3, [r7, #24]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d1e6      	bne.n	800f8f8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800f92a:	88fb      	ldrh	r3, [r7, #6]
 800f92c:	461a      	mov	r2, r3
 800f92e:	68b9      	ldr	r1, [r7, #8]
 800f930:	68f8      	ldr	r0, [r7, #12]
 800f932:	f000 fefd 	bl	8010730 <UART_Start_Receive_IT>
 800f936:	4603      	mov	r3, r0
 800f938:	e000      	b.n	800f93c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800f93a:	2302      	movs	r3, #2
  }
}
 800f93c:	4618      	mov	r0, r3
 800f93e:	3728      	adds	r7, #40	; 0x28
 800f940:	46bd      	mov	sp, r7
 800f942:	bd80      	pop	{r7, pc}

0800f944 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800f944:	b580      	push	{r7, lr}
 800f946:	b0ba      	sub	sp, #232	; 0xe8
 800f948:	af00      	add	r7, sp, #0
 800f94a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	681b      	ldr	r3, [r3, #0]
 800f950:	69db      	ldr	r3, [r3, #28]
 800f952:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	681b      	ldr	r3, [r3, #0]
 800f95a:	681b      	ldr	r3, [r3, #0]
 800f95c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800f960:	687b      	ldr	r3, [r7, #4]
 800f962:	681b      	ldr	r3, [r3, #0]
 800f964:	689b      	ldr	r3, [r3, #8]
 800f966:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800f96a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800f96e:	f640 030f 	movw	r3, #2063	; 0x80f
 800f972:	4013      	ands	r3, r2
 800f974:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800f978:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d115      	bne.n	800f9ac <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800f980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f984:	f003 0320 	and.w	r3, r3, #32
 800f988:	2b00      	cmp	r3, #0
 800f98a:	d00f      	beq.n	800f9ac <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800f98c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f990:	f003 0320 	and.w	r3, r3, #32
 800f994:	2b00      	cmp	r3, #0
 800f996:	d009      	beq.n	800f9ac <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	f000 8297 	beq.w	800fed0 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800f9a6:	6878      	ldr	r0, [r7, #4]
 800f9a8:	4798      	blx	r3
      }
      return;
 800f9aa:	e291      	b.n	800fed0 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800f9ac:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800f9b0:	2b00      	cmp	r3, #0
 800f9b2:	f000 8117 	beq.w	800fbe4 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800f9b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800f9ba:	f003 0301 	and.w	r3, r3, #1
 800f9be:	2b00      	cmp	r3, #0
 800f9c0:	d106      	bne.n	800f9d0 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800f9c2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800f9c6:	4b85      	ldr	r3, [pc, #532]	; (800fbdc <HAL_UART_IRQHandler+0x298>)
 800f9c8:	4013      	ands	r3, r2
 800f9ca:	2b00      	cmp	r3, #0
 800f9cc:	f000 810a 	beq.w	800fbe4 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800f9d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800f9d4:	f003 0301 	and.w	r3, r3, #1
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	d011      	beq.n	800fa00 <HAL_UART_IRQHandler+0xbc>
 800f9dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800f9e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f9e4:	2b00      	cmp	r3, #0
 800f9e6:	d00b      	beq.n	800fa00 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800f9e8:	687b      	ldr	r3, [r7, #4]
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	2201      	movs	r2, #1
 800f9ee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f9f6:	f043 0201 	orr.w	r2, r3, #1
 800f9fa:	687b      	ldr	r3, [r7, #4]
 800f9fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa04:	f003 0302 	and.w	r3, r3, #2
 800fa08:	2b00      	cmp	r3, #0
 800fa0a:	d011      	beq.n	800fa30 <HAL_UART_IRQHandler+0xec>
 800fa0c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d00b      	beq.n	800fa30 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2202      	movs	r2, #2
 800fa1e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa26:	f043 0204 	orr.w	r2, r3, #4
 800fa2a:	687b      	ldr	r3, [r7, #4]
 800fa2c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800fa30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa34:	f003 0304 	and.w	r3, r3, #4
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d011      	beq.n	800fa60 <HAL_UART_IRQHandler+0x11c>
 800fa3c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa40:	f003 0301 	and.w	r3, r3, #1
 800fa44:	2b00      	cmp	r3, #0
 800fa46:	d00b      	beq.n	800fa60 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	2204      	movs	r2, #4
 800fa4e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800fa50:	687b      	ldr	r3, [r7, #4]
 800fa52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa56:	f043 0202 	orr.w	r2, r3, #2
 800fa5a:	687b      	ldr	r3, [r7, #4]
 800fa5c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800fa60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fa64:	f003 0308 	and.w	r3, r3, #8
 800fa68:	2b00      	cmp	r3, #0
 800fa6a:	d017      	beq.n	800fa9c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fa6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fa70:	f003 0320 	and.w	r3, r3, #32
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d105      	bne.n	800fa84 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800fa78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800fa7c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d00b      	beq.n	800fa9c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681b      	ldr	r3, [r3, #0]
 800fa88:	2208      	movs	r2, #8
 800fa8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800fa8c:	687b      	ldr	r3, [r7, #4]
 800fa8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fa92:	f043 0208 	orr.w	r2, r3, #8
 800fa96:	687b      	ldr	r3, [r7, #4]
 800fa98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800fa9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800faa0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d012      	beq.n	800face <HAL_UART_IRQHandler+0x18a>
 800faa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faac:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d00c      	beq.n	800face <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800fab4:	687b      	ldr	r3, [r7, #4]
 800fab6:	681b      	ldr	r3, [r3, #0]
 800fab8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800fabc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800fabe:	687b      	ldr	r3, [r7, #4]
 800fac0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fac4:	f043 0220 	orr.w	r2, r3, #32
 800fac8:	687b      	ldr	r3, [r7, #4]
 800faca:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fad4:	2b00      	cmp	r3, #0
 800fad6:	f000 81fd 	beq.w	800fed4 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800fada:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fade:	f003 0320 	and.w	r3, r3, #32
 800fae2:	2b00      	cmp	r3, #0
 800fae4:	d00d      	beq.n	800fb02 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800fae6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800faea:	f003 0320 	and.w	r3, r3, #32
 800faee:	2b00      	cmp	r3, #0
 800faf0:	d007      	beq.n	800fb02 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800faf2:	687b      	ldr	r3, [r7, #4]
 800faf4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800faf6:	2b00      	cmp	r3, #0
 800faf8:	d003      	beq.n	800fb02 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800fafe:	6878      	ldr	r0, [r7, #4]
 800fb00:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb08:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	681b      	ldr	r3, [r3, #0]
 800fb10:	689b      	ldr	r3, [r3, #8]
 800fb12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb16:	2b40      	cmp	r3, #64	; 0x40
 800fb18:	d005      	beq.n	800fb26 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800fb1a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800fb1e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	d04f      	beq.n	800fbc6 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800fb26:	6878      	ldr	r0, [r7, #4]
 800fb28:	f000 fec8 	bl	80108bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fb2c:	687b      	ldr	r3, [r7, #4]
 800fb2e:	681b      	ldr	r3, [r3, #0]
 800fb30:	689b      	ldr	r3, [r3, #8]
 800fb32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fb36:	2b40      	cmp	r3, #64	; 0x40
 800fb38:	d141      	bne.n	800fbbe <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	681b      	ldr	r3, [r3, #0]
 800fb3e:	3308      	adds	r3, #8
 800fb40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fb44:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fb48:	e853 3f00 	ldrex	r3, [r3]
 800fb4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800fb50:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fb54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fb58:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800fb5c:	687b      	ldr	r3, [r7, #4]
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	3308      	adds	r3, #8
 800fb62:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800fb66:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800fb6a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fb6e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800fb72:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800fb76:	e841 2300 	strex	r3, r2, [r1]
 800fb7a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800fb7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800fb82:	2b00      	cmp	r3, #0
 800fb84:	d1d9      	bne.n	800fb3a <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800fb86:	687b      	ldr	r3, [r7, #4]
 800fb88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb8a:	2b00      	cmp	r3, #0
 800fb8c:	d013      	beq.n	800fbb6 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb92:	4a13      	ldr	r2, [pc, #76]	; (800fbe0 <HAL_UART_IRQHandler+0x29c>)
 800fb94:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800fb96:	687b      	ldr	r3, [r7, #4]
 800fb98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fb9a:	4618      	mov	r0, r3
 800fb9c:	f7fc fbc4 	bl	800c328 <HAL_DMA_Abort_IT>
 800fba0:	4603      	mov	r3, r0
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d017      	beq.n	800fbd6 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fbaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fbac:	687a      	ldr	r2, [r7, #4]
 800fbae:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800fbb0:	4610      	mov	r0, r2
 800fbb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbb4:	e00f      	b.n	800fbd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800fbb6:	6878      	ldr	r0, [r7, #4]
 800fbb8:	f000 f9a0 	bl	800fefc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbbc:	e00b      	b.n	800fbd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800fbbe:	6878      	ldr	r0, [r7, #4]
 800fbc0:	f000 f99c 	bl	800fefc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbc4:	e007      	b.n	800fbd6 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800fbc6:	6878      	ldr	r0, [r7, #4]
 800fbc8:	f000 f998 	bl	800fefc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800fbcc:	687b      	ldr	r3, [r7, #4]
 800fbce:	2200      	movs	r2, #0
 800fbd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800fbd4:	e17e      	b.n	800fed4 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fbd6:	bf00      	nop
    return;
 800fbd8:	e17c      	b.n	800fed4 <HAL_UART_IRQHandler+0x590>
 800fbda:	bf00      	nop
 800fbdc:	04000120 	.word	0x04000120
 800fbe0:	08010985 	.word	0x08010985

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800fbe8:	2b01      	cmp	r3, #1
 800fbea:	f040 814c 	bne.w	800fe86 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800fbee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fbf2:	f003 0310 	and.w	r3, r3, #16
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	f000 8145 	beq.w	800fe86 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800fbfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fc00:	f003 0310 	and.w	r3, r3, #16
 800fc04:	2b00      	cmp	r3, #0
 800fc06:	f000 813e 	beq.w	800fe86 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800fc0a:	687b      	ldr	r3, [r7, #4]
 800fc0c:	681b      	ldr	r3, [r3, #0]
 800fc0e:	2210      	movs	r2, #16
 800fc10:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	689b      	ldr	r3, [r3, #8]
 800fc18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fc1c:	2b40      	cmp	r3, #64	; 0x40
 800fc1e:	f040 80b6 	bne.w	800fd8e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc26:	681b      	ldr	r3, [r3, #0]
 800fc28:	685b      	ldr	r3, [r3, #4]
 800fc2a:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800fc2e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	f000 8150 	beq.w	800fed8 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800fc38:	687b      	ldr	r3, [r7, #4]
 800fc3a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800fc3e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc42:	429a      	cmp	r2, r3
 800fc44:	f080 8148 	bcs.w	800fed8 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800fc48:	687b      	ldr	r3, [r7, #4]
 800fc4a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800fc4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800fc52:	687b      	ldr	r3, [r7, #4]
 800fc54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fc56:	69db      	ldr	r3, [r3, #28]
 800fc58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800fc5c:	f000 8086 	beq.w	800fd6c <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800fc60:	687b      	ldr	r3, [r7, #4]
 800fc62:	681b      	ldr	r3, [r3, #0]
 800fc64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fc68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800fc6c:	e853 3f00 	ldrex	r3, [r3]
 800fc70:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800fc74:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800fc78:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800fc7c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800fc80:	687b      	ldr	r3, [r7, #4]
 800fc82:	681b      	ldr	r3, [r3, #0]
 800fc84:	461a      	mov	r2, r3
 800fc86:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800fc8a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fc8e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fc92:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800fc96:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800fc9a:	e841 2300 	strex	r3, r2, [r1]
 800fc9e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800fca2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d1da      	bne.n	800fc60 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	3308      	adds	r3, #8
 800fcb0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fcb4:	e853 3f00 	ldrex	r3, [r3]
 800fcb8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800fcba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fcbc:	f023 0301 	bic.w	r3, r3, #1
 800fcc0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	3308      	adds	r3, #8
 800fcca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fcce:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800fcd2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fcd4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800fcd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800fcda:	e841 2300 	strex	r3, r2, [r1]
 800fcde:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800fce0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	d1e1      	bne.n	800fcaa <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	3308      	adds	r3, #8
 800fcec:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fcee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800fcf0:	e853 3f00 	ldrex	r3, [r3]
 800fcf4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800fcf6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800fcf8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800fcfc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	681b      	ldr	r3, [r3, #0]
 800fd04:	3308      	adds	r3, #8
 800fd06:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800fd0a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800fd0c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd0e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800fd10:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800fd12:	e841 2300 	strex	r3, r2, [r1]
 800fd16:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800fd18:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	d1e3      	bne.n	800fce6 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	2220      	movs	r2, #32
 800fd22:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	2200      	movs	r2, #0
 800fd2a:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fd32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800fd34:	e853 3f00 	ldrex	r3, [r3]
 800fd38:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800fd3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fd3c:	f023 0310 	bic.w	r3, r3, #16
 800fd40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	461a      	mov	r2, r3
 800fd4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800fd4e:	65bb      	str	r3, [r7, #88]	; 0x58
 800fd50:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fd52:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800fd54:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800fd56:	e841 2300 	strex	r3, r2, [r1]
 800fd5a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800fd5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800fd5e:	2b00      	cmp	r3, #0
 800fd60:	d1e4      	bne.n	800fd2c <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fd66:	4618      	mov	r0, r3
 800fd68:	f7fc fa6e 	bl	800c248 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	2202      	movs	r2, #2
 800fd70:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fd7e:	b29b      	uxth	r3, r3
 800fd80:	1ad3      	subs	r3, r2, r3
 800fd82:	b29b      	uxth	r3, r3
 800fd84:	4619      	mov	r1, r3
 800fd86:	6878      	ldr	r0, [r7, #4]
 800fd88:	f000 f8c2 	bl	800ff10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fd8c:	e0a4      	b.n	800fed8 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800fd8e:	687b      	ldr	r3, [r7, #4]
 800fd90:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fd9a:	b29b      	uxth	r3, r3
 800fd9c:	1ad3      	subs	r3, r2, r3
 800fd9e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800fda8:	b29b      	uxth	r3, r3
 800fdaa:	2b00      	cmp	r3, #0
 800fdac:	f000 8096 	beq.w	800fedc <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800fdb0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fdb4:	2b00      	cmp	r3, #0
 800fdb6:	f000 8091 	beq.w	800fedc <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800fdba:	687b      	ldr	r3, [r7, #4]
 800fdbc:	681b      	ldr	r3, [r3, #0]
 800fdbe:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800fdc2:	e853 3f00 	ldrex	r3, [r3]
 800fdc6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800fdc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fdca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800fdce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800fdd2:	687b      	ldr	r3, [r7, #4]
 800fdd4:	681b      	ldr	r3, [r3, #0]
 800fdd6:	461a      	mov	r2, r3
 800fdd8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800fddc:	647b      	str	r3, [r7, #68]	; 0x44
 800fdde:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fde0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800fde2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800fde4:	e841 2300 	strex	r3, r2, [r1]
 800fde8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800fdea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d1e4      	bne.n	800fdba <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	3308      	adds	r3, #8
 800fdf6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fdf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fdfa:	e853 3f00 	ldrex	r3, [r3]
 800fdfe:	623b      	str	r3, [r7, #32]
   return(result);
 800fe00:	6a3b      	ldr	r3, [r7, #32]
 800fe02:	f023 0301 	bic.w	r3, r3, #1
 800fe06:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800fe0a:	687b      	ldr	r3, [r7, #4]
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	3308      	adds	r3, #8
 800fe10:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800fe14:	633a      	str	r2, [r7, #48]	; 0x30
 800fe16:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe18:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800fe1a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fe1c:	e841 2300 	strex	r3, r2, [r1]
 800fe20:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800fe22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d1e3      	bne.n	800fdf0 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	2220      	movs	r2, #32
 800fe2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800fe30:	687b      	ldr	r3, [r7, #4]
 800fe32:	2200      	movs	r2, #0
 800fe34:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2200      	movs	r2, #0
 800fe3a:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800fe3c:	687b      	ldr	r3, [r7, #4]
 800fe3e:	681b      	ldr	r3, [r3, #0]
 800fe40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800fe42:	693b      	ldr	r3, [r7, #16]
 800fe44:	e853 3f00 	ldrex	r3, [r3]
 800fe48:	60fb      	str	r3, [r7, #12]
   return(result);
 800fe4a:	68fb      	ldr	r3, [r7, #12]
 800fe4c:	f023 0310 	bic.w	r3, r3, #16
 800fe50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	681b      	ldr	r3, [r3, #0]
 800fe58:	461a      	mov	r2, r3
 800fe5a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800fe5e:	61fb      	str	r3, [r7, #28]
 800fe60:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800fe62:	69b9      	ldr	r1, [r7, #24]
 800fe64:	69fa      	ldr	r2, [r7, #28]
 800fe66:	e841 2300 	strex	r3, r2, [r1]
 800fe6a:	617b      	str	r3, [r7, #20]
   return(result);
 800fe6c:	697b      	ldr	r3, [r7, #20]
 800fe6e:	2b00      	cmp	r3, #0
 800fe70:	d1e4      	bne.n	800fe3c <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	2202      	movs	r2, #2
 800fe76:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800fe78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800fe7c:	4619      	mov	r1, r3
 800fe7e:	6878      	ldr	r0, [r7, #4]
 800fe80:	f000 f846 	bl	800ff10 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800fe84:	e02a      	b.n	800fedc <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800fe86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800fe8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe8e:	2b00      	cmp	r3, #0
 800fe90:	d00e      	beq.n	800feb0 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800fe92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fe96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fe9a:	2b00      	cmp	r3, #0
 800fe9c:	d008      	beq.n	800feb0 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800fe9e:	687b      	ldr	r3, [r7, #4]
 800fea0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fea2:	2b00      	cmp	r3, #0
 800fea4:	d01c      	beq.n	800fee0 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800fea6:	687b      	ldr	r3, [r7, #4]
 800fea8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800feaa:	6878      	ldr	r0, [r7, #4]
 800feac:	4798      	blx	r3
    }
    return;
 800feae:	e017      	b.n	800fee0 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800feb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800feb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800feb8:	2b00      	cmp	r3, #0
 800feba:	d012      	beq.n	800fee2 <HAL_UART_IRQHandler+0x59e>
 800febc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800fec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	d00c      	beq.n	800fee2 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800fec8:	6878      	ldr	r0, [r7, #4]
 800feca:	f000 fe2c 	bl	8010b26 <UART_EndTransmit_IT>
    return;
 800fece:	e008      	b.n	800fee2 <HAL_UART_IRQHandler+0x59e>
      return;
 800fed0:	bf00      	nop
 800fed2:	e006      	b.n	800fee2 <HAL_UART_IRQHandler+0x59e>
    return;
 800fed4:	bf00      	nop
 800fed6:	e004      	b.n	800fee2 <HAL_UART_IRQHandler+0x59e>
      return;
 800fed8:	bf00      	nop
 800feda:	e002      	b.n	800fee2 <HAL_UART_IRQHandler+0x59e>
      return;
 800fedc:	bf00      	nop
 800fede:	e000      	b.n	800fee2 <HAL_UART_IRQHandler+0x59e>
    return;
 800fee0:	bf00      	nop
  }

}
 800fee2:	37e8      	adds	r7, #232	; 0xe8
 800fee4:	46bd      	mov	sp, r7
 800fee6:	bd80      	pop	{r7, pc}

0800fee8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800fee8:	b480      	push	{r7}
 800feea:	b083      	sub	sp, #12
 800feec:	af00      	add	r7, sp, #0
 800feee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800fef0:	bf00      	nop
 800fef2:	370c      	adds	r7, #12
 800fef4:	46bd      	mov	sp, r7
 800fef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fefa:	4770      	bx	lr

0800fefc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800fefc:	b480      	push	{r7}
 800fefe:	b083      	sub	sp, #12
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800ff04:	bf00      	nop
 800ff06:	370c      	adds	r7, #12
 800ff08:	46bd      	mov	sp, r7
 800ff0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff0e:	4770      	bx	lr

0800ff10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800ff10:	b480      	push	{r7}
 800ff12:	b083      	sub	sp, #12
 800ff14:	af00      	add	r7, sp, #0
 800ff16:	6078      	str	r0, [r7, #4]
 800ff18:	460b      	mov	r3, r1
 800ff1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800ff1c:	bf00      	nop
 800ff1e:	370c      	adds	r7, #12
 800ff20:	46bd      	mov	sp, r7
 800ff22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff26:	4770      	bx	lr

0800ff28 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800ff28:	b580      	push	{r7, lr}
 800ff2a:	b088      	sub	sp, #32
 800ff2c:	af00      	add	r7, sp, #0
 800ff2e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800ff30:	2300      	movs	r3, #0
 800ff32:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	689a      	ldr	r2, [r3, #8]
 800ff38:	687b      	ldr	r3, [r7, #4]
 800ff3a:	691b      	ldr	r3, [r3, #16]
 800ff3c:	431a      	orrs	r2, r3
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	695b      	ldr	r3, [r3, #20]
 800ff42:	431a      	orrs	r2, r3
 800ff44:	687b      	ldr	r3, [r7, #4]
 800ff46:	69db      	ldr	r3, [r3, #28]
 800ff48:	4313      	orrs	r3, r2
 800ff4a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800ff4c:	687b      	ldr	r3, [r7, #4]
 800ff4e:	681b      	ldr	r3, [r3, #0]
 800ff50:	681a      	ldr	r2, [r3, #0]
 800ff52:	4ba6      	ldr	r3, [pc, #664]	; (80101ec <UART_SetConfig+0x2c4>)
 800ff54:	4013      	ands	r3, r2
 800ff56:	687a      	ldr	r2, [r7, #4]
 800ff58:	6812      	ldr	r2, [r2, #0]
 800ff5a:	6979      	ldr	r1, [r7, #20]
 800ff5c:	430b      	orrs	r3, r1
 800ff5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	685b      	ldr	r3, [r3, #4]
 800ff66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800ff6a:	687b      	ldr	r3, [r7, #4]
 800ff6c:	68da      	ldr	r2, [r3, #12]
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	681b      	ldr	r3, [r3, #0]
 800ff72:	430a      	orrs	r2, r1
 800ff74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	699b      	ldr	r3, [r3, #24]
 800ff7a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	6a1b      	ldr	r3, [r3, #32]
 800ff80:	697a      	ldr	r2, [r7, #20]
 800ff82:	4313      	orrs	r3, r2
 800ff84:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800ff86:	687b      	ldr	r3, [r7, #4]
 800ff88:	681b      	ldr	r3, [r3, #0]
 800ff8a:	689b      	ldr	r3, [r3, #8]
 800ff8c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	681b      	ldr	r3, [r3, #0]
 800ff94:	697a      	ldr	r2, [r7, #20]
 800ff96:	430a      	orrs	r2, r1
 800ff98:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	4a94      	ldr	r2, [pc, #592]	; (80101f0 <UART_SetConfig+0x2c8>)
 800ffa0:	4293      	cmp	r3, r2
 800ffa2:	d120      	bne.n	800ffe6 <UART_SetConfig+0xbe>
 800ffa4:	4b93      	ldr	r3, [pc, #588]	; (80101f4 <UART_SetConfig+0x2cc>)
 800ffa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ffaa:	f003 0303 	and.w	r3, r3, #3
 800ffae:	2b03      	cmp	r3, #3
 800ffb0:	d816      	bhi.n	800ffe0 <UART_SetConfig+0xb8>
 800ffb2:	a201      	add	r2, pc, #4	; (adr r2, 800ffb8 <UART_SetConfig+0x90>)
 800ffb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ffb8:	0800ffc9 	.word	0x0800ffc9
 800ffbc:	0800ffd5 	.word	0x0800ffd5
 800ffc0:	0800ffcf 	.word	0x0800ffcf
 800ffc4:	0800ffdb 	.word	0x0800ffdb
 800ffc8:	2301      	movs	r3, #1
 800ffca:	77fb      	strb	r3, [r7, #31]
 800ffcc:	e150      	b.n	8010270 <UART_SetConfig+0x348>
 800ffce:	2302      	movs	r3, #2
 800ffd0:	77fb      	strb	r3, [r7, #31]
 800ffd2:	e14d      	b.n	8010270 <UART_SetConfig+0x348>
 800ffd4:	2304      	movs	r3, #4
 800ffd6:	77fb      	strb	r3, [r7, #31]
 800ffd8:	e14a      	b.n	8010270 <UART_SetConfig+0x348>
 800ffda:	2308      	movs	r3, #8
 800ffdc:	77fb      	strb	r3, [r7, #31]
 800ffde:	e147      	b.n	8010270 <UART_SetConfig+0x348>
 800ffe0:	2310      	movs	r3, #16
 800ffe2:	77fb      	strb	r3, [r7, #31]
 800ffe4:	e144      	b.n	8010270 <UART_SetConfig+0x348>
 800ffe6:	687b      	ldr	r3, [r7, #4]
 800ffe8:	681b      	ldr	r3, [r3, #0]
 800ffea:	4a83      	ldr	r2, [pc, #524]	; (80101f8 <UART_SetConfig+0x2d0>)
 800ffec:	4293      	cmp	r3, r2
 800ffee:	d132      	bne.n	8010056 <UART_SetConfig+0x12e>
 800fff0:	4b80      	ldr	r3, [pc, #512]	; (80101f4 <UART_SetConfig+0x2cc>)
 800fff2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fff6:	f003 030c 	and.w	r3, r3, #12
 800fffa:	2b0c      	cmp	r3, #12
 800fffc:	d828      	bhi.n	8010050 <UART_SetConfig+0x128>
 800fffe:	a201      	add	r2, pc, #4	; (adr r2, 8010004 <UART_SetConfig+0xdc>)
 8010000:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010004:	08010039 	.word	0x08010039
 8010008:	08010051 	.word	0x08010051
 801000c:	08010051 	.word	0x08010051
 8010010:	08010051 	.word	0x08010051
 8010014:	08010045 	.word	0x08010045
 8010018:	08010051 	.word	0x08010051
 801001c:	08010051 	.word	0x08010051
 8010020:	08010051 	.word	0x08010051
 8010024:	0801003f 	.word	0x0801003f
 8010028:	08010051 	.word	0x08010051
 801002c:	08010051 	.word	0x08010051
 8010030:	08010051 	.word	0x08010051
 8010034:	0801004b 	.word	0x0801004b
 8010038:	2300      	movs	r3, #0
 801003a:	77fb      	strb	r3, [r7, #31]
 801003c:	e118      	b.n	8010270 <UART_SetConfig+0x348>
 801003e:	2302      	movs	r3, #2
 8010040:	77fb      	strb	r3, [r7, #31]
 8010042:	e115      	b.n	8010270 <UART_SetConfig+0x348>
 8010044:	2304      	movs	r3, #4
 8010046:	77fb      	strb	r3, [r7, #31]
 8010048:	e112      	b.n	8010270 <UART_SetConfig+0x348>
 801004a:	2308      	movs	r3, #8
 801004c:	77fb      	strb	r3, [r7, #31]
 801004e:	e10f      	b.n	8010270 <UART_SetConfig+0x348>
 8010050:	2310      	movs	r3, #16
 8010052:	77fb      	strb	r3, [r7, #31]
 8010054:	e10c      	b.n	8010270 <UART_SetConfig+0x348>
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	681b      	ldr	r3, [r3, #0]
 801005a:	4a68      	ldr	r2, [pc, #416]	; (80101fc <UART_SetConfig+0x2d4>)
 801005c:	4293      	cmp	r3, r2
 801005e:	d120      	bne.n	80100a2 <UART_SetConfig+0x17a>
 8010060:	4b64      	ldr	r3, [pc, #400]	; (80101f4 <UART_SetConfig+0x2cc>)
 8010062:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010066:	f003 0330 	and.w	r3, r3, #48	; 0x30
 801006a:	2b30      	cmp	r3, #48	; 0x30
 801006c:	d013      	beq.n	8010096 <UART_SetConfig+0x16e>
 801006e:	2b30      	cmp	r3, #48	; 0x30
 8010070:	d814      	bhi.n	801009c <UART_SetConfig+0x174>
 8010072:	2b20      	cmp	r3, #32
 8010074:	d009      	beq.n	801008a <UART_SetConfig+0x162>
 8010076:	2b20      	cmp	r3, #32
 8010078:	d810      	bhi.n	801009c <UART_SetConfig+0x174>
 801007a:	2b00      	cmp	r3, #0
 801007c:	d002      	beq.n	8010084 <UART_SetConfig+0x15c>
 801007e:	2b10      	cmp	r3, #16
 8010080:	d006      	beq.n	8010090 <UART_SetConfig+0x168>
 8010082:	e00b      	b.n	801009c <UART_SetConfig+0x174>
 8010084:	2300      	movs	r3, #0
 8010086:	77fb      	strb	r3, [r7, #31]
 8010088:	e0f2      	b.n	8010270 <UART_SetConfig+0x348>
 801008a:	2302      	movs	r3, #2
 801008c:	77fb      	strb	r3, [r7, #31]
 801008e:	e0ef      	b.n	8010270 <UART_SetConfig+0x348>
 8010090:	2304      	movs	r3, #4
 8010092:	77fb      	strb	r3, [r7, #31]
 8010094:	e0ec      	b.n	8010270 <UART_SetConfig+0x348>
 8010096:	2308      	movs	r3, #8
 8010098:	77fb      	strb	r3, [r7, #31]
 801009a:	e0e9      	b.n	8010270 <UART_SetConfig+0x348>
 801009c:	2310      	movs	r3, #16
 801009e:	77fb      	strb	r3, [r7, #31]
 80100a0:	e0e6      	b.n	8010270 <UART_SetConfig+0x348>
 80100a2:	687b      	ldr	r3, [r7, #4]
 80100a4:	681b      	ldr	r3, [r3, #0]
 80100a6:	4a56      	ldr	r2, [pc, #344]	; (8010200 <UART_SetConfig+0x2d8>)
 80100a8:	4293      	cmp	r3, r2
 80100aa:	d120      	bne.n	80100ee <UART_SetConfig+0x1c6>
 80100ac:	4b51      	ldr	r3, [pc, #324]	; (80101f4 <UART_SetConfig+0x2cc>)
 80100ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100b2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80100b6:	2bc0      	cmp	r3, #192	; 0xc0
 80100b8:	d013      	beq.n	80100e2 <UART_SetConfig+0x1ba>
 80100ba:	2bc0      	cmp	r3, #192	; 0xc0
 80100bc:	d814      	bhi.n	80100e8 <UART_SetConfig+0x1c0>
 80100be:	2b80      	cmp	r3, #128	; 0x80
 80100c0:	d009      	beq.n	80100d6 <UART_SetConfig+0x1ae>
 80100c2:	2b80      	cmp	r3, #128	; 0x80
 80100c4:	d810      	bhi.n	80100e8 <UART_SetConfig+0x1c0>
 80100c6:	2b00      	cmp	r3, #0
 80100c8:	d002      	beq.n	80100d0 <UART_SetConfig+0x1a8>
 80100ca:	2b40      	cmp	r3, #64	; 0x40
 80100cc:	d006      	beq.n	80100dc <UART_SetConfig+0x1b4>
 80100ce:	e00b      	b.n	80100e8 <UART_SetConfig+0x1c0>
 80100d0:	2300      	movs	r3, #0
 80100d2:	77fb      	strb	r3, [r7, #31]
 80100d4:	e0cc      	b.n	8010270 <UART_SetConfig+0x348>
 80100d6:	2302      	movs	r3, #2
 80100d8:	77fb      	strb	r3, [r7, #31]
 80100da:	e0c9      	b.n	8010270 <UART_SetConfig+0x348>
 80100dc:	2304      	movs	r3, #4
 80100de:	77fb      	strb	r3, [r7, #31]
 80100e0:	e0c6      	b.n	8010270 <UART_SetConfig+0x348>
 80100e2:	2308      	movs	r3, #8
 80100e4:	77fb      	strb	r3, [r7, #31]
 80100e6:	e0c3      	b.n	8010270 <UART_SetConfig+0x348>
 80100e8:	2310      	movs	r3, #16
 80100ea:	77fb      	strb	r3, [r7, #31]
 80100ec:	e0c0      	b.n	8010270 <UART_SetConfig+0x348>
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	4a44      	ldr	r2, [pc, #272]	; (8010204 <UART_SetConfig+0x2dc>)
 80100f4:	4293      	cmp	r3, r2
 80100f6:	d125      	bne.n	8010144 <UART_SetConfig+0x21c>
 80100f8:	4b3e      	ldr	r3, [pc, #248]	; (80101f4 <UART_SetConfig+0x2cc>)
 80100fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80100fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8010102:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8010106:	d017      	beq.n	8010138 <UART_SetConfig+0x210>
 8010108:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 801010c:	d817      	bhi.n	801013e <UART_SetConfig+0x216>
 801010e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010112:	d00b      	beq.n	801012c <UART_SetConfig+0x204>
 8010114:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8010118:	d811      	bhi.n	801013e <UART_SetConfig+0x216>
 801011a:	2b00      	cmp	r3, #0
 801011c:	d003      	beq.n	8010126 <UART_SetConfig+0x1fe>
 801011e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8010122:	d006      	beq.n	8010132 <UART_SetConfig+0x20a>
 8010124:	e00b      	b.n	801013e <UART_SetConfig+0x216>
 8010126:	2300      	movs	r3, #0
 8010128:	77fb      	strb	r3, [r7, #31]
 801012a:	e0a1      	b.n	8010270 <UART_SetConfig+0x348>
 801012c:	2302      	movs	r3, #2
 801012e:	77fb      	strb	r3, [r7, #31]
 8010130:	e09e      	b.n	8010270 <UART_SetConfig+0x348>
 8010132:	2304      	movs	r3, #4
 8010134:	77fb      	strb	r3, [r7, #31]
 8010136:	e09b      	b.n	8010270 <UART_SetConfig+0x348>
 8010138:	2308      	movs	r3, #8
 801013a:	77fb      	strb	r3, [r7, #31]
 801013c:	e098      	b.n	8010270 <UART_SetConfig+0x348>
 801013e:	2310      	movs	r3, #16
 8010140:	77fb      	strb	r3, [r7, #31]
 8010142:	e095      	b.n	8010270 <UART_SetConfig+0x348>
 8010144:	687b      	ldr	r3, [r7, #4]
 8010146:	681b      	ldr	r3, [r3, #0]
 8010148:	4a2f      	ldr	r2, [pc, #188]	; (8010208 <UART_SetConfig+0x2e0>)
 801014a:	4293      	cmp	r3, r2
 801014c:	d125      	bne.n	801019a <UART_SetConfig+0x272>
 801014e:	4b29      	ldr	r3, [pc, #164]	; (80101f4 <UART_SetConfig+0x2cc>)
 8010150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010154:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8010158:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801015c:	d017      	beq.n	801018e <UART_SetConfig+0x266>
 801015e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8010162:	d817      	bhi.n	8010194 <UART_SetConfig+0x26c>
 8010164:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010168:	d00b      	beq.n	8010182 <UART_SetConfig+0x25a>
 801016a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 801016e:	d811      	bhi.n	8010194 <UART_SetConfig+0x26c>
 8010170:	2b00      	cmp	r3, #0
 8010172:	d003      	beq.n	801017c <UART_SetConfig+0x254>
 8010174:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8010178:	d006      	beq.n	8010188 <UART_SetConfig+0x260>
 801017a:	e00b      	b.n	8010194 <UART_SetConfig+0x26c>
 801017c:	2301      	movs	r3, #1
 801017e:	77fb      	strb	r3, [r7, #31]
 8010180:	e076      	b.n	8010270 <UART_SetConfig+0x348>
 8010182:	2302      	movs	r3, #2
 8010184:	77fb      	strb	r3, [r7, #31]
 8010186:	e073      	b.n	8010270 <UART_SetConfig+0x348>
 8010188:	2304      	movs	r3, #4
 801018a:	77fb      	strb	r3, [r7, #31]
 801018c:	e070      	b.n	8010270 <UART_SetConfig+0x348>
 801018e:	2308      	movs	r3, #8
 8010190:	77fb      	strb	r3, [r7, #31]
 8010192:	e06d      	b.n	8010270 <UART_SetConfig+0x348>
 8010194:	2310      	movs	r3, #16
 8010196:	77fb      	strb	r3, [r7, #31]
 8010198:	e06a      	b.n	8010270 <UART_SetConfig+0x348>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	681b      	ldr	r3, [r3, #0]
 801019e:	4a1b      	ldr	r2, [pc, #108]	; (801020c <UART_SetConfig+0x2e4>)
 80101a0:	4293      	cmp	r3, r2
 80101a2:	d138      	bne.n	8010216 <UART_SetConfig+0x2ee>
 80101a4:	4b13      	ldr	r3, [pc, #76]	; (80101f4 <UART_SetConfig+0x2cc>)
 80101a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80101aa:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80101ae:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80101b2:	d017      	beq.n	80101e4 <UART_SetConfig+0x2bc>
 80101b4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80101b8:	d82a      	bhi.n	8010210 <UART_SetConfig+0x2e8>
 80101ba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101be:	d00b      	beq.n	80101d8 <UART_SetConfig+0x2b0>
 80101c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80101c4:	d824      	bhi.n	8010210 <UART_SetConfig+0x2e8>
 80101c6:	2b00      	cmp	r3, #0
 80101c8:	d003      	beq.n	80101d2 <UART_SetConfig+0x2aa>
 80101ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80101ce:	d006      	beq.n	80101de <UART_SetConfig+0x2b6>
 80101d0:	e01e      	b.n	8010210 <UART_SetConfig+0x2e8>
 80101d2:	2300      	movs	r3, #0
 80101d4:	77fb      	strb	r3, [r7, #31]
 80101d6:	e04b      	b.n	8010270 <UART_SetConfig+0x348>
 80101d8:	2302      	movs	r3, #2
 80101da:	77fb      	strb	r3, [r7, #31]
 80101dc:	e048      	b.n	8010270 <UART_SetConfig+0x348>
 80101de:	2304      	movs	r3, #4
 80101e0:	77fb      	strb	r3, [r7, #31]
 80101e2:	e045      	b.n	8010270 <UART_SetConfig+0x348>
 80101e4:	2308      	movs	r3, #8
 80101e6:	77fb      	strb	r3, [r7, #31]
 80101e8:	e042      	b.n	8010270 <UART_SetConfig+0x348>
 80101ea:	bf00      	nop
 80101ec:	efff69f3 	.word	0xefff69f3
 80101f0:	40011000 	.word	0x40011000
 80101f4:	40023800 	.word	0x40023800
 80101f8:	40004400 	.word	0x40004400
 80101fc:	40004800 	.word	0x40004800
 8010200:	40004c00 	.word	0x40004c00
 8010204:	40005000 	.word	0x40005000
 8010208:	40011400 	.word	0x40011400
 801020c:	40007800 	.word	0x40007800
 8010210:	2310      	movs	r3, #16
 8010212:	77fb      	strb	r3, [r7, #31]
 8010214:	e02c      	b.n	8010270 <UART_SetConfig+0x348>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	4a72      	ldr	r2, [pc, #456]	; (80103e4 <UART_SetConfig+0x4bc>)
 801021c:	4293      	cmp	r3, r2
 801021e:	d125      	bne.n	801026c <UART_SetConfig+0x344>
 8010220:	4b71      	ldr	r3, [pc, #452]	; (80103e8 <UART_SetConfig+0x4c0>)
 8010222:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8010226:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 801022a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 801022e:	d017      	beq.n	8010260 <UART_SetConfig+0x338>
 8010230:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8010234:	d817      	bhi.n	8010266 <UART_SetConfig+0x33e>
 8010236:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801023a:	d00b      	beq.n	8010254 <UART_SetConfig+0x32c>
 801023c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010240:	d811      	bhi.n	8010266 <UART_SetConfig+0x33e>
 8010242:	2b00      	cmp	r3, #0
 8010244:	d003      	beq.n	801024e <UART_SetConfig+0x326>
 8010246:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801024a:	d006      	beq.n	801025a <UART_SetConfig+0x332>
 801024c:	e00b      	b.n	8010266 <UART_SetConfig+0x33e>
 801024e:	2300      	movs	r3, #0
 8010250:	77fb      	strb	r3, [r7, #31]
 8010252:	e00d      	b.n	8010270 <UART_SetConfig+0x348>
 8010254:	2302      	movs	r3, #2
 8010256:	77fb      	strb	r3, [r7, #31]
 8010258:	e00a      	b.n	8010270 <UART_SetConfig+0x348>
 801025a:	2304      	movs	r3, #4
 801025c:	77fb      	strb	r3, [r7, #31]
 801025e:	e007      	b.n	8010270 <UART_SetConfig+0x348>
 8010260:	2308      	movs	r3, #8
 8010262:	77fb      	strb	r3, [r7, #31]
 8010264:	e004      	b.n	8010270 <UART_SetConfig+0x348>
 8010266:	2310      	movs	r3, #16
 8010268:	77fb      	strb	r3, [r7, #31]
 801026a:	e001      	b.n	8010270 <UART_SetConfig+0x348>
 801026c:	2310      	movs	r3, #16
 801026e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	69db      	ldr	r3, [r3, #28]
 8010274:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8010278:	d15b      	bne.n	8010332 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 801027a:	7ffb      	ldrb	r3, [r7, #31]
 801027c:	2b08      	cmp	r3, #8
 801027e:	d828      	bhi.n	80102d2 <UART_SetConfig+0x3aa>
 8010280:	a201      	add	r2, pc, #4	; (adr r2, 8010288 <UART_SetConfig+0x360>)
 8010282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010286:	bf00      	nop
 8010288:	080102ad 	.word	0x080102ad
 801028c:	080102b5 	.word	0x080102b5
 8010290:	080102bd 	.word	0x080102bd
 8010294:	080102d3 	.word	0x080102d3
 8010298:	080102c3 	.word	0x080102c3
 801029c:	080102d3 	.word	0x080102d3
 80102a0:	080102d3 	.word	0x080102d3
 80102a4:	080102d3 	.word	0x080102d3
 80102a8:	080102cb 	.word	0x080102cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80102ac:	f7fe f91c 	bl	800e4e8 <HAL_RCC_GetPCLK1Freq>
 80102b0:	61b8      	str	r0, [r7, #24]
        break;
 80102b2:	e013      	b.n	80102dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80102b4:	f7fe f92c 	bl	800e510 <HAL_RCC_GetPCLK2Freq>
 80102b8:	61b8      	str	r0, [r7, #24]
        break;
 80102ba:	e00f      	b.n	80102dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80102bc:	4b4b      	ldr	r3, [pc, #300]	; (80103ec <UART_SetConfig+0x4c4>)
 80102be:	61bb      	str	r3, [r7, #24]
        break;
 80102c0:	e00c      	b.n	80102dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80102c2:	f7fe f83f 	bl	800e344 <HAL_RCC_GetSysClockFreq>
 80102c6:	61b8      	str	r0, [r7, #24]
        break;
 80102c8:	e008      	b.n	80102dc <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80102ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80102ce:	61bb      	str	r3, [r7, #24]
        break;
 80102d0:	e004      	b.n	80102dc <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80102d2:	2300      	movs	r3, #0
 80102d4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80102d6:	2301      	movs	r3, #1
 80102d8:	77bb      	strb	r3, [r7, #30]
        break;
 80102da:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80102dc:	69bb      	ldr	r3, [r7, #24]
 80102de:	2b00      	cmp	r3, #0
 80102e0:	d074      	beq.n	80103cc <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80102e2:	69bb      	ldr	r3, [r7, #24]
 80102e4:	005a      	lsls	r2, r3, #1
 80102e6:	687b      	ldr	r3, [r7, #4]
 80102e8:	685b      	ldr	r3, [r3, #4]
 80102ea:	085b      	lsrs	r3, r3, #1
 80102ec:	441a      	add	r2, r3
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	685b      	ldr	r3, [r3, #4]
 80102f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80102f6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80102f8:	693b      	ldr	r3, [r7, #16]
 80102fa:	2b0f      	cmp	r3, #15
 80102fc:	d916      	bls.n	801032c <UART_SetConfig+0x404>
 80102fe:	693b      	ldr	r3, [r7, #16]
 8010300:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010304:	d212      	bcs.n	801032c <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8010306:	693b      	ldr	r3, [r7, #16]
 8010308:	b29b      	uxth	r3, r3
 801030a:	f023 030f 	bic.w	r3, r3, #15
 801030e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8010310:	693b      	ldr	r3, [r7, #16]
 8010312:	085b      	lsrs	r3, r3, #1
 8010314:	b29b      	uxth	r3, r3
 8010316:	f003 0307 	and.w	r3, r3, #7
 801031a:	b29a      	uxth	r2, r3
 801031c:	89fb      	ldrh	r3, [r7, #14]
 801031e:	4313      	orrs	r3, r2
 8010320:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	681b      	ldr	r3, [r3, #0]
 8010326:	89fa      	ldrh	r2, [r7, #14]
 8010328:	60da      	str	r2, [r3, #12]
 801032a:	e04f      	b.n	80103cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 801032c:	2301      	movs	r3, #1
 801032e:	77bb      	strb	r3, [r7, #30]
 8010330:	e04c      	b.n	80103cc <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8010332:	7ffb      	ldrb	r3, [r7, #31]
 8010334:	2b08      	cmp	r3, #8
 8010336:	d828      	bhi.n	801038a <UART_SetConfig+0x462>
 8010338:	a201      	add	r2, pc, #4	; (adr r2, 8010340 <UART_SetConfig+0x418>)
 801033a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801033e:	bf00      	nop
 8010340:	08010365 	.word	0x08010365
 8010344:	0801036d 	.word	0x0801036d
 8010348:	08010375 	.word	0x08010375
 801034c:	0801038b 	.word	0x0801038b
 8010350:	0801037b 	.word	0x0801037b
 8010354:	0801038b 	.word	0x0801038b
 8010358:	0801038b 	.word	0x0801038b
 801035c:	0801038b 	.word	0x0801038b
 8010360:	08010383 	.word	0x08010383
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8010364:	f7fe f8c0 	bl	800e4e8 <HAL_RCC_GetPCLK1Freq>
 8010368:	61b8      	str	r0, [r7, #24]
        break;
 801036a:	e013      	b.n	8010394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801036c:	f7fe f8d0 	bl	800e510 <HAL_RCC_GetPCLK2Freq>
 8010370:	61b8      	str	r0, [r7, #24]
        break;
 8010372:	e00f      	b.n	8010394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8010374:	4b1d      	ldr	r3, [pc, #116]	; (80103ec <UART_SetConfig+0x4c4>)
 8010376:	61bb      	str	r3, [r7, #24]
        break;
 8010378:	e00c      	b.n	8010394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 801037a:	f7fd ffe3 	bl	800e344 <HAL_RCC_GetSysClockFreq>
 801037e:	61b8      	str	r0, [r7, #24]
        break;
 8010380:	e008      	b.n	8010394 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8010382:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010386:	61bb      	str	r3, [r7, #24]
        break;
 8010388:	e004      	b.n	8010394 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 801038a:	2300      	movs	r3, #0
 801038c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 801038e:	2301      	movs	r3, #1
 8010390:	77bb      	strb	r3, [r7, #30]
        break;
 8010392:	bf00      	nop
    }

    if (pclk != 0U)
 8010394:	69bb      	ldr	r3, [r7, #24]
 8010396:	2b00      	cmp	r3, #0
 8010398:	d018      	beq.n	80103cc <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	685b      	ldr	r3, [r3, #4]
 801039e:	085a      	lsrs	r2, r3, #1
 80103a0:	69bb      	ldr	r3, [r7, #24]
 80103a2:	441a      	add	r2, r3
 80103a4:	687b      	ldr	r3, [r7, #4]
 80103a6:	685b      	ldr	r3, [r3, #4]
 80103a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80103ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80103ae:	693b      	ldr	r3, [r7, #16]
 80103b0:	2b0f      	cmp	r3, #15
 80103b2:	d909      	bls.n	80103c8 <UART_SetConfig+0x4a0>
 80103b4:	693b      	ldr	r3, [r7, #16]
 80103b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80103ba:	d205      	bcs.n	80103c8 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80103bc:	693b      	ldr	r3, [r7, #16]
 80103be:	b29a      	uxth	r2, r3
 80103c0:	687b      	ldr	r3, [r7, #4]
 80103c2:	681b      	ldr	r3, [r3, #0]
 80103c4:	60da      	str	r2, [r3, #12]
 80103c6:	e001      	b.n	80103cc <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80103c8:	2301      	movs	r3, #1
 80103ca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2200      	movs	r2, #0
 80103d0:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	2200      	movs	r2, #0
 80103d6:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80103d8:	7fbb      	ldrb	r3, [r7, #30]
}
 80103da:	4618      	mov	r0, r3
 80103dc:	3720      	adds	r7, #32
 80103de:	46bd      	mov	sp, r7
 80103e0:	bd80      	pop	{r7, pc}
 80103e2:	bf00      	nop
 80103e4:	40007c00 	.word	0x40007c00
 80103e8:	40023800 	.word	0x40023800
 80103ec:	00f42400 	.word	0x00f42400

080103f0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80103f0:	b480      	push	{r7}
 80103f2:	b083      	sub	sp, #12
 80103f4:	af00      	add	r7, sp, #0
 80103f6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80103f8:	687b      	ldr	r3, [r7, #4]
 80103fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80103fc:	f003 0301 	and.w	r3, r3, #1
 8010400:	2b00      	cmp	r3, #0
 8010402:	d00a      	beq.n	801041a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8010404:	687b      	ldr	r3, [r7, #4]
 8010406:	681b      	ldr	r3, [r3, #0]
 8010408:	685b      	ldr	r3, [r3, #4]
 801040a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	681b      	ldr	r3, [r3, #0]
 8010416:	430a      	orrs	r2, r1
 8010418:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801041e:	f003 0302 	and.w	r3, r3, #2
 8010422:	2b00      	cmp	r3, #0
 8010424:	d00a      	beq.n	801043c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8010426:	687b      	ldr	r3, [r7, #4]
 8010428:	681b      	ldr	r3, [r3, #0]
 801042a:	685b      	ldr	r3, [r3, #4]
 801042c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8010430:	687b      	ldr	r3, [r7, #4]
 8010432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010434:	687b      	ldr	r3, [r7, #4]
 8010436:	681b      	ldr	r3, [r3, #0]
 8010438:	430a      	orrs	r2, r1
 801043a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801043c:	687b      	ldr	r3, [r7, #4]
 801043e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010440:	f003 0304 	and.w	r3, r3, #4
 8010444:	2b00      	cmp	r3, #0
 8010446:	d00a      	beq.n	801045e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8010448:	687b      	ldr	r3, [r7, #4]
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	685b      	ldr	r3, [r3, #4]
 801044e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8010452:	687b      	ldr	r3, [r7, #4]
 8010454:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	430a      	orrs	r2, r1
 801045c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801045e:	687b      	ldr	r3, [r7, #4]
 8010460:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010462:	f003 0308 	and.w	r3, r3, #8
 8010466:	2b00      	cmp	r3, #0
 8010468:	d00a      	beq.n	8010480 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801046a:	687b      	ldr	r3, [r7, #4]
 801046c:	681b      	ldr	r3, [r3, #0]
 801046e:	685b      	ldr	r3, [r3, #4]
 8010470:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8010474:	687b      	ldr	r3, [r7, #4]
 8010476:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	430a      	orrs	r2, r1
 801047e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010484:	f003 0310 	and.w	r3, r3, #16
 8010488:	2b00      	cmp	r3, #0
 801048a:	d00a      	beq.n	80104a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801048c:	687b      	ldr	r3, [r7, #4]
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	689b      	ldr	r3, [r3, #8]
 8010492:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8010496:	687b      	ldr	r3, [r7, #4]
 8010498:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801049a:	687b      	ldr	r3, [r7, #4]
 801049c:	681b      	ldr	r3, [r3, #0]
 801049e:	430a      	orrs	r2, r1
 80104a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104a6:	f003 0320 	and.w	r3, r3, #32
 80104aa:	2b00      	cmp	r3, #0
 80104ac:	d00a      	beq.n	80104c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80104ae:	687b      	ldr	r3, [r7, #4]
 80104b0:	681b      	ldr	r3, [r3, #0]
 80104b2:	689b      	ldr	r3, [r3, #8]
 80104b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80104b8:	687b      	ldr	r3, [r7, #4]
 80104ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80104bc:	687b      	ldr	r3, [r7, #4]
 80104be:	681b      	ldr	r3, [r3, #0]
 80104c0:	430a      	orrs	r2, r1
 80104c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80104c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d01a      	beq.n	8010506 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	681b      	ldr	r3, [r3, #0]
 80104d4:	685b      	ldr	r3, [r3, #4]
 80104d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	681b      	ldr	r3, [r3, #0]
 80104e2:	430a      	orrs	r2, r1
 80104e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80104ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80104ee:	d10a      	bne.n	8010506 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	681b      	ldr	r3, [r3, #0]
 80104f4:	685b      	ldr	r3, [r3, #4]
 80104f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80104fa:	687b      	ldr	r3, [r7, #4]
 80104fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80104fe:	687b      	ldr	r3, [r7, #4]
 8010500:	681b      	ldr	r3, [r3, #0]
 8010502:	430a      	orrs	r2, r1
 8010504:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8010506:	687b      	ldr	r3, [r7, #4]
 8010508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801050a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801050e:	2b00      	cmp	r3, #0
 8010510:	d00a      	beq.n	8010528 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8010512:	687b      	ldr	r3, [r7, #4]
 8010514:	681b      	ldr	r3, [r3, #0]
 8010516:	685b      	ldr	r3, [r3, #4]
 8010518:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8010520:	687b      	ldr	r3, [r7, #4]
 8010522:	681b      	ldr	r3, [r3, #0]
 8010524:	430a      	orrs	r2, r1
 8010526:	605a      	str	r2, [r3, #4]
  }
}
 8010528:	bf00      	nop
 801052a:	370c      	adds	r7, #12
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af02      	add	r7, sp, #8
 801053a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2200      	movs	r2, #0
 8010540:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8010544:	f7fa fe68 	bl	800b218 <HAL_GetTick>
 8010548:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801054a:	687b      	ldr	r3, [r7, #4]
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	f003 0308 	and.w	r3, r3, #8
 8010554:	2b08      	cmp	r3, #8
 8010556:	d10e      	bne.n	8010576 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8010558:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 801055c:	9300      	str	r3, [sp, #0]
 801055e:	68fb      	ldr	r3, [r7, #12]
 8010560:	2200      	movs	r2, #0
 8010562:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8010566:	6878      	ldr	r0, [r7, #4]
 8010568:	f000 f81b 	bl	80105a2 <UART_WaitOnFlagUntilTimeout>
 801056c:	4603      	mov	r3, r0
 801056e:	2b00      	cmp	r3, #0
 8010570:	d001      	beq.n	8010576 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8010572:	2303      	movs	r3, #3
 8010574:	e011      	b.n	801059a <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8010576:	687b      	ldr	r3, [r7, #4]
 8010578:	2220      	movs	r2, #32
 801057a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	2220      	movs	r2, #32
 8010580:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010584:	687b      	ldr	r3, [r7, #4]
 8010586:	2200      	movs	r2, #0
 8010588:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801058a:	687b      	ldr	r3, [r7, #4]
 801058c:	2200      	movs	r2, #0
 801058e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8010590:	687b      	ldr	r3, [r7, #4]
 8010592:	2200      	movs	r2, #0
 8010594:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8010598:	2300      	movs	r3, #0
}
 801059a:	4618      	mov	r0, r3
 801059c:	3710      	adds	r7, #16
 801059e:	46bd      	mov	sp, r7
 80105a0:	bd80      	pop	{r7, pc}

080105a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80105a2:	b580      	push	{r7, lr}
 80105a4:	b09c      	sub	sp, #112	; 0x70
 80105a6:	af00      	add	r7, sp, #0
 80105a8:	60f8      	str	r0, [r7, #12]
 80105aa:	60b9      	str	r1, [r7, #8]
 80105ac:	603b      	str	r3, [r7, #0]
 80105ae:	4613      	mov	r3, r2
 80105b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80105b2:	e0a7      	b.n	8010704 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80105b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80105ba:	f000 80a3 	beq.w	8010704 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80105be:	f7fa fe2b 	bl	800b218 <HAL_GetTick>
 80105c2:	4602      	mov	r2, r0
 80105c4:	683b      	ldr	r3, [r7, #0]
 80105c6:	1ad3      	subs	r3, r2, r3
 80105c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80105ca:	429a      	cmp	r2, r3
 80105cc:	d302      	bcc.n	80105d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80105ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80105d0:	2b00      	cmp	r3, #0
 80105d2:	d13f      	bne.n	8010654 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	681b      	ldr	r3, [r3, #0]
 80105d8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80105da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80105dc:	e853 3f00 	ldrex	r3, [r3]
 80105e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80105e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80105e8:	667b      	str	r3, [r7, #100]	; 0x64
 80105ea:	68fb      	ldr	r3, [r7, #12]
 80105ec:	681b      	ldr	r3, [r3, #0]
 80105ee:	461a      	mov	r2, r3
 80105f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80105f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80105f4:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80105f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80105f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80105fa:	e841 2300 	strex	r3, r2, [r1]
 80105fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8010600:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010602:	2b00      	cmp	r3, #0
 8010604:	d1e6      	bne.n	80105d4 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010606:	68fb      	ldr	r3, [r7, #12]
 8010608:	681b      	ldr	r3, [r3, #0]
 801060a:	3308      	adds	r3, #8
 801060c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801060e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010610:	e853 3f00 	ldrex	r3, [r3]
 8010614:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010618:	f023 0301 	bic.w	r3, r3, #1
 801061c:	663b      	str	r3, [r7, #96]	; 0x60
 801061e:	68fb      	ldr	r3, [r7, #12]
 8010620:	681b      	ldr	r3, [r3, #0]
 8010622:	3308      	adds	r3, #8
 8010624:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010626:	64ba      	str	r2, [r7, #72]	; 0x48
 8010628:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801062a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801062c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801062e:	e841 2300 	strex	r3, r2, [r1]
 8010632:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010634:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010636:	2b00      	cmp	r3, #0
 8010638:	d1e5      	bne.n	8010606 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 801063a:	68fb      	ldr	r3, [r7, #12]
 801063c:	2220      	movs	r2, #32
 801063e:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8010640:	68fb      	ldr	r3, [r7, #12]
 8010642:	2220      	movs	r2, #32
 8010644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8010648:	68fb      	ldr	r3, [r7, #12]
 801064a:	2200      	movs	r2, #0
 801064c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8010650:	2303      	movs	r3, #3
 8010652:	e068      	b.n	8010726 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8010654:	68fb      	ldr	r3, [r7, #12]
 8010656:	681b      	ldr	r3, [r3, #0]
 8010658:	681b      	ldr	r3, [r3, #0]
 801065a:	f003 0304 	and.w	r3, r3, #4
 801065e:	2b00      	cmp	r3, #0
 8010660:	d050      	beq.n	8010704 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8010662:	68fb      	ldr	r3, [r7, #12]
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	69db      	ldr	r3, [r3, #28]
 8010668:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801066c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8010670:	d148      	bne.n	8010704 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8010672:	68fb      	ldr	r3, [r7, #12]
 8010674:	681b      	ldr	r3, [r3, #0]
 8010676:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801067a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 801067c:	68fb      	ldr	r3, [r7, #12]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010684:	e853 3f00 	ldrex	r3, [r3]
 8010688:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801068a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801068c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8010690:	66fb      	str	r3, [r7, #108]	; 0x6c
 8010692:	68fb      	ldr	r3, [r7, #12]
 8010694:	681b      	ldr	r3, [r3, #0]
 8010696:	461a      	mov	r2, r3
 8010698:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801069a:	637b      	str	r3, [r7, #52]	; 0x34
 801069c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801069e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80106a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80106a2:	e841 2300 	strex	r3, r2, [r1]
 80106a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80106a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d1e6      	bne.n	801067c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80106ae:	68fb      	ldr	r3, [r7, #12]
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	3308      	adds	r3, #8
 80106b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80106b6:	697b      	ldr	r3, [r7, #20]
 80106b8:	e853 3f00 	ldrex	r3, [r3]
 80106bc:	613b      	str	r3, [r7, #16]
   return(result);
 80106be:	693b      	ldr	r3, [r7, #16]
 80106c0:	f023 0301 	bic.w	r3, r3, #1
 80106c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80106c6:	68fb      	ldr	r3, [r7, #12]
 80106c8:	681b      	ldr	r3, [r3, #0]
 80106ca:	3308      	adds	r3, #8
 80106cc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80106ce:	623a      	str	r2, [r7, #32]
 80106d0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80106d2:	69f9      	ldr	r1, [r7, #28]
 80106d4:	6a3a      	ldr	r2, [r7, #32]
 80106d6:	e841 2300 	strex	r3, r2, [r1]
 80106da:	61bb      	str	r3, [r7, #24]
   return(result);
 80106dc:	69bb      	ldr	r3, [r7, #24]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d1e5      	bne.n	80106ae <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80106e2:	68fb      	ldr	r3, [r7, #12]
 80106e4:	2220      	movs	r2, #32
 80106e6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80106e8:	68fb      	ldr	r3, [r7, #12]
 80106ea:	2220      	movs	r2, #32
 80106ec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80106f0:	68fb      	ldr	r3, [r7, #12]
 80106f2:	2220      	movs	r2, #32
 80106f4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80106f8:	68fb      	ldr	r3, [r7, #12]
 80106fa:	2200      	movs	r2, #0
 80106fc:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8010700:	2303      	movs	r3, #3
 8010702:	e010      	b.n	8010726 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8010704:	68fb      	ldr	r3, [r7, #12]
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	69da      	ldr	r2, [r3, #28]
 801070a:	68bb      	ldr	r3, [r7, #8]
 801070c:	4013      	ands	r3, r2
 801070e:	68ba      	ldr	r2, [r7, #8]
 8010710:	429a      	cmp	r2, r3
 8010712:	bf0c      	ite	eq
 8010714:	2301      	moveq	r3, #1
 8010716:	2300      	movne	r3, #0
 8010718:	b2db      	uxtb	r3, r3
 801071a:	461a      	mov	r2, r3
 801071c:	79fb      	ldrb	r3, [r7, #7]
 801071e:	429a      	cmp	r2, r3
 8010720:	f43f af48 	beq.w	80105b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8010724:	2300      	movs	r3, #0
}
 8010726:	4618      	mov	r0, r3
 8010728:	3770      	adds	r7, #112	; 0x70
 801072a:	46bd      	mov	sp, r7
 801072c:	bd80      	pop	{r7, pc}
	...

08010730 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8010730:	b480      	push	{r7}
 8010732:	b097      	sub	sp, #92	; 0x5c
 8010734:	af00      	add	r7, sp, #0
 8010736:	60f8      	str	r0, [r7, #12]
 8010738:	60b9      	str	r1, [r7, #8]
 801073a:	4613      	mov	r3, r2
 801073c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801073e:	68fb      	ldr	r3, [r7, #12]
 8010740:	68ba      	ldr	r2, [r7, #8]
 8010742:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8010744:	68fb      	ldr	r3, [r7, #12]
 8010746:	88fa      	ldrh	r2, [r7, #6]
 8010748:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 801074c:	68fb      	ldr	r3, [r7, #12]
 801074e:	88fa      	ldrh	r2, [r7, #6]
 8010750:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8010754:	68fb      	ldr	r3, [r7, #12]
 8010756:	2200      	movs	r2, #0
 8010758:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	689b      	ldr	r3, [r3, #8]
 801075e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010762:	d10e      	bne.n	8010782 <UART_Start_Receive_IT+0x52>
 8010764:	68fb      	ldr	r3, [r7, #12]
 8010766:	691b      	ldr	r3, [r3, #16]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d105      	bne.n	8010778 <UART_Start_Receive_IT+0x48>
 801076c:	68fb      	ldr	r3, [r7, #12]
 801076e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8010772:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010776:	e02d      	b.n	80107d4 <UART_Start_Receive_IT+0xa4>
 8010778:	68fb      	ldr	r3, [r7, #12]
 801077a:	22ff      	movs	r2, #255	; 0xff
 801077c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8010780:	e028      	b.n	80107d4 <UART_Start_Receive_IT+0xa4>
 8010782:	68fb      	ldr	r3, [r7, #12]
 8010784:	689b      	ldr	r3, [r3, #8]
 8010786:	2b00      	cmp	r3, #0
 8010788:	d10d      	bne.n	80107a6 <UART_Start_Receive_IT+0x76>
 801078a:	68fb      	ldr	r3, [r7, #12]
 801078c:	691b      	ldr	r3, [r3, #16]
 801078e:	2b00      	cmp	r3, #0
 8010790:	d104      	bne.n	801079c <UART_Start_Receive_IT+0x6c>
 8010792:	68fb      	ldr	r3, [r7, #12]
 8010794:	22ff      	movs	r2, #255	; 0xff
 8010796:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 801079a:	e01b      	b.n	80107d4 <UART_Start_Receive_IT+0xa4>
 801079c:	68fb      	ldr	r3, [r7, #12]
 801079e:	227f      	movs	r2, #127	; 0x7f
 80107a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80107a4:	e016      	b.n	80107d4 <UART_Start_Receive_IT+0xa4>
 80107a6:	68fb      	ldr	r3, [r7, #12]
 80107a8:	689b      	ldr	r3, [r3, #8]
 80107aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80107ae:	d10d      	bne.n	80107cc <UART_Start_Receive_IT+0x9c>
 80107b0:	68fb      	ldr	r3, [r7, #12]
 80107b2:	691b      	ldr	r3, [r3, #16]
 80107b4:	2b00      	cmp	r3, #0
 80107b6:	d104      	bne.n	80107c2 <UART_Start_Receive_IT+0x92>
 80107b8:	68fb      	ldr	r3, [r7, #12]
 80107ba:	227f      	movs	r2, #127	; 0x7f
 80107bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80107c0:	e008      	b.n	80107d4 <UART_Start_Receive_IT+0xa4>
 80107c2:	68fb      	ldr	r3, [r7, #12]
 80107c4:	223f      	movs	r2, #63	; 0x3f
 80107c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80107ca:	e003      	b.n	80107d4 <UART_Start_Receive_IT+0xa4>
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	2200      	movs	r2, #0
 80107d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80107d4:	68fb      	ldr	r3, [r7, #12]
 80107d6:	2200      	movs	r2, #0
 80107d8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80107dc:	68fb      	ldr	r3, [r7, #12]
 80107de:	2222      	movs	r2, #34	; 0x22
 80107e0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80107e4:	68fb      	ldr	r3, [r7, #12]
 80107e6:	681b      	ldr	r3, [r3, #0]
 80107e8:	3308      	adds	r3, #8
 80107ea:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80107ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80107ee:	e853 3f00 	ldrex	r3, [r3]
 80107f2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80107f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107f6:	f043 0301 	orr.w	r3, r3, #1
 80107fa:	657b      	str	r3, [r7, #84]	; 0x54
 80107fc:	68fb      	ldr	r3, [r7, #12]
 80107fe:	681b      	ldr	r3, [r3, #0]
 8010800:	3308      	adds	r3, #8
 8010802:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8010804:	64ba      	str	r2, [r7, #72]	; 0x48
 8010806:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010808:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801080a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801080c:	e841 2300 	strex	r3, r2, [r1]
 8010810:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8010812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010814:	2b00      	cmp	r3, #0
 8010816:	d1e5      	bne.n	80107e4 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8010818:	68fb      	ldr	r3, [r7, #12]
 801081a:	689b      	ldr	r3, [r3, #8]
 801081c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010820:	d107      	bne.n	8010832 <UART_Start_Receive_IT+0x102>
 8010822:	68fb      	ldr	r3, [r7, #12]
 8010824:	691b      	ldr	r3, [r3, #16]
 8010826:	2b00      	cmp	r3, #0
 8010828:	d103      	bne.n	8010832 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	4a21      	ldr	r2, [pc, #132]	; (80108b4 <UART_Start_Receive_IT+0x184>)
 801082e:	669a      	str	r2, [r3, #104]	; 0x68
 8010830:	e002      	b.n	8010838 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8010832:	68fb      	ldr	r3, [r7, #12]
 8010834:	4a20      	ldr	r2, [pc, #128]	; (80108b8 <UART_Start_Receive_IT+0x188>)
 8010836:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8010838:	68fb      	ldr	r3, [r7, #12]
 801083a:	691b      	ldr	r3, [r3, #16]
 801083c:	2b00      	cmp	r3, #0
 801083e:	d019      	beq.n	8010874 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8010840:	68fb      	ldr	r3, [r7, #12]
 8010842:	681b      	ldr	r3, [r3, #0]
 8010844:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010846:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010848:	e853 3f00 	ldrex	r3, [r3]
 801084c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 801084e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010850:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8010854:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010856:	68fb      	ldr	r3, [r7, #12]
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	461a      	mov	r2, r3
 801085c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085e:	637b      	str	r3, [r7, #52]	; 0x34
 8010860:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010862:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8010864:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010866:	e841 2300 	strex	r3, r2, [r1]
 801086a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 801086c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801086e:	2b00      	cmp	r3, #0
 8010870:	d1e6      	bne.n	8010840 <UART_Start_Receive_IT+0x110>
 8010872:	e018      	b.n	80108a6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8010874:	68fb      	ldr	r3, [r7, #12]
 8010876:	681b      	ldr	r3, [r3, #0]
 8010878:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801087a:	697b      	ldr	r3, [r7, #20]
 801087c:	e853 3f00 	ldrex	r3, [r3]
 8010880:	613b      	str	r3, [r7, #16]
   return(result);
 8010882:	693b      	ldr	r3, [r7, #16]
 8010884:	f043 0320 	orr.w	r3, r3, #32
 8010888:	653b      	str	r3, [r7, #80]	; 0x50
 801088a:	68fb      	ldr	r3, [r7, #12]
 801088c:	681b      	ldr	r3, [r3, #0]
 801088e:	461a      	mov	r2, r3
 8010890:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010892:	623b      	str	r3, [r7, #32]
 8010894:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010896:	69f9      	ldr	r1, [r7, #28]
 8010898:	6a3a      	ldr	r2, [r7, #32]
 801089a:	e841 2300 	strex	r3, r2, [r1]
 801089e:	61bb      	str	r3, [r7, #24]
   return(result);
 80108a0:	69bb      	ldr	r3, [r7, #24]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d1e6      	bne.n	8010874 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80108a6:	2300      	movs	r3, #0
}
 80108a8:	4618      	mov	r0, r3
 80108aa:	375c      	adds	r7, #92	; 0x5c
 80108ac:	46bd      	mov	sp, r7
 80108ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108b2:	4770      	bx	lr
 80108b4:	08010ce1 	.word	0x08010ce1
 80108b8:	08010b7b 	.word	0x08010b7b

080108bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80108bc:	b480      	push	{r7}
 80108be:	b095      	sub	sp, #84	; 0x54
 80108c0:	af00      	add	r7, sp, #0
 80108c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80108c4:	687b      	ldr	r3, [r7, #4]
 80108c6:	681b      	ldr	r3, [r3, #0]
 80108c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108cc:	e853 3f00 	ldrex	r3, [r3]
 80108d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80108d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80108d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80108da:	687b      	ldr	r3, [r7, #4]
 80108dc:	681b      	ldr	r3, [r3, #0]
 80108de:	461a      	mov	r2, r3
 80108e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108e2:	643b      	str	r3, [r7, #64]	; 0x40
 80108e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80108e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80108e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80108ea:	e841 2300 	strex	r3, r2, [r1]
 80108ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80108f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d1e6      	bne.n	80108c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80108f6:	687b      	ldr	r3, [r7, #4]
 80108f8:	681b      	ldr	r3, [r3, #0]
 80108fa:	3308      	adds	r3, #8
 80108fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80108fe:	6a3b      	ldr	r3, [r7, #32]
 8010900:	e853 3f00 	ldrex	r3, [r3]
 8010904:	61fb      	str	r3, [r7, #28]
   return(result);
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	f023 0301 	bic.w	r3, r3, #1
 801090c:	64bb      	str	r3, [r7, #72]	; 0x48
 801090e:	687b      	ldr	r3, [r7, #4]
 8010910:	681b      	ldr	r3, [r3, #0]
 8010912:	3308      	adds	r3, #8
 8010914:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010916:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010918:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801091a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801091c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801091e:	e841 2300 	strex	r3, r2, [r1]
 8010922:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010926:	2b00      	cmp	r3, #0
 8010928:	d1e5      	bne.n	80108f6 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801092a:	687b      	ldr	r3, [r7, #4]
 801092c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801092e:	2b01      	cmp	r3, #1
 8010930:	d118      	bne.n	8010964 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010932:	687b      	ldr	r3, [r7, #4]
 8010934:	681b      	ldr	r3, [r3, #0]
 8010936:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010938:	68fb      	ldr	r3, [r7, #12]
 801093a:	e853 3f00 	ldrex	r3, [r3]
 801093e:	60bb      	str	r3, [r7, #8]
   return(result);
 8010940:	68bb      	ldr	r3, [r7, #8]
 8010942:	f023 0310 	bic.w	r3, r3, #16
 8010946:	647b      	str	r3, [r7, #68]	; 0x44
 8010948:	687b      	ldr	r3, [r7, #4]
 801094a:	681b      	ldr	r3, [r3, #0]
 801094c:	461a      	mov	r2, r3
 801094e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010950:	61bb      	str	r3, [r7, #24]
 8010952:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010954:	6979      	ldr	r1, [r7, #20]
 8010956:	69ba      	ldr	r2, [r7, #24]
 8010958:	e841 2300 	strex	r3, r2, [r1]
 801095c:	613b      	str	r3, [r7, #16]
   return(result);
 801095e:	693b      	ldr	r3, [r7, #16]
 8010960:	2b00      	cmp	r3, #0
 8010962:	d1e6      	bne.n	8010932 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8010964:	687b      	ldr	r3, [r7, #4]
 8010966:	2220      	movs	r2, #32
 8010968:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801096c:	687b      	ldr	r3, [r7, #4]
 801096e:	2200      	movs	r2, #0
 8010970:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	2200      	movs	r2, #0
 8010976:	669a      	str	r2, [r3, #104]	; 0x68
}
 8010978:	bf00      	nop
 801097a:	3754      	adds	r7, #84	; 0x54
 801097c:	46bd      	mov	sp, r7
 801097e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010982:	4770      	bx	lr

08010984 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8010984:	b580      	push	{r7, lr}
 8010986:	b084      	sub	sp, #16
 8010988:	af00      	add	r7, sp, #0
 801098a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801098c:	687b      	ldr	r3, [r7, #4]
 801098e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010990:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8010992:	68fb      	ldr	r3, [r7, #12]
 8010994:	2200      	movs	r2, #0
 8010996:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 801099a:	68fb      	ldr	r3, [r7, #12]
 801099c:	2200      	movs	r2, #0
 801099e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80109a2:	68f8      	ldr	r0, [r7, #12]
 80109a4:	f7ff faaa 	bl	800fefc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80109a8:	bf00      	nop
 80109aa:	3710      	adds	r7, #16
 80109ac:	46bd      	mov	sp, r7
 80109ae:	bd80      	pop	{r7, pc}

080109b0 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 80109b0:	b480      	push	{r7}
 80109b2:	b08f      	sub	sp, #60	; 0x3c
 80109b4:	af00      	add	r7, sp, #0
 80109b6:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80109bc:	2b21      	cmp	r3, #33	; 0x21
 80109be:	d14c      	bne.n	8010a5a <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80109c6:	b29b      	uxth	r3, r3
 80109c8:	2b00      	cmp	r3, #0
 80109ca:	d132      	bne.n	8010a32 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80109cc:	687b      	ldr	r3, [r7, #4]
 80109ce:	681b      	ldr	r3, [r3, #0]
 80109d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80109d2:	6a3b      	ldr	r3, [r7, #32]
 80109d4:	e853 3f00 	ldrex	r3, [r3]
 80109d8:	61fb      	str	r3, [r7, #28]
   return(result);
 80109da:	69fb      	ldr	r3, [r7, #28]
 80109dc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80109e0:	637b      	str	r3, [r7, #52]	; 0x34
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	681b      	ldr	r3, [r3, #0]
 80109e6:	461a      	mov	r2, r3
 80109e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80109ea:	62fb      	str	r3, [r7, #44]	; 0x2c
 80109ec:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80109ee:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80109f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80109f2:	e841 2300 	strex	r3, r2, [r1]
 80109f6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80109f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80109fa:	2b00      	cmp	r3, #0
 80109fc:	d1e6      	bne.n	80109cc <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80109fe:	687b      	ldr	r3, [r7, #4]
 8010a00:	681b      	ldr	r3, [r3, #0]
 8010a02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	e853 3f00 	ldrex	r3, [r3]
 8010a0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010a0c:	68bb      	ldr	r3, [r7, #8]
 8010a0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010a12:	633b      	str	r3, [r7, #48]	; 0x30
 8010a14:	687b      	ldr	r3, [r7, #4]
 8010a16:	681b      	ldr	r3, [r3, #0]
 8010a18:	461a      	mov	r2, r3
 8010a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a1c:	61bb      	str	r3, [r7, #24]
 8010a1e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010a20:	6979      	ldr	r1, [r7, #20]
 8010a22:	69ba      	ldr	r2, [r7, #24]
 8010a24:	e841 2300 	strex	r3, r2, [r1]
 8010a28:	613b      	str	r3, [r7, #16]
   return(result);
 8010a2a:	693b      	ldr	r3, [r7, #16]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d1e6      	bne.n	80109fe <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 8010a30:	e013      	b.n	8010a5a <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 8010a32:	687b      	ldr	r3, [r7, #4]
 8010a34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a36:	781a      	ldrb	r2, [r3, #0]
 8010a38:	687b      	ldr	r3, [r7, #4]
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 8010a3e:	687b      	ldr	r3, [r7, #4]
 8010a40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010a42:	1c5a      	adds	r2, r3, #1
 8010a44:	687b      	ldr	r3, [r7, #4]
 8010a46:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010a48:	687b      	ldr	r3, [r7, #4]
 8010a4a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010a4e:	b29b      	uxth	r3, r3
 8010a50:	3b01      	subs	r3, #1
 8010a52:	b29a      	uxth	r2, r3
 8010a54:	687b      	ldr	r3, [r7, #4]
 8010a56:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8010a5a:	bf00      	nop
 8010a5c:	373c      	adds	r7, #60	; 0x3c
 8010a5e:	46bd      	mov	sp, r7
 8010a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a64:	4770      	bx	lr

08010a66 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010a66:	b480      	push	{r7}
 8010a68:	b091      	sub	sp, #68	; 0x44
 8010a6a:	af00      	add	r7, sp, #0
 8010a6c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8010a6e:	687b      	ldr	r3, [r7, #4]
 8010a70:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010a72:	2b21      	cmp	r3, #33	; 0x21
 8010a74:	d151      	bne.n	8010b1a <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 8010a76:	687b      	ldr	r3, [r7, #4]
 8010a78:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010a7c:	b29b      	uxth	r3, r3
 8010a7e:	2b00      	cmp	r3, #0
 8010a80:	d132      	bne.n	8010ae8 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	681b      	ldr	r3, [r3, #0]
 8010a86:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010a8a:	e853 3f00 	ldrex	r3, [r3]
 8010a8e:	623b      	str	r3, [r7, #32]
   return(result);
 8010a90:	6a3b      	ldr	r3, [r7, #32]
 8010a92:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8010a96:	63bb      	str	r3, [r7, #56]	; 0x38
 8010a98:	687b      	ldr	r3, [r7, #4]
 8010a9a:	681b      	ldr	r3, [r3, #0]
 8010a9c:	461a      	mov	r2, r3
 8010a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aa0:	633b      	str	r3, [r7, #48]	; 0x30
 8010aa2:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010aa4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010aa6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010aa8:	e841 2300 	strex	r3, r2, [r1]
 8010aac:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ab0:	2b00      	cmp	r3, #0
 8010ab2:	d1e6      	bne.n	8010a82 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010ab4:	687b      	ldr	r3, [r7, #4]
 8010ab6:	681b      	ldr	r3, [r3, #0]
 8010ab8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010aba:	693b      	ldr	r3, [r7, #16]
 8010abc:	e853 3f00 	ldrex	r3, [r3]
 8010ac0:	60fb      	str	r3, [r7, #12]
   return(result);
 8010ac2:	68fb      	ldr	r3, [r7, #12]
 8010ac4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8010ac8:	637b      	str	r3, [r7, #52]	; 0x34
 8010aca:	687b      	ldr	r3, [r7, #4]
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	461a      	mov	r2, r3
 8010ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010ad2:	61fb      	str	r3, [r7, #28]
 8010ad4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010ad6:	69b9      	ldr	r1, [r7, #24]
 8010ad8:	69fa      	ldr	r2, [r7, #28]
 8010ada:	e841 2300 	strex	r3, r2, [r1]
 8010ade:	617b      	str	r3, [r7, #20]
   return(result);
 8010ae0:	697b      	ldr	r3, [r7, #20]
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d1e6      	bne.n	8010ab4 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8010ae6:	e018      	b.n	8010b1a <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8010ae8:	687b      	ldr	r3, [r7, #4]
 8010aea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010aec:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 8010aee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010af0:	881b      	ldrh	r3, [r3, #0]
 8010af2:	461a      	mov	r2, r3
 8010af4:	687b      	ldr	r3, [r7, #4]
 8010af6:	681b      	ldr	r3, [r3, #0]
 8010af8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8010afc:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 8010afe:	687b      	ldr	r3, [r7, #4]
 8010b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010b02:	1c9a      	adds	r2, r3, #2
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8010b0e:	b29b      	uxth	r3, r3
 8010b10:	3b01      	subs	r3, #1
 8010b12:	b29a      	uxth	r2, r3
 8010b14:	687b      	ldr	r3, [r7, #4]
 8010b16:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8010b1a:	bf00      	nop
 8010b1c:	3744      	adds	r7, #68	; 0x44
 8010b1e:	46bd      	mov	sp, r7
 8010b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010b24:	4770      	bx	lr

08010b26 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8010b26:	b580      	push	{r7, lr}
 8010b28:	b088      	sub	sp, #32
 8010b2a:	af00      	add	r7, sp, #0
 8010b2c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8010b2e:	687b      	ldr	r3, [r7, #4]
 8010b30:	681b      	ldr	r3, [r3, #0]
 8010b32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010b34:	68fb      	ldr	r3, [r7, #12]
 8010b36:	e853 3f00 	ldrex	r3, [r3]
 8010b3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8010b3c:	68bb      	ldr	r3, [r7, #8]
 8010b3e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010b42:	61fb      	str	r3, [r7, #28]
 8010b44:	687b      	ldr	r3, [r7, #4]
 8010b46:	681b      	ldr	r3, [r3, #0]
 8010b48:	461a      	mov	r2, r3
 8010b4a:	69fb      	ldr	r3, [r7, #28]
 8010b4c:	61bb      	str	r3, [r7, #24]
 8010b4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010b50:	6979      	ldr	r1, [r7, #20]
 8010b52:	69ba      	ldr	r2, [r7, #24]
 8010b54:	e841 2300 	strex	r3, r2, [r1]
 8010b58:	613b      	str	r3, [r7, #16]
   return(result);
 8010b5a:	693b      	ldr	r3, [r7, #16]
 8010b5c:	2b00      	cmp	r3, #0
 8010b5e:	d1e6      	bne.n	8010b2e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	2220      	movs	r2, #32
 8010b64:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8010b66:	687b      	ldr	r3, [r7, #4]
 8010b68:	2200      	movs	r2, #0
 8010b6a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8010b6c:	6878      	ldr	r0, [r7, #4]
 8010b6e:	f7ff f9bb 	bl	800fee8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8010b72:	bf00      	nop
 8010b74:	3720      	adds	r7, #32
 8010b76:	46bd      	mov	sp, r7
 8010b78:	bd80      	pop	{r7, pc}

08010b7a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8010b7a:	b580      	push	{r7, lr}
 8010b7c:	b096      	sub	sp, #88	; 0x58
 8010b7e:	af00      	add	r7, sp, #0
 8010b80:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010b88:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010b92:	2b22      	cmp	r3, #34	; 0x22
 8010b94:	f040 8098 	bne.w	8010cc8 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	681b      	ldr	r3, [r3, #0]
 8010b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b9e:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8010ba2:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8010ba6:	b2d9      	uxtb	r1, r3
 8010ba8:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010bac:	b2da      	uxtb	r2, r3
 8010bae:	687b      	ldr	r3, [r7, #4]
 8010bb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bb2:	400a      	ands	r2, r1
 8010bb4:	b2d2      	uxtb	r2, r2
 8010bb6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010bbc:	1c5a      	adds	r2, r3, #1
 8010bbe:	687b      	ldr	r3, [r7, #4]
 8010bc0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010bc8:	b29b      	uxth	r3, r3
 8010bca:	3b01      	subs	r3, #1
 8010bcc:	b29a      	uxth	r2, r3
 8010bce:	687b      	ldr	r3, [r7, #4]
 8010bd0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010bd4:	687b      	ldr	r3, [r7, #4]
 8010bd6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010bda:	b29b      	uxth	r3, r3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	d17b      	bne.n	8010cd8 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	681b      	ldr	r3, [r3, #0]
 8010be4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010be8:	e853 3f00 	ldrex	r3, [r3]
 8010bec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8010bee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010bf0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010bf4:	653b      	str	r3, [r7, #80]	; 0x50
 8010bf6:	687b      	ldr	r3, [r7, #4]
 8010bf8:	681b      	ldr	r3, [r3, #0]
 8010bfa:	461a      	mov	r2, r3
 8010bfc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010bfe:	647b      	str	r3, [r7, #68]	; 0x44
 8010c00:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c02:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8010c04:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8010c06:	e841 2300 	strex	r3, r2, [r1]
 8010c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8010c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010c0e:	2b00      	cmp	r3, #0
 8010c10:	d1e6      	bne.n	8010be0 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	681b      	ldr	r3, [r3, #0]
 8010c16:	3308      	adds	r3, #8
 8010c18:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010c1c:	e853 3f00 	ldrex	r3, [r3]
 8010c20:	623b      	str	r3, [r7, #32]
   return(result);
 8010c22:	6a3b      	ldr	r3, [r7, #32]
 8010c24:	f023 0301 	bic.w	r3, r3, #1
 8010c28:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	681b      	ldr	r3, [r3, #0]
 8010c2e:	3308      	adds	r3, #8
 8010c30:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010c32:	633a      	str	r2, [r7, #48]	; 0x30
 8010c34:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8010c38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c3a:	e841 2300 	strex	r3, r2, [r1]
 8010c3e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8010c40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010c42:	2b00      	cmp	r3, #0
 8010c44:	d1e5      	bne.n	8010c12 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	2220      	movs	r2, #32
 8010c4a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010c4e:	687b      	ldr	r3, [r7, #4]
 8010c50:	2200      	movs	r2, #0
 8010c52:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	2200      	movs	r2, #0
 8010c58:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010c5a:	687b      	ldr	r3, [r7, #4]
 8010c5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010c5e:	2b01      	cmp	r3, #1
 8010c60:	d12e      	bne.n	8010cc0 <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010c62:	687b      	ldr	r3, [r7, #4]
 8010c64:	2200      	movs	r2, #0
 8010c66:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010c68:	687b      	ldr	r3, [r7, #4]
 8010c6a:	681b      	ldr	r3, [r3, #0]
 8010c6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010c6e:	693b      	ldr	r3, [r7, #16]
 8010c70:	e853 3f00 	ldrex	r3, [r3]
 8010c74:	60fb      	str	r3, [r7, #12]
   return(result);
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	f023 0310 	bic.w	r3, r3, #16
 8010c7c:	64bb      	str	r3, [r7, #72]	; 0x48
 8010c7e:	687b      	ldr	r3, [r7, #4]
 8010c80:	681b      	ldr	r3, [r3, #0]
 8010c82:	461a      	mov	r2, r3
 8010c84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c86:	61fb      	str	r3, [r7, #28]
 8010c88:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010c8a:	69b9      	ldr	r1, [r7, #24]
 8010c8c:	69fa      	ldr	r2, [r7, #28]
 8010c8e:	e841 2300 	strex	r3, r2, [r1]
 8010c92:	617b      	str	r3, [r7, #20]
   return(result);
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	2b00      	cmp	r3, #0
 8010c98:	d1e6      	bne.n	8010c68 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	681b      	ldr	r3, [r3, #0]
 8010c9e:	69db      	ldr	r3, [r3, #28]
 8010ca0:	f003 0310 	and.w	r3, r3, #16
 8010ca4:	2b10      	cmp	r3, #16
 8010ca6:	d103      	bne.n	8010cb0 <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	681b      	ldr	r3, [r3, #0]
 8010cac:	2210      	movs	r2, #16
 8010cae:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010cb6:	4619      	mov	r1, r3
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	f7ff f929 	bl	800ff10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010cbe:	e00b      	b.n	8010cd8 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8010cc0:	6878      	ldr	r0, [r7, #4]
 8010cc2:	f7f0 f94d 	bl	8000f60 <HAL_UART_RxCpltCallback>
}
 8010cc6:	e007      	b.n	8010cd8 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010cc8:	687b      	ldr	r3, [r7, #4]
 8010cca:	681b      	ldr	r3, [r3, #0]
 8010ccc:	699a      	ldr	r2, [r3, #24]
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	681b      	ldr	r3, [r3, #0]
 8010cd2:	f042 0208 	orr.w	r2, r2, #8
 8010cd6:	619a      	str	r2, [r3, #24]
}
 8010cd8:	bf00      	nop
 8010cda:	3758      	adds	r7, #88	; 0x58
 8010cdc:	46bd      	mov	sp, r7
 8010cde:	bd80      	pop	{r7, pc}

08010ce0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8010ce0:	b580      	push	{r7, lr}
 8010ce2:	b096      	sub	sp, #88	; 0x58
 8010ce4:	af00      	add	r7, sp, #0
 8010ce6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8010ce8:	687b      	ldr	r3, [r7, #4]
 8010cea:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8010cee:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8010cf8:	2b22      	cmp	r3, #34	; 0x22
 8010cfa:	f040 8098 	bne.w	8010e2e <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8010cfe:	687b      	ldr	r3, [r7, #4]
 8010d00:	681b      	ldr	r3, [r3, #0]
 8010d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010d04:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d0c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8010d0e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8010d12:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8010d16:	4013      	ands	r3, r2
 8010d18:	b29a      	uxth	r2, r3
 8010d1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010d1c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8010d1e:	687b      	ldr	r3, [r7, #4]
 8010d20:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010d22:	1c9a      	adds	r2, r3, #2
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8010d28:	687b      	ldr	r3, [r7, #4]
 8010d2a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	3b01      	subs	r3, #1
 8010d32:	b29a      	uxth	r2, r3
 8010d34:	687b      	ldr	r3, [r7, #4]
 8010d36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8010d40:	b29b      	uxth	r3, r3
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d17b      	bne.n	8010e3e <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	681b      	ldr	r3, [r3, #0]
 8010d4a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010d4e:	e853 3f00 	ldrex	r3, [r3]
 8010d52:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8010d54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010d56:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8010d5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010d5c:	687b      	ldr	r3, [r7, #4]
 8010d5e:	681b      	ldr	r3, [r3, #0]
 8010d60:	461a      	mov	r2, r3
 8010d62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010d64:	643b      	str	r3, [r7, #64]	; 0x40
 8010d66:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d68:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010d6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8010d6c:	e841 2300 	strex	r3, r2, [r1]
 8010d70:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8010d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d1e6      	bne.n	8010d46 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8010d78:	687b      	ldr	r3, [r7, #4]
 8010d7a:	681b      	ldr	r3, [r3, #0]
 8010d7c:	3308      	adds	r3, #8
 8010d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010d80:	6a3b      	ldr	r3, [r7, #32]
 8010d82:	e853 3f00 	ldrex	r3, [r3]
 8010d86:	61fb      	str	r3, [r7, #28]
   return(result);
 8010d88:	69fb      	ldr	r3, [r7, #28]
 8010d8a:	f023 0301 	bic.w	r3, r3, #1
 8010d8e:	64bb      	str	r3, [r7, #72]	; 0x48
 8010d90:	687b      	ldr	r3, [r7, #4]
 8010d92:	681b      	ldr	r3, [r3, #0]
 8010d94:	3308      	adds	r3, #8
 8010d96:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d98:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010d9a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010d9c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8010d9e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010da0:	e841 2300 	strex	r3, r2, [r1]
 8010da4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8010da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010da8:	2b00      	cmp	r3, #0
 8010daa:	d1e5      	bne.n	8010d78 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	2220      	movs	r2, #32
 8010db0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	2200      	movs	r2, #0
 8010db8:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8010dc0:	687b      	ldr	r3, [r7, #4]
 8010dc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010dc4:	2b01      	cmp	r3, #1
 8010dc6:	d12e      	bne.n	8010e26 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8010dc8:	687b      	ldr	r3, [r7, #4]
 8010dca:	2200      	movs	r2, #0
 8010dcc:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8010dce:	687b      	ldr	r3, [r7, #4]
 8010dd0:	681b      	ldr	r3, [r3, #0]
 8010dd2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8010dd4:	68fb      	ldr	r3, [r7, #12]
 8010dd6:	e853 3f00 	ldrex	r3, [r3]
 8010dda:	60bb      	str	r3, [r7, #8]
   return(result);
 8010ddc:	68bb      	ldr	r3, [r7, #8]
 8010dde:	f023 0310 	bic.w	r3, r3, #16
 8010de2:	647b      	str	r3, [r7, #68]	; 0x44
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	681b      	ldr	r3, [r3, #0]
 8010de8:	461a      	mov	r2, r3
 8010dea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dec:	61bb      	str	r3, [r7, #24]
 8010dee:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8010df0:	6979      	ldr	r1, [r7, #20]
 8010df2:	69ba      	ldr	r2, [r7, #24]
 8010df4:	e841 2300 	strex	r3, r2, [r1]
 8010df8:	613b      	str	r3, [r7, #16]
   return(result);
 8010dfa:	693b      	ldr	r3, [r7, #16]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d1e6      	bne.n	8010dce <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	69db      	ldr	r3, [r3, #28]
 8010e06:	f003 0310 	and.w	r3, r3, #16
 8010e0a:	2b10      	cmp	r3, #16
 8010e0c:	d103      	bne.n	8010e16 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8010e0e:	687b      	ldr	r3, [r7, #4]
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	2210      	movs	r2, #16
 8010e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8010e16:	687b      	ldr	r3, [r7, #4]
 8010e18:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8010e1c:	4619      	mov	r1, r3
 8010e1e:	6878      	ldr	r0, [r7, #4]
 8010e20:	f7ff f876 	bl	800ff10 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8010e24:	e00b      	b.n	8010e3e <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8010e26:	6878      	ldr	r0, [r7, #4]
 8010e28:	f7f0 f89a 	bl	8000f60 <HAL_UART_RxCpltCallback>
}
 8010e2c:	e007      	b.n	8010e3e <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8010e2e:	687b      	ldr	r3, [r7, #4]
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	699a      	ldr	r2, [r3, #24]
 8010e34:	687b      	ldr	r3, [r7, #4]
 8010e36:	681b      	ldr	r3, [r3, #0]
 8010e38:	f042 0208 	orr.w	r2, r2, #8
 8010e3c:	619a      	str	r2, [r3, #24]
}
 8010e3e:	bf00      	nop
 8010e40:	3758      	adds	r7, #88	; 0x58
 8010e42:	46bd      	mov	sp, r7
 8010e44:	bd80      	pop	{r7, pc}
	...

08010e48 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8010e48:	b480      	push	{r7}
 8010e4a:	b087      	sub	sp, #28
 8010e4c:	af00      	add	r7, sp, #0
 8010e4e:	6078      	str	r0, [r7, #4]
 8010e50:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_CONTINOUS_CLOCK(Init->ContinuousClock));
  assert_param(IS_FMC_WRITE_FIFO(Init->WriteFifo));
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8010e52:	683b      	ldr	r3, [r7, #0]
 8010e54:	681a      	ldr	r2, [r3, #0]
 8010e56:	687b      	ldr	r3, [r7, #4]
 8010e58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010e5c:	683a      	ldr	r2, [r7, #0]
 8010e5e:	6812      	ldr	r2, [r2, #0]
 8010e60:	f023 0101 	bic.w	r1, r3, #1
 8010e64:	687b      	ldr	r3, [r7, #4]
 8010e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8010e6a:	683b      	ldr	r3, [r7, #0]
 8010e6c:	689b      	ldr	r3, [r3, #8]
 8010e6e:	2b08      	cmp	r3, #8
 8010e70:	d102      	bne.n	8010e78 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8010e72:	2340      	movs	r3, #64	; 0x40
 8010e74:	617b      	str	r3, [r7, #20]
 8010e76:	e001      	b.n	8010e7c <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8010e78:	2300      	movs	r3, #0
 8010e7a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8010e7c:	683b      	ldr	r3, [r7, #0]
 8010e7e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8010e80:	697b      	ldr	r3, [r7, #20]
 8010e82:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8010e84:	683b      	ldr	r3, [r7, #0]
 8010e86:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8010e88:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8010e8a:	683b      	ldr	r3, [r7, #0]
 8010e8c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8010e8e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8010e90:	683b      	ldr	r3, [r7, #0]
 8010e92:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8010e94:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8010e9a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8010e9c:	683b      	ldr	r3, [r7, #0]
 8010e9e:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8010ea0:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8010ea2:	683b      	ldr	r3, [r7, #0]
 8010ea4:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8010ea6:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8010ea8:	683b      	ldr	r3, [r7, #0]
 8010eaa:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8010eac:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8010eae:	683b      	ldr	r3, [r7, #0]
 8010eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8010eb2:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8010eb4:	683b      	ldr	r3, [r7, #0]
 8010eb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8010eb8:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8010eba:	683b      	ldr	r3, [r7, #0]
 8010ebc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8010ec2:	683b      	ldr	r3, [r7, #0]
 8010ec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010ec6:	693a      	ldr	r2, [r7, #16]
 8010ec8:	4313      	orrs	r3, r2
 8010eca:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8010ecc:	683b      	ldr	r3, [r7, #0]
 8010ece:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed0:	693a      	ldr	r2, [r7, #16]
 8010ed2:	4313      	orrs	r3, r2
 8010ed4:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8010ed6:	683b      	ldr	r3, [r7, #0]
 8010ed8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010eda:	693a      	ldr	r2, [r7, #16]
 8010edc:	4313      	orrs	r3, r2
 8010ede:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCR1_MBKEN                |
 8010ee0:	4b20      	ldr	r3, [pc, #128]	; (8010f64 <FMC_NORSRAM_Init+0x11c>)
 8010ee2:	60fb      	str	r3, [r7, #12]
          FMC_BCR1_WAITEN               |
          FMC_BCR1_EXTMOD               |
          FMC_BCR1_ASYNCWAIT            |
          FMC_BCR1_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8010ee4:	68fb      	ldr	r3, [r7, #12]
 8010ee6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8010eea:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8010eec:	68fb      	ldr	r3, [r7, #12]
 8010eee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8010ef2:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_CPSIZE;
 8010ef4:	68fb      	ldr	r3, [r7, #12]
 8010ef6:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8010efa:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8010efc:	683b      	ldr	r3, [r7, #0]
 8010efe:	681a      	ldr	r2, [r3, #0]
 8010f00:	687b      	ldr	r3, [r7, #4]
 8010f02:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8010f06:	68fb      	ldr	r3, [r7, #12]
 8010f08:	43db      	mvns	r3, r3
 8010f0a:	ea02 0103 	and.w	r1, r2, r3
 8010f0e:	683b      	ldr	r3, [r7, #0]
 8010f10:	681a      	ldr	r2, [r3, #0]
 8010f12:	693b      	ldr	r3, [r7, #16]
 8010f14:	4319      	orrs	r1, r3
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8010f1c:	683b      	ldr	r3, [r7, #0]
 8010f1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f20:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010f24:	d10c      	bne.n	8010f40 <FMC_NORSRAM_Init+0xf8>
 8010f26:	683b      	ldr	r3, [r7, #0]
 8010f28:	681b      	ldr	r3, [r3, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d008      	beq.n	8010f40 <FMC_NORSRAM_Init+0xf8>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8010f2e:	687b      	ldr	r3, [r7, #4]
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8010f36:	683b      	ldr	r3, [r7, #0]
 8010f38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010f3a:	431a      	orrs	r2, r3
 8010f3c:	687b      	ldr	r3, [r7, #4]
 8010f3e:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	681b      	ldr	r3, [r3, #0]
 8010f44:	2b00      	cmp	r3, #0
 8010f46:	d006      	beq.n	8010f56 <FMC_NORSRAM_Init+0x10e>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8010f48:	687b      	ldr	r3, [r7, #4]
 8010f4a:	681a      	ldr	r2, [r3, #0]
 8010f4c:	683b      	ldr	r3, [r7, #0]
 8010f4e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010f50:	431a      	orrs	r2, r3
 8010f52:	687b      	ldr	r3, [r7, #4]
 8010f54:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8010f56:	2300      	movs	r3, #0
}
 8010f58:	4618      	mov	r0, r3
 8010f5a:	371c      	adds	r7, #28
 8010f5c:	46bd      	mov	sp, r7
 8010f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010f62:	4770      	bx	lr
 8010f64:	0008fb7f 	.word	0x0008fb7f

08010f68 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8010f68:	b480      	push	{r7}
 8010f6a:	b087      	sub	sp, #28
 8010f6c:	af00      	add	r7, sp, #0
 8010f6e:	60f8      	str	r0, [r7, #12]
 8010f70:	60b9      	str	r1, [r7, #8]
 8010f72:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	1c5a      	adds	r2, r3, #1
 8010f78:	68fb      	ldr	r3, [r7, #12]
 8010f7a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8010f7e:	f003 4140 	and.w	r1, r3, #3221225472	; 0xc0000000
 8010f82:	68bb      	ldr	r3, [r7, #8]
 8010f84:	681a      	ldr	r2, [r3, #0]
 8010f86:	68bb      	ldr	r3, [r7, #8]
 8010f88:	685b      	ldr	r3, [r3, #4]
 8010f8a:	011b      	lsls	r3, r3, #4
 8010f8c:	431a      	orrs	r2, r3
 8010f8e:	68bb      	ldr	r3, [r7, #8]
 8010f90:	689b      	ldr	r3, [r3, #8]
 8010f92:	021b      	lsls	r3, r3, #8
 8010f94:	431a      	orrs	r2, r3
 8010f96:	68bb      	ldr	r3, [r7, #8]
 8010f98:	68db      	ldr	r3, [r3, #12]
 8010f9a:	041b      	lsls	r3, r3, #16
 8010f9c:	431a      	orrs	r2, r3
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	691b      	ldr	r3, [r3, #16]
 8010fa2:	3b01      	subs	r3, #1
 8010fa4:	051b      	lsls	r3, r3, #20
 8010fa6:	431a      	orrs	r2, r3
 8010fa8:	68bb      	ldr	r3, [r7, #8]
 8010faa:	695b      	ldr	r3, [r3, #20]
 8010fac:	3b02      	subs	r3, #2
 8010fae:	061b      	lsls	r3, r3, #24
 8010fb0:	431a      	orrs	r2, r3
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	699b      	ldr	r3, [r3, #24]
 8010fb6:	4313      	orrs	r3, r2
 8010fb8:	687a      	ldr	r2, [r7, #4]
 8010fba:	3201      	adds	r2, #1
 8010fbc:	4319      	orrs	r1, r3
 8010fbe:	68fb      	ldr	r3, [r7, #12]
 8010fc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTR1_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTR1_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8010fc4:	68fb      	ldr	r3, [r7, #12]
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8010fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010fd0:	d113      	bne.n	8010ffa <FMC_NORSRAM_Timing_Init+0x92>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTR1_CLKDIV_Pos));
 8010fd2:	68fb      	ldr	r3, [r7, #12]
 8010fd4:	685b      	ldr	r3, [r3, #4]
 8010fd6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8010fda:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTR1_CLKDIV_Pos);
 8010fdc:	68bb      	ldr	r3, [r7, #8]
 8010fde:	691b      	ldr	r3, [r3, #16]
 8010fe0:	3b01      	subs	r3, #1
 8010fe2:	051b      	lsls	r3, r3, #20
 8010fe4:	697a      	ldr	r2, [r7, #20]
 8010fe6:	4313      	orrs	r3, r2
 8010fe8:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTR1_CLKDIV, tmpr);
 8010fea:	68fb      	ldr	r3, [r7, #12]
 8010fec:	685b      	ldr	r3, [r3, #4]
 8010fee:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8010ff2:	697b      	ldr	r3, [r7, #20]
 8010ff4:	431a      	orrs	r2, r3
 8010ff6:	68fb      	ldr	r3, [r7, #12]
 8010ff8:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010ffa:	2300      	movs	r3, #0
}
 8010ffc:	4618      	mov	r0, r3
 8010ffe:	371c      	adds	r7, #28
 8011000:	46bd      	mov	sp, r7
 8011002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011006:	4770      	bx	lr

08011008 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8011008:	b480      	push	{r7}
 801100a:	b085      	sub	sp, #20
 801100c:	af00      	add	r7, sp, #0
 801100e:	60f8      	str	r0, [r7, #12]
 8011010:	60b9      	str	r1, [r7, #8]
 8011012:	607a      	str	r2, [r7, #4]
 8011014:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8011016:	683b      	ldr	r3, [r7, #0]
 8011018:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801101c:	d11d      	bne.n	801105a <FMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 801101e:	68fb      	ldr	r3, [r7, #12]
 8011020:	687a      	ldr	r2, [r7, #4]
 8011022:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8011026:	4b13      	ldr	r3, [pc, #76]	; (8011074 <FMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8011028:	4013      	ands	r3, r2
 801102a:	68ba      	ldr	r2, [r7, #8]
 801102c:	6811      	ldr	r1, [r2, #0]
 801102e:	68ba      	ldr	r2, [r7, #8]
 8011030:	6852      	ldr	r2, [r2, #4]
 8011032:	0112      	lsls	r2, r2, #4
 8011034:	4311      	orrs	r1, r2
 8011036:	68ba      	ldr	r2, [r7, #8]
 8011038:	6892      	ldr	r2, [r2, #8]
 801103a:	0212      	lsls	r2, r2, #8
 801103c:	4311      	orrs	r1, r2
 801103e:	68ba      	ldr	r2, [r7, #8]
 8011040:	6992      	ldr	r2, [r2, #24]
 8011042:	4311      	orrs	r1, r2
 8011044:	68ba      	ldr	r2, [r7, #8]
 8011046:	68d2      	ldr	r2, [r2, #12]
 8011048:	0412      	lsls	r2, r2, #16
 801104a:	430a      	orrs	r2, r1
 801104c:	ea43 0102 	orr.w	r1, r3, r2
 8011050:	68fb      	ldr	r3, [r7, #12]
 8011052:	687a      	ldr	r2, [r7, #4]
 8011054:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8011058:	e005      	b.n	8011066 <FMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 801105a:	68fb      	ldr	r3, [r7, #12]
 801105c:	687a      	ldr	r2, [r7, #4]
 801105e:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8011062:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8011066:	2300      	movs	r3, #0
}
 8011068:	4618      	mov	r0, r3
 801106a:	3714      	adds	r7, #20
 801106c:	46bd      	mov	sp, r7
 801106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011072:	4770      	bx	lr
 8011074:	cff00000 	.word	0xcff00000

08011078 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8011078:	b5b0      	push	{r4, r5, r7, lr}
 801107a:	b08c      	sub	sp, #48	; 0x30
 801107c:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 801107e:	4b96      	ldr	r3, [pc, #600]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011080:	22c0      	movs	r2, #192	; 0xc0
 8011082:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8011084:	4b94      	ldr	r3, [pc, #592]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011086:	22a8      	movs	r2, #168	; 0xa8
 8011088:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 801108a:	4b93      	ldr	r3, [pc, #588]	; (80112d8 <MX_LWIP_Init+0x260>)
 801108c:	2201      	movs	r2, #1
 801108e:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 30;
 8011090:	4b91      	ldr	r3, [pc, #580]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011092:	221e      	movs	r2, #30
 8011094:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8011096:	4b91      	ldr	r3, [pc, #580]	; (80112dc <MX_LWIP_Init+0x264>)
 8011098:	22ff      	movs	r2, #255	; 0xff
 801109a:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 801109c:	4b8f      	ldr	r3, [pc, #572]	; (80112dc <MX_LWIP_Init+0x264>)
 801109e:	22ff      	movs	r2, #255	; 0xff
 80110a0:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 80110a2:	4b8e      	ldr	r3, [pc, #568]	; (80112dc <MX_LWIP_Init+0x264>)
 80110a4:	22ff      	movs	r2, #255	; 0xff
 80110a6:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 80110a8:	4b8c      	ldr	r3, [pc, #560]	; (80112dc <MX_LWIP_Init+0x264>)
 80110aa:	2200      	movs	r2, #0
 80110ac:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 80110ae:	4b8c      	ldr	r3, [pc, #560]	; (80112e0 <MX_LWIP_Init+0x268>)
 80110b0:	22c0      	movs	r2, #192	; 0xc0
 80110b2:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 80110b4:	4b8a      	ldr	r3, [pc, #552]	; (80112e0 <MX_LWIP_Init+0x268>)
 80110b6:	22a8      	movs	r2, #168	; 0xa8
 80110b8:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 80110ba:	4b89      	ldr	r3, [pc, #548]	; (80112e0 <MX_LWIP_Init+0x268>)
 80110bc:	2201      	movs	r2, #1
 80110be:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 80110c0:	4b87      	ldr	r3, [pc, #540]	; (80112e0 <MX_LWIP_Init+0x268>)
 80110c2:	2201      	movs	r2, #1
 80110c4:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 80110c6:	2100      	movs	r1, #0
 80110c8:	2000      	movs	r0, #0
 80110ca:	f006 fa6d 	bl	80175a8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 80110ce:	4b82      	ldr	r3, [pc, #520]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110d0:	781b      	ldrb	r3, [r3, #0]
 80110d2:	061a      	lsls	r2, r3, #24
 80110d4:	4b80      	ldr	r3, [pc, #512]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110d6:	785b      	ldrb	r3, [r3, #1]
 80110d8:	041b      	lsls	r3, r3, #16
 80110da:	431a      	orrs	r2, r3
 80110dc:	4b7e      	ldr	r3, [pc, #504]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110de:	789b      	ldrb	r3, [r3, #2]
 80110e0:	021b      	lsls	r3, r3, #8
 80110e2:	4313      	orrs	r3, r2
 80110e4:	4a7c      	ldr	r2, [pc, #496]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110e6:	78d2      	ldrb	r2, [r2, #3]
 80110e8:	4313      	orrs	r3, r2
 80110ea:	061a      	lsls	r2, r3, #24
 80110ec:	4b7a      	ldr	r3, [pc, #488]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110ee:	781b      	ldrb	r3, [r3, #0]
 80110f0:	0619      	lsls	r1, r3, #24
 80110f2:	4b79      	ldr	r3, [pc, #484]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110f4:	785b      	ldrb	r3, [r3, #1]
 80110f6:	041b      	lsls	r3, r3, #16
 80110f8:	4319      	orrs	r1, r3
 80110fa:	4b77      	ldr	r3, [pc, #476]	; (80112d8 <MX_LWIP_Init+0x260>)
 80110fc:	789b      	ldrb	r3, [r3, #2]
 80110fe:	021b      	lsls	r3, r3, #8
 8011100:	430b      	orrs	r3, r1
 8011102:	4975      	ldr	r1, [pc, #468]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011104:	78c9      	ldrb	r1, [r1, #3]
 8011106:	430b      	orrs	r3, r1
 8011108:	021b      	lsls	r3, r3, #8
 801110a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801110e:	431a      	orrs	r2, r3
 8011110:	4b71      	ldr	r3, [pc, #452]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011112:	781b      	ldrb	r3, [r3, #0]
 8011114:	0619      	lsls	r1, r3, #24
 8011116:	4b70      	ldr	r3, [pc, #448]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011118:	785b      	ldrb	r3, [r3, #1]
 801111a:	041b      	lsls	r3, r3, #16
 801111c:	4319      	orrs	r1, r3
 801111e:	4b6e      	ldr	r3, [pc, #440]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011120:	789b      	ldrb	r3, [r3, #2]
 8011122:	021b      	lsls	r3, r3, #8
 8011124:	430b      	orrs	r3, r1
 8011126:	496c      	ldr	r1, [pc, #432]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011128:	78c9      	ldrb	r1, [r1, #3]
 801112a:	430b      	orrs	r3, r1
 801112c:	0a1b      	lsrs	r3, r3, #8
 801112e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011132:	431a      	orrs	r2, r3
 8011134:	4b68      	ldr	r3, [pc, #416]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011136:	781b      	ldrb	r3, [r3, #0]
 8011138:	0619      	lsls	r1, r3, #24
 801113a:	4b67      	ldr	r3, [pc, #412]	; (80112d8 <MX_LWIP_Init+0x260>)
 801113c:	785b      	ldrb	r3, [r3, #1]
 801113e:	041b      	lsls	r3, r3, #16
 8011140:	4319      	orrs	r1, r3
 8011142:	4b65      	ldr	r3, [pc, #404]	; (80112d8 <MX_LWIP_Init+0x260>)
 8011144:	789b      	ldrb	r3, [r3, #2]
 8011146:	021b      	lsls	r3, r3, #8
 8011148:	430b      	orrs	r3, r1
 801114a:	4963      	ldr	r1, [pc, #396]	; (80112d8 <MX_LWIP_Init+0x260>)
 801114c:	78c9      	ldrb	r1, [r1, #3]
 801114e:	430b      	orrs	r3, r1
 8011150:	0e1b      	lsrs	r3, r3, #24
 8011152:	4313      	orrs	r3, r2
 8011154:	4a63      	ldr	r2, [pc, #396]	; (80112e4 <MX_LWIP_Init+0x26c>)
 8011156:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8011158:	4b60      	ldr	r3, [pc, #384]	; (80112dc <MX_LWIP_Init+0x264>)
 801115a:	781b      	ldrb	r3, [r3, #0]
 801115c:	061a      	lsls	r2, r3, #24
 801115e:	4b5f      	ldr	r3, [pc, #380]	; (80112dc <MX_LWIP_Init+0x264>)
 8011160:	785b      	ldrb	r3, [r3, #1]
 8011162:	041b      	lsls	r3, r3, #16
 8011164:	431a      	orrs	r2, r3
 8011166:	4b5d      	ldr	r3, [pc, #372]	; (80112dc <MX_LWIP_Init+0x264>)
 8011168:	789b      	ldrb	r3, [r3, #2]
 801116a:	021b      	lsls	r3, r3, #8
 801116c:	4313      	orrs	r3, r2
 801116e:	4a5b      	ldr	r2, [pc, #364]	; (80112dc <MX_LWIP_Init+0x264>)
 8011170:	78d2      	ldrb	r2, [r2, #3]
 8011172:	4313      	orrs	r3, r2
 8011174:	061a      	lsls	r2, r3, #24
 8011176:	4b59      	ldr	r3, [pc, #356]	; (80112dc <MX_LWIP_Init+0x264>)
 8011178:	781b      	ldrb	r3, [r3, #0]
 801117a:	0619      	lsls	r1, r3, #24
 801117c:	4b57      	ldr	r3, [pc, #348]	; (80112dc <MX_LWIP_Init+0x264>)
 801117e:	785b      	ldrb	r3, [r3, #1]
 8011180:	041b      	lsls	r3, r3, #16
 8011182:	4319      	orrs	r1, r3
 8011184:	4b55      	ldr	r3, [pc, #340]	; (80112dc <MX_LWIP_Init+0x264>)
 8011186:	789b      	ldrb	r3, [r3, #2]
 8011188:	021b      	lsls	r3, r3, #8
 801118a:	430b      	orrs	r3, r1
 801118c:	4953      	ldr	r1, [pc, #332]	; (80112dc <MX_LWIP_Init+0x264>)
 801118e:	78c9      	ldrb	r1, [r1, #3]
 8011190:	430b      	orrs	r3, r1
 8011192:	021b      	lsls	r3, r3, #8
 8011194:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011198:	431a      	orrs	r2, r3
 801119a:	4b50      	ldr	r3, [pc, #320]	; (80112dc <MX_LWIP_Init+0x264>)
 801119c:	781b      	ldrb	r3, [r3, #0]
 801119e:	0619      	lsls	r1, r3, #24
 80111a0:	4b4e      	ldr	r3, [pc, #312]	; (80112dc <MX_LWIP_Init+0x264>)
 80111a2:	785b      	ldrb	r3, [r3, #1]
 80111a4:	041b      	lsls	r3, r3, #16
 80111a6:	4319      	orrs	r1, r3
 80111a8:	4b4c      	ldr	r3, [pc, #304]	; (80112dc <MX_LWIP_Init+0x264>)
 80111aa:	789b      	ldrb	r3, [r3, #2]
 80111ac:	021b      	lsls	r3, r3, #8
 80111ae:	430b      	orrs	r3, r1
 80111b0:	494a      	ldr	r1, [pc, #296]	; (80112dc <MX_LWIP_Init+0x264>)
 80111b2:	78c9      	ldrb	r1, [r1, #3]
 80111b4:	430b      	orrs	r3, r1
 80111b6:	0a1b      	lsrs	r3, r3, #8
 80111b8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 80111bc:	431a      	orrs	r2, r3
 80111be:	4b47      	ldr	r3, [pc, #284]	; (80112dc <MX_LWIP_Init+0x264>)
 80111c0:	781b      	ldrb	r3, [r3, #0]
 80111c2:	0619      	lsls	r1, r3, #24
 80111c4:	4b45      	ldr	r3, [pc, #276]	; (80112dc <MX_LWIP_Init+0x264>)
 80111c6:	785b      	ldrb	r3, [r3, #1]
 80111c8:	041b      	lsls	r3, r3, #16
 80111ca:	4319      	orrs	r1, r3
 80111cc:	4b43      	ldr	r3, [pc, #268]	; (80112dc <MX_LWIP_Init+0x264>)
 80111ce:	789b      	ldrb	r3, [r3, #2]
 80111d0:	021b      	lsls	r3, r3, #8
 80111d2:	430b      	orrs	r3, r1
 80111d4:	4941      	ldr	r1, [pc, #260]	; (80112dc <MX_LWIP_Init+0x264>)
 80111d6:	78c9      	ldrb	r1, [r1, #3]
 80111d8:	430b      	orrs	r3, r1
 80111da:	0e1b      	lsrs	r3, r3, #24
 80111dc:	4313      	orrs	r3, r2
 80111de:	4a42      	ldr	r2, [pc, #264]	; (80112e8 <MX_LWIP_Init+0x270>)
 80111e0:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 80111e2:	4b3f      	ldr	r3, [pc, #252]	; (80112e0 <MX_LWIP_Init+0x268>)
 80111e4:	781b      	ldrb	r3, [r3, #0]
 80111e6:	061a      	lsls	r2, r3, #24
 80111e8:	4b3d      	ldr	r3, [pc, #244]	; (80112e0 <MX_LWIP_Init+0x268>)
 80111ea:	785b      	ldrb	r3, [r3, #1]
 80111ec:	041b      	lsls	r3, r3, #16
 80111ee:	431a      	orrs	r2, r3
 80111f0:	4b3b      	ldr	r3, [pc, #236]	; (80112e0 <MX_LWIP_Init+0x268>)
 80111f2:	789b      	ldrb	r3, [r3, #2]
 80111f4:	021b      	lsls	r3, r3, #8
 80111f6:	4313      	orrs	r3, r2
 80111f8:	4a39      	ldr	r2, [pc, #228]	; (80112e0 <MX_LWIP_Init+0x268>)
 80111fa:	78d2      	ldrb	r2, [r2, #3]
 80111fc:	4313      	orrs	r3, r2
 80111fe:	061a      	lsls	r2, r3, #24
 8011200:	4b37      	ldr	r3, [pc, #220]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011202:	781b      	ldrb	r3, [r3, #0]
 8011204:	0619      	lsls	r1, r3, #24
 8011206:	4b36      	ldr	r3, [pc, #216]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011208:	785b      	ldrb	r3, [r3, #1]
 801120a:	041b      	lsls	r3, r3, #16
 801120c:	4319      	orrs	r1, r3
 801120e:	4b34      	ldr	r3, [pc, #208]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011210:	789b      	ldrb	r3, [r3, #2]
 8011212:	021b      	lsls	r3, r3, #8
 8011214:	430b      	orrs	r3, r1
 8011216:	4932      	ldr	r1, [pc, #200]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011218:	78c9      	ldrb	r1, [r1, #3]
 801121a:	430b      	orrs	r3, r1
 801121c:	021b      	lsls	r3, r3, #8
 801121e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011222:	431a      	orrs	r2, r3
 8011224:	4b2e      	ldr	r3, [pc, #184]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011226:	781b      	ldrb	r3, [r3, #0]
 8011228:	0619      	lsls	r1, r3, #24
 801122a:	4b2d      	ldr	r3, [pc, #180]	; (80112e0 <MX_LWIP_Init+0x268>)
 801122c:	785b      	ldrb	r3, [r3, #1]
 801122e:	041b      	lsls	r3, r3, #16
 8011230:	4319      	orrs	r1, r3
 8011232:	4b2b      	ldr	r3, [pc, #172]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011234:	789b      	ldrb	r3, [r3, #2]
 8011236:	021b      	lsls	r3, r3, #8
 8011238:	430b      	orrs	r3, r1
 801123a:	4929      	ldr	r1, [pc, #164]	; (80112e0 <MX_LWIP_Init+0x268>)
 801123c:	78c9      	ldrb	r1, [r1, #3]
 801123e:	430b      	orrs	r3, r1
 8011240:	0a1b      	lsrs	r3, r3, #8
 8011242:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011246:	431a      	orrs	r2, r3
 8011248:	4b25      	ldr	r3, [pc, #148]	; (80112e0 <MX_LWIP_Init+0x268>)
 801124a:	781b      	ldrb	r3, [r3, #0]
 801124c:	0619      	lsls	r1, r3, #24
 801124e:	4b24      	ldr	r3, [pc, #144]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011250:	785b      	ldrb	r3, [r3, #1]
 8011252:	041b      	lsls	r3, r3, #16
 8011254:	4319      	orrs	r1, r3
 8011256:	4b22      	ldr	r3, [pc, #136]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011258:	789b      	ldrb	r3, [r3, #2]
 801125a:	021b      	lsls	r3, r3, #8
 801125c:	430b      	orrs	r3, r1
 801125e:	4920      	ldr	r1, [pc, #128]	; (80112e0 <MX_LWIP_Init+0x268>)
 8011260:	78c9      	ldrb	r1, [r1, #3]
 8011262:	430b      	orrs	r3, r1
 8011264:	0e1b      	lsrs	r3, r3, #24
 8011266:	4313      	orrs	r3, r2
 8011268:	4a20      	ldr	r2, [pc, #128]	; (80112ec <MX_LWIP_Init+0x274>)
 801126a:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 801126c:	4b20      	ldr	r3, [pc, #128]	; (80112f0 <MX_LWIP_Init+0x278>)
 801126e:	9302      	str	r3, [sp, #8]
 8011270:	4b20      	ldr	r3, [pc, #128]	; (80112f4 <MX_LWIP_Init+0x27c>)
 8011272:	9301      	str	r3, [sp, #4]
 8011274:	2300      	movs	r3, #0
 8011276:	9300      	str	r3, [sp, #0]
 8011278:	4b1c      	ldr	r3, [pc, #112]	; (80112ec <MX_LWIP_Init+0x274>)
 801127a:	4a1b      	ldr	r2, [pc, #108]	; (80112e8 <MX_LWIP_Init+0x270>)
 801127c:	4919      	ldr	r1, [pc, #100]	; (80112e4 <MX_LWIP_Init+0x26c>)
 801127e:	481e      	ldr	r0, [pc, #120]	; (80112f8 <MX_LWIP_Init+0x280>)
 8011280:	f006 ff5c 	bl	801813c <netif_add>

  /* Registers the default network intcerface */
  netif_set_default(&gnetif);
 8011284:	481c      	ldr	r0, [pc, #112]	; (80112f8 <MX_LWIP_Init+0x280>)
 8011286:	f007 f90b 	bl	80184a0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 801128a:	4b1b      	ldr	r3, [pc, #108]	; (80112f8 <MX_LWIP_Init+0x280>)
 801128c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011290:	089b      	lsrs	r3, r3, #2
 8011292:	f003 0301 	and.w	r3, r3, #1
 8011296:	b2db      	uxtb	r3, r3
 8011298:	2b00      	cmp	r3, #0
 801129a:	d003      	beq.n	80112a4 <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 801129c:	4816      	ldr	r0, [pc, #88]	; (80112f8 <MX_LWIP_Init+0x280>)
 801129e:	f007 f90f 	bl	80184c0 <netif_set_up>
 80112a2:	e002      	b.n	80112aa <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 80112a4:	4814      	ldr	r0, [pc, #80]	; (80112f8 <MX_LWIP_Init+0x280>)
 80112a6:	f007 f977 	bl	8018598 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 80112aa:	4914      	ldr	r1, [pc, #80]	; (80112fc <MX_LWIP_Init+0x284>)
 80112ac:	4812      	ldr	r0, [pc, #72]	; (80112f8 <MX_LWIP_Init+0x280>)
 80112ae:	f007 fa09 	bl	80186c4 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 80112b2:	4b13      	ldr	r3, [pc, #76]	; (8011300 <MX_LWIP_Init+0x288>)
 80112b4:	1d3c      	adds	r4, r7, #4
 80112b6:	461d      	mov	r5, r3
 80112b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80112ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80112bc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80112c0:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 80112c4:	1d3b      	adds	r3, r7, #4
 80112c6:	490c      	ldr	r1, [pc, #48]	; (80112f8 <MX_LWIP_Init+0x280>)
 80112c8:	4618      	mov	r0, r3
 80112ca:	f000 fd45 	bl	8011d58 <osThreadCreate>

/* USER CODE BEGIN 3 */
/*Create the Ethernet link Handler Thread*/

/* USER CODE END 3 */
}
 80112ce:	bf00      	nop
 80112d0:	3720      	adds	r7, #32
 80112d2:	46bd      	mov	sp, r7
 80112d4:	bdb0      	pop	{r4, r5, r7, pc}
 80112d6:	bf00      	nop
 80112d8:	20001a7c 	.word	0x20001a7c
 80112dc:	20001a80 	.word	0x20001a80
 80112e0:	20001a84 	.word	0x20001a84
 80112e4:	20001a70 	.word	0x20001a70
 80112e8:	20001a74 	.word	0x20001a74
 80112ec:	20001a78 	.word	0x20001a78
 80112f0:	080174b9 	.word	0x080174b9
 80112f4:	080117fd 	.word	0x080117fd
 80112f8:	20001a3c 	.word	0x20001a3c
 80112fc:	08011305 	.word	0x08011305
 8011300:	08025794 	.word	0x08025794

08011304 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8011304:	b480      	push	{r7}
 8011306:	b083      	sub	sp, #12
 8011308:	af00      	add	r7, sp, #0
 801130a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 801130c:	bf00      	nop
 801130e:	370c      	adds	r7, #12
 8011310:	46bd      	mov	sp, r7
 8011312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011316:	4770      	bx	lr

08011318 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 8011318:	b480      	push	{r7}
 801131a:	b087      	sub	sp, #28
 801131c:	af00      	add	r7, sp, #0
 801131e:	6078      	str	r0, [r7, #4]
 8011320:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8011322:	683b      	ldr	r3, [r7, #0]
 8011324:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 8011326:	687b      	ldr	r3, [r7, #4]
 8011328:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 801132a:	2320      	movs	r3, #32
 801132c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 801132e:	f3bf 8f4f 	dsb	sy
}
 8011332:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8011334:	e00b      	b.n	801134e <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 8011336:	4a0d      	ldr	r2, [pc, #52]	; (801136c <SCB_InvalidateDCache_by_Addr+0x54>)
 8011338:	693b      	ldr	r3, [r7, #16]
 801133a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 801133e:	68fb      	ldr	r3, [r7, #12]
 8011340:	693a      	ldr	r2, [r7, #16]
 8011342:	4413      	add	r3, r2
 8011344:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 8011346:	697a      	ldr	r2, [r7, #20]
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	1ad3      	subs	r3, r2, r3
 801134c:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 801134e:	697b      	ldr	r3, [r7, #20]
 8011350:	2b00      	cmp	r3, #0
 8011352:	dcf0      	bgt.n	8011336 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8011354:	f3bf 8f4f 	dsb	sy
}
 8011358:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801135a:	f3bf 8f6f 	isb	sy
}
 801135e:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8011360:	bf00      	nop
 8011362:	371c      	adds	r7, #28
 8011364:	46bd      	mov	sp, r7
 8011366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801136a:	4770      	bx	lr
 801136c:	e000ed00 	.word	0xe000ed00

08011370 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011370:	b580      	push	{r7, lr}
 8011372:	b082      	sub	sp, #8
 8011374:	af00      	add	r7, sp, #0
 8011376:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8011378:	4b04      	ldr	r3, [pc, #16]	; (801138c <HAL_ETH_RxCpltCallback+0x1c>)
 801137a:	681b      	ldr	r3, [r3, #0]
 801137c:	4618      	mov	r0, r3
 801137e:	f000 fe67 	bl	8012050 <osSemaphoreRelease>
}
 8011382:	bf00      	nop
 8011384:	3708      	adds	r7, #8
 8011386:	46bd      	mov	sp, r7
 8011388:	bd80      	pop	{r7, pc}
 801138a:	bf00      	nop
 801138c:	20006414 	.word	0x20006414

08011390 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8011390:	b580      	push	{r7, lr}
 8011392:	b082      	sub	sp, #8
 8011394:	af00      	add	r7, sp, #0
 8011396:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8011398:	4b04      	ldr	r3, [pc, #16]	; (80113ac <HAL_ETH_TxCpltCallback+0x1c>)
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	4618      	mov	r0, r3
 801139e:	f000 fe57 	bl	8012050 <osSemaphoreRelease>
}
 80113a2:	bf00      	nop
 80113a4:	3708      	adds	r7, #8
 80113a6:	46bd      	mov	sp, r7
 80113a8:	bd80      	pop	{r7, pc}
 80113aa:	bf00      	nop
 80113ac:	20006418 	.word	0x20006418

080113b0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80113b0:	b580      	push	{r7, lr}
 80113b2:	b082      	sub	sp, #8
 80113b4:	af00      	add	r7, sp, #0
 80113b6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80113b8:	6878      	ldr	r0, [r7, #4]
 80113ba:	f7fb fdf5 	bl	800cfa8 <HAL_ETH_GetDMAError>
 80113be:	4603      	mov	r3, r0
 80113c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80113c4:	2b80      	cmp	r3, #128	; 0x80
 80113c6:	d104      	bne.n	80113d2 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80113c8:	4b04      	ldr	r3, [pc, #16]	; (80113dc <HAL_ETH_ErrorCallback+0x2c>)
 80113ca:	681b      	ldr	r3, [r3, #0]
 80113cc:	4618      	mov	r0, r3
 80113ce:	f000 fe3f 	bl	8012050 <osSemaphoreRelease>
  }
}
 80113d2:	bf00      	nop
 80113d4:	3708      	adds	r7, #8
 80113d6:	46bd      	mov	sp, r7
 80113d8:	bd80      	pop	{r7, pc}
 80113da:	bf00      	nop
 80113dc:	20006414 	.word	0x20006414

080113e0 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80113e0:	b5b0      	push	{r4, r5, r7, lr}
 80113e2:	b0a8      	sub	sp, #160	; 0xa0
 80113e4:	af00      	add	r7, sp, #0
 80113e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80113e8:	2300      	movs	r3, #0
 80113ea:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 80113f4:	2300      	movs	r3, #0
 80113f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 80113fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80113fe:	2264      	movs	r2, #100	; 0x64
 8011400:	2100      	movs	r1, #0
 8011402:	4618      	mov	r0, r3
 8011404:	f012 fe5c 	bl	80240c0 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8011408:	4b85      	ldr	r3, [pc, #532]	; (8011620 <low_level_init+0x240>)
 801140a:	4a86      	ldr	r2, [pc, #536]	; (8011624 <low_level_init+0x244>)
 801140c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 801140e:	2300      	movs	r3, #0
 8011410:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8011414:	2380      	movs	r3, #128	; 0x80
 8011416:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 801141a:	23e1      	movs	r3, #225	; 0xe1
 801141c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8011420:	2300      	movs	r3, #0
 8011422:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 8011426:	2300      	movs	r3, #0
 8011428:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 801142c:	2300      	movs	r3, #0
 801142e:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8011432:	4a7b      	ldr	r2, [pc, #492]	; (8011620 <low_level_init+0x240>)
 8011434:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8011438:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 801143a:	4b79      	ldr	r3, [pc, #484]	; (8011620 <low_level_init+0x240>)
 801143c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8011440:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8011442:	4b77      	ldr	r3, [pc, #476]	; (8011620 <low_level_init+0x240>)
 8011444:	4a78      	ldr	r2, [pc, #480]	; (8011628 <low_level_init+0x248>)
 8011446:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8011448:	4b75      	ldr	r3, [pc, #468]	; (8011620 <low_level_init+0x240>)
 801144a:	4a78      	ldr	r2, [pc, #480]	; (801162c <low_level_init+0x24c>)
 801144c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 801144e:	4b74      	ldr	r3, [pc, #464]	; (8011620 <low_level_init+0x240>)
 8011450:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8011454:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8011456:	4872      	ldr	r0, [pc, #456]	; (8011620 <low_level_init+0x240>)
 8011458:	f7fa ff88 	bl	800c36c <HAL_ETH_Init>
 801145c:	4603      	mov	r3, r0
 801145e:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8011462:	2238      	movs	r2, #56	; 0x38
 8011464:	2100      	movs	r1, #0
 8011466:	4872      	ldr	r0, [pc, #456]	; (8011630 <low_level_init+0x250>)
 8011468:	f012 fe2a 	bl	80240c0 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 801146c:	4b70      	ldr	r3, [pc, #448]	; (8011630 <low_level_init+0x250>)
 801146e:	2221      	movs	r2, #33	; 0x21
 8011470:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8011472:	4b6f      	ldr	r3, [pc, #444]	; (8011630 <low_level_init+0x250>)
 8011474:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8011478:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 801147a:	4b6d      	ldr	r3, [pc, #436]	; (8011630 <low_level_init+0x250>)
 801147c:	2200      	movs	r2, #0
 801147e:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8011480:	486c      	ldr	r0, [pc, #432]	; (8011634 <low_level_init+0x254>)
 8011482:	f006 fd15 	bl	8017eb0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	2206      	movs	r2, #6
 801148a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 801148e:	4b64      	ldr	r3, [pc, #400]	; (8011620 <low_level_init+0x240>)
 8011490:	685b      	ldr	r3, [r3, #4]
 8011492:	781a      	ldrb	r2, [r3, #0]
 8011494:	687b      	ldr	r3, [r7, #4]
 8011496:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 801149a:	4b61      	ldr	r3, [pc, #388]	; (8011620 <low_level_init+0x240>)
 801149c:	685b      	ldr	r3, [r3, #4]
 801149e:	785a      	ldrb	r2, [r3, #1]
 80114a0:	687b      	ldr	r3, [r7, #4]
 80114a2:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80114a6:	4b5e      	ldr	r3, [pc, #376]	; (8011620 <low_level_init+0x240>)
 80114a8:	685b      	ldr	r3, [r3, #4]
 80114aa:	789a      	ldrb	r2, [r3, #2]
 80114ac:	687b      	ldr	r3, [r7, #4]
 80114ae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80114b2:	4b5b      	ldr	r3, [pc, #364]	; (8011620 <low_level_init+0x240>)
 80114b4:	685b      	ldr	r3, [r3, #4]
 80114b6:	78da      	ldrb	r2, [r3, #3]
 80114b8:	687b      	ldr	r3, [r7, #4]
 80114ba:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80114be:	4b58      	ldr	r3, [pc, #352]	; (8011620 <low_level_init+0x240>)
 80114c0:	685b      	ldr	r3, [r3, #4]
 80114c2:	791a      	ldrb	r2, [r3, #4]
 80114c4:	687b      	ldr	r3, [r7, #4]
 80114c6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80114ca:	4b55      	ldr	r3, [pc, #340]	; (8011620 <low_level_init+0x240>)
 80114cc:	685b      	ldr	r3, [r3, #4]
 80114ce:	795a      	ldrb	r2, [r3, #5]
 80114d0:	687b      	ldr	r3, [r7, #4]
 80114d2:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80114d6:	687b      	ldr	r3, [r7, #4]
 80114d8:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80114dc:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80114de:	687b      	ldr	r3, [r7, #4]
 80114e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80114e4:	f043 030a 	orr.w	r3, r3, #10
 80114e8:	b2da      	uxtb	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 80114f0:	2203      	movs	r2, #3
 80114f2:	2100      	movs	r1, #0
 80114f4:	2001      	movs	r0, #1
 80114f6:	f001 f89b 	bl	8012630 <xQueueGenericCreate>
 80114fa:	4603      	mov	r3, r0
 80114fc:	4a4e      	ldr	r2, [pc, #312]	; (8011638 <low_level_init+0x258>)
 80114fe:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8011500:	2203      	movs	r2, #3
 8011502:	2100      	movs	r1, #0
 8011504:	2001      	movs	r0, #1
 8011506:	f001 f893 	bl	8012630 <xQueueGenericCreate>
 801150a:	4603      	mov	r3, r0
 801150c:	4a4b      	ldr	r2, [pc, #300]	; (801163c <low_level_init+0x25c>)
 801150e:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8011510:	4b4b      	ldr	r3, [pc, #300]	; (8011640 <low_level_init+0x260>)
 8011512:	f107 0408 	add.w	r4, r7, #8
 8011516:	461d      	mov	r5, r3
 8011518:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801151a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801151c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8011520:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8011524:	f107 0308 	add.w	r3, r7, #8
 8011528:	6879      	ldr	r1, [r7, #4]
 801152a:	4618      	mov	r0, r3
 801152c:	f000 fc14 	bl	8011d58 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8011530:	4944      	ldr	r1, [pc, #272]	; (8011644 <low_level_init+0x264>)
 8011532:	4845      	ldr	r0, [pc, #276]	; (8011648 <low_level_init+0x268>)
 8011534:	f7f9 fced 	bl	800af12 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 8011538:	4843      	ldr	r0, [pc, #268]	; (8011648 <low_level_init+0x268>)
 801153a:	f7f9 fd1c 	bl	800af76 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 801153e:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8011542:	2b00      	cmp	r3, #0
 8011544:	d165      	bne.n	8011612 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011546:	4840      	ldr	r0, [pc, #256]	; (8011648 <low_level_init+0x268>)
 8011548:	f7f9 fdbd 	bl	800b0c6 <LAN8742_GetLinkState>
 801154c:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8011550:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011554:	2b01      	cmp	r3, #1
 8011556:	dc06      	bgt.n	8011566 <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 8011558:	6878      	ldr	r0, [r7, #4]
 801155a:	f007 f883 	bl	8018664 <netif_set_link_down>
      netif_set_down(netif);
 801155e:	6878      	ldr	r0, [r7, #4]
 8011560:	f007 f81a 	bl	8018598 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8011564:	e057      	b.n	8011616 <low_level_init+0x236>
      switch (PHYLinkState)
 8011566:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801156a:	3b02      	subs	r3, #2
 801156c:	2b03      	cmp	r3, #3
 801156e:	d82b      	bhi.n	80115c8 <low_level_init+0x1e8>
 8011570:	a201      	add	r2, pc, #4	; (adr r2, 8011578 <low_level_init+0x198>)
 8011572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011576:	bf00      	nop
 8011578:	08011589 	.word	0x08011589
 801157c:	0801159b 	.word	0x0801159b
 8011580:	080115ab 	.word	0x080115ab
 8011584:	080115bb 	.word	0x080115bb
        duplex = ETH_FULLDUPLEX_MODE;
 8011588:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801158c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 8011590:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011594:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 8011598:	e01f      	b.n	80115da <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 801159a:	2300      	movs	r3, #0
 801159c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80115a0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80115a4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80115a8:	e017      	b.n	80115da <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80115aa:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80115b2:	2300      	movs	r3, #0
 80115b4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80115b8:	e00f      	b.n	80115da <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80115ba:	2300      	movs	r3, #0
 80115bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80115c0:	2300      	movs	r3, #0
 80115c2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80115c6:	e008      	b.n	80115da <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80115c8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80115cc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80115d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80115d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80115d8:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80115da:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115de:	4619      	mov	r1, r3
 80115e0:	480f      	ldr	r0, [pc, #60]	; (8011620 <low_level_init+0x240>)
 80115e2:	f7fb fb87 	bl	800ccf4 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80115e6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80115ea:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 80115ec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80115f0:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 80115f2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80115f6:	4619      	mov	r1, r3
 80115f8:	4809      	ldr	r0, [pc, #36]	; (8011620 <low_level_init+0x240>)
 80115fa:	f7fb fc65 	bl	800cec8 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 80115fe:	4808      	ldr	r0, [pc, #32]	; (8011620 <low_level_init+0x240>)
 8011600:	f7fa ff90 	bl	800c524 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8011604:	6878      	ldr	r0, [r7, #4]
 8011606:	f006 ff5b 	bl	80184c0 <netif_set_up>
    netif_set_link_up(netif);
 801160a:	6878      	ldr	r0, [r7, #4]
 801160c:	f006 fff6 	bl	80185fc <netif_set_link_up>
}
 8011610:	e001      	b.n	8011616 <low_level_init+0x236>
    Error_Handler();
 8011612:	f7f0 fc45 	bl	8001ea0 <Error_Handler>
}
 8011616:	bf00      	nop
 8011618:	37a0      	adds	r7, #160	; 0xa0
 801161a:	46bd      	mov	sp, r7
 801161c:	bdb0      	pop	{r4, r5, r7, pc}
 801161e:	bf00      	nop
 8011620:	2000641c 	.word	0x2000641c
 8011624:	40028000 	.word	0x40028000
 8011628:	20000140 	.word	0x20000140
 801162c:	200000a0 	.word	0x200000a0
 8011630:	200064cc 	.word	0x200064cc
 8011634:	08028d68 	.word	0x08028d68
 8011638:	20006414 	.word	0x20006414
 801163c:	20006418 	.word	0x20006418
 8011640:	080257b8 	.word	0x080257b8
 8011644:	20000010 	.word	0x20000010
 8011648:	20006504 	.word	0x20006504

0801164c <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 801164c:	b580      	push	{r7, lr}
 801164e:	b092      	sub	sp, #72	; 0x48
 8011650:	af00      	add	r7, sp, #0
 8011652:	6078      	str	r0, [r7, #4]
 8011654:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 8011656:	2300      	movs	r3, #0
 8011658:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 801165a:	2300      	movs	r3, #0
 801165c:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 801165e:	2300      	movs	r3, #0
 8011660:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8011664:	f107 030c 	add.w	r3, r7, #12
 8011668:	2230      	movs	r2, #48	; 0x30
 801166a:	2100      	movs	r1, #0
 801166c:	4618      	mov	r0, r3
 801166e:	f012 fd27 	bl	80240c0 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8011672:	f107 030c 	add.w	r3, r7, #12
 8011676:	2230      	movs	r2, #48	; 0x30
 8011678:	2100      	movs	r1, #0
 801167a:	4618      	mov	r0, r3
 801167c:	f012 fd20 	bl	80240c0 <memset>

  for(q = p; q != NULL; q = q->next)
 8011680:	683b      	ldr	r3, [r7, #0]
 8011682:	643b      	str	r3, [r7, #64]	; 0x40
 8011684:	e045      	b.n	8011712 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 8011686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011688:	2b03      	cmp	r3, #3
 801168a:	d902      	bls.n	8011692 <low_level_output+0x46>
      return ERR_IF;
 801168c:	f06f 030b 	mvn.w	r3, #11
 8011690:	e065      	b.n	801175e <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 8011692:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011694:	6859      	ldr	r1, [r3, #4]
 8011696:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011698:	4613      	mov	r3, r2
 801169a:	005b      	lsls	r3, r3, #1
 801169c:	4413      	add	r3, r2
 801169e:	009b      	lsls	r3, r3, #2
 80116a0:	3348      	adds	r3, #72	; 0x48
 80116a2:	443b      	add	r3, r7
 80116a4:	3b3c      	subs	r3, #60	; 0x3c
 80116a6:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80116a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116aa:	895b      	ldrh	r3, [r3, #10]
 80116ac:	4619      	mov	r1, r3
 80116ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116b0:	4613      	mov	r3, r2
 80116b2:	005b      	lsls	r3, r3, #1
 80116b4:	4413      	add	r3, r2
 80116b6:	009b      	lsls	r3, r3, #2
 80116b8:	3348      	adds	r3, #72	; 0x48
 80116ba:	443b      	add	r3, r7
 80116bc:	3b38      	subs	r3, #56	; 0x38
 80116be:	6019      	str	r1, [r3, #0]

    if(i>0)
 80116c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c2:	2b00      	cmp	r3, #0
 80116c4:	d011      	beq.n	80116ea <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80116c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80116c8:	1e5a      	subs	r2, r3, #1
 80116ca:	f107 000c 	add.w	r0, r7, #12
 80116ce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80116d0:	460b      	mov	r3, r1
 80116d2:	005b      	lsls	r3, r3, #1
 80116d4:	440b      	add	r3, r1
 80116d6:	009b      	lsls	r3, r3, #2
 80116d8:	18c1      	adds	r1, r0, r3
 80116da:	4613      	mov	r3, r2
 80116dc:	005b      	lsls	r3, r3, #1
 80116de:	4413      	add	r3, r2
 80116e0:	009b      	lsls	r3, r3, #2
 80116e2:	3348      	adds	r3, #72	; 0x48
 80116e4:	443b      	add	r3, r7
 80116e6:	3b34      	subs	r3, #52	; 0x34
 80116e8:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80116ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80116ec:	681b      	ldr	r3, [r3, #0]
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	d109      	bne.n	8011706 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 80116f2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80116f4:	4613      	mov	r3, r2
 80116f6:	005b      	lsls	r3, r3, #1
 80116f8:	4413      	add	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	3348      	adds	r3, #72	; 0x48
 80116fe:	443b      	add	r3, r7
 8011700:	3b34      	subs	r3, #52	; 0x34
 8011702:	2200      	movs	r2, #0
 8011704:	601a      	str	r2, [r3, #0]
    }

    i++;
 8011706:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011708:	3301      	adds	r3, #1
 801170a:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 801170c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	643b      	str	r3, [r7, #64]	; 0x40
 8011712:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011714:	2b00      	cmp	r3, #0
 8011716:	d1b6      	bne.n	8011686 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 8011718:	683b      	ldr	r3, [r7, #0]
 801171a:	891b      	ldrh	r3, [r3, #8]
 801171c:	461a      	mov	r2, r3
 801171e:	4b12      	ldr	r3, [pc, #72]	; (8011768 <low_level_output+0x11c>)
 8011720:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8011722:	4a11      	ldr	r2, [pc, #68]	; (8011768 <low_level_output+0x11c>)
 8011724:	f107 030c 	add.w	r3, r7, #12
 8011728:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 801172a:	4a0f      	ldr	r2, [pc, #60]	; (8011768 <low_level_output+0x11c>)
 801172c:	683b      	ldr	r3, [r7, #0]
 801172e:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8011730:	6838      	ldr	r0, [r7, #0]
 8011732:	f007 fc1b 	bl	8018f6c <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 8011736:	490c      	ldr	r1, [pc, #48]	; (8011768 <low_level_output+0x11c>)
 8011738:	480c      	ldr	r0, [pc, #48]	; (801176c <low_level_output+0x120>)
 801173a:	f7fa ff81 	bl	800c640 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 801173e:	bf00      	nop
 8011740:	4b0b      	ldr	r3, [pc, #44]	; (8011770 <low_level_output+0x124>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8011748:	4618      	mov	r0, r3
 801174a:	f000 fc33 	bl	8011fb4 <osSemaphoreWait>
 801174e:	4603      	mov	r3, r0
 8011750:	2b00      	cmp	r3, #0
 8011752:	d1f5      	bne.n	8011740 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8011754:	4805      	ldr	r0, [pc, #20]	; (801176c <low_level_output+0x120>)
 8011756:	f7fb f907 	bl	800c968 <HAL_ETH_ReleaseTxPacket>

  return errval;
 801175a:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 801175e:	4618      	mov	r0, r3
 8011760:	3748      	adds	r7, #72	; 0x48
 8011762:	46bd      	mov	sp, r7
 8011764:	bd80      	pop	{r7, pc}
 8011766:	bf00      	nop
 8011768:	200064cc 	.word	0x200064cc
 801176c:	2000641c 	.word	0x2000641c
 8011770:	20006418 	.word	0x20006418

08011774 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8011774:	b580      	push	{r7, lr}
 8011776:	b084      	sub	sp, #16
 8011778:	af00      	add	r7, sp, #0
 801177a:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 801177c:	2300      	movs	r3, #0
 801177e:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8011780:	4b07      	ldr	r3, [pc, #28]	; (80117a0 <low_level_input+0x2c>)
 8011782:	781b      	ldrb	r3, [r3, #0]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d105      	bne.n	8011794 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 8011788:	f107 030c 	add.w	r3, r7, #12
 801178c:	4619      	mov	r1, r3
 801178e:	4805      	ldr	r0, [pc, #20]	; (80117a4 <low_level_input+0x30>)
 8011790:	f7fa ffb2 	bl	800c6f8 <HAL_ETH_ReadData>
  }

  return p;
 8011794:	68fb      	ldr	r3, [r7, #12]
}
 8011796:	4618      	mov	r0, r3
 8011798:	3710      	adds	r7, #16
 801179a:	46bd      	mov	sp, r7
 801179c:	bd80      	pop	{r7, pc}
 801179e:	bf00      	nop
 80117a0:	20006410 	.word	0x20006410
 80117a4:	2000641c 	.word	0x2000641c

080117a8 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80117a8:	b580      	push	{r7, lr}
 80117aa:	b084      	sub	sp, #16
 80117ac:	af00      	add	r7, sp, #0
 80117ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80117b0:	2300      	movs	r3, #0
 80117b2:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80117b4:	687b      	ldr	r3, [r7, #4]
 80117b6:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80117b8:	4b0f      	ldr	r3, [pc, #60]	; (80117f8 <ethernetif_input+0x50>)
 80117ba:	681b      	ldr	r3, [r3, #0]
 80117bc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80117c0:	4618      	mov	r0, r3
 80117c2:	f000 fbf7 	bl	8011fb4 <osSemaphoreWait>
 80117c6:	4603      	mov	r3, r0
 80117c8:	2b00      	cmp	r3, #0
 80117ca:	d1f5      	bne.n	80117b8 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80117cc:	68b8      	ldr	r0, [r7, #8]
 80117ce:	f7ff ffd1 	bl	8011774 <low_level_input>
 80117d2:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80117d4:	68fb      	ldr	r3, [r7, #12]
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d00a      	beq.n	80117f0 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80117da:	68bb      	ldr	r3, [r7, #8]
 80117dc:	691b      	ldr	r3, [r3, #16]
 80117de:	68b9      	ldr	r1, [r7, #8]
 80117e0:	68f8      	ldr	r0, [r7, #12]
 80117e2:	4798      	blx	r3
 80117e4:	4603      	mov	r3, r0
 80117e6:	2b00      	cmp	r3, #0
 80117e8:	d002      	beq.n	80117f0 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80117ea:	68f8      	ldr	r0, [r7, #12]
 80117ec:	f007 fb18 	bl	8018e20 <pbuf_free>
          }
        }
      } while(p!=NULL);
 80117f0:	68fb      	ldr	r3, [r7, #12]
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d1ea      	bne.n	80117cc <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80117f6:	e7df      	b.n	80117b8 <ethernetif_input+0x10>
 80117f8:	20006414 	.word	0x20006414

080117fc <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 80117fc:	b580      	push	{r7, lr}
 80117fe:	b082      	sub	sp, #8
 8011800:	af00      	add	r7, sp, #0
 8011802:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8011804:	687b      	ldr	r3, [r7, #4]
 8011806:	2b00      	cmp	r3, #0
 8011808:	d106      	bne.n	8011818 <ethernetif_init+0x1c>
 801180a:	4b0e      	ldr	r3, [pc, #56]	; (8011844 <ethernetif_init+0x48>)
 801180c:	f240 12f3 	movw	r2, #499	; 0x1f3
 8011810:	490d      	ldr	r1, [pc, #52]	; (8011848 <ethernetif_init+0x4c>)
 8011812:	480e      	ldr	r0, [pc, #56]	; (801184c <ethernetif_init+0x50>)
 8011814:	f012 fd3c 	bl	8024290 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 8011818:	687b      	ldr	r3, [r7, #4]
 801181a:	2273      	movs	r2, #115	; 0x73
 801181c:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8011820:	687b      	ldr	r3, [r7, #4]
 8011822:	2274      	movs	r2, #116	; 0x74
 8011824:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 8011828:	687b      	ldr	r3, [r7, #4]
 801182a:	4a09      	ldr	r2, [pc, #36]	; (8011850 <ethernetif_init+0x54>)
 801182c:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 801182e:	687b      	ldr	r3, [r7, #4]
 8011830:	4a08      	ldr	r2, [pc, #32]	; (8011854 <ethernetif_init+0x58>)
 8011832:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8011834:	6878      	ldr	r0, [r7, #4]
 8011836:	f7ff fdd3 	bl	80113e0 <low_level_init>

  return ERR_OK;
 801183a:	2300      	movs	r3, #0
}
 801183c:	4618      	mov	r0, r3
 801183e:	3708      	adds	r7, #8
 8011840:	46bd      	mov	sp, r7
 8011842:	bd80      	pop	{r7, pc}
 8011844:	080257d4 	.word	0x080257d4
 8011848:	080257f0 	.word	0x080257f0
 801184c:	08025800 	.word	0x08025800
 8011850:	08020ced 	.word	0x08020ced
 8011854:	0801164d 	.word	0x0801164d

08011858 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 8011858:	b580      	push	{r7, lr}
 801185a:	b084      	sub	sp, #16
 801185c:	af00      	add	r7, sp, #0
 801185e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8011860:	687b      	ldr	r3, [r7, #4]
 8011862:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8011864:	68f9      	ldr	r1, [r7, #12]
 8011866:	4809      	ldr	r0, [pc, #36]	; (801188c <pbuf_free_custom+0x34>)
 8011868:	f006 fc12 	bl	8018090 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 801186c:	4b08      	ldr	r3, [pc, #32]	; (8011890 <pbuf_free_custom+0x38>)
 801186e:	781b      	ldrb	r3, [r3, #0]
 8011870:	2b01      	cmp	r3, #1
 8011872:	d107      	bne.n	8011884 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8011874:	4b06      	ldr	r3, [pc, #24]	; (8011890 <pbuf_free_custom+0x38>)
 8011876:	2200      	movs	r2, #0
 8011878:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 801187a:	4b06      	ldr	r3, [pc, #24]	; (8011894 <pbuf_free_custom+0x3c>)
 801187c:	681b      	ldr	r3, [r3, #0]
 801187e:	4618      	mov	r0, r3
 8011880:	f000 fbe6 	bl	8012050 <osSemaphoreRelease>
  }
}
 8011884:	bf00      	nop
 8011886:	3710      	adds	r7, #16
 8011888:	46bd      	mov	sp, r7
 801188a:	bd80      	pop	{r7, pc}
 801188c:	08028d68 	.word	0x08028d68
 8011890:	20006410 	.word	0x20006410
 8011894:	20006414 	.word	0x20006414

08011898 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 8011898:	b580      	push	{r7, lr}
 801189a:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 801189c:	f7f9 fcbc 	bl	800b218 <HAL_GetTick>
 80118a0:	4603      	mov	r3, r0
}
 80118a2:	4618      	mov	r0, r3
 80118a4:	bd80      	pop	{r7, pc}
	...

080118a8 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80118a8:	b580      	push	{r7, lr}
 80118aa:	b08e      	sub	sp, #56	; 0x38
 80118ac:	af00      	add	r7, sp, #0
 80118ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80118b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80118b4:	2200      	movs	r2, #0
 80118b6:	601a      	str	r2, [r3, #0]
 80118b8:	605a      	str	r2, [r3, #4]
 80118ba:	609a      	str	r2, [r3, #8]
 80118bc:	60da      	str	r2, [r3, #12]
 80118be:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80118c0:	687b      	ldr	r3, [r7, #4]
 80118c2:	681b      	ldr	r3, [r3, #0]
 80118c4:	4a52      	ldr	r2, [pc, #328]	; (8011a10 <HAL_ETH_MspInit+0x168>)
 80118c6:	4293      	cmp	r3, r2
 80118c8:	f040 809e 	bne.w	8011a08 <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80118cc:	4b51      	ldr	r3, [pc, #324]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118d0:	4a50      	ldr	r2, [pc, #320]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118d2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80118d6:	6313      	str	r3, [r2, #48]	; 0x30
 80118d8:	4b4e      	ldr	r3, [pc, #312]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80118e0:	623b      	str	r3, [r7, #32]
 80118e2:	6a3b      	ldr	r3, [r7, #32]
 80118e4:	4b4b      	ldr	r3, [pc, #300]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118e8:	4a4a      	ldr	r2, [pc, #296]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118ea:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80118ee:	6313      	str	r3, [r2, #48]	; 0x30
 80118f0:	4b48      	ldr	r3, [pc, #288]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80118f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80118f8:	61fb      	str	r3, [r7, #28]
 80118fa:	69fb      	ldr	r3, [r7, #28]
 80118fc:	4b45      	ldr	r3, [pc, #276]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 80118fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011900:	4a44      	ldr	r2, [pc, #272]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011902:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8011906:	6313      	str	r3, [r2, #48]	; 0x30
 8011908:	4b42      	ldr	r3, [pc, #264]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801190a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801190c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8011910:	61bb      	str	r3, [r7, #24]
 8011912:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8011914:	4b3f      	ldr	r3, [pc, #252]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011916:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011918:	4a3e      	ldr	r2, [pc, #248]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801191a:	f043 0304 	orr.w	r3, r3, #4
 801191e:	6313      	str	r3, [r2, #48]	; 0x30
 8011920:	4b3c      	ldr	r3, [pc, #240]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011922:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011924:	f003 0304 	and.w	r3, r3, #4
 8011928:	617b      	str	r3, [r7, #20]
 801192a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 801192c:	4b39      	ldr	r3, [pc, #228]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801192e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011930:	4a38      	ldr	r2, [pc, #224]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011932:	f043 0301 	orr.w	r3, r3, #1
 8011936:	6313      	str	r3, [r2, #48]	; 0x30
 8011938:	4b36      	ldr	r3, [pc, #216]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801193c:	f003 0301 	and.w	r3, r3, #1
 8011940:	613b      	str	r3, [r7, #16]
 8011942:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011944:	4b33      	ldr	r3, [pc, #204]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011948:	4a32      	ldr	r2, [pc, #200]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801194a:	f043 0302 	orr.w	r3, r3, #2
 801194e:	6313      	str	r3, [r2, #48]	; 0x30
 8011950:	4b30      	ldr	r3, [pc, #192]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011952:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011954:	f003 0302 	and.w	r3, r3, #2
 8011958:	60fb      	str	r3, [r7, #12]
 801195a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 801195c:	4b2d      	ldr	r3, [pc, #180]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801195e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011960:	4a2c      	ldr	r2, [pc, #176]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 8011962:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011966:	6313      	str	r3, [r2, #48]	; 0x30
 8011968:	4b2a      	ldr	r3, [pc, #168]	; (8011a14 <HAL_ETH_MspInit+0x16c>)
 801196a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801196c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011970:	60bb      	str	r3, [r7, #8]
 8011972:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8011974:	2332      	movs	r3, #50	; 0x32
 8011976:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011978:	2302      	movs	r3, #2
 801197a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801197c:	2300      	movs	r3, #0
 801197e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8011980:	2303      	movs	r3, #3
 8011982:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8011984:	230b      	movs	r3, #11
 8011986:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8011988:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801198c:	4619      	mov	r1, r3
 801198e:	4822      	ldr	r0, [pc, #136]	; (8011a18 <HAL_ETH_MspInit+0x170>)
 8011990:	f7fb ff1a 	bl	800d7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8011994:	2386      	movs	r3, #134	; 0x86
 8011996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8011998:	2302      	movs	r3, #2
 801199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801199c:	2300      	movs	r3, #0
 801199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80119a0:	2303      	movs	r3, #3
 80119a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80119a4:	230b      	movs	r3, #11
 80119a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80119a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119ac:	4619      	mov	r1, r3
 80119ae:	481b      	ldr	r0, [pc, #108]	; (8011a1c <HAL_ETH_MspInit+0x174>)
 80119b0:	f7fb ff0a 	bl	800d7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 80119b4:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 80119b8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119ba:	2302      	movs	r3, #2
 80119bc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119be:	2300      	movs	r3, #0
 80119c0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80119c2:	2303      	movs	r3, #3
 80119c4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80119c6:	230b      	movs	r3, #11
 80119c8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80119ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119ce:	4619      	mov	r1, r3
 80119d0:	4813      	ldr	r0, [pc, #76]	; (8011a20 <HAL_ETH_MspInit+0x178>)
 80119d2:	f7fb fef9 	bl	800d7c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80119d6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80119da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80119dc:	2302      	movs	r3, #2
 80119de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80119e0:	2300      	movs	r3, #0
 80119e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80119e4:	2303      	movs	r3, #3
 80119e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80119e8:	230b      	movs	r3, #11
 80119ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80119ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80119f0:	4619      	mov	r1, r3
 80119f2:	480c      	ldr	r0, [pc, #48]	; (8011a24 <HAL_ETH_MspInit+0x17c>)
 80119f4:	f7fb fee8 	bl	800d7c8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 80119f8:	2200      	movs	r2, #0
 80119fa:	2105      	movs	r1, #5
 80119fc:	203d      	movs	r0, #61	; 0x3d
 80119fe:	f7fa fbeb 	bl	800c1d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8011a02:	203d      	movs	r0, #61	; 0x3d
 8011a04:	f7fa fc04 	bl	800c210 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8011a08:	bf00      	nop
 8011a0a:	3738      	adds	r7, #56	; 0x38
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	bd80      	pop	{r7, pc}
 8011a10:	40028000 	.word	0x40028000
 8011a14:	40023800 	.word	0x40023800
 8011a18:	40020800 	.word	0x40020800
 8011a1c:	40020000 	.word	0x40020000
 8011a20:	40020400 	.word	0x40020400
 8011a24:	40021800 	.word	0x40021800

08011a28 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8011a28:	b580      	push	{r7, lr}
 8011a2a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8011a2c:	4802      	ldr	r0, [pc, #8]	; (8011a38 <ETH_PHY_IO_Init+0x10>)
 8011a2e:	f7fb fa65 	bl	800cefc <HAL_ETH_SetMDIOClockRange>

  return 0;
 8011a32:	2300      	movs	r3, #0
}
 8011a34:	4618      	mov	r0, r3
 8011a36:	bd80      	pop	{r7, pc}
 8011a38:	2000641c 	.word	0x2000641c

08011a3c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8011a3c:	b480      	push	{r7}
 8011a3e:	af00      	add	r7, sp, #0
  return 0;
 8011a40:	2300      	movs	r3, #0
}
 8011a42:	4618      	mov	r0, r3
 8011a44:	46bd      	mov	sp, r7
 8011a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a4a:	4770      	bx	lr

08011a4c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8011a4c:	b580      	push	{r7, lr}
 8011a4e:	b084      	sub	sp, #16
 8011a50:	af00      	add	r7, sp, #0
 8011a52:	60f8      	str	r0, [r7, #12]
 8011a54:	60b9      	str	r1, [r7, #8]
 8011a56:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 8011a58:	687b      	ldr	r3, [r7, #4]
 8011a5a:	68ba      	ldr	r2, [r7, #8]
 8011a5c:	68f9      	ldr	r1, [r7, #12]
 8011a5e:	4807      	ldr	r0, [pc, #28]	; (8011a7c <ETH_PHY_IO_ReadReg+0x30>)
 8011a60:	f7fb f8b4 	bl	800cbcc <HAL_ETH_ReadPHYRegister>
 8011a64:	4603      	mov	r3, r0
 8011a66:	2b00      	cmp	r3, #0
 8011a68:	d002      	beq.n	8011a70 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 8011a6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011a6e:	e000      	b.n	8011a72 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8011a70:	2300      	movs	r3, #0
}
 8011a72:	4618      	mov	r0, r3
 8011a74:	3710      	adds	r7, #16
 8011a76:	46bd      	mov	sp, r7
 8011a78:	bd80      	pop	{r7, pc}
 8011a7a:	bf00      	nop
 8011a7c:	2000641c 	.word	0x2000641c

08011a80 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b084      	sub	sp, #16
 8011a84:	af00      	add	r7, sp, #0
 8011a86:	60f8      	str	r0, [r7, #12]
 8011a88:	60b9      	str	r1, [r7, #8]
 8011a8a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 8011a8c:	687b      	ldr	r3, [r7, #4]
 8011a8e:	68ba      	ldr	r2, [r7, #8]
 8011a90:	68f9      	ldr	r1, [r7, #12]
 8011a92:	4807      	ldr	r0, [pc, #28]	; (8011ab0 <ETH_PHY_IO_WriteReg+0x30>)
 8011a94:	f7fb f8e5 	bl	800cc62 <HAL_ETH_WritePHYRegister>
 8011a98:	4603      	mov	r3, r0
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d002      	beq.n	8011aa4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 8011a9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011aa2:	e000      	b.n	8011aa6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 8011aa4:	2300      	movs	r3, #0
}
 8011aa6:	4618      	mov	r0, r3
 8011aa8:	3710      	adds	r7, #16
 8011aaa:	46bd      	mov	sp, r7
 8011aac:	bd80      	pop	{r7, pc}
 8011aae:	bf00      	nop
 8011ab0:	2000641c 	.word	0x2000641c

08011ab4 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8011ab4:	b580      	push	{r7, lr}
 8011ab6:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8011ab8:	f7f9 fbae 	bl	800b218 <HAL_GetTick>
 8011abc:	4603      	mov	r3, r0
}
 8011abe:	4618      	mov	r0, r3
 8011ac0:	bd80      	pop	{r7, pc}
	...

08011ac4 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 8011ac4:	b580      	push	{r7, lr}
 8011ac6:	b0a0      	sub	sp, #128	; 0x80
 8011ac8:	af00      	add	r7, sp, #0
 8011aca:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 8011acc:	f107 0308 	add.w	r3, r7, #8
 8011ad0:	2264      	movs	r2, #100	; 0x64
 8011ad2:	2100      	movs	r1, #0
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	f012 faf3 	bl	80240c0 <memset>
  int32_t PHYLinkState = 0;
 8011ada:	2300      	movs	r3, #0
 8011adc:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ae2:	2300      	movs	r3, #0
 8011ae4:	67bb      	str	r3, [r7, #120]	; 0x78
 8011ae6:	2300      	movs	r3, #0
 8011ae8:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 8011aea:	687b      	ldr	r3, [r7, #4]
 8011aec:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011aee:	4839      	ldr	r0, [pc, #228]	; (8011bd4 <ethernet_link_thread+0x110>)
 8011af0:	f7f9 fae9 	bl	800b0c6 <LAN8742_GetLinkState>
 8011af4:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8011af6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011af8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011afc:	089b      	lsrs	r3, r3, #2
 8011afe:	f003 0301 	and.w	r3, r3, #1
 8011b02:	b2db      	uxtb	r3, r3
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	d009      	beq.n	8011b1c <ethernet_link_thread+0x58>
 8011b08:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b0a:	2b01      	cmp	r3, #1
 8011b0c:	dc06      	bgt.n	8011b1c <ethernet_link_thread+0x58>
  {
	//Due to no restart_IT point
	///////////////////////
    //HAL_ETH_Stop_IT(&heth);
    //////////////////////
    netif_set_down(netif);
 8011b0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011b10:	f006 fd42 	bl	8018598 <netif_set_down>
    netif_set_link_down(netif);
 8011b14:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011b16:	f006 fda5 	bl	8018664 <netif_set_link_down>
 8011b1a:	e056      	b.n	8011bca <ethernet_link_thread+0x106>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8011b1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011b1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b22:	f003 0304 	and.w	r3, r3, #4
 8011b26:	2b00      	cmp	r3, #0
 8011b28:	d14f      	bne.n	8011bca <ethernet_link_thread+0x106>
 8011b2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b2c:	2b01      	cmp	r3, #1
 8011b2e:	dd4c      	ble.n	8011bca <ethernet_link_thread+0x106>
  {
    switch (PHYLinkState)
 8011b30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011b32:	3b02      	subs	r3, #2
 8011b34:	2b03      	cmp	r3, #3
 8011b36:	d82b      	bhi.n	8011b90 <ethernet_link_thread+0xcc>
 8011b38:	a201      	add	r2, pc, #4	; (adr r2, 8011b40 <ethernet_link_thread+0x7c>)
 8011b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011b3e:	bf00      	nop
 8011b40:	08011b51 	.word	0x08011b51
 8011b44:	08011b63 	.word	0x08011b63
 8011b48:	08011b73 	.word	0x08011b73
 8011b4c:	08011b83 	.word	0x08011b83
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8011b50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011b54:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011b56:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011b5a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011b5c:	2301      	movs	r3, #1
 8011b5e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011b60:	e017      	b.n	8011b92 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8011b62:	2300      	movs	r3, #0
 8011b64:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 8011b66:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8011b6a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011b6c:	2301      	movs	r3, #1
 8011b6e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011b70:	e00f      	b.n	8011b92 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 8011b72:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8011b76:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011b78:	2300      	movs	r3, #0
 8011b7a:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011b7c:	2301      	movs	r3, #1
 8011b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011b80:	e007      	b.n	8011b92 <ethernet_link_thread+0xce>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 8011b82:	2300      	movs	r3, #0
 8011b84:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 8011b86:	2300      	movs	r3, #0
 8011b88:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 8011b8a:	2301      	movs	r3, #1
 8011b8c:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 8011b8e:	e000      	b.n	8011b92 <ethernet_link_thread+0xce>
    default:
      break;
 8011b90:	bf00      	nop
    }

    if(linkchanged)
 8011b92:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b94:	2b00      	cmp	r3, #0
 8011b96:	d018      	beq.n	8011bca <ethernet_link_thread+0x106>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 8011b98:	f107 0308 	add.w	r3, r7, #8
 8011b9c:	4619      	mov	r1, r3
 8011b9e:	480e      	ldr	r0, [pc, #56]	; (8011bd8 <ethernet_link_thread+0x114>)
 8011ba0:	f7fb f8a8 	bl	800ccf4 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 8011ba4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011ba6:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 8011ba8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011baa:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8011bac:	f107 0308 	add.w	r3, r7, #8
 8011bb0:	4619      	mov	r1, r3
 8011bb2:	4809      	ldr	r0, [pc, #36]	; (8011bd8 <ethernet_link_thread+0x114>)
 8011bb4:	f7fb f988 	bl	800cec8 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start(&heth);
 8011bb8:	4807      	ldr	r0, [pc, #28]	; (8011bd8 <ethernet_link_thread+0x114>)
 8011bba:	f7fa fc53 	bl	800c464 <HAL_ETH_Start>
      netif_set_up(netif);
 8011bbe:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011bc0:	f006 fc7e 	bl	80184c0 <netif_set_up>
      netif_set_link_up(netif);
 8011bc4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8011bc6:	f006 fd19 	bl	80185fc <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(1000);
 8011bca:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8011bce:	f000 f90f 	bl	8011df0 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8011bd2:	e78c      	b.n	8011aee <ethernet_link_thread+0x2a>
 8011bd4:	20006504 	.word	0x20006504
 8011bd8:	2000641c 	.word	0x2000641c

08011bdc <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8011bdc:	b580      	push	{r7, lr}
 8011bde:	b086      	sub	sp, #24
 8011be0:	af02      	add	r7, sp, #8
 8011be2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8011be4:	4812      	ldr	r0, [pc, #72]	; (8011c30 <HAL_ETH_RxAllocateCallback+0x54>)
 8011be6:	f006 f9df 	bl	8017fa8 <memp_malloc_pool>
 8011bea:	60f8      	str	r0, [r7, #12]
  if (p)
 8011bec:	68fb      	ldr	r3, [r7, #12]
 8011bee:	2b00      	cmp	r3, #0
 8011bf0:	d014      	beq.n	8011c1c <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	f103 0220 	add.w	r2, r3, #32
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8011bfc:	68fb      	ldr	r3, [r7, #12]
 8011bfe:	4a0d      	ldr	r2, [pc, #52]	; (8011c34 <HAL_ETH_RxAllocateCallback+0x58>)
 8011c00:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUFFER_SIZE);
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	681b      	ldr	r3, [r3, #0]
 8011c06:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8011c0a:	9201      	str	r2, [sp, #4]
 8011c0c:	9300      	str	r3, [sp, #0]
 8011c0e:	68fb      	ldr	r3, [r7, #12]
 8011c10:	2241      	movs	r2, #65	; 0x41
 8011c12:	2100      	movs	r1, #0
 8011c14:	2000      	movs	r0, #0
 8011c16:	f006 ff49 	bl	8018aac <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8011c1a:	e005      	b.n	8011c28 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8011c1c:	4b06      	ldr	r3, [pc, #24]	; (8011c38 <HAL_ETH_RxAllocateCallback+0x5c>)
 8011c1e:	2201      	movs	r2, #1
 8011c20:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8011c22:	687b      	ldr	r3, [r7, #4]
 8011c24:	2200      	movs	r2, #0
 8011c26:	601a      	str	r2, [r3, #0]
}
 8011c28:	bf00      	nop
 8011c2a:	3710      	adds	r7, #16
 8011c2c:	46bd      	mov	sp, r7
 8011c2e:	bd80      	pop	{r7, pc}
 8011c30:	08028d68 	.word	0x08028d68
 8011c34:	08011859 	.word	0x08011859
 8011c38:	20006410 	.word	0x20006410

08011c3c <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8011c3c:	b580      	push	{r7, lr}
 8011c3e:	b088      	sub	sp, #32
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	60f8      	str	r0, [r7, #12]
 8011c44:	60b9      	str	r1, [r7, #8]
 8011c46:	607a      	str	r2, [r7, #4]
 8011c48:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 8011c4e:	68bb      	ldr	r3, [r7, #8]
 8011c50:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011c52:	2300      	movs	r3, #0
 8011c54:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8011c56:	687b      	ldr	r3, [r7, #4]
 8011c58:	3b20      	subs	r3, #32
 8011c5a:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8011c5c:	69fb      	ldr	r3, [r7, #28]
 8011c5e:	2200      	movs	r2, #0
 8011c60:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 8011c62:	69fb      	ldr	r3, [r7, #28]
 8011c64:	2200      	movs	r2, #0
 8011c66:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8011c68:	69fb      	ldr	r3, [r7, #28]
 8011c6a:	887a      	ldrh	r2, [r7, #2]
 8011c6c:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 8011c6e:	69bb      	ldr	r3, [r7, #24]
 8011c70:	681b      	ldr	r3, [r3, #0]
 8011c72:	2b00      	cmp	r3, #0
 8011c74:	d103      	bne.n	8011c7e <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8011c76:	69bb      	ldr	r3, [r7, #24]
 8011c78:	69fa      	ldr	r2, [r7, #28]
 8011c7a:	601a      	str	r2, [r3, #0]
 8011c7c:	e003      	b.n	8011c86 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 8011c7e:	697b      	ldr	r3, [r7, #20]
 8011c80:	681b      	ldr	r3, [r3, #0]
 8011c82:	69fa      	ldr	r2, [r7, #28]
 8011c84:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8011c86:	697b      	ldr	r3, [r7, #20]
 8011c88:	69fa      	ldr	r2, [r7, #28]
 8011c8a:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8011c8c:	69bb      	ldr	r3, [r7, #24]
 8011c8e:	681b      	ldr	r3, [r3, #0]
 8011c90:	61fb      	str	r3, [r7, #28]
 8011c92:	e009      	b.n	8011ca8 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8011c94:	69fb      	ldr	r3, [r7, #28]
 8011c96:	891a      	ldrh	r2, [r3, #8]
 8011c98:	887b      	ldrh	r3, [r7, #2]
 8011c9a:	4413      	add	r3, r2
 8011c9c:	b29a      	uxth	r2, r3
 8011c9e:	69fb      	ldr	r3, [r7, #28]
 8011ca0:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 8011ca2:	69fb      	ldr	r3, [r7, #28]
 8011ca4:	681b      	ldr	r3, [r3, #0]
 8011ca6:	61fb      	str	r3, [r7, #28]
 8011ca8:	69fb      	ldr	r3, [r7, #28]
 8011caa:	2b00      	cmp	r3, #0
 8011cac:	d1f2      	bne.n	8011c94 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 8011cae:	887b      	ldrh	r3, [r7, #2]
 8011cb0:	4619      	mov	r1, r3
 8011cb2:	6878      	ldr	r0, [r7, #4]
 8011cb4:	f7ff fb30 	bl	8011318 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 8011cb8:	bf00      	nop
 8011cba:	3720      	adds	r7, #32
 8011cbc:	46bd      	mov	sp, r7
 8011cbe:	bd80      	pop	{r7, pc}

08011cc0 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8011cc0:	b580      	push	{r7, lr}
 8011cc2:	b082      	sub	sp, #8
 8011cc4:	af00      	add	r7, sp, #0
 8011cc6:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8011cc8:	6878      	ldr	r0, [r7, #4]
 8011cca:	f007 f8a9 	bl	8018e20 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 8011cce:	bf00      	nop
 8011cd0:	3708      	adds	r7, #8
 8011cd2:	46bd      	mov	sp, r7
 8011cd4:	bd80      	pop	{r7, pc}

08011cd6 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8011cd6:	b480      	push	{r7}
 8011cd8:	b085      	sub	sp, #20
 8011cda:	af00      	add	r7, sp, #0
 8011cdc:	4603      	mov	r3, r0
 8011cde:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8011ce0:	2300      	movs	r3, #0
 8011ce2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8011ce4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8011ce8:	2b84      	cmp	r3, #132	; 0x84
 8011cea:	d005      	beq.n	8011cf8 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8011cec:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	4413      	add	r3, r2
 8011cf4:	3303      	adds	r3, #3
 8011cf6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8011cf8:	68fb      	ldr	r3, [r7, #12]
}
 8011cfa:	4618      	mov	r0, r3
 8011cfc:	3714      	adds	r7, #20
 8011cfe:	46bd      	mov	sp, r7
 8011d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d04:	4770      	bx	lr

08011d06 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8011d06:	b480      	push	{r7}
 8011d08:	b083      	sub	sp, #12
 8011d0a:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8011d0c:	f3ef 8305 	mrs	r3, IPSR
 8011d10:	607b      	str	r3, [r7, #4]
  return(result);
 8011d12:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	bf14      	ite	ne
 8011d18:	2301      	movne	r3, #1
 8011d1a:	2300      	moveq	r3, #0
 8011d1c:	b2db      	uxtb	r3, r3
}
 8011d1e:	4618      	mov	r0, r3
 8011d20:	370c      	adds	r7, #12
 8011d22:	46bd      	mov	sp, r7
 8011d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d28:	4770      	bx	lr

08011d2a <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8011d2a:	b580      	push	{r7, lr}
 8011d2c:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8011d2e:	f001 fe9f 	bl	8013a70 <vTaskStartScheduler>
  
  return osOK;
 8011d32:	2300      	movs	r3, #0
}
 8011d34:	4618      	mov	r0, r3
 8011d36:	bd80      	pop	{r7, pc}

08011d38 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8011d38:	b580      	push	{r7, lr}
 8011d3a:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8011d3c:	f7ff ffe3 	bl	8011d06 <inHandlerMode>
 8011d40:	4603      	mov	r3, r0
 8011d42:	2b00      	cmp	r3, #0
 8011d44:	d003      	beq.n	8011d4e <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8011d46:	f001 ffbd 	bl	8013cc4 <xTaskGetTickCountFromISR>
 8011d4a:	4603      	mov	r3, r0
 8011d4c:	e002      	b.n	8011d54 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8011d4e:	f001 ffa9 	bl	8013ca4 <xTaskGetTickCount>
 8011d52:	4603      	mov	r3, r0
  }
}
 8011d54:	4618      	mov	r0, r3
 8011d56:	bd80      	pop	{r7, pc}

08011d58 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8011d58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011d5a:	b089      	sub	sp, #36	; 0x24
 8011d5c:	af04      	add	r7, sp, #16
 8011d5e:	6078      	str	r0, [r7, #4]
 8011d60:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8011d62:	687b      	ldr	r3, [r7, #4]
 8011d64:	695b      	ldr	r3, [r3, #20]
 8011d66:	2b00      	cmp	r3, #0
 8011d68:	d020      	beq.n	8011dac <osThreadCreate+0x54>
 8011d6a:	687b      	ldr	r3, [r7, #4]
 8011d6c:	699b      	ldr	r3, [r3, #24]
 8011d6e:	2b00      	cmp	r3, #0
 8011d70:	d01c      	beq.n	8011dac <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d72:	687b      	ldr	r3, [r7, #4]
 8011d74:	685c      	ldr	r4, [r3, #4]
 8011d76:	687b      	ldr	r3, [r7, #4]
 8011d78:	681d      	ldr	r5, [r3, #0]
 8011d7a:	687b      	ldr	r3, [r7, #4]
 8011d7c:	691e      	ldr	r6, [r3, #16]
 8011d7e:	687b      	ldr	r3, [r7, #4]
 8011d80:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011d84:	4618      	mov	r0, r3
 8011d86:	f7ff ffa6 	bl	8011cd6 <makeFreeRtosPriority>
 8011d8a:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8011d8c:	687b      	ldr	r3, [r7, #4]
 8011d8e:	695b      	ldr	r3, [r3, #20]
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011d94:	9202      	str	r2, [sp, #8]
 8011d96:	9301      	str	r3, [sp, #4]
 8011d98:	9100      	str	r1, [sp, #0]
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	4632      	mov	r2, r6
 8011d9e:	4629      	mov	r1, r5
 8011da0:	4620      	mov	r0, r4
 8011da2:	f001 fb67 	bl	8013474 <xTaskCreateStatic>
 8011da6:	4603      	mov	r3, r0
 8011da8:	60fb      	str	r3, [r7, #12]
 8011daa:	e01c      	b.n	8011de6 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	685c      	ldr	r4, [r3, #4]
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8011db8:	b29e      	uxth	r6, r3
 8011dba:	687b      	ldr	r3, [r7, #4]
 8011dbc:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	f7ff ff88 	bl	8011cd6 <makeFreeRtosPriority>
 8011dc6:	4602      	mov	r2, r0
 8011dc8:	f107 030c 	add.w	r3, r7, #12
 8011dcc:	9301      	str	r3, [sp, #4]
 8011dce:	9200      	str	r2, [sp, #0]
 8011dd0:	683b      	ldr	r3, [r7, #0]
 8011dd2:	4632      	mov	r2, r6
 8011dd4:	4629      	mov	r1, r5
 8011dd6:	4620      	mov	r0, r4
 8011dd8:	f001 fbaf 	bl	801353a <xTaskCreate>
 8011ddc:	4603      	mov	r3, r0
 8011dde:	2b01      	cmp	r3, #1
 8011de0:	d001      	beq.n	8011de6 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8011de2:	2300      	movs	r3, #0
 8011de4:	e000      	b.n	8011de8 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8011de6:	68fb      	ldr	r3, [r7, #12]
}
 8011de8:	4618      	mov	r0, r3
 8011dea:	3714      	adds	r7, #20
 8011dec:	46bd      	mov	sp, r7
 8011dee:	bdf0      	pop	{r4, r5, r6, r7, pc}

08011df0 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8011df0:	b580      	push	{r7, lr}
 8011df2:	b084      	sub	sp, #16
 8011df4:	af00      	add	r7, sp, #0
 8011df6:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8011dfc:	68fb      	ldr	r3, [r7, #12]
 8011dfe:	2b00      	cmp	r3, #0
 8011e00:	d001      	beq.n	8011e06 <osDelay+0x16>
 8011e02:	68fb      	ldr	r3, [r7, #12]
 8011e04:	e000      	b.n	8011e08 <osDelay+0x18>
 8011e06:	2301      	movs	r3, #1
 8011e08:	4618      	mov	r0, r3
 8011e0a:	f001 fdfb 	bl	8013a04 <vTaskDelay>
  
  return osOK;
 8011e0e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8011e10:	4618      	mov	r0, r3
 8011e12:	3710      	adds	r7, #16
 8011e14:	46bd      	mov	sp, r7
 8011e16:	bd80      	pop	{r7, pc}

08011e18 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b082      	sub	sp, #8
 8011e1c:	af00      	add	r7, sp, #0
 8011e1e:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8011e20:	687b      	ldr	r3, [r7, #4]
 8011e22:	685b      	ldr	r3, [r3, #4]
 8011e24:	2b00      	cmp	r3, #0
 8011e26:	d007      	beq.n	8011e38 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8011e28:	687b      	ldr	r3, [r7, #4]
 8011e2a:	685b      	ldr	r3, [r3, #4]
 8011e2c:	4619      	mov	r1, r3
 8011e2e:	2001      	movs	r0, #1
 8011e30:	f000 fc91 	bl	8012756 <xQueueCreateMutexStatic>
 8011e34:	4603      	mov	r3, r0
 8011e36:	e003      	b.n	8011e40 <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8011e38:	2001      	movs	r0, #1
 8011e3a:	f000 fc74 	bl	8012726 <xQueueCreateMutex>
 8011e3e:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8011e40:	4618      	mov	r0, r3
 8011e42:	3708      	adds	r7, #8
 8011e44:	46bd      	mov	sp, r7
 8011e46:	bd80      	pop	{r7, pc}

08011e48 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8011e48:	b580      	push	{r7, lr}
 8011e4a:	b084      	sub	sp, #16
 8011e4c:	af00      	add	r7, sp, #0
 8011e4e:	6078      	str	r0, [r7, #4]
 8011e50:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011e52:	2300      	movs	r3, #0
 8011e54:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8011e56:	687b      	ldr	r3, [r7, #4]
 8011e58:	2b00      	cmp	r3, #0
 8011e5a:	d101      	bne.n	8011e60 <osMutexWait+0x18>
    return osErrorParameter;
 8011e5c:	2380      	movs	r3, #128	; 0x80
 8011e5e:	e03a      	b.n	8011ed6 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8011e60:	2300      	movs	r3, #0
 8011e62:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011e64:	683b      	ldr	r3, [r7, #0]
 8011e66:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011e6a:	d103      	bne.n	8011e74 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8011e6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011e70:	60fb      	str	r3, [r7, #12]
 8011e72:	e009      	b.n	8011e88 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8011e74:	683b      	ldr	r3, [r7, #0]
 8011e76:	2b00      	cmp	r3, #0
 8011e78:	d006      	beq.n	8011e88 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011e7a:	683b      	ldr	r3, [r7, #0]
 8011e7c:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011e7e:	68fb      	ldr	r3, [r7, #12]
 8011e80:	2b00      	cmp	r3, #0
 8011e82:	d101      	bne.n	8011e88 <osMutexWait+0x40>
      ticks = 1;
 8011e84:	2301      	movs	r3, #1
 8011e86:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011e88:	f7ff ff3d 	bl	8011d06 <inHandlerMode>
 8011e8c:	4603      	mov	r3, r0
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	d017      	beq.n	8011ec2 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011e92:	f107 0308 	add.w	r3, r7, #8
 8011e96:	461a      	mov	r2, r3
 8011e98:	2100      	movs	r1, #0
 8011e9a:	6878      	ldr	r0, [r7, #4]
 8011e9c:	f001 f8ac 	bl	8012ff8 <xQueueReceiveFromISR>
 8011ea0:	4603      	mov	r3, r0
 8011ea2:	2b01      	cmp	r3, #1
 8011ea4:	d001      	beq.n	8011eaa <osMutexWait+0x62>
      return osErrorOS;
 8011ea6:	23ff      	movs	r3, #255	; 0xff
 8011ea8:	e015      	b.n	8011ed6 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8011eaa:	68bb      	ldr	r3, [r7, #8]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d011      	beq.n	8011ed4 <osMutexWait+0x8c>
 8011eb0:	4b0b      	ldr	r3, [pc, #44]	; (8011ee0 <osMutexWait+0x98>)
 8011eb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011eb6:	601a      	str	r2, [r3, #0]
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	f3bf 8f6f 	isb	sy
 8011ec0:	e008      	b.n	8011ed4 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8011ec2:	68f9      	ldr	r1, [r7, #12]
 8011ec4:	6878      	ldr	r0, [r7, #4]
 8011ec6:	f000 ff83 	bl	8012dd0 <xQueueSemaphoreTake>
 8011eca:	4603      	mov	r3, r0
 8011ecc:	2b01      	cmp	r3, #1
 8011ece:	d001      	beq.n	8011ed4 <osMutexWait+0x8c>
    return osErrorOS;
 8011ed0:	23ff      	movs	r3, #255	; 0xff
 8011ed2:	e000      	b.n	8011ed6 <osMutexWait+0x8e>
  }
  
  return osOK;
 8011ed4:	2300      	movs	r3, #0
}
 8011ed6:	4618      	mov	r0, r3
 8011ed8:	3710      	adds	r7, #16
 8011eda:	46bd      	mov	sp, r7
 8011edc:	bd80      	pop	{r7, pc}
 8011ede:	bf00      	nop
 8011ee0:	e000ed04 	.word	0xe000ed04

08011ee4 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b084      	sub	sp, #16
 8011ee8:	af00      	add	r7, sp, #0
 8011eea:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8011eec:	2300      	movs	r3, #0
 8011eee:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8011ef0:	2300      	movs	r3, #0
 8011ef2:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8011ef4:	f7ff ff07 	bl	8011d06 <inHandlerMode>
 8011ef8:	4603      	mov	r3, r0
 8011efa:	2b00      	cmp	r3, #0
 8011efc:	d016      	beq.n	8011f2c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8011efe:	f107 0308 	add.w	r3, r7, #8
 8011f02:	4619      	mov	r1, r3
 8011f04:	6878      	ldr	r0, [r7, #4]
 8011f06:	f000 fde7 	bl	8012ad8 <xQueueGiveFromISR>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	2b01      	cmp	r3, #1
 8011f0e:	d001      	beq.n	8011f14 <osMutexRelease+0x30>
      return osErrorOS;
 8011f10:	23ff      	movs	r3, #255	; 0xff
 8011f12:	e017      	b.n	8011f44 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8011f14:	68bb      	ldr	r3, [r7, #8]
 8011f16:	2b00      	cmp	r3, #0
 8011f18:	d013      	beq.n	8011f42 <osMutexRelease+0x5e>
 8011f1a:	4b0c      	ldr	r3, [pc, #48]	; (8011f4c <osMutexRelease+0x68>)
 8011f1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011f20:	601a      	str	r2, [r3, #0]
 8011f22:	f3bf 8f4f 	dsb	sy
 8011f26:	f3bf 8f6f 	isb	sy
 8011f2a:	e00a      	b.n	8011f42 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8011f2c:	2300      	movs	r3, #0
 8011f2e:	2200      	movs	r2, #0
 8011f30:	2100      	movs	r1, #0
 8011f32:	6878      	ldr	r0, [r7, #4]
 8011f34:	f000 fc2a 	bl	801278c <xQueueGenericSend>
 8011f38:	4603      	mov	r3, r0
 8011f3a:	2b01      	cmp	r3, #1
 8011f3c:	d001      	beq.n	8011f42 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8011f3e:	23ff      	movs	r3, #255	; 0xff
 8011f40:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8011f42:	68fb      	ldr	r3, [r7, #12]
}
 8011f44:	4618      	mov	r0, r3
 8011f46:	3710      	adds	r7, #16
 8011f48:	46bd      	mov	sp, r7
 8011f4a:	bd80      	pop	{r7, pc}
 8011f4c:	e000ed04 	.word	0xe000ed04

08011f50 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8011f50:	b580      	push	{r7, lr}
 8011f52:	b086      	sub	sp, #24
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 8011f5a:	687b      	ldr	r3, [r7, #4]
 8011f5c:	685b      	ldr	r3, [r3, #4]
 8011f5e:	2b00      	cmp	r3, #0
 8011f60:	d00f      	beq.n	8011f82 <osSemaphoreCreate+0x32>
    if (count == 1) {
 8011f62:	683b      	ldr	r3, [r7, #0]
 8011f64:	2b01      	cmp	r3, #1
 8011f66:	d10a      	bne.n	8011f7e <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 8011f68:	687b      	ldr	r3, [r7, #4]
 8011f6a:	685b      	ldr	r3, [r3, #4]
 8011f6c:	2203      	movs	r2, #3
 8011f6e:	9200      	str	r2, [sp, #0]
 8011f70:	2200      	movs	r2, #0
 8011f72:	2100      	movs	r1, #0
 8011f74:	2001      	movs	r0, #1
 8011f76:	f000 fad9 	bl	801252c <xQueueGenericCreateStatic>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	e016      	b.n	8011fac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8011f7e:	2300      	movs	r3, #0
 8011f80:	e014      	b.n	8011fac <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 8011f82:	683b      	ldr	r3, [r7, #0]
 8011f84:	2b01      	cmp	r3, #1
 8011f86:	d110      	bne.n	8011faa <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 8011f88:	2203      	movs	r2, #3
 8011f8a:	2100      	movs	r1, #0
 8011f8c:	2001      	movs	r0, #1
 8011f8e:	f000 fb4f 	bl	8012630 <xQueueGenericCreate>
 8011f92:	60f8      	str	r0, [r7, #12]
 8011f94:	68fb      	ldr	r3, [r7, #12]
 8011f96:	2b00      	cmp	r3, #0
 8011f98:	d005      	beq.n	8011fa6 <osSemaphoreCreate+0x56>
 8011f9a:	2300      	movs	r3, #0
 8011f9c:	2200      	movs	r2, #0
 8011f9e:	2100      	movs	r1, #0
 8011fa0:	68f8      	ldr	r0, [r7, #12]
 8011fa2:	f000 fbf3 	bl	801278c <xQueueGenericSend>
      return sema;
 8011fa6:	68fb      	ldr	r3, [r7, #12]
 8011fa8:	e000      	b.n	8011fac <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 8011faa:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8011fac:	4618      	mov	r0, r3
 8011fae:	3710      	adds	r7, #16
 8011fb0:	46bd      	mov	sp, r7
 8011fb2:	bd80      	pop	{r7, pc}

08011fb4 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8011fb4:	b580      	push	{r7, lr}
 8011fb6:	b084      	sub	sp, #16
 8011fb8:	af00      	add	r7, sp, #0
 8011fba:	6078      	str	r0, [r7, #4]
 8011fbc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8011fbe:	2300      	movs	r3, #0
 8011fc0:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	2b00      	cmp	r3, #0
 8011fc6:	d101      	bne.n	8011fcc <osSemaphoreWait+0x18>
    return osErrorParameter;
 8011fc8:	2380      	movs	r3, #128	; 0x80
 8011fca:	e03a      	b.n	8012042 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8011fcc:	2300      	movs	r3, #0
 8011fce:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8011fd0:	683b      	ldr	r3, [r7, #0]
 8011fd2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8011fd6:	d103      	bne.n	8011fe0 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8011fd8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8011fdc:	60fb      	str	r3, [r7, #12]
 8011fde:	e009      	b.n	8011ff4 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8011fe0:	683b      	ldr	r3, [r7, #0]
 8011fe2:	2b00      	cmp	r3, #0
 8011fe4:	d006      	beq.n	8011ff4 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8011fe6:	683b      	ldr	r3, [r7, #0]
 8011fe8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	2b00      	cmp	r3, #0
 8011fee:	d101      	bne.n	8011ff4 <osSemaphoreWait+0x40>
      ticks = 1;
 8011ff0:	2301      	movs	r3, #1
 8011ff2:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8011ff4:	f7ff fe87 	bl	8011d06 <inHandlerMode>
 8011ff8:	4603      	mov	r3, r0
 8011ffa:	2b00      	cmp	r3, #0
 8011ffc:	d017      	beq.n	801202e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8011ffe:	f107 0308 	add.w	r3, r7, #8
 8012002:	461a      	mov	r2, r3
 8012004:	2100      	movs	r1, #0
 8012006:	6878      	ldr	r0, [r7, #4]
 8012008:	f000 fff6 	bl	8012ff8 <xQueueReceiveFromISR>
 801200c:	4603      	mov	r3, r0
 801200e:	2b01      	cmp	r3, #1
 8012010:	d001      	beq.n	8012016 <osSemaphoreWait+0x62>
      return osErrorOS;
 8012012:	23ff      	movs	r3, #255	; 0xff
 8012014:	e015      	b.n	8012042 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	2b00      	cmp	r3, #0
 801201a:	d011      	beq.n	8012040 <osSemaphoreWait+0x8c>
 801201c:	4b0b      	ldr	r3, [pc, #44]	; (801204c <osSemaphoreWait+0x98>)
 801201e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012022:	601a      	str	r2, [r3, #0]
 8012024:	f3bf 8f4f 	dsb	sy
 8012028:	f3bf 8f6f 	isb	sy
 801202c:	e008      	b.n	8012040 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 801202e:	68f9      	ldr	r1, [r7, #12]
 8012030:	6878      	ldr	r0, [r7, #4]
 8012032:	f000 fecd 	bl	8012dd0 <xQueueSemaphoreTake>
 8012036:	4603      	mov	r3, r0
 8012038:	2b01      	cmp	r3, #1
 801203a:	d001      	beq.n	8012040 <osSemaphoreWait+0x8c>
    return osErrorOS;
 801203c:	23ff      	movs	r3, #255	; 0xff
 801203e:	e000      	b.n	8012042 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8012040:	2300      	movs	r3, #0
}
 8012042:	4618      	mov	r0, r3
 8012044:	3710      	adds	r7, #16
 8012046:	46bd      	mov	sp, r7
 8012048:	bd80      	pop	{r7, pc}
 801204a:	bf00      	nop
 801204c:	e000ed04 	.word	0xe000ed04

08012050 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b084      	sub	sp, #16
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8012058:	2300      	movs	r3, #0
 801205a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 801205c:	2300      	movs	r3, #0
 801205e:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8012060:	f7ff fe51 	bl	8011d06 <inHandlerMode>
 8012064:	4603      	mov	r3, r0
 8012066:	2b00      	cmp	r3, #0
 8012068:	d016      	beq.n	8012098 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 801206a:	f107 0308 	add.w	r3, r7, #8
 801206e:	4619      	mov	r1, r3
 8012070:	6878      	ldr	r0, [r7, #4]
 8012072:	f000 fd31 	bl	8012ad8 <xQueueGiveFromISR>
 8012076:	4603      	mov	r3, r0
 8012078:	2b01      	cmp	r3, #1
 801207a:	d001      	beq.n	8012080 <osSemaphoreRelease+0x30>
      return osErrorOS;
 801207c:	23ff      	movs	r3, #255	; 0xff
 801207e:	e017      	b.n	80120b0 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012080:	68bb      	ldr	r3, [r7, #8]
 8012082:	2b00      	cmp	r3, #0
 8012084:	d013      	beq.n	80120ae <osSemaphoreRelease+0x5e>
 8012086:	4b0c      	ldr	r3, [pc, #48]	; (80120b8 <osSemaphoreRelease+0x68>)
 8012088:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801208c:	601a      	str	r2, [r3, #0]
 801208e:	f3bf 8f4f 	dsb	sy
 8012092:	f3bf 8f6f 	isb	sy
 8012096:	e00a      	b.n	80120ae <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8012098:	2300      	movs	r3, #0
 801209a:	2200      	movs	r2, #0
 801209c:	2100      	movs	r1, #0
 801209e:	6878      	ldr	r0, [r7, #4]
 80120a0:	f000 fb74 	bl	801278c <xQueueGenericSend>
 80120a4:	4603      	mov	r3, r0
 80120a6:	2b01      	cmp	r3, #1
 80120a8:	d001      	beq.n	80120ae <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 80120aa:	23ff      	movs	r3, #255	; 0xff
 80120ac:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 80120ae:	68fb      	ldr	r3, [r7, #12]
}
 80120b0:	4618      	mov	r0, r3
 80120b2:	3710      	adds	r7, #16
 80120b4:	46bd      	mov	sp, r7
 80120b6:	bd80      	pop	{r7, pc}
 80120b8:	e000ed04 	.word	0xe000ed04

080120bc <osSemaphoreDelete>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreDelete shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreDelete (osSemaphoreId semaphore_id)
{
 80120bc:	b580      	push	{r7, lr}
 80120be:	b082      	sub	sp, #8
 80120c0:	af00      	add	r7, sp, #0
 80120c2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80120c4:	f7ff fe1f 	bl	8011d06 <inHandlerMode>
 80120c8:	4603      	mov	r3, r0
 80120ca:	2b00      	cmp	r3, #0
 80120cc:	d001      	beq.n	80120d2 <osSemaphoreDelete+0x16>
    return osErrorISR;
 80120ce:	2382      	movs	r3, #130	; 0x82
 80120d0:	e003      	b.n	80120da <osSemaphoreDelete+0x1e>
  }

  vSemaphoreDelete(semaphore_id);
 80120d2:	6878      	ldr	r0, [r7, #4]
 80120d4:	f001 f856 	bl	8013184 <vQueueDelete>

  return osOK; 
 80120d8:	2300      	movs	r3, #0
}
 80120da:	4618      	mov	r0, r3
 80120dc:	3708      	adds	r7, #8
 80120de:	46bd      	mov	sp, r7
 80120e0:	bd80      	pop	{r7, pc}

080120e2 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 80120e2:	b590      	push	{r4, r7, lr}
 80120e4:	b085      	sub	sp, #20
 80120e6:	af02      	add	r7, sp, #8
 80120e8:	6078      	str	r0, [r7, #4]
 80120ea:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 80120ec:	687b      	ldr	r3, [r7, #4]
 80120ee:	689b      	ldr	r3, [r3, #8]
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d011      	beq.n	8012118 <osMessageCreate+0x36>
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	68db      	ldr	r3, [r3, #12]
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d00d      	beq.n	8012118 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	6818      	ldr	r0, [r3, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	6859      	ldr	r1, [r3, #4]
 8012104:	687b      	ldr	r3, [r7, #4]
 8012106:	689a      	ldr	r2, [r3, #8]
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	68db      	ldr	r3, [r3, #12]
 801210c:	2400      	movs	r4, #0
 801210e:	9400      	str	r4, [sp, #0]
 8012110:	f000 fa0c 	bl	801252c <xQueueGenericCreateStatic>
 8012114:	4603      	mov	r3, r0
 8012116:	e008      	b.n	801212a <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8012118:	687b      	ldr	r3, [r7, #4]
 801211a:	6818      	ldr	r0, [r3, #0]
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	685b      	ldr	r3, [r3, #4]
 8012120:	2200      	movs	r2, #0
 8012122:	4619      	mov	r1, r3
 8012124:	f000 fa84 	bl	8012630 <xQueueGenericCreate>
 8012128:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 801212a:	4618      	mov	r0, r3
 801212c:	370c      	adds	r7, #12
 801212e:	46bd      	mov	sp, r7
 8012130:	bd90      	pop	{r4, r7, pc}
	...

08012134 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8012134:	b580      	push	{r7, lr}
 8012136:	b086      	sub	sp, #24
 8012138:	af00      	add	r7, sp, #0
 801213a:	60f8      	str	r0, [r7, #12]
 801213c:	60b9      	str	r1, [r7, #8]
 801213e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8012140:	2300      	movs	r3, #0
 8012142:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8012148:	697b      	ldr	r3, [r7, #20]
 801214a:	2b00      	cmp	r3, #0
 801214c:	d101      	bne.n	8012152 <osMessagePut+0x1e>
    ticks = 1;
 801214e:	2301      	movs	r3, #1
 8012150:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8012152:	f7ff fdd8 	bl	8011d06 <inHandlerMode>
 8012156:	4603      	mov	r3, r0
 8012158:	2b00      	cmp	r3, #0
 801215a:	d018      	beq.n	801218e <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 801215c:	f107 0210 	add.w	r2, r7, #16
 8012160:	f107 0108 	add.w	r1, r7, #8
 8012164:	2300      	movs	r3, #0
 8012166:	68f8      	ldr	r0, [r7, #12]
 8012168:	f000 fc16 	bl	8012998 <xQueueGenericSendFromISR>
 801216c:	4603      	mov	r3, r0
 801216e:	2b01      	cmp	r3, #1
 8012170:	d001      	beq.n	8012176 <osMessagePut+0x42>
      return osErrorOS;
 8012172:	23ff      	movs	r3, #255	; 0xff
 8012174:	e018      	b.n	80121a8 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8012176:	693b      	ldr	r3, [r7, #16]
 8012178:	2b00      	cmp	r3, #0
 801217a:	d014      	beq.n	80121a6 <osMessagePut+0x72>
 801217c:	4b0c      	ldr	r3, [pc, #48]	; (80121b0 <osMessagePut+0x7c>)
 801217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012182:	601a      	str	r2, [r3, #0]
 8012184:	f3bf 8f4f 	dsb	sy
 8012188:	f3bf 8f6f 	isb	sy
 801218c:	e00b      	b.n	80121a6 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 801218e:	f107 0108 	add.w	r1, r7, #8
 8012192:	2300      	movs	r3, #0
 8012194:	697a      	ldr	r2, [r7, #20]
 8012196:	68f8      	ldr	r0, [r7, #12]
 8012198:	f000 faf8 	bl	801278c <xQueueGenericSend>
 801219c:	4603      	mov	r3, r0
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d001      	beq.n	80121a6 <osMessagePut+0x72>
      return osErrorOS;
 80121a2:	23ff      	movs	r3, #255	; 0xff
 80121a4:	e000      	b.n	80121a8 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 80121a6:	2300      	movs	r3, #0
}
 80121a8:	4618      	mov	r0, r3
 80121aa:	3718      	adds	r7, #24
 80121ac:	46bd      	mov	sp, r7
 80121ae:	bd80      	pop	{r7, pc}
 80121b0:	e000ed04 	.word	0xe000ed04

080121b4 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 80121b4:	b590      	push	{r4, r7, lr}
 80121b6:	b08b      	sub	sp, #44	; 0x2c
 80121b8:	af00      	add	r7, sp, #0
 80121ba:	60f8      	str	r0, [r7, #12]
 80121bc:	60b9      	str	r1, [r7, #8]
 80121be:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 80121c0:	68bb      	ldr	r3, [r7, #8]
 80121c2:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 80121c4:	2300      	movs	r3, #0
 80121c6:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 80121c8:	68bb      	ldr	r3, [r7, #8]
 80121ca:	2b00      	cmp	r3, #0
 80121cc:	d10a      	bne.n	80121e4 <osMessageGet+0x30>
    event.status = osErrorParameter;
 80121ce:	2380      	movs	r3, #128	; 0x80
 80121d0:	617b      	str	r3, [r7, #20]
    return event;
 80121d2:	68fb      	ldr	r3, [r7, #12]
 80121d4:	461c      	mov	r4, r3
 80121d6:	f107 0314 	add.w	r3, r7, #20
 80121da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80121de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80121e2:	e054      	b.n	801228e <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 80121e4:	2300      	movs	r3, #0
 80121e6:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 80121e8:	2300      	movs	r3, #0
 80121ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 80121ec:	687b      	ldr	r3, [r7, #4]
 80121ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80121f2:	d103      	bne.n	80121fc <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 80121f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80121f8:	627b      	str	r3, [r7, #36]	; 0x24
 80121fa:	e009      	b.n	8012210 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	2b00      	cmp	r3, #0
 8012200:	d006      	beq.n	8012210 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8012202:	687b      	ldr	r3, [r7, #4]
 8012204:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8012206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012208:	2b00      	cmp	r3, #0
 801220a:	d101      	bne.n	8012210 <osMessageGet+0x5c>
      ticks = 1;
 801220c:	2301      	movs	r3, #1
 801220e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8012210:	f7ff fd79 	bl	8011d06 <inHandlerMode>
 8012214:	4603      	mov	r3, r0
 8012216:	2b00      	cmp	r3, #0
 8012218:	d01c      	beq.n	8012254 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 801221a:	f107 0220 	add.w	r2, r7, #32
 801221e:	f107 0314 	add.w	r3, r7, #20
 8012222:	3304      	adds	r3, #4
 8012224:	4619      	mov	r1, r3
 8012226:	68b8      	ldr	r0, [r7, #8]
 8012228:	f000 fee6 	bl	8012ff8 <xQueueReceiveFromISR>
 801222c:	4603      	mov	r3, r0
 801222e:	2b01      	cmp	r3, #1
 8012230:	d102      	bne.n	8012238 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8012232:	2310      	movs	r3, #16
 8012234:	617b      	str	r3, [r7, #20]
 8012236:	e001      	b.n	801223c <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8012238:	2300      	movs	r3, #0
 801223a:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 801223c:	6a3b      	ldr	r3, [r7, #32]
 801223e:	2b00      	cmp	r3, #0
 8012240:	d01d      	beq.n	801227e <osMessageGet+0xca>
 8012242:	4b15      	ldr	r3, [pc, #84]	; (8012298 <osMessageGet+0xe4>)
 8012244:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012248:	601a      	str	r2, [r3, #0]
 801224a:	f3bf 8f4f 	dsb	sy
 801224e:	f3bf 8f6f 	isb	sy
 8012252:	e014      	b.n	801227e <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8012254:	f107 0314 	add.w	r3, r7, #20
 8012258:	3304      	adds	r3, #4
 801225a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801225c:	4619      	mov	r1, r3
 801225e:	68b8      	ldr	r0, [r7, #8]
 8012260:	f000 fcd0 	bl	8012c04 <xQueueReceive>
 8012264:	4603      	mov	r3, r0
 8012266:	2b01      	cmp	r3, #1
 8012268:	d102      	bne.n	8012270 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 801226a:	2310      	movs	r3, #16
 801226c:	617b      	str	r3, [r7, #20]
 801226e:	e006      	b.n	801227e <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8012270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012272:	2b00      	cmp	r3, #0
 8012274:	d101      	bne.n	801227a <osMessageGet+0xc6>
 8012276:	2300      	movs	r3, #0
 8012278:	e000      	b.n	801227c <osMessageGet+0xc8>
 801227a:	2340      	movs	r3, #64	; 0x40
 801227c:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 801227e:	68fb      	ldr	r3, [r7, #12]
 8012280:	461c      	mov	r4, r3
 8012282:	f107 0314 	add.w	r3, r7, #20
 8012286:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801228a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 801228e:	68f8      	ldr	r0, [r7, #12]
 8012290:	372c      	adds	r7, #44	; 0x2c
 8012292:	46bd      	mov	sp, r7
 8012294:	bd90      	pop	{r4, r7, pc}
 8012296:	bf00      	nop
 8012298:	e000ed04 	.word	0xe000ed04

0801229c <osMessageWaiting>:
* @brief  Get the number of messaged stored in a queue.
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval number of messages stored in a queue.
*/
uint32_t osMessageWaiting(osMessageQId queue_id)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	b082      	sub	sp, #8
 80122a0:	af00      	add	r7, sp, #0
 80122a2:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80122a4:	f7ff fd2f 	bl	8011d06 <inHandlerMode>
 80122a8:	4603      	mov	r3, r0
 80122aa:	2b00      	cmp	r3, #0
 80122ac:	d004      	beq.n	80122b8 <osMessageWaiting+0x1c>
    return uxQueueMessagesWaitingFromISR(queue_id);
 80122ae:	6878      	ldr	r0, [r7, #4]
 80122b0:	f000 ff48 	bl	8013144 <uxQueueMessagesWaitingFromISR>
 80122b4:	4603      	mov	r3, r0
 80122b6:	e003      	b.n	80122c0 <osMessageWaiting+0x24>
  }
  else
  {
    return uxQueueMessagesWaiting(queue_id);
 80122b8:	6878      	ldr	r0, [r7, #4]
 80122ba:	f000 ff23 	bl	8013104 <uxQueueMessagesWaiting>
 80122be:	4603      	mov	r3, r0
  }
}
 80122c0:	4618      	mov	r0, r3
 80122c2:	3708      	adds	r7, #8
 80122c4:	46bd      	mov	sp, r7
 80122c6:	bd80      	pop	{r7, pc}

080122c8 <osMessageDelete>:
* @brief Delete a Message Queue
* @param  queue_id  message queue ID obtained with \ref osMessageCreate.
* @retval  status code that indicates the execution status of the function.
*/
osStatus osMessageDelete (osMessageQId queue_id)
{
 80122c8:	b580      	push	{r7, lr}
 80122ca:	b082      	sub	sp, #8
 80122cc:	af00      	add	r7, sp, #0
 80122ce:	6078      	str	r0, [r7, #4]
  if (inHandlerMode()) {
 80122d0:	f7ff fd19 	bl	8011d06 <inHandlerMode>
 80122d4:	4603      	mov	r3, r0
 80122d6:	2b00      	cmp	r3, #0
 80122d8:	d001      	beq.n	80122de <osMessageDelete+0x16>
    return osErrorISR;
 80122da:	2382      	movs	r3, #130	; 0x82
 80122dc:	e003      	b.n	80122e6 <osMessageDelete+0x1e>
  }

  vQueueDelete(queue_id);
 80122de:	6878      	ldr	r0, [r7, #4]
 80122e0:	f000 ff50 	bl	8013184 <vQueueDelete>

  return osOK; 
 80122e4:	2300      	movs	r3, #0
}
 80122e6:	4618      	mov	r0, r3
 80122e8:	3708      	adds	r7, #8
 80122ea:	46bd      	mov	sp, r7
 80122ec:	bd80      	pop	{r7, pc}

080122ee <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80122ee:	b480      	push	{r7}
 80122f0:	b083      	sub	sp, #12
 80122f2:	af00      	add	r7, sp, #0
 80122f4:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80122f6:	687b      	ldr	r3, [r7, #4]
 80122f8:	f103 0208 	add.w	r2, r3, #8
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8012306:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012308:	687b      	ldr	r3, [r7, #4]
 801230a:	f103 0208 	add.w	r2, r3, #8
 801230e:	687b      	ldr	r3, [r7, #4]
 8012310:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8012312:	687b      	ldr	r3, [r7, #4]
 8012314:	f103 0208 	add.w	r2, r3, #8
 8012318:	687b      	ldr	r3, [r7, #4]
 801231a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801231c:	687b      	ldr	r3, [r7, #4]
 801231e:	2200      	movs	r2, #0
 8012320:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8012322:	bf00      	nop
 8012324:	370c      	adds	r7, #12
 8012326:	46bd      	mov	sp, r7
 8012328:	f85d 7b04 	ldr.w	r7, [sp], #4
 801232c:	4770      	bx	lr

0801232e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801232e:	b480      	push	{r7}
 8012330:	b083      	sub	sp, #12
 8012332:	af00      	add	r7, sp, #0
 8012334:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8012336:	687b      	ldr	r3, [r7, #4]
 8012338:	2200      	movs	r2, #0
 801233a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr

08012348 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012348:	b480      	push	{r7}
 801234a:	b085      	sub	sp, #20
 801234c:	af00      	add	r7, sp, #0
 801234e:	6078      	str	r0, [r7, #4]
 8012350:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8012352:	687b      	ldr	r3, [r7, #4]
 8012354:	685b      	ldr	r3, [r3, #4]
 8012356:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8012358:	683b      	ldr	r3, [r7, #0]
 801235a:	68fa      	ldr	r2, [r7, #12]
 801235c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801235e:	68fb      	ldr	r3, [r7, #12]
 8012360:	689a      	ldr	r2, [r3, #8]
 8012362:	683b      	ldr	r3, [r7, #0]
 8012364:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8012366:	68fb      	ldr	r3, [r7, #12]
 8012368:	689b      	ldr	r3, [r3, #8]
 801236a:	683a      	ldr	r2, [r7, #0]
 801236c:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801236e:	68fb      	ldr	r3, [r7, #12]
 8012370:	683a      	ldr	r2, [r7, #0]
 8012372:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8012374:	683b      	ldr	r3, [r7, #0]
 8012376:	687a      	ldr	r2, [r7, #4]
 8012378:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801237a:	687b      	ldr	r3, [r7, #4]
 801237c:	681b      	ldr	r3, [r3, #0]
 801237e:	1c5a      	adds	r2, r3, #1
 8012380:	687b      	ldr	r3, [r7, #4]
 8012382:	601a      	str	r2, [r3, #0]
}
 8012384:	bf00      	nop
 8012386:	3714      	adds	r7, #20
 8012388:	46bd      	mov	sp, r7
 801238a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801238e:	4770      	bx	lr

08012390 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8012390:	b480      	push	{r7}
 8012392:	b085      	sub	sp, #20
 8012394:	af00      	add	r7, sp, #0
 8012396:	6078      	str	r0, [r7, #4]
 8012398:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801239a:	683b      	ldr	r3, [r7, #0]
 801239c:	681b      	ldr	r3, [r3, #0]
 801239e:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80123a0:	68bb      	ldr	r3, [r7, #8]
 80123a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80123a6:	d103      	bne.n	80123b0 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80123a8:	687b      	ldr	r3, [r7, #4]
 80123aa:	691b      	ldr	r3, [r3, #16]
 80123ac:	60fb      	str	r3, [r7, #12]
 80123ae:	e00c      	b.n	80123ca <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	3308      	adds	r3, #8
 80123b4:	60fb      	str	r3, [r7, #12]
 80123b6:	e002      	b.n	80123be <vListInsert+0x2e>
 80123b8:	68fb      	ldr	r3, [r7, #12]
 80123ba:	685b      	ldr	r3, [r3, #4]
 80123bc:	60fb      	str	r3, [r7, #12]
 80123be:	68fb      	ldr	r3, [r7, #12]
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	68ba      	ldr	r2, [r7, #8]
 80123c6:	429a      	cmp	r2, r3
 80123c8:	d2f6      	bcs.n	80123b8 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80123ca:	68fb      	ldr	r3, [r7, #12]
 80123cc:	685a      	ldr	r2, [r3, #4]
 80123ce:	683b      	ldr	r3, [r7, #0]
 80123d0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80123d2:	683b      	ldr	r3, [r7, #0]
 80123d4:	685b      	ldr	r3, [r3, #4]
 80123d6:	683a      	ldr	r2, [r7, #0]
 80123d8:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80123da:	683b      	ldr	r3, [r7, #0]
 80123dc:	68fa      	ldr	r2, [r7, #12]
 80123de:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80123e0:	68fb      	ldr	r3, [r7, #12]
 80123e2:	683a      	ldr	r2, [r7, #0]
 80123e4:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80123e6:	683b      	ldr	r3, [r7, #0]
 80123e8:	687a      	ldr	r2, [r7, #4]
 80123ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	1c5a      	adds	r2, r3, #1
 80123f2:	687b      	ldr	r3, [r7, #4]
 80123f4:	601a      	str	r2, [r3, #0]
}
 80123f6:	bf00      	nop
 80123f8:	3714      	adds	r7, #20
 80123fa:	46bd      	mov	sp, r7
 80123fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012400:	4770      	bx	lr

08012402 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8012402:	b480      	push	{r7}
 8012404:	b085      	sub	sp, #20
 8012406:	af00      	add	r7, sp, #0
 8012408:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	691b      	ldr	r3, [r3, #16]
 801240e:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	685b      	ldr	r3, [r3, #4]
 8012414:	687a      	ldr	r2, [r7, #4]
 8012416:	6892      	ldr	r2, [r2, #8]
 8012418:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	689b      	ldr	r3, [r3, #8]
 801241e:	687a      	ldr	r2, [r7, #4]
 8012420:	6852      	ldr	r2, [r2, #4]
 8012422:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	685b      	ldr	r3, [r3, #4]
 8012428:	687a      	ldr	r2, [r7, #4]
 801242a:	429a      	cmp	r2, r3
 801242c:	d103      	bne.n	8012436 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801242e:	687b      	ldr	r3, [r7, #4]
 8012430:	689a      	ldr	r2, [r3, #8]
 8012432:	68fb      	ldr	r3, [r7, #12]
 8012434:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8012436:	687b      	ldr	r3, [r7, #4]
 8012438:	2200      	movs	r2, #0
 801243a:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	681b      	ldr	r3, [r3, #0]
 8012440:	1e5a      	subs	r2, r3, #1
 8012442:	68fb      	ldr	r3, [r7, #12]
 8012444:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	681b      	ldr	r3, [r3, #0]
}
 801244a:	4618      	mov	r0, r3
 801244c:	3714      	adds	r7, #20
 801244e:	46bd      	mov	sp, r7
 8012450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012454:	4770      	bx	lr
	...

08012458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8012458:	b580      	push	{r7, lr}
 801245a:	b084      	sub	sp, #16
 801245c:	af00      	add	r7, sp, #0
 801245e:	6078      	str	r0, [r7, #4]
 8012460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8012462:	687b      	ldr	r3, [r7, #4]
 8012464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8012466:	68fb      	ldr	r3, [r7, #12]
 8012468:	2b00      	cmp	r3, #0
 801246a:	d10c      	bne.n	8012486 <xQueueGenericReset+0x2e>
	__asm volatile
 801246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012470:	b672      	cpsid	i
 8012472:	f383 8811 	msr	BASEPRI, r3
 8012476:	f3bf 8f6f 	isb	sy
 801247a:	f3bf 8f4f 	dsb	sy
 801247e:	b662      	cpsie	i
 8012480:	60bb      	str	r3, [r7, #8]
}
 8012482:	bf00      	nop
 8012484:	e7fe      	b.n	8012484 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 8012486:	f002 fa89 	bl	801499c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801248a:	68fb      	ldr	r3, [r7, #12]
 801248c:	681a      	ldr	r2, [r3, #0]
 801248e:	68fb      	ldr	r3, [r7, #12]
 8012490:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012492:	68f9      	ldr	r1, [r7, #12]
 8012494:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8012496:	fb01 f303 	mul.w	r3, r1, r3
 801249a:	441a      	add	r2, r3
 801249c:	68fb      	ldr	r3, [r7, #12]
 801249e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80124a0:	68fb      	ldr	r3, [r7, #12]
 80124a2:	2200      	movs	r2, #0
 80124a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80124a6:	68fb      	ldr	r3, [r7, #12]
 80124a8:	681a      	ldr	r2, [r3, #0]
 80124aa:	68fb      	ldr	r3, [r7, #12]
 80124ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80124ae:	68fb      	ldr	r3, [r7, #12]
 80124b0:	681a      	ldr	r2, [r3, #0]
 80124b2:	68fb      	ldr	r3, [r7, #12]
 80124b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80124b6:	3b01      	subs	r3, #1
 80124b8:	68f9      	ldr	r1, [r7, #12]
 80124ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80124bc:	fb01 f303 	mul.w	r3, r1, r3
 80124c0:	441a      	add	r2, r3
 80124c2:	68fb      	ldr	r3, [r7, #12]
 80124c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80124c6:	68fb      	ldr	r3, [r7, #12]
 80124c8:	22ff      	movs	r2, #255	; 0xff
 80124ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80124ce:	68fb      	ldr	r3, [r7, #12]
 80124d0:	22ff      	movs	r2, #255	; 0xff
 80124d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80124d6:	683b      	ldr	r3, [r7, #0]
 80124d8:	2b00      	cmp	r3, #0
 80124da:	d114      	bne.n	8012506 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80124dc:	68fb      	ldr	r3, [r7, #12]
 80124de:	691b      	ldr	r3, [r3, #16]
 80124e0:	2b00      	cmp	r3, #0
 80124e2:	d01a      	beq.n	801251a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80124e4:	68fb      	ldr	r3, [r7, #12]
 80124e6:	3310      	adds	r3, #16
 80124e8:	4618      	mov	r0, r3
 80124ea:	f001 fd41 	bl	8013f70 <xTaskRemoveFromEventList>
 80124ee:	4603      	mov	r3, r0
 80124f0:	2b00      	cmp	r3, #0
 80124f2:	d012      	beq.n	801251a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80124f4:	4b0c      	ldr	r3, [pc, #48]	; (8012528 <xQueueGenericReset+0xd0>)
 80124f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80124fa:	601a      	str	r2, [r3, #0]
 80124fc:	f3bf 8f4f 	dsb	sy
 8012500:	f3bf 8f6f 	isb	sy
 8012504:	e009      	b.n	801251a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8012506:	68fb      	ldr	r3, [r7, #12]
 8012508:	3310      	adds	r3, #16
 801250a:	4618      	mov	r0, r3
 801250c:	f7ff feef 	bl	80122ee <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8012510:	68fb      	ldr	r3, [r7, #12]
 8012512:	3324      	adds	r3, #36	; 0x24
 8012514:	4618      	mov	r0, r3
 8012516:	f7ff feea 	bl	80122ee <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 801251a:	f002 fa73 	bl	8014a04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 801251e:	2301      	movs	r3, #1
}
 8012520:	4618      	mov	r0, r3
 8012522:	3710      	adds	r7, #16
 8012524:	46bd      	mov	sp, r7
 8012526:	bd80      	pop	{r7, pc}
 8012528:	e000ed04 	.word	0xe000ed04

0801252c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 801252c:	b580      	push	{r7, lr}
 801252e:	b08e      	sub	sp, #56	; 0x38
 8012530:	af02      	add	r7, sp, #8
 8012532:	60f8      	str	r0, [r7, #12]
 8012534:	60b9      	str	r1, [r7, #8]
 8012536:	607a      	str	r2, [r7, #4]
 8012538:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801253a:	68fb      	ldr	r3, [r7, #12]
 801253c:	2b00      	cmp	r3, #0
 801253e:	d10c      	bne.n	801255a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 8012540:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012544:	b672      	cpsid	i
 8012546:	f383 8811 	msr	BASEPRI, r3
 801254a:	f3bf 8f6f 	isb	sy
 801254e:	f3bf 8f4f 	dsb	sy
 8012552:	b662      	cpsie	i
 8012554:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8012556:	bf00      	nop
 8012558:	e7fe      	b.n	8012558 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 801255a:	683b      	ldr	r3, [r7, #0]
 801255c:	2b00      	cmp	r3, #0
 801255e:	d10c      	bne.n	801257a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 8012560:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012564:	b672      	cpsid	i
 8012566:	f383 8811 	msr	BASEPRI, r3
 801256a:	f3bf 8f6f 	isb	sy
 801256e:	f3bf 8f4f 	dsb	sy
 8012572:	b662      	cpsie	i
 8012574:	627b      	str	r3, [r7, #36]	; 0x24
}
 8012576:	bf00      	nop
 8012578:	e7fe      	b.n	8012578 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	2b00      	cmp	r3, #0
 801257e:	d002      	beq.n	8012586 <xQueueGenericCreateStatic+0x5a>
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	2b00      	cmp	r3, #0
 8012584:	d001      	beq.n	801258a <xQueueGenericCreateStatic+0x5e>
 8012586:	2301      	movs	r3, #1
 8012588:	e000      	b.n	801258c <xQueueGenericCreateStatic+0x60>
 801258a:	2300      	movs	r3, #0
 801258c:	2b00      	cmp	r3, #0
 801258e:	d10c      	bne.n	80125aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 8012590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012594:	b672      	cpsid	i
 8012596:	f383 8811 	msr	BASEPRI, r3
 801259a:	f3bf 8f6f 	isb	sy
 801259e:	f3bf 8f4f 	dsb	sy
 80125a2:	b662      	cpsie	i
 80125a4:	623b      	str	r3, [r7, #32]
}
 80125a6:	bf00      	nop
 80125a8:	e7fe      	b.n	80125a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80125aa:	687b      	ldr	r3, [r7, #4]
 80125ac:	2b00      	cmp	r3, #0
 80125ae:	d102      	bne.n	80125b6 <xQueueGenericCreateStatic+0x8a>
 80125b0:	68bb      	ldr	r3, [r7, #8]
 80125b2:	2b00      	cmp	r3, #0
 80125b4:	d101      	bne.n	80125ba <xQueueGenericCreateStatic+0x8e>
 80125b6:	2301      	movs	r3, #1
 80125b8:	e000      	b.n	80125bc <xQueueGenericCreateStatic+0x90>
 80125ba:	2300      	movs	r3, #0
 80125bc:	2b00      	cmp	r3, #0
 80125be:	d10c      	bne.n	80125da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80125c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125c4:	b672      	cpsid	i
 80125c6:	f383 8811 	msr	BASEPRI, r3
 80125ca:	f3bf 8f6f 	isb	sy
 80125ce:	f3bf 8f4f 	dsb	sy
 80125d2:	b662      	cpsie	i
 80125d4:	61fb      	str	r3, [r7, #28]
}
 80125d6:	bf00      	nop
 80125d8:	e7fe      	b.n	80125d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80125da:	2348      	movs	r3, #72	; 0x48
 80125dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80125de:	697b      	ldr	r3, [r7, #20]
 80125e0:	2b48      	cmp	r3, #72	; 0x48
 80125e2:	d00c      	beq.n	80125fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 80125e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80125e8:	b672      	cpsid	i
 80125ea:	f383 8811 	msr	BASEPRI, r3
 80125ee:	f3bf 8f6f 	isb	sy
 80125f2:	f3bf 8f4f 	dsb	sy
 80125f6:	b662      	cpsie	i
 80125f8:	61bb      	str	r3, [r7, #24]
}
 80125fa:	bf00      	nop
 80125fc:	e7fe      	b.n	80125fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80125fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8012600:	683b      	ldr	r3, [r7, #0]
 8012602:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8012604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012606:	2b00      	cmp	r3, #0
 8012608:	d00d      	beq.n	8012626 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 801260a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801260c:	2201      	movs	r2, #1
 801260e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012612:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8012616:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012618:	9300      	str	r3, [sp, #0]
 801261a:	4613      	mov	r3, r2
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	68b9      	ldr	r1, [r7, #8]
 8012620:	68f8      	ldr	r0, [r7, #12]
 8012622:	f000 f847 	bl	80126b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8012626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8012628:	4618      	mov	r0, r3
 801262a:	3730      	adds	r7, #48	; 0x30
 801262c:	46bd      	mov	sp, r7
 801262e:	bd80      	pop	{r7, pc}

08012630 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8012630:	b580      	push	{r7, lr}
 8012632:	b08a      	sub	sp, #40	; 0x28
 8012634:	af02      	add	r7, sp, #8
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	4613      	mov	r3, r2
 801263c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 801263e:	68fb      	ldr	r3, [r7, #12]
 8012640:	2b00      	cmp	r3, #0
 8012642:	d10c      	bne.n	801265e <xQueueGenericCreate+0x2e>
	__asm volatile
 8012644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012648:	b672      	cpsid	i
 801264a:	f383 8811 	msr	BASEPRI, r3
 801264e:	f3bf 8f6f 	isb	sy
 8012652:	f3bf 8f4f 	dsb	sy
 8012656:	b662      	cpsie	i
 8012658:	613b      	str	r3, [r7, #16]
}
 801265a:	bf00      	nop
 801265c:	e7fe      	b.n	801265c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 801265e:	68bb      	ldr	r3, [r7, #8]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d102      	bne.n	801266a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8012664:	2300      	movs	r3, #0
 8012666:	61fb      	str	r3, [r7, #28]
 8012668:	e004      	b.n	8012674 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801266a:	68fb      	ldr	r3, [r7, #12]
 801266c:	68ba      	ldr	r2, [r7, #8]
 801266e:	fb02 f303 	mul.w	r3, r2, r3
 8012672:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8012674:	69fb      	ldr	r3, [r7, #28]
 8012676:	3348      	adds	r3, #72	; 0x48
 8012678:	4618      	mov	r0, r3
 801267a:	f7ee fec8 	bl	800140e <pvPortMalloc>
 801267e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8012680:	69bb      	ldr	r3, [r7, #24]
 8012682:	2b00      	cmp	r3, #0
 8012684:	d011      	beq.n	80126aa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8012686:	69bb      	ldr	r3, [r7, #24]
 8012688:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 801268a:	697b      	ldr	r3, [r7, #20]
 801268c:	3348      	adds	r3, #72	; 0x48
 801268e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8012690:	69bb      	ldr	r3, [r7, #24]
 8012692:	2200      	movs	r2, #0
 8012694:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8012698:	79fa      	ldrb	r2, [r7, #7]
 801269a:	69bb      	ldr	r3, [r7, #24]
 801269c:	9300      	str	r3, [sp, #0]
 801269e:	4613      	mov	r3, r2
 80126a0:	697a      	ldr	r2, [r7, #20]
 80126a2:	68b9      	ldr	r1, [r7, #8]
 80126a4:	68f8      	ldr	r0, [r7, #12]
 80126a6:	f000 f805 	bl	80126b4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80126aa:	69bb      	ldr	r3, [r7, #24]
	}
 80126ac:	4618      	mov	r0, r3
 80126ae:	3720      	adds	r7, #32
 80126b0:	46bd      	mov	sp, r7
 80126b2:	bd80      	pop	{r7, pc}

080126b4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80126b4:	b580      	push	{r7, lr}
 80126b6:	b084      	sub	sp, #16
 80126b8:	af00      	add	r7, sp, #0
 80126ba:	60f8      	str	r0, [r7, #12]
 80126bc:	60b9      	str	r1, [r7, #8]
 80126be:	607a      	str	r2, [r7, #4]
 80126c0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	2b00      	cmp	r3, #0
 80126c6:	d103      	bne.n	80126d0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80126c8:	69bb      	ldr	r3, [r7, #24]
 80126ca:	69ba      	ldr	r2, [r7, #24]
 80126cc:	601a      	str	r2, [r3, #0]
 80126ce:	e002      	b.n	80126d6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	687a      	ldr	r2, [r7, #4]
 80126d4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80126d6:	69bb      	ldr	r3, [r7, #24]
 80126d8:	68fa      	ldr	r2, [r7, #12]
 80126da:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	68ba      	ldr	r2, [r7, #8]
 80126e0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80126e2:	2101      	movs	r1, #1
 80126e4:	69b8      	ldr	r0, [r7, #24]
 80126e6:	f7ff feb7 	bl	8012458 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80126ea:	bf00      	nop
 80126ec:	3710      	adds	r7, #16
 80126ee:	46bd      	mov	sp, r7
 80126f0:	bd80      	pop	{r7, pc}

080126f2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80126f2:	b580      	push	{r7, lr}
 80126f4:	b082      	sub	sp, #8
 80126f6:	af00      	add	r7, sp, #0
 80126f8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	2b00      	cmp	r3, #0
 80126fe:	d00e      	beq.n	801271e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8012700:	687b      	ldr	r3, [r7, #4]
 8012702:	2200      	movs	r2, #0
 8012704:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8012706:	687b      	ldr	r3, [r7, #4]
 8012708:	2200      	movs	r2, #0
 801270a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	2200      	movs	r2, #0
 8012710:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8012712:	2300      	movs	r3, #0
 8012714:	2200      	movs	r2, #0
 8012716:	2100      	movs	r1, #0
 8012718:	6878      	ldr	r0, [r7, #4]
 801271a:	f000 f837 	bl	801278c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 801271e:	bf00      	nop
 8012720:	3708      	adds	r7, #8
 8012722:	46bd      	mov	sp, r7
 8012724:	bd80      	pop	{r7, pc}

08012726 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8012726:	b580      	push	{r7, lr}
 8012728:	b086      	sub	sp, #24
 801272a:	af00      	add	r7, sp, #0
 801272c:	4603      	mov	r3, r0
 801272e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012730:	2301      	movs	r3, #1
 8012732:	617b      	str	r3, [r7, #20]
 8012734:	2300      	movs	r3, #0
 8012736:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8012738:	79fb      	ldrb	r3, [r7, #7]
 801273a:	461a      	mov	r2, r3
 801273c:	6939      	ldr	r1, [r7, #16]
 801273e:	6978      	ldr	r0, [r7, #20]
 8012740:	f7ff ff76 	bl	8012630 <xQueueGenericCreate>
 8012744:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8012746:	68f8      	ldr	r0, [r7, #12]
 8012748:	f7ff ffd3 	bl	80126f2 <prvInitialiseMutex>

		return xNewQueue;
 801274c:	68fb      	ldr	r3, [r7, #12]
	}
 801274e:	4618      	mov	r0, r3
 8012750:	3718      	adds	r7, #24
 8012752:	46bd      	mov	sp, r7
 8012754:	bd80      	pop	{r7, pc}

08012756 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8012756:	b580      	push	{r7, lr}
 8012758:	b088      	sub	sp, #32
 801275a:	af02      	add	r7, sp, #8
 801275c:	4603      	mov	r3, r0
 801275e:	6039      	str	r1, [r7, #0]
 8012760:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8012762:	2301      	movs	r3, #1
 8012764:	617b      	str	r3, [r7, #20]
 8012766:	2300      	movs	r3, #0
 8012768:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 801276a:	79fb      	ldrb	r3, [r7, #7]
 801276c:	9300      	str	r3, [sp, #0]
 801276e:	683b      	ldr	r3, [r7, #0]
 8012770:	2200      	movs	r2, #0
 8012772:	6939      	ldr	r1, [r7, #16]
 8012774:	6978      	ldr	r0, [r7, #20]
 8012776:	f7ff fed9 	bl	801252c <xQueueGenericCreateStatic>
 801277a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 801277c:	68f8      	ldr	r0, [r7, #12]
 801277e:	f7ff ffb8 	bl	80126f2 <prvInitialiseMutex>

		return xNewQueue;
 8012782:	68fb      	ldr	r3, [r7, #12]
	}
 8012784:	4618      	mov	r0, r3
 8012786:	3718      	adds	r7, #24
 8012788:	46bd      	mov	sp, r7
 801278a:	bd80      	pop	{r7, pc}

0801278c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 801278c:	b580      	push	{r7, lr}
 801278e:	b08e      	sub	sp, #56	; 0x38
 8012790:	af00      	add	r7, sp, #0
 8012792:	60f8      	str	r0, [r7, #12]
 8012794:	60b9      	str	r1, [r7, #8]
 8012796:	607a      	str	r2, [r7, #4]
 8012798:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 801279a:	2300      	movs	r3, #0
 801279c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80127a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d10c      	bne.n	80127c2 <xQueueGenericSend+0x36>
	__asm volatile
 80127a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127ac:	b672      	cpsid	i
 80127ae:	f383 8811 	msr	BASEPRI, r3
 80127b2:	f3bf 8f6f 	isb	sy
 80127b6:	f3bf 8f4f 	dsb	sy
 80127ba:	b662      	cpsie	i
 80127bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80127be:	bf00      	nop
 80127c0:	e7fe      	b.n	80127c0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80127c2:	68bb      	ldr	r3, [r7, #8]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d103      	bne.n	80127d0 <xQueueGenericSend+0x44>
 80127c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80127cc:	2b00      	cmp	r3, #0
 80127ce:	d101      	bne.n	80127d4 <xQueueGenericSend+0x48>
 80127d0:	2301      	movs	r3, #1
 80127d2:	e000      	b.n	80127d6 <xQueueGenericSend+0x4a>
 80127d4:	2300      	movs	r3, #0
 80127d6:	2b00      	cmp	r3, #0
 80127d8:	d10c      	bne.n	80127f4 <xQueueGenericSend+0x68>
	__asm volatile
 80127da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80127de:	b672      	cpsid	i
 80127e0:	f383 8811 	msr	BASEPRI, r3
 80127e4:	f3bf 8f6f 	isb	sy
 80127e8:	f3bf 8f4f 	dsb	sy
 80127ec:	b662      	cpsie	i
 80127ee:	627b      	str	r3, [r7, #36]	; 0x24
}
 80127f0:	bf00      	nop
 80127f2:	e7fe      	b.n	80127f2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80127f4:	683b      	ldr	r3, [r7, #0]
 80127f6:	2b02      	cmp	r3, #2
 80127f8:	d103      	bne.n	8012802 <xQueueGenericSend+0x76>
 80127fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80127fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80127fe:	2b01      	cmp	r3, #1
 8012800:	d101      	bne.n	8012806 <xQueueGenericSend+0x7a>
 8012802:	2301      	movs	r3, #1
 8012804:	e000      	b.n	8012808 <xQueueGenericSend+0x7c>
 8012806:	2300      	movs	r3, #0
 8012808:	2b00      	cmp	r3, #0
 801280a:	d10c      	bne.n	8012826 <xQueueGenericSend+0x9a>
	__asm volatile
 801280c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012810:	b672      	cpsid	i
 8012812:	f383 8811 	msr	BASEPRI, r3
 8012816:	f3bf 8f6f 	isb	sy
 801281a:	f3bf 8f4f 	dsb	sy
 801281e:	b662      	cpsie	i
 8012820:	623b      	str	r3, [r7, #32]
}
 8012822:	bf00      	nop
 8012824:	e7fe      	b.n	8012824 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012826:	f001 fd6b 	bl	8014300 <xTaskGetSchedulerState>
 801282a:	4603      	mov	r3, r0
 801282c:	2b00      	cmp	r3, #0
 801282e:	d102      	bne.n	8012836 <xQueueGenericSend+0xaa>
 8012830:	687b      	ldr	r3, [r7, #4]
 8012832:	2b00      	cmp	r3, #0
 8012834:	d101      	bne.n	801283a <xQueueGenericSend+0xae>
 8012836:	2301      	movs	r3, #1
 8012838:	e000      	b.n	801283c <xQueueGenericSend+0xb0>
 801283a:	2300      	movs	r3, #0
 801283c:	2b00      	cmp	r3, #0
 801283e:	d10c      	bne.n	801285a <xQueueGenericSend+0xce>
	__asm volatile
 8012840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012844:	b672      	cpsid	i
 8012846:	f383 8811 	msr	BASEPRI, r3
 801284a:	f3bf 8f6f 	isb	sy
 801284e:	f3bf 8f4f 	dsb	sy
 8012852:	b662      	cpsie	i
 8012854:	61fb      	str	r3, [r7, #28]
}
 8012856:	bf00      	nop
 8012858:	e7fe      	b.n	8012858 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801285a:	f002 f89f 	bl	801499c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 801285e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012864:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012866:	429a      	cmp	r2, r3
 8012868:	d302      	bcc.n	8012870 <xQueueGenericSend+0xe4>
 801286a:	683b      	ldr	r3, [r7, #0]
 801286c:	2b02      	cmp	r3, #2
 801286e:	d129      	bne.n	80128c4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012870:	683a      	ldr	r2, [r7, #0]
 8012872:	68b9      	ldr	r1, [r7, #8]
 8012874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012876:	f000 fcc2 	bl	80131fe <prvCopyDataToQueue>
 801287a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801287c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801287e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012880:	2b00      	cmp	r3, #0
 8012882:	d010      	beq.n	80128a6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012886:	3324      	adds	r3, #36	; 0x24
 8012888:	4618      	mov	r0, r3
 801288a:	f001 fb71 	bl	8013f70 <xTaskRemoveFromEventList>
 801288e:	4603      	mov	r3, r0
 8012890:	2b00      	cmp	r3, #0
 8012892:	d013      	beq.n	80128bc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8012894:	4b3f      	ldr	r3, [pc, #252]	; (8012994 <xQueueGenericSend+0x208>)
 8012896:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801289a:	601a      	str	r2, [r3, #0]
 801289c:	f3bf 8f4f 	dsb	sy
 80128a0:	f3bf 8f6f 	isb	sy
 80128a4:	e00a      	b.n	80128bc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80128a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80128a8:	2b00      	cmp	r3, #0
 80128aa:	d007      	beq.n	80128bc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80128ac:	4b39      	ldr	r3, [pc, #228]	; (8012994 <xQueueGenericSend+0x208>)
 80128ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80128b2:	601a      	str	r2, [r3, #0]
 80128b4:	f3bf 8f4f 	dsb	sy
 80128b8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80128bc:	f002 f8a2 	bl	8014a04 <vPortExitCritical>
				return pdPASS;
 80128c0:	2301      	movs	r3, #1
 80128c2:	e063      	b.n	801298c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d103      	bne.n	80128d2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80128ca:	f002 f89b 	bl	8014a04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80128ce:	2300      	movs	r3, #0
 80128d0:	e05c      	b.n	801298c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80128d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d106      	bne.n	80128e6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80128d8:	f107 0314 	add.w	r3, r7, #20
 80128dc:	4618      	mov	r0, r3
 80128de:	f001 fbab 	bl	8014038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80128e2:	2301      	movs	r3, #1
 80128e4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80128e6:	f002 f88d 	bl	8014a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80128ea:	f001 f92f 	bl	8013b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80128ee:	f002 f855 	bl	801499c <vPortEnterCritical>
 80128f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128f4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80128f8:	b25b      	sxtb	r3, r3
 80128fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80128fe:	d103      	bne.n	8012908 <xQueueGenericSend+0x17c>
 8012900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012902:	2200      	movs	r2, #0
 8012904:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801290a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 801290e:	b25b      	sxtb	r3, r3
 8012910:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012914:	d103      	bne.n	801291e <xQueueGenericSend+0x192>
 8012916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012918:	2200      	movs	r2, #0
 801291a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 801291e:	f002 f871 	bl	8014a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012922:	1d3a      	adds	r2, r7, #4
 8012924:	f107 0314 	add.w	r3, r7, #20
 8012928:	4611      	mov	r1, r2
 801292a:	4618      	mov	r0, r3
 801292c:	f001 fb9a 	bl	8014064 <xTaskCheckForTimeOut>
 8012930:	4603      	mov	r3, r0
 8012932:	2b00      	cmp	r3, #0
 8012934:	d124      	bne.n	8012980 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8012936:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012938:	f000 fd59 	bl	80133ee <prvIsQueueFull>
 801293c:	4603      	mov	r3, r0
 801293e:	2b00      	cmp	r3, #0
 8012940:	d018      	beq.n	8012974 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8012942:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012944:	3310      	adds	r3, #16
 8012946:	687a      	ldr	r2, [r7, #4]
 8012948:	4611      	mov	r1, r2
 801294a:	4618      	mov	r0, r3
 801294c:	f001 faea 	bl	8013f24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8012950:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012952:	f000 fce4 	bl	801331e <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8012956:	f001 f907 	bl	8013b68 <xTaskResumeAll>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	f47f af7c 	bne.w	801285a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 8012962:	4b0c      	ldr	r3, [pc, #48]	; (8012994 <xQueueGenericSend+0x208>)
 8012964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012968:	601a      	str	r2, [r3, #0]
 801296a:	f3bf 8f4f 	dsb	sy
 801296e:	f3bf 8f6f 	isb	sy
 8012972:	e772      	b.n	801285a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8012974:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012976:	f000 fcd2 	bl	801331e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 801297a:	f001 f8f5 	bl	8013b68 <xTaskResumeAll>
 801297e:	e76c      	b.n	801285a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8012980:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012982:	f000 fccc 	bl	801331e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012986:	f001 f8ef 	bl	8013b68 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 801298a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 801298c:	4618      	mov	r0, r3
 801298e:	3738      	adds	r7, #56	; 0x38
 8012990:	46bd      	mov	sp, r7
 8012992:	bd80      	pop	{r7, pc}
 8012994:	e000ed04 	.word	0xe000ed04

08012998 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8012998:	b580      	push	{r7, lr}
 801299a:	b08e      	sub	sp, #56	; 0x38
 801299c:	af00      	add	r7, sp, #0
 801299e:	60f8      	str	r0, [r7, #12]
 80129a0:	60b9      	str	r1, [r7, #8]
 80129a2:	607a      	str	r2, [r7, #4]
 80129a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80129a6:	68fb      	ldr	r3, [r7, #12]
 80129a8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80129aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ac:	2b00      	cmp	r3, #0
 80129ae:	d10c      	bne.n	80129ca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80129b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129b4:	b672      	cpsid	i
 80129b6:	f383 8811 	msr	BASEPRI, r3
 80129ba:	f3bf 8f6f 	isb	sy
 80129be:	f3bf 8f4f 	dsb	sy
 80129c2:	b662      	cpsie	i
 80129c4:	627b      	str	r3, [r7, #36]	; 0x24
}
 80129c6:	bf00      	nop
 80129c8:	e7fe      	b.n	80129c8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	2b00      	cmp	r3, #0
 80129ce:	d103      	bne.n	80129d8 <xQueueGenericSendFromISR+0x40>
 80129d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80129d4:	2b00      	cmp	r3, #0
 80129d6:	d101      	bne.n	80129dc <xQueueGenericSendFromISR+0x44>
 80129d8:	2301      	movs	r3, #1
 80129da:	e000      	b.n	80129de <xQueueGenericSendFromISR+0x46>
 80129dc:	2300      	movs	r3, #0
 80129de:	2b00      	cmp	r3, #0
 80129e0:	d10c      	bne.n	80129fc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80129e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80129e6:	b672      	cpsid	i
 80129e8:	f383 8811 	msr	BASEPRI, r3
 80129ec:	f3bf 8f6f 	isb	sy
 80129f0:	f3bf 8f4f 	dsb	sy
 80129f4:	b662      	cpsie	i
 80129f6:	623b      	str	r3, [r7, #32]
}
 80129f8:	bf00      	nop
 80129fa:	e7fe      	b.n	80129fa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80129fc:	683b      	ldr	r3, [r7, #0]
 80129fe:	2b02      	cmp	r3, #2
 8012a00:	d103      	bne.n	8012a0a <xQueueGenericSendFromISR+0x72>
 8012a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a06:	2b01      	cmp	r3, #1
 8012a08:	d101      	bne.n	8012a0e <xQueueGenericSendFromISR+0x76>
 8012a0a:	2301      	movs	r3, #1
 8012a0c:	e000      	b.n	8012a10 <xQueueGenericSendFromISR+0x78>
 8012a0e:	2300      	movs	r3, #0
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d10c      	bne.n	8012a2e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8012a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a18:	b672      	cpsid	i
 8012a1a:	f383 8811 	msr	BASEPRI, r3
 8012a1e:	f3bf 8f6f 	isb	sy
 8012a22:	f3bf 8f4f 	dsb	sy
 8012a26:	b662      	cpsie	i
 8012a28:	61fb      	str	r3, [r7, #28]
}
 8012a2a:	bf00      	nop
 8012a2c:	e7fe      	b.n	8012a2c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012a2e:	f002 f89d 	bl	8014b6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8012a32:	f3ef 8211 	mrs	r2, BASEPRI
 8012a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012a3a:	b672      	cpsid	i
 8012a3c:	f383 8811 	msr	BASEPRI, r3
 8012a40:	f3bf 8f6f 	isb	sy
 8012a44:	f3bf 8f4f 	dsb	sy
 8012a48:	b662      	cpsie	i
 8012a4a:	61ba      	str	r2, [r7, #24]
 8012a4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8012a4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012a50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8012a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8012a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012a5a:	429a      	cmp	r2, r3
 8012a5c:	d302      	bcc.n	8012a64 <xQueueGenericSendFromISR+0xcc>
 8012a5e:	683b      	ldr	r3, [r7, #0]
 8012a60:	2b02      	cmp	r3, #2
 8012a62:	d12c      	bne.n	8012abe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8012a6e:	683a      	ldr	r2, [r7, #0]
 8012a70:	68b9      	ldr	r1, [r7, #8]
 8012a72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012a74:	f000 fbc3 	bl	80131fe <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012a78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8012a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012a80:	d112      	bne.n	8012aa8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012a82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d016      	beq.n	8012ab8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012a8c:	3324      	adds	r3, #36	; 0x24
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f001 fa6e 	bl	8013f70 <xTaskRemoveFromEventList>
 8012a94:	4603      	mov	r3, r0
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d00e      	beq.n	8012ab8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012a9a:	687b      	ldr	r3, [r7, #4]
 8012a9c:	2b00      	cmp	r3, #0
 8012a9e:	d00b      	beq.n	8012ab8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	2201      	movs	r2, #1
 8012aa4:	601a      	str	r2, [r3, #0]
 8012aa6:	e007      	b.n	8012ab8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012aa8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8012aac:	3301      	adds	r3, #1
 8012aae:	b2db      	uxtb	r3, r3
 8012ab0:	b25a      	sxtb	r2, r3
 8012ab2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ab4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012ab8:	2301      	movs	r3, #1
 8012aba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8012abc:	e001      	b.n	8012ac2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012abe:	2300      	movs	r3, #0
 8012ac0:	637b      	str	r3, [r7, #52]	; 0x34
 8012ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ac4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8012ac6:	693b      	ldr	r3, [r7, #16]
 8012ac8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8012acc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012ace:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	3738      	adds	r7, #56	; 0x38
 8012ad4:	46bd      	mov	sp, r7
 8012ad6:	bd80      	pop	{r7, pc}

08012ad8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ad8:	b580      	push	{r7, lr}
 8012ada:	b08e      	sub	sp, #56	; 0x38
 8012adc:	af00      	add	r7, sp, #0
 8012ade:	6078      	str	r0, [r7, #4]
 8012ae0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8012ae2:	687b      	ldr	r3, [r7, #4]
 8012ae4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8012ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d10c      	bne.n	8012b06 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8012aec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012af0:	b672      	cpsid	i
 8012af2:	f383 8811 	msr	BASEPRI, r3
 8012af6:	f3bf 8f6f 	isb	sy
 8012afa:	f3bf 8f4f 	dsb	sy
 8012afe:	b662      	cpsie	i
 8012b00:	623b      	str	r3, [r7, #32]
}
 8012b02:	bf00      	nop
 8012b04:	e7fe      	b.n	8012b04 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012b0a:	2b00      	cmp	r3, #0
 8012b0c:	d00c      	beq.n	8012b28 <xQueueGiveFromISR+0x50>
	__asm volatile
 8012b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b12:	b672      	cpsid	i
 8012b14:	f383 8811 	msr	BASEPRI, r3
 8012b18:	f3bf 8f6f 	isb	sy
 8012b1c:	f3bf 8f4f 	dsb	sy
 8012b20:	b662      	cpsie	i
 8012b22:	61fb      	str	r3, [r7, #28]
}
 8012b24:	bf00      	nop
 8012b26:	e7fe      	b.n	8012b26 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8012b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2a:	681b      	ldr	r3, [r3, #0]
 8012b2c:	2b00      	cmp	r3, #0
 8012b2e:	d103      	bne.n	8012b38 <xQueueGiveFromISR+0x60>
 8012b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b32:	689b      	ldr	r3, [r3, #8]
 8012b34:	2b00      	cmp	r3, #0
 8012b36:	d101      	bne.n	8012b3c <xQueueGiveFromISR+0x64>
 8012b38:	2301      	movs	r3, #1
 8012b3a:	e000      	b.n	8012b3e <xQueueGiveFromISR+0x66>
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d10c      	bne.n	8012b5c <xQueueGiveFromISR+0x84>
	__asm volatile
 8012b42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b46:	b672      	cpsid	i
 8012b48:	f383 8811 	msr	BASEPRI, r3
 8012b4c:	f3bf 8f6f 	isb	sy
 8012b50:	f3bf 8f4f 	dsb	sy
 8012b54:	b662      	cpsie	i
 8012b56:	61bb      	str	r3, [r7, #24]
}
 8012b58:	bf00      	nop
 8012b5a:	e7fe      	b.n	8012b5a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8012b5c:	f002 f806 	bl	8014b6c <vPortValidateInterruptPriority>
	__asm volatile
 8012b60:	f3ef 8211 	mrs	r2, BASEPRI
 8012b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012b68:	b672      	cpsid	i
 8012b6a:	f383 8811 	msr	BASEPRI, r3
 8012b6e:	f3bf 8f6f 	isb	sy
 8012b72:	f3bf 8f4f 	dsb	sy
 8012b76:	b662      	cpsie	i
 8012b78:	617a      	str	r2, [r7, #20]
 8012b7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8012b7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8012b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012b80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012b84:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8012b86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8012b8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d22b      	bcs.n	8012be8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8012b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012b96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8012b9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b9c:	1c5a      	adds	r2, r3, #1
 8012b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ba0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8012ba2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8012ba6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012baa:	d112      	bne.n	8012bd2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8012bac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	d016      	beq.n	8012be2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8012bb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bb6:	3324      	adds	r3, #36	; 0x24
 8012bb8:	4618      	mov	r0, r3
 8012bba:	f001 f9d9 	bl	8013f70 <xTaskRemoveFromEventList>
 8012bbe:	4603      	mov	r3, r0
 8012bc0:	2b00      	cmp	r3, #0
 8012bc2:	d00e      	beq.n	8012be2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8012bc4:	683b      	ldr	r3, [r7, #0]
 8012bc6:	2b00      	cmp	r3, #0
 8012bc8:	d00b      	beq.n	8012be2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8012bca:	683b      	ldr	r3, [r7, #0]
 8012bcc:	2201      	movs	r2, #1
 8012bce:	601a      	str	r2, [r3, #0]
 8012bd0:	e007      	b.n	8012be2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8012bd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012bd6:	3301      	adds	r3, #1
 8012bd8:	b2db      	uxtb	r3, r3
 8012bda:	b25a      	sxtb	r2, r3
 8012bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012bde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8012be2:	2301      	movs	r3, #1
 8012be4:	637b      	str	r3, [r7, #52]	; 0x34
 8012be6:	e001      	b.n	8012bec <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8012be8:	2300      	movs	r3, #0
 8012bea:	637b      	str	r3, [r7, #52]	; 0x34
 8012bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012bee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8012bf0:	68fb      	ldr	r3, [r7, #12]
 8012bf2:	f383 8811 	msr	BASEPRI, r3
}
 8012bf6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8012bf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	3738      	adds	r7, #56	; 0x38
 8012bfe:	46bd      	mov	sp, r7
 8012c00:	bd80      	pop	{r7, pc}
	...

08012c04 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8012c04:	b580      	push	{r7, lr}
 8012c06:	b08c      	sub	sp, #48	; 0x30
 8012c08:	af00      	add	r7, sp, #0
 8012c0a:	60f8      	str	r0, [r7, #12]
 8012c0c:	60b9      	str	r1, [r7, #8]
 8012c0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8012c10:	2300      	movs	r3, #0
 8012c12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012c14:	68fb      	ldr	r3, [r7, #12]
 8012c16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012c18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d10c      	bne.n	8012c38 <xQueueReceive+0x34>
	__asm volatile
 8012c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c22:	b672      	cpsid	i
 8012c24:	f383 8811 	msr	BASEPRI, r3
 8012c28:	f3bf 8f6f 	isb	sy
 8012c2c:	f3bf 8f4f 	dsb	sy
 8012c30:	b662      	cpsie	i
 8012c32:	623b      	str	r3, [r7, #32]
}
 8012c34:	bf00      	nop
 8012c36:	e7fe      	b.n	8012c36 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8012c38:	68bb      	ldr	r3, [r7, #8]
 8012c3a:	2b00      	cmp	r3, #0
 8012c3c:	d103      	bne.n	8012c46 <xQueueReceive+0x42>
 8012c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	d101      	bne.n	8012c4a <xQueueReceive+0x46>
 8012c46:	2301      	movs	r3, #1
 8012c48:	e000      	b.n	8012c4c <xQueueReceive+0x48>
 8012c4a:	2300      	movs	r3, #0
 8012c4c:	2b00      	cmp	r3, #0
 8012c4e:	d10c      	bne.n	8012c6a <xQueueReceive+0x66>
	__asm volatile
 8012c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c54:	b672      	cpsid	i
 8012c56:	f383 8811 	msr	BASEPRI, r3
 8012c5a:	f3bf 8f6f 	isb	sy
 8012c5e:	f3bf 8f4f 	dsb	sy
 8012c62:	b662      	cpsie	i
 8012c64:	61fb      	str	r3, [r7, #28]
}
 8012c66:	bf00      	nop
 8012c68:	e7fe      	b.n	8012c68 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012c6a:	f001 fb49 	bl	8014300 <xTaskGetSchedulerState>
 8012c6e:	4603      	mov	r3, r0
 8012c70:	2b00      	cmp	r3, #0
 8012c72:	d102      	bne.n	8012c7a <xQueueReceive+0x76>
 8012c74:	687b      	ldr	r3, [r7, #4]
 8012c76:	2b00      	cmp	r3, #0
 8012c78:	d101      	bne.n	8012c7e <xQueueReceive+0x7a>
 8012c7a:	2301      	movs	r3, #1
 8012c7c:	e000      	b.n	8012c80 <xQueueReceive+0x7c>
 8012c7e:	2300      	movs	r3, #0
 8012c80:	2b00      	cmp	r3, #0
 8012c82:	d10c      	bne.n	8012c9e <xQueueReceive+0x9a>
	__asm volatile
 8012c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012c88:	b672      	cpsid	i
 8012c8a:	f383 8811 	msr	BASEPRI, r3
 8012c8e:	f3bf 8f6f 	isb	sy
 8012c92:	f3bf 8f4f 	dsb	sy
 8012c96:	b662      	cpsie	i
 8012c98:	61bb      	str	r3, [r7, #24]
}
 8012c9a:	bf00      	nop
 8012c9c:	e7fe      	b.n	8012c9c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012c9e:	f001 fe7d 	bl	801499c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8012ca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ca6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8012ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	d01f      	beq.n	8012cee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8012cae:	68b9      	ldr	r1, [r7, #8]
 8012cb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012cb2:	f000 fb0e 	bl	80132d2 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8012cb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb8:	1e5a      	subs	r2, r3, #1
 8012cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cbc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc0:	691b      	ldr	r3, [r3, #16]
 8012cc2:	2b00      	cmp	r3, #0
 8012cc4:	d00f      	beq.n	8012ce6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012cc8:	3310      	adds	r3, #16
 8012cca:	4618      	mov	r0, r3
 8012ccc:	f001 f950 	bl	8013f70 <xTaskRemoveFromEventList>
 8012cd0:	4603      	mov	r3, r0
 8012cd2:	2b00      	cmp	r3, #0
 8012cd4:	d007      	beq.n	8012ce6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012cd6:	4b3d      	ldr	r3, [pc, #244]	; (8012dcc <xQueueReceive+0x1c8>)
 8012cd8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012cdc:	601a      	str	r2, [r3, #0]
 8012cde:	f3bf 8f4f 	dsb	sy
 8012ce2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012ce6:	f001 fe8d 	bl	8014a04 <vPortExitCritical>
				return pdPASS;
 8012cea:	2301      	movs	r3, #1
 8012cec:	e069      	b.n	8012dc2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012cee:	687b      	ldr	r3, [r7, #4]
 8012cf0:	2b00      	cmp	r3, #0
 8012cf2:	d103      	bne.n	8012cfc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8012cf4:	f001 fe86 	bl	8014a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012cf8:	2300      	movs	r3, #0
 8012cfa:	e062      	b.n	8012dc2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfe:	2b00      	cmp	r3, #0
 8012d00:	d106      	bne.n	8012d10 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012d02:	f107 0310 	add.w	r3, r7, #16
 8012d06:	4618      	mov	r0, r3
 8012d08:	f001 f996 	bl	8014038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012d0c:	2301      	movs	r3, #1
 8012d0e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012d10:	f001 fe78 	bl	8014a04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012d14:	f000 ff1a 	bl	8013b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012d18:	f001 fe40 	bl	801499c <vPortEnterCritical>
 8012d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012d22:	b25b      	sxtb	r3, r3
 8012d24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d28:	d103      	bne.n	8012d32 <xQueueReceive+0x12e>
 8012d2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d2c:	2200      	movs	r2, #0
 8012d2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012d32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012d38:	b25b      	sxtb	r3, r3
 8012d3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012d3e:	d103      	bne.n	8012d48 <xQueueReceive+0x144>
 8012d40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d42:	2200      	movs	r2, #0
 8012d44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012d48:	f001 fe5c 	bl	8014a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012d4c:	1d3a      	adds	r2, r7, #4
 8012d4e:	f107 0310 	add.w	r3, r7, #16
 8012d52:	4611      	mov	r1, r2
 8012d54:	4618      	mov	r0, r3
 8012d56:	f001 f985 	bl	8014064 <xTaskCheckForTimeOut>
 8012d5a:	4603      	mov	r3, r0
 8012d5c:	2b00      	cmp	r3, #0
 8012d5e:	d123      	bne.n	8012da8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012d60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d62:	f000 fb2e 	bl	80133c2 <prvIsQueueEmpty>
 8012d66:	4603      	mov	r3, r0
 8012d68:	2b00      	cmp	r3, #0
 8012d6a:	d017      	beq.n	8012d9c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d6e:	3324      	adds	r3, #36	; 0x24
 8012d70:	687a      	ldr	r2, [r7, #4]
 8012d72:	4611      	mov	r1, r2
 8012d74:	4618      	mov	r0, r3
 8012d76:	f001 f8d5 	bl	8013f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012d7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d7c:	f000 facf 	bl	801331e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012d80:	f000 fef2 	bl	8013b68 <xTaskResumeAll>
 8012d84:	4603      	mov	r3, r0
 8012d86:	2b00      	cmp	r3, #0
 8012d88:	d189      	bne.n	8012c9e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 8012d8a:	4b10      	ldr	r3, [pc, #64]	; (8012dcc <xQueueReceive+0x1c8>)
 8012d8c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012d90:	601a      	str	r2, [r3, #0]
 8012d92:	f3bf 8f4f 	dsb	sy
 8012d96:	f3bf 8f6f 	isb	sy
 8012d9a:	e780      	b.n	8012c9e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8012d9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012d9e:	f000 fabe 	bl	801331e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012da2:	f000 fee1 	bl	8013b68 <xTaskResumeAll>
 8012da6:	e77a      	b.n	8012c9e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8012da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012daa:	f000 fab8 	bl	801331e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012dae:	f000 fedb 	bl	8013b68 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012db2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8012db4:	f000 fb05 	bl	80133c2 <prvIsQueueEmpty>
 8012db8:	4603      	mov	r3, r0
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f43f af6f 	beq.w	8012c9e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012dc0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012dc2:	4618      	mov	r0, r3
 8012dc4:	3730      	adds	r7, #48	; 0x30
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	bd80      	pop	{r7, pc}
 8012dca:	bf00      	nop
 8012dcc:	e000ed04 	.word	0xe000ed04

08012dd0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8012dd0:	b580      	push	{r7, lr}
 8012dd2:	b08e      	sub	sp, #56	; 0x38
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	6078      	str	r0, [r7, #4]
 8012dd8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8012dda:	2300      	movs	r3, #0
 8012ddc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8012dde:	687b      	ldr	r3, [r7, #4]
 8012de0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8012de2:	2300      	movs	r3, #0
 8012de4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8012de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d10c      	bne.n	8012e06 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8012dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012df0:	b672      	cpsid	i
 8012df2:	f383 8811 	msr	BASEPRI, r3
 8012df6:	f3bf 8f6f 	isb	sy
 8012dfa:	f3bf 8f4f 	dsb	sy
 8012dfe:	b662      	cpsie	i
 8012e00:	623b      	str	r3, [r7, #32]
}
 8012e02:	bf00      	nop
 8012e04:	e7fe      	b.n	8012e04 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8012e06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d00c      	beq.n	8012e28 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8012e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e12:	b672      	cpsid	i
 8012e14:	f383 8811 	msr	BASEPRI, r3
 8012e18:	f3bf 8f6f 	isb	sy
 8012e1c:	f3bf 8f4f 	dsb	sy
 8012e20:	b662      	cpsie	i
 8012e22:	61fb      	str	r3, [r7, #28]
}
 8012e24:	bf00      	nop
 8012e26:	e7fe      	b.n	8012e26 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8012e28:	f001 fa6a 	bl	8014300 <xTaskGetSchedulerState>
 8012e2c:	4603      	mov	r3, r0
 8012e2e:	2b00      	cmp	r3, #0
 8012e30:	d102      	bne.n	8012e38 <xQueueSemaphoreTake+0x68>
 8012e32:	683b      	ldr	r3, [r7, #0]
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d101      	bne.n	8012e3c <xQueueSemaphoreTake+0x6c>
 8012e38:	2301      	movs	r3, #1
 8012e3a:	e000      	b.n	8012e3e <xQueueSemaphoreTake+0x6e>
 8012e3c:	2300      	movs	r3, #0
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d10c      	bne.n	8012e5c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8012e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012e46:	b672      	cpsid	i
 8012e48:	f383 8811 	msr	BASEPRI, r3
 8012e4c:	f3bf 8f6f 	isb	sy
 8012e50:	f3bf 8f4f 	dsb	sy
 8012e54:	b662      	cpsie	i
 8012e56:	61bb      	str	r3, [r7, #24]
}
 8012e58:	bf00      	nop
 8012e5a:	e7fe      	b.n	8012e5a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8012e5c:	f001 fd9e 	bl	801499c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8012e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012e64:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8012e66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d024      	beq.n	8012eb6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8012e6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012e6e:	1e5a      	subs	r2, r3, #1
 8012e70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e72:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d104      	bne.n	8012e86 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8012e7c:	f001 fc06 	bl	801468c <pvTaskIncrementMutexHeldCount>
 8012e80:	4602      	mov	r2, r0
 8012e82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e84:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8012e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e88:	691b      	ldr	r3, [r3, #16]
 8012e8a:	2b00      	cmp	r3, #0
 8012e8c:	d00f      	beq.n	8012eae <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8012e8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012e90:	3310      	adds	r3, #16
 8012e92:	4618      	mov	r0, r3
 8012e94:	f001 f86c 	bl	8013f70 <xTaskRemoveFromEventList>
 8012e98:	4603      	mov	r3, r0
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d007      	beq.n	8012eae <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8012e9e:	4b55      	ldr	r3, [pc, #340]	; (8012ff4 <xQueueSemaphoreTake+0x224>)
 8012ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012ea4:	601a      	str	r2, [r3, #0]
 8012ea6:	f3bf 8f4f 	dsb	sy
 8012eaa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8012eae:	f001 fda9 	bl	8014a04 <vPortExitCritical>
				return pdPASS;
 8012eb2:	2301      	movs	r3, #1
 8012eb4:	e099      	b.n	8012fea <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8012eb6:	683b      	ldr	r3, [r7, #0]
 8012eb8:	2b00      	cmp	r3, #0
 8012eba:	d113      	bne.n	8012ee4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8012ebc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d00c      	beq.n	8012edc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8012ec2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8012ec6:	b672      	cpsid	i
 8012ec8:	f383 8811 	msr	BASEPRI, r3
 8012ecc:	f3bf 8f6f 	isb	sy
 8012ed0:	f3bf 8f4f 	dsb	sy
 8012ed4:	b662      	cpsie	i
 8012ed6:	617b      	str	r3, [r7, #20]
}
 8012ed8:	bf00      	nop
 8012eda:	e7fe      	b.n	8012eda <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8012edc:	f001 fd92 	bl	8014a04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8012ee0:	2300      	movs	r3, #0
 8012ee2:	e082      	b.n	8012fea <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8012ee4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d106      	bne.n	8012ef8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8012eea:	f107 030c 	add.w	r3, r7, #12
 8012eee:	4618      	mov	r0, r3
 8012ef0:	f001 f8a2 	bl	8014038 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8012ef4:	2301      	movs	r3, #1
 8012ef6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8012ef8:	f001 fd84 	bl	8014a04 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8012efc:	f000 fe26 	bl	8013b4c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8012f00:	f001 fd4c 	bl	801499c <vPortEnterCritical>
 8012f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f06:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8012f0a:	b25b      	sxtb	r3, r3
 8012f0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f10:	d103      	bne.n	8012f1a <xQueueSemaphoreTake+0x14a>
 8012f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f14:	2200      	movs	r2, #0
 8012f16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8012f1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f1c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8012f20:	b25b      	sxtb	r3, r3
 8012f22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8012f26:	d103      	bne.n	8012f30 <xQueueSemaphoreTake+0x160>
 8012f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8012f30:	f001 fd68 	bl	8014a04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8012f34:	463a      	mov	r2, r7
 8012f36:	f107 030c 	add.w	r3, r7, #12
 8012f3a:	4611      	mov	r1, r2
 8012f3c:	4618      	mov	r0, r3
 8012f3e:	f001 f891 	bl	8014064 <xTaskCheckForTimeOut>
 8012f42:	4603      	mov	r3, r0
 8012f44:	2b00      	cmp	r3, #0
 8012f46:	d132      	bne.n	8012fae <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012f48:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f4a:	f000 fa3a 	bl	80133c2 <prvIsQueueEmpty>
 8012f4e:	4603      	mov	r3, r0
 8012f50:	2b00      	cmp	r3, #0
 8012f52:	d026      	beq.n	8012fa2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8012f54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f56:	681b      	ldr	r3, [r3, #0]
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	d109      	bne.n	8012f70 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8012f5c:	f001 fd1e 	bl	801499c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8012f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f62:	689b      	ldr	r3, [r3, #8]
 8012f64:	4618      	mov	r0, r3
 8012f66:	f001 f9e9 	bl	801433c <xTaskPriorityInherit>
 8012f6a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8012f6c:	f001 fd4a 	bl	8014a04 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8012f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012f72:	3324      	adds	r3, #36	; 0x24
 8012f74:	683a      	ldr	r2, [r7, #0]
 8012f76:	4611      	mov	r1, r2
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f000 ffd3 	bl	8013f24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8012f7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012f80:	f000 f9cd 	bl	801331e <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8012f84:	f000 fdf0 	bl	8013b68 <xTaskResumeAll>
 8012f88:	4603      	mov	r3, r0
 8012f8a:	2b00      	cmp	r3, #0
 8012f8c:	f47f af66 	bne.w	8012e5c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8012f90:	4b18      	ldr	r3, [pc, #96]	; (8012ff4 <xQueueSemaphoreTake+0x224>)
 8012f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8012f96:	601a      	str	r2, [r3, #0]
 8012f98:	f3bf 8f4f 	dsb	sy
 8012f9c:	f3bf 8f6f 	isb	sy
 8012fa0:	e75c      	b.n	8012e5c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8012fa2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fa4:	f000 f9bb 	bl	801331e <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8012fa8:	f000 fdde 	bl	8013b68 <xTaskResumeAll>
 8012fac:	e756      	b.n	8012e5c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8012fae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fb0:	f000 f9b5 	bl	801331e <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8012fb4:	f000 fdd8 	bl	8013b68 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8012fb8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fba:	f000 fa02 	bl	80133c2 <prvIsQueueEmpty>
 8012fbe:	4603      	mov	r3, r0
 8012fc0:	2b00      	cmp	r3, #0
 8012fc2:	f43f af4b 	beq.w	8012e5c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8012fc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	d00d      	beq.n	8012fe8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8012fcc:	f001 fce6 	bl	801499c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8012fd0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8012fd2:	f000 f8fc 	bl	80131ce <prvGetDisinheritPriorityAfterTimeout>
 8012fd6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8012fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012fda:	689b      	ldr	r3, [r3, #8]
 8012fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012fde:	4618      	mov	r0, r3
 8012fe0:	f001 fab6 	bl	8014550 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8012fe4:	f001 fd0e 	bl	8014a04 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8012fe8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8012fea:	4618      	mov	r0, r3
 8012fec:	3738      	adds	r7, #56	; 0x38
 8012fee:	46bd      	mov	sp, r7
 8012ff0:	bd80      	pop	{r7, pc}
 8012ff2:	bf00      	nop
 8012ff4:	e000ed04 	.word	0xe000ed04

08012ff8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8012ff8:	b580      	push	{r7, lr}
 8012ffa:	b08e      	sub	sp, #56	; 0x38
 8012ffc:	af00      	add	r7, sp, #0
 8012ffe:	60f8      	str	r0, [r7, #12]
 8013000:	60b9      	str	r1, [r7, #8]
 8013002:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8013004:	68fb      	ldr	r3, [r7, #12]
 8013006:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8013008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801300a:	2b00      	cmp	r3, #0
 801300c:	d10c      	bne.n	8013028 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801300e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013012:	b672      	cpsid	i
 8013014:	f383 8811 	msr	BASEPRI, r3
 8013018:	f3bf 8f6f 	isb	sy
 801301c:	f3bf 8f4f 	dsb	sy
 8013020:	b662      	cpsie	i
 8013022:	623b      	str	r3, [r7, #32]
}
 8013024:	bf00      	nop
 8013026:	e7fe      	b.n	8013026 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8013028:	68bb      	ldr	r3, [r7, #8]
 801302a:	2b00      	cmp	r3, #0
 801302c:	d103      	bne.n	8013036 <xQueueReceiveFromISR+0x3e>
 801302e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013032:	2b00      	cmp	r3, #0
 8013034:	d101      	bne.n	801303a <xQueueReceiveFromISR+0x42>
 8013036:	2301      	movs	r3, #1
 8013038:	e000      	b.n	801303c <xQueueReceiveFromISR+0x44>
 801303a:	2300      	movs	r3, #0
 801303c:	2b00      	cmp	r3, #0
 801303e:	d10c      	bne.n	801305a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8013040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013044:	b672      	cpsid	i
 8013046:	f383 8811 	msr	BASEPRI, r3
 801304a:	f3bf 8f6f 	isb	sy
 801304e:	f3bf 8f4f 	dsb	sy
 8013052:	b662      	cpsie	i
 8013054:	61fb      	str	r3, [r7, #28]
}
 8013056:	bf00      	nop
 8013058:	e7fe      	b.n	8013058 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801305a:	f001 fd87 	bl	8014b6c <vPortValidateInterruptPriority>
	__asm volatile
 801305e:	f3ef 8211 	mrs	r2, BASEPRI
 8013062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013066:	b672      	cpsid	i
 8013068:	f383 8811 	msr	BASEPRI, r3
 801306c:	f3bf 8f6f 	isb	sy
 8013070:	f3bf 8f4f 	dsb	sy
 8013074:	b662      	cpsie	i
 8013076:	61ba      	str	r2, [r7, #24]
 8013078:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801307a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801307c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801307e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013082:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8013084:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013086:	2b00      	cmp	r3, #0
 8013088:	d02f      	beq.n	80130ea <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801308a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801308c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8013090:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8013094:	68b9      	ldr	r1, [r7, #8]
 8013096:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8013098:	f000 f91b 	bl	80132d2 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801309c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801309e:	1e5a      	subs	r2, r3, #1
 80130a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80130a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80130a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80130ac:	d112      	bne.n	80130d4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80130ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b0:	691b      	ldr	r3, [r3, #16]
 80130b2:	2b00      	cmp	r3, #0
 80130b4:	d016      	beq.n	80130e4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80130b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130b8:	3310      	adds	r3, #16
 80130ba:	4618      	mov	r0, r3
 80130bc:	f000 ff58 	bl	8013f70 <xTaskRemoveFromEventList>
 80130c0:	4603      	mov	r3, r0
 80130c2:	2b00      	cmp	r3, #0
 80130c4:	d00e      	beq.n	80130e4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	2b00      	cmp	r3, #0
 80130ca:	d00b      	beq.n	80130e4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	2201      	movs	r2, #1
 80130d0:	601a      	str	r2, [r3, #0]
 80130d2:	e007      	b.n	80130e4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80130d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80130d8:	3301      	adds	r3, #1
 80130da:	b2db      	uxtb	r3, r3
 80130dc:	b25a      	sxtb	r2, r3
 80130de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80130e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80130e4:	2301      	movs	r3, #1
 80130e6:	637b      	str	r3, [r7, #52]	; 0x34
 80130e8:	e001      	b.n	80130ee <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80130ea:	2300      	movs	r3, #0
 80130ec:	637b      	str	r3, [r7, #52]	; 0x34
 80130ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80130f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80130f2:	693b      	ldr	r3, [r7, #16]
 80130f4:	f383 8811 	msr	BASEPRI, r3
}
 80130f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80130fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80130fc:	4618      	mov	r0, r3
 80130fe:	3738      	adds	r7, #56	; 0x38
 8013100:	46bd      	mov	sp, r7
 8013102:	bd80      	pop	{r7, pc}

08013104 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8013104:	b580      	push	{r7, lr}
 8013106:	b084      	sub	sp, #16
 8013108:	af00      	add	r7, sp, #0
 801310a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2b00      	cmp	r3, #0
 8013110:	d10c      	bne.n	801312c <uxQueueMessagesWaiting+0x28>
	__asm volatile
 8013112:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013116:	b672      	cpsid	i
 8013118:	f383 8811 	msr	BASEPRI, r3
 801311c:	f3bf 8f6f 	isb	sy
 8013120:	f3bf 8f4f 	dsb	sy
 8013124:	b662      	cpsie	i
 8013126:	60bb      	str	r3, [r7, #8]
}
 8013128:	bf00      	nop
 801312a:	e7fe      	b.n	801312a <uxQueueMessagesWaiting+0x26>

	taskENTER_CRITICAL();
 801312c:	f001 fc36 	bl	801499c <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013134:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8013136:	f001 fc65 	bl	8014a04 <vPortExitCritical>

	return uxReturn;
 801313a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 801313c:	4618      	mov	r0, r3
 801313e:	3710      	adds	r7, #16
 8013140:	46bd      	mov	sp, r7
 8013142:	bd80      	pop	{r7, pc}

08013144 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8013144:	b480      	push	{r7}
 8013146:	b087      	sub	sp, #28
 8013148:	af00      	add	r7, sp, #0
 801314a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 801314c:	687b      	ldr	r3, [r7, #4]
 801314e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8013150:	697b      	ldr	r3, [r7, #20]
 8013152:	2b00      	cmp	r3, #0
 8013154:	d10c      	bne.n	8013170 <uxQueueMessagesWaitingFromISR+0x2c>
	__asm volatile
 8013156:	f04f 0350 	mov.w	r3, #80	; 0x50
 801315a:	b672      	cpsid	i
 801315c:	f383 8811 	msr	BASEPRI, r3
 8013160:	f3bf 8f6f 	isb	sy
 8013164:	f3bf 8f4f 	dsb	sy
 8013168:	b662      	cpsie	i
 801316a:	60fb      	str	r3, [r7, #12]
}
 801316c:	bf00      	nop
 801316e:	e7fe      	b.n	801316e <uxQueueMessagesWaitingFromISR+0x2a>
	uxReturn = pxQueue->uxMessagesWaiting;
 8013170:	697b      	ldr	r3, [r7, #20]
 8013172:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013174:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8013176:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8013178:	4618      	mov	r0, r3
 801317a:	371c      	adds	r7, #28
 801317c:	46bd      	mov	sp, r7
 801317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013182:	4770      	bx	lr

08013184 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8013184:	b580      	push	{r7, lr}
 8013186:	b084      	sub	sp, #16
 8013188:	af00      	add	r7, sp, #0
 801318a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8013190:	68fb      	ldr	r3, [r7, #12]
 8013192:	2b00      	cmp	r3, #0
 8013194:	d10c      	bne.n	80131b0 <vQueueDelete+0x2c>
	__asm volatile
 8013196:	f04f 0350 	mov.w	r3, #80	; 0x50
 801319a:	b672      	cpsid	i
 801319c:	f383 8811 	msr	BASEPRI, r3
 80131a0:	f3bf 8f6f 	isb	sy
 80131a4:	f3bf 8f4f 	dsb	sy
 80131a8:	b662      	cpsie	i
 80131aa:	60bb      	str	r3, [r7, #8]
}
 80131ac:	bf00      	nop
 80131ae:	e7fe      	b.n	80131ae <vQueueDelete+0x2a>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80131b0:	68f8      	ldr	r0, [r7, #12]
 80131b2:	f000 f935 	bl	8013420 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80131b6:	68fb      	ldr	r3, [r7, #12]
 80131b8:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80131bc:	2b00      	cmp	r3, #0
 80131be:	d102      	bne.n	80131c6 <vQueueDelete+0x42>
		{
			vPortFree( pxQueue );
 80131c0:	68f8      	ldr	r0, [r7, #12]
 80131c2:	f7ee f932 	bl	800142a <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80131c6:	bf00      	nop
 80131c8:	3710      	adds	r7, #16
 80131ca:	46bd      	mov	sp, r7
 80131cc:	bd80      	pop	{r7, pc}

080131ce <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80131ce:	b480      	push	{r7}
 80131d0:	b085      	sub	sp, #20
 80131d2:	af00      	add	r7, sp, #0
 80131d4:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80131d6:	687b      	ldr	r3, [r7, #4]
 80131d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80131da:	2b00      	cmp	r3, #0
 80131dc:	d006      	beq.n	80131ec <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80131e2:	681b      	ldr	r3, [r3, #0]
 80131e4:	f1c3 0307 	rsb	r3, r3, #7
 80131e8:	60fb      	str	r3, [r7, #12]
 80131ea:	e001      	b.n	80131f0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80131ec:	2300      	movs	r3, #0
 80131ee:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80131f0:	68fb      	ldr	r3, [r7, #12]
	}
 80131f2:	4618      	mov	r0, r3
 80131f4:	3714      	adds	r7, #20
 80131f6:	46bd      	mov	sp, r7
 80131f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80131fc:	4770      	bx	lr

080131fe <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80131fe:	b580      	push	{r7, lr}
 8013200:	b086      	sub	sp, #24
 8013202:	af00      	add	r7, sp, #0
 8013204:	60f8      	str	r0, [r7, #12]
 8013206:	60b9      	str	r1, [r7, #8]
 8013208:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 801320a:	2300      	movs	r3, #0
 801320c:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013212:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013218:	2b00      	cmp	r3, #0
 801321a:	d10d      	bne.n	8013238 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	2b00      	cmp	r3, #0
 8013222:	d14d      	bne.n	80132c0 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8013224:	68fb      	ldr	r3, [r7, #12]
 8013226:	689b      	ldr	r3, [r3, #8]
 8013228:	4618      	mov	r0, r3
 801322a:	f001 f907 	bl	801443c <xTaskPriorityDisinherit>
 801322e:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8013230:	68fb      	ldr	r3, [r7, #12]
 8013232:	2200      	movs	r2, #0
 8013234:	609a      	str	r2, [r3, #8]
 8013236:	e043      	b.n	80132c0 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8013238:	687b      	ldr	r3, [r7, #4]
 801323a:	2b00      	cmp	r3, #0
 801323c:	d119      	bne.n	8013272 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801323e:	68fb      	ldr	r3, [r7, #12]
 8013240:	6858      	ldr	r0, [r3, #4]
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013246:	461a      	mov	r2, r3
 8013248:	68b9      	ldr	r1, [r7, #8]
 801324a:	f010 ff11 	bl	8024070 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	685a      	ldr	r2, [r3, #4]
 8013252:	68fb      	ldr	r3, [r7, #12]
 8013254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8013256:	441a      	add	r2, r3
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	685a      	ldr	r2, [r3, #4]
 8013260:	68fb      	ldr	r3, [r7, #12]
 8013262:	689b      	ldr	r3, [r3, #8]
 8013264:	429a      	cmp	r2, r3
 8013266:	d32b      	bcc.n	80132c0 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8013268:	68fb      	ldr	r3, [r7, #12]
 801326a:	681a      	ldr	r2, [r3, #0]
 801326c:	68fb      	ldr	r3, [r7, #12]
 801326e:	605a      	str	r2, [r3, #4]
 8013270:	e026      	b.n	80132c0 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	68d8      	ldr	r0, [r3, #12]
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801327a:	461a      	mov	r2, r3
 801327c:	68b9      	ldr	r1, [r7, #8]
 801327e:	f010 fef7 	bl	8024070 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8013282:	68fb      	ldr	r3, [r7, #12]
 8013284:	68da      	ldr	r2, [r3, #12]
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801328a:	425b      	negs	r3, r3
 801328c:	441a      	add	r2, r3
 801328e:	68fb      	ldr	r3, [r7, #12]
 8013290:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8013292:	68fb      	ldr	r3, [r7, #12]
 8013294:	68da      	ldr	r2, [r3, #12]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	681b      	ldr	r3, [r3, #0]
 801329a:	429a      	cmp	r2, r3
 801329c:	d207      	bcs.n	80132ae <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 801329e:	68fb      	ldr	r3, [r7, #12]
 80132a0:	689a      	ldr	r2, [r3, #8]
 80132a2:	68fb      	ldr	r3, [r7, #12]
 80132a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132a6:	425b      	negs	r3, r3
 80132a8:	441a      	add	r2, r3
 80132aa:	68fb      	ldr	r3, [r7, #12]
 80132ac:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80132ae:	687b      	ldr	r3, [r7, #4]
 80132b0:	2b02      	cmp	r3, #2
 80132b2:	d105      	bne.n	80132c0 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80132b4:	693b      	ldr	r3, [r7, #16]
 80132b6:	2b00      	cmp	r3, #0
 80132b8:	d002      	beq.n	80132c0 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80132ba:	693b      	ldr	r3, [r7, #16]
 80132bc:	3b01      	subs	r3, #1
 80132be:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80132c0:	693b      	ldr	r3, [r7, #16]
 80132c2:	1c5a      	adds	r2, r3, #1
 80132c4:	68fb      	ldr	r3, [r7, #12]
 80132c6:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80132c8:	697b      	ldr	r3, [r7, #20]
}
 80132ca:	4618      	mov	r0, r3
 80132cc:	3718      	adds	r7, #24
 80132ce:	46bd      	mov	sp, r7
 80132d0:	bd80      	pop	{r7, pc}

080132d2 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80132d2:	b580      	push	{r7, lr}
 80132d4:	b082      	sub	sp, #8
 80132d6:	af00      	add	r7, sp, #0
 80132d8:	6078      	str	r0, [r7, #4]
 80132da:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132e0:	2b00      	cmp	r3, #0
 80132e2:	d018      	beq.n	8013316 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	68da      	ldr	r2, [r3, #12]
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80132ec:	441a      	add	r2, r3
 80132ee:	687b      	ldr	r3, [r7, #4]
 80132f0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	68da      	ldr	r2, [r3, #12]
 80132f6:	687b      	ldr	r3, [r7, #4]
 80132f8:	689b      	ldr	r3, [r3, #8]
 80132fa:	429a      	cmp	r2, r3
 80132fc:	d303      	bcc.n	8013306 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80132fe:	687b      	ldr	r3, [r7, #4]
 8013300:	681a      	ldr	r2, [r3, #0]
 8013302:	687b      	ldr	r3, [r7, #4]
 8013304:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	68d9      	ldr	r1, [r3, #12]
 801330a:	687b      	ldr	r3, [r7, #4]
 801330c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801330e:	461a      	mov	r2, r3
 8013310:	6838      	ldr	r0, [r7, #0]
 8013312:	f010 fead 	bl	8024070 <memcpy>
	}
}
 8013316:	bf00      	nop
 8013318:	3708      	adds	r7, #8
 801331a:	46bd      	mov	sp, r7
 801331c:	bd80      	pop	{r7, pc}

0801331e <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 801331e:	b580      	push	{r7, lr}
 8013320:	b084      	sub	sp, #16
 8013322:	af00      	add	r7, sp, #0
 8013324:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8013326:	f001 fb39 	bl	801499c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 801332a:	687b      	ldr	r3, [r7, #4]
 801332c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8013330:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013332:	e011      	b.n	8013358 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8013334:	687b      	ldr	r3, [r7, #4]
 8013336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013338:	2b00      	cmp	r3, #0
 801333a:	d012      	beq.n	8013362 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	3324      	adds	r3, #36	; 0x24
 8013340:	4618      	mov	r0, r3
 8013342:	f000 fe15 	bl	8013f70 <xTaskRemoveFromEventList>
 8013346:	4603      	mov	r3, r0
 8013348:	2b00      	cmp	r3, #0
 801334a:	d001      	beq.n	8013350 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 801334c:	f000 fef0 	bl	8014130 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8013350:	7bfb      	ldrb	r3, [r7, #15]
 8013352:	3b01      	subs	r3, #1
 8013354:	b2db      	uxtb	r3, r3
 8013356:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8013358:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801335c:	2b00      	cmp	r3, #0
 801335e:	dce9      	bgt.n	8013334 <prvUnlockQueue+0x16>
 8013360:	e000      	b.n	8013364 <prvUnlockQueue+0x46>
					break;
 8013362:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	22ff      	movs	r2, #255	; 0xff
 8013368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 801336c:	f001 fb4a 	bl	8014a04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8013370:	f001 fb14 	bl	801499c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801337a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 801337c:	e011      	b.n	80133a2 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 801337e:	687b      	ldr	r3, [r7, #4]
 8013380:	691b      	ldr	r3, [r3, #16]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d012      	beq.n	80133ac <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8013386:	687b      	ldr	r3, [r7, #4]
 8013388:	3310      	adds	r3, #16
 801338a:	4618      	mov	r0, r3
 801338c:	f000 fdf0 	bl	8013f70 <xTaskRemoveFromEventList>
 8013390:	4603      	mov	r3, r0
 8013392:	2b00      	cmp	r3, #0
 8013394:	d001      	beq.n	801339a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8013396:	f000 fecb 	bl	8014130 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 801339a:	7bbb      	ldrb	r3, [r7, #14]
 801339c:	3b01      	subs	r3, #1
 801339e:	b2db      	uxtb	r3, r3
 80133a0:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80133a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80133a6:	2b00      	cmp	r3, #0
 80133a8:	dce9      	bgt.n	801337e <prvUnlockQueue+0x60>
 80133aa:	e000      	b.n	80133ae <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80133ac:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	22ff      	movs	r2, #255	; 0xff
 80133b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80133b6:	f001 fb25 	bl	8014a04 <vPortExitCritical>
}
 80133ba:	bf00      	nop
 80133bc:	3710      	adds	r7, #16
 80133be:	46bd      	mov	sp, r7
 80133c0:	bd80      	pop	{r7, pc}

080133c2 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80133c2:	b580      	push	{r7, lr}
 80133c4:	b084      	sub	sp, #16
 80133c6:	af00      	add	r7, sp, #0
 80133c8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133ca:	f001 fae7 	bl	801499c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80133ce:	687b      	ldr	r3, [r7, #4]
 80133d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80133d2:	2b00      	cmp	r3, #0
 80133d4:	d102      	bne.n	80133dc <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80133d6:	2301      	movs	r3, #1
 80133d8:	60fb      	str	r3, [r7, #12]
 80133da:	e001      	b.n	80133e0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80133dc:	2300      	movs	r3, #0
 80133de:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80133e0:	f001 fb10 	bl	8014a04 <vPortExitCritical>

	return xReturn;
 80133e4:	68fb      	ldr	r3, [r7, #12]
}
 80133e6:	4618      	mov	r0, r3
 80133e8:	3710      	adds	r7, #16
 80133ea:	46bd      	mov	sp, r7
 80133ec:	bd80      	pop	{r7, pc}

080133ee <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80133ee:	b580      	push	{r7, lr}
 80133f0:	b084      	sub	sp, #16
 80133f2:	af00      	add	r7, sp, #0
 80133f4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80133f6:	f001 fad1 	bl	801499c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8013402:	429a      	cmp	r2, r3
 8013404:	d102      	bne.n	801340c <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8013406:	2301      	movs	r3, #1
 8013408:	60fb      	str	r3, [r7, #12]
 801340a:	e001      	b.n	8013410 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 801340c:	2300      	movs	r3, #0
 801340e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8013410:	f001 faf8 	bl	8014a04 <vPortExitCritical>

	return xReturn;
 8013414:	68fb      	ldr	r3, [r7, #12]
}
 8013416:	4618      	mov	r0, r3
 8013418:	3710      	adds	r7, #16
 801341a:	46bd      	mov	sp, r7
 801341c:	bd80      	pop	{r7, pc}
	...

08013420 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8013420:	b480      	push	{r7}
 8013422:	b085      	sub	sp, #20
 8013424:	af00      	add	r7, sp, #0
 8013426:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013428:	2300      	movs	r3, #0
 801342a:	60fb      	str	r3, [r7, #12]
 801342c:	e016      	b.n	801345c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 801342e:	4a10      	ldr	r2, [pc, #64]	; (8013470 <vQueueUnregisterQueue+0x50>)
 8013430:	68fb      	ldr	r3, [r7, #12]
 8013432:	00db      	lsls	r3, r3, #3
 8013434:	4413      	add	r3, r2
 8013436:	685b      	ldr	r3, [r3, #4]
 8013438:	687a      	ldr	r2, [r7, #4]
 801343a:	429a      	cmp	r2, r3
 801343c:	d10b      	bne.n	8013456 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 801343e:	4a0c      	ldr	r2, [pc, #48]	; (8013470 <vQueueUnregisterQueue+0x50>)
 8013440:	68fb      	ldr	r3, [r7, #12]
 8013442:	2100      	movs	r1, #0
 8013444:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8013448:	4a09      	ldr	r2, [pc, #36]	; (8013470 <vQueueUnregisterQueue+0x50>)
 801344a:	68fb      	ldr	r3, [r7, #12]
 801344c:	00db      	lsls	r3, r3, #3
 801344e:	4413      	add	r3, r2
 8013450:	2200      	movs	r2, #0
 8013452:	605a      	str	r2, [r3, #4]
				break;
 8013454:	e006      	b.n	8013464 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8013456:	68fb      	ldr	r3, [r7, #12]
 8013458:	3301      	adds	r3, #1
 801345a:	60fb      	str	r3, [r7, #12]
 801345c:	68fb      	ldr	r3, [r7, #12]
 801345e:	2b07      	cmp	r3, #7
 8013460:	d9e5      	bls.n	801342e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8013462:	bf00      	nop
 8013464:	bf00      	nop
 8013466:	3714      	adds	r7, #20
 8013468:	46bd      	mov	sp, r7
 801346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801346e:	4770      	bx	lr
 8013470:	20006524 	.word	0x20006524

08013474 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8013474:	b580      	push	{r7, lr}
 8013476:	b08e      	sub	sp, #56	; 0x38
 8013478:	af04      	add	r7, sp, #16
 801347a:	60f8      	str	r0, [r7, #12]
 801347c:	60b9      	str	r1, [r7, #8]
 801347e:	607a      	str	r2, [r7, #4]
 8013480:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8013482:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013484:	2b00      	cmp	r3, #0
 8013486:	d10c      	bne.n	80134a2 <xTaskCreateStatic+0x2e>
	__asm volatile
 8013488:	f04f 0350 	mov.w	r3, #80	; 0x50
 801348c:	b672      	cpsid	i
 801348e:	f383 8811 	msr	BASEPRI, r3
 8013492:	f3bf 8f6f 	isb	sy
 8013496:	f3bf 8f4f 	dsb	sy
 801349a:	b662      	cpsie	i
 801349c:	623b      	str	r3, [r7, #32]
}
 801349e:	bf00      	nop
 80134a0:	e7fe      	b.n	80134a0 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 80134a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134a4:	2b00      	cmp	r3, #0
 80134a6:	d10c      	bne.n	80134c2 <xTaskCreateStatic+0x4e>
	__asm volatile
 80134a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134ac:	b672      	cpsid	i
 80134ae:	f383 8811 	msr	BASEPRI, r3
 80134b2:	f3bf 8f6f 	isb	sy
 80134b6:	f3bf 8f4f 	dsb	sy
 80134ba:	b662      	cpsie	i
 80134bc:	61fb      	str	r3, [r7, #28]
}
 80134be:	bf00      	nop
 80134c0:	e7fe      	b.n	80134c0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80134c2:	23b4      	movs	r3, #180	; 0xb4
 80134c4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80134c6:	693b      	ldr	r3, [r7, #16]
 80134c8:	2bb4      	cmp	r3, #180	; 0xb4
 80134ca:	d00c      	beq.n	80134e6 <xTaskCreateStatic+0x72>
	__asm volatile
 80134cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80134d0:	b672      	cpsid	i
 80134d2:	f383 8811 	msr	BASEPRI, r3
 80134d6:	f3bf 8f6f 	isb	sy
 80134da:	f3bf 8f4f 	dsb	sy
 80134de:	b662      	cpsie	i
 80134e0:	61bb      	str	r3, [r7, #24]
}
 80134e2:	bf00      	nop
 80134e4:	e7fe      	b.n	80134e4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80134e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80134e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d01e      	beq.n	801352c <xTaskCreateStatic+0xb8>
 80134ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80134f0:	2b00      	cmp	r3, #0
 80134f2:	d01b      	beq.n	801352c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80134f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80134f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80134f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80134fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80134fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80134fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013500:	2202      	movs	r2, #2
 8013502:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8013506:	2300      	movs	r3, #0
 8013508:	9303      	str	r3, [sp, #12]
 801350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801350c:	9302      	str	r3, [sp, #8]
 801350e:	f107 0314 	add.w	r3, r7, #20
 8013512:	9301      	str	r3, [sp, #4]
 8013514:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013516:	9300      	str	r3, [sp, #0]
 8013518:	683b      	ldr	r3, [r7, #0]
 801351a:	687a      	ldr	r2, [r7, #4]
 801351c:	68b9      	ldr	r1, [r7, #8]
 801351e:	68f8      	ldr	r0, [r7, #12]
 8013520:	f000 f850 	bl	80135c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8013524:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013526:	f000 f8ed 	bl	8013704 <prvAddNewTaskToReadyList>
 801352a:	e001      	b.n	8013530 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801352c:	2300      	movs	r3, #0
 801352e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8013530:	697b      	ldr	r3, [r7, #20]
	}
 8013532:	4618      	mov	r0, r3
 8013534:	3728      	adds	r7, #40	; 0x28
 8013536:	46bd      	mov	sp, r7
 8013538:	bd80      	pop	{r7, pc}

0801353a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801353a:	b580      	push	{r7, lr}
 801353c:	b08c      	sub	sp, #48	; 0x30
 801353e:	af04      	add	r7, sp, #16
 8013540:	60f8      	str	r0, [r7, #12]
 8013542:	60b9      	str	r1, [r7, #8]
 8013544:	603b      	str	r3, [r7, #0]
 8013546:	4613      	mov	r3, r2
 8013548:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801354a:	88fb      	ldrh	r3, [r7, #6]
 801354c:	009b      	lsls	r3, r3, #2
 801354e:	4618      	mov	r0, r3
 8013550:	f7ed ff5d 	bl	800140e <pvPortMalloc>
 8013554:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8013556:	697b      	ldr	r3, [r7, #20]
 8013558:	2b00      	cmp	r3, #0
 801355a:	d00e      	beq.n	801357a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801355c:	20b4      	movs	r0, #180	; 0xb4
 801355e:	f7ed ff56 	bl	800140e <pvPortMalloc>
 8013562:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8013564:	69fb      	ldr	r3, [r7, #28]
 8013566:	2b00      	cmp	r3, #0
 8013568:	d003      	beq.n	8013572 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801356a:	69fb      	ldr	r3, [r7, #28]
 801356c:	697a      	ldr	r2, [r7, #20]
 801356e:	631a      	str	r2, [r3, #48]	; 0x30
 8013570:	e005      	b.n	801357e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8013572:	6978      	ldr	r0, [r7, #20]
 8013574:	f7ed ff59 	bl	800142a <vPortFree>
 8013578:	e001      	b.n	801357e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801357a:	2300      	movs	r3, #0
 801357c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801357e:	69fb      	ldr	r3, [r7, #28]
 8013580:	2b00      	cmp	r3, #0
 8013582:	d017      	beq.n	80135b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8013584:	69fb      	ldr	r3, [r7, #28]
 8013586:	2200      	movs	r2, #0
 8013588:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801358c:	88fa      	ldrh	r2, [r7, #6]
 801358e:	2300      	movs	r3, #0
 8013590:	9303      	str	r3, [sp, #12]
 8013592:	69fb      	ldr	r3, [r7, #28]
 8013594:	9302      	str	r3, [sp, #8]
 8013596:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013598:	9301      	str	r3, [sp, #4]
 801359a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801359c:	9300      	str	r3, [sp, #0]
 801359e:	683b      	ldr	r3, [r7, #0]
 80135a0:	68b9      	ldr	r1, [r7, #8]
 80135a2:	68f8      	ldr	r0, [r7, #12]
 80135a4:	f000 f80e 	bl	80135c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80135a8:	69f8      	ldr	r0, [r7, #28]
 80135aa:	f000 f8ab 	bl	8013704 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80135ae:	2301      	movs	r3, #1
 80135b0:	61bb      	str	r3, [r7, #24]
 80135b2:	e002      	b.n	80135ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80135b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80135b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80135ba:	69bb      	ldr	r3, [r7, #24]
	}
 80135bc:	4618      	mov	r0, r3
 80135be:	3720      	adds	r7, #32
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b088      	sub	sp, #32
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	60f8      	str	r0, [r7, #12]
 80135cc:	60b9      	str	r1, [r7, #8]
 80135ce:	607a      	str	r2, [r7, #4]
 80135d0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80135d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80135d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80135d6:	6879      	ldr	r1, [r7, #4]
 80135d8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80135dc:	440b      	add	r3, r1
 80135de:	009b      	lsls	r3, r3, #2
 80135e0:	4413      	add	r3, r2
 80135e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80135e4:	69bb      	ldr	r3, [r7, #24]
 80135e6:	f023 0307 	bic.w	r3, r3, #7
 80135ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80135ec:	69bb      	ldr	r3, [r7, #24]
 80135ee:	f003 0307 	and.w	r3, r3, #7
 80135f2:	2b00      	cmp	r3, #0
 80135f4:	d00c      	beq.n	8013610 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80135f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80135fa:	b672      	cpsid	i
 80135fc:	f383 8811 	msr	BASEPRI, r3
 8013600:	f3bf 8f6f 	isb	sy
 8013604:	f3bf 8f4f 	dsb	sy
 8013608:	b662      	cpsie	i
 801360a:	617b      	str	r3, [r7, #20]
}
 801360c:	bf00      	nop
 801360e:	e7fe      	b.n	801360e <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8013610:	68bb      	ldr	r3, [r7, #8]
 8013612:	2b00      	cmp	r3, #0
 8013614:	d01f      	beq.n	8013656 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8013616:	2300      	movs	r3, #0
 8013618:	61fb      	str	r3, [r7, #28]
 801361a:	e012      	b.n	8013642 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801361c:	68ba      	ldr	r2, [r7, #8]
 801361e:	69fb      	ldr	r3, [r7, #28]
 8013620:	4413      	add	r3, r2
 8013622:	7819      	ldrb	r1, [r3, #0]
 8013624:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013626:	69fb      	ldr	r3, [r7, #28]
 8013628:	4413      	add	r3, r2
 801362a:	3334      	adds	r3, #52	; 0x34
 801362c:	460a      	mov	r2, r1
 801362e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8013630:	68ba      	ldr	r2, [r7, #8]
 8013632:	69fb      	ldr	r3, [r7, #28]
 8013634:	4413      	add	r3, r2
 8013636:	781b      	ldrb	r3, [r3, #0]
 8013638:	2b00      	cmp	r3, #0
 801363a:	d006      	beq.n	801364a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801363c:	69fb      	ldr	r3, [r7, #28]
 801363e:	3301      	adds	r3, #1
 8013640:	61fb      	str	r3, [r7, #28]
 8013642:	69fb      	ldr	r3, [r7, #28]
 8013644:	2b0f      	cmp	r3, #15
 8013646:	d9e9      	bls.n	801361c <prvInitialiseNewTask+0x58>
 8013648:	e000      	b.n	801364c <prvInitialiseNewTask+0x88>
			{
				break;
 801364a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801364c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801364e:	2200      	movs	r2, #0
 8013650:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8013654:	e003      	b.n	801365e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8013656:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013658:	2200      	movs	r2, #0
 801365a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801365e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013660:	2b06      	cmp	r3, #6
 8013662:	d901      	bls.n	8013668 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8013664:	2306      	movs	r3, #6
 8013666:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8013668:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801366a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801366c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801366e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013670:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013672:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8013674:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013676:	2200      	movs	r2, #0
 8013678:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801367a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801367c:	3304      	adds	r3, #4
 801367e:	4618      	mov	r0, r3
 8013680:	f7fe fe55 	bl	801232e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8013684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013686:	3318      	adds	r3, #24
 8013688:	4618      	mov	r0, r3
 801368a:	f7fe fe50 	bl	801232e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801368e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013690:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013692:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013696:	f1c3 0207 	rsb	r2, r3, #7
 801369a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801369c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801369e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136a2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80136a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136a6:	2200      	movs	r2, #0
 80136a8:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80136ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ae:	2200      	movs	r2, #0
 80136b0:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80136b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136b6:	334c      	adds	r3, #76	; 0x4c
 80136b8:	2260      	movs	r2, #96	; 0x60
 80136ba:	2100      	movs	r1, #0
 80136bc:	4618      	mov	r0, r3
 80136be:	f010 fcff 	bl	80240c0 <memset>
 80136c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136c4:	4a0c      	ldr	r2, [pc, #48]	; (80136f8 <prvInitialiseNewTask+0x134>)
 80136c6:	651a      	str	r2, [r3, #80]	; 0x50
 80136c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136ca:	4a0c      	ldr	r2, [pc, #48]	; (80136fc <prvInitialiseNewTask+0x138>)
 80136cc:	655a      	str	r2, [r3, #84]	; 0x54
 80136ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136d0:	4a0b      	ldr	r2, [pc, #44]	; (8013700 <prvInitialiseNewTask+0x13c>)
 80136d2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80136d4:	683a      	ldr	r2, [r7, #0]
 80136d6:	68f9      	ldr	r1, [r7, #12]
 80136d8:	69b8      	ldr	r0, [r7, #24]
 80136da:	f001 f851 	bl	8014780 <pxPortInitialiseStack>
 80136de:	4602      	mov	r2, r0
 80136e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80136e2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80136e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d002      	beq.n	80136f0 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80136ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80136ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80136ee:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80136f0:	bf00      	nop
 80136f2:	3720      	adds	r7, #32
 80136f4:	46bd      	mov	sp, r7
 80136f6:	bd80      	pop	{r7, pc}
 80136f8:	08028f68 	.word	0x08028f68
 80136fc:	08028f88 	.word	0x08028f88
 8013700:	08028f48 	.word	0x08028f48

08013704 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8013704:	b580      	push	{r7, lr}
 8013706:	b082      	sub	sp, #8
 8013708:	af00      	add	r7, sp, #0
 801370a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801370c:	f001 f946 	bl	801499c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8013710:	4b2a      	ldr	r3, [pc, #168]	; (80137bc <prvAddNewTaskToReadyList+0xb8>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	3301      	adds	r3, #1
 8013716:	4a29      	ldr	r2, [pc, #164]	; (80137bc <prvAddNewTaskToReadyList+0xb8>)
 8013718:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801371a:	4b29      	ldr	r3, [pc, #164]	; (80137c0 <prvAddNewTaskToReadyList+0xbc>)
 801371c:	681b      	ldr	r3, [r3, #0]
 801371e:	2b00      	cmp	r3, #0
 8013720:	d109      	bne.n	8013736 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8013722:	4a27      	ldr	r2, [pc, #156]	; (80137c0 <prvAddNewTaskToReadyList+0xbc>)
 8013724:	687b      	ldr	r3, [r7, #4]
 8013726:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8013728:	4b24      	ldr	r3, [pc, #144]	; (80137bc <prvAddNewTaskToReadyList+0xb8>)
 801372a:	681b      	ldr	r3, [r3, #0]
 801372c:	2b01      	cmp	r3, #1
 801372e:	d110      	bne.n	8013752 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8013730:	f000 fd22 	bl	8014178 <prvInitialiseTaskLists>
 8013734:	e00d      	b.n	8013752 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8013736:	4b23      	ldr	r3, [pc, #140]	; (80137c4 <prvAddNewTaskToReadyList+0xc0>)
 8013738:	681b      	ldr	r3, [r3, #0]
 801373a:	2b00      	cmp	r3, #0
 801373c:	d109      	bne.n	8013752 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801373e:	4b20      	ldr	r3, [pc, #128]	; (80137c0 <prvAddNewTaskToReadyList+0xbc>)
 8013740:	681b      	ldr	r3, [r3, #0]
 8013742:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013748:	429a      	cmp	r2, r3
 801374a:	d802      	bhi.n	8013752 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801374c:	4a1c      	ldr	r2, [pc, #112]	; (80137c0 <prvAddNewTaskToReadyList+0xbc>)
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8013752:	4b1d      	ldr	r3, [pc, #116]	; (80137c8 <prvAddNewTaskToReadyList+0xc4>)
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	3301      	adds	r3, #1
 8013758:	4a1b      	ldr	r2, [pc, #108]	; (80137c8 <prvAddNewTaskToReadyList+0xc4>)
 801375a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801375c:	687b      	ldr	r3, [r7, #4]
 801375e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013760:	2201      	movs	r2, #1
 8013762:	409a      	lsls	r2, r3
 8013764:	4b19      	ldr	r3, [pc, #100]	; (80137cc <prvAddNewTaskToReadyList+0xc8>)
 8013766:	681b      	ldr	r3, [r3, #0]
 8013768:	4313      	orrs	r3, r2
 801376a:	4a18      	ldr	r2, [pc, #96]	; (80137cc <prvAddNewTaskToReadyList+0xc8>)
 801376c:	6013      	str	r3, [r2, #0]
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013772:	4613      	mov	r3, r2
 8013774:	009b      	lsls	r3, r3, #2
 8013776:	4413      	add	r3, r2
 8013778:	009b      	lsls	r3, r3, #2
 801377a:	4a15      	ldr	r2, [pc, #84]	; (80137d0 <prvAddNewTaskToReadyList+0xcc>)
 801377c:	441a      	add	r2, r3
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	3304      	adds	r3, #4
 8013782:	4619      	mov	r1, r3
 8013784:	4610      	mov	r0, r2
 8013786:	f7fe fddf 	bl	8012348 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801378a:	f001 f93b 	bl	8014a04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801378e:	4b0d      	ldr	r3, [pc, #52]	; (80137c4 <prvAddNewTaskToReadyList+0xc0>)
 8013790:	681b      	ldr	r3, [r3, #0]
 8013792:	2b00      	cmp	r3, #0
 8013794:	d00e      	beq.n	80137b4 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8013796:	4b0a      	ldr	r3, [pc, #40]	; (80137c0 <prvAddNewTaskToReadyList+0xbc>)
 8013798:	681b      	ldr	r3, [r3, #0]
 801379a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80137a0:	429a      	cmp	r2, r3
 80137a2:	d207      	bcs.n	80137b4 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80137a4:	4b0b      	ldr	r3, [pc, #44]	; (80137d4 <prvAddNewTaskToReadyList+0xd0>)
 80137a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80137aa:	601a      	str	r2, [r3, #0]
 80137ac:	f3bf 8f4f 	dsb	sy
 80137b0:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80137b4:	bf00      	nop
 80137b6:	3708      	adds	r7, #8
 80137b8:	46bd      	mov	sp, r7
 80137ba:	bd80      	pop	{r7, pc}
 80137bc:	20006664 	.word	0x20006664
 80137c0:	20006564 	.word	0x20006564
 80137c4:	20006670 	.word	0x20006670
 80137c8:	20006680 	.word	0x20006680
 80137cc:	2000666c 	.word	0x2000666c
 80137d0:	20006568 	.word	0x20006568
 80137d4:	e000ed04 	.word	0xe000ed04

080137d8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80137d8:	b580      	push	{r7, lr}
 80137da:	b084      	sub	sp, #16
 80137dc:	af00      	add	r7, sp, #0
 80137de:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80137e0:	f001 f8dc 	bl	801499c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80137e4:	687b      	ldr	r3, [r7, #4]
 80137e6:	2b00      	cmp	r3, #0
 80137e8:	d102      	bne.n	80137f0 <vTaskDelete+0x18>
 80137ea:	4b3a      	ldr	r3, [pc, #232]	; (80138d4 <vTaskDelete+0xfc>)
 80137ec:	681b      	ldr	r3, [r3, #0]
 80137ee:	e000      	b.n	80137f2 <vTaskDelete+0x1a>
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80137f4:	68fb      	ldr	r3, [r7, #12]
 80137f6:	3304      	adds	r3, #4
 80137f8:	4618      	mov	r0, r3
 80137fa:	f7fe fe02 	bl	8012402 <uxListRemove>
 80137fe:	4603      	mov	r3, r0
 8013800:	2b00      	cmp	r3, #0
 8013802:	d115      	bne.n	8013830 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8013804:	68fb      	ldr	r3, [r7, #12]
 8013806:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013808:	4933      	ldr	r1, [pc, #204]	; (80138d8 <vTaskDelete+0x100>)
 801380a:	4613      	mov	r3, r2
 801380c:	009b      	lsls	r3, r3, #2
 801380e:	4413      	add	r3, r2
 8013810:	009b      	lsls	r3, r3, #2
 8013812:	440b      	add	r3, r1
 8013814:	681b      	ldr	r3, [r3, #0]
 8013816:	2b00      	cmp	r3, #0
 8013818:	d10a      	bne.n	8013830 <vTaskDelete+0x58>
 801381a:	68fb      	ldr	r3, [r7, #12]
 801381c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801381e:	2201      	movs	r2, #1
 8013820:	fa02 f303 	lsl.w	r3, r2, r3
 8013824:	43da      	mvns	r2, r3
 8013826:	4b2d      	ldr	r3, [pc, #180]	; (80138dc <vTaskDelete+0x104>)
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	4013      	ands	r3, r2
 801382c:	4a2b      	ldr	r2, [pc, #172]	; (80138dc <vTaskDelete+0x104>)
 801382e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013830:	68fb      	ldr	r3, [r7, #12]
 8013832:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013834:	2b00      	cmp	r3, #0
 8013836:	d004      	beq.n	8013842 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013838:	68fb      	ldr	r3, [r7, #12]
 801383a:	3318      	adds	r3, #24
 801383c:	4618      	mov	r0, r3
 801383e:	f7fe fde0 	bl	8012402 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8013842:	4b27      	ldr	r3, [pc, #156]	; (80138e0 <vTaskDelete+0x108>)
 8013844:	681b      	ldr	r3, [r3, #0]
 8013846:	3301      	adds	r3, #1
 8013848:	4a25      	ldr	r2, [pc, #148]	; (80138e0 <vTaskDelete+0x108>)
 801384a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 801384c:	4b21      	ldr	r3, [pc, #132]	; (80138d4 <vTaskDelete+0xfc>)
 801384e:	681b      	ldr	r3, [r3, #0]
 8013850:	68fa      	ldr	r2, [r7, #12]
 8013852:	429a      	cmp	r2, r3
 8013854:	d10b      	bne.n	801386e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8013856:	68fb      	ldr	r3, [r7, #12]
 8013858:	3304      	adds	r3, #4
 801385a:	4619      	mov	r1, r3
 801385c:	4821      	ldr	r0, [pc, #132]	; (80138e4 <vTaskDelete+0x10c>)
 801385e:	f7fe fd73 	bl	8012348 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8013862:	4b21      	ldr	r3, [pc, #132]	; (80138e8 <vTaskDelete+0x110>)
 8013864:	681b      	ldr	r3, [r3, #0]
 8013866:	3301      	adds	r3, #1
 8013868:	4a1f      	ldr	r2, [pc, #124]	; (80138e8 <vTaskDelete+0x110>)
 801386a:	6013      	str	r3, [r2, #0]
 801386c:	e009      	b.n	8013882 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 801386e:	4b1f      	ldr	r3, [pc, #124]	; (80138ec <vTaskDelete+0x114>)
 8013870:	681b      	ldr	r3, [r3, #0]
 8013872:	3b01      	subs	r3, #1
 8013874:	4a1d      	ldr	r2, [pc, #116]	; (80138ec <vTaskDelete+0x114>)
 8013876:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8013878:	68f8      	ldr	r0, [r7, #12]
 801387a:	f000 fceb 	bl	8014254 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 801387e:	f000 fd1f 	bl	80142c0 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8013882:	f001 f8bf 	bl	8014a04 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8013886:	4b1a      	ldr	r3, [pc, #104]	; (80138f0 <vTaskDelete+0x118>)
 8013888:	681b      	ldr	r3, [r3, #0]
 801388a:	2b00      	cmp	r3, #0
 801388c:	d01d      	beq.n	80138ca <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 801388e:	4b11      	ldr	r3, [pc, #68]	; (80138d4 <vTaskDelete+0xfc>)
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	68fa      	ldr	r2, [r7, #12]
 8013894:	429a      	cmp	r2, r3
 8013896:	d118      	bne.n	80138ca <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8013898:	4b16      	ldr	r3, [pc, #88]	; (80138f4 <vTaskDelete+0x11c>)
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	2b00      	cmp	r3, #0
 801389e:	d00c      	beq.n	80138ba <vTaskDelete+0xe2>
	__asm volatile
 80138a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80138a4:	b672      	cpsid	i
 80138a6:	f383 8811 	msr	BASEPRI, r3
 80138aa:	f3bf 8f6f 	isb	sy
 80138ae:	f3bf 8f4f 	dsb	sy
 80138b2:	b662      	cpsie	i
 80138b4:	60bb      	str	r3, [r7, #8]
}
 80138b6:	bf00      	nop
 80138b8:	e7fe      	b.n	80138b8 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 80138ba:	4b0f      	ldr	r3, [pc, #60]	; (80138f8 <vTaskDelete+0x120>)
 80138bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80138c0:	601a      	str	r2, [r3, #0]
 80138c2:	f3bf 8f4f 	dsb	sy
 80138c6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80138ca:	bf00      	nop
 80138cc:	3710      	adds	r7, #16
 80138ce:	46bd      	mov	sp, r7
 80138d0:	bd80      	pop	{r7, pc}
 80138d2:	bf00      	nop
 80138d4:	20006564 	.word	0x20006564
 80138d8:	20006568 	.word	0x20006568
 80138dc:	2000666c 	.word	0x2000666c
 80138e0:	20006680 	.word	0x20006680
 80138e4:	20006638 	.word	0x20006638
 80138e8:	2000664c 	.word	0x2000664c
 80138ec:	20006664 	.word	0x20006664
 80138f0:	20006670 	.word	0x20006670
 80138f4:	2000668c 	.word	0x2000668c
 80138f8:	e000ed04 	.word	0xe000ed04

080138fc <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b08a      	sub	sp, #40	; 0x28
 8013900:	af00      	add	r7, sp, #0
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 8013906:	2300      	movs	r3, #0
 8013908:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 801390a:	687b      	ldr	r3, [r7, #4]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d10c      	bne.n	801392a <vTaskDelayUntil+0x2e>
	__asm volatile
 8013910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013914:	b672      	cpsid	i
 8013916:	f383 8811 	msr	BASEPRI, r3
 801391a:	f3bf 8f6f 	isb	sy
 801391e:	f3bf 8f4f 	dsb	sy
 8013922:	b662      	cpsie	i
 8013924:	617b      	str	r3, [r7, #20]
}
 8013926:	bf00      	nop
 8013928:	e7fe      	b.n	8013928 <vTaskDelayUntil+0x2c>
		configASSERT( ( xTimeIncrement > 0U ) );
 801392a:	683b      	ldr	r3, [r7, #0]
 801392c:	2b00      	cmp	r3, #0
 801392e:	d10c      	bne.n	801394a <vTaskDelayUntil+0x4e>
	__asm volatile
 8013930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013934:	b672      	cpsid	i
 8013936:	f383 8811 	msr	BASEPRI, r3
 801393a:	f3bf 8f6f 	isb	sy
 801393e:	f3bf 8f4f 	dsb	sy
 8013942:	b662      	cpsie	i
 8013944:	613b      	str	r3, [r7, #16]
}
 8013946:	bf00      	nop
 8013948:	e7fe      	b.n	8013948 <vTaskDelayUntil+0x4c>
		configASSERT( uxSchedulerSuspended == 0 );
 801394a:	4b2b      	ldr	r3, [pc, #172]	; (80139f8 <vTaskDelayUntil+0xfc>)
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2b00      	cmp	r3, #0
 8013950:	d00c      	beq.n	801396c <vTaskDelayUntil+0x70>
	__asm volatile
 8013952:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013956:	b672      	cpsid	i
 8013958:	f383 8811 	msr	BASEPRI, r3
 801395c:	f3bf 8f6f 	isb	sy
 8013960:	f3bf 8f4f 	dsb	sy
 8013964:	b662      	cpsie	i
 8013966:	60fb      	str	r3, [r7, #12]
}
 8013968:	bf00      	nop
 801396a:	e7fe      	b.n	801396a <vTaskDelayUntil+0x6e>

		vTaskSuspendAll();
 801396c:	f000 f8ee 	bl	8013b4c <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 8013970:	4b22      	ldr	r3, [pc, #136]	; (80139fc <vTaskDelayUntil+0x100>)
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8013976:	687b      	ldr	r3, [r7, #4]
 8013978:	681b      	ldr	r3, [r3, #0]
 801397a:	683a      	ldr	r2, [r7, #0]
 801397c:	4413      	add	r3, r2
 801397e:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 8013980:	687b      	ldr	r3, [r7, #4]
 8013982:	681b      	ldr	r3, [r3, #0]
 8013984:	6a3a      	ldr	r2, [r7, #32]
 8013986:	429a      	cmp	r2, r3
 8013988:	d20b      	bcs.n	80139a2 <vTaskDelayUntil+0xa6>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 801398a:	687b      	ldr	r3, [r7, #4]
 801398c:	681b      	ldr	r3, [r3, #0]
 801398e:	69fa      	ldr	r2, [r7, #28]
 8013990:	429a      	cmp	r2, r3
 8013992:	d211      	bcs.n	80139b8 <vTaskDelayUntil+0xbc>
 8013994:	69fa      	ldr	r2, [r7, #28]
 8013996:	6a3b      	ldr	r3, [r7, #32]
 8013998:	429a      	cmp	r2, r3
 801399a:	d90d      	bls.n	80139b8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 801399c:	2301      	movs	r3, #1
 801399e:	627b      	str	r3, [r7, #36]	; 0x24
 80139a0:	e00a      	b.n	80139b8 <vTaskDelayUntil+0xbc>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 80139a2:	687b      	ldr	r3, [r7, #4]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	69fa      	ldr	r2, [r7, #28]
 80139a8:	429a      	cmp	r2, r3
 80139aa:	d303      	bcc.n	80139b4 <vTaskDelayUntil+0xb8>
 80139ac:	69fa      	ldr	r2, [r7, #28]
 80139ae:	6a3b      	ldr	r3, [r7, #32]
 80139b0:	429a      	cmp	r2, r3
 80139b2:	d901      	bls.n	80139b8 <vTaskDelayUntil+0xbc>
				{
					xShouldDelay = pdTRUE;
 80139b4:	2301      	movs	r3, #1
 80139b6:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 80139b8:	687b      	ldr	r3, [r7, #4]
 80139ba:	69fa      	ldr	r2, [r7, #28]
 80139bc:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 80139be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80139c0:	2b00      	cmp	r3, #0
 80139c2:	d006      	beq.n	80139d2 <vTaskDelayUntil+0xd6>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 80139c4:	69fa      	ldr	r2, [r7, #28]
 80139c6:	6a3b      	ldr	r3, [r7, #32]
 80139c8:	1ad3      	subs	r3, r2, r3
 80139ca:	2100      	movs	r1, #0
 80139cc:	4618      	mov	r0, r3
 80139ce:	f000 fe71 	bl	80146b4 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 80139d2:	f000 f8c9 	bl	8013b68 <xTaskResumeAll>
 80139d6:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80139d8:	69bb      	ldr	r3, [r7, #24]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d107      	bne.n	80139ee <vTaskDelayUntil+0xf2>
		{
			portYIELD_WITHIN_API();
 80139de:	4b08      	ldr	r3, [pc, #32]	; (8013a00 <vTaskDelayUntil+0x104>)
 80139e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80139e4:	601a      	str	r2, [r3, #0]
 80139e6:	f3bf 8f4f 	dsb	sy
 80139ea:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80139ee:	bf00      	nop
 80139f0:	3728      	adds	r7, #40	; 0x28
 80139f2:	46bd      	mov	sp, r7
 80139f4:	bd80      	pop	{r7, pc}
 80139f6:	bf00      	nop
 80139f8:	2000668c 	.word	0x2000668c
 80139fc:	20006668 	.word	0x20006668
 8013a00:	e000ed04 	.word	0xe000ed04

08013a04 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b084      	sub	sp, #16
 8013a08:	af00      	add	r7, sp, #0
 8013a0a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8013a0c:	2300      	movs	r3, #0
 8013a0e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8013a10:	687b      	ldr	r3, [r7, #4]
 8013a12:	2b00      	cmp	r3, #0
 8013a14:	d019      	beq.n	8013a4a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8013a16:	4b14      	ldr	r3, [pc, #80]	; (8013a68 <vTaskDelay+0x64>)
 8013a18:	681b      	ldr	r3, [r3, #0]
 8013a1a:	2b00      	cmp	r3, #0
 8013a1c:	d00c      	beq.n	8013a38 <vTaskDelay+0x34>
	__asm volatile
 8013a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013a22:	b672      	cpsid	i
 8013a24:	f383 8811 	msr	BASEPRI, r3
 8013a28:	f3bf 8f6f 	isb	sy
 8013a2c:	f3bf 8f4f 	dsb	sy
 8013a30:	b662      	cpsie	i
 8013a32:	60bb      	str	r3, [r7, #8]
}
 8013a34:	bf00      	nop
 8013a36:	e7fe      	b.n	8013a36 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8013a38:	f000 f888 	bl	8013b4c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8013a3c:	2100      	movs	r1, #0
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f000 fe38 	bl	80146b4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8013a44:	f000 f890 	bl	8013b68 <xTaskResumeAll>
 8013a48:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8013a4a:	68fb      	ldr	r3, [r7, #12]
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d107      	bne.n	8013a60 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8013a50:	4b06      	ldr	r3, [pc, #24]	; (8013a6c <vTaskDelay+0x68>)
 8013a52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013a56:	601a      	str	r2, [r3, #0]
 8013a58:	f3bf 8f4f 	dsb	sy
 8013a5c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8013a60:	bf00      	nop
 8013a62:	3710      	adds	r7, #16
 8013a64:	46bd      	mov	sp, r7
 8013a66:	bd80      	pop	{r7, pc}
 8013a68:	2000668c 	.word	0x2000668c
 8013a6c:	e000ed04 	.word	0xe000ed04

08013a70 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8013a70:	b580      	push	{r7, lr}
 8013a72:	b08a      	sub	sp, #40	; 0x28
 8013a74:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8013a76:	2300      	movs	r3, #0
 8013a78:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8013a7a:	2300      	movs	r3, #0
 8013a7c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8013a7e:	463a      	mov	r2, r7
 8013a80:	1d39      	adds	r1, r7, #4
 8013a82:	f107 0308 	add.w	r3, r7, #8
 8013a86:	4618      	mov	r0, r3
 8013a88:	f7f6 fc2c 	bl	800a2e4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8013a8c:	6839      	ldr	r1, [r7, #0]
 8013a8e:	687b      	ldr	r3, [r7, #4]
 8013a90:	68ba      	ldr	r2, [r7, #8]
 8013a92:	9202      	str	r2, [sp, #8]
 8013a94:	9301      	str	r3, [sp, #4]
 8013a96:	2300      	movs	r3, #0
 8013a98:	9300      	str	r3, [sp, #0]
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	460a      	mov	r2, r1
 8013a9e:	4923      	ldr	r1, [pc, #140]	; (8013b2c <vTaskStartScheduler+0xbc>)
 8013aa0:	4823      	ldr	r0, [pc, #140]	; (8013b30 <vTaskStartScheduler+0xc0>)
 8013aa2:	f7ff fce7 	bl	8013474 <xTaskCreateStatic>
 8013aa6:	4603      	mov	r3, r0
 8013aa8:	4a22      	ldr	r2, [pc, #136]	; (8013b34 <vTaskStartScheduler+0xc4>)
 8013aaa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8013aac:	4b21      	ldr	r3, [pc, #132]	; (8013b34 <vTaskStartScheduler+0xc4>)
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	2b00      	cmp	r3, #0
 8013ab2:	d002      	beq.n	8013aba <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8013ab4:	2301      	movs	r3, #1
 8013ab6:	617b      	str	r3, [r7, #20]
 8013ab8:	e001      	b.n	8013abe <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8013aba:	2300      	movs	r3, #0
 8013abc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8013abe:	697b      	ldr	r3, [r7, #20]
 8013ac0:	2b01      	cmp	r3, #1
 8013ac2:	d11d      	bne.n	8013b00 <vTaskStartScheduler+0x90>
	__asm volatile
 8013ac4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ac8:	b672      	cpsid	i
 8013aca:	f383 8811 	msr	BASEPRI, r3
 8013ace:	f3bf 8f6f 	isb	sy
 8013ad2:	f3bf 8f4f 	dsb	sy
 8013ad6:	b662      	cpsie	i
 8013ad8:	613b      	str	r3, [r7, #16]
}
 8013ada:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013adc:	4b16      	ldr	r3, [pc, #88]	; (8013b38 <vTaskStartScheduler+0xc8>)
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	334c      	adds	r3, #76	; 0x4c
 8013ae2:	4a16      	ldr	r2, [pc, #88]	; (8013b3c <vTaskStartScheduler+0xcc>)
 8013ae4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8013ae6:	4b16      	ldr	r3, [pc, #88]	; (8013b40 <vTaskStartScheduler+0xd0>)
 8013ae8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013aec:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8013aee:	4b15      	ldr	r3, [pc, #84]	; (8013b44 <vTaskStartScheduler+0xd4>)
 8013af0:	2201      	movs	r2, #1
 8013af2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8013af4:	4b14      	ldr	r3, [pc, #80]	; (8013b48 <vTaskStartScheduler+0xd8>)
 8013af6:	2200      	movs	r2, #0
 8013af8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8013afa:	f000 fed1 	bl	80148a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8013afe:	e010      	b.n	8013b22 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8013b00:	697b      	ldr	r3, [r7, #20]
 8013b02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8013b06:	d10c      	bne.n	8013b22 <vTaskStartScheduler+0xb2>
	__asm volatile
 8013b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b0c:	b672      	cpsid	i
 8013b0e:	f383 8811 	msr	BASEPRI, r3
 8013b12:	f3bf 8f6f 	isb	sy
 8013b16:	f3bf 8f4f 	dsb	sy
 8013b1a:	b662      	cpsie	i
 8013b1c:	60fb      	str	r3, [r7, #12]
}
 8013b1e:	bf00      	nop
 8013b20:	e7fe      	b.n	8013b20 <vTaskStartScheduler+0xb0>
}
 8013b22:	bf00      	nop
 8013b24:	3718      	adds	r7, #24
 8013b26:	46bd      	mov	sp, r7
 8013b28:	bd80      	pop	{r7, pc}
 8013b2a:	bf00      	nop
 8013b2c:	08025828 	.word	0x08025828
 8013b30:	08014149 	.word	0x08014149
 8013b34:	20006688 	.word	0x20006688
 8013b38:	20006564 	.word	0x20006564
 8013b3c:	20000038 	.word	0x20000038
 8013b40:	20006684 	.word	0x20006684
 8013b44:	20006670 	.word	0x20006670
 8013b48:	20006668 	.word	0x20006668

08013b4c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8013b50:	4b04      	ldr	r3, [pc, #16]	; (8013b64 <vTaskSuspendAll+0x18>)
 8013b52:	681b      	ldr	r3, [r3, #0]
 8013b54:	3301      	adds	r3, #1
 8013b56:	4a03      	ldr	r2, [pc, #12]	; (8013b64 <vTaskSuspendAll+0x18>)
 8013b58:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8013b5a:	bf00      	nop
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b62:	4770      	bx	lr
 8013b64:	2000668c 	.word	0x2000668c

08013b68 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8013b68:	b580      	push	{r7, lr}
 8013b6a:	b084      	sub	sp, #16
 8013b6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8013b6e:	2300      	movs	r3, #0
 8013b70:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8013b72:	2300      	movs	r3, #0
 8013b74:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8013b76:	4b42      	ldr	r3, [pc, #264]	; (8013c80 <xTaskResumeAll+0x118>)
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	2b00      	cmp	r3, #0
 8013b7c:	d10c      	bne.n	8013b98 <xTaskResumeAll+0x30>
	__asm volatile
 8013b7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013b82:	b672      	cpsid	i
 8013b84:	f383 8811 	msr	BASEPRI, r3
 8013b88:	f3bf 8f6f 	isb	sy
 8013b8c:	f3bf 8f4f 	dsb	sy
 8013b90:	b662      	cpsie	i
 8013b92:	603b      	str	r3, [r7, #0]
}
 8013b94:	bf00      	nop
 8013b96:	e7fe      	b.n	8013b96 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8013b98:	f000 ff00 	bl	801499c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8013b9c:	4b38      	ldr	r3, [pc, #224]	; (8013c80 <xTaskResumeAll+0x118>)
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	3b01      	subs	r3, #1
 8013ba2:	4a37      	ldr	r2, [pc, #220]	; (8013c80 <xTaskResumeAll+0x118>)
 8013ba4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013ba6:	4b36      	ldr	r3, [pc, #216]	; (8013c80 <xTaskResumeAll+0x118>)
 8013ba8:	681b      	ldr	r3, [r3, #0]
 8013baa:	2b00      	cmp	r3, #0
 8013bac:	d161      	bne.n	8013c72 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8013bae:	4b35      	ldr	r3, [pc, #212]	; (8013c84 <xTaskResumeAll+0x11c>)
 8013bb0:	681b      	ldr	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d05d      	beq.n	8013c72 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013bb6:	e02e      	b.n	8013c16 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013bb8:	4b33      	ldr	r3, [pc, #204]	; (8013c88 <xTaskResumeAll+0x120>)
 8013bba:	68db      	ldr	r3, [r3, #12]
 8013bbc:	68db      	ldr	r3, [r3, #12]
 8013bbe:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013bc0:	68fb      	ldr	r3, [r7, #12]
 8013bc2:	3318      	adds	r3, #24
 8013bc4:	4618      	mov	r0, r3
 8013bc6:	f7fe fc1c 	bl	8012402 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	3304      	adds	r3, #4
 8013bce:	4618      	mov	r0, r3
 8013bd0:	f7fe fc17 	bl	8012402 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013bd8:	2201      	movs	r2, #1
 8013bda:	409a      	lsls	r2, r3
 8013bdc:	4b2b      	ldr	r3, [pc, #172]	; (8013c8c <xTaskResumeAll+0x124>)
 8013bde:	681b      	ldr	r3, [r3, #0]
 8013be0:	4313      	orrs	r3, r2
 8013be2:	4a2a      	ldr	r2, [pc, #168]	; (8013c8c <xTaskResumeAll+0x124>)
 8013be4:	6013      	str	r3, [r2, #0]
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013bea:	4613      	mov	r3, r2
 8013bec:	009b      	lsls	r3, r3, #2
 8013bee:	4413      	add	r3, r2
 8013bf0:	009b      	lsls	r3, r3, #2
 8013bf2:	4a27      	ldr	r2, [pc, #156]	; (8013c90 <xTaskResumeAll+0x128>)
 8013bf4:	441a      	add	r2, r3
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	3304      	adds	r3, #4
 8013bfa:	4619      	mov	r1, r3
 8013bfc:	4610      	mov	r0, r2
 8013bfe:	f7fe fba3 	bl	8012348 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013c06:	4b23      	ldr	r3, [pc, #140]	; (8013c94 <xTaskResumeAll+0x12c>)
 8013c08:	681b      	ldr	r3, [r3, #0]
 8013c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013c0c:	429a      	cmp	r2, r3
 8013c0e:	d302      	bcc.n	8013c16 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8013c10:	4b21      	ldr	r3, [pc, #132]	; (8013c98 <xTaskResumeAll+0x130>)
 8013c12:	2201      	movs	r2, #1
 8013c14:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8013c16:	4b1c      	ldr	r3, [pc, #112]	; (8013c88 <xTaskResumeAll+0x120>)
 8013c18:	681b      	ldr	r3, [r3, #0]
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d1cc      	bne.n	8013bb8 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	2b00      	cmp	r3, #0
 8013c22:	d001      	beq.n	8013c28 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8013c24:	f000 fb4c 	bl	80142c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8013c28:	4b1c      	ldr	r3, [pc, #112]	; (8013c9c <xTaskResumeAll+0x134>)
 8013c2a:	681b      	ldr	r3, [r3, #0]
 8013c2c:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8013c2e:	687b      	ldr	r3, [r7, #4]
 8013c30:	2b00      	cmp	r3, #0
 8013c32:	d010      	beq.n	8013c56 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8013c34:	f000 f858 	bl	8013ce8 <xTaskIncrementTick>
 8013c38:	4603      	mov	r3, r0
 8013c3a:	2b00      	cmp	r3, #0
 8013c3c:	d002      	beq.n	8013c44 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8013c3e:	4b16      	ldr	r3, [pc, #88]	; (8013c98 <xTaskResumeAll+0x130>)
 8013c40:	2201      	movs	r2, #1
 8013c42:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8013c44:	687b      	ldr	r3, [r7, #4]
 8013c46:	3b01      	subs	r3, #1
 8013c48:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8013c4a:	687b      	ldr	r3, [r7, #4]
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d1f1      	bne.n	8013c34 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8013c50:	4b12      	ldr	r3, [pc, #72]	; (8013c9c <xTaskResumeAll+0x134>)
 8013c52:	2200      	movs	r2, #0
 8013c54:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8013c56:	4b10      	ldr	r3, [pc, #64]	; (8013c98 <xTaskResumeAll+0x130>)
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	2b00      	cmp	r3, #0
 8013c5c:	d009      	beq.n	8013c72 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8013c5e:	2301      	movs	r3, #1
 8013c60:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8013c62:	4b0f      	ldr	r3, [pc, #60]	; (8013ca0 <xTaskResumeAll+0x138>)
 8013c64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8013c68:	601a      	str	r2, [r3, #0]
 8013c6a:	f3bf 8f4f 	dsb	sy
 8013c6e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8013c72:	f000 fec7 	bl	8014a04 <vPortExitCritical>

	return xAlreadyYielded;
 8013c76:	68bb      	ldr	r3, [r7, #8]
}
 8013c78:	4618      	mov	r0, r3
 8013c7a:	3710      	adds	r7, #16
 8013c7c:	46bd      	mov	sp, r7
 8013c7e:	bd80      	pop	{r7, pc}
 8013c80:	2000668c 	.word	0x2000668c
 8013c84:	20006664 	.word	0x20006664
 8013c88:	20006624 	.word	0x20006624
 8013c8c:	2000666c 	.word	0x2000666c
 8013c90:	20006568 	.word	0x20006568
 8013c94:	20006564 	.word	0x20006564
 8013c98:	20006678 	.word	0x20006678
 8013c9c:	20006674 	.word	0x20006674
 8013ca0:	e000ed04 	.word	0xe000ed04

08013ca4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8013ca4:	b480      	push	{r7}
 8013ca6:	b083      	sub	sp, #12
 8013ca8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8013caa:	4b05      	ldr	r3, [pc, #20]	; (8013cc0 <xTaskGetTickCount+0x1c>)
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8013cb0:	687b      	ldr	r3, [r7, #4]
}
 8013cb2:	4618      	mov	r0, r3
 8013cb4:	370c      	adds	r7, #12
 8013cb6:	46bd      	mov	sp, r7
 8013cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cbc:	4770      	bx	lr
 8013cbe:	bf00      	nop
 8013cc0:	20006668 	.word	0x20006668

08013cc4 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8013cc4:	b580      	push	{r7, lr}
 8013cc6:	b082      	sub	sp, #8
 8013cc8:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8013cca:	f000 ff4f 	bl	8014b6c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8013cce:	2300      	movs	r3, #0
 8013cd0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8013cd2:	4b04      	ldr	r3, [pc, #16]	; (8013ce4 <xTaskGetTickCountFromISR+0x20>)
 8013cd4:	681b      	ldr	r3, [r3, #0]
 8013cd6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8013cd8:	683b      	ldr	r3, [r7, #0]
}
 8013cda:	4618      	mov	r0, r3
 8013cdc:	3708      	adds	r7, #8
 8013cde:	46bd      	mov	sp, r7
 8013ce0:	bd80      	pop	{r7, pc}
 8013ce2:	bf00      	nop
 8013ce4:	20006668 	.word	0x20006668

08013ce8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8013ce8:	b580      	push	{r7, lr}
 8013cea:	b086      	sub	sp, #24
 8013cec:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8013cee:	2300      	movs	r3, #0
 8013cf0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013cf2:	4b4f      	ldr	r3, [pc, #316]	; (8013e30 <xTaskIncrementTick+0x148>)
 8013cf4:	681b      	ldr	r3, [r3, #0]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	f040 808a 	bne.w	8013e10 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8013cfc:	4b4d      	ldr	r3, [pc, #308]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013cfe:	681b      	ldr	r3, [r3, #0]
 8013d00:	3301      	adds	r3, #1
 8013d02:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8013d04:	4a4b      	ldr	r2, [pc, #300]	; (8013e34 <xTaskIncrementTick+0x14c>)
 8013d06:	693b      	ldr	r3, [r7, #16]
 8013d08:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8013d0a:	693b      	ldr	r3, [r7, #16]
 8013d0c:	2b00      	cmp	r3, #0
 8013d0e:	d122      	bne.n	8013d56 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8013d10:	4b49      	ldr	r3, [pc, #292]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d12:	681b      	ldr	r3, [r3, #0]
 8013d14:	681b      	ldr	r3, [r3, #0]
 8013d16:	2b00      	cmp	r3, #0
 8013d18:	d00c      	beq.n	8013d34 <xTaskIncrementTick+0x4c>
	__asm volatile
 8013d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013d1e:	b672      	cpsid	i
 8013d20:	f383 8811 	msr	BASEPRI, r3
 8013d24:	f3bf 8f6f 	isb	sy
 8013d28:	f3bf 8f4f 	dsb	sy
 8013d2c:	b662      	cpsie	i
 8013d2e:	603b      	str	r3, [r7, #0]
}
 8013d30:	bf00      	nop
 8013d32:	e7fe      	b.n	8013d32 <xTaskIncrementTick+0x4a>
 8013d34:	4b40      	ldr	r3, [pc, #256]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d36:	681b      	ldr	r3, [r3, #0]
 8013d38:	60fb      	str	r3, [r7, #12]
 8013d3a:	4b40      	ldr	r3, [pc, #256]	; (8013e3c <xTaskIncrementTick+0x154>)
 8013d3c:	681b      	ldr	r3, [r3, #0]
 8013d3e:	4a3e      	ldr	r2, [pc, #248]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d40:	6013      	str	r3, [r2, #0]
 8013d42:	4a3e      	ldr	r2, [pc, #248]	; (8013e3c <xTaskIncrementTick+0x154>)
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	6013      	str	r3, [r2, #0]
 8013d48:	4b3d      	ldr	r3, [pc, #244]	; (8013e40 <xTaskIncrementTick+0x158>)
 8013d4a:	681b      	ldr	r3, [r3, #0]
 8013d4c:	3301      	adds	r3, #1
 8013d4e:	4a3c      	ldr	r2, [pc, #240]	; (8013e40 <xTaskIncrementTick+0x158>)
 8013d50:	6013      	str	r3, [r2, #0]
 8013d52:	f000 fab5 	bl	80142c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8013d56:	4b3b      	ldr	r3, [pc, #236]	; (8013e44 <xTaskIncrementTick+0x15c>)
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	693a      	ldr	r2, [r7, #16]
 8013d5c:	429a      	cmp	r2, r3
 8013d5e:	d348      	bcc.n	8013df2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013d60:	4b35      	ldr	r3, [pc, #212]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	2b00      	cmp	r3, #0
 8013d68:	d104      	bne.n	8013d74 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8013d6a:	4b36      	ldr	r3, [pc, #216]	; (8013e44 <xTaskIncrementTick+0x15c>)
 8013d6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8013d70:	601a      	str	r2, [r3, #0]
					break;
 8013d72:	e03e      	b.n	8013df2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013d74:	4b30      	ldr	r3, [pc, #192]	; (8013e38 <xTaskIncrementTick+0x150>)
 8013d76:	681b      	ldr	r3, [r3, #0]
 8013d78:	68db      	ldr	r3, [r3, #12]
 8013d7a:	68db      	ldr	r3, [r3, #12]
 8013d7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8013d7e:	68bb      	ldr	r3, [r7, #8]
 8013d80:	685b      	ldr	r3, [r3, #4]
 8013d82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8013d84:	693a      	ldr	r2, [r7, #16]
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	429a      	cmp	r2, r3
 8013d8a:	d203      	bcs.n	8013d94 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8013d8c:	4a2d      	ldr	r2, [pc, #180]	; (8013e44 <xTaskIncrementTick+0x15c>)
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8013d92:	e02e      	b.n	8013df2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8013d94:	68bb      	ldr	r3, [r7, #8]
 8013d96:	3304      	adds	r3, #4
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7fe fb32 	bl	8012402 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8013d9e:	68bb      	ldr	r3, [r7, #8]
 8013da0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013da2:	2b00      	cmp	r3, #0
 8013da4:	d004      	beq.n	8013db0 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8013da6:	68bb      	ldr	r3, [r7, #8]
 8013da8:	3318      	adds	r3, #24
 8013daa:	4618      	mov	r0, r3
 8013dac:	f7fe fb29 	bl	8012402 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8013db0:	68bb      	ldr	r3, [r7, #8]
 8013db2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013db4:	2201      	movs	r2, #1
 8013db6:	409a      	lsls	r2, r3
 8013db8:	4b23      	ldr	r3, [pc, #140]	; (8013e48 <xTaskIncrementTick+0x160>)
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	4313      	orrs	r3, r2
 8013dbe:	4a22      	ldr	r2, [pc, #136]	; (8013e48 <xTaskIncrementTick+0x160>)
 8013dc0:	6013      	str	r3, [r2, #0]
 8013dc2:	68bb      	ldr	r3, [r7, #8]
 8013dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013dc6:	4613      	mov	r3, r2
 8013dc8:	009b      	lsls	r3, r3, #2
 8013dca:	4413      	add	r3, r2
 8013dcc:	009b      	lsls	r3, r3, #2
 8013dce:	4a1f      	ldr	r2, [pc, #124]	; (8013e4c <xTaskIncrementTick+0x164>)
 8013dd0:	441a      	add	r2, r3
 8013dd2:	68bb      	ldr	r3, [r7, #8]
 8013dd4:	3304      	adds	r3, #4
 8013dd6:	4619      	mov	r1, r3
 8013dd8:	4610      	mov	r0, r2
 8013dda:	f7fe fab5 	bl	8012348 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8013dde:	68bb      	ldr	r3, [r7, #8]
 8013de0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013de2:	4b1b      	ldr	r3, [pc, #108]	; (8013e50 <xTaskIncrementTick+0x168>)
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013de8:	429a      	cmp	r2, r3
 8013dea:	d3b9      	bcc.n	8013d60 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8013dec:	2301      	movs	r3, #1
 8013dee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8013df0:	e7b6      	b.n	8013d60 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8013df2:	4b17      	ldr	r3, [pc, #92]	; (8013e50 <xTaskIncrementTick+0x168>)
 8013df4:	681b      	ldr	r3, [r3, #0]
 8013df6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013df8:	4914      	ldr	r1, [pc, #80]	; (8013e4c <xTaskIncrementTick+0x164>)
 8013dfa:	4613      	mov	r3, r2
 8013dfc:	009b      	lsls	r3, r3, #2
 8013dfe:	4413      	add	r3, r2
 8013e00:	009b      	lsls	r3, r3, #2
 8013e02:	440b      	add	r3, r1
 8013e04:	681b      	ldr	r3, [r3, #0]
 8013e06:	2b01      	cmp	r3, #1
 8013e08:	d907      	bls.n	8013e1a <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8013e0a:	2301      	movs	r3, #1
 8013e0c:	617b      	str	r3, [r7, #20]
 8013e0e:	e004      	b.n	8013e1a <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8013e10:	4b10      	ldr	r3, [pc, #64]	; (8013e54 <xTaskIncrementTick+0x16c>)
 8013e12:	681b      	ldr	r3, [r3, #0]
 8013e14:	3301      	adds	r3, #1
 8013e16:	4a0f      	ldr	r2, [pc, #60]	; (8013e54 <xTaskIncrementTick+0x16c>)
 8013e18:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8013e1a:	4b0f      	ldr	r3, [pc, #60]	; (8013e58 <xTaskIncrementTick+0x170>)
 8013e1c:	681b      	ldr	r3, [r3, #0]
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d001      	beq.n	8013e26 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8013e22:	2301      	movs	r3, #1
 8013e24:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8013e26:	697b      	ldr	r3, [r7, #20]
}
 8013e28:	4618      	mov	r0, r3
 8013e2a:	3718      	adds	r7, #24
 8013e2c:	46bd      	mov	sp, r7
 8013e2e:	bd80      	pop	{r7, pc}
 8013e30:	2000668c 	.word	0x2000668c
 8013e34:	20006668 	.word	0x20006668
 8013e38:	2000661c 	.word	0x2000661c
 8013e3c:	20006620 	.word	0x20006620
 8013e40:	2000667c 	.word	0x2000667c
 8013e44:	20006684 	.word	0x20006684
 8013e48:	2000666c 	.word	0x2000666c
 8013e4c:	20006568 	.word	0x20006568
 8013e50:	20006564 	.word	0x20006564
 8013e54:	20006674 	.word	0x20006674
 8013e58:	20006678 	.word	0x20006678

08013e5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8013e5c:	b480      	push	{r7}
 8013e5e:	b087      	sub	sp, #28
 8013e60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8013e62:	4b2a      	ldr	r3, [pc, #168]	; (8013f0c <vTaskSwitchContext+0xb0>)
 8013e64:	681b      	ldr	r3, [r3, #0]
 8013e66:	2b00      	cmp	r3, #0
 8013e68:	d003      	beq.n	8013e72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8013e6a:	4b29      	ldr	r3, [pc, #164]	; (8013f10 <vTaskSwitchContext+0xb4>)
 8013e6c:	2201      	movs	r2, #1
 8013e6e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8013e70:	e046      	b.n	8013f00 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8013e72:	4b27      	ldr	r3, [pc, #156]	; (8013f10 <vTaskSwitchContext+0xb4>)
 8013e74:	2200      	movs	r2, #0
 8013e76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013e78:	4b26      	ldr	r3, [pc, #152]	; (8013f14 <vTaskSwitchContext+0xb8>)
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8013e7e:	68fb      	ldr	r3, [r7, #12]
 8013e80:	fab3 f383 	clz	r3, r3
 8013e84:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8013e86:	7afb      	ldrb	r3, [r7, #11]
 8013e88:	f1c3 031f 	rsb	r3, r3, #31
 8013e8c:	617b      	str	r3, [r7, #20]
 8013e8e:	4922      	ldr	r1, [pc, #136]	; (8013f18 <vTaskSwitchContext+0xbc>)
 8013e90:	697a      	ldr	r2, [r7, #20]
 8013e92:	4613      	mov	r3, r2
 8013e94:	009b      	lsls	r3, r3, #2
 8013e96:	4413      	add	r3, r2
 8013e98:	009b      	lsls	r3, r3, #2
 8013e9a:	440b      	add	r3, r1
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d10c      	bne.n	8013ebc <vTaskSwitchContext+0x60>
	__asm volatile
 8013ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013ea6:	b672      	cpsid	i
 8013ea8:	f383 8811 	msr	BASEPRI, r3
 8013eac:	f3bf 8f6f 	isb	sy
 8013eb0:	f3bf 8f4f 	dsb	sy
 8013eb4:	b662      	cpsie	i
 8013eb6:	607b      	str	r3, [r7, #4]
}
 8013eb8:	bf00      	nop
 8013eba:	e7fe      	b.n	8013eba <vTaskSwitchContext+0x5e>
 8013ebc:	697a      	ldr	r2, [r7, #20]
 8013ebe:	4613      	mov	r3, r2
 8013ec0:	009b      	lsls	r3, r3, #2
 8013ec2:	4413      	add	r3, r2
 8013ec4:	009b      	lsls	r3, r3, #2
 8013ec6:	4a14      	ldr	r2, [pc, #80]	; (8013f18 <vTaskSwitchContext+0xbc>)
 8013ec8:	4413      	add	r3, r2
 8013eca:	613b      	str	r3, [r7, #16]
 8013ecc:	693b      	ldr	r3, [r7, #16]
 8013ece:	685b      	ldr	r3, [r3, #4]
 8013ed0:	685a      	ldr	r2, [r3, #4]
 8013ed2:	693b      	ldr	r3, [r7, #16]
 8013ed4:	605a      	str	r2, [r3, #4]
 8013ed6:	693b      	ldr	r3, [r7, #16]
 8013ed8:	685a      	ldr	r2, [r3, #4]
 8013eda:	693b      	ldr	r3, [r7, #16]
 8013edc:	3308      	adds	r3, #8
 8013ede:	429a      	cmp	r2, r3
 8013ee0:	d104      	bne.n	8013eec <vTaskSwitchContext+0x90>
 8013ee2:	693b      	ldr	r3, [r7, #16]
 8013ee4:	685b      	ldr	r3, [r3, #4]
 8013ee6:	685a      	ldr	r2, [r3, #4]
 8013ee8:	693b      	ldr	r3, [r7, #16]
 8013eea:	605a      	str	r2, [r3, #4]
 8013eec:	693b      	ldr	r3, [r7, #16]
 8013eee:	685b      	ldr	r3, [r3, #4]
 8013ef0:	68db      	ldr	r3, [r3, #12]
 8013ef2:	4a0a      	ldr	r2, [pc, #40]	; (8013f1c <vTaskSwitchContext+0xc0>)
 8013ef4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8013ef6:	4b09      	ldr	r3, [pc, #36]	; (8013f1c <vTaskSwitchContext+0xc0>)
 8013ef8:	681b      	ldr	r3, [r3, #0]
 8013efa:	334c      	adds	r3, #76	; 0x4c
 8013efc:	4a08      	ldr	r2, [pc, #32]	; (8013f20 <vTaskSwitchContext+0xc4>)
 8013efe:	6013      	str	r3, [r2, #0]
}
 8013f00:	bf00      	nop
 8013f02:	371c      	adds	r7, #28
 8013f04:	46bd      	mov	sp, r7
 8013f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013f0a:	4770      	bx	lr
 8013f0c:	2000668c 	.word	0x2000668c
 8013f10:	20006678 	.word	0x20006678
 8013f14:	2000666c 	.word	0x2000666c
 8013f18:	20006568 	.word	0x20006568
 8013f1c:	20006564 	.word	0x20006564
 8013f20:	20000038 	.word	0x20000038

08013f24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8013f24:	b580      	push	{r7, lr}
 8013f26:	b084      	sub	sp, #16
 8013f28:	af00      	add	r7, sp, #0
 8013f2a:	6078      	str	r0, [r7, #4]
 8013f2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8013f2e:	687b      	ldr	r3, [r7, #4]
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d10c      	bne.n	8013f4e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8013f34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f38:	b672      	cpsid	i
 8013f3a:	f383 8811 	msr	BASEPRI, r3
 8013f3e:	f3bf 8f6f 	isb	sy
 8013f42:	f3bf 8f4f 	dsb	sy
 8013f46:	b662      	cpsie	i
 8013f48:	60fb      	str	r3, [r7, #12]
}
 8013f4a:	bf00      	nop
 8013f4c:	e7fe      	b.n	8013f4c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8013f4e:	4b07      	ldr	r3, [pc, #28]	; (8013f6c <vTaskPlaceOnEventList+0x48>)
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	3318      	adds	r3, #24
 8013f54:	4619      	mov	r1, r3
 8013f56:	6878      	ldr	r0, [r7, #4]
 8013f58:	f7fe fa1a 	bl	8012390 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8013f5c:	2101      	movs	r1, #1
 8013f5e:	6838      	ldr	r0, [r7, #0]
 8013f60:	f000 fba8 	bl	80146b4 <prvAddCurrentTaskToDelayedList>
}
 8013f64:	bf00      	nop
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}
 8013f6c:	20006564 	.word	0x20006564

08013f70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8013f70:	b580      	push	{r7, lr}
 8013f72:	b086      	sub	sp, #24
 8013f74:	af00      	add	r7, sp, #0
 8013f76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8013f78:	687b      	ldr	r3, [r7, #4]
 8013f7a:	68db      	ldr	r3, [r3, #12]
 8013f7c:	68db      	ldr	r3, [r3, #12]
 8013f7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8013f80:	693b      	ldr	r3, [r7, #16]
 8013f82:	2b00      	cmp	r3, #0
 8013f84:	d10c      	bne.n	8013fa0 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8013f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8013f8a:	b672      	cpsid	i
 8013f8c:	f383 8811 	msr	BASEPRI, r3
 8013f90:	f3bf 8f6f 	isb	sy
 8013f94:	f3bf 8f4f 	dsb	sy
 8013f98:	b662      	cpsie	i
 8013f9a:	60fb      	str	r3, [r7, #12]
}
 8013f9c:	bf00      	nop
 8013f9e:	e7fe      	b.n	8013f9e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8013fa0:	693b      	ldr	r3, [r7, #16]
 8013fa2:	3318      	adds	r3, #24
 8013fa4:	4618      	mov	r0, r3
 8013fa6:	f7fe fa2c 	bl	8012402 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8013faa:	4b1d      	ldr	r3, [pc, #116]	; (8014020 <xTaskRemoveFromEventList+0xb0>)
 8013fac:	681b      	ldr	r3, [r3, #0]
 8013fae:	2b00      	cmp	r3, #0
 8013fb0:	d11c      	bne.n	8013fec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8013fb2:	693b      	ldr	r3, [r7, #16]
 8013fb4:	3304      	adds	r3, #4
 8013fb6:	4618      	mov	r0, r3
 8013fb8:	f7fe fa23 	bl	8012402 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8013fc0:	2201      	movs	r2, #1
 8013fc2:	409a      	lsls	r2, r3
 8013fc4:	4b17      	ldr	r3, [pc, #92]	; (8014024 <xTaskRemoveFromEventList+0xb4>)
 8013fc6:	681b      	ldr	r3, [r3, #0]
 8013fc8:	4313      	orrs	r3, r2
 8013fca:	4a16      	ldr	r2, [pc, #88]	; (8014024 <xTaskRemoveFromEventList+0xb4>)
 8013fcc:	6013      	str	r3, [r2, #0]
 8013fce:	693b      	ldr	r3, [r7, #16]
 8013fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013fd2:	4613      	mov	r3, r2
 8013fd4:	009b      	lsls	r3, r3, #2
 8013fd6:	4413      	add	r3, r2
 8013fd8:	009b      	lsls	r3, r3, #2
 8013fda:	4a13      	ldr	r2, [pc, #76]	; (8014028 <xTaskRemoveFromEventList+0xb8>)
 8013fdc:	441a      	add	r2, r3
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	3304      	adds	r3, #4
 8013fe2:	4619      	mov	r1, r3
 8013fe4:	4610      	mov	r0, r2
 8013fe6:	f7fe f9af 	bl	8012348 <vListInsertEnd>
 8013fea:	e005      	b.n	8013ff8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8013fec:	693b      	ldr	r3, [r7, #16]
 8013fee:	3318      	adds	r3, #24
 8013ff0:	4619      	mov	r1, r3
 8013ff2:	480e      	ldr	r0, [pc, #56]	; (801402c <xTaskRemoveFromEventList+0xbc>)
 8013ff4:	f7fe f9a8 	bl	8012348 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8013ffc:	4b0c      	ldr	r3, [pc, #48]	; (8014030 <xTaskRemoveFromEventList+0xc0>)
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014002:	429a      	cmp	r2, r3
 8014004:	d905      	bls.n	8014012 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8014006:	2301      	movs	r3, #1
 8014008:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 801400a:	4b0a      	ldr	r3, [pc, #40]	; (8014034 <xTaskRemoveFromEventList+0xc4>)
 801400c:	2201      	movs	r2, #1
 801400e:	601a      	str	r2, [r3, #0]
 8014010:	e001      	b.n	8014016 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8014012:	2300      	movs	r3, #0
 8014014:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8014016:	697b      	ldr	r3, [r7, #20]
}
 8014018:	4618      	mov	r0, r3
 801401a:	3718      	adds	r7, #24
 801401c:	46bd      	mov	sp, r7
 801401e:	bd80      	pop	{r7, pc}
 8014020:	2000668c 	.word	0x2000668c
 8014024:	2000666c 	.word	0x2000666c
 8014028:	20006568 	.word	0x20006568
 801402c:	20006624 	.word	0x20006624
 8014030:	20006564 	.word	0x20006564
 8014034:	20006678 	.word	0x20006678

08014038 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8014038:	b480      	push	{r7}
 801403a:	b083      	sub	sp, #12
 801403c:	af00      	add	r7, sp, #0
 801403e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8014040:	4b06      	ldr	r3, [pc, #24]	; (801405c <vTaskInternalSetTimeOutState+0x24>)
 8014042:	681a      	ldr	r2, [r3, #0]
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8014048:	4b05      	ldr	r3, [pc, #20]	; (8014060 <vTaskInternalSetTimeOutState+0x28>)
 801404a:	681a      	ldr	r2, [r3, #0]
 801404c:	687b      	ldr	r3, [r7, #4]
 801404e:	605a      	str	r2, [r3, #4]
}
 8014050:	bf00      	nop
 8014052:	370c      	adds	r7, #12
 8014054:	46bd      	mov	sp, r7
 8014056:	f85d 7b04 	ldr.w	r7, [sp], #4
 801405a:	4770      	bx	lr
 801405c:	2000667c 	.word	0x2000667c
 8014060:	20006668 	.word	0x20006668

08014064 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8014064:	b580      	push	{r7, lr}
 8014066:	b088      	sub	sp, #32
 8014068:	af00      	add	r7, sp, #0
 801406a:	6078      	str	r0, [r7, #4]
 801406c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	2b00      	cmp	r3, #0
 8014072:	d10c      	bne.n	801408e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8014074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014078:	b672      	cpsid	i
 801407a:	f383 8811 	msr	BASEPRI, r3
 801407e:	f3bf 8f6f 	isb	sy
 8014082:	f3bf 8f4f 	dsb	sy
 8014086:	b662      	cpsie	i
 8014088:	613b      	str	r3, [r7, #16]
}
 801408a:	bf00      	nop
 801408c:	e7fe      	b.n	801408c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 801408e:	683b      	ldr	r3, [r7, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d10c      	bne.n	80140ae <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8014094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014098:	b672      	cpsid	i
 801409a:	f383 8811 	msr	BASEPRI, r3
 801409e:	f3bf 8f6f 	isb	sy
 80140a2:	f3bf 8f4f 	dsb	sy
 80140a6:	b662      	cpsie	i
 80140a8:	60fb      	str	r3, [r7, #12]
}
 80140aa:	bf00      	nop
 80140ac:	e7fe      	b.n	80140ac <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 80140ae:	f000 fc75 	bl	801499c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80140b2:	4b1d      	ldr	r3, [pc, #116]	; (8014128 <xTaskCheckForTimeOut+0xc4>)
 80140b4:	681b      	ldr	r3, [r3, #0]
 80140b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	685b      	ldr	r3, [r3, #4]
 80140bc:	69ba      	ldr	r2, [r7, #24]
 80140be:	1ad3      	subs	r3, r2, r3
 80140c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80140c2:	683b      	ldr	r3, [r7, #0]
 80140c4:	681b      	ldr	r3, [r3, #0]
 80140c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80140ca:	d102      	bne.n	80140d2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80140cc:	2300      	movs	r3, #0
 80140ce:	61fb      	str	r3, [r7, #28]
 80140d0:	e023      	b.n	801411a <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80140d2:	687b      	ldr	r3, [r7, #4]
 80140d4:	681a      	ldr	r2, [r3, #0]
 80140d6:	4b15      	ldr	r3, [pc, #84]	; (801412c <xTaskCheckForTimeOut+0xc8>)
 80140d8:	681b      	ldr	r3, [r3, #0]
 80140da:	429a      	cmp	r2, r3
 80140dc:	d007      	beq.n	80140ee <xTaskCheckForTimeOut+0x8a>
 80140de:	687b      	ldr	r3, [r7, #4]
 80140e0:	685b      	ldr	r3, [r3, #4]
 80140e2:	69ba      	ldr	r2, [r7, #24]
 80140e4:	429a      	cmp	r2, r3
 80140e6:	d302      	bcc.n	80140ee <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80140e8:	2301      	movs	r3, #1
 80140ea:	61fb      	str	r3, [r7, #28]
 80140ec:	e015      	b.n	801411a <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80140ee:	683b      	ldr	r3, [r7, #0]
 80140f0:	681b      	ldr	r3, [r3, #0]
 80140f2:	697a      	ldr	r2, [r7, #20]
 80140f4:	429a      	cmp	r2, r3
 80140f6:	d20b      	bcs.n	8014110 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80140f8:	683b      	ldr	r3, [r7, #0]
 80140fa:	681a      	ldr	r2, [r3, #0]
 80140fc:	697b      	ldr	r3, [r7, #20]
 80140fe:	1ad2      	subs	r2, r2, r3
 8014100:	683b      	ldr	r3, [r7, #0]
 8014102:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8014104:	6878      	ldr	r0, [r7, #4]
 8014106:	f7ff ff97 	bl	8014038 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 801410a:	2300      	movs	r3, #0
 801410c:	61fb      	str	r3, [r7, #28]
 801410e:	e004      	b.n	801411a <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8014110:	683b      	ldr	r3, [r7, #0]
 8014112:	2200      	movs	r2, #0
 8014114:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8014116:	2301      	movs	r3, #1
 8014118:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 801411a:	f000 fc73 	bl	8014a04 <vPortExitCritical>

	return xReturn;
 801411e:	69fb      	ldr	r3, [r7, #28]
}
 8014120:	4618      	mov	r0, r3
 8014122:	3720      	adds	r7, #32
 8014124:	46bd      	mov	sp, r7
 8014126:	bd80      	pop	{r7, pc}
 8014128:	20006668 	.word	0x20006668
 801412c:	2000667c 	.word	0x2000667c

08014130 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8014130:	b480      	push	{r7}
 8014132:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8014134:	4b03      	ldr	r3, [pc, #12]	; (8014144 <vTaskMissedYield+0x14>)
 8014136:	2201      	movs	r2, #1
 8014138:	601a      	str	r2, [r3, #0]
}
 801413a:	bf00      	nop
 801413c:	46bd      	mov	sp, r7
 801413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014142:	4770      	bx	lr
 8014144:	20006678 	.word	0x20006678

08014148 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8014148:	b580      	push	{r7, lr}
 801414a:	b082      	sub	sp, #8
 801414c:	af00      	add	r7, sp, #0
 801414e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8014150:	f000 f852 	bl	80141f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8014154:	4b06      	ldr	r3, [pc, #24]	; (8014170 <prvIdleTask+0x28>)
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d9f9      	bls.n	8014150 <prvIdleTask+0x8>
			{
				taskYIELD();
 801415c:	4b05      	ldr	r3, [pc, #20]	; (8014174 <prvIdleTask+0x2c>)
 801415e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014162:	601a      	str	r2, [r3, #0]
 8014164:	f3bf 8f4f 	dsb	sy
 8014168:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801416c:	e7f0      	b.n	8014150 <prvIdleTask+0x8>
 801416e:	bf00      	nop
 8014170:	20006568 	.word	0x20006568
 8014174:	e000ed04 	.word	0xe000ed04

08014178 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8014178:	b580      	push	{r7, lr}
 801417a:	b082      	sub	sp, #8
 801417c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801417e:	2300      	movs	r3, #0
 8014180:	607b      	str	r3, [r7, #4]
 8014182:	e00c      	b.n	801419e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8014184:	687a      	ldr	r2, [r7, #4]
 8014186:	4613      	mov	r3, r2
 8014188:	009b      	lsls	r3, r3, #2
 801418a:	4413      	add	r3, r2
 801418c:	009b      	lsls	r3, r3, #2
 801418e:	4a12      	ldr	r2, [pc, #72]	; (80141d8 <prvInitialiseTaskLists+0x60>)
 8014190:	4413      	add	r3, r2
 8014192:	4618      	mov	r0, r3
 8014194:	f7fe f8ab 	bl	80122ee <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8014198:	687b      	ldr	r3, [r7, #4]
 801419a:	3301      	adds	r3, #1
 801419c:	607b      	str	r3, [r7, #4]
 801419e:	687b      	ldr	r3, [r7, #4]
 80141a0:	2b06      	cmp	r3, #6
 80141a2:	d9ef      	bls.n	8014184 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80141a4:	480d      	ldr	r0, [pc, #52]	; (80141dc <prvInitialiseTaskLists+0x64>)
 80141a6:	f7fe f8a2 	bl	80122ee <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80141aa:	480d      	ldr	r0, [pc, #52]	; (80141e0 <prvInitialiseTaskLists+0x68>)
 80141ac:	f7fe f89f 	bl	80122ee <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80141b0:	480c      	ldr	r0, [pc, #48]	; (80141e4 <prvInitialiseTaskLists+0x6c>)
 80141b2:	f7fe f89c 	bl	80122ee <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80141b6:	480c      	ldr	r0, [pc, #48]	; (80141e8 <prvInitialiseTaskLists+0x70>)
 80141b8:	f7fe f899 	bl	80122ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80141bc:	480b      	ldr	r0, [pc, #44]	; (80141ec <prvInitialiseTaskLists+0x74>)
 80141be:	f7fe f896 	bl	80122ee <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80141c2:	4b0b      	ldr	r3, [pc, #44]	; (80141f0 <prvInitialiseTaskLists+0x78>)
 80141c4:	4a05      	ldr	r2, [pc, #20]	; (80141dc <prvInitialiseTaskLists+0x64>)
 80141c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80141c8:	4b0a      	ldr	r3, [pc, #40]	; (80141f4 <prvInitialiseTaskLists+0x7c>)
 80141ca:	4a05      	ldr	r2, [pc, #20]	; (80141e0 <prvInitialiseTaskLists+0x68>)
 80141cc:	601a      	str	r2, [r3, #0]
}
 80141ce:	bf00      	nop
 80141d0:	3708      	adds	r7, #8
 80141d2:	46bd      	mov	sp, r7
 80141d4:	bd80      	pop	{r7, pc}
 80141d6:	bf00      	nop
 80141d8:	20006568 	.word	0x20006568
 80141dc:	200065f4 	.word	0x200065f4
 80141e0:	20006608 	.word	0x20006608
 80141e4:	20006624 	.word	0x20006624
 80141e8:	20006638 	.word	0x20006638
 80141ec:	20006650 	.word	0x20006650
 80141f0:	2000661c 	.word	0x2000661c
 80141f4:	20006620 	.word	0x20006620

080141f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80141f8:	b580      	push	{r7, lr}
 80141fa:	b082      	sub	sp, #8
 80141fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80141fe:	e019      	b.n	8014234 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8014200:	f000 fbcc 	bl	801499c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8014204:	4b10      	ldr	r3, [pc, #64]	; (8014248 <prvCheckTasksWaitingTermination+0x50>)
 8014206:	68db      	ldr	r3, [r3, #12]
 8014208:	68db      	ldr	r3, [r3, #12]
 801420a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801420c:	687b      	ldr	r3, [r7, #4]
 801420e:	3304      	adds	r3, #4
 8014210:	4618      	mov	r0, r3
 8014212:	f7fe f8f6 	bl	8012402 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8014216:	4b0d      	ldr	r3, [pc, #52]	; (801424c <prvCheckTasksWaitingTermination+0x54>)
 8014218:	681b      	ldr	r3, [r3, #0]
 801421a:	3b01      	subs	r3, #1
 801421c:	4a0b      	ldr	r2, [pc, #44]	; (801424c <prvCheckTasksWaitingTermination+0x54>)
 801421e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8014220:	4b0b      	ldr	r3, [pc, #44]	; (8014250 <prvCheckTasksWaitingTermination+0x58>)
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	3b01      	subs	r3, #1
 8014226:	4a0a      	ldr	r2, [pc, #40]	; (8014250 <prvCheckTasksWaitingTermination+0x58>)
 8014228:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801422a:	f000 fbeb 	bl	8014a04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801422e:	6878      	ldr	r0, [r7, #4]
 8014230:	f000 f810 	bl	8014254 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8014234:	4b06      	ldr	r3, [pc, #24]	; (8014250 <prvCheckTasksWaitingTermination+0x58>)
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	2b00      	cmp	r3, #0
 801423a:	d1e1      	bne.n	8014200 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801423c:	bf00      	nop
 801423e:	bf00      	nop
 8014240:	3708      	adds	r7, #8
 8014242:	46bd      	mov	sp, r7
 8014244:	bd80      	pop	{r7, pc}
 8014246:	bf00      	nop
 8014248:	20006638 	.word	0x20006638
 801424c:	20006664 	.word	0x20006664
 8014250:	2000664c 	.word	0x2000664c

08014254 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8014254:	b580      	push	{r7, lr}
 8014256:	b084      	sub	sp, #16
 8014258:	af00      	add	r7, sp, #0
 801425a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	334c      	adds	r3, #76	; 0x4c
 8014260:	4618      	mov	r0, r3
 8014262:	f010 f879 	bl	8024358 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801426c:	2b00      	cmp	r3, #0
 801426e:	d108      	bne.n	8014282 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8014274:	4618      	mov	r0, r3
 8014276:	f7ed f8d8 	bl	800142a <vPortFree>
				vPortFree( pxTCB );
 801427a:	6878      	ldr	r0, [r7, #4]
 801427c:	f7ed f8d5 	bl	800142a <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8014280:	e01a      	b.n	80142b8 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8014288:	2b01      	cmp	r3, #1
 801428a:	d103      	bne.n	8014294 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f7ed f8cc 	bl	800142a <vPortFree>
	}
 8014292:	e011      	b.n	80142b8 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8014294:	687b      	ldr	r3, [r7, #4]
 8014296:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 801429a:	2b02      	cmp	r3, #2
 801429c:	d00c      	beq.n	80142b8 <prvDeleteTCB+0x64>
	__asm volatile
 801429e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80142a2:	b672      	cpsid	i
 80142a4:	f383 8811 	msr	BASEPRI, r3
 80142a8:	f3bf 8f6f 	isb	sy
 80142ac:	f3bf 8f4f 	dsb	sy
 80142b0:	b662      	cpsie	i
 80142b2:	60fb      	str	r3, [r7, #12]
}
 80142b4:	bf00      	nop
 80142b6:	e7fe      	b.n	80142b6 <prvDeleteTCB+0x62>
	}
 80142b8:	bf00      	nop
 80142ba:	3710      	adds	r7, #16
 80142bc:	46bd      	mov	sp, r7
 80142be:	bd80      	pop	{r7, pc}

080142c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80142c0:	b480      	push	{r7}
 80142c2:	b083      	sub	sp, #12
 80142c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80142c6:	4b0c      	ldr	r3, [pc, #48]	; (80142f8 <prvResetNextTaskUnblockTime+0x38>)
 80142c8:	681b      	ldr	r3, [r3, #0]
 80142ca:	681b      	ldr	r3, [r3, #0]
 80142cc:	2b00      	cmp	r3, #0
 80142ce:	d104      	bne.n	80142da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80142d0:	4b0a      	ldr	r3, [pc, #40]	; (80142fc <prvResetNextTaskUnblockTime+0x3c>)
 80142d2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80142d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80142d8:	e008      	b.n	80142ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80142da:	4b07      	ldr	r3, [pc, #28]	; (80142f8 <prvResetNextTaskUnblockTime+0x38>)
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	68db      	ldr	r3, [r3, #12]
 80142e0:	68db      	ldr	r3, [r3, #12]
 80142e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	685b      	ldr	r3, [r3, #4]
 80142e8:	4a04      	ldr	r2, [pc, #16]	; (80142fc <prvResetNextTaskUnblockTime+0x3c>)
 80142ea:	6013      	str	r3, [r2, #0]
}
 80142ec:	bf00      	nop
 80142ee:	370c      	adds	r7, #12
 80142f0:	46bd      	mov	sp, r7
 80142f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80142f6:	4770      	bx	lr
 80142f8:	2000661c 	.word	0x2000661c
 80142fc:	20006684 	.word	0x20006684

08014300 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8014300:	b480      	push	{r7}
 8014302:	b083      	sub	sp, #12
 8014304:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8014306:	4b0b      	ldr	r3, [pc, #44]	; (8014334 <xTaskGetSchedulerState+0x34>)
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	2b00      	cmp	r3, #0
 801430c:	d102      	bne.n	8014314 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 801430e:	2301      	movs	r3, #1
 8014310:	607b      	str	r3, [r7, #4]
 8014312:	e008      	b.n	8014326 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8014314:	4b08      	ldr	r3, [pc, #32]	; (8014338 <xTaskGetSchedulerState+0x38>)
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	2b00      	cmp	r3, #0
 801431a:	d102      	bne.n	8014322 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 801431c:	2302      	movs	r3, #2
 801431e:	607b      	str	r3, [r7, #4]
 8014320:	e001      	b.n	8014326 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8014322:	2300      	movs	r3, #0
 8014324:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8014326:	687b      	ldr	r3, [r7, #4]
	}
 8014328:	4618      	mov	r0, r3
 801432a:	370c      	adds	r7, #12
 801432c:	46bd      	mov	sp, r7
 801432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014332:	4770      	bx	lr
 8014334:	20006670 	.word	0x20006670
 8014338:	2000668c 	.word	0x2000668c

0801433c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801433c:	b580      	push	{r7, lr}
 801433e:	b084      	sub	sp, #16
 8014340:	af00      	add	r7, sp, #0
 8014342:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8014344:	687b      	ldr	r3, [r7, #4]
 8014346:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8014348:	2300      	movs	r3, #0
 801434a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801434c:	687b      	ldr	r3, [r7, #4]
 801434e:	2b00      	cmp	r3, #0
 8014350:	d069      	beq.n	8014426 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8014352:	68bb      	ldr	r3, [r7, #8]
 8014354:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014356:	4b36      	ldr	r3, [pc, #216]	; (8014430 <xTaskPriorityInherit+0xf4>)
 8014358:	681b      	ldr	r3, [r3, #0]
 801435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801435c:	429a      	cmp	r2, r3
 801435e:	d259      	bcs.n	8014414 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8014360:	68bb      	ldr	r3, [r7, #8]
 8014362:	699b      	ldr	r3, [r3, #24]
 8014364:	2b00      	cmp	r3, #0
 8014366:	db06      	blt.n	8014376 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8014368:	4b31      	ldr	r3, [pc, #196]	; (8014430 <xTaskPriorityInherit+0xf4>)
 801436a:	681b      	ldr	r3, [r3, #0]
 801436c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801436e:	f1c3 0207 	rsb	r2, r3, #7
 8014372:	68bb      	ldr	r3, [r7, #8]
 8014374:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8014376:	68bb      	ldr	r3, [r7, #8]
 8014378:	6959      	ldr	r1, [r3, #20]
 801437a:	68bb      	ldr	r3, [r7, #8]
 801437c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801437e:	4613      	mov	r3, r2
 8014380:	009b      	lsls	r3, r3, #2
 8014382:	4413      	add	r3, r2
 8014384:	009b      	lsls	r3, r3, #2
 8014386:	4a2b      	ldr	r2, [pc, #172]	; (8014434 <xTaskPriorityInherit+0xf8>)
 8014388:	4413      	add	r3, r2
 801438a:	4299      	cmp	r1, r3
 801438c:	d13a      	bne.n	8014404 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801438e:	68bb      	ldr	r3, [r7, #8]
 8014390:	3304      	adds	r3, #4
 8014392:	4618      	mov	r0, r3
 8014394:	f7fe f835 	bl	8012402 <uxListRemove>
 8014398:	4603      	mov	r3, r0
 801439a:	2b00      	cmp	r3, #0
 801439c:	d115      	bne.n	80143ca <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 801439e:	68bb      	ldr	r3, [r7, #8]
 80143a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143a2:	4924      	ldr	r1, [pc, #144]	; (8014434 <xTaskPriorityInherit+0xf8>)
 80143a4:	4613      	mov	r3, r2
 80143a6:	009b      	lsls	r3, r3, #2
 80143a8:	4413      	add	r3, r2
 80143aa:	009b      	lsls	r3, r3, #2
 80143ac:	440b      	add	r3, r1
 80143ae:	681b      	ldr	r3, [r3, #0]
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d10a      	bne.n	80143ca <xTaskPriorityInherit+0x8e>
 80143b4:	68bb      	ldr	r3, [r7, #8]
 80143b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143b8:	2201      	movs	r2, #1
 80143ba:	fa02 f303 	lsl.w	r3, r2, r3
 80143be:	43da      	mvns	r2, r3
 80143c0:	4b1d      	ldr	r3, [pc, #116]	; (8014438 <xTaskPriorityInherit+0xfc>)
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	4013      	ands	r3, r2
 80143c6:	4a1c      	ldr	r2, [pc, #112]	; (8014438 <xTaskPriorityInherit+0xfc>)
 80143c8:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80143ca:	4b19      	ldr	r3, [pc, #100]	; (8014430 <xTaskPriorityInherit+0xf4>)
 80143cc:	681b      	ldr	r3, [r3, #0]
 80143ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143d0:	68bb      	ldr	r3, [r7, #8]
 80143d2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80143d4:	68bb      	ldr	r3, [r7, #8]
 80143d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80143d8:	2201      	movs	r2, #1
 80143da:	409a      	lsls	r2, r3
 80143dc:	4b16      	ldr	r3, [pc, #88]	; (8014438 <xTaskPriorityInherit+0xfc>)
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4313      	orrs	r3, r2
 80143e2:	4a15      	ldr	r2, [pc, #84]	; (8014438 <xTaskPriorityInherit+0xfc>)
 80143e4:	6013      	str	r3, [r2, #0]
 80143e6:	68bb      	ldr	r3, [r7, #8]
 80143e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80143ea:	4613      	mov	r3, r2
 80143ec:	009b      	lsls	r3, r3, #2
 80143ee:	4413      	add	r3, r2
 80143f0:	009b      	lsls	r3, r3, #2
 80143f2:	4a10      	ldr	r2, [pc, #64]	; (8014434 <xTaskPriorityInherit+0xf8>)
 80143f4:	441a      	add	r2, r3
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	3304      	adds	r3, #4
 80143fa:	4619      	mov	r1, r3
 80143fc:	4610      	mov	r0, r2
 80143fe:	f7fd ffa3 	bl	8012348 <vListInsertEnd>
 8014402:	e004      	b.n	801440e <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8014404:	4b0a      	ldr	r3, [pc, #40]	; (8014430 <xTaskPriorityInherit+0xf4>)
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801440a:	68bb      	ldr	r3, [r7, #8]
 801440c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 801440e:	2301      	movs	r3, #1
 8014410:	60fb      	str	r3, [r7, #12]
 8014412:	e008      	b.n	8014426 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8014414:	68bb      	ldr	r3, [r7, #8]
 8014416:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8014418:	4b05      	ldr	r3, [pc, #20]	; (8014430 <xTaskPriorityInherit+0xf4>)
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801441e:	429a      	cmp	r2, r3
 8014420:	d201      	bcs.n	8014426 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8014422:	2301      	movs	r3, #1
 8014424:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014426:	68fb      	ldr	r3, [r7, #12]
	}
 8014428:	4618      	mov	r0, r3
 801442a:	3710      	adds	r7, #16
 801442c:	46bd      	mov	sp, r7
 801442e:	bd80      	pop	{r7, pc}
 8014430:	20006564 	.word	0x20006564
 8014434:	20006568 	.word	0x20006568
 8014438:	2000666c 	.word	0x2000666c

0801443c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 801443c:	b580      	push	{r7, lr}
 801443e:	b086      	sub	sp, #24
 8014440:	af00      	add	r7, sp, #0
 8014442:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8014444:	687b      	ldr	r3, [r7, #4]
 8014446:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8014448:	2300      	movs	r3, #0
 801444a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801444c:	687b      	ldr	r3, [r7, #4]
 801444e:	2b00      	cmp	r3, #0
 8014450:	d072      	beq.n	8014538 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8014452:	4b3c      	ldr	r3, [pc, #240]	; (8014544 <xTaskPriorityDisinherit+0x108>)
 8014454:	681b      	ldr	r3, [r3, #0]
 8014456:	693a      	ldr	r2, [r7, #16]
 8014458:	429a      	cmp	r2, r3
 801445a:	d00c      	beq.n	8014476 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 801445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014460:	b672      	cpsid	i
 8014462:	f383 8811 	msr	BASEPRI, r3
 8014466:	f3bf 8f6f 	isb	sy
 801446a:	f3bf 8f4f 	dsb	sy
 801446e:	b662      	cpsie	i
 8014470:	60fb      	str	r3, [r7, #12]
}
 8014472:	bf00      	nop
 8014474:	e7fe      	b.n	8014474 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8014476:	693b      	ldr	r3, [r7, #16]
 8014478:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801447a:	2b00      	cmp	r3, #0
 801447c:	d10c      	bne.n	8014498 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 801447e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014482:	b672      	cpsid	i
 8014484:	f383 8811 	msr	BASEPRI, r3
 8014488:	f3bf 8f6f 	isb	sy
 801448c:	f3bf 8f4f 	dsb	sy
 8014490:	b662      	cpsie	i
 8014492:	60bb      	str	r3, [r7, #8]
}
 8014494:	bf00      	nop
 8014496:	e7fe      	b.n	8014496 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8014498:	693b      	ldr	r3, [r7, #16]
 801449a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801449c:	1e5a      	subs	r2, r3, #1
 801449e:	693b      	ldr	r3, [r7, #16]
 80144a0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80144a2:	693b      	ldr	r3, [r7, #16]
 80144a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144a6:	693b      	ldr	r3, [r7, #16]
 80144a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80144aa:	429a      	cmp	r2, r3
 80144ac:	d044      	beq.n	8014538 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80144ae:	693b      	ldr	r3, [r7, #16]
 80144b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d140      	bne.n	8014538 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80144b6:	693b      	ldr	r3, [r7, #16]
 80144b8:	3304      	adds	r3, #4
 80144ba:	4618      	mov	r0, r3
 80144bc:	f7fd ffa1 	bl	8012402 <uxListRemove>
 80144c0:	4603      	mov	r3, r0
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d115      	bne.n	80144f2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80144ca:	491f      	ldr	r1, [pc, #124]	; (8014548 <xTaskPriorityDisinherit+0x10c>)
 80144cc:	4613      	mov	r3, r2
 80144ce:	009b      	lsls	r3, r3, #2
 80144d0:	4413      	add	r3, r2
 80144d2:	009b      	lsls	r3, r3, #2
 80144d4:	440b      	add	r3, r1
 80144d6:	681b      	ldr	r3, [r3, #0]
 80144d8:	2b00      	cmp	r3, #0
 80144da:	d10a      	bne.n	80144f2 <xTaskPriorityDisinherit+0xb6>
 80144dc:	693b      	ldr	r3, [r7, #16]
 80144de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144e0:	2201      	movs	r2, #1
 80144e2:	fa02 f303 	lsl.w	r3, r2, r3
 80144e6:	43da      	mvns	r2, r3
 80144e8:	4b18      	ldr	r3, [pc, #96]	; (801454c <xTaskPriorityDisinherit+0x110>)
 80144ea:	681b      	ldr	r3, [r3, #0]
 80144ec:	4013      	ands	r3, r2
 80144ee:	4a17      	ldr	r2, [pc, #92]	; (801454c <xTaskPriorityDisinherit+0x110>)
 80144f0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80144f2:	693b      	ldr	r3, [r7, #16]
 80144f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80144f6:	693b      	ldr	r3, [r7, #16]
 80144f8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80144fa:	693b      	ldr	r3, [r7, #16]
 80144fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80144fe:	f1c3 0207 	rsb	r2, r3, #7
 8014502:	693b      	ldr	r3, [r7, #16]
 8014504:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801450a:	2201      	movs	r2, #1
 801450c:	409a      	lsls	r2, r3
 801450e:	4b0f      	ldr	r3, [pc, #60]	; (801454c <xTaskPriorityDisinherit+0x110>)
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4313      	orrs	r3, r2
 8014514:	4a0d      	ldr	r2, [pc, #52]	; (801454c <xTaskPriorityDisinherit+0x110>)
 8014516:	6013      	str	r3, [r2, #0]
 8014518:	693b      	ldr	r3, [r7, #16]
 801451a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801451c:	4613      	mov	r3, r2
 801451e:	009b      	lsls	r3, r3, #2
 8014520:	4413      	add	r3, r2
 8014522:	009b      	lsls	r3, r3, #2
 8014524:	4a08      	ldr	r2, [pc, #32]	; (8014548 <xTaskPriorityDisinherit+0x10c>)
 8014526:	441a      	add	r2, r3
 8014528:	693b      	ldr	r3, [r7, #16]
 801452a:	3304      	adds	r3, #4
 801452c:	4619      	mov	r1, r3
 801452e:	4610      	mov	r0, r2
 8014530:	f7fd ff0a 	bl	8012348 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8014534:	2301      	movs	r3, #1
 8014536:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8014538:	697b      	ldr	r3, [r7, #20]
	}
 801453a:	4618      	mov	r0, r3
 801453c:	3718      	adds	r7, #24
 801453e:	46bd      	mov	sp, r7
 8014540:	bd80      	pop	{r7, pc}
 8014542:	bf00      	nop
 8014544:	20006564 	.word	0x20006564
 8014548:	20006568 	.word	0x20006568
 801454c:	2000666c 	.word	0x2000666c

08014550 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8014550:	b580      	push	{r7, lr}
 8014552:	b088      	sub	sp, #32
 8014554:	af00      	add	r7, sp, #0
 8014556:	6078      	str	r0, [r7, #4]
 8014558:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 801455a:	687b      	ldr	r3, [r7, #4]
 801455c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 801455e:	2301      	movs	r3, #1
 8014560:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8014562:	687b      	ldr	r3, [r7, #4]
 8014564:	2b00      	cmp	r3, #0
 8014566:	f000 8087 	beq.w	8014678 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 801456a:	69bb      	ldr	r3, [r7, #24]
 801456c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801456e:	2b00      	cmp	r3, #0
 8014570:	d10c      	bne.n	801458c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8014572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014576:	b672      	cpsid	i
 8014578:	f383 8811 	msr	BASEPRI, r3
 801457c:	f3bf 8f6f 	isb	sy
 8014580:	f3bf 8f4f 	dsb	sy
 8014584:	b662      	cpsie	i
 8014586:	60fb      	str	r3, [r7, #12]
}
 8014588:	bf00      	nop
 801458a:	e7fe      	b.n	801458a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 801458c:	69bb      	ldr	r3, [r7, #24]
 801458e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8014590:	683a      	ldr	r2, [r7, #0]
 8014592:	429a      	cmp	r2, r3
 8014594:	d902      	bls.n	801459c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	61fb      	str	r3, [r7, #28]
 801459a:	e002      	b.n	80145a2 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 801459c:	69bb      	ldr	r3, [r7, #24]
 801459e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80145a0:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80145a2:	69bb      	ldr	r3, [r7, #24]
 80145a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145a6:	69fa      	ldr	r2, [r7, #28]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d065      	beq.n	8014678 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80145ac:	69bb      	ldr	r3, [r7, #24]
 80145ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80145b0:	697a      	ldr	r2, [r7, #20]
 80145b2:	429a      	cmp	r2, r3
 80145b4:	d160      	bne.n	8014678 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80145b6:	4b32      	ldr	r3, [pc, #200]	; (8014680 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 80145b8:	681b      	ldr	r3, [r3, #0]
 80145ba:	69ba      	ldr	r2, [r7, #24]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d10c      	bne.n	80145da <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 80145c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80145c4:	b672      	cpsid	i
 80145c6:	f383 8811 	msr	BASEPRI, r3
 80145ca:	f3bf 8f6f 	isb	sy
 80145ce:	f3bf 8f4f 	dsb	sy
 80145d2:	b662      	cpsie	i
 80145d4:	60bb      	str	r3, [r7, #8]
}
 80145d6:	bf00      	nop
 80145d8:	e7fe      	b.n	80145d8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80145da:	69bb      	ldr	r3, [r7, #24]
 80145dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80145de:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80145e0:	69bb      	ldr	r3, [r7, #24]
 80145e2:	69fa      	ldr	r2, [r7, #28]
 80145e4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80145e6:	69bb      	ldr	r3, [r7, #24]
 80145e8:	699b      	ldr	r3, [r3, #24]
 80145ea:	2b00      	cmp	r3, #0
 80145ec:	db04      	blt.n	80145f8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80145ee:	69fb      	ldr	r3, [r7, #28]
 80145f0:	f1c3 0207 	rsb	r2, r3, #7
 80145f4:	69bb      	ldr	r3, [r7, #24]
 80145f6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80145f8:	69bb      	ldr	r3, [r7, #24]
 80145fa:	6959      	ldr	r1, [r3, #20]
 80145fc:	693a      	ldr	r2, [r7, #16]
 80145fe:	4613      	mov	r3, r2
 8014600:	009b      	lsls	r3, r3, #2
 8014602:	4413      	add	r3, r2
 8014604:	009b      	lsls	r3, r3, #2
 8014606:	4a1f      	ldr	r2, [pc, #124]	; (8014684 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014608:	4413      	add	r3, r2
 801460a:	4299      	cmp	r1, r3
 801460c:	d134      	bne.n	8014678 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801460e:	69bb      	ldr	r3, [r7, #24]
 8014610:	3304      	adds	r3, #4
 8014612:	4618      	mov	r0, r3
 8014614:	f7fd fef5 	bl	8012402 <uxListRemove>
 8014618:	4603      	mov	r3, r0
 801461a:	2b00      	cmp	r3, #0
 801461c:	d115      	bne.n	801464a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801461e:	69bb      	ldr	r3, [r7, #24]
 8014620:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014622:	4918      	ldr	r1, [pc, #96]	; (8014684 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8014624:	4613      	mov	r3, r2
 8014626:	009b      	lsls	r3, r3, #2
 8014628:	4413      	add	r3, r2
 801462a:	009b      	lsls	r3, r3, #2
 801462c:	440b      	add	r3, r1
 801462e:	681b      	ldr	r3, [r3, #0]
 8014630:	2b00      	cmp	r3, #0
 8014632:	d10a      	bne.n	801464a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8014634:	69bb      	ldr	r3, [r7, #24]
 8014636:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014638:	2201      	movs	r2, #1
 801463a:	fa02 f303 	lsl.w	r3, r2, r3
 801463e:	43da      	mvns	r2, r3
 8014640:	4b11      	ldr	r3, [pc, #68]	; (8014688 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014642:	681b      	ldr	r3, [r3, #0]
 8014644:	4013      	ands	r3, r2
 8014646:	4a10      	ldr	r2, [pc, #64]	; (8014688 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014648:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 801464a:	69bb      	ldr	r3, [r7, #24]
 801464c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801464e:	2201      	movs	r2, #1
 8014650:	409a      	lsls	r2, r3
 8014652:	4b0d      	ldr	r3, [pc, #52]	; (8014688 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	4313      	orrs	r3, r2
 8014658:	4a0b      	ldr	r2, [pc, #44]	; (8014688 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801465a:	6013      	str	r3, [r2, #0]
 801465c:	69bb      	ldr	r3, [r7, #24]
 801465e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8014660:	4613      	mov	r3, r2
 8014662:	009b      	lsls	r3, r3, #2
 8014664:	4413      	add	r3, r2
 8014666:	009b      	lsls	r3, r3, #2
 8014668:	4a06      	ldr	r2, [pc, #24]	; (8014684 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 801466a:	441a      	add	r2, r3
 801466c:	69bb      	ldr	r3, [r7, #24]
 801466e:	3304      	adds	r3, #4
 8014670:	4619      	mov	r1, r3
 8014672:	4610      	mov	r0, r2
 8014674:	f7fd fe68 	bl	8012348 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8014678:	bf00      	nop
 801467a:	3720      	adds	r7, #32
 801467c:	46bd      	mov	sp, r7
 801467e:	bd80      	pop	{r7, pc}
 8014680:	20006564 	.word	0x20006564
 8014684:	20006568 	.word	0x20006568
 8014688:	2000666c 	.word	0x2000666c

0801468c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 801468c:	b480      	push	{r7}
 801468e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8014690:	4b07      	ldr	r3, [pc, #28]	; (80146b0 <pvTaskIncrementMutexHeldCount+0x24>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	2b00      	cmp	r3, #0
 8014696:	d004      	beq.n	80146a2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8014698:	4b05      	ldr	r3, [pc, #20]	; (80146b0 <pvTaskIncrementMutexHeldCount+0x24>)
 801469a:	681b      	ldr	r3, [r3, #0]
 801469c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801469e:	3201      	adds	r2, #1
 80146a0:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 80146a2:	4b03      	ldr	r3, [pc, #12]	; (80146b0 <pvTaskIncrementMutexHeldCount+0x24>)
 80146a4:	681b      	ldr	r3, [r3, #0]
	}
 80146a6:	4618      	mov	r0, r3
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr
 80146b0:	20006564 	.word	0x20006564

080146b4 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80146b4:	b580      	push	{r7, lr}
 80146b6:	b084      	sub	sp, #16
 80146b8:	af00      	add	r7, sp, #0
 80146ba:	6078      	str	r0, [r7, #4]
 80146bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80146be:	4b29      	ldr	r3, [pc, #164]	; (8014764 <prvAddCurrentTaskToDelayedList+0xb0>)
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80146c4:	4b28      	ldr	r3, [pc, #160]	; (8014768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	3304      	adds	r3, #4
 80146ca:	4618      	mov	r0, r3
 80146cc:	f7fd fe99 	bl	8012402 <uxListRemove>
 80146d0:	4603      	mov	r3, r0
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d10b      	bne.n	80146ee <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80146d6:	4b24      	ldr	r3, [pc, #144]	; (8014768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146d8:	681b      	ldr	r3, [r3, #0]
 80146da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80146dc:	2201      	movs	r2, #1
 80146de:	fa02 f303 	lsl.w	r3, r2, r3
 80146e2:	43da      	mvns	r2, r3
 80146e4:	4b21      	ldr	r3, [pc, #132]	; (801476c <prvAddCurrentTaskToDelayedList+0xb8>)
 80146e6:	681b      	ldr	r3, [r3, #0]
 80146e8:	4013      	ands	r3, r2
 80146ea:	4a20      	ldr	r2, [pc, #128]	; (801476c <prvAddCurrentTaskToDelayedList+0xb8>)
 80146ec:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80146ee:	687b      	ldr	r3, [r7, #4]
 80146f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80146f4:	d10a      	bne.n	801470c <prvAddCurrentTaskToDelayedList+0x58>
 80146f6:	683b      	ldr	r3, [r7, #0]
 80146f8:	2b00      	cmp	r3, #0
 80146fa:	d007      	beq.n	801470c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80146fc:	4b1a      	ldr	r3, [pc, #104]	; (8014768 <prvAddCurrentTaskToDelayedList+0xb4>)
 80146fe:	681b      	ldr	r3, [r3, #0]
 8014700:	3304      	adds	r3, #4
 8014702:	4619      	mov	r1, r3
 8014704:	481a      	ldr	r0, [pc, #104]	; (8014770 <prvAddCurrentTaskToDelayedList+0xbc>)
 8014706:	f7fd fe1f 	bl	8012348 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801470a:	e026      	b.n	801475a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801470c:	68fa      	ldr	r2, [r7, #12]
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	4413      	add	r3, r2
 8014712:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8014714:	4b14      	ldr	r3, [pc, #80]	; (8014768 <prvAddCurrentTaskToDelayedList+0xb4>)
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	68ba      	ldr	r2, [r7, #8]
 801471a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801471c:	68ba      	ldr	r2, [r7, #8]
 801471e:	68fb      	ldr	r3, [r7, #12]
 8014720:	429a      	cmp	r2, r3
 8014722:	d209      	bcs.n	8014738 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014724:	4b13      	ldr	r3, [pc, #76]	; (8014774 <prvAddCurrentTaskToDelayedList+0xc0>)
 8014726:	681a      	ldr	r2, [r3, #0]
 8014728:	4b0f      	ldr	r3, [pc, #60]	; (8014768 <prvAddCurrentTaskToDelayedList+0xb4>)
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	3304      	adds	r3, #4
 801472e:	4619      	mov	r1, r3
 8014730:	4610      	mov	r0, r2
 8014732:	f7fd fe2d 	bl	8012390 <vListInsert>
}
 8014736:	e010      	b.n	801475a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8014738:	4b0f      	ldr	r3, [pc, #60]	; (8014778 <prvAddCurrentTaskToDelayedList+0xc4>)
 801473a:	681a      	ldr	r2, [r3, #0]
 801473c:	4b0a      	ldr	r3, [pc, #40]	; (8014768 <prvAddCurrentTaskToDelayedList+0xb4>)
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	3304      	adds	r3, #4
 8014742:	4619      	mov	r1, r3
 8014744:	4610      	mov	r0, r2
 8014746:	f7fd fe23 	bl	8012390 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801474a:	4b0c      	ldr	r3, [pc, #48]	; (801477c <prvAddCurrentTaskToDelayedList+0xc8>)
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	68ba      	ldr	r2, [r7, #8]
 8014750:	429a      	cmp	r2, r3
 8014752:	d202      	bcs.n	801475a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8014754:	4a09      	ldr	r2, [pc, #36]	; (801477c <prvAddCurrentTaskToDelayedList+0xc8>)
 8014756:	68bb      	ldr	r3, [r7, #8]
 8014758:	6013      	str	r3, [r2, #0]
}
 801475a:	bf00      	nop
 801475c:	3710      	adds	r7, #16
 801475e:	46bd      	mov	sp, r7
 8014760:	bd80      	pop	{r7, pc}
 8014762:	bf00      	nop
 8014764:	20006668 	.word	0x20006668
 8014768:	20006564 	.word	0x20006564
 801476c:	2000666c 	.word	0x2000666c
 8014770:	20006650 	.word	0x20006650
 8014774:	20006620 	.word	0x20006620
 8014778:	2000661c 	.word	0x2000661c
 801477c:	20006684 	.word	0x20006684

08014780 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8014780:	b480      	push	{r7}
 8014782:	b085      	sub	sp, #20
 8014784:	af00      	add	r7, sp, #0
 8014786:	60f8      	str	r0, [r7, #12]
 8014788:	60b9      	str	r1, [r7, #8]
 801478a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801478c:	68fb      	ldr	r3, [r7, #12]
 801478e:	3b04      	subs	r3, #4
 8014790:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8014792:	68fb      	ldr	r3, [r7, #12]
 8014794:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8014798:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801479a:	68fb      	ldr	r3, [r7, #12]
 801479c:	3b04      	subs	r3, #4
 801479e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80147a0:	68bb      	ldr	r3, [r7, #8]
 80147a2:	f023 0201 	bic.w	r2, r3, #1
 80147a6:	68fb      	ldr	r3, [r7, #12]
 80147a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80147aa:	68fb      	ldr	r3, [r7, #12]
 80147ac:	3b04      	subs	r3, #4
 80147ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80147b0:	4a0c      	ldr	r2, [pc, #48]	; (80147e4 <pxPortInitialiseStack+0x64>)
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80147b6:	68fb      	ldr	r3, [r7, #12]
 80147b8:	3b14      	subs	r3, #20
 80147ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80147bc:	687a      	ldr	r2, [r7, #4]
 80147be:	68fb      	ldr	r3, [r7, #12]
 80147c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	3b04      	subs	r3, #4
 80147c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80147c8:	68fb      	ldr	r3, [r7, #12]
 80147ca:	f06f 0202 	mvn.w	r2, #2
 80147ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80147d0:	68fb      	ldr	r3, [r7, #12]
 80147d2:	3b20      	subs	r3, #32
 80147d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80147d6:	68fb      	ldr	r3, [r7, #12]
}
 80147d8:	4618      	mov	r0, r3
 80147da:	3714      	adds	r7, #20
 80147dc:	46bd      	mov	sp, r7
 80147de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e2:	4770      	bx	lr
 80147e4:	080147e9 	.word	0x080147e9

080147e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80147e8:	b480      	push	{r7}
 80147ea:	b085      	sub	sp, #20
 80147ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80147ee:	2300      	movs	r3, #0
 80147f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80147f2:	4b14      	ldr	r3, [pc, #80]	; (8014844 <prvTaskExitError+0x5c>)
 80147f4:	681b      	ldr	r3, [r3, #0]
 80147f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80147fa:	d00c      	beq.n	8014816 <prvTaskExitError+0x2e>
	__asm volatile
 80147fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014800:	b672      	cpsid	i
 8014802:	f383 8811 	msr	BASEPRI, r3
 8014806:	f3bf 8f6f 	isb	sy
 801480a:	f3bf 8f4f 	dsb	sy
 801480e:	b662      	cpsie	i
 8014810:	60fb      	str	r3, [r7, #12]
}
 8014812:	bf00      	nop
 8014814:	e7fe      	b.n	8014814 <prvTaskExitError+0x2c>
	__asm volatile
 8014816:	f04f 0350 	mov.w	r3, #80	; 0x50
 801481a:	b672      	cpsid	i
 801481c:	f383 8811 	msr	BASEPRI, r3
 8014820:	f3bf 8f6f 	isb	sy
 8014824:	f3bf 8f4f 	dsb	sy
 8014828:	b662      	cpsie	i
 801482a:	60bb      	str	r3, [r7, #8]
}
 801482c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801482e:	bf00      	nop
 8014830:	687b      	ldr	r3, [r7, #4]
 8014832:	2b00      	cmp	r3, #0
 8014834:	d0fc      	beq.n	8014830 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8014836:	bf00      	nop
 8014838:	bf00      	nop
 801483a:	3714      	adds	r7, #20
 801483c:	46bd      	mov	sp, r7
 801483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014842:	4770      	bx	lr
 8014844:	20000024 	.word	0x20000024
	...

08014850 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8014850:	4b07      	ldr	r3, [pc, #28]	; (8014870 <pxCurrentTCBConst2>)
 8014852:	6819      	ldr	r1, [r3, #0]
 8014854:	6808      	ldr	r0, [r1, #0]
 8014856:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801485a:	f380 8809 	msr	PSP, r0
 801485e:	f3bf 8f6f 	isb	sy
 8014862:	f04f 0000 	mov.w	r0, #0
 8014866:	f380 8811 	msr	BASEPRI, r0
 801486a:	4770      	bx	lr
 801486c:	f3af 8000 	nop.w

08014870 <pxCurrentTCBConst2>:
 8014870:	20006564 	.word	0x20006564
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8014874:	bf00      	nop
 8014876:	bf00      	nop

08014878 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8014878:	4808      	ldr	r0, [pc, #32]	; (801489c <prvPortStartFirstTask+0x24>)
 801487a:	6800      	ldr	r0, [r0, #0]
 801487c:	6800      	ldr	r0, [r0, #0]
 801487e:	f380 8808 	msr	MSP, r0
 8014882:	f04f 0000 	mov.w	r0, #0
 8014886:	f380 8814 	msr	CONTROL, r0
 801488a:	b662      	cpsie	i
 801488c:	b661      	cpsie	f
 801488e:	f3bf 8f4f 	dsb	sy
 8014892:	f3bf 8f6f 	isb	sy
 8014896:	df00      	svc	0
 8014898:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801489a:	bf00      	nop
 801489c:	e000ed08 	.word	0xe000ed08

080148a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80148a0:	b580      	push	{r7, lr}
 80148a2:	b084      	sub	sp, #16
 80148a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80148a6:	4b37      	ldr	r3, [pc, #220]	; (8014984 <xPortStartScheduler+0xe4>)
 80148a8:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80148aa:	68fb      	ldr	r3, [r7, #12]
 80148ac:	781b      	ldrb	r3, [r3, #0]
 80148ae:	b2db      	uxtb	r3, r3
 80148b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80148b2:	68fb      	ldr	r3, [r7, #12]
 80148b4:	22ff      	movs	r2, #255	; 0xff
 80148b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80148b8:	68fb      	ldr	r3, [r7, #12]
 80148ba:	781b      	ldrb	r3, [r3, #0]
 80148bc:	b2db      	uxtb	r3, r3
 80148be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80148c0:	78fb      	ldrb	r3, [r7, #3]
 80148c2:	b2db      	uxtb	r3, r3
 80148c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80148c8:	b2da      	uxtb	r2, r3
 80148ca:	4b2f      	ldr	r3, [pc, #188]	; (8014988 <xPortStartScheduler+0xe8>)
 80148cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80148ce:	4b2f      	ldr	r3, [pc, #188]	; (801498c <xPortStartScheduler+0xec>)
 80148d0:	2207      	movs	r2, #7
 80148d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148d4:	e009      	b.n	80148ea <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80148d6:	4b2d      	ldr	r3, [pc, #180]	; (801498c <xPortStartScheduler+0xec>)
 80148d8:	681b      	ldr	r3, [r3, #0]
 80148da:	3b01      	subs	r3, #1
 80148dc:	4a2b      	ldr	r2, [pc, #172]	; (801498c <xPortStartScheduler+0xec>)
 80148de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80148e0:	78fb      	ldrb	r3, [r7, #3]
 80148e2:	b2db      	uxtb	r3, r3
 80148e4:	005b      	lsls	r3, r3, #1
 80148e6:	b2db      	uxtb	r3, r3
 80148e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80148ea:	78fb      	ldrb	r3, [r7, #3]
 80148ec:	b2db      	uxtb	r3, r3
 80148ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80148f2:	2b80      	cmp	r3, #128	; 0x80
 80148f4:	d0ef      	beq.n	80148d6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80148f6:	4b25      	ldr	r3, [pc, #148]	; (801498c <xPortStartScheduler+0xec>)
 80148f8:	681b      	ldr	r3, [r3, #0]
 80148fa:	f1c3 0307 	rsb	r3, r3, #7
 80148fe:	2b04      	cmp	r3, #4
 8014900:	d00c      	beq.n	801491c <xPortStartScheduler+0x7c>
	__asm volatile
 8014902:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014906:	b672      	cpsid	i
 8014908:	f383 8811 	msr	BASEPRI, r3
 801490c:	f3bf 8f6f 	isb	sy
 8014910:	f3bf 8f4f 	dsb	sy
 8014914:	b662      	cpsie	i
 8014916:	60bb      	str	r3, [r7, #8]
}
 8014918:	bf00      	nop
 801491a:	e7fe      	b.n	801491a <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801491c:	4b1b      	ldr	r3, [pc, #108]	; (801498c <xPortStartScheduler+0xec>)
 801491e:	681b      	ldr	r3, [r3, #0]
 8014920:	021b      	lsls	r3, r3, #8
 8014922:	4a1a      	ldr	r2, [pc, #104]	; (801498c <xPortStartScheduler+0xec>)
 8014924:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8014926:	4b19      	ldr	r3, [pc, #100]	; (801498c <xPortStartScheduler+0xec>)
 8014928:	681b      	ldr	r3, [r3, #0]
 801492a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 801492e:	4a17      	ldr	r2, [pc, #92]	; (801498c <xPortStartScheduler+0xec>)
 8014930:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8014932:	687b      	ldr	r3, [r7, #4]
 8014934:	b2da      	uxtb	r2, r3
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801493a:	4b15      	ldr	r3, [pc, #84]	; (8014990 <xPortStartScheduler+0xf0>)
 801493c:	681b      	ldr	r3, [r3, #0]
 801493e:	4a14      	ldr	r2, [pc, #80]	; (8014990 <xPortStartScheduler+0xf0>)
 8014940:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8014944:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8014946:	4b12      	ldr	r3, [pc, #72]	; (8014990 <xPortStartScheduler+0xf0>)
 8014948:	681b      	ldr	r3, [r3, #0]
 801494a:	4a11      	ldr	r2, [pc, #68]	; (8014990 <xPortStartScheduler+0xf0>)
 801494c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8014950:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8014952:	f000 f8dd 	bl	8014b10 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8014956:	4b0f      	ldr	r3, [pc, #60]	; (8014994 <xPortStartScheduler+0xf4>)
 8014958:	2200      	movs	r2, #0
 801495a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801495c:	f000 f8fc 	bl	8014b58 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8014960:	4b0d      	ldr	r3, [pc, #52]	; (8014998 <xPortStartScheduler+0xf8>)
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	4a0c      	ldr	r2, [pc, #48]	; (8014998 <xPortStartScheduler+0xf8>)
 8014966:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801496a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801496c:	f7ff ff84 	bl	8014878 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8014970:	f7ff fa74 	bl	8013e5c <vTaskSwitchContext>
	prvTaskExitError();
 8014974:	f7ff ff38 	bl	80147e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8014978:	2300      	movs	r3, #0
}
 801497a:	4618      	mov	r0, r3
 801497c:	3710      	adds	r7, #16
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	e000e400 	.word	0xe000e400
 8014988:	20006690 	.word	0x20006690
 801498c:	20006694 	.word	0x20006694
 8014990:	e000ed20 	.word	0xe000ed20
 8014994:	20000024 	.word	0x20000024
 8014998:	e000ef34 	.word	0xe000ef34

0801499c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801499c:	b480      	push	{r7}
 801499e:	b083      	sub	sp, #12
 80149a0:	af00      	add	r7, sp, #0
	__asm volatile
 80149a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149a6:	b672      	cpsid	i
 80149a8:	f383 8811 	msr	BASEPRI, r3
 80149ac:	f3bf 8f6f 	isb	sy
 80149b0:	f3bf 8f4f 	dsb	sy
 80149b4:	b662      	cpsie	i
 80149b6:	607b      	str	r3, [r7, #4]
}
 80149b8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80149ba:	4b10      	ldr	r3, [pc, #64]	; (80149fc <vPortEnterCritical+0x60>)
 80149bc:	681b      	ldr	r3, [r3, #0]
 80149be:	3301      	adds	r3, #1
 80149c0:	4a0e      	ldr	r2, [pc, #56]	; (80149fc <vPortEnterCritical+0x60>)
 80149c2:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80149c4:	4b0d      	ldr	r3, [pc, #52]	; (80149fc <vPortEnterCritical+0x60>)
 80149c6:	681b      	ldr	r3, [r3, #0]
 80149c8:	2b01      	cmp	r3, #1
 80149ca:	d111      	bne.n	80149f0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80149cc:	4b0c      	ldr	r3, [pc, #48]	; (8014a00 <vPortEnterCritical+0x64>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	b2db      	uxtb	r3, r3
 80149d2:	2b00      	cmp	r3, #0
 80149d4:	d00c      	beq.n	80149f0 <vPortEnterCritical+0x54>
	__asm volatile
 80149d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80149da:	b672      	cpsid	i
 80149dc:	f383 8811 	msr	BASEPRI, r3
 80149e0:	f3bf 8f6f 	isb	sy
 80149e4:	f3bf 8f4f 	dsb	sy
 80149e8:	b662      	cpsie	i
 80149ea:	603b      	str	r3, [r7, #0]
}
 80149ec:	bf00      	nop
 80149ee:	e7fe      	b.n	80149ee <vPortEnterCritical+0x52>
	}
}
 80149f0:	bf00      	nop
 80149f2:	370c      	adds	r7, #12
 80149f4:	46bd      	mov	sp, r7
 80149f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149fa:	4770      	bx	lr
 80149fc:	20000024 	.word	0x20000024
 8014a00:	e000ed04 	.word	0xe000ed04

08014a04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8014a04:	b480      	push	{r7}
 8014a06:	b083      	sub	sp, #12
 8014a08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8014a0a:	4b13      	ldr	r3, [pc, #76]	; (8014a58 <vPortExitCritical+0x54>)
 8014a0c:	681b      	ldr	r3, [r3, #0]
 8014a0e:	2b00      	cmp	r3, #0
 8014a10:	d10c      	bne.n	8014a2c <vPortExitCritical+0x28>
	__asm volatile
 8014a12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014a16:	b672      	cpsid	i
 8014a18:	f383 8811 	msr	BASEPRI, r3
 8014a1c:	f3bf 8f6f 	isb	sy
 8014a20:	f3bf 8f4f 	dsb	sy
 8014a24:	b662      	cpsie	i
 8014a26:	607b      	str	r3, [r7, #4]
}
 8014a28:	bf00      	nop
 8014a2a:	e7fe      	b.n	8014a2a <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8014a2c:	4b0a      	ldr	r3, [pc, #40]	; (8014a58 <vPortExitCritical+0x54>)
 8014a2e:	681b      	ldr	r3, [r3, #0]
 8014a30:	3b01      	subs	r3, #1
 8014a32:	4a09      	ldr	r2, [pc, #36]	; (8014a58 <vPortExitCritical+0x54>)
 8014a34:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8014a36:	4b08      	ldr	r3, [pc, #32]	; (8014a58 <vPortExitCritical+0x54>)
 8014a38:	681b      	ldr	r3, [r3, #0]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d105      	bne.n	8014a4a <vPortExitCritical+0x46>
 8014a3e:	2300      	movs	r3, #0
 8014a40:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	f383 8811 	msr	BASEPRI, r3
}
 8014a48:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8014a4a:	bf00      	nop
 8014a4c:	370c      	adds	r7, #12
 8014a4e:	46bd      	mov	sp, r7
 8014a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a54:	4770      	bx	lr
 8014a56:	bf00      	nop
 8014a58:	20000024 	.word	0x20000024
 8014a5c:	00000000 	.word	0x00000000

08014a60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8014a60:	f3ef 8009 	mrs	r0, PSP
 8014a64:	f3bf 8f6f 	isb	sy
 8014a68:	4b15      	ldr	r3, [pc, #84]	; (8014ac0 <pxCurrentTCBConst>)
 8014a6a:	681a      	ldr	r2, [r3, #0]
 8014a6c:	f01e 0f10 	tst.w	lr, #16
 8014a70:	bf08      	it	eq
 8014a72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8014a76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a7a:	6010      	str	r0, [r2, #0]
 8014a7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8014a80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8014a84:	b672      	cpsid	i
 8014a86:	f380 8811 	msr	BASEPRI, r0
 8014a8a:	f3bf 8f4f 	dsb	sy
 8014a8e:	f3bf 8f6f 	isb	sy
 8014a92:	b662      	cpsie	i
 8014a94:	f7ff f9e2 	bl	8013e5c <vTaskSwitchContext>
 8014a98:	f04f 0000 	mov.w	r0, #0
 8014a9c:	f380 8811 	msr	BASEPRI, r0
 8014aa0:	bc09      	pop	{r0, r3}
 8014aa2:	6819      	ldr	r1, [r3, #0]
 8014aa4:	6808      	ldr	r0, [r1, #0]
 8014aa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014aaa:	f01e 0f10 	tst.w	lr, #16
 8014aae:	bf08      	it	eq
 8014ab0:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8014ab4:	f380 8809 	msr	PSP, r0
 8014ab8:	f3bf 8f6f 	isb	sy
 8014abc:	4770      	bx	lr
 8014abe:	bf00      	nop

08014ac0 <pxCurrentTCBConst>:
 8014ac0:	20006564 	.word	0x20006564
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8014ac4:	bf00      	nop
 8014ac6:	bf00      	nop

08014ac8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8014ac8:	b580      	push	{r7, lr}
 8014aca:	b082      	sub	sp, #8
 8014acc:	af00      	add	r7, sp, #0
	__asm volatile
 8014ace:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014ad2:	b672      	cpsid	i
 8014ad4:	f383 8811 	msr	BASEPRI, r3
 8014ad8:	f3bf 8f6f 	isb	sy
 8014adc:	f3bf 8f4f 	dsb	sy
 8014ae0:	b662      	cpsie	i
 8014ae2:	607b      	str	r3, [r7, #4]
}
 8014ae4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8014ae6:	f7ff f8ff 	bl	8013ce8 <xTaskIncrementTick>
 8014aea:	4603      	mov	r3, r0
 8014aec:	2b00      	cmp	r3, #0
 8014aee:	d003      	beq.n	8014af8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8014af0:	4b06      	ldr	r3, [pc, #24]	; (8014b0c <SysTick_Handler+0x44>)
 8014af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8014af6:	601a      	str	r2, [r3, #0]
 8014af8:	2300      	movs	r3, #0
 8014afa:	603b      	str	r3, [r7, #0]
	__asm volatile
 8014afc:	683b      	ldr	r3, [r7, #0]
 8014afe:	f383 8811 	msr	BASEPRI, r3
}
 8014b02:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8014b04:	bf00      	nop
 8014b06:	3708      	adds	r7, #8
 8014b08:	46bd      	mov	sp, r7
 8014b0a:	bd80      	pop	{r7, pc}
 8014b0c:	e000ed04 	.word	0xe000ed04

08014b10 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8014b10:	b480      	push	{r7}
 8014b12:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8014b14:	4b0b      	ldr	r3, [pc, #44]	; (8014b44 <vPortSetupTimerInterrupt+0x34>)
 8014b16:	2200      	movs	r2, #0
 8014b18:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8014b1a:	4b0b      	ldr	r3, [pc, #44]	; (8014b48 <vPortSetupTimerInterrupt+0x38>)
 8014b1c:	2200      	movs	r2, #0
 8014b1e:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8014b20:	4b0a      	ldr	r3, [pc, #40]	; (8014b4c <vPortSetupTimerInterrupt+0x3c>)
 8014b22:	681b      	ldr	r3, [r3, #0]
 8014b24:	4a0a      	ldr	r2, [pc, #40]	; (8014b50 <vPortSetupTimerInterrupt+0x40>)
 8014b26:	fba2 2303 	umull	r2, r3, r2, r3
 8014b2a:	099b      	lsrs	r3, r3, #6
 8014b2c:	4a09      	ldr	r2, [pc, #36]	; (8014b54 <vPortSetupTimerInterrupt+0x44>)
 8014b2e:	3b01      	subs	r3, #1
 8014b30:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8014b32:	4b04      	ldr	r3, [pc, #16]	; (8014b44 <vPortSetupTimerInterrupt+0x34>)
 8014b34:	2207      	movs	r2, #7
 8014b36:	601a      	str	r2, [r3, #0]
}
 8014b38:	bf00      	nop
 8014b3a:	46bd      	mov	sp, r7
 8014b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b40:	4770      	bx	lr
 8014b42:	bf00      	nop
 8014b44:	e000e010 	.word	0xe000e010
 8014b48:	e000e018 	.word	0xe000e018
 8014b4c:	20000004 	.word	0x20000004
 8014b50:	10624dd3 	.word	0x10624dd3
 8014b54:	e000e014 	.word	0xe000e014

08014b58 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8014b58:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8014b68 <vPortEnableVFP+0x10>
 8014b5c:	6801      	ldr	r1, [r0, #0]
 8014b5e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8014b62:	6001      	str	r1, [r0, #0]
 8014b64:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8014b66:	bf00      	nop
 8014b68:	e000ed88 	.word	0xe000ed88

08014b6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8014b6c:	b480      	push	{r7}
 8014b6e:	b085      	sub	sp, #20
 8014b70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8014b72:	f3ef 8305 	mrs	r3, IPSR
 8014b76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8014b78:	68fb      	ldr	r3, [r7, #12]
 8014b7a:	2b0f      	cmp	r3, #15
 8014b7c:	d916      	bls.n	8014bac <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8014b7e:	4a19      	ldr	r2, [pc, #100]	; (8014be4 <vPortValidateInterruptPriority+0x78>)
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	4413      	add	r3, r2
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8014b88:	4b17      	ldr	r3, [pc, #92]	; (8014be8 <vPortValidateInterruptPriority+0x7c>)
 8014b8a:	781b      	ldrb	r3, [r3, #0]
 8014b8c:	7afa      	ldrb	r2, [r7, #11]
 8014b8e:	429a      	cmp	r2, r3
 8014b90:	d20c      	bcs.n	8014bac <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8014b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014b96:	b672      	cpsid	i
 8014b98:	f383 8811 	msr	BASEPRI, r3
 8014b9c:	f3bf 8f6f 	isb	sy
 8014ba0:	f3bf 8f4f 	dsb	sy
 8014ba4:	b662      	cpsie	i
 8014ba6:	607b      	str	r3, [r7, #4]
}
 8014ba8:	bf00      	nop
 8014baa:	e7fe      	b.n	8014baa <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8014bac:	4b0f      	ldr	r3, [pc, #60]	; (8014bec <vPortValidateInterruptPriority+0x80>)
 8014bae:	681b      	ldr	r3, [r3, #0]
 8014bb0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8014bb4:	4b0e      	ldr	r3, [pc, #56]	; (8014bf0 <vPortValidateInterruptPriority+0x84>)
 8014bb6:	681b      	ldr	r3, [r3, #0]
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d90c      	bls.n	8014bd6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8014bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8014bc0:	b672      	cpsid	i
 8014bc2:	f383 8811 	msr	BASEPRI, r3
 8014bc6:	f3bf 8f6f 	isb	sy
 8014bca:	f3bf 8f4f 	dsb	sy
 8014bce:	b662      	cpsie	i
 8014bd0:	603b      	str	r3, [r7, #0]
}
 8014bd2:	bf00      	nop
 8014bd4:	e7fe      	b.n	8014bd4 <vPortValidateInterruptPriority+0x68>
	}
 8014bd6:	bf00      	nop
 8014bd8:	3714      	adds	r7, #20
 8014bda:	46bd      	mov	sp, r7
 8014bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014be0:	4770      	bx	lr
 8014be2:	bf00      	nop
 8014be4:	e000e3f0 	.word	0xe000e3f0
 8014be8:	20006690 	.word	0x20006690
 8014bec:	e000ed0c 	.word	0xe000ed0c
 8014bf0:	20006694 	.word	0x20006694

08014bf4 <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 8014bf4:	b580      	push	{r7, lr}
 8014bf6:	b084      	sub	sp, #16
 8014bf8:	af00      	add	r7, sp, #0
 8014bfa:	6078      	str	r0, [r7, #4]
 8014bfc:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8014bfe:	683b      	ldr	r3, [r7, #0]
 8014c00:	681b      	ldr	r3, [r3, #0]
 8014c02:	330c      	adds	r3, #12
 8014c04:	461a      	mov	r2, r3
 8014c06:	6839      	ldr	r1, [r7, #0]
 8014c08:	6878      	ldr	r0, [r7, #4]
 8014c0a:	f002 fcb7 	bl	801757c <tcpip_send_msg_wait_sem>
 8014c0e:	4603      	mov	r3, r0
 8014c10:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8014c12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014c16:	2b00      	cmp	r3, #0
 8014c18:	d103      	bne.n	8014c22 <netconn_apimsg+0x2e>
    return apimsg->err;
 8014c1a:	683b      	ldr	r3, [r7, #0]
 8014c1c:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8014c20:	e001      	b.n	8014c26 <netconn_apimsg+0x32>
  }
  return err;
 8014c22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014c26:	4618      	mov	r0, r3
 8014c28:	3710      	adds	r7, #16
 8014c2a:	46bd      	mov	sp, r7
 8014c2c:	bd80      	pop	{r7, pc}
	...

08014c30 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8014c30:	b580      	push	{r7, lr}
 8014c32:	b08c      	sub	sp, #48	; 0x30
 8014c34:	af00      	add	r7, sp, #0
 8014c36:	4603      	mov	r3, r0
 8014c38:	603a      	str	r2, [r7, #0]
 8014c3a:	71fb      	strb	r3, [r7, #7]
 8014c3c:	460b      	mov	r3, r1
 8014c3e:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8014c40:	79fb      	ldrb	r3, [r7, #7]
 8014c42:	6839      	ldr	r1, [r7, #0]
 8014c44:	4618      	mov	r0, r3
 8014c46:	f001 f989 	bl	8015f5c <netconn_alloc>
 8014c4a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8014c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4e:	2b00      	cmp	r3, #0
 8014c50:	d054      	beq.n	8014cfc <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 8014c52:	79bb      	ldrb	r3, [r7, #6]
 8014c54:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 8014c56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c58:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8014c5a:	f107 0308 	add.w	r3, r7, #8
 8014c5e:	4619      	mov	r1, r3
 8014c60:	4829      	ldr	r0, [pc, #164]	; (8014d08 <netconn_new_with_proto_and_callback+0xd8>)
 8014c62:	f7ff ffc7 	bl	8014bf4 <netconn_apimsg>
 8014c66:	4603      	mov	r3, r0
 8014c68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8014c6c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8014c70:	2b00      	cmp	r3, #0
 8014c72:	d043      	beq.n	8014cfc <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 8014c74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c76:	685b      	ldr	r3, [r3, #4]
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d005      	beq.n	8014c88 <netconn_new_with_proto_and_callback+0x58>
 8014c7c:	4b23      	ldr	r3, [pc, #140]	; (8014d0c <netconn_new_with_proto_and_callback+0xdc>)
 8014c7e:	22a3      	movs	r2, #163	; 0xa3
 8014c80:	4923      	ldr	r1, [pc, #140]	; (8014d10 <netconn_new_with_proto_and_callback+0xe0>)
 8014c82:	4824      	ldr	r0, [pc, #144]	; (8014d14 <netconn_new_with_proto_and_callback+0xe4>)
 8014c84:	f00f fb04 	bl	8024290 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 8014c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8a:	3310      	adds	r3, #16
 8014c8c:	4618      	mov	r0, r3
 8014c8e:	f00d ff50 	bl	8022b32 <sys_mbox_valid>
 8014c92:	4603      	mov	r3, r0
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d105      	bne.n	8014ca4 <netconn_new_with_proto_and_callback+0x74>
 8014c98:	4b1c      	ldr	r3, [pc, #112]	; (8014d0c <netconn_new_with_proto_and_callback+0xdc>)
 8014c9a:	22a4      	movs	r2, #164	; 0xa4
 8014c9c:	491e      	ldr	r1, [pc, #120]	; (8014d18 <netconn_new_with_proto_and_callback+0xe8>)
 8014c9e:	481d      	ldr	r0, [pc, #116]	; (8014d14 <netconn_new_with_proto_and_callback+0xe4>)
 8014ca0:	f00f faf6 	bl	8024290 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 8014ca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ca6:	3314      	adds	r3, #20
 8014ca8:	4618      	mov	r0, r3
 8014caa:	f00d ff42 	bl	8022b32 <sys_mbox_valid>
 8014cae:	4603      	mov	r3, r0
 8014cb0:	2b00      	cmp	r3, #0
 8014cb2:	d005      	beq.n	8014cc0 <netconn_new_with_proto_and_callback+0x90>
 8014cb4:	4b15      	ldr	r3, [pc, #84]	; (8014d0c <netconn_new_with_proto_and_callback+0xdc>)
 8014cb6:	22a6      	movs	r2, #166	; 0xa6
 8014cb8:	4918      	ldr	r1, [pc, #96]	; (8014d1c <netconn_new_with_proto_and_callback+0xec>)
 8014cba:	4816      	ldr	r0, [pc, #88]	; (8014d14 <netconn_new_with_proto_and_callback+0xe4>)
 8014cbc:	f00f fae8 	bl	8024290 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 8014cc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc2:	330c      	adds	r3, #12
 8014cc4:	4618      	mov	r0, r3
 8014cc6:	f00d ffc5 	bl	8022c54 <sys_sem_valid>
 8014cca:	4603      	mov	r3, r0
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d105      	bne.n	8014cdc <netconn_new_with_proto_and_callback+0xac>
 8014cd0:	4b0e      	ldr	r3, [pc, #56]	; (8014d0c <netconn_new_with_proto_and_callback+0xdc>)
 8014cd2:	22a9      	movs	r2, #169	; 0xa9
 8014cd4:	4912      	ldr	r1, [pc, #72]	; (8014d20 <netconn_new_with_proto_and_callback+0xf0>)
 8014cd6:	480f      	ldr	r0, [pc, #60]	; (8014d14 <netconn_new_with_proto_and_callback+0xe4>)
 8014cd8:	f00f fada 	bl	8024290 <iprintf>
      sys_sem_free(&conn->op_completed);
 8014cdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cde:	330c      	adds	r3, #12
 8014ce0:	4618      	mov	r0, r3
 8014ce2:	f00d ffaa 	bl	8022c3a <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 8014ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ce8:	3310      	adds	r3, #16
 8014cea:	4618      	mov	r0, r3
 8014cec:	f00d fe9a 	bl	8022a24 <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8014cf0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014cf2:	2007      	movs	r0, #7
 8014cf4:	f003 f9f0 	bl	80180d8 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8014cf8:	2300      	movs	r3, #0
 8014cfa:	e000      	b.n	8014cfe <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8014cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8014cfe:	4618      	mov	r0, r3
 8014d00:	3730      	adds	r7, #48	; 0x30
 8014d02:	46bd      	mov	sp, r7
 8014d04:	bd80      	pop	{r7, pc}
 8014d06:	bf00      	nop
 8014d08:	08015f31 	.word	0x08015f31
 8014d0c:	08025830 	.word	0x08025830
 8014d10:	08025864 	.word	0x08025864
 8014d14:	08025888 	.word	0x08025888
 8014d18:	080258b0 	.word	0x080258b0
 8014d1c:	080258c8 	.word	0x080258c8
 8014d20:	080258ec 	.word	0x080258ec

08014d24 <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 8014d24:	b580      	push	{r7, lr}
 8014d26:	b08c      	sub	sp, #48	; 0x30
 8014d28:	af00      	add	r7, sp, #0
 8014d2a:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014d2c:	687b      	ldr	r3, [r7, #4]
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d101      	bne.n	8014d36 <netconn_prepare_delete+0x12>
    return ERR_OK;
 8014d32:	2300      	movs	r3, #0
 8014d34:	e014      	b.n	8014d60 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014d36:	687b      	ldr	r3, [r7, #4]
 8014d38:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8014d3a:	2329      	movs	r3, #41	; 0x29
 8014d3c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8014d3e:	f107 030c 	add.w	r3, r7, #12
 8014d42:	4619      	mov	r1, r3
 8014d44:	4808      	ldr	r0, [pc, #32]	; (8014d68 <netconn_prepare_delete+0x44>)
 8014d46:	f7ff ff55 	bl	8014bf4 <netconn_apimsg>
 8014d4a:	4603      	mov	r3, r0
 8014d4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8014d50:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014d54:	2b00      	cmp	r3, #0
 8014d56:	d002      	beq.n	8014d5e <netconn_prepare_delete+0x3a>
    return err;
 8014d58:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8014d5c:	e000      	b.n	8014d60 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8014d5e:	2300      	movs	r3, #0
}
 8014d60:	4618      	mov	r0, r3
 8014d62:	3730      	adds	r7, #48	; 0x30
 8014d64:	46bd      	mov	sp, r7
 8014d66:	bd80      	pop	{r7, pc}
 8014d68:	0801649d 	.word	0x0801649d

08014d6c <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8014d6c:	b580      	push	{r7, lr}
 8014d6e:	b084      	sub	sp, #16
 8014d70:	af00      	add	r7, sp, #0
 8014d72:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8014d74:	687b      	ldr	r3, [r7, #4]
 8014d76:	2b00      	cmp	r3, #0
 8014d78:	d101      	bne.n	8014d7e <netconn_delete+0x12>
    return ERR_OK;
 8014d7a:	2300      	movs	r3, #0
 8014d7c:	e00d      	b.n	8014d9a <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8014d7e:	6878      	ldr	r0, [r7, #4]
 8014d80:	f7ff ffd0 	bl	8014d24 <netconn_prepare_delete>
 8014d84:	4603      	mov	r3, r0
 8014d86:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 8014d88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014d8c:	2b00      	cmp	r3, #0
 8014d8e:	d102      	bne.n	8014d96 <netconn_delete+0x2a>
    netconn_free(conn);
 8014d90:	6878      	ldr	r0, [r7, #4]
 8014d92:	f001 f951 	bl	8016038 <netconn_free>
  }
  return err;
 8014d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014d9a:	4618      	mov	r0, r3
 8014d9c:	3710      	adds	r7, #16
 8014d9e:	46bd      	mov	sp, r7
 8014da0:	bd80      	pop	{r7, pc}
	...

08014da4 <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014da4:	b580      	push	{r7, lr}
 8014da6:	b08e      	sub	sp, #56	; 0x38
 8014da8:	af00      	add	r7, sp, #0
 8014daa:	60f8      	str	r0, [r7, #12]
 8014dac:	60b9      	str	r1, [r7, #8]
 8014dae:	4613      	mov	r3, r2
 8014db0:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 8014db2:	68fb      	ldr	r3, [r7, #12]
 8014db4:	2b00      	cmp	r3, #0
 8014db6:	d109      	bne.n	8014dcc <netconn_bind+0x28>
 8014db8:	4b11      	ldr	r3, [pc, #68]	; (8014e00 <netconn_bind+0x5c>)
 8014dba:	f44f 729c 	mov.w	r2, #312	; 0x138
 8014dbe:	4911      	ldr	r1, [pc, #68]	; (8014e04 <netconn_bind+0x60>)
 8014dc0:	4811      	ldr	r0, [pc, #68]	; (8014e08 <netconn_bind+0x64>)
 8014dc2:	f00f fa65 	bl	8024290 <iprintf>
 8014dc6:	f06f 030f 	mvn.w	r3, #15
 8014dca:	e015      	b.n	8014df8 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014dcc:	68bb      	ldr	r3, [r7, #8]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d101      	bne.n	8014dd6 <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 8014dd2:	4b0e      	ldr	r3, [pc, #56]	; (8014e0c <netconn_bind+0x68>)
 8014dd4:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014dd6:	68fb      	ldr	r3, [r7, #12]
 8014dd8:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014dde:	88fb      	ldrh	r3, [r7, #6]
 8014de0:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 8014de2:	f107 0314 	add.w	r3, r7, #20
 8014de6:	4619      	mov	r1, r3
 8014de8:	4809      	ldr	r0, [pc, #36]	; (8014e10 <netconn_bind+0x6c>)
 8014dea:	f7ff ff03 	bl	8014bf4 <netconn_apimsg>
 8014dee:	4603      	mov	r3, r0
 8014df0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014df4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014df8:	4618      	mov	r0, r3
 8014dfa:	3738      	adds	r7, #56	; 0x38
 8014dfc:	46bd      	mov	sp, r7
 8014dfe:	bd80      	pop	{r7, pc}
 8014e00:	08025830 	.word	0x08025830
 8014e04:	08025968 	.word	0x08025968
 8014e08:	08025888 	.word	0x08025888
 8014e0c:	08028e88 	.word	0x08028e88
 8014e10:	08016665 	.word	0x08016665

08014e14 <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 8014e14:	b580      	push	{r7, lr}
 8014e16:	b08e      	sub	sp, #56	; 0x38
 8014e18:	af00      	add	r7, sp, #0
 8014e1a:	60f8      	str	r0, [r7, #12]
 8014e1c:	60b9      	str	r1, [r7, #8]
 8014e1e:	4613      	mov	r3, r2
 8014e20:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 8014e22:	68fb      	ldr	r3, [r7, #12]
 8014e24:	2b00      	cmp	r3, #0
 8014e26:	d109      	bne.n	8014e3c <netconn_connect+0x28>
 8014e28:	4b11      	ldr	r3, [pc, #68]	; (8014e70 <netconn_connect+0x5c>)
 8014e2a:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8014e2e:	4911      	ldr	r1, [pc, #68]	; (8014e74 <netconn_connect+0x60>)
 8014e30:	4811      	ldr	r0, [pc, #68]	; (8014e78 <netconn_connect+0x64>)
 8014e32:	f00f fa2d 	bl	8024290 <iprintf>
 8014e36:	f06f 030f 	mvn.w	r3, #15
 8014e3a:	e015      	b.n	8014e68 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	2b00      	cmp	r3, #0
 8014e40:	d101      	bne.n	8014e46 <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 8014e42:	4b0e      	ldr	r3, [pc, #56]	; (8014e7c <netconn_connect+0x68>)
 8014e44:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014e46:	68fb      	ldr	r3, [r7, #12]
 8014e48:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8014e4a:	68bb      	ldr	r3, [r7, #8]
 8014e4c:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8014e4e:	88fb      	ldrh	r3, [r7, #6]
 8014e50:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 8014e52:	f107 0314 	add.w	r3, r7, #20
 8014e56:	4619      	mov	r1, r3
 8014e58:	4809      	ldr	r0, [pc, #36]	; (8014e80 <netconn_connect+0x6c>)
 8014e5a:	f7ff fecb 	bl	8014bf4 <netconn_apimsg>
 8014e5e:	4603      	mov	r3, r0
 8014e60:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 8014e64:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8014e68:	4618      	mov	r0, r3
 8014e6a:	3738      	adds	r7, #56	; 0x38
 8014e6c:	46bd      	mov	sp, r7
 8014e6e:	bd80      	pop	{r7, pc}
 8014e70:	08025830 	.word	0x08025830
 8014e74:	080259a4 	.word	0x080259a4
 8014e78:	08025888 	.word	0x08025888
 8014e7c:	08028e88 	.word	0x08028e88
 8014e80:	080167f9 	.word	0x080167f9

08014e84 <netconn_listen_with_backlog>:
 * @return ERR_OK if the netconn was set to listen (UDP and RAW netconns
 *         don't return any error (yet?))
 */
err_t
netconn_listen_with_backlog(struct netconn *conn, u8_t backlog)
{
 8014e84:	b580      	push	{r7, lr}
 8014e86:	b08c      	sub	sp, #48	; 0x30
 8014e88:	af00      	add	r7, sp, #0
 8014e8a:	6078      	str	r0, [r7, #4]
 8014e8c:	460b      	mov	r3, r1
 8014e8e:	70fb      	strb	r3, [r7, #3]
  err_t err;

  /* This does no harm. If TCP_LISTEN_BACKLOG is off, backlog is unused. */
  LWIP_UNUSED_ARG(backlog);

  LWIP_ERROR("netconn_listen: invalid conn", (conn != NULL), return ERR_ARG;);
 8014e90:	687b      	ldr	r3, [r7, #4]
 8014e92:	2b00      	cmp	r3, #0
 8014e94:	d109      	bne.n	8014eaa <netconn_listen_with_backlog+0x26>
 8014e96:	4b0d      	ldr	r3, [pc, #52]	; (8014ecc <netconn_listen_with_backlog+0x48>)
 8014e98:	f240 12bb 	movw	r2, #443	; 0x1bb
 8014e9c:	490c      	ldr	r1, [pc, #48]	; (8014ed0 <netconn_listen_with_backlog+0x4c>)
 8014e9e:	480d      	ldr	r0, [pc, #52]	; (8014ed4 <netconn_listen_with_backlog+0x50>)
 8014ea0:	f00f f9f6 	bl	8024290 <iprintf>
 8014ea4:	f06f 030f 	mvn.w	r3, #15
 8014ea8:	e00c      	b.n	8014ec4 <netconn_listen_with_backlog+0x40>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	60fb      	str	r3, [r7, #12]
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_REF(msg).msg.lb.backlog = backlog;
#endif /* TCP_LISTEN_BACKLOG */
  err = netconn_apimsg(lwip_netconn_do_listen, &API_MSG_VAR_REF(msg));
 8014eae:	f107 030c 	add.w	r3, r7, #12
 8014eb2:	4619      	mov	r1, r3
 8014eb4:	4808      	ldr	r0, [pc, #32]	; (8014ed8 <netconn_listen_with_backlog+0x54>)
 8014eb6:	f7ff fe9d 	bl	8014bf4 <netconn_apimsg>
 8014eba:	4603      	mov	r3, r0
 8014ebc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8014ec0:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(backlog);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014ec4:	4618      	mov	r0, r3
 8014ec6:	3730      	adds	r7, #48	; 0x30
 8014ec8:	46bd      	mov	sp, r7
 8014eca:	bd80      	pop	{r7, pc}
 8014ecc:	08025830 	.word	0x08025830
 8014ed0:	080259e8 	.word	0x080259e8
 8014ed4:	08025888 	.word	0x08025888
 8014ed8:	08016975 	.word	0x08016975

08014edc <netconn_accept>:
 * @return ERR_OK if a new connection has been received or an error
 *                code otherwise
 */
err_t
netconn_accept(struct netconn *conn, struct netconn **new_conn)
{
 8014edc:	b580      	push	{r7, lr}
 8014ede:	b086      	sub	sp, #24
 8014ee0:	af00      	add	r7, sp, #0
 8014ee2:	6078      	str	r0, [r7, #4]
 8014ee4:	6039      	str	r1, [r7, #0]
  struct netconn *newconn;
#if TCP_LISTEN_BACKLOG
  API_MSG_VAR_DECLARE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  LWIP_ERROR("netconn_accept: invalid pointer",    (new_conn != NULL),                  return ERR_ARG;);
 8014ee6:	683b      	ldr	r3, [r7, #0]
 8014ee8:	2b00      	cmp	r3, #0
 8014eea:	d109      	bne.n	8014f00 <netconn_accept+0x24>
 8014eec:	4b3d      	ldr	r3, [pc, #244]	; (8014fe4 <netconn_accept+0x108>)
 8014eee:	f240 12e1 	movw	r2, #481	; 0x1e1
 8014ef2:	493d      	ldr	r1, [pc, #244]	; (8014fe8 <netconn_accept+0x10c>)
 8014ef4:	483d      	ldr	r0, [pc, #244]	; (8014fec <netconn_accept+0x110>)
 8014ef6:	f00f f9cb 	bl	8024290 <iprintf>
 8014efa:	f06f 030f 	mvn.w	r3, #15
 8014efe:	e06c      	b.n	8014fda <netconn_accept+0xfe>
  *new_conn = NULL;
 8014f00:	683b      	ldr	r3, [r7, #0]
 8014f02:	2200      	movs	r2, #0
 8014f04:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_accept: invalid conn",       (conn != NULL),                      return ERR_ARG;);
 8014f06:	687b      	ldr	r3, [r7, #4]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	d109      	bne.n	8014f20 <netconn_accept+0x44>
 8014f0c:	4b35      	ldr	r3, [pc, #212]	; (8014fe4 <netconn_accept+0x108>)
 8014f0e:	f240 12e3 	movw	r2, #483	; 0x1e3
 8014f12:	4937      	ldr	r1, [pc, #220]	; (8014ff0 <netconn_accept+0x114>)
 8014f14:	4835      	ldr	r0, [pc, #212]	; (8014fec <netconn_accept+0x110>)
 8014f16:	f00f f9bb 	bl	8024290 <iprintf>
 8014f1a:	f06f 030f 	mvn.w	r3, #15
 8014f1e:	e05c      	b.n	8014fda <netconn_accept+0xfe>

  /* NOTE: Although the opengroup spec says a pending error shall be returned to
           send/recv/getsockopt(SO_ERROR) only, we return it for listening
           connections also, to handle embedded-system errors */
  err = netconn_err(conn);
 8014f20:	6878      	ldr	r0, [r7, #4]
 8014f22:	f000 fb9a 	bl	801565a <netconn_err>
 8014f26:	4603      	mov	r3, r0
 8014f28:	74fb      	strb	r3, [r7, #19]
  if (err != ERR_OK) {
 8014f2a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d002      	beq.n	8014f38 <netconn_accept+0x5c>
    /* return pending error */
    return err;
 8014f32:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014f36:	e050      	b.n	8014fda <netconn_accept+0xfe>
  }
  if (!NETCONN_ACCEPTMBOX_WAITABLE(conn)) {
 8014f38:	687b      	ldr	r3, [r7, #4]
 8014f3a:	3314      	adds	r3, #20
 8014f3c:	4618      	mov	r0, r3
 8014f3e:	f00d fdf8 	bl	8022b32 <sys_mbox_valid>
 8014f42:	4603      	mov	r3, r0
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d005      	beq.n	8014f54 <netconn_accept+0x78>
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	7f1b      	ldrb	r3, [r3, #28]
 8014f4c:	f003 0301 	and.w	r3, r3, #1
 8014f50:	2b00      	cmp	r3, #0
 8014f52:	d002      	beq.n	8014f5a <netconn_accept+0x7e>
    /* don't accept if closed: this might block the application task
       waiting on acceptmbox forever! */
    return ERR_CLSD;
 8014f54:	f06f 030e 	mvn.w	r3, #14
 8014f58:	e03f      	b.n	8014fda <netconn_accept+0xfe>
  }

  API_MSG_VAR_ALLOC_ACCEPT(msg);

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn)) {
 8014f5a:	687b      	ldr	r3, [r7, #4]
 8014f5c:	7f1b      	ldrb	r3, [r3, #28]
 8014f5e:	f003 0302 	and.w	r3, r3, #2
 8014f62:	2b00      	cmp	r3, #0
 8014f64:	d00e      	beq.n	8014f84 <netconn_accept+0xa8>
    if (sys_arch_mbox_tryfetch(&conn->acceptmbox, &accept_ptr) == SYS_ARCH_TIMEOUT) {
 8014f66:	687b      	ldr	r3, [r7, #4]
 8014f68:	3314      	adds	r3, #20
 8014f6a:	f107 020c 	add.w	r2, r7, #12
 8014f6e:	4611      	mov	r1, r2
 8014f70:	4618      	mov	r0, r3
 8014f72:	f00d fdc2 	bl	8022afa <sys_arch_mbox_tryfetch>
 8014f76:	4603      	mov	r3, r0
 8014f78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8014f7c:	d10a      	bne.n	8014f94 <netconn_accept+0xb8>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_WOULDBLOCK;
 8014f7e:	f06f 0306 	mvn.w	r3, #6
 8014f82:	e02a      	b.n	8014fda <netconn_accept+0xfe>
      API_MSG_VAR_FREE_ACCEPT(msg);
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->acceptmbox, &accept_ptr, 0);
 8014f84:	687b      	ldr	r3, [r7, #4]
 8014f86:	3314      	adds	r3, #20
 8014f88:	f107 010c 	add.w	r1, r7, #12
 8014f8c:	2200      	movs	r2, #0
 8014f8e:	4618      	mov	r0, r3
 8014f90:	f00d fd74 	bl	8022a7c <sys_arch_mbox_fetch>
    }
  }
#endif

  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8014f94:	687b      	ldr	r3, [r7, #4]
 8014f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d005      	beq.n	8014fa8 <netconn_accept+0xcc>
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014fa0:	2200      	movs	r2, #0
 8014fa2:	2101      	movs	r1, #1
 8014fa4:	6878      	ldr	r0, [r7, #4]
 8014fa6:	4798      	blx	r3

  if (lwip_netconn_is_err_msg(accept_ptr, &err)) {
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f107 0213 	add.w	r2, r7, #19
 8014fae:	4611      	mov	r1, r2
 8014fb0:	4618      	mov	r0, r3
 8014fb2:	f000 fba3 	bl	80156fc <lwip_netconn_is_err_msg>
 8014fb6:	4603      	mov	r3, r0
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d002      	beq.n	8014fc2 <netconn_accept+0xe6>
    /* a connection has been aborted: e.g. out of pcbs or out of netconns during accept */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return err;
 8014fbc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014fc0:	e00b      	b.n	8014fda <netconn_accept+0xfe>
  }
  if (accept_ptr == NULL) {
 8014fc2:	68fb      	ldr	r3, [r7, #12]
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d102      	bne.n	8014fce <netconn_accept+0xf2>
    /* connection has been aborted */
    API_MSG_VAR_FREE_ACCEPT(msg);
    return ERR_CLSD;
 8014fc8:	f06f 030e 	mvn.w	r3, #14
 8014fcc:	e005      	b.n	8014fda <netconn_accept+0xfe>
  }
  newconn = (struct netconn *)accept_ptr;
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	617b      	str	r3, [r7, #20]
  /* don't care for the return value of lwip_netconn_do_recv */
  netconn_apimsg(lwip_netconn_do_accepted, &API_MSG_VAR_REF(msg));
  API_MSG_VAR_FREE(msg);
#endif /* TCP_LISTEN_BACKLOG */

  *new_conn = newconn;
 8014fd2:	683b      	ldr	r3, [r7, #0]
 8014fd4:	697a      	ldr	r2, [r7, #20]
 8014fd6:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8014fd8:	2300      	movs	r3, #0
#else /* LWIP_TCP */
  LWIP_UNUSED_ARG(conn);
  LWIP_UNUSED_ARG(new_conn);
  return ERR_ARG;
#endif /* LWIP_TCP */
}
 8014fda:	4618      	mov	r0, r3
 8014fdc:	3718      	adds	r7, #24
 8014fde:	46bd      	mov	sp, r7
 8014fe0:	bd80      	pop	{r7, pc}
 8014fe2:	bf00      	nop
 8014fe4:	08025830 	.word	0x08025830
 8014fe8:	08025a08 	.word	0x08025a08
 8014fec:	08025888 	.word	0x08025888
 8014ff0:	08025a28 	.word	0x08025a28

08014ff4 <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b088      	sub	sp, #32
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	60f8      	str	r0, [r7, #12]
 8014ffc:	60b9      	str	r1, [r7, #8]
 8014ffe:	4613      	mov	r3, r2
 8015000:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 8015002:	2300      	movs	r3, #0
 8015004:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8015006:	68bb      	ldr	r3, [r7, #8]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d109      	bne.n	8015020 <netconn_recv_data+0x2c>
 801500c:	4b58      	ldr	r3, [pc, #352]	; (8015170 <netconn_recv_data+0x17c>)
 801500e:	f44f 7212 	mov.w	r2, #584	; 0x248
 8015012:	4958      	ldr	r1, [pc, #352]	; (8015174 <netconn_recv_data+0x180>)
 8015014:	4858      	ldr	r0, [pc, #352]	; (8015178 <netconn_recv_data+0x184>)
 8015016:	f00f f93b 	bl	8024290 <iprintf>
 801501a:	f06f 030f 	mvn.w	r3, #15
 801501e:	e0a2      	b.n	8015166 <netconn_recv_data+0x172>
  *new_buf = NULL;
 8015020:	68bb      	ldr	r3, [r7, #8]
 8015022:	2200      	movs	r2, #0
 8015024:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8015026:	68fb      	ldr	r3, [r7, #12]
 8015028:	2b00      	cmp	r3, #0
 801502a:	d109      	bne.n	8015040 <netconn_recv_data+0x4c>
 801502c:	4b50      	ldr	r3, [pc, #320]	; (8015170 <netconn_recv_data+0x17c>)
 801502e:	f240 224a 	movw	r2, #586	; 0x24a
 8015032:	4952      	ldr	r1, [pc, #328]	; (801517c <netconn_recv_data+0x188>)
 8015034:	4850      	ldr	r0, [pc, #320]	; (8015178 <netconn_recv_data+0x184>)
 8015036:	f00f f92b 	bl	8024290 <iprintf>
 801503a:	f06f 030f 	mvn.w	r3, #15
 801503e:	e092      	b.n	8015166 <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	3310      	adds	r3, #16
 8015044:	4618      	mov	r0, r3
 8015046:	f00d fd74 	bl	8022b32 <sys_mbox_valid>
 801504a:	4603      	mov	r3, r0
 801504c:	2b00      	cmp	r3, #0
 801504e:	d10e      	bne.n	801506e <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 8015050:	68f8      	ldr	r0, [r7, #12]
 8015052:	f000 fb02 	bl	801565a <netconn_err>
 8015056:	4603      	mov	r3, r0
 8015058:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 801505a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 801505e:	2b00      	cmp	r3, #0
 8015060:	d002      	beq.n	8015068 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 8015062:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8015066:	e07e      	b.n	8015166 <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8015068:	f06f 030a 	mvn.w	r3, #10
 801506c:	e07b      	b.n	8015166 <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801506e:	68fb      	ldr	r3, [r7, #12]
 8015070:	7f1b      	ldrb	r3, [r3, #28]
 8015072:	f003 0302 	and.w	r3, r3, #2
 8015076:	2b00      	cmp	r3, #0
 8015078:	d10f      	bne.n	801509a <netconn_recv_data+0xa6>
 801507a:	79fb      	ldrb	r3, [r7, #7]
 801507c:	f003 0304 	and.w	r3, r3, #4
 8015080:	2b00      	cmp	r3, #0
 8015082:	d10a      	bne.n	801509a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8015084:	68fb      	ldr	r3, [r7, #12]
 8015086:	7f1b      	ldrb	r3, [r3, #28]
 8015088:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 801508c:	2b00      	cmp	r3, #0
 801508e:	d104      	bne.n	801509a <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f993 3008 	ldrsb.w	r3, [r3, #8]
 8015096:	2b00      	cmp	r3, #0
 8015098:	d023      	beq.n	80150e2 <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 801509a:	68fb      	ldr	r3, [r7, #12]
 801509c:	3310      	adds	r3, #16
 801509e:	f107 0218 	add.w	r2, r7, #24
 80150a2:	4611      	mov	r1, r2
 80150a4:	4618      	mov	r0, r3
 80150a6:	f00d fd28 	bl	8022afa <sys_arch_mbox_tryfetch>
 80150aa:	4603      	mov	r3, r0
 80150ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80150b0:	d11f      	bne.n	80150f2 <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 80150b2:	68f8      	ldr	r0, [r7, #12]
 80150b4:	f000 fad1 	bl	801565a <netconn_err>
 80150b8:	4603      	mov	r3, r0
 80150ba:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 80150bc:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d002      	beq.n	80150ca <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 80150c4:	f997 301d 	ldrsb.w	r3, [r7, #29]
 80150c8:	e04d      	b.n	8015166 <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 80150ca:	68fb      	ldr	r3, [r7, #12]
 80150cc:	7f1b      	ldrb	r3, [r3, #28]
 80150ce:	f003 0301 	and.w	r3, r3, #1
 80150d2:	2b00      	cmp	r3, #0
 80150d4:	d002      	beq.n	80150dc <netconn_recv_data+0xe8>
        return ERR_CONN;
 80150d6:	f06f 030a 	mvn.w	r3, #10
 80150da:	e044      	b.n	8015166 <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 80150dc:	f06f 0306 	mvn.w	r3, #6
 80150e0:	e041      	b.n	8015166 <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	3310      	adds	r3, #16
 80150e6:	f107 0118 	add.w	r1, r7, #24
 80150ea:	2200      	movs	r2, #0
 80150ec:	4618      	mov	r0, r3
 80150ee:	f00d fcc5 	bl	8022a7c <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	781b      	ldrb	r3, [r3, #0]
 80150f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80150fa:	2b10      	cmp	r3, #16
 80150fc:	d117      	bne.n	801512e <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80150fe:	69bb      	ldr	r3, [r7, #24]
 8015100:	f107 0217 	add.w	r2, r7, #23
 8015104:	4611      	mov	r1, r2
 8015106:	4618      	mov	r0, r3
 8015108:	f000 faf8 	bl	80156fc <lwip_netconn_is_err_msg>
 801510c:	4603      	mov	r3, r0
 801510e:	2b00      	cmp	r3, #0
 8015110:	d009      	beq.n	8015126 <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 8015112:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015116:	f113 0f0f 	cmn.w	r3, #15
 801511a:	d101      	bne.n	8015120 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 801511c:	2300      	movs	r3, #0
 801511e:	e022      	b.n	8015166 <netconn_recv_data+0x172>
      }
      return err;
 8015120:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8015124:	e01f      	b.n	8015166 <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 8015126:	69bb      	ldr	r3, [r7, #24]
 8015128:	891b      	ldrh	r3, [r3, #8]
 801512a:	83fb      	strh	r3, [r7, #30]
 801512c:	e00d      	b.n	801514a <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 801512e:	69bb      	ldr	r3, [r7, #24]
 8015130:	2b00      	cmp	r3, #0
 8015132:	d106      	bne.n	8015142 <netconn_recv_data+0x14e>
 8015134:	4b0e      	ldr	r3, [pc, #56]	; (8015170 <netconn_recv_data+0x17c>)
 8015136:	f240 2291 	movw	r2, #657	; 0x291
 801513a:	4911      	ldr	r1, [pc, #68]	; (8015180 <netconn_recv_data+0x18c>)
 801513c:	480e      	ldr	r0, [pc, #56]	; (8015178 <netconn_recv_data+0x184>)
 801513e:	f00f f8a7 	bl	8024290 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 8015142:	69bb      	ldr	r3, [r7, #24]
 8015144:	681b      	ldr	r3, [r3, #0]
 8015146:	891b      	ldrh	r3, [r3, #8]
 8015148:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 801514a:	68fb      	ldr	r3, [r7, #12]
 801514c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801514e:	2b00      	cmp	r3, #0
 8015150:	d005      	beq.n	801515e <netconn_recv_data+0x16a>
 8015152:	68fb      	ldr	r3, [r7, #12]
 8015154:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015156:	8bfa      	ldrh	r2, [r7, #30]
 8015158:	2101      	movs	r1, #1
 801515a:	68f8      	ldr	r0, [r7, #12]
 801515c:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 801515e:	69ba      	ldr	r2, [r7, #24]
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8015164:	2300      	movs	r3, #0
}
 8015166:	4618      	mov	r0, r3
 8015168:	3720      	adds	r7, #32
 801516a:	46bd      	mov	sp, r7
 801516c:	bd80      	pop	{r7, pc}
 801516e:	bf00      	nop
 8015170:	08025830 	.word	0x08025830
 8015174:	08025a48 	.word	0x08025a48
 8015178:	08025888 	.word	0x08025888
 801517c:	08025a68 	.word	0x08025a68
 8015180:	08025a84 	.word	0x08025a84

08015184 <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8015184:	b580      	push	{r7, lr}
 8015186:	b084      	sub	sp, #16
 8015188:	af00      	add	r7, sp, #0
 801518a:	60f8      	str	r0, [r7, #12]
 801518c:	60b9      	str	r1, [r7, #8]
 801518e:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d005      	beq.n	80151a2 <netconn_tcp_recvd_msg+0x1e>
 8015196:	68fb      	ldr	r3, [r7, #12]
 8015198:	781b      	ldrb	r3, [r3, #0]
 801519a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801519e:	2b10      	cmp	r3, #16
 80151a0:	d009      	beq.n	80151b6 <netconn_tcp_recvd_msg+0x32>
 80151a2:	4b0c      	ldr	r3, [pc, #48]	; (80151d4 <netconn_tcp_recvd_msg+0x50>)
 80151a4:	f240 22a7 	movw	r2, #679	; 0x2a7
 80151a8:	490b      	ldr	r1, [pc, #44]	; (80151d8 <netconn_tcp_recvd_msg+0x54>)
 80151aa:	480c      	ldr	r0, [pc, #48]	; (80151dc <netconn_tcp_recvd_msg+0x58>)
 80151ac:	f00f f870 	bl	8024290 <iprintf>
 80151b0:	f06f 030f 	mvn.w	r3, #15
 80151b4:	e00a      	b.n	80151cc <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 80151b6:	687b      	ldr	r3, [r7, #4]
 80151b8:	68fa      	ldr	r2, [r7, #12]
 80151ba:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	68ba      	ldr	r2, [r7, #8]
 80151c0:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 80151c2:	6879      	ldr	r1, [r7, #4]
 80151c4:	4806      	ldr	r0, [pc, #24]	; (80151e0 <netconn_tcp_recvd_msg+0x5c>)
 80151c6:	f7ff fd15 	bl	8014bf4 <netconn_apimsg>
 80151ca:	4603      	mov	r3, r0
}
 80151cc:	4618      	mov	r0, r3
 80151ce:	3710      	adds	r7, #16
 80151d0:	46bd      	mov	sp, r7
 80151d2:	bd80      	pop	{r7, pc}
 80151d4:	08025830 	.word	0x08025830
 80151d8:	08025a90 	.word	0x08025a90
 80151dc:	08025888 	.word	0x08025888
 80151e0:	08016b3f 	.word	0x08016b3f

080151e4 <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 80151e4:	b580      	push	{r7, lr}
 80151e6:	b090      	sub	sp, #64	; 0x40
 80151e8:	af00      	add	r7, sp, #0
 80151ea:	60f8      	str	r0, [r7, #12]
 80151ec:	60b9      	str	r1, [r7, #8]
 80151ee:	4613      	mov	r3, r2
 80151f0:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80151f2:	68fb      	ldr	r3, [r7, #12]
 80151f4:	3310      	adds	r3, #16
 80151f6:	4618      	mov	r0, r3
 80151f8:	f00d fc9b 	bl	8022b32 <sys_mbox_valid>
 80151fc:	4603      	mov	r3, r0
 80151fe:	2b00      	cmp	r3, #0
 8015200:	d102      	bne.n	8015208 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8015202:	f06f 030a 	mvn.w	r3, #10
 8015206:	e06d      	b.n	80152e4 <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8015208:	68fb      	ldr	r3, [r7, #12]
 801520a:	7f1b      	ldrb	r3, [r3, #28]
 801520c:	b25b      	sxtb	r3, r3
 801520e:	2b00      	cmp	r3, #0
 8015210:	da07      	bge.n	8015222 <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8015212:	68fb      	ldr	r3, [r7, #12]
 8015214:	7f1b      	ldrb	r3, [r3, #28]
 8015216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801521a:	b2da      	uxtb	r2, r3
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8015220:	e039      	b.n	8015296 <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8015222:	79fb      	ldrb	r3, [r7, #7]
 8015224:	461a      	mov	r2, r3
 8015226:	68b9      	ldr	r1, [r7, #8]
 8015228:	68f8      	ldr	r0, [r7, #12]
 801522a:	f7ff fee3 	bl	8014ff4 <netconn_recv_data>
 801522e:	4603      	mov	r3, r0
 8015230:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8015234:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015238:	2b00      	cmp	r3, #0
 801523a:	d002      	beq.n	8015242 <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 801523c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8015240:	e050      	b.n	80152e4 <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8015248:	79fb      	ldrb	r3, [r7, #7]
 801524a:	f003 0308 	and.w	r3, r3, #8
 801524e:	2b00      	cmp	r3, #0
 8015250:	d10e      	bne.n	8015270 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8015252:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015254:	2b00      	cmp	r3, #0
 8015256:	d002      	beq.n	801525e <netconn_recv_data_tcp+0x7a>
 8015258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801525a:	891b      	ldrh	r3, [r3, #8]
 801525c:	e000      	b.n	8015260 <netconn_recv_data_tcp+0x7c>
 801525e:	2301      	movs	r3, #1
 8015260:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8015262:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8015264:	f107 0214 	add.w	r2, r7, #20
 8015268:	4619      	mov	r1, r3
 801526a:	68f8      	ldr	r0, [r7, #12]
 801526c:	f7ff ff8a 	bl	8015184 <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8015270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015272:	2b00      	cmp	r3, #0
 8015274:	d134      	bne.n	80152e0 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8015276:	79fb      	ldrb	r3, [r7, #7]
 8015278:	f003 0310 	and.w	r3, r3, #16
 801527c:	2b00      	cmp	r3, #0
 801527e:	d009      	beq.n	8015294 <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	7f1b      	ldrb	r3, [r3, #28]
 8015284:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015288:	b2da      	uxtb	r2, r3
 801528a:	68fb      	ldr	r3, [r7, #12]
 801528c:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 801528e:	f06f 0306 	mvn.w	r3, #6
 8015292:	e027      	b.n	80152e4 <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8015294:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8015296:	68fb      	ldr	r3, [r7, #12]
 8015298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801529a:	2b00      	cmp	r3, #0
 801529c:	d005      	beq.n	80152aa <netconn_recv_data_tcp+0xc6>
 801529e:	68fb      	ldr	r3, [r7, #12]
 80152a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80152a2:	2200      	movs	r2, #0
 80152a4:	2101      	movs	r1, #1
 80152a6:	68f8      	ldr	r0, [r7, #12]
 80152a8:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 80152aa:	68fb      	ldr	r3, [r7, #12]
 80152ac:	685b      	ldr	r3, [r3, #4]
 80152ae:	2b00      	cmp	r3, #0
 80152b0:	d10f      	bne.n	80152d2 <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 80152b2:	68f8      	ldr	r0, [r7, #12]
 80152b4:	f000 f9d1 	bl	801565a <netconn_err>
 80152b8:	4603      	mov	r3, r0
 80152ba:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 80152be:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80152c2:	2b00      	cmp	r3, #0
 80152c4:	d002      	beq.n	80152cc <netconn_recv_data_tcp+0xe8>
          return err;
 80152c6:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 80152ca:	e00b      	b.n	80152e4 <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 80152cc:	f06f 030d 	mvn.w	r3, #13
 80152d0:	e008      	b.n	80152e4 <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 80152d2:	2101      	movs	r1, #1
 80152d4:	68f8      	ldr	r0, [r7, #12]
 80152d6:	f000 f983 	bl	80155e0 <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 80152da:	f06f 030e 	mvn.w	r3, #14
 80152de:	e001      	b.n	80152e4 <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 80152e0:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 80152e4:	4618      	mov	r0, r3
 80152e6:	3740      	adds	r7, #64	; 0x40
 80152e8:	46bd      	mov	sp, r7
 80152ea:	bd80      	pop	{r7, pc}

080152ec <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b086      	sub	sp, #24
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 80152f6:	2300      	movs	r3, #0
 80152f8:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80152fa:	683b      	ldr	r3, [r7, #0]
 80152fc:	2b00      	cmp	r3, #0
 80152fe:	d109      	bne.n	8015314 <netconn_recv+0x28>
 8015300:	4b32      	ldr	r3, [pc, #200]	; (80153cc <netconn_recv+0xe0>)
 8015302:	f240 3263 	movw	r2, #867	; 0x363
 8015306:	4932      	ldr	r1, [pc, #200]	; (80153d0 <netconn_recv+0xe4>)
 8015308:	4832      	ldr	r0, [pc, #200]	; (80153d4 <netconn_recv+0xe8>)
 801530a:	f00e ffc1 	bl	8024290 <iprintf>
 801530e:	f06f 030f 	mvn.w	r3, #15
 8015312:	e056      	b.n	80153c2 <netconn_recv+0xd6>
  *new_buf = NULL;
 8015314:	683b      	ldr	r3, [r7, #0]
 8015316:	2200      	movs	r2, #0
 8015318:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	2b00      	cmp	r3, #0
 801531e:	d109      	bne.n	8015334 <netconn_recv+0x48>
 8015320:	4b2a      	ldr	r3, [pc, #168]	; (80153cc <netconn_recv+0xe0>)
 8015322:	f240 3265 	movw	r2, #869	; 0x365
 8015326:	492c      	ldr	r1, [pc, #176]	; (80153d8 <netconn_recv+0xec>)
 8015328:	482a      	ldr	r0, [pc, #168]	; (80153d4 <netconn_recv+0xe8>)
 801532a:	f00e ffb1 	bl	8024290 <iprintf>
 801532e:	f06f 030f 	mvn.w	r3, #15
 8015332:	e046      	b.n	80153c2 <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8015334:	687b      	ldr	r3, [r7, #4]
 8015336:	781b      	ldrb	r3, [r3, #0]
 8015338:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801533c:	2b10      	cmp	r3, #16
 801533e:	d13a      	bne.n	80153b6 <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8015340:	2300      	movs	r3, #0
 8015342:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8015344:	2006      	movs	r0, #6
 8015346:	f002 fe51 	bl	8017fec <memp_malloc>
 801534a:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 801534c:	697b      	ldr	r3, [r7, #20]
 801534e:	2b00      	cmp	r3, #0
 8015350:	d102      	bne.n	8015358 <netconn_recv+0x6c>
      return ERR_MEM;
 8015352:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015356:	e034      	b.n	80153c2 <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8015358:	f107 030c 	add.w	r3, r7, #12
 801535c:	2200      	movs	r2, #0
 801535e:	4619      	mov	r1, r3
 8015360:	6878      	ldr	r0, [r7, #4]
 8015362:	f7ff ff3f 	bl	80151e4 <netconn_recv_data_tcp>
 8015366:	4603      	mov	r3, r0
 8015368:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 801536a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801536e:	2b00      	cmp	r3, #0
 8015370:	d006      	beq.n	8015380 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8015372:	6979      	ldr	r1, [r7, #20]
 8015374:	2006      	movs	r0, #6
 8015376:	f002 feaf 	bl	80180d8 <memp_free>
      return err;
 801537a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801537e:	e020      	b.n	80153c2 <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8015380:	68fb      	ldr	r3, [r7, #12]
 8015382:	2b00      	cmp	r3, #0
 8015384:	d106      	bne.n	8015394 <netconn_recv+0xa8>
 8015386:	4b11      	ldr	r3, [pc, #68]	; (80153cc <netconn_recv+0xe0>)
 8015388:	f240 3279 	movw	r2, #889	; 0x379
 801538c:	4913      	ldr	r1, [pc, #76]	; (80153dc <netconn_recv+0xf0>)
 801538e:	4811      	ldr	r0, [pc, #68]	; (80153d4 <netconn_recv+0xe8>)
 8015390:	f00e ff7e 	bl	8024290 <iprintf>

    buf->p = p;
 8015394:	68fa      	ldr	r2, [r7, #12]
 8015396:	697b      	ldr	r3, [r7, #20]
 8015398:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 801539a:	68fa      	ldr	r2, [r7, #12]
 801539c:	697b      	ldr	r3, [r7, #20]
 801539e:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 80153a0:	697b      	ldr	r3, [r7, #20]
 80153a2:	2200      	movs	r2, #0
 80153a4:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 80153a6:	697b      	ldr	r3, [r7, #20]
 80153a8:	2200      	movs	r2, #0
 80153aa:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 80153ac:	683b      	ldr	r3, [r7, #0]
 80153ae:	697a      	ldr	r2, [r7, #20]
 80153b0:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 80153b2:	2300      	movs	r3, #0
 80153b4:	e005      	b.n	80153c2 <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 80153b6:	2200      	movs	r2, #0
 80153b8:	6839      	ldr	r1, [r7, #0]
 80153ba:	6878      	ldr	r0, [r7, #4]
 80153bc:	f7ff fe1a 	bl	8014ff4 <netconn_recv_data>
 80153c0:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 80153c2:	4618      	mov	r0, r3
 80153c4:	3718      	adds	r7, #24
 80153c6:	46bd      	mov	sp, r7
 80153c8:	bd80      	pop	{r7, pc}
 80153ca:	bf00      	nop
 80153cc:	08025830 	.word	0x08025830
 80153d0:	08025a48 	.word	0x08025a48
 80153d4:	08025888 	.word	0x08025888
 80153d8:	08025a68 	.word	0x08025a68
 80153dc:	08025ae0 	.word	0x08025ae0

080153e0 <netconn_send>:
 * @param buf a netbuf containing the data to send
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_send(struct netconn *conn, struct netbuf *buf)
{
 80153e0:	b580      	push	{r7, lr}
 80153e2:	b08c      	sub	sp, #48	; 0x30
 80153e4:	af00      	add	r7, sp, #0
 80153e6:	6078      	str	r0, [r7, #4]
 80153e8:	6039      	str	r1, [r7, #0]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_send: invalid conn",  (conn != NULL), return ERR_ARG;);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2b00      	cmp	r3, #0
 80153ee:	d109      	bne.n	8015404 <netconn_send+0x24>
 80153f0:	4b0e      	ldr	r3, [pc, #56]	; (801542c <netconn_send+0x4c>)
 80153f2:	f240 32b2 	movw	r2, #946	; 0x3b2
 80153f6:	490e      	ldr	r1, [pc, #56]	; (8015430 <netconn_send+0x50>)
 80153f8:	480e      	ldr	r0, [pc, #56]	; (8015434 <netconn_send+0x54>)
 80153fa:	f00e ff49 	bl	8024290 <iprintf>
 80153fe:	f06f 030f 	mvn.w	r3, #15
 8015402:	e00e      	b.n	8015422 <netconn_send+0x42>

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_send: sending %"U16_F" bytes\n", buf->p->tot_len));

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	60fb      	str	r3, [r7, #12]
  API_MSG_VAR_REF(msg).msg.b = buf;
 8015408:	683b      	ldr	r3, [r7, #0]
 801540a:	617b      	str	r3, [r7, #20]
  err = netconn_apimsg(lwip_netconn_do_send, &API_MSG_VAR_REF(msg));
 801540c:	f107 030c 	add.w	r3, r7, #12
 8015410:	4619      	mov	r1, r3
 8015412:	4809      	ldr	r0, [pc, #36]	; (8015438 <netconn_send+0x58>)
 8015414:	f7ff fbee 	bl	8014bf4 <netconn_apimsg>
 8015418:	4603      	mov	r3, r0
 801541a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 801541e:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8015422:	4618      	mov	r0, r3
 8015424:	3730      	adds	r7, #48	; 0x30
 8015426:	46bd      	mov	sp, r7
 8015428:	bd80      	pop	{r7, pc}
 801542a:	bf00      	nop
 801542c:	08025830 	.word	0x08025830
 8015430:	08025aec 	.word	0x08025aec
 8015434:	08025888 	.word	0x08025888
 8015438:	08016aa5 	.word	0x08016aa5

0801543c <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 801543c:	b580      	push	{r7, lr}
 801543e:	b088      	sub	sp, #32
 8015440:	af02      	add	r7, sp, #8
 8015442:	60f8      	str	r0, [r7, #12]
 8015444:	60b9      	str	r1, [r7, #8]
 8015446:	607a      	str	r2, [r7, #4]
 8015448:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 801544a:	68bb      	ldr	r3, [r7, #8]
 801544c:	613b      	str	r3, [r7, #16]
  vector.len = size;
 801544e:	687b      	ldr	r3, [r7, #4]
 8015450:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8015452:	78fa      	ldrb	r2, [r7, #3]
 8015454:	f107 0110 	add.w	r1, r7, #16
 8015458:	6a3b      	ldr	r3, [r7, #32]
 801545a:	9300      	str	r3, [sp, #0]
 801545c:	4613      	mov	r3, r2
 801545e:	2201      	movs	r2, #1
 8015460:	68f8      	ldr	r0, [r7, #12]
 8015462:	f000 f805 	bl	8015470 <netconn_write_vectors_partly>
 8015466:	4603      	mov	r3, r0
}
 8015468:	4618      	mov	r0, r3
 801546a:	3718      	adds	r7, #24
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b092      	sub	sp, #72	; 0x48
 8015474:	af00      	add	r7, sp, #0
 8015476:	60f8      	str	r0, [r7, #12]
 8015478:	60b9      	str	r1, [r7, #8]
 801547a:	4611      	mov	r1, r2
 801547c:	461a      	mov	r2, r3
 801547e:	460b      	mov	r3, r1
 8015480:	80fb      	strh	r3, [r7, #6]
 8015482:	4613      	mov	r3, r2
 8015484:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8015486:	68fb      	ldr	r3, [r7, #12]
 8015488:	2b00      	cmp	r3, #0
 801548a:	d109      	bne.n	80154a0 <netconn_write_vectors_partly+0x30>
 801548c:	4b4e      	ldr	r3, [pc, #312]	; (80155c8 <netconn_write_vectors_partly+0x158>)
 801548e:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8015492:	494e      	ldr	r1, [pc, #312]	; (80155cc <netconn_write_vectors_partly+0x15c>)
 8015494:	484e      	ldr	r0, [pc, #312]	; (80155d0 <netconn_write_vectors_partly+0x160>)
 8015496:	f00e fefb 	bl	8024290 <iprintf>
 801549a:	f06f 030f 	mvn.w	r3, #15
 801549e:	e08e      	b.n	80155be <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 80154a0:	68fb      	ldr	r3, [r7, #12]
 80154a2:	781b      	ldrb	r3, [r3, #0]
 80154a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80154a8:	2b10      	cmp	r3, #16
 80154aa:	d009      	beq.n	80154c0 <netconn_write_vectors_partly+0x50>
 80154ac:	4b46      	ldr	r3, [pc, #280]	; (80155c8 <netconn_write_vectors_partly+0x158>)
 80154ae:	f240 32ef 	movw	r2, #1007	; 0x3ef
 80154b2:	4948      	ldr	r1, [pc, #288]	; (80155d4 <netconn_write_vectors_partly+0x164>)
 80154b4:	4846      	ldr	r0, [pc, #280]	; (80155d0 <netconn_write_vectors_partly+0x160>)
 80154b6:	f00e feeb 	bl	8024290 <iprintf>
 80154ba:	f06f 0305 	mvn.w	r3, #5
 80154be:	e07e      	b.n	80155be <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 80154c0:	68fb      	ldr	r3, [r7, #12]
 80154c2:	7f1b      	ldrb	r3, [r3, #28]
 80154c4:	f003 0302 	and.w	r3, r3, #2
 80154c8:	2b00      	cmp	r3, #0
 80154ca:	d104      	bne.n	80154d6 <netconn_write_vectors_partly+0x66>
 80154cc:	797b      	ldrb	r3, [r7, #5]
 80154ce:	f003 0304 	and.w	r3, r3, #4
 80154d2:	2b00      	cmp	r3, #0
 80154d4:	d001      	beq.n	80154da <netconn_write_vectors_partly+0x6a>
 80154d6:	2301      	movs	r3, #1
 80154d8:	e000      	b.n	80154dc <netconn_write_vectors_partly+0x6c>
 80154da:	2300      	movs	r3, #0
 80154dc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 80154e0:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80154e4:	2b00      	cmp	r3, #0
 80154e6:	d005      	beq.n	80154f4 <netconn_write_vectors_partly+0x84>
 80154e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80154ea:	2b00      	cmp	r3, #0
 80154ec:	d102      	bne.n	80154f4 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 80154ee:	f06f 0305 	mvn.w	r3, #5
 80154f2:	e064      	b.n	80155be <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 80154f4:	2300      	movs	r3, #0
 80154f6:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 80154f8:	2300      	movs	r3, #0
 80154fa:	643b      	str	r3, [r7, #64]	; 0x40
 80154fc:	e015      	b.n	801552a <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 80154fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015500:	00db      	lsls	r3, r3, #3
 8015502:	68ba      	ldr	r2, [r7, #8]
 8015504:	4413      	add	r3, r2
 8015506:	685b      	ldr	r3, [r3, #4]
 8015508:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801550a:	4413      	add	r3, r2
 801550c:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 801550e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015510:	00db      	lsls	r3, r3, #3
 8015512:	68ba      	ldr	r2, [r7, #8]
 8015514:	4413      	add	r3, r2
 8015516:	685b      	ldr	r3, [r3, #4]
 8015518:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801551a:	429a      	cmp	r2, r3
 801551c:	d202      	bcs.n	8015524 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 801551e:	f06f 0305 	mvn.w	r3, #5
 8015522:	e04c      	b.n	80155be <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8015524:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8015526:	3301      	adds	r3, #1
 8015528:	643b      	str	r3, [r7, #64]	; 0x40
 801552a:	88fb      	ldrh	r3, [r7, #6]
 801552c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801552e:	429a      	cmp	r2, r3
 8015530:	dbe5      	blt.n	80154fe <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8015532:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015534:	2b00      	cmp	r3, #0
 8015536:	d101      	bne.n	801553c <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8015538:	2300      	movs	r3, #0
 801553a:	e040      	b.n	80155be <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 801553c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801553e:	2b00      	cmp	r3, #0
 8015540:	da0a      	bge.n	8015558 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8015542:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015544:	2b00      	cmp	r3, #0
 8015546:	d102      	bne.n	801554e <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8015548:	f06f 0305 	mvn.w	r3, #5
 801554c:	e037      	b.n	80155be <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 801554e:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8015552:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8015554:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015556:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8015558:	68fb      	ldr	r3, [r7, #12]
 801555a:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 801555c:	68bb      	ldr	r3, [r7, #8]
 801555e:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8015560:	88fb      	ldrh	r3, [r7, #6]
 8015562:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8015564:	2300      	movs	r3, #0
 8015566:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8015568:	797b      	ldrb	r3, [r7, #5]
 801556a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 801556e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8015570:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8015572:	2300      	movs	r3, #0
 8015574:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8015576:	f107 0314 	add.w	r3, r7, #20
 801557a:	4619      	mov	r1, r3
 801557c:	4816      	ldr	r0, [pc, #88]	; (80155d8 <netconn_write_vectors_partly+0x168>)
 801557e:	f7ff fb39 	bl	8014bf4 <netconn_apimsg>
 8015582:	4603      	mov	r3, r0
 8015584:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8015588:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 801558c:	2b00      	cmp	r3, #0
 801558e:	d114      	bne.n	80155ba <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8015590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015592:	2b00      	cmp	r3, #0
 8015594:	d002      	beq.n	801559c <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8015596:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8015598:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801559a:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 801559c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80155a0:	2b00      	cmp	r3, #0
 80155a2:	d10a      	bne.n	80155ba <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 80155a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80155a8:	429a      	cmp	r2, r3
 80155aa:	d006      	beq.n	80155ba <netconn_write_vectors_partly+0x14a>
 80155ac:	4b06      	ldr	r3, [pc, #24]	; (80155c8 <netconn_write_vectors_partly+0x158>)
 80155ae:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80155b2:	490a      	ldr	r1, [pc, #40]	; (80155dc <netconn_write_vectors_partly+0x16c>)
 80155b4:	4806      	ldr	r0, [pc, #24]	; (80155d0 <netconn_write_vectors_partly+0x160>)
 80155b6:	f00e fe6b 	bl	8024290 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 80155ba:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 80155be:	4618      	mov	r0, r3
 80155c0:	3748      	adds	r7, #72	; 0x48
 80155c2:	46bd      	mov	sp, r7
 80155c4:	bd80      	pop	{r7, pc}
 80155c6:	bf00      	nop
 80155c8:	08025830 	.word	0x08025830
 80155cc:	08025b08 	.word	0x08025b08
 80155d0:	08025888 	.word	0x08025888
 80155d4:	08025b24 	.word	0x08025b24
 80155d8:	08016f41 	.word	0x08016f41
 80155dc:	08025b48 	.word	0x08025b48

080155e0 <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 80155e0:	b580      	push	{r7, lr}
 80155e2:	b08c      	sub	sp, #48	; 0x30
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
 80155e8:	460b      	mov	r3, r1
 80155ea:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d109      	bne.n	8015606 <netconn_close_shutdown+0x26>
 80155f2:	4b0f      	ldr	r3, [pc, #60]	; (8015630 <netconn_close_shutdown+0x50>)
 80155f4:	f240 4247 	movw	r2, #1095	; 0x447
 80155f8:	490e      	ldr	r1, [pc, #56]	; (8015634 <netconn_close_shutdown+0x54>)
 80155fa:	480f      	ldr	r0, [pc, #60]	; (8015638 <netconn_close_shutdown+0x58>)
 80155fc:	f00e fe48 	bl	8024290 <iprintf>
 8015600:	f06f 030f 	mvn.w	r3, #15
 8015604:	e010      	b.n	8015628 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 801560a:	78fb      	ldrb	r3, [r7, #3]
 801560c:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 801560e:	2329      	movs	r3, #41	; 0x29
 8015610:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8015612:	f107 030c 	add.w	r3, r7, #12
 8015616:	4619      	mov	r1, r3
 8015618:	4808      	ldr	r0, [pc, #32]	; (801563c <netconn_close_shutdown+0x5c>)
 801561a:	f7ff faeb 	bl	8014bf4 <netconn_apimsg>
 801561e:	4603      	mov	r3, r0
 8015620:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8015624:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8015628:	4618      	mov	r0, r3
 801562a:	3730      	adds	r7, #48	; 0x30
 801562c:	46bd      	mov	sp, r7
 801562e:	bd80      	pop	{r7, pc}
 8015630:	08025830 	.word	0x08025830
 8015634:	08025b6c 	.word	0x08025b6c
 8015638:	08025888 	.word	0x08025888
 801563c:	08017059 	.word	0x08017059

08015640 <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8015640:	b580      	push	{r7, lr}
 8015642:	b082      	sub	sp, #8
 8015644:	af00      	add	r7, sp, #0
 8015646:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8015648:	2103      	movs	r1, #3
 801564a:	6878      	ldr	r0, [r7, #4]
 801564c:	f7ff ffc8 	bl	80155e0 <netconn_close_shutdown>
 8015650:	4603      	mov	r3, r0
}
 8015652:	4618      	mov	r0, r3
 8015654:	3708      	adds	r7, #8
 8015656:	46bd      	mov	sp, r7
 8015658:	bd80      	pop	{r7, pc}

0801565a <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 801565a:	b580      	push	{r7, lr}
 801565c:	b084      	sub	sp, #16
 801565e:	af00      	add	r7, sp, #0
 8015660:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8015662:	687b      	ldr	r3, [r7, #4]
 8015664:	2b00      	cmp	r3, #0
 8015666:	d101      	bne.n	801566c <netconn_err+0x12>
    return ERR_OK;
 8015668:	2300      	movs	r3, #0
 801566a:	e00d      	b.n	8015688 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 801566c:	f00d fb7c 	bl	8022d68 <sys_arch_protect>
 8015670:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	7a1b      	ldrb	r3, [r3, #8]
 8015676:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8015678:	687b      	ldr	r3, [r7, #4]
 801567a:	2200      	movs	r2, #0
 801567c:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 801567e:	68f8      	ldr	r0, [r7, #12]
 8015680:	f00d fb80 	bl	8022d84 <sys_arch_unprotect>
  return err;
 8015684:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8015688:	4618      	mov	r0, r3
 801568a:	3710      	adds	r7, #16
 801568c:	46bd      	mov	sp, r7
 801568e:	bd80      	pop	{r7, pc}

08015690 <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8015690:	b580      	push	{r7, lr}
 8015692:	b082      	sub	sp, #8
 8015694:	af00      	add	r7, sp, #0
 8015696:	4603      	mov	r3, r0
 8015698:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 801569a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801569e:	f113 0f0d 	cmn.w	r3, #13
 80156a2:	d009      	beq.n	80156b8 <lwip_netconn_err_to_msg+0x28>
 80156a4:	f113 0f0d 	cmn.w	r3, #13
 80156a8:	dc0c      	bgt.n	80156c4 <lwip_netconn_err_to_msg+0x34>
 80156aa:	f113 0f0f 	cmn.w	r3, #15
 80156ae:	d007      	beq.n	80156c0 <lwip_netconn_err_to_msg+0x30>
 80156b0:	f113 0f0e 	cmn.w	r3, #14
 80156b4:	d002      	beq.n	80156bc <lwip_netconn_err_to_msg+0x2c>
 80156b6:	e005      	b.n	80156c4 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 80156b8:	4b0a      	ldr	r3, [pc, #40]	; (80156e4 <lwip_netconn_err_to_msg+0x54>)
 80156ba:	e00e      	b.n	80156da <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 80156bc:	4b0a      	ldr	r3, [pc, #40]	; (80156e8 <lwip_netconn_err_to_msg+0x58>)
 80156be:	e00c      	b.n	80156da <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 80156c0:	4b0a      	ldr	r3, [pc, #40]	; (80156ec <lwip_netconn_err_to_msg+0x5c>)
 80156c2:	e00a      	b.n	80156da <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 80156c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80156c8:	2b00      	cmp	r3, #0
 80156ca:	d005      	beq.n	80156d8 <lwip_netconn_err_to_msg+0x48>
 80156cc:	4b08      	ldr	r3, [pc, #32]	; (80156f0 <lwip_netconn_err_to_msg+0x60>)
 80156ce:	227d      	movs	r2, #125	; 0x7d
 80156d0:	4908      	ldr	r1, [pc, #32]	; (80156f4 <lwip_netconn_err_to_msg+0x64>)
 80156d2:	4809      	ldr	r0, [pc, #36]	; (80156f8 <lwip_netconn_err_to_msg+0x68>)
 80156d4:	f00e fddc 	bl	8024290 <iprintf>
      return NULL;
 80156d8:	2300      	movs	r3, #0
  }
}
 80156da:	4618      	mov	r0, r3
 80156dc:	3708      	adds	r7, #8
 80156de:	46bd      	mov	sp, r7
 80156e0:	bd80      	pop	{r7, pc}
 80156e2:	bf00      	nop
 80156e4:	08028d74 	.word	0x08028d74
 80156e8:	08028d75 	.word	0x08028d75
 80156ec:	08028d76 	.word	0x08028d76
 80156f0:	08025b88 	.word	0x08025b88
 80156f4:	08025bbc 	.word	0x08025bbc
 80156f8:	08025bcc 	.word	0x08025bcc

080156fc <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 80156fc:	b580      	push	{r7, lr}
 80156fe:	b082      	sub	sp, #8
 8015700:	af00      	add	r7, sp, #0
 8015702:	6078      	str	r0, [r7, #4]
 8015704:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8015706:	683b      	ldr	r3, [r7, #0]
 8015708:	2b00      	cmp	r3, #0
 801570a:	d105      	bne.n	8015718 <lwip_netconn_is_err_msg+0x1c>
 801570c:	4b12      	ldr	r3, [pc, #72]	; (8015758 <lwip_netconn_is_err_msg+0x5c>)
 801570e:	2285      	movs	r2, #133	; 0x85
 8015710:	4912      	ldr	r1, [pc, #72]	; (801575c <lwip_netconn_is_err_msg+0x60>)
 8015712:	4813      	ldr	r0, [pc, #76]	; (8015760 <lwip_netconn_is_err_msg+0x64>)
 8015714:	f00e fdbc 	bl	8024290 <iprintf>

  if (msg == &netconn_aborted) {
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	4a12      	ldr	r2, [pc, #72]	; (8015764 <lwip_netconn_is_err_msg+0x68>)
 801571c:	4293      	cmp	r3, r2
 801571e:	d104      	bne.n	801572a <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8015720:	683b      	ldr	r3, [r7, #0]
 8015722:	22f3      	movs	r2, #243	; 0xf3
 8015724:	701a      	strb	r2, [r3, #0]
    return 1;
 8015726:	2301      	movs	r3, #1
 8015728:	e012      	b.n	8015750 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	4a0e      	ldr	r2, [pc, #56]	; (8015768 <lwip_netconn_is_err_msg+0x6c>)
 801572e:	4293      	cmp	r3, r2
 8015730:	d104      	bne.n	801573c <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8015732:	683b      	ldr	r3, [r7, #0]
 8015734:	22f2      	movs	r2, #242	; 0xf2
 8015736:	701a      	strb	r2, [r3, #0]
    return 1;
 8015738:	2301      	movs	r3, #1
 801573a:	e009      	b.n	8015750 <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 801573c:	687b      	ldr	r3, [r7, #4]
 801573e:	4a0b      	ldr	r2, [pc, #44]	; (801576c <lwip_netconn_is_err_msg+0x70>)
 8015740:	4293      	cmp	r3, r2
 8015742:	d104      	bne.n	801574e <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8015744:	683b      	ldr	r3, [r7, #0]
 8015746:	22f1      	movs	r2, #241	; 0xf1
 8015748:	701a      	strb	r2, [r3, #0]
    return 1;
 801574a:	2301      	movs	r3, #1
 801574c:	e000      	b.n	8015750 <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 801574e:	2300      	movs	r3, #0
}
 8015750:	4618      	mov	r0, r3
 8015752:	3708      	adds	r7, #8
 8015754:	46bd      	mov	sp, r7
 8015756:	bd80      	pop	{r7, pc}
 8015758:	08025b88 	.word	0x08025b88
 801575c:	08025bf4 	.word	0x08025bf4
 8015760:	08025bcc 	.word	0x08025bcc
 8015764:	08028d74 	.word	0x08028d74
 8015768:	08028d75 	.word	0x08028d75
 801576c:	08028d76 	.word	0x08028d76

08015770 <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8015770:	b580      	push	{r7, lr}
 8015772:	b088      	sub	sp, #32
 8015774:	af00      	add	r7, sp, #0
 8015776:	60f8      	str	r0, [r7, #12]
 8015778:	60b9      	str	r1, [r7, #8]
 801577a:	607a      	str	r2, [r7, #4]
 801577c:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 801577e:	68bb      	ldr	r3, [r7, #8]
 8015780:	2b00      	cmp	r3, #0
 8015782:	d105      	bne.n	8015790 <recv_udp+0x20>
 8015784:	4b34      	ldr	r3, [pc, #208]	; (8015858 <recv_udp+0xe8>)
 8015786:	22e5      	movs	r2, #229	; 0xe5
 8015788:	4934      	ldr	r1, [pc, #208]	; (801585c <recv_udp+0xec>)
 801578a:	4835      	ldr	r0, [pc, #212]	; (8015860 <recv_udp+0xf0>)
 801578c:	f00e fd80 	bl	8024290 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8015790:	68fb      	ldr	r3, [r7, #12]
 8015792:	2b00      	cmp	r3, #0
 8015794:	d105      	bne.n	80157a2 <recv_udp+0x32>
 8015796:	4b30      	ldr	r3, [pc, #192]	; (8015858 <recv_udp+0xe8>)
 8015798:	22e6      	movs	r2, #230	; 0xe6
 801579a:	4932      	ldr	r1, [pc, #200]	; (8015864 <recv_udp+0xf4>)
 801579c:	4830      	ldr	r0, [pc, #192]	; (8015860 <recv_udp+0xf0>)
 801579e:	f00e fd77 	bl	8024290 <iprintf>
  conn = (struct netconn *)arg;
 80157a2:	68fb      	ldr	r3, [r7, #12]
 80157a4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 80157a6:	69fb      	ldr	r3, [r7, #28]
 80157a8:	2b00      	cmp	r3, #0
 80157aa:	d103      	bne.n	80157b4 <recv_udp+0x44>
    pbuf_free(p);
 80157ac:	6878      	ldr	r0, [r7, #4]
 80157ae:	f003 fb37 	bl	8018e20 <pbuf_free>
    return;
 80157b2:	e04d      	b.n	8015850 <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 80157b4:	69fb      	ldr	r3, [r7, #28]
 80157b6:	685b      	ldr	r3, [r3, #4]
 80157b8:	68ba      	ldr	r2, [r7, #8]
 80157ba:	429a      	cmp	r2, r3
 80157bc:	d005      	beq.n	80157ca <recv_udp+0x5a>
 80157be:	4b26      	ldr	r3, [pc, #152]	; (8015858 <recv_udp+0xe8>)
 80157c0:	22ee      	movs	r2, #238	; 0xee
 80157c2:	4929      	ldr	r1, [pc, #164]	; (8015868 <recv_udp+0xf8>)
 80157c4:	4826      	ldr	r0, [pc, #152]	; (8015860 <recv_udp+0xf0>)
 80157c6:	f00e fd63 	bl	8024290 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80157ca:	69fb      	ldr	r3, [r7, #28]
 80157cc:	3310      	adds	r3, #16
 80157ce:	4618      	mov	r0, r3
 80157d0:	f00d f9af 	bl	8022b32 <sys_mbox_valid>
 80157d4:	4603      	mov	r3, r0
 80157d6:	2b00      	cmp	r3, #0
 80157d8:	d103      	bne.n	80157e2 <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 80157da:	6878      	ldr	r0, [r7, #4]
 80157dc:	f003 fb20 	bl	8018e20 <pbuf_free>
    return;
 80157e0:	e036      	b.n	8015850 <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 80157e2:	2006      	movs	r0, #6
 80157e4:	f002 fc02 	bl	8017fec <memp_malloc>
 80157e8:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 80157ea:	69bb      	ldr	r3, [r7, #24]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d103      	bne.n	80157f8 <recv_udp+0x88>
    pbuf_free(p);
 80157f0:	6878      	ldr	r0, [r7, #4]
 80157f2:	f003 fb15 	bl	8018e20 <pbuf_free>
    return;
 80157f6:	e02b      	b.n	8015850 <recv_udp+0xe0>
  } else {
    buf->p = p;
 80157f8:	69bb      	ldr	r3, [r7, #24]
 80157fa:	687a      	ldr	r2, [r7, #4]
 80157fc:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 80157fe:	69bb      	ldr	r3, [r7, #24]
 8015800:	687a      	ldr	r2, [r7, #4]
 8015802:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 8015804:	683b      	ldr	r3, [r7, #0]
 8015806:	2b00      	cmp	r3, #0
 8015808:	d002      	beq.n	8015810 <recv_udp+0xa0>
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	681b      	ldr	r3, [r3, #0]
 801580e:	e000      	b.n	8015812 <recv_udp+0xa2>
 8015810:	2300      	movs	r3, #0
 8015812:	69ba      	ldr	r2, [r7, #24]
 8015814:	6093      	str	r3, [r2, #8]
    buf->port = port;
 8015816:	69bb      	ldr	r3, [r7, #24]
 8015818:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 801581a:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 801581c:	687b      	ldr	r3, [r7, #4]
 801581e:	891b      	ldrh	r3, [r3, #8]
 8015820:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 8015822:	69fb      	ldr	r3, [r7, #28]
 8015824:	3310      	adds	r3, #16
 8015826:	69b9      	ldr	r1, [r7, #24]
 8015828:	4618      	mov	r0, r3
 801582a:	f00d f90d 	bl	8022a48 <sys_mbox_trypost>
 801582e:	4603      	mov	r3, r0
 8015830:	2b00      	cmp	r3, #0
 8015832:	d003      	beq.n	801583c <recv_udp+0xcc>
    netbuf_delete(buf);
 8015834:	69b8      	ldr	r0, [r7, #24]
 8015836:	f001 fcaf 	bl	8017198 <netbuf_delete>
    return;
 801583a:	e009      	b.n	8015850 <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801583c:	69fb      	ldr	r3, [r7, #28]
 801583e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015840:	2b00      	cmp	r3, #0
 8015842:	d005      	beq.n	8015850 <recv_udp+0xe0>
 8015844:	69fb      	ldr	r3, [r7, #28]
 8015846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015848:	8afa      	ldrh	r2, [r7, #22]
 801584a:	2100      	movs	r1, #0
 801584c:	69f8      	ldr	r0, [r7, #28]
 801584e:	4798      	blx	r3
  }
}
 8015850:	3720      	adds	r7, #32
 8015852:	46bd      	mov	sp, r7
 8015854:	bd80      	pop	{r7, pc}
 8015856:	bf00      	nop
 8015858:	08025b88 	.word	0x08025b88
 801585c:	08025c00 	.word	0x08025c00
 8015860:	08025bcc 	.word	0x08025bcc
 8015864:	08025c24 	.word	0x08025c24
 8015868:	08025c44 	.word	0x08025c44

0801586c <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801586c:	b580      	push	{r7, lr}
 801586e:	b088      	sub	sp, #32
 8015870:	af00      	add	r7, sp, #0
 8015872:	60f8      	str	r0, [r7, #12]
 8015874:	60b9      	str	r1, [r7, #8]
 8015876:	607a      	str	r2, [r7, #4]
 8015878:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 801587a:	68bb      	ldr	r3, [r7, #8]
 801587c:	2b00      	cmp	r3, #0
 801587e:	d106      	bne.n	801588e <recv_tcp+0x22>
 8015880:	4b36      	ldr	r3, [pc, #216]	; (801595c <recv_tcp+0xf0>)
 8015882:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8015886:	4936      	ldr	r1, [pc, #216]	; (8015960 <recv_tcp+0xf4>)
 8015888:	4836      	ldr	r0, [pc, #216]	; (8015964 <recv_tcp+0xf8>)
 801588a:	f00e fd01 	bl	8024290 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 801588e:	68fb      	ldr	r3, [r7, #12]
 8015890:	2b00      	cmp	r3, #0
 8015892:	d106      	bne.n	80158a2 <recv_tcp+0x36>
 8015894:	4b31      	ldr	r3, [pc, #196]	; (801595c <recv_tcp+0xf0>)
 8015896:	f240 122d 	movw	r2, #301	; 0x12d
 801589a:	4933      	ldr	r1, [pc, #204]	; (8015968 <recv_tcp+0xfc>)
 801589c:	4831      	ldr	r0, [pc, #196]	; (8015964 <recv_tcp+0xf8>)
 801589e:	f00e fcf7 	bl	8024290 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 80158a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80158a6:	2b00      	cmp	r3, #0
 80158a8:	d006      	beq.n	80158b8 <recv_tcp+0x4c>
 80158aa:	4b2c      	ldr	r3, [pc, #176]	; (801595c <recv_tcp+0xf0>)
 80158ac:	f44f 7297 	mov.w	r2, #302	; 0x12e
 80158b0:	492e      	ldr	r1, [pc, #184]	; (801596c <recv_tcp+0x100>)
 80158b2:	482c      	ldr	r0, [pc, #176]	; (8015964 <recv_tcp+0xf8>)
 80158b4:	f00e fcec 	bl	8024290 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 80158bc:	697b      	ldr	r3, [r7, #20]
 80158be:	2b00      	cmp	r3, #0
 80158c0:	d102      	bne.n	80158c8 <recv_tcp+0x5c>
    return ERR_VAL;
 80158c2:	f06f 0305 	mvn.w	r3, #5
 80158c6:	e045      	b.n	8015954 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 80158c8:	697b      	ldr	r3, [r7, #20]
 80158ca:	685b      	ldr	r3, [r3, #4]
 80158cc:	68ba      	ldr	r2, [r7, #8]
 80158ce:	429a      	cmp	r2, r3
 80158d0:	d006      	beq.n	80158e0 <recv_tcp+0x74>
 80158d2:	4b22      	ldr	r3, [pc, #136]	; (801595c <recv_tcp+0xf0>)
 80158d4:	f240 1235 	movw	r2, #309	; 0x135
 80158d8:	4925      	ldr	r1, [pc, #148]	; (8015970 <recv_tcp+0x104>)
 80158da:	4822      	ldr	r0, [pc, #136]	; (8015964 <recv_tcp+0xf8>)
 80158dc:	f00e fcd8 	bl	8024290 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 80158e0:	697b      	ldr	r3, [r7, #20]
 80158e2:	3310      	adds	r3, #16
 80158e4:	4618      	mov	r0, r3
 80158e6:	f00d f924 	bl	8022b32 <sys_mbox_valid>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d10d      	bne.n	801590c <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 80158f0:	687b      	ldr	r3, [r7, #4]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d008      	beq.n	8015908 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	891b      	ldrh	r3, [r3, #8]
 80158fa:	4619      	mov	r1, r3
 80158fc:	68b8      	ldr	r0, [r7, #8]
 80158fe:	f004 fa57 	bl	8019db0 <tcp_recved>
      pbuf_free(p);
 8015902:	6878      	ldr	r0, [r7, #4]
 8015904:	f003 fa8c 	bl	8018e20 <pbuf_free>
    }
    return ERR_OK;
 8015908:	2300      	movs	r3, #0
 801590a:	e023      	b.n	8015954 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	2b00      	cmp	r3, #0
 8015910:	d005      	beq.n	801591e <recv_tcp+0xb2>
    msg = p;
 8015912:	687b      	ldr	r3, [r7, #4]
 8015914:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	891b      	ldrh	r3, [r3, #8]
 801591a:	83fb      	strh	r3, [r7, #30]
 801591c:	e003      	b.n	8015926 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 801591e:	4b15      	ldr	r3, [pc, #84]	; (8015974 <recv_tcp+0x108>)
 8015920:	61bb      	str	r3, [r7, #24]
    len = 0;
 8015922:	2300      	movs	r3, #0
 8015924:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 8015926:	697b      	ldr	r3, [r7, #20]
 8015928:	3310      	adds	r3, #16
 801592a:	69b9      	ldr	r1, [r7, #24]
 801592c:	4618      	mov	r0, r3
 801592e:	f00d f88b 	bl	8022a48 <sys_mbox_trypost>
 8015932:	4603      	mov	r3, r0
 8015934:	2b00      	cmp	r3, #0
 8015936:	d002      	beq.n	801593e <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 8015938:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801593c:	e00a      	b.n	8015954 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 801593e:	697b      	ldr	r3, [r7, #20]
 8015940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015942:	2b00      	cmp	r3, #0
 8015944:	d005      	beq.n	8015952 <recv_tcp+0xe6>
 8015946:	697b      	ldr	r3, [r7, #20]
 8015948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801594a:	8bfa      	ldrh	r2, [r7, #30]
 801594c:	2100      	movs	r1, #0
 801594e:	6978      	ldr	r0, [r7, #20]
 8015950:	4798      	blx	r3
  }

  return ERR_OK;
 8015952:	2300      	movs	r3, #0
}
 8015954:	4618      	mov	r0, r3
 8015956:	3720      	adds	r7, #32
 8015958:	46bd      	mov	sp, r7
 801595a:	bd80      	pop	{r7, pc}
 801595c:	08025b88 	.word	0x08025b88
 8015960:	08025c64 	.word	0x08025c64
 8015964:	08025bcc 	.word	0x08025bcc
 8015968:	08025c88 	.word	0x08025c88
 801596c:	08025ca8 	.word	0x08025ca8
 8015970:	08025cc0 	.word	0x08025cc0
 8015974:	08028d76 	.word	0x08028d76

08015978 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 8015978:	b580      	push	{r7, lr}
 801597a:	b084      	sub	sp, #16
 801597c:	af00      	add	r7, sp, #0
 801597e:	6078      	str	r0, [r7, #4]
 8015980:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015986:	68fb      	ldr	r3, [r7, #12]
 8015988:	2b00      	cmp	r3, #0
 801598a:	d106      	bne.n	801599a <poll_tcp+0x22>
 801598c:	4b29      	ldr	r3, [pc, #164]	; (8015a34 <poll_tcp+0xbc>)
 801598e:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 8015992:	4929      	ldr	r1, [pc, #164]	; (8015a38 <poll_tcp+0xc0>)
 8015994:	4829      	ldr	r0, [pc, #164]	; (8015a3c <poll_tcp+0xc4>)
 8015996:	f00e fc7b 	bl	8024290 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	785b      	ldrb	r3, [r3, #1]
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d104      	bne.n	80159ac <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 80159a2:	2101      	movs	r1, #1
 80159a4:	68f8      	ldr	r0, [r7, #12]
 80159a6:	f001 f8ff 	bl	8016ba8 <lwip_netconn_do_writemore>
 80159aa:	e016      	b.n	80159da <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 80159ac:	68fb      	ldr	r3, [r7, #12]
 80159ae:	785b      	ldrb	r3, [r3, #1]
 80159b0:	2b04      	cmp	r3, #4
 80159b2:	d112      	bne.n	80159da <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	6a1b      	ldr	r3, [r3, #32]
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d00a      	beq.n	80159d2 <poll_tcp+0x5a>
 80159bc:	68fb      	ldr	r3, [r7, #12]
 80159be:	6a1b      	ldr	r3, [r3, #32]
 80159c0:	7a5b      	ldrb	r3, [r3, #9]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d005      	beq.n	80159d2 <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 80159c6:	68fb      	ldr	r3, [r7, #12]
 80159c8:	6a1b      	ldr	r3, [r3, #32]
 80159ca:	7a5a      	ldrb	r2, [r3, #9]
 80159cc:	3a01      	subs	r2, #1
 80159ce:	b2d2      	uxtb	r2, r2
 80159d0:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 80159d2:	2101      	movs	r1, #1
 80159d4:	68f8      	ldr	r0, [r7, #12]
 80159d6:	f000 fbf7 	bl	80161c8 <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 80159da:	68fb      	ldr	r3, [r7, #12]
 80159dc:	7f1b      	ldrb	r3, [r3, #28]
 80159de:	f003 0310 	and.w	r3, r3, #16
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d021      	beq.n	8015a2a <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 80159e6:	68fb      	ldr	r3, [r7, #12]
 80159e8:	685b      	ldr	r3, [r3, #4]
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d01d      	beq.n	8015a2a <poll_tcp+0xb2>
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	685b      	ldr	r3, [r3, #4]
 80159f2:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80159f6:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 80159fa:	d316      	bcc.n	8015a2a <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 80159fc:	68fb      	ldr	r3, [r7, #12]
 80159fe:	685b      	ldr	r3, [r3, #4]
 8015a00:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015a04:	2b04      	cmp	r3, #4
 8015a06:	d810      	bhi.n	8015a2a <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8015a08:	68fb      	ldr	r3, [r7, #12]
 8015a0a:	7f1b      	ldrb	r3, [r3, #28]
 8015a0c:	f023 0310 	bic.w	r3, r3, #16
 8015a10:	b2da      	uxtb	r2, r3
 8015a12:	68fb      	ldr	r3, [r7, #12]
 8015a14:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d005      	beq.n	8015a2a <poll_tcp+0xb2>
 8015a1e:	68fb      	ldr	r3, [r7, #12]
 8015a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015a22:	2200      	movs	r2, #0
 8015a24:	2102      	movs	r1, #2
 8015a26:	68f8      	ldr	r0, [r7, #12]
 8015a28:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8015a2a:	2300      	movs	r3, #0
}
 8015a2c:	4618      	mov	r0, r3
 8015a2e:	3710      	adds	r7, #16
 8015a30:	46bd      	mov	sp, r7
 8015a32:	bd80      	pop	{r7, pc}
 8015a34:	08025b88 	.word	0x08025b88
 8015a38:	08025ce0 	.word	0x08025ce0
 8015a3c:	08025bcc 	.word	0x08025bcc

08015a40 <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 8015a40:	b580      	push	{r7, lr}
 8015a42:	b086      	sub	sp, #24
 8015a44:	af00      	add	r7, sp, #0
 8015a46:	60f8      	str	r0, [r7, #12]
 8015a48:	60b9      	str	r1, [r7, #8]
 8015a4a:	4613      	mov	r3, r2
 8015a4c:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d106      	bne.n	8015a66 <sent_tcp+0x26>
 8015a58:	4b20      	ldr	r3, [pc, #128]	; (8015adc <sent_tcp+0x9c>)
 8015a5a:	f240 1293 	movw	r2, #403	; 0x193
 8015a5e:	4920      	ldr	r1, [pc, #128]	; (8015ae0 <sent_tcp+0xa0>)
 8015a60:	4820      	ldr	r0, [pc, #128]	; (8015ae4 <sent_tcp+0xa4>)
 8015a62:	f00e fc15 	bl	8024290 <iprintf>

  if (conn) {
 8015a66:	697b      	ldr	r3, [r7, #20]
 8015a68:	2b00      	cmp	r3, #0
 8015a6a:	d032      	beq.n	8015ad2 <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 8015a6c:	697b      	ldr	r3, [r7, #20]
 8015a6e:	785b      	ldrb	r3, [r3, #1]
 8015a70:	2b01      	cmp	r3, #1
 8015a72:	d104      	bne.n	8015a7e <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 8015a74:	2101      	movs	r1, #1
 8015a76:	6978      	ldr	r0, [r7, #20]
 8015a78:	f001 f896 	bl	8016ba8 <lwip_netconn_do_writemore>
 8015a7c:	e007      	b.n	8015a8e <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 8015a7e:	697b      	ldr	r3, [r7, #20]
 8015a80:	785b      	ldrb	r3, [r3, #1]
 8015a82:	2b04      	cmp	r3, #4
 8015a84:	d103      	bne.n	8015a8e <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 8015a86:	2101      	movs	r1, #1
 8015a88:	6978      	ldr	r0, [r7, #20]
 8015a8a:	f000 fb9d 	bl	80161c8 <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015a8e:	697b      	ldr	r3, [r7, #20]
 8015a90:	685b      	ldr	r3, [r3, #4]
 8015a92:	2b00      	cmp	r3, #0
 8015a94:	d01d      	beq.n	8015ad2 <sent_tcp+0x92>
 8015a96:	697b      	ldr	r3, [r7, #20]
 8015a98:	685b      	ldr	r3, [r3, #4]
 8015a9a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8015a9e:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8015aa2:	d316      	bcc.n	8015ad2 <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 8015aa4:	697b      	ldr	r3, [r7, #20]
 8015aa6:	685b      	ldr	r3, [r3, #4]
 8015aa8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 8015aac:	2b04      	cmp	r3, #4
 8015aae:	d810      	bhi.n	8015ad2 <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 8015ab0:	697b      	ldr	r3, [r7, #20]
 8015ab2:	7f1b      	ldrb	r3, [r3, #28]
 8015ab4:	f023 0310 	bic.w	r3, r3, #16
 8015ab8:	b2da      	uxtb	r2, r3
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 8015abe:	697b      	ldr	r3, [r7, #20]
 8015ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d005      	beq.n	8015ad2 <sent_tcp+0x92>
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015aca:	88fa      	ldrh	r2, [r7, #6]
 8015acc:	2102      	movs	r1, #2
 8015ace:	6978      	ldr	r0, [r7, #20]
 8015ad0:	4798      	blx	r3
    }
  }

  return ERR_OK;
 8015ad2:	2300      	movs	r3, #0
}
 8015ad4:	4618      	mov	r0, r3
 8015ad6:	3718      	adds	r7, #24
 8015ad8:	46bd      	mov	sp, r7
 8015ada:	bd80      	pop	{r7, pc}
 8015adc:	08025b88 	.word	0x08025b88
 8015ae0:	08025ce0 	.word	0x08025ce0
 8015ae4:	08025bcc 	.word	0x08025bcc

08015ae8 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 8015ae8:	b580      	push	{r7, lr}
 8015aea:	b088      	sub	sp, #32
 8015aec:	af00      	add	r7, sp, #0
 8015aee:	6078      	str	r0, [r7, #4]
 8015af0:	460b      	mov	r3, r1
 8015af2:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 8015af4:	687b      	ldr	r3, [r7, #4]
 8015af6:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 8015af8:	69fb      	ldr	r3, [r7, #28]
 8015afa:	2b00      	cmp	r3, #0
 8015afc:	d106      	bne.n	8015b0c <err_tcp+0x24>
 8015afe:	4b5f      	ldr	r3, [pc, #380]	; (8015c7c <err_tcp+0x194>)
 8015b00:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8015b04:	495e      	ldr	r1, [pc, #376]	; (8015c80 <err_tcp+0x198>)
 8015b06:	485f      	ldr	r0, [pc, #380]	; (8015c84 <err_tcp+0x19c>)
 8015b08:	f00e fbc2 	bl	8024290 <iprintf>

  SYS_ARCH_PROTECT(lev);
 8015b0c:	f00d f92c 	bl	8022d68 <sys_arch_protect>
 8015b10:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 8015b12:	69fb      	ldr	r3, [r7, #28]
 8015b14:	2200      	movs	r2, #0
 8015b16:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 8015b18:	69fb      	ldr	r3, [r7, #28]
 8015b1a:	78fa      	ldrb	r2, [r7, #3]
 8015b1c:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 8015b1e:	69fb      	ldr	r3, [r7, #28]
 8015b20:	7f1b      	ldrb	r3, [r3, #28]
 8015b22:	f043 0301 	orr.w	r3, r3, #1
 8015b26:	b2da      	uxtb	r2, r3
 8015b28:	69fb      	ldr	r3, [r7, #28]
 8015b2a:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 8015b2c:	69fb      	ldr	r3, [r7, #28]
 8015b2e:	785b      	ldrb	r3, [r3, #1]
 8015b30:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 8015b32:	69fb      	ldr	r3, [r7, #28]
 8015b34:	2200      	movs	r2, #0
 8015b36:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 8015b38:	69b8      	ldr	r0, [r7, #24]
 8015b3a:	f00d f923 	bl	8022d84 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 8015b3e:	69fb      	ldr	r3, [r7, #28]
 8015b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b42:	2b00      	cmp	r3, #0
 8015b44:	d005      	beq.n	8015b52 <err_tcp+0x6a>
 8015b46:	69fb      	ldr	r3, [r7, #28]
 8015b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b4a:	2200      	movs	r2, #0
 8015b4c:	2104      	movs	r1, #4
 8015b4e:	69f8      	ldr	r0, [r7, #28]
 8015b50:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015b52:	69fb      	ldr	r3, [r7, #28]
 8015b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d005      	beq.n	8015b66 <err_tcp+0x7e>
 8015b5a:	69fb      	ldr	r3, [r7, #28]
 8015b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b5e:	2200      	movs	r2, #0
 8015b60:	2100      	movs	r1, #0
 8015b62:	69f8      	ldr	r0, [r7, #28]
 8015b64:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 8015b66:	69fb      	ldr	r3, [r7, #28]
 8015b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b6a:	2b00      	cmp	r3, #0
 8015b6c:	d005      	beq.n	8015b7a <err_tcp+0x92>
 8015b6e:	69fb      	ldr	r3, [r7, #28]
 8015b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015b72:	2200      	movs	r2, #0
 8015b74:	2102      	movs	r1, #2
 8015b76:	69f8      	ldr	r0, [r7, #28]
 8015b78:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 8015b7a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8015b7e:	4618      	mov	r0, r3
 8015b80:	f7ff fd86 	bl	8015690 <lwip_netconn_err_to_msg>
 8015b84:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 8015b86:	69fb      	ldr	r3, [r7, #28]
 8015b88:	3310      	adds	r3, #16
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	f00c ffd1 	bl	8022b32 <sys_mbox_valid>
 8015b90:	4603      	mov	r3, r0
 8015b92:	2b00      	cmp	r3, #0
 8015b94:	d005      	beq.n	8015ba2 <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 8015b96:	69fb      	ldr	r3, [r7, #28]
 8015b98:	3310      	adds	r3, #16
 8015b9a:	6939      	ldr	r1, [r7, #16]
 8015b9c:	4618      	mov	r0, r3
 8015b9e:	f00c ff53 	bl	8022a48 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015ba2:	69fb      	ldr	r3, [r7, #28]
 8015ba4:	3314      	adds	r3, #20
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f00c ffc3 	bl	8022b32 <sys_mbox_valid>
 8015bac:	4603      	mov	r3, r0
 8015bae:	2b00      	cmp	r3, #0
 8015bb0:	d005      	beq.n	8015bbe <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 8015bb2:	69fb      	ldr	r3, [r7, #28]
 8015bb4:	3314      	adds	r3, #20
 8015bb6:	6939      	ldr	r1, [r7, #16]
 8015bb8:	4618      	mov	r0, r3
 8015bba:	f00c ff45 	bl	8022a48 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 8015bbe:	7dfb      	ldrb	r3, [r7, #23]
 8015bc0:	2b01      	cmp	r3, #1
 8015bc2:	d005      	beq.n	8015bd0 <err_tcp+0xe8>
 8015bc4:	7dfb      	ldrb	r3, [r7, #23]
 8015bc6:	2b04      	cmp	r3, #4
 8015bc8:	d002      	beq.n	8015bd0 <err_tcp+0xe8>
 8015bca:	7dfb      	ldrb	r3, [r7, #23]
 8015bcc:	2b03      	cmp	r3, #3
 8015bce:	d143      	bne.n	8015c58 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 8015bd0:	69fb      	ldr	r3, [r7, #28]
 8015bd2:	7f1b      	ldrb	r3, [r3, #28]
 8015bd4:	f003 0304 	and.w	r3, r3, #4
 8015bd8:	2b00      	cmp	r3, #0
 8015bda:	bf14      	ite	ne
 8015bdc:	2301      	movne	r3, #1
 8015bde:	2300      	moveq	r3, #0
 8015be0:	b2db      	uxtb	r3, r3
 8015be2:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 8015be4:	69fb      	ldr	r3, [r7, #28]
 8015be6:	7f1b      	ldrb	r3, [r3, #28]
 8015be8:	f023 0304 	bic.w	r3, r3, #4
 8015bec:	b2da      	uxtb	r2, r3
 8015bee:	69fb      	ldr	r3, [r7, #28]
 8015bf0:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 8015bf2:	68fb      	ldr	r3, [r7, #12]
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d13b      	bne.n	8015c70 <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8015bf8:	69fb      	ldr	r3, [r7, #28]
 8015bfa:	6a1b      	ldr	r3, [r3, #32]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d106      	bne.n	8015c0e <err_tcp+0x126>
 8015c00:	4b1e      	ldr	r3, [pc, #120]	; (8015c7c <err_tcp+0x194>)
 8015c02:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015c06:	4920      	ldr	r1, [pc, #128]	; (8015c88 <err_tcp+0x1a0>)
 8015c08:	481e      	ldr	r0, [pc, #120]	; (8015c84 <err_tcp+0x19c>)
 8015c0a:	f00e fb41 	bl	8024290 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 8015c0e:	7dfb      	ldrb	r3, [r7, #23]
 8015c10:	2b04      	cmp	r3, #4
 8015c12:	d104      	bne.n	8015c1e <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 8015c14:	69fb      	ldr	r3, [r7, #28]
 8015c16:	6a1b      	ldr	r3, [r3, #32]
 8015c18:	2200      	movs	r2, #0
 8015c1a:	711a      	strb	r2, [r3, #4]
 8015c1c:	e003      	b.n	8015c26 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 8015c1e:	69fb      	ldr	r3, [r7, #28]
 8015c20:	6a1b      	ldr	r3, [r3, #32]
 8015c22:	78fa      	ldrb	r2, [r7, #3]
 8015c24:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8015c26:	69fb      	ldr	r3, [r7, #28]
 8015c28:	6a1b      	ldr	r3, [r3, #32]
 8015c2a:	681b      	ldr	r3, [r3, #0]
 8015c2c:	330c      	adds	r3, #12
 8015c2e:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 8015c30:	68b8      	ldr	r0, [r7, #8]
 8015c32:	f00d f80f 	bl	8022c54 <sys_sem_valid>
 8015c36:	4603      	mov	r3, r0
 8015c38:	2b00      	cmp	r3, #0
 8015c3a:	d106      	bne.n	8015c4a <err_tcp+0x162>
 8015c3c:	4b0f      	ldr	r3, [pc, #60]	; (8015c7c <err_tcp+0x194>)
 8015c3e:	f240 12ef 	movw	r2, #495	; 0x1ef
 8015c42:	4912      	ldr	r1, [pc, #72]	; (8015c8c <err_tcp+0x1a4>)
 8015c44:	480f      	ldr	r0, [pc, #60]	; (8015c84 <err_tcp+0x19c>)
 8015c46:	f00e fb23 	bl	8024290 <iprintf>
      conn->current_msg = NULL;
 8015c4a:	69fb      	ldr	r3, [r7, #28]
 8015c4c:	2200      	movs	r2, #0
 8015c4e:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 8015c50:	68b8      	ldr	r0, [r7, #8]
 8015c52:	f00c ffe5 	bl	8022c20 <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 8015c56:	e00b      	b.n	8015c70 <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	6a1b      	ldr	r3, [r3, #32]
 8015c5c:	2b00      	cmp	r3, #0
 8015c5e:	d008      	beq.n	8015c72 <err_tcp+0x18a>
 8015c60:	4b06      	ldr	r3, [pc, #24]	; (8015c7c <err_tcp+0x194>)
 8015c62:	f240 12f7 	movw	r2, #503	; 0x1f7
 8015c66:	490a      	ldr	r1, [pc, #40]	; (8015c90 <err_tcp+0x1a8>)
 8015c68:	4806      	ldr	r0, [pc, #24]	; (8015c84 <err_tcp+0x19c>)
 8015c6a:	f00e fb11 	bl	8024290 <iprintf>
  }
}
 8015c6e:	e000      	b.n	8015c72 <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 8015c70:	bf00      	nop
}
 8015c72:	bf00      	nop
 8015c74:	3720      	adds	r7, #32
 8015c76:	46bd      	mov	sp, r7
 8015c78:	bd80      	pop	{r7, pc}
 8015c7a:	bf00      	nop
 8015c7c:	08025b88 	.word	0x08025b88
 8015c80:	08025ce0 	.word	0x08025ce0
 8015c84:	08025bcc 	.word	0x08025bcc
 8015c88:	08025cf0 	.word	0x08025cf0
 8015c8c:	08025d0c 	.word	0x08025d0c
 8015c90:	08025d28 	.word	0x08025d28

08015c94 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 8015c94:	b580      	push	{r7, lr}
 8015c96:	b084      	sub	sp, #16
 8015c98:	af00      	add	r7, sp, #0
 8015c9a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	685b      	ldr	r3, [r3, #4]
 8015ca0:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 8015ca2:	6879      	ldr	r1, [r7, #4]
 8015ca4:	68f8      	ldr	r0, [r7, #12]
 8015ca6:	f005 f861 	bl	801ad6c <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 8015caa:	490a      	ldr	r1, [pc, #40]	; (8015cd4 <setup_tcp+0x40>)
 8015cac:	68f8      	ldr	r0, [r7, #12]
 8015cae:	f005 f86f 	bl	801ad90 <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 8015cb2:	4909      	ldr	r1, [pc, #36]	; (8015cd8 <setup_tcp+0x44>)
 8015cb4:	68f8      	ldr	r0, [r7, #12]
 8015cb6:	f005 f88d 	bl	801add4 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 8015cba:	2202      	movs	r2, #2
 8015cbc:	4907      	ldr	r1, [pc, #28]	; (8015cdc <setup_tcp+0x48>)
 8015cbe:	68f8      	ldr	r0, [r7, #12]
 8015cc0:	f005 f8e4 	bl	801ae8c <tcp_poll>
  tcp_err(pcb, err_tcp);
 8015cc4:	4906      	ldr	r1, [pc, #24]	; (8015ce0 <setup_tcp+0x4c>)
 8015cc6:	68f8      	ldr	r0, [r7, #12]
 8015cc8:	f005 f8a6 	bl	801ae18 <tcp_err>
}
 8015ccc:	bf00      	nop
 8015cce:	3710      	adds	r7, #16
 8015cd0:	46bd      	mov	sp, r7
 8015cd2:	bd80      	pop	{r7, pc}
 8015cd4:	0801586d 	.word	0x0801586d
 8015cd8:	08015a41 	.word	0x08015a41
 8015cdc:	08015979 	.word	0x08015979
 8015ce0:	08015ae9 	.word	0x08015ae9

08015ce4 <accept_function>:
 *
 * @see tcp.h (struct tcp_pcb_listen.accept) for parameters and return value
 */
static err_t
accept_function(void *arg, struct tcp_pcb *newpcb, err_t err)
{
 8015ce4:	b590      	push	{r4, r7, lr}
 8015ce6:	b089      	sub	sp, #36	; 0x24
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	60f8      	str	r0, [r7, #12]
 8015cec:	60b9      	str	r1, [r7, #8]
 8015cee:	4613      	mov	r3, r2
 8015cf0:	71fb      	strb	r3, [r7, #7]
  struct netconn *newconn;
  struct netconn *conn = (struct netconn *)arg;
 8015cf2:	68fb      	ldr	r3, [r7, #12]
 8015cf4:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d102      	bne.n	8015d02 <accept_function+0x1e>
    return ERR_VAL;
 8015cfc:	f06f 0305 	mvn.w	r3, #5
 8015d00:	e0a1      	b.n	8015e46 <accept_function+0x162>
  }
  if (!NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 8015d02:	69fb      	ldr	r3, [r7, #28]
 8015d04:	3314      	adds	r3, #20
 8015d06:	4618      	mov	r0, r3
 8015d08:	f00c ff13 	bl	8022b32 <sys_mbox_valid>
 8015d0c:	4603      	mov	r3, r0
 8015d0e:	2b00      	cmp	r3, #0
 8015d10:	d102      	bne.n	8015d18 <accept_function+0x34>
    LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: acceptmbox already deleted\n"));
    return ERR_VAL;
 8015d12:	f06f 0305 	mvn.w	r3, #5
 8015d16:	e096      	b.n	8015e46 <accept_function+0x162>
  }

  if (newpcb == NULL) {
 8015d18:	68bb      	ldr	r3, [r7, #8]
 8015d1a:	2b00      	cmp	r3, #0
 8015d1c:	d11b      	bne.n	8015d56 <accept_function+0x72>
    /* out-of-pcbs during connect: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015d1e:	69fb      	ldr	r3, [r7, #28]
 8015d20:	f103 0414 	add.w	r4, r3, #20
 8015d24:	f06f 000c 	mvn.w	r0, #12
 8015d28:	f7ff fcb2 	bl	8015690 <lwip_netconn_err_to_msg>
 8015d2c:	4603      	mov	r3, r0
 8015d2e:	4619      	mov	r1, r3
 8015d30:	4620      	mov	r0, r4
 8015d32:	f00c fe89 	bl	8022a48 <sys_mbox_trypost>
 8015d36:	4603      	mov	r3, r0
 8015d38:	2b00      	cmp	r3, #0
 8015d3a:	d109      	bne.n	8015d50 <accept_function+0x6c>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015d3c:	69fb      	ldr	r3, [r7, #28]
 8015d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d40:	2b00      	cmp	r3, #0
 8015d42:	d005      	beq.n	8015d50 <accept_function+0x6c>
 8015d44:	69fb      	ldr	r3, [r7, #28]
 8015d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d48:	2200      	movs	r2, #0
 8015d4a:	2100      	movs	r1, #0
 8015d4c:	69f8      	ldr	r0, [r7, #28]
 8015d4e:	4798      	blx	r3
    }
    return ERR_VAL;
 8015d50:	f06f 0305 	mvn.w	r3, #5
 8015d54:	e077      	b.n	8015e46 <accept_function+0x162>
  }
  LWIP_ASSERT("expect newpcb == NULL or err == ERR_OK", err == ERR_OK);
 8015d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d006      	beq.n	8015d6c <accept_function+0x88>
 8015d5e:	4b3c      	ldr	r3, [pc, #240]	; (8015e50 <accept_function+0x16c>)
 8015d60:	f240 222a 	movw	r2, #554	; 0x22a
 8015d64:	493b      	ldr	r1, [pc, #236]	; (8015e54 <accept_function+0x170>)
 8015d66:	483c      	ldr	r0, [pc, #240]	; (8015e58 <accept_function+0x174>)
 8015d68:	f00e fa92 	bl	8024290 <iprintf>

  LWIP_DEBUGF(API_MSG_DEBUG, ("accept_function: newpcb->state: %s\n", tcp_debug_state_str(newpcb->state)));

  /* We have to set the callback here even though
   * the new socket is unknown. newconn->socket is marked as -1. */
  newconn = netconn_alloc(conn->type, conn->callback);
 8015d6c:	69fb      	ldr	r3, [r7, #28]
 8015d6e:	781a      	ldrb	r2, [r3, #0]
 8015d70:	69fb      	ldr	r3, [r7, #28]
 8015d72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d74:	4619      	mov	r1, r3
 8015d76:	4610      	mov	r0, r2
 8015d78:	f000 f8f0 	bl	8015f5c <netconn_alloc>
 8015d7c:	61b8      	str	r0, [r7, #24]
  if (newconn == NULL) {
 8015d7e:	69bb      	ldr	r3, [r7, #24]
 8015d80:	2b00      	cmp	r3, #0
 8015d82:	d11b      	bne.n	8015dbc <accept_function+0xd8>
    /* outof netconns: pass on this error to the application */
    if (sys_mbox_trypost(&conn->acceptmbox, lwip_netconn_err_to_msg(ERR_ABRT)) == ERR_OK) {
 8015d84:	69fb      	ldr	r3, [r7, #28]
 8015d86:	f103 0414 	add.w	r4, r3, #20
 8015d8a:	f06f 000c 	mvn.w	r0, #12
 8015d8e:	f7ff fc7f 	bl	8015690 <lwip_netconn_err_to_msg>
 8015d92:	4603      	mov	r3, r0
 8015d94:	4619      	mov	r1, r3
 8015d96:	4620      	mov	r0, r4
 8015d98:	f00c fe56 	bl	8022a48 <sys_mbox_trypost>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	2b00      	cmp	r3, #0
 8015da0:	d109      	bne.n	8015db6 <accept_function+0xd2>
      /* Register event with callback */
      API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015da2:	69fb      	ldr	r3, [r7, #28]
 8015da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015da6:	2b00      	cmp	r3, #0
 8015da8:	d005      	beq.n	8015db6 <accept_function+0xd2>
 8015daa:	69fb      	ldr	r3, [r7, #28]
 8015dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015dae:	2200      	movs	r2, #0
 8015db0:	2100      	movs	r1, #0
 8015db2:	69f8      	ldr	r0, [r7, #28]
 8015db4:	4798      	blx	r3
    }
    return ERR_MEM;
 8015db6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015dba:	e044      	b.n	8015e46 <accept_function+0x162>
  }
  newconn->pcb.tcp = newpcb;
 8015dbc:	69bb      	ldr	r3, [r7, #24]
 8015dbe:	68ba      	ldr	r2, [r7, #8]
 8015dc0:	605a      	str	r2, [r3, #4]
  setup_tcp(newconn);
 8015dc2:	69b8      	ldr	r0, [r7, #24]
 8015dc4:	f7ff ff66 	bl	8015c94 <setup_tcp>

  /* handle backlog counter */
  tcp_backlog_delayed(newpcb);

  if (sys_mbox_trypost(&conn->acceptmbox, newconn) != ERR_OK) {
 8015dc8:	69fb      	ldr	r3, [r7, #28]
 8015dca:	3314      	adds	r3, #20
 8015dcc:	69b9      	ldr	r1, [r7, #24]
 8015dce:	4618      	mov	r0, r3
 8015dd0:	f00c fe3a 	bl	8022a48 <sys_mbox_trypost>
 8015dd4:	4603      	mov	r3, r0
 8015dd6:	2b00      	cmp	r3, #0
 8015dd8:	d02a      	beq.n	8015e30 <accept_function+0x14c>
    /* When returning != ERR_OK, the pcb is aborted in tcp_process(),
       so do nothing here! */
    /* remove all references to this netconn from the pcb */
    struct tcp_pcb *pcb = newconn->pcb.tcp;
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	685b      	ldr	r3, [r3, #4]
 8015dde:	617b      	str	r3, [r7, #20]
    tcp_arg(pcb, NULL);
 8015de0:	2100      	movs	r1, #0
 8015de2:	6978      	ldr	r0, [r7, #20]
 8015de4:	f004 ffc2 	bl	801ad6c <tcp_arg>
    tcp_recv(pcb, NULL);
 8015de8:	2100      	movs	r1, #0
 8015dea:	6978      	ldr	r0, [r7, #20]
 8015dec:	f004 ffd0 	bl	801ad90 <tcp_recv>
    tcp_sent(pcb, NULL);
 8015df0:	2100      	movs	r1, #0
 8015df2:	6978      	ldr	r0, [r7, #20]
 8015df4:	f004 ffee 	bl	801add4 <tcp_sent>
    tcp_poll(pcb, NULL, 0);
 8015df8:	2200      	movs	r2, #0
 8015dfa:	2100      	movs	r1, #0
 8015dfc:	6978      	ldr	r0, [r7, #20]
 8015dfe:	f005 f845 	bl	801ae8c <tcp_poll>
    tcp_err(pcb, NULL);
 8015e02:	2100      	movs	r1, #0
 8015e04:	6978      	ldr	r0, [r7, #20]
 8015e06:	f005 f807 	bl	801ae18 <tcp_err>
    /* remove reference from to the pcb from this netconn */
    newconn->pcb.tcp = NULL;
 8015e0a:	69bb      	ldr	r3, [r7, #24]
 8015e0c:	2200      	movs	r2, #0
 8015e0e:	605a      	str	r2, [r3, #4]
    /* no need to drain since we know the recvmbox is empty. */
    sys_mbox_free(&newconn->recvmbox);
 8015e10:	69bb      	ldr	r3, [r7, #24]
 8015e12:	3310      	adds	r3, #16
 8015e14:	4618      	mov	r0, r3
 8015e16:	f00c fe05 	bl	8022a24 <sys_mbox_free>
    sys_mbox_set_invalid(&newconn->recvmbox);
 8015e1a:	69bb      	ldr	r3, [r7, #24]
 8015e1c:	3310      	adds	r3, #16
 8015e1e:	4618      	mov	r0, r3
 8015e20:	f00c fe98 	bl	8022b54 <sys_mbox_set_invalid>
    netconn_free(newconn);
 8015e24:	69b8      	ldr	r0, [r7, #24]
 8015e26:	f000 f907 	bl	8016038 <netconn_free>
    return ERR_MEM;
 8015e2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8015e2e:	e00a      	b.n	8015e46 <accept_function+0x162>
  } else {
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 8015e30:	69fb      	ldr	r3, [r7, #28]
 8015e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e34:	2b00      	cmp	r3, #0
 8015e36:	d005      	beq.n	8015e44 <accept_function+0x160>
 8015e38:	69fb      	ldr	r3, [r7, #28]
 8015e3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015e3c:	2200      	movs	r2, #0
 8015e3e:	2100      	movs	r1, #0
 8015e40:	69f8      	ldr	r0, [r7, #28]
 8015e42:	4798      	blx	r3
  }

  return ERR_OK;
 8015e44:	2300      	movs	r3, #0
}
 8015e46:	4618      	mov	r0, r3
 8015e48:	3724      	adds	r7, #36	; 0x24
 8015e4a:	46bd      	mov	sp, r7
 8015e4c:	bd90      	pop	{r4, r7, pc}
 8015e4e:	bf00      	nop
 8015e50:	08025b88 	.word	0x08025b88
 8015e54:	08025d44 	.word	0x08025d44
 8015e58:	08025bcc 	.word	0x08025bcc

08015e5c <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 8015e5c:	b590      	push	{r4, r7, lr}
 8015e5e:	b085      	sub	sp, #20
 8015e60:	af00      	add	r7, sp, #0
 8015e62:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 8015e64:	2300      	movs	r3, #0
 8015e66:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	681b      	ldr	r3, [r3, #0]
 8015e6c:	685b      	ldr	r3, [r3, #4]
 8015e6e:	2b00      	cmp	r3, #0
 8015e70:	d006      	beq.n	8015e80 <pcb_new+0x24>
 8015e72:	4b2b      	ldr	r3, [pc, #172]	; (8015f20 <pcb_new+0xc4>)
 8015e74:	f240 2265 	movw	r2, #613	; 0x265
 8015e78:	492a      	ldr	r1, [pc, #168]	; (8015f24 <pcb_new+0xc8>)
 8015e7a:	482b      	ldr	r0, [pc, #172]	; (8015f28 <pcb_new+0xcc>)
 8015e7c:	f00e fa08 	bl	8024290 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8015e80:	687b      	ldr	r3, [r7, #4]
 8015e82:	681b      	ldr	r3, [r3, #0]
 8015e84:	781b      	ldrb	r3, [r3, #0]
 8015e86:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015e8a:	2b10      	cmp	r3, #16
 8015e8c:	d022      	beq.n	8015ed4 <pcb_new+0x78>
 8015e8e:	2b20      	cmp	r3, #32
 8015e90:	d133      	bne.n	8015efa <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681c      	ldr	r4, [r3, #0]
 8015e96:	7bfb      	ldrb	r3, [r7, #15]
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f00a fa9e 	bl	80203da <udp_new_ip_type>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 8015ea2:	687b      	ldr	r3, [r7, #4]
 8015ea4:	681b      	ldr	r3, [r3, #0]
 8015ea6:	685b      	ldr	r3, [r3, #4]
 8015ea8:	2b00      	cmp	r3, #0
 8015eaa:	d02a      	beq.n	8015f02 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 8015eac:	687b      	ldr	r3, [r7, #4]
 8015eae:	681b      	ldr	r3, [r3, #0]
 8015eb0:	781b      	ldrb	r3, [r3, #0]
 8015eb2:	2b22      	cmp	r3, #34	; 0x22
 8015eb4:	d104      	bne.n	8015ec0 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 8015eb6:	687b      	ldr	r3, [r7, #4]
 8015eb8:	681b      	ldr	r3, [r3, #0]
 8015eba:	685b      	ldr	r3, [r3, #4]
 8015ebc:	2201      	movs	r2, #1
 8015ebe:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	681b      	ldr	r3, [r3, #0]
 8015ec4:	6858      	ldr	r0, [r3, #4]
 8015ec6:	687b      	ldr	r3, [r7, #4]
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	461a      	mov	r2, r3
 8015ecc:	4917      	ldr	r1, [pc, #92]	; (8015f2c <pcb_new+0xd0>)
 8015ece:	f00a fa0b 	bl	80202e8 <udp_recv>
      }
      break;
 8015ed2:	e016      	b.n	8015f02 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 8015ed4:	687b      	ldr	r3, [r7, #4]
 8015ed6:	681c      	ldr	r4, [r3, #0]
 8015ed8:	7bfb      	ldrb	r3, [r7, #15]
 8015eda:	4618      	mov	r0, r3
 8015edc:	f004 ff38 	bl	801ad50 <tcp_new_ip_type>
 8015ee0:	4603      	mov	r3, r0
 8015ee2:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 8015ee4:	687b      	ldr	r3, [r7, #4]
 8015ee6:	681b      	ldr	r3, [r3, #0]
 8015ee8:	685b      	ldr	r3, [r3, #4]
 8015eea:	2b00      	cmp	r3, #0
 8015eec:	d00b      	beq.n	8015f06 <pcb_new+0xaa>
        setup_tcp(msg->conn);
 8015eee:	687b      	ldr	r3, [r7, #4]
 8015ef0:	681b      	ldr	r3, [r3, #0]
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	f7ff fece 	bl	8015c94 <setup_tcp>
      }
      break;
 8015ef8:	e005      	b.n	8015f06 <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	22fa      	movs	r2, #250	; 0xfa
 8015efe:	711a      	strb	r2, [r3, #4]
      return;
 8015f00:	e00a      	b.n	8015f18 <pcb_new+0xbc>
      break;
 8015f02:	bf00      	nop
 8015f04:	e000      	b.n	8015f08 <pcb_new+0xac>
      break;
 8015f06:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 8015f08:	687b      	ldr	r3, [r7, #4]
 8015f0a:	681b      	ldr	r3, [r3, #0]
 8015f0c:	685b      	ldr	r3, [r3, #4]
 8015f0e:	2b00      	cmp	r3, #0
 8015f10:	d102      	bne.n	8015f18 <pcb_new+0xbc>
    msg->err = ERR_MEM;
 8015f12:	687b      	ldr	r3, [r7, #4]
 8015f14:	22ff      	movs	r2, #255	; 0xff
 8015f16:	711a      	strb	r2, [r3, #4]
  }
}
 8015f18:	3714      	adds	r7, #20
 8015f1a:	46bd      	mov	sp, r7
 8015f1c:	bd90      	pop	{r4, r7, pc}
 8015f1e:	bf00      	nop
 8015f20:	08025b88 	.word	0x08025b88
 8015f24:	08025d6c 	.word	0x08025d6c
 8015f28:	08025bcc 	.word	0x08025bcc
 8015f2c:	08015771 	.word	0x08015771

08015f30 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 8015f30:	b580      	push	{r7, lr}
 8015f32:	b084      	sub	sp, #16
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 8015f3c:	68fb      	ldr	r3, [r7, #12]
 8015f3e:	2200      	movs	r2, #0
 8015f40:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	681b      	ldr	r3, [r3, #0]
 8015f46:	685b      	ldr	r3, [r3, #4]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d102      	bne.n	8015f52 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 8015f4c:	68f8      	ldr	r0, [r7, #12]
 8015f4e:	f7ff ff85 	bl	8015e5c <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 8015f52:	bf00      	nop
 8015f54:	3710      	adds	r7, #16
 8015f56:	46bd      	mov	sp, r7
 8015f58:	bd80      	pop	{r7, pc}
	...

08015f5c <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 8015f5c:	b580      	push	{r7, lr}
 8015f5e:	b086      	sub	sp, #24
 8015f60:	af00      	add	r7, sp, #0
 8015f62:	4603      	mov	r3, r0
 8015f64:	6039      	str	r1, [r7, #0]
 8015f66:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 8015f68:	2300      	movs	r3, #0
 8015f6a:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 8015f6c:	2007      	movs	r0, #7
 8015f6e:	f002 f83d 	bl	8017fec <memp_malloc>
 8015f72:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 8015f74:	68fb      	ldr	r3, [r7, #12]
 8015f76:	2b00      	cmp	r3, #0
 8015f78:	d101      	bne.n	8015f7e <netconn_alloc+0x22>
    return NULL;
 8015f7a:	2300      	movs	r3, #0
 8015f7c:	e052      	b.n	8016024 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 8015f7e:	68fb      	ldr	r3, [r7, #12]
 8015f80:	2200      	movs	r2, #0
 8015f82:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	79fa      	ldrb	r2, [r7, #7]
 8015f88:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 8015f8a:	68fb      	ldr	r3, [r7, #12]
 8015f8c:	2200      	movs	r2, #0
 8015f8e:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 8015f90:	79fb      	ldrb	r3, [r7, #7]
 8015f92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8015f96:	2b10      	cmp	r3, #16
 8015f98:	d004      	beq.n	8015fa4 <netconn_alloc+0x48>
 8015f9a:	2b20      	cmp	r3, #32
 8015f9c:	d105      	bne.n	8015faa <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 8015f9e:	2306      	movs	r3, #6
 8015fa0:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 8015fa2:	e00a      	b.n	8015fba <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 8015fa4:	2306      	movs	r3, #6
 8015fa6:	617b      	str	r3, [r7, #20]
      break;
 8015fa8:	e007      	b.n	8015fba <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 8015faa:	4b20      	ldr	r3, [pc, #128]	; (801602c <netconn_alloc+0xd0>)
 8015fac:	f240 22e5 	movw	r2, #741	; 0x2e5
 8015fb0:	491f      	ldr	r1, [pc, #124]	; (8016030 <netconn_alloc+0xd4>)
 8015fb2:	4820      	ldr	r0, [pc, #128]	; (8016034 <netconn_alloc+0xd8>)
 8015fb4:	f00e f96c 	bl	8024290 <iprintf>
      goto free_and_return;
 8015fb8:	e02f      	b.n	801601a <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 8015fba:	68fb      	ldr	r3, [r7, #12]
 8015fbc:	3310      	adds	r3, #16
 8015fbe:	6979      	ldr	r1, [r7, #20]
 8015fc0:	4618      	mov	r0, r3
 8015fc2:	f00c fd0d 	bl	80229e0 <sys_mbox_new>
 8015fc6:	4603      	mov	r3, r0
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d125      	bne.n	8016018 <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 8015fcc:	68fb      	ldr	r3, [r7, #12]
 8015fce:	330c      	adds	r3, #12
 8015fd0:	2100      	movs	r1, #0
 8015fd2:	4618      	mov	r0, r3
 8015fd4:	f00c fdcb 	bl	8022b6e <sys_sem_new>
 8015fd8:	4603      	mov	r3, r0
 8015fda:	2b00      	cmp	r3, #0
 8015fdc:	d005      	beq.n	8015fea <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 8015fde:	68fb      	ldr	r3, [r7, #12]
 8015fe0:	3310      	adds	r3, #16
 8015fe2:	4618      	mov	r0, r3
 8015fe4:	f00c fd1e 	bl	8022a24 <sys_mbox_free>
    goto free_and_return;
 8015fe8:	e017      	b.n	801601a <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 8015fea:	68fb      	ldr	r3, [r7, #12]
 8015fec:	3314      	adds	r3, #20
 8015fee:	4618      	mov	r0, r3
 8015ff0:	f00c fdb0 	bl	8022b54 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 8015ff4:	68fb      	ldr	r3, [r7, #12]
 8015ff6:	2200      	movs	r2, #0
 8015ff8:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 8015ffa:	68fb      	ldr	r3, [r7, #12]
 8015ffc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8016000:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	683a      	ldr	r2, [r7, #0]
 8016006:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 8016008:	68fb      	ldr	r3, [r7, #12]
 801600a:	2200      	movs	r2, #0
 801600c:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 801600e:	68fb      	ldr	r3, [r7, #12]
 8016010:	7cfa      	ldrb	r2, [r7, #19]
 8016012:	771a      	strb	r2, [r3, #28]
  return conn;
 8016014:	68fb      	ldr	r3, [r7, #12]
 8016016:	e005      	b.n	8016024 <netconn_alloc+0xc8>
    goto free_and_return;
 8016018:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 801601a:	68f9      	ldr	r1, [r7, #12]
 801601c:	2007      	movs	r0, #7
 801601e:	f002 f85b 	bl	80180d8 <memp_free>
  return NULL;
 8016022:	2300      	movs	r3, #0
}
 8016024:	4618      	mov	r0, r3
 8016026:	3718      	adds	r7, #24
 8016028:	46bd      	mov	sp, r7
 801602a:	bd80      	pop	{r7, pc}
 801602c:	08025b88 	.word	0x08025b88
 8016030:	08025d8c 	.word	0x08025d8c
 8016034:	08025bcc 	.word	0x08025bcc

08016038 <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 8016038:	b580      	push	{r7, lr}
 801603a:	b082      	sub	sp, #8
 801603c:	af00      	add	r7, sp, #0
 801603e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 8016040:	687b      	ldr	r3, [r7, #4]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	2b00      	cmp	r3, #0
 8016046:	d006      	beq.n	8016056 <netconn_free+0x1e>
 8016048:	4b1b      	ldr	r3, [pc, #108]	; (80160b8 <netconn_free+0x80>)
 801604a:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801604e:	491b      	ldr	r1, [pc, #108]	; (80160bc <netconn_free+0x84>)
 8016050:	481b      	ldr	r0, [pc, #108]	; (80160c0 <netconn_free+0x88>)
 8016052:	f00e f91d 	bl	8024290 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	3310      	adds	r3, #16
 801605a:	4618      	mov	r0, r3
 801605c:	f00c fd69 	bl	8022b32 <sys_mbox_valid>
 8016060:	4603      	mov	r3, r0
 8016062:	2b00      	cmp	r3, #0
 8016064:	d006      	beq.n	8016074 <netconn_free+0x3c>
 8016066:	4b14      	ldr	r3, [pc, #80]	; (80160b8 <netconn_free+0x80>)
 8016068:	f240 3223 	movw	r2, #803	; 0x323
 801606c:	4915      	ldr	r1, [pc, #84]	; (80160c4 <netconn_free+0x8c>)
 801606e:	4814      	ldr	r0, [pc, #80]	; (80160c0 <netconn_free+0x88>)
 8016070:	f00e f90e 	bl	8024290 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	3314      	adds	r3, #20
 8016078:	4618      	mov	r0, r3
 801607a:	f00c fd5a 	bl	8022b32 <sys_mbox_valid>
 801607e:	4603      	mov	r3, r0
 8016080:	2b00      	cmp	r3, #0
 8016082:	d006      	beq.n	8016092 <netconn_free+0x5a>
 8016084:	4b0c      	ldr	r3, [pc, #48]	; (80160b8 <netconn_free+0x80>)
 8016086:	f240 3226 	movw	r2, #806	; 0x326
 801608a:	490f      	ldr	r1, [pc, #60]	; (80160c8 <netconn_free+0x90>)
 801608c:	480c      	ldr	r0, [pc, #48]	; (80160c0 <netconn_free+0x88>)
 801608e:	f00e f8ff 	bl	8024290 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	330c      	adds	r3, #12
 8016096:	4618      	mov	r0, r3
 8016098:	f00c fdcf 	bl	8022c3a <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	330c      	adds	r3, #12
 80160a0:	4618      	mov	r0, r3
 80160a2:	f00c fde8 	bl	8022c76 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 80160a6:	6879      	ldr	r1, [r7, #4]
 80160a8:	2007      	movs	r0, #7
 80160aa:	f002 f815 	bl	80180d8 <memp_free>
}
 80160ae:	bf00      	nop
 80160b0:	3708      	adds	r7, #8
 80160b2:	46bd      	mov	sp, r7
 80160b4:	bd80      	pop	{r7, pc}
 80160b6:	bf00      	nop
 80160b8:	08025b88 	.word	0x08025b88
 80160bc:	08025db4 	.word	0x08025db4
 80160c0:	08025bcc 	.word	0x08025bcc
 80160c4:	08025de4 	.word	0x08025de4
 80160c8:	08025e20 	.word	0x08025e20

080160cc <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 80160cc:	b580      	push	{r7, lr}
 80160ce:	b086      	sub	sp, #24
 80160d0:	af00      	add	r7, sp, #0
 80160d2:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 80160d4:	687b      	ldr	r3, [r7, #4]
 80160d6:	3310      	adds	r3, #16
 80160d8:	4618      	mov	r0, r3
 80160da:	f00c fd2a 	bl	8022b32 <sys_mbox_valid>
 80160de:	4603      	mov	r3, r0
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d02f      	beq.n	8016144 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 80160e4:	e018      	b.n	8016118 <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 80160e6:	687b      	ldr	r3, [r7, #4]
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80160ee:	2b10      	cmp	r3, #16
 80160f0:	d10e      	bne.n	8016110 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 80160f2:	693b      	ldr	r3, [r7, #16]
 80160f4:	f107 020f 	add.w	r2, r7, #15
 80160f8:	4611      	mov	r1, r2
 80160fa:	4618      	mov	r0, r3
 80160fc:	f7ff fafe 	bl	80156fc <lwip_netconn_is_err_msg>
 8016100:	4603      	mov	r3, r0
 8016102:	2b00      	cmp	r3, #0
 8016104:	d108      	bne.n	8016118 <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 8016106:	693b      	ldr	r3, [r7, #16]
 8016108:	4618      	mov	r0, r3
 801610a:	f002 fe89 	bl	8018e20 <pbuf_free>
 801610e:	e003      	b.n	8016118 <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 8016110:	693b      	ldr	r3, [r7, #16]
 8016112:	4618      	mov	r0, r3
 8016114:	f001 f840 	bl	8017198 <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 8016118:	687b      	ldr	r3, [r7, #4]
 801611a:	3310      	adds	r3, #16
 801611c:	f107 0210 	add.w	r2, r7, #16
 8016120:	4611      	mov	r1, r2
 8016122:	4618      	mov	r0, r3
 8016124:	f00c fce9 	bl	8022afa <sys_arch_mbox_tryfetch>
 8016128:	4603      	mov	r3, r0
 801612a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801612e:	d1da      	bne.n	80160e6 <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	3310      	adds	r3, #16
 8016134:	4618      	mov	r0, r3
 8016136:	f00c fc75 	bl	8022a24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 801613a:	687b      	ldr	r3, [r7, #4]
 801613c:	3310      	adds	r3, #16
 801613e:	4618      	mov	r0, r3
 8016140:	f00c fd08 	bl	8022b54 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	3314      	adds	r3, #20
 8016148:	4618      	mov	r0, r3
 801614a:	f00c fcf2 	bl	8022b32 <sys_mbox_valid>
 801614e:	4603      	mov	r3, r0
 8016150:	2b00      	cmp	r3, #0
 8016152:	d034      	beq.n	80161be <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016154:	e01d      	b.n	8016192 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 8016156:	693b      	ldr	r3, [r7, #16]
 8016158:	f107 020e 	add.w	r2, r7, #14
 801615c:	4611      	mov	r1, r2
 801615e:	4618      	mov	r0, r3
 8016160:	f7ff facc 	bl	80156fc <lwip_netconn_is_err_msg>
 8016164:	4603      	mov	r3, r0
 8016166:	2b00      	cmp	r3, #0
 8016168:	d113      	bne.n	8016192 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 801616a:	693b      	ldr	r3, [r7, #16]
 801616c:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 801616e:	6978      	ldr	r0, [r7, #20]
 8016170:	f7ff ffac 	bl	80160cc <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 8016174:	697b      	ldr	r3, [r7, #20]
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	2b00      	cmp	r3, #0
 801617a:	d007      	beq.n	801618c <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 801617c:	697b      	ldr	r3, [r7, #20]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	4618      	mov	r0, r3
 8016182:	f003 fc4d 	bl	8019a20 <tcp_abort>
            newconn->pcb.tcp = NULL;
 8016186:	697b      	ldr	r3, [r7, #20]
 8016188:	2200      	movs	r2, #0
 801618a:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 801618c:	6978      	ldr	r0, [r7, #20]
 801618e:	f7ff ff53 	bl	8016038 <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 8016192:	687b      	ldr	r3, [r7, #4]
 8016194:	3314      	adds	r3, #20
 8016196:	f107 0210 	add.w	r2, r7, #16
 801619a:	4611      	mov	r1, r2
 801619c:	4618      	mov	r0, r3
 801619e:	f00c fcac 	bl	8022afa <sys_arch_mbox_tryfetch>
 80161a2:	4603      	mov	r3, r0
 80161a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80161a8:	d1d5      	bne.n	8016156 <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	3314      	adds	r3, #20
 80161ae:	4618      	mov	r0, r3
 80161b0:	f00c fc38 	bl	8022a24 <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	3314      	adds	r3, #20
 80161b8:	4618      	mov	r0, r3
 80161ba:	f00c fccb 	bl	8022b54 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 80161be:	bf00      	nop
 80161c0:	3718      	adds	r7, #24
 80161c2:	46bd      	mov	sp, r7
 80161c4:	bd80      	pop	{r7, pc}
	...

080161c8 <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 80161c8:	b580      	push	{r7, lr}
 80161ca:	b086      	sub	sp, #24
 80161cc:	af00      	add	r7, sp, #0
 80161ce:	6078      	str	r0, [r7, #4]
 80161d0:	460b      	mov	r3, r1
 80161d2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 80161d4:	2300      	movs	r3, #0
 80161d6:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 80161d8:	687b      	ldr	r3, [r7, #4]
 80161da:	2b00      	cmp	r3, #0
 80161dc:	d106      	bne.n	80161ec <lwip_netconn_do_close_internal+0x24>
 80161de:	4b87      	ldr	r3, [pc, #540]	; (80163fc <lwip_netconn_do_close_internal+0x234>)
 80161e0:	f240 32a2 	movw	r2, #930	; 0x3a2
 80161e4:	4986      	ldr	r1, [pc, #536]	; (8016400 <lwip_netconn_do_close_internal+0x238>)
 80161e6:	4887      	ldr	r0, [pc, #540]	; (8016404 <lwip_netconn_do_close_internal+0x23c>)
 80161e8:	f00e f852 	bl	8024290 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	781b      	ldrb	r3, [r3, #0]
 80161f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80161f4:	2b10      	cmp	r3, #16
 80161f6:	d006      	beq.n	8016206 <lwip_netconn_do_close_internal+0x3e>
 80161f8:	4b80      	ldr	r3, [pc, #512]	; (80163fc <lwip_netconn_do_close_internal+0x234>)
 80161fa:	f240 32a3 	movw	r2, #931	; 0x3a3
 80161fe:	4982      	ldr	r1, [pc, #520]	; (8016408 <lwip_netconn_do_close_internal+0x240>)
 8016200:	4880      	ldr	r0, [pc, #512]	; (8016404 <lwip_netconn_do_close_internal+0x23c>)
 8016202:	f00e f845 	bl	8024290 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 8016206:	687b      	ldr	r3, [r7, #4]
 8016208:	785b      	ldrb	r3, [r3, #1]
 801620a:	2b04      	cmp	r3, #4
 801620c:	d006      	beq.n	801621c <lwip_netconn_do_close_internal+0x54>
 801620e:	4b7b      	ldr	r3, [pc, #492]	; (80163fc <lwip_netconn_do_close_internal+0x234>)
 8016210:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 8016214:	497d      	ldr	r1, [pc, #500]	; (801640c <lwip_netconn_do_close_internal+0x244>)
 8016216:	487b      	ldr	r0, [pc, #492]	; (8016404 <lwip_netconn_do_close_internal+0x23c>)
 8016218:	f00e f83a 	bl	8024290 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 801621c:	687b      	ldr	r3, [r7, #4]
 801621e:	685b      	ldr	r3, [r3, #4]
 8016220:	2b00      	cmp	r3, #0
 8016222:	d106      	bne.n	8016232 <lwip_netconn_do_close_internal+0x6a>
 8016224:	4b75      	ldr	r3, [pc, #468]	; (80163fc <lwip_netconn_do_close_internal+0x234>)
 8016226:	f240 32a5 	movw	r2, #933	; 0x3a5
 801622a:	4979      	ldr	r1, [pc, #484]	; (8016410 <lwip_netconn_do_close_internal+0x248>)
 801622c:	4875      	ldr	r0, [pc, #468]	; (8016404 <lwip_netconn_do_close_internal+0x23c>)
 801622e:	f00e f82f 	bl	8024290 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	6a1b      	ldr	r3, [r3, #32]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d106      	bne.n	8016248 <lwip_netconn_do_close_internal+0x80>
 801623a:	4b70      	ldr	r3, [pc, #448]	; (80163fc <lwip_netconn_do_close_internal+0x234>)
 801623c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8016240:	4974      	ldr	r1, [pc, #464]	; (8016414 <lwip_netconn_do_close_internal+0x24c>)
 8016242:	4870      	ldr	r0, [pc, #448]	; (8016404 <lwip_netconn_do_close_internal+0x23c>)
 8016244:	f00e f824 	bl	8024290 <iprintf>

  tpcb = conn->pcb.tcp;
 8016248:	687b      	ldr	r3, [r7, #4]
 801624a:	685b      	ldr	r3, [r3, #4]
 801624c:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	6a1b      	ldr	r3, [r3, #32]
 8016252:	7a1b      	ldrb	r3, [r3, #8]
 8016254:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 8016256:	7bfb      	ldrb	r3, [r7, #15]
 8016258:	f003 0301 	and.w	r3, r3, #1
 801625c:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 801625e:	7bfb      	ldrb	r3, [r7, #15]
 8016260:	f003 0302 	and.w	r3, r3, #2
 8016264:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 8016266:	7bfb      	ldrb	r3, [r7, #15]
 8016268:	2b03      	cmp	r3, #3
 801626a:	d102      	bne.n	8016272 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 801626c:	2301      	movs	r3, #1
 801626e:	75bb      	strb	r3, [r7, #22]
 8016270:	e01f      	b.n	80162b2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 8016272:	7bbb      	ldrb	r3, [r7, #14]
 8016274:	2b00      	cmp	r3, #0
 8016276:	d00e      	beq.n	8016296 <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 8016278:	693b      	ldr	r3, [r7, #16]
 801627a:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 801627c:	2b05      	cmp	r3, #5
 801627e:	d007      	beq.n	8016290 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 8016280:	693b      	ldr	r3, [r7, #16]
 8016282:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 8016284:	2b06      	cmp	r3, #6
 8016286:	d003      	beq.n	8016290 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 8016288:	693b      	ldr	r3, [r7, #16]
 801628a:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 801628c:	2b08      	cmp	r3, #8
 801628e:	d102      	bne.n	8016296 <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 8016290:	2301      	movs	r3, #1
 8016292:	75bb      	strb	r3, [r7, #22]
 8016294:	e00d      	b.n	80162b2 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 8016296:	7b7b      	ldrb	r3, [r7, #13]
 8016298:	2b00      	cmp	r3, #0
 801629a:	d008      	beq.n	80162ae <lwip_netconn_do_close_internal+0xe6>
 801629c:	693b      	ldr	r3, [r7, #16]
 801629e:	8b5b      	ldrh	r3, [r3, #26]
 80162a0:	f003 0310 	and.w	r3, r3, #16
 80162a4:	2b00      	cmp	r3, #0
 80162a6:	d002      	beq.n	80162ae <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 80162a8:	2301      	movs	r3, #1
 80162aa:	75bb      	strb	r3, [r7, #22]
 80162ac:	e001      	b.n	80162b2 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 80162ae:	2300      	movs	r3, #0
 80162b0:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 80162b2:	7dbb      	ldrb	r3, [r7, #22]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d003      	beq.n	80162c0 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 80162b8:	2100      	movs	r1, #0
 80162ba:	6938      	ldr	r0, [r7, #16]
 80162bc:	f004 fd56 	bl	801ad6c <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 80162c0:	693b      	ldr	r3, [r7, #16]
 80162c2:	7d1b      	ldrb	r3, [r3, #20]
 80162c4:	2b01      	cmp	r3, #1
 80162c6:	d104      	bne.n	80162d2 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 80162c8:	2100      	movs	r1, #0
 80162ca:	6938      	ldr	r0, [r7, #16]
 80162cc:	f004 fdc6 	bl	801ae5c <tcp_accept>
 80162d0:	e01d      	b.n	801630e <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 80162d2:	7bbb      	ldrb	r3, [r7, #14]
 80162d4:	2b00      	cmp	r3, #0
 80162d6:	d007      	beq.n	80162e8 <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 80162d8:	2100      	movs	r1, #0
 80162da:	6938      	ldr	r0, [r7, #16]
 80162dc:	f004 fd58 	bl	801ad90 <tcp_recv>
      tcp_accept(tpcb, NULL);
 80162e0:	2100      	movs	r1, #0
 80162e2:	6938      	ldr	r0, [r7, #16]
 80162e4:	f004 fdba 	bl	801ae5c <tcp_accept>
    }
    if (shut_tx) {
 80162e8:	7b7b      	ldrb	r3, [r7, #13]
 80162ea:	2b00      	cmp	r3, #0
 80162ec:	d003      	beq.n	80162f6 <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 80162ee:	2100      	movs	r1, #0
 80162f0:	6938      	ldr	r0, [r7, #16]
 80162f2:	f004 fd6f 	bl	801add4 <tcp_sent>
    }
    if (shut_close) {
 80162f6:	7dbb      	ldrb	r3, [r7, #22]
 80162f8:	2b00      	cmp	r3, #0
 80162fa:	d008      	beq.n	801630e <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 80162fc:	2200      	movs	r2, #0
 80162fe:	2100      	movs	r1, #0
 8016300:	6938      	ldr	r0, [r7, #16]
 8016302:	f004 fdc3 	bl	801ae8c <tcp_poll>
      tcp_err(tpcb, NULL);
 8016306:	2100      	movs	r1, #0
 8016308:	6938      	ldr	r0, [r7, #16]
 801630a:	f004 fd85 	bl	801ae18 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 801630e:	7dbb      	ldrb	r3, [r7, #22]
 8016310:	2b00      	cmp	r3, #0
 8016312:	d005      	beq.n	8016320 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 8016314:	6938      	ldr	r0, [r7, #16]
 8016316:	f003 fa3d 	bl	8019794 <tcp_close>
 801631a:	4603      	mov	r3, r0
 801631c:	75fb      	strb	r3, [r7, #23]
 801631e:	e007      	b.n	8016330 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 8016320:	7bbb      	ldrb	r3, [r7, #14]
 8016322:	7b7a      	ldrb	r2, [r7, #13]
 8016324:	4619      	mov	r1, r3
 8016326:	6938      	ldr	r0, [r7, #16]
 8016328:	f003 fa60 	bl	80197ec <tcp_shutdown>
 801632c:	4603      	mov	r3, r0
 801632e:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 8016330:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016334:	2b00      	cmp	r3, #0
 8016336:	d102      	bne.n	801633e <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 8016338:	2301      	movs	r3, #1
 801633a:	757b      	strb	r3, [r7, #21]
 801633c:	e016      	b.n	801636c <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 801633e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016346:	d10f      	bne.n	8016368 <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 8016348:	687b      	ldr	r3, [r7, #4]
 801634a:	6a1b      	ldr	r3, [r3, #32]
 801634c:	7a5b      	ldrb	r3, [r3, #9]
 801634e:	2b00      	cmp	r3, #0
 8016350:	d10c      	bne.n	801636c <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 8016352:	2301      	movs	r3, #1
 8016354:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 8016356:	7dbb      	ldrb	r3, [r7, #22]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d007      	beq.n	801636c <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 801635c:	6938      	ldr	r0, [r7, #16]
 801635e:	f003 fb5f 	bl	8019a20 <tcp_abort>
          err = ERR_OK;
 8016362:	2300      	movs	r3, #0
 8016364:	75fb      	strb	r3, [r7, #23]
 8016366:	e001      	b.n	801636c <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 8016368:	2301      	movs	r3, #1
 801636a:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 801636c:	7d7b      	ldrb	r3, [r7, #21]
 801636e:	2b00      	cmp	r3, #0
 8016370:	d052      	beq.n	8016418 <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016372:	687b      	ldr	r3, [r7, #4]
 8016374:	6a1b      	ldr	r3, [r3, #32]
 8016376:	681b      	ldr	r3, [r3, #0]
 8016378:	330c      	adds	r3, #12
 801637a:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 801637c:	687b      	ldr	r3, [r7, #4]
 801637e:	6a1b      	ldr	r3, [r3, #32]
 8016380:	7dfa      	ldrb	r2, [r7, #23]
 8016382:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016384:	687b      	ldr	r3, [r7, #4]
 8016386:	2200      	movs	r2, #0
 8016388:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	2200      	movs	r2, #0
 801638e:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 8016390:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016394:	2b00      	cmp	r3, #0
 8016396:	d129      	bne.n	80163ec <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 8016398:	7dbb      	ldrb	r3, [r7, #22]
 801639a:	2b00      	cmp	r3, #0
 801639c:	d00c      	beq.n	80163b8 <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2200      	movs	r2, #0
 80163a2:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163a8:	2b00      	cmp	r3, #0
 80163aa:	d005      	beq.n	80163b8 <lwip_netconn_do_close_internal+0x1f0>
 80163ac:	687b      	ldr	r3, [r7, #4]
 80163ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163b0:	2200      	movs	r2, #0
 80163b2:	2104      	movs	r1, #4
 80163b4:	6878      	ldr	r0, [r7, #4]
 80163b6:	4798      	blx	r3
      }
      if (shut_rx) {
 80163b8:	7bbb      	ldrb	r3, [r7, #14]
 80163ba:	2b00      	cmp	r3, #0
 80163bc:	d009      	beq.n	80163d2 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 80163be:	687b      	ldr	r3, [r7, #4]
 80163c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163c2:	2b00      	cmp	r3, #0
 80163c4:	d005      	beq.n	80163d2 <lwip_netconn_do_close_internal+0x20a>
 80163c6:	687b      	ldr	r3, [r7, #4]
 80163c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163ca:	2200      	movs	r2, #0
 80163cc:	2100      	movs	r1, #0
 80163ce:	6878      	ldr	r0, [r7, #4]
 80163d0:	4798      	blx	r3
      }
      if (shut_tx) {
 80163d2:	7b7b      	ldrb	r3, [r7, #13]
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d009      	beq.n	80163ec <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d005      	beq.n	80163ec <lwip_netconn_do_close_internal+0x224>
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80163e4:	2200      	movs	r2, #0
 80163e6:	2102      	movs	r1, #2
 80163e8:	6878      	ldr	r0, [r7, #4]
 80163ea:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 80163ec:	78fb      	ldrb	r3, [r7, #3]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d002      	beq.n	80163f8 <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 80163f2:	68b8      	ldr	r0, [r7, #8]
 80163f4:	f00c fc14 	bl	8022c20 <sys_sem_signal>
    }
    return ERR_OK;
 80163f8:	2300      	movs	r3, #0
 80163fa:	e03c      	b.n	8016476 <lwip_netconn_do_close_internal+0x2ae>
 80163fc:	08025b88 	.word	0x08025b88
 8016400:	08025e5c 	.word	0x08025e5c
 8016404:	08025bcc 	.word	0x08025bcc
 8016408:	08025e6c 	.word	0x08025e6c
 801640c:	08025e8c 	.word	0x08025e8c
 8016410:	08025eb0 	.word	0x08025eb0
 8016414:	08025cf0 	.word	0x08025cf0
  }
  if (!close_finished) {
 8016418:	7d7b      	ldrb	r3, [r7, #21]
 801641a:	2b00      	cmp	r3, #0
 801641c:	d11e      	bne.n	801645c <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	7d1b      	ldrb	r3, [r3, #20]
 8016422:	2b01      	cmp	r3, #1
 8016424:	d106      	bne.n	8016434 <lwip_netconn_do_close_internal+0x26c>
 8016426:	4b16      	ldr	r3, [pc, #88]	; (8016480 <lwip_netconn_do_close_internal+0x2b8>)
 8016428:	f240 4241 	movw	r2, #1089	; 0x441
 801642c:	4915      	ldr	r1, [pc, #84]	; (8016484 <lwip_netconn_do_close_internal+0x2bc>)
 801642e:	4816      	ldr	r0, [pc, #88]	; (8016488 <lwip_netconn_do_close_internal+0x2c0>)
 8016430:	f00d ff2e 	bl	8024290 <iprintf>
    if (shut_tx) {
 8016434:	7b7b      	ldrb	r3, [r7, #13]
 8016436:	2b00      	cmp	r3, #0
 8016438:	d003      	beq.n	8016442 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 801643a:	4914      	ldr	r1, [pc, #80]	; (801648c <lwip_netconn_do_close_internal+0x2c4>)
 801643c:	6938      	ldr	r0, [r7, #16]
 801643e:	f004 fcc9 	bl	801add4 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 8016442:	2201      	movs	r2, #1
 8016444:	4912      	ldr	r1, [pc, #72]	; (8016490 <lwip_netconn_do_close_internal+0x2c8>)
 8016446:	6938      	ldr	r0, [r7, #16]
 8016448:	f004 fd20 	bl	801ae8c <tcp_poll>
    tcp_err(tpcb, err_tcp);
 801644c:	4911      	ldr	r1, [pc, #68]	; (8016494 <lwip_netconn_do_close_internal+0x2cc>)
 801644e:	6938      	ldr	r0, [r7, #16]
 8016450:	f004 fce2 	bl	801ae18 <tcp_err>
    tcp_arg(tpcb, conn);
 8016454:	6879      	ldr	r1, [r7, #4]
 8016456:	6938      	ldr	r0, [r7, #16]
 8016458:	f004 fc88 	bl	801ad6c <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 801645c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016460:	2b00      	cmp	r3, #0
 8016462:	d106      	bne.n	8016472 <lwip_netconn_do_close_internal+0x2aa>
 8016464:	4b06      	ldr	r3, [pc, #24]	; (8016480 <lwip_netconn_do_close_internal+0x2b8>)
 8016466:	f240 424d 	movw	r2, #1101	; 0x44d
 801646a:	490b      	ldr	r1, [pc, #44]	; (8016498 <lwip_netconn_do_close_internal+0x2d0>)
 801646c:	4806      	ldr	r0, [pc, #24]	; (8016488 <lwip_netconn_do_close_internal+0x2c0>)
 801646e:	f00d ff0f 	bl	8024290 <iprintf>
  return err;
 8016472:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016476:	4618      	mov	r0, r3
 8016478:	3718      	adds	r7, #24
 801647a:	46bd      	mov	sp, r7
 801647c:	bd80      	pop	{r7, pc}
 801647e:	bf00      	nop
 8016480:	08025b88 	.word	0x08025b88
 8016484:	08025ec4 	.word	0x08025ec4
 8016488:	08025bcc 	.word	0x08025bcc
 801648c:	08015a41 	.word	0x08015a41
 8016490:	08015979 	.word	0x08015979
 8016494:	08015ae9 	.word	0x08015ae9
 8016498:	08025ee8 	.word	0x08025ee8

0801649c <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 801649c:	b580      	push	{r7, lr}
 801649e:	b084      	sub	sp, #16
 80164a0:	af00      	add	r7, sp, #0
 80164a2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 80164a8:	68fb      	ldr	r3, [r7, #12]
 80164aa:	681b      	ldr	r3, [r3, #0]
 80164ac:	785b      	ldrb	r3, [r3, #1]
 80164ae:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 80164b0:	7afb      	ldrb	r3, [r7, #11]
 80164b2:	2b00      	cmp	r3, #0
 80164b4:	d00d      	beq.n	80164d2 <lwip_netconn_do_delconn+0x36>
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	681b      	ldr	r3, [r3, #0]
 80164ba:	781b      	ldrb	r3, [r3, #0]
 80164bc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80164c0:	2b10      	cmp	r3, #16
 80164c2:	d006      	beq.n	80164d2 <lwip_netconn_do_delconn+0x36>
 80164c4:	4b60      	ldr	r3, [pc, #384]	; (8016648 <lwip_netconn_do_delconn+0x1ac>)
 80164c6:	f240 425e 	movw	r2, #1118	; 0x45e
 80164ca:	4960      	ldr	r1, [pc, #384]	; (801664c <lwip_netconn_do_delconn+0x1b0>)
 80164cc:	4860      	ldr	r0, [pc, #384]	; (8016650 <lwip_netconn_do_delconn+0x1b4>)
 80164ce:	f00d fedf 	bl	8024290 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 80164d2:	7afb      	ldrb	r3, [r7, #11]
 80164d4:	2b00      	cmp	r3, #0
 80164d6:	d005      	beq.n	80164e4 <lwip_netconn_do_delconn+0x48>
 80164d8:	7afb      	ldrb	r3, [r7, #11]
 80164da:	2b02      	cmp	r3, #2
 80164dc:	d002      	beq.n	80164e4 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 80164de:	7afb      	ldrb	r3, [r7, #11]
 80164e0:	2b03      	cmp	r3, #3
 80164e2:	d109      	bne.n	80164f8 <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 80164e4:	7afb      	ldrb	r3, [r7, #11]
 80164e6:	2b03      	cmp	r3, #3
 80164e8:	d10a      	bne.n	8016500 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 80164ea:	68fb      	ldr	r3, [r7, #12]
 80164ec:	681b      	ldr	r3, [r3, #0]
 80164ee:	7f1b      	ldrb	r3, [r3, #28]
 80164f0:	f003 0304 	and.w	r3, r3, #4
 80164f4:	2b00      	cmp	r3, #0
 80164f6:	d103      	bne.n	8016500 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 80164f8:	68fb      	ldr	r3, [r7, #12]
 80164fa:	22fb      	movs	r2, #251	; 0xfb
 80164fc:	711a      	strb	r2, [r3, #4]
 80164fe:	e097      	b.n	8016630 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 8016500:	7afb      	ldrb	r3, [r7, #11]
 8016502:	2b03      	cmp	r3, #3
 8016504:	d10d      	bne.n	8016522 <lwip_netconn_do_delconn+0x86>
 8016506:	68fb      	ldr	r3, [r7, #12]
 8016508:	681b      	ldr	r3, [r3, #0]
 801650a:	7f1b      	ldrb	r3, [r3, #28]
 801650c:	f003 0304 	and.w	r3, r3, #4
 8016510:	2b00      	cmp	r3, #0
 8016512:	d106      	bne.n	8016522 <lwip_netconn_do_delconn+0x86>
 8016514:	4b4c      	ldr	r3, [pc, #304]	; (8016648 <lwip_netconn_do_delconn+0x1ac>)
 8016516:	f240 427a 	movw	r2, #1146	; 0x47a
 801651a:	494e      	ldr	r1, [pc, #312]	; (8016654 <lwip_netconn_do_delconn+0x1b8>)
 801651c:	484c      	ldr	r0, [pc, #304]	; (8016650 <lwip_netconn_do_delconn+0x1b4>)
 801651e:	f00d feb7 	bl	8024290 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	2200      	movs	r2, #0
 8016526:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 8016528:	68fb      	ldr	r3, [r7, #12]
 801652a:	681b      	ldr	r3, [r3, #0]
 801652c:	4618      	mov	r0, r3
 801652e:	f7ff fdcd 	bl	80160cc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 8016532:	68fb      	ldr	r3, [r7, #12]
 8016534:	681b      	ldr	r3, [r3, #0]
 8016536:	685b      	ldr	r3, [r3, #4]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d05f      	beq.n	80165fc <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801653c:	68fb      	ldr	r3, [r7, #12]
 801653e:	681b      	ldr	r3, [r3, #0]
 8016540:	781b      	ldrb	r3, [r3, #0]
 8016542:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016546:	2b10      	cmp	r3, #16
 8016548:	d00d      	beq.n	8016566 <lwip_netconn_do_delconn+0xca>
 801654a:	2b20      	cmp	r3, #32
 801654c:	d151      	bne.n	80165f2 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 801654e:	68fb      	ldr	r3, [r7, #12]
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	685b      	ldr	r3, [r3, #4]
 8016554:	2200      	movs	r2, #0
 8016556:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 8016558:	68fb      	ldr	r3, [r7, #12]
 801655a:	681b      	ldr	r3, [r3, #0]
 801655c:	685b      	ldr	r3, [r3, #4]
 801655e:	4618      	mov	r0, r3
 8016560:	f009 fee2 	bl	8020328 <udp_remove>
          break;
 8016564:	e046      	b.n	80165f4 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	681b      	ldr	r3, [r3, #0]
 801656a:	6a1b      	ldr	r3, [r3, #32]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d006      	beq.n	801657e <lwip_netconn_do_delconn+0xe2>
 8016570:	4b35      	ldr	r3, [pc, #212]	; (8016648 <lwip_netconn_do_delconn+0x1ac>)
 8016572:	f240 4294 	movw	r2, #1172	; 0x494
 8016576:	4938      	ldr	r1, [pc, #224]	; (8016658 <lwip_netconn_do_delconn+0x1bc>)
 8016578:	4835      	ldr	r0, [pc, #212]	; (8016650 <lwip_netconn_do_delconn+0x1b4>)
 801657a:	f00d fe89 	bl	8024290 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 801657e:	68fb      	ldr	r3, [r7, #12]
 8016580:	681b      	ldr	r3, [r3, #0]
 8016582:	2204      	movs	r2, #4
 8016584:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	2203      	movs	r2, #3
 801658a:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 801658c:	68fb      	ldr	r3, [r7, #12]
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	68fa      	ldr	r2, [r7, #12]
 8016592:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 8016594:	68fb      	ldr	r3, [r7, #12]
 8016596:	681b      	ldr	r3, [r3, #0]
 8016598:	2100      	movs	r1, #0
 801659a:	4618      	mov	r0, r3
 801659c:	f7ff fe14 	bl	80161c8 <lwip_netconn_do_close_internal>
 80165a0:	4603      	mov	r3, r0
 80165a2:	2b00      	cmp	r3, #0
 80165a4:	d04b      	beq.n	801663e <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80165a6:	68fb      	ldr	r3, [r7, #12]
 80165a8:	681b      	ldr	r3, [r3, #0]
 80165aa:	785b      	ldrb	r3, [r3, #1]
 80165ac:	2b04      	cmp	r3, #4
 80165ae:	d006      	beq.n	80165be <lwip_netconn_do_delconn+0x122>
 80165b0:	4b25      	ldr	r3, [pc, #148]	; (8016648 <lwip_netconn_do_delconn+0x1ac>)
 80165b2:	f240 429a 	movw	r2, #1178	; 0x49a
 80165b6:	4929      	ldr	r1, [pc, #164]	; (801665c <lwip_netconn_do_delconn+0x1c0>)
 80165b8:	4825      	ldr	r0, [pc, #148]	; (8016650 <lwip_netconn_do_delconn+0x1b4>)
 80165ba:	f00d fe69 	bl	8024290 <iprintf>
            UNLOCK_TCPIP_CORE();
 80165be:	4828      	ldr	r0, [pc, #160]	; (8016660 <lwip_netconn_do_delconn+0x1c4>)
 80165c0:	f00c fb9f 	bl	8022d02 <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 80165c4:	68fb      	ldr	r3, [r7, #12]
 80165c6:	681b      	ldr	r3, [r3, #0]
 80165c8:	330c      	adds	r3, #12
 80165ca:	2100      	movs	r1, #0
 80165cc:	4618      	mov	r0, r3
 80165ce:	f00c faf6 	bl	8022bbe <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 80165d2:	4823      	ldr	r0, [pc, #140]	; (8016660 <lwip_netconn_do_delconn+0x1c4>)
 80165d4:	f00c fb86 	bl	8022ce4 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 80165d8:	68fb      	ldr	r3, [r7, #12]
 80165da:	681b      	ldr	r3, [r3, #0]
 80165dc:	785b      	ldrb	r3, [r3, #1]
 80165de:	2b00      	cmp	r3, #0
 80165e0:	d02d      	beq.n	801663e <lwip_netconn_do_delconn+0x1a2>
 80165e2:	4b19      	ldr	r3, [pc, #100]	; (8016648 <lwip_netconn_do_delconn+0x1ac>)
 80165e4:	f240 429e 	movw	r2, #1182	; 0x49e
 80165e8:	491c      	ldr	r1, [pc, #112]	; (801665c <lwip_netconn_do_delconn+0x1c0>)
 80165ea:	4819      	ldr	r0, [pc, #100]	; (8016650 <lwip_netconn_do_delconn+0x1b4>)
 80165ec:	f00d fe50 	bl	8024290 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 80165f0:	e025      	b.n	801663e <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 80165f2:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 80165f4:	68fb      	ldr	r3, [r7, #12]
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	2200      	movs	r2, #0
 80165fa:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 80165fc:	68fb      	ldr	r3, [r7, #12]
 80165fe:	681b      	ldr	r3, [r3, #0]
 8016600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016602:	2b00      	cmp	r3, #0
 8016604:	d007      	beq.n	8016616 <lwip_netconn_do_delconn+0x17a>
 8016606:	68fb      	ldr	r3, [r7, #12]
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801660c:	68fa      	ldr	r2, [r7, #12]
 801660e:	6810      	ldr	r0, [r2, #0]
 8016610:	2200      	movs	r2, #0
 8016612:	2100      	movs	r1, #0
 8016614:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	681b      	ldr	r3, [r3, #0]
 801661a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801661c:	2b00      	cmp	r3, #0
 801661e:	d007      	beq.n	8016630 <lwip_netconn_do_delconn+0x194>
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016626:	68fa      	ldr	r2, [r7, #12]
 8016628:	6810      	ldr	r0, [r2, #0]
 801662a:	2200      	movs	r2, #0
 801662c:	2102      	movs	r1, #2
 801662e:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 8016630:	68fb      	ldr	r3, [r7, #12]
 8016632:	681b      	ldr	r3, [r3, #0]
 8016634:	330c      	adds	r3, #12
 8016636:	4618      	mov	r0, r3
 8016638:	f00c fb0c 	bl	8022c54 <sys_sem_valid>
 801663c:	e000      	b.n	8016640 <lwip_netconn_do_delconn+0x1a4>
          return;
 801663e:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 8016640:	3710      	adds	r7, #16
 8016642:	46bd      	mov	sp, r7
 8016644:	bd80      	pop	{r7, pc}
 8016646:	bf00      	nop
 8016648:	08025b88 	.word	0x08025b88
 801664c:	08025ef8 	.word	0x08025ef8
 8016650:	08025bcc 	.word	0x08025bcc
 8016654:	08025f0c 	.word	0x08025f0c
 8016658:	08025f2c 	.word	0x08025f2c
 801665c:	08025f48 	.word	0x08025f48
 8016660:	200066a4 	.word	0x200066a4

08016664 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 8016664:	b580      	push	{r7, lr}
 8016666:	b084      	sub	sp, #16
 8016668:	af00      	add	r7, sp, #0
 801666a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801666c:	687b      	ldr	r3, [r7, #4]
 801666e:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	681b      	ldr	r3, [r3, #0]
 8016674:	685b      	ldr	r3, [r3, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d025      	beq.n	80166c6 <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 801667a:	68bb      	ldr	r3, [r7, #8]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	781b      	ldrb	r3, [r3, #0]
 8016680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016684:	2b10      	cmp	r3, #16
 8016686:	d00e      	beq.n	80166a6 <lwip_netconn_do_bind+0x42>
 8016688:	2b20      	cmp	r3, #32
 801668a:	d119      	bne.n	80166c0 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 801668c:	68bb      	ldr	r3, [r7, #8]
 801668e:	681b      	ldr	r3, [r3, #0]
 8016690:	6858      	ldr	r0, [r3, #4]
 8016692:	68bb      	ldr	r3, [r7, #8]
 8016694:	6899      	ldr	r1, [r3, #8]
 8016696:	68bb      	ldr	r3, [r7, #8]
 8016698:	899b      	ldrh	r3, [r3, #12]
 801669a:	461a      	mov	r2, r3
 801669c:	f009 fd2e 	bl	80200fc <udp_bind>
 80166a0:	4603      	mov	r3, r0
 80166a2:	73fb      	strb	r3, [r7, #15]
        break;
 80166a4:	e011      	b.n	80166ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 80166a6:	68bb      	ldr	r3, [r7, #8]
 80166a8:	681b      	ldr	r3, [r3, #0]
 80166aa:	6858      	ldr	r0, [r3, #4]
 80166ac:	68bb      	ldr	r3, [r7, #8]
 80166ae:	6899      	ldr	r1, [r3, #8]
 80166b0:	68bb      	ldr	r3, [r7, #8]
 80166b2:	899b      	ldrh	r3, [r3, #12]
 80166b4:	461a      	mov	r2, r3
 80166b6:	f003 f9bf 	bl	8019a38 <tcp_bind>
 80166ba:	4603      	mov	r3, r0
 80166bc:	73fb      	strb	r3, [r7, #15]
        break;
 80166be:	e004      	b.n	80166ca <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 80166c0:	23fa      	movs	r3, #250	; 0xfa
 80166c2:	73fb      	strb	r3, [r7, #15]
        break;
 80166c4:	e001      	b.n	80166ca <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 80166c6:	23fa      	movs	r3, #250	; 0xfa
 80166c8:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 80166ca:	68bb      	ldr	r3, [r7, #8]
 80166cc:	7bfa      	ldrb	r2, [r7, #15]
 80166ce:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 80166d0:	bf00      	nop
 80166d2:	3710      	adds	r7, #16
 80166d4:	46bd      	mov	sp, r7
 80166d6:	bd80      	pop	{r7, pc}

080166d8 <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 80166d8:	b580      	push	{r7, lr}
 80166da:	b088      	sub	sp, #32
 80166dc:	af00      	add	r7, sp, #0
 80166de:	60f8      	str	r0, [r7, #12]
 80166e0:	60b9      	str	r1, [r7, #8]
 80166e2:	4613      	mov	r3, r2
 80166e4:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 80166e6:	2300      	movs	r3, #0
 80166e8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 80166ea:	68fb      	ldr	r3, [r7, #12]
 80166ec:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 80166ee:	69bb      	ldr	r3, [r7, #24]
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d102      	bne.n	80166fa <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 80166f4:	f06f 0305 	mvn.w	r3, #5
 80166f8:	e070      	b.n	80167dc <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 80166fa:	69bb      	ldr	r3, [r7, #24]
 80166fc:	785b      	ldrb	r3, [r3, #1]
 80166fe:	2b03      	cmp	r3, #3
 8016700:	d006      	beq.n	8016710 <lwip_netconn_do_connected+0x38>
 8016702:	4b38      	ldr	r3, [pc, #224]	; (80167e4 <lwip_netconn_do_connected+0x10c>)
 8016704:	f240 5223 	movw	r2, #1315	; 0x523
 8016708:	4937      	ldr	r1, [pc, #220]	; (80167e8 <lwip_netconn_do_connected+0x110>)
 801670a:	4838      	ldr	r0, [pc, #224]	; (80167ec <lwip_netconn_do_connected+0x114>)
 801670c:	f00d fdc0 	bl	8024290 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 8016710:	69bb      	ldr	r3, [r7, #24]
 8016712:	6a1b      	ldr	r3, [r3, #32]
 8016714:	2b00      	cmp	r3, #0
 8016716:	d10c      	bne.n	8016732 <lwip_netconn_do_connected+0x5a>
 8016718:	69bb      	ldr	r3, [r7, #24]
 801671a:	7f1b      	ldrb	r3, [r3, #28]
 801671c:	f003 0304 	and.w	r3, r3, #4
 8016720:	2b00      	cmp	r3, #0
 8016722:	d106      	bne.n	8016732 <lwip_netconn_do_connected+0x5a>
 8016724:	4b2f      	ldr	r3, [pc, #188]	; (80167e4 <lwip_netconn_do_connected+0x10c>)
 8016726:	f240 5224 	movw	r2, #1316	; 0x524
 801672a:	4931      	ldr	r1, [pc, #196]	; (80167f0 <lwip_netconn_do_connected+0x118>)
 801672c:	482f      	ldr	r0, [pc, #188]	; (80167ec <lwip_netconn_do_connected+0x114>)
 801672e:	f00d fdaf 	bl	8024290 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 8016732:	69bb      	ldr	r3, [r7, #24]
 8016734:	6a1b      	ldr	r3, [r3, #32]
 8016736:	2b00      	cmp	r3, #0
 8016738:	d008      	beq.n	801674c <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 801673a:	69bb      	ldr	r3, [r7, #24]
 801673c:	6a1b      	ldr	r3, [r3, #32]
 801673e:	79fa      	ldrb	r2, [r7, #7]
 8016740:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016742:	69bb      	ldr	r3, [r7, #24]
 8016744:	6a1b      	ldr	r3, [r3, #32]
 8016746:	681b      	ldr	r3, [r3, #0]
 8016748:	330c      	adds	r3, #12
 801674a:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 801674c:	69bb      	ldr	r3, [r7, #24]
 801674e:	781b      	ldrb	r3, [r3, #0]
 8016750:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016754:	2b10      	cmp	r3, #16
 8016756:	d106      	bne.n	8016766 <lwip_netconn_do_connected+0x8e>
 8016758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801675c:	2b00      	cmp	r3, #0
 801675e:	d102      	bne.n	8016766 <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 8016760:	69b8      	ldr	r0, [r7, #24]
 8016762:	f7ff fa97 	bl	8015c94 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 8016766:	69bb      	ldr	r3, [r7, #24]
 8016768:	7f1b      	ldrb	r3, [r3, #28]
 801676a:	f003 0304 	and.w	r3, r3, #4
 801676e:	2b00      	cmp	r3, #0
 8016770:	bf0c      	ite	eq
 8016772:	2301      	moveq	r3, #1
 8016774:	2300      	movne	r3, #0
 8016776:	b2db      	uxtb	r3, r3
 8016778:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 801677a:	69bb      	ldr	r3, [r7, #24]
 801677c:	7f1b      	ldrb	r3, [r3, #28]
 801677e:	f023 0304 	bic.w	r3, r3, #4
 8016782:	b2da      	uxtb	r2, r3
 8016784:	69bb      	ldr	r3, [r7, #24]
 8016786:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 8016788:	697b      	ldr	r3, [r7, #20]
 801678a:	2b00      	cmp	r3, #0
 801678c:	d002      	beq.n	8016794 <lwip_netconn_do_connected+0xbc>
 801678e:	69fb      	ldr	r3, [r7, #28]
 8016790:	2b00      	cmp	r3, #0
 8016792:	d10c      	bne.n	80167ae <lwip_netconn_do_connected+0xd6>
 8016794:	697b      	ldr	r3, [r7, #20]
 8016796:	2b00      	cmp	r3, #0
 8016798:	d102      	bne.n	80167a0 <lwip_netconn_do_connected+0xc8>
 801679a:	69fb      	ldr	r3, [r7, #28]
 801679c:	2b00      	cmp	r3, #0
 801679e:	d006      	beq.n	80167ae <lwip_netconn_do_connected+0xd6>
 80167a0:	4b10      	ldr	r3, [pc, #64]	; (80167e4 <lwip_netconn_do_connected+0x10c>)
 80167a2:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 80167a6:	4913      	ldr	r1, [pc, #76]	; (80167f4 <lwip_netconn_do_connected+0x11c>)
 80167a8:	4810      	ldr	r0, [pc, #64]	; (80167ec <lwip_netconn_do_connected+0x114>)
 80167aa:	f00d fd71 	bl	8024290 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 80167ae:	69bb      	ldr	r3, [r7, #24]
 80167b0:	2200      	movs	r2, #0
 80167b2:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 80167b4:	69bb      	ldr	r3, [r7, #24]
 80167b6:	2200      	movs	r2, #0
 80167b8:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 80167ba:	69bb      	ldr	r3, [r7, #24]
 80167bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167be:	2b00      	cmp	r3, #0
 80167c0:	d005      	beq.n	80167ce <lwip_netconn_do_connected+0xf6>
 80167c2:	69bb      	ldr	r3, [r7, #24]
 80167c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80167c6:	2200      	movs	r2, #0
 80167c8:	2102      	movs	r1, #2
 80167ca:	69b8      	ldr	r0, [r7, #24]
 80167cc:	4798      	blx	r3

  if (was_blocking) {
 80167ce:	697b      	ldr	r3, [r7, #20]
 80167d0:	2b00      	cmp	r3, #0
 80167d2:	d002      	beq.n	80167da <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 80167d4:	69f8      	ldr	r0, [r7, #28]
 80167d6:	f00c fa23 	bl	8022c20 <sys_sem_signal>
  }
  return ERR_OK;
 80167da:	2300      	movs	r3, #0
}
 80167dc:	4618      	mov	r0, r3
 80167de:	3720      	adds	r7, #32
 80167e0:	46bd      	mov	sp, r7
 80167e2:	bd80      	pop	{r7, pc}
 80167e4:	08025b88 	.word	0x08025b88
 80167e8:	08025f50 	.word	0x08025f50
 80167ec:	08025bcc 	.word	0x08025bcc
 80167f0:	08025f70 	.word	0x08025f70
 80167f4:	08025fb0 	.word	0x08025fb0

080167f8 <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 80167f8:	b580      	push	{r7, lr}
 80167fa:	b086      	sub	sp, #24
 80167fc:	af00      	add	r7, sp, #0
 80167fe:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 8016804:	693b      	ldr	r3, [r7, #16]
 8016806:	681b      	ldr	r3, [r3, #0]
 8016808:	685b      	ldr	r3, [r3, #4]
 801680a:	2b00      	cmp	r3, #0
 801680c:	d102      	bne.n	8016814 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 801680e:	23f1      	movs	r3, #241	; 0xf1
 8016810:	75fb      	strb	r3, [r7, #23]
 8016812:	e09b      	b.n	801694c <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016814:	693b      	ldr	r3, [r7, #16]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801681e:	2b10      	cmp	r3, #16
 8016820:	d00f      	beq.n	8016842 <lwip_netconn_do_connect+0x4a>
 8016822:	2b20      	cmp	r3, #32
 8016824:	f040 8087 	bne.w	8016936 <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 8016828:	693b      	ldr	r3, [r7, #16]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	6858      	ldr	r0, [r3, #4]
 801682e:	693b      	ldr	r3, [r7, #16]
 8016830:	6899      	ldr	r1, [r3, #8]
 8016832:	693b      	ldr	r3, [r7, #16]
 8016834:	899b      	ldrh	r3, [r3, #12]
 8016836:	461a      	mov	r2, r3
 8016838:	f009 fce8 	bl	802020c <udp_connect>
 801683c:	4603      	mov	r3, r0
 801683e:	75fb      	strb	r3, [r7, #23]
        break;
 8016840:	e084      	b.n	801694c <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 8016842:	693b      	ldr	r3, [r7, #16]
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	785b      	ldrb	r3, [r3, #1]
 8016848:	2b03      	cmp	r3, #3
 801684a:	d102      	bne.n	8016852 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 801684c:	23f7      	movs	r3, #247	; 0xf7
 801684e:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 8016850:	e07b      	b.n	801694a <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 8016852:	693b      	ldr	r3, [r7, #16]
 8016854:	681b      	ldr	r3, [r3, #0]
 8016856:	785b      	ldrb	r3, [r3, #1]
 8016858:	2b00      	cmp	r3, #0
 801685a:	d002      	beq.n	8016862 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 801685c:	23f6      	movs	r3, #246	; 0xf6
 801685e:	75fb      	strb	r3, [r7, #23]
        break;
 8016860:	e073      	b.n	801694a <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 8016862:	693b      	ldr	r3, [r7, #16]
 8016864:	681b      	ldr	r3, [r3, #0]
 8016866:	4618      	mov	r0, r3
 8016868:	f7ff fa14 	bl	8015c94 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 801686c:	693b      	ldr	r3, [r7, #16]
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	6858      	ldr	r0, [r3, #4]
 8016872:	693b      	ldr	r3, [r7, #16]
 8016874:	6899      	ldr	r1, [r3, #8]
 8016876:	693b      	ldr	r3, [r7, #16]
 8016878:	899a      	ldrh	r2, [r3, #12]
 801687a:	4b38      	ldr	r3, [pc, #224]	; (801695c <lwip_netconn_do_connect+0x164>)
 801687c:	f003 fb2e 	bl	8019edc <tcp_connect>
 8016880:	4603      	mov	r3, r0
 8016882:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 8016884:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8016888:	2b00      	cmp	r3, #0
 801688a:	d15e      	bne.n	801694a <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 801688c:	693b      	ldr	r3, [r7, #16]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	7f1b      	ldrb	r3, [r3, #28]
 8016892:	f003 0302 	and.w	r3, r3, #2
 8016896:	2b00      	cmp	r3, #0
 8016898:	bf14      	ite	ne
 801689a:	2301      	movne	r3, #1
 801689c:	2300      	moveq	r3, #0
 801689e:	b2db      	uxtb	r3, r3
 80168a0:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 80168a2:	693b      	ldr	r3, [r7, #16]
 80168a4:	681b      	ldr	r3, [r3, #0]
 80168a6:	2203      	movs	r2, #3
 80168a8:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 80168aa:	7bfb      	ldrb	r3, [r7, #15]
 80168ac:	2b00      	cmp	r3, #0
 80168ae:	d009      	beq.n	80168c4 <lwip_netconn_do_connect+0xcc>
 80168b0:	693b      	ldr	r3, [r7, #16]
 80168b2:	681b      	ldr	r3, [r3, #0]
 80168b4:	7f1a      	ldrb	r2, [r3, #28]
 80168b6:	693b      	ldr	r3, [r7, #16]
 80168b8:	681b      	ldr	r3, [r3, #0]
 80168ba:	f042 0204 	orr.w	r2, r2, #4
 80168be:	b2d2      	uxtb	r2, r2
 80168c0:	771a      	strb	r2, [r3, #28]
 80168c2:	e008      	b.n	80168d6 <lwip_netconn_do_connect+0xde>
 80168c4:	693b      	ldr	r3, [r7, #16]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	7f1a      	ldrb	r2, [r3, #28]
 80168ca:	693b      	ldr	r3, [r7, #16]
 80168cc:	681b      	ldr	r3, [r3, #0]
 80168ce:	f022 0204 	bic.w	r2, r2, #4
 80168d2:	b2d2      	uxtb	r2, r2
 80168d4:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 80168d6:	7bfb      	ldrb	r3, [r7, #15]
 80168d8:	2b00      	cmp	r3, #0
 80168da:	d002      	beq.n	80168e2 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 80168dc:	23fb      	movs	r3, #251	; 0xfb
 80168de:	75fb      	strb	r3, [r7, #23]
        break;
 80168e0:	e033      	b.n	801694a <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 80168e2:	693b      	ldr	r3, [r7, #16]
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	693a      	ldr	r2, [r7, #16]
 80168e8:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 80168ea:	693b      	ldr	r3, [r7, #16]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	785b      	ldrb	r3, [r3, #1]
 80168f0:	2b03      	cmp	r3, #3
 80168f2:	d006      	beq.n	8016902 <lwip_netconn_do_connect+0x10a>
 80168f4:	4b1a      	ldr	r3, [pc, #104]	; (8016960 <lwip_netconn_do_connect+0x168>)
 80168f6:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 80168fa:	491a      	ldr	r1, [pc, #104]	; (8016964 <lwip_netconn_do_connect+0x16c>)
 80168fc:	481a      	ldr	r0, [pc, #104]	; (8016968 <lwip_netconn_do_connect+0x170>)
 80168fe:	f00d fcc7 	bl	8024290 <iprintf>
              UNLOCK_TCPIP_CORE();
 8016902:	481a      	ldr	r0, [pc, #104]	; (801696c <lwip_netconn_do_connect+0x174>)
 8016904:	f00c f9fd 	bl	8022d02 <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016908:	693b      	ldr	r3, [r7, #16]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	330c      	adds	r3, #12
 801690e:	2100      	movs	r1, #0
 8016910:	4618      	mov	r0, r3
 8016912:	f00c f954 	bl	8022bbe <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 8016916:	4815      	ldr	r0, [pc, #84]	; (801696c <lwip_netconn_do_connect+0x174>)
 8016918:	f00c f9e4 	bl	8022ce4 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 801691c:	693b      	ldr	r3, [r7, #16]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	785b      	ldrb	r3, [r3, #1]
 8016922:	2b03      	cmp	r3, #3
 8016924:	d116      	bne.n	8016954 <lwip_netconn_do_connect+0x15c>
 8016926:	4b0e      	ldr	r3, [pc, #56]	; (8016960 <lwip_netconn_do_connect+0x168>)
 8016928:	f240 5274 	movw	r2, #1396	; 0x574
 801692c:	490d      	ldr	r1, [pc, #52]	; (8016964 <lwip_netconn_do_connect+0x16c>)
 801692e:	480e      	ldr	r0, [pc, #56]	; (8016968 <lwip_netconn_do_connect+0x170>)
 8016930:	f00d fcae 	bl	8024290 <iprintf>
              return;
 8016934:	e00e      	b.n	8016954 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 8016936:	4b0a      	ldr	r3, [pc, #40]	; (8016960 <lwip_netconn_do_connect+0x168>)
 8016938:	f240 527d 	movw	r2, #1405	; 0x57d
 801693c:	490c      	ldr	r1, [pc, #48]	; (8016970 <lwip_netconn_do_connect+0x178>)
 801693e:	480a      	ldr	r0, [pc, #40]	; (8016968 <lwip_netconn_do_connect+0x170>)
 8016940:	f00d fca6 	bl	8024290 <iprintf>
 8016944:	23fa      	movs	r3, #250	; 0xfa
 8016946:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 8016948:	e000      	b.n	801694c <lwip_netconn_do_connect+0x154>
        break;
 801694a:	bf00      	nop
    }
  }
  msg->err = err;
 801694c:	693b      	ldr	r3, [r7, #16]
 801694e:	7dfa      	ldrb	r2, [r7, #23]
 8016950:	711a      	strb	r2, [r3, #4]
 8016952:	e000      	b.n	8016956 <lwip_netconn_do_connect+0x15e>
              return;
 8016954:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 8016956:	3718      	adds	r7, #24
 8016958:	46bd      	mov	sp, r7
 801695a:	bd80      	pop	{r7, pc}
 801695c:	080166d9 	.word	0x080166d9
 8016960:	08025b88 	.word	0x08025b88
 8016964:	08025f48 	.word	0x08025f48
 8016968:	08025bcc 	.word	0x08025bcc
 801696c:	200066a4 	.word	0x200066a4
 8016970:	08025fd0 	.word	0x08025fd0

08016974 <lwip_netconn_do_listen>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_listen(void *m)
{
 8016974:	b580      	push	{r7, lr}
 8016976:	b086      	sub	sp, #24
 8016978:	af00      	add	r7, sp, #0
 801697a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	617b      	str	r3, [r7, #20]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 8016980:	697b      	ldr	r3, [r7, #20]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	685b      	ldr	r3, [r3, #4]
 8016986:	2b00      	cmp	r3, #0
 8016988:	d07f      	beq.n	8016a8a <lwip_netconn_do_listen+0x116>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	681b      	ldr	r3, [r3, #0]
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016994:	2b10      	cmp	r3, #16
 8016996:	d175      	bne.n	8016a84 <lwip_netconn_do_listen+0x110>
      if (msg->conn->state == NETCONN_NONE) {
 8016998:	697b      	ldr	r3, [r7, #20]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	785b      	ldrb	r3, [r3, #1]
 801699e:	2b00      	cmp	r3, #0
 80169a0:	d165      	bne.n	8016a6e <lwip_netconn_do_listen+0xfa>
        struct tcp_pcb *lpcb;
        if (msg->conn->pcb.tcp->state != CLOSED) {
 80169a2:	697b      	ldr	r3, [r7, #20]
 80169a4:	681b      	ldr	r3, [r3, #0]
 80169a6:	685b      	ldr	r3, [r3, #4]
 80169a8:	7d1b      	ldrb	r3, [r3, #20]
 80169aa:	2b00      	cmp	r3, #0
 80169ac:	d002      	beq.n	80169b4 <lwip_netconn_do_listen+0x40>
          /* connection is not closed, cannot listen */
          err = ERR_VAL;
 80169ae:	23fa      	movs	r3, #250	; 0xfa
 80169b0:	72fb      	strb	r3, [r7, #11]
 80169b2:	e06c      	b.n	8016a8e <lwip_netconn_do_listen+0x11a>
        } else {
          u8_t backlog;
#if TCP_LISTEN_BACKLOG
          backlog = msg->msg.lb.backlog;
#else  /* TCP_LISTEN_BACKLOG */
          backlog = TCP_DEFAULT_LISTEN_BACKLOG;
 80169b4:	23ff      	movs	r3, #255	; 0xff
 80169b6:	74fb      	strb	r3, [r7, #19]
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->local_ip,  IPADDR_TYPE_ANY);
            IP_SET_TYPE_VAL(msg->conn->pcb.tcp->remote_ip, IPADDR_TYPE_ANY);
          }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

          lpcb = tcp_listen_with_backlog_and_err(msg->conn->pcb.tcp, backlog, &err);
 80169b8:	697b      	ldr	r3, [r7, #20]
 80169ba:	681b      	ldr	r3, [r3, #0]
 80169bc:	685b      	ldr	r3, [r3, #4]
 80169be:	f107 020b 	add.w	r2, r7, #11
 80169c2:	7cf9      	ldrb	r1, [r7, #19]
 80169c4:	4618      	mov	r0, r3
 80169c6:	f003 f8ef 	bl	8019ba8 <tcp_listen_with_backlog_and_err>
 80169ca:	60f8      	str	r0, [r7, #12]

          if (lpcb == NULL) {
 80169cc:	68fb      	ldr	r3, [r7, #12]
 80169ce:	2b00      	cmp	r3, #0
 80169d0:	d05d      	beq.n	8016a8e <lwip_netconn_do_listen+0x11a>
            /* in this case, the old pcb is still allocated */
          } else {
            /* delete the recvmbox and allocate the acceptmbox */
            if (sys_mbox_valid(&msg->conn->recvmbox)) {
 80169d2:	697b      	ldr	r3, [r7, #20]
 80169d4:	681b      	ldr	r3, [r3, #0]
 80169d6:	3310      	adds	r3, #16
 80169d8:	4618      	mov	r0, r3
 80169da:	f00c f8aa 	bl	8022b32 <sys_mbox_valid>
 80169de:	4603      	mov	r3, r0
 80169e0:	2b00      	cmp	r3, #0
 80169e2:	d00b      	beq.n	80169fc <lwip_netconn_do_listen+0x88>
              /** @todo: should we drain the recvmbox here? */
              sys_mbox_free(&msg->conn->recvmbox);
 80169e4:	697b      	ldr	r3, [r7, #20]
 80169e6:	681b      	ldr	r3, [r3, #0]
 80169e8:	3310      	adds	r3, #16
 80169ea:	4618      	mov	r0, r3
 80169ec:	f00c f81a 	bl	8022a24 <sys_mbox_free>
              sys_mbox_set_invalid(&msg->conn->recvmbox);
 80169f0:	697b      	ldr	r3, [r7, #20]
 80169f2:	681b      	ldr	r3, [r3, #0]
 80169f4:	3310      	adds	r3, #16
 80169f6:	4618      	mov	r0, r3
 80169f8:	f00c f8ac 	bl	8022b54 <sys_mbox_set_invalid>
            }
            err = ERR_OK;
 80169fc:	2300      	movs	r3, #0
 80169fe:	72fb      	strb	r3, [r7, #11]
            if (!sys_mbox_valid(&msg->conn->acceptmbox)) {
 8016a00:	697b      	ldr	r3, [r7, #20]
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	3314      	adds	r3, #20
 8016a06:	4618      	mov	r0, r3
 8016a08:	f00c f893 	bl	8022b32 <sys_mbox_valid>
 8016a0c:	4603      	mov	r3, r0
 8016a0e:	2b00      	cmp	r3, #0
 8016a10:	d108      	bne.n	8016a24 <lwip_netconn_do_listen+0xb0>
              err = sys_mbox_new(&msg->conn->acceptmbox, DEFAULT_ACCEPTMBOX_SIZE);
 8016a12:	697b      	ldr	r3, [r7, #20]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	3314      	adds	r3, #20
 8016a18:	2106      	movs	r1, #6
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	f00b ffe0 	bl	80229e0 <sys_mbox_new>
 8016a20:	4603      	mov	r3, r0
 8016a22:	72fb      	strb	r3, [r7, #11]
            }
            if (err == ERR_OK) {
 8016a24:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8016a28:	2b00      	cmp	r3, #0
 8016a2a:	d118      	bne.n	8016a5e <lwip_netconn_do_listen+0xea>
              msg->conn->state = NETCONN_LISTEN;
 8016a2c:	697b      	ldr	r3, [r7, #20]
 8016a2e:	681b      	ldr	r3, [r3, #0]
 8016a30:	2202      	movs	r2, #2
 8016a32:	705a      	strb	r2, [r3, #1]
              msg->conn->pcb.tcp = lpcb;
 8016a34:	697b      	ldr	r3, [r7, #20]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	68fa      	ldr	r2, [r7, #12]
 8016a3a:	605a      	str	r2, [r3, #4]
              tcp_arg(msg->conn->pcb.tcp, msg->conn);
 8016a3c:	697b      	ldr	r3, [r7, #20]
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	685a      	ldr	r2, [r3, #4]
 8016a42:	697b      	ldr	r3, [r7, #20]
 8016a44:	681b      	ldr	r3, [r3, #0]
 8016a46:	4619      	mov	r1, r3
 8016a48:	4610      	mov	r0, r2
 8016a4a:	f004 f98f 	bl	801ad6c <tcp_arg>
              tcp_accept(msg->conn->pcb.tcp, accept_function);
 8016a4e:	697b      	ldr	r3, [r7, #20]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	4912      	ldr	r1, [pc, #72]	; (8016aa0 <lwip_netconn_do_listen+0x12c>)
 8016a56:	4618      	mov	r0, r3
 8016a58:	f004 fa00 	bl	801ae5c <tcp_accept>
 8016a5c:	e017      	b.n	8016a8e <lwip_netconn_do_listen+0x11a>
            } else {
              /* since the old pcb is already deallocated, free lpcb now */
              tcp_close(lpcb);
 8016a5e:	68f8      	ldr	r0, [r7, #12]
 8016a60:	f002 fe98 	bl	8019794 <tcp_close>
              msg->conn->pcb.tcp = NULL;
 8016a64:	697b      	ldr	r3, [r7, #20]
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	2200      	movs	r2, #0
 8016a6a:	605a      	str	r2, [r3, #4]
 8016a6c:	e00f      	b.n	8016a8e <lwip_netconn_do_listen+0x11a>
            }
          }
        }
      } else if (msg->conn->state == NETCONN_LISTEN) {
 8016a6e:	697b      	ldr	r3, [r7, #20]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	785b      	ldrb	r3, [r3, #1]
 8016a74:	2b02      	cmp	r3, #2
 8016a76:	d102      	bne.n	8016a7e <lwip_netconn_do_listen+0x10a>
        /* already listening, allow updating of the backlog */
        err = ERR_OK;
 8016a78:	2300      	movs	r3, #0
 8016a7a:	72fb      	strb	r3, [r7, #11]
 8016a7c:	e007      	b.n	8016a8e <lwip_netconn_do_listen+0x11a>
        tcp_backlog_set(msg->conn->pcb.tcp, msg->msg.lb.backlog);
      } else {
        err = ERR_CONN;
 8016a7e:	23f5      	movs	r3, #245	; 0xf5
 8016a80:	72fb      	strb	r3, [r7, #11]
 8016a82:	e004      	b.n	8016a8e <lwip_netconn_do_listen+0x11a>
      }
    } else {
      err = ERR_ARG;
 8016a84:	23f0      	movs	r3, #240	; 0xf0
 8016a86:	72fb      	strb	r3, [r7, #11]
 8016a88:	e001      	b.n	8016a8e <lwip_netconn_do_listen+0x11a>
    }
  } else {
    err = ERR_CONN;
 8016a8a:	23f5      	movs	r3, #245	; 0xf5
 8016a8c:	72fb      	strb	r3, [r7, #11]
  }
  msg->err = err;
 8016a8e:	f997 200b 	ldrsb.w	r2, [r7, #11]
 8016a92:	697b      	ldr	r3, [r7, #20]
 8016a94:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016a96:	bf00      	nop
 8016a98:	3718      	adds	r7, #24
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	bd80      	pop	{r7, pc}
 8016a9e:	bf00      	nop
 8016aa0:	08015ce5 	.word	0x08015ce5

08016aa4 <lwip_netconn_do_send>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_send(void *m)
{
 8016aa4:	b580      	push	{r7, lr}
 8016aa6:	b084      	sub	sp, #16
 8016aa8:	af00      	add	r7, sp, #0
 8016aaa:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016aac:	687b      	ldr	r3, [r7, #4]
 8016aae:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016ab0:	68bb      	ldr	r3, [r7, #8]
 8016ab2:	681b      	ldr	r3, [r3, #0]
 8016ab4:	4618      	mov	r0, r3
 8016ab6:	f7fe fdd0 	bl	801565a <netconn_err>
 8016aba:	4603      	mov	r3, r0
 8016abc:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016abe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d134      	bne.n	8016b30 <lwip_netconn_do_send+0x8c>
    if (msg->conn->pcb.tcp != NULL) {
 8016ac6:	68bb      	ldr	r3, [r7, #8]
 8016ac8:	681b      	ldr	r3, [r3, #0]
 8016aca:	685b      	ldr	r3, [r3, #4]
 8016acc:	2b00      	cmp	r3, #0
 8016ace:	d02d      	beq.n	8016b2c <lwip_netconn_do_send+0x88>
      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 8016ad0:	68bb      	ldr	r3, [r7, #8]
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	781b      	ldrb	r3, [r3, #0]
 8016ad6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016ada:	2b20      	cmp	r3, #32
 8016adc:	d123      	bne.n	8016b26 <lwip_netconn_do_send+0x82>
            err = udp_sendto_chksum(msg->conn->pcb.udp, msg->msg.b->p,
                                    &msg->msg.b->addr, msg->msg.b->port,
                                    msg->msg.b->flags & NETBUF_FLAG_CHKSUM, msg->msg.b->toport_chksum);
          }
#else /* LWIP_CHECKSUM_ON_COPY */
          if (ip_addr_isany_val(msg->msg.b->addr) || IP_IS_ANY_TYPE_VAL(msg->msg.b->addr)) {
 8016ade:	68bb      	ldr	r3, [r7, #8]
 8016ae0:	689b      	ldr	r3, [r3, #8]
 8016ae2:	689b      	ldr	r3, [r3, #8]
 8016ae4:	2b00      	cmp	r3, #0
 8016ae6:	d10c      	bne.n	8016b02 <lwip_netconn_do_send+0x5e>
            err = udp_send(msg->conn->pcb.udp, msg->msg.b->p);
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	685a      	ldr	r2, [r3, #4]
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	689b      	ldr	r3, [r3, #8]
 8016af2:	681b      	ldr	r3, [r3, #0]
 8016af4:	4619      	mov	r1, r3
 8016af6:	4610      	mov	r0, r2
 8016af8:	f009 f916 	bl	801fd28 <udp_send>
 8016afc:	4603      	mov	r3, r0
 8016afe:	73fb      	strb	r3, [r7, #15]
          } else {
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
          }
#endif /* LWIP_CHECKSUM_ON_COPY */
          break;
 8016b00:	e016      	b.n	8016b30 <lwip_netconn_do_send+0x8c>
            err = udp_sendto(msg->conn->pcb.udp, msg->msg.b->p, &msg->msg.b->addr, msg->msg.b->port);
 8016b02:	68bb      	ldr	r3, [r7, #8]
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	6858      	ldr	r0, [r3, #4]
 8016b08:	68bb      	ldr	r3, [r7, #8]
 8016b0a:	689b      	ldr	r3, [r3, #8]
 8016b0c:	6819      	ldr	r1, [r3, #0]
 8016b0e:	68bb      	ldr	r3, [r7, #8]
 8016b10:	689b      	ldr	r3, [r3, #8]
 8016b12:	f103 0208 	add.w	r2, r3, #8
 8016b16:	68bb      	ldr	r3, [r7, #8]
 8016b18:	689b      	ldr	r3, [r3, #8]
 8016b1a:	899b      	ldrh	r3, [r3, #12]
 8016b1c:	f009 f938 	bl	801fd90 <udp_sendto>
 8016b20:	4603      	mov	r3, r0
 8016b22:	73fb      	strb	r3, [r7, #15]
          break;
 8016b24:	e004      	b.n	8016b30 <lwip_netconn_do_send+0x8c>
#endif /* LWIP_UDP */
        default:
          err = ERR_CONN;
 8016b26:	23f5      	movs	r3, #245	; 0xf5
 8016b28:	73fb      	strb	r3, [r7, #15]
          break;
 8016b2a:	e001      	b.n	8016b30 <lwip_netconn_do_send+0x8c>
      }
    } else {
      err = ERR_CONN;
 8016b2c:	23f5      	movs	r3, #245	; 0xf5
 8016b2e:	73fb      	strb	r3, [r7, #15]
    }
  }
  msg->err = err;
 8016b30:	68bb      	ldr	r3, [r7, #8]
 8016b32:	7bfa      	ldrb	r2, [r7, #15]
 8016b34:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 8016b36:	bf00      	nop
 8016b38:	3710      	adds	r7, #16
 8016b3a:	46bd      	mov	sp, r7
 8016b3c:	bd80      	pop	{r7, pc}

08016b3e <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 8016b3e:	b580      	push	{r7, lr}
 8016b40:	b086      	sub	sp, #24
 8016b42:	af00      	add	r7, sp, #0
 8016b44:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 8016b4a:	693b      	ldr	r3, [r7, #16]
 8016b4c:	2200      	movs	r2, #0
 8016b4e:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 8016b50:	693b      	ldr	r3, [r7, #16]
 8016b52:	681b      	ldr	r3, [r3, #0]
 8016b54:	685b      	ldr	r3, [r3, #4]
 8016b56:	2b00      	cmp	r3, #0
 8016b58:	d022      	beq.n	8016ba0 <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016b5a:	693b      	ldr	r3, [r7, #16]
 8016b5c:	681b      	ldr	r3, [r3, #0]
 8016b5e:	781b      	ldrb	r3, [r3, #0]
 8016b60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016b64:	2b10      	cmp	r3, #16
 8016b66:	d11b      	bne.n	8016ba0 <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 8016b68:	693b      	ldr	r3, [r7, #16]
 8016b6a:	689b      	ldr	r3, [r3, #8]
 8016b6c:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 8016b6e:	697b      	ldr	r3, [r7, #20]
 8016b70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016b74:	d202      	bcs.n	8016b7c <lwip_netconn_do_recv+0x3e>
 8016b76:	697b      	ldr	r3, [r7, #20]
 8016b78:	b29b      	uxth	r3, r3
 8016b7a:	e001      	b.n	8016b80 <lwip_netconn_do_recv+0x42>
 8016b7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016b80:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 8016b82:	693b      	ldr	r3, [r7, #16]
 8016b84:	681b      	ldr	r3, [r3, #0]
 8016b86:	685b      	ldr	r3, [r3, #4]
 8016b88:	89fa      	ldrh	r2, [r7, #14]
 8016b8a:	4611      	mov	r1, r2
 8016b8c:	4618      	mov	r0, r3
 8016b8e:	f003 f90f 	bl	8019db0 <tcp_recved>
        remaining -= recved;
 8016b92:	89fb      	ldrh	r3, [r7, #14]
 8016b94:	697a      	ldr	r2, [r7, #20]
 8016b96:	1ad3      	subs	r3, r2, r3
 8016b98:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 8016b9a:	697b      	ldr	r3, [r7, #20]
 8016b9c:	2b00      	cmp	r3, #0
 8016b9e:	d1e6      	bne.n	8016b6e <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 8016ba0:	bf00      	nop
 8016ba2:	3718      	adds	r7, #24
 8016ba4:	46bd      	mov	sp, r7
 8016ba6:	bd80      	pop	{r7, pc}

08016ba8 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 8016ba8:	b580      	push	{r7, lr}
 8016baa:	b088      	sub	sp, #32
 8016bac:	af00      	add	r7, sp, #0
 8016bae:	6078      	str	r0, [r7, #4]
 8016bb0:	460b      	mov	r3, r1
 8016bb2:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 8016bb4:	2300      	movs	r3, #0
 8016bb6:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	2b00      	cmp	r3, #0
 8016bbc:	d106      	bne.n	8016bcc <lwip_netconn_do_writemore+0x24>
 8016bbe:	4b96      	ldr	r3, [pc, #600]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016bc0:	f240 6273 	movw	r2, #1651	; 0x673
 8016bc4:	4995      	ldr	r1, [pc, #596]	; (8016e1c <lwip_netconn_do_writemore+0x274>)
 8016bc6:	4896      	ldr	r0, [pc, #600]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016bc8:	f00d fb62 	bl	8024290 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 8016bcc:	687b      	ldr	r3, [r7, #4]
 8016bce:	785b      	ldrb	r3, [r3, #1]
 8016bd0:	2b01      	cmp	r3, #1
 8016bd2:	d006      	beq.n	8016be2 <lwip_netconn_do_writemore+0x3a>
 8016bd4:	4b90      	ldr	r3, [pc, #576]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016bd6:	f240 6274 	movw	r2, #1652	; 0x674
 8016bda:	4992      	ldr	r1, [pc, #584]	; (8016e24 <lwip_netconn_do_writemore+0x27c>)
 8016bdc:	4890      	ldr	r0, [pc, #576]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016bde:	f00d fb57 	bl	8024290 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 8016be2:	687b      	ldr	r3, [r7, #4]
 8016be4:	6a1b      	ldr	r3, [r3, #32]
 8016be6:	2b00      	cmp	r3, #0
 8016be8:	d106      	bne.n	8016bf8 <lwip_netconn_do_writemore+0x50>
 8016bea:	4b8b      	ldr	r3, [pc, #556]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016bec:	f240 6275 	movw	r2, #1653	; 0x675
 8016bf0:	498d      	ldr	r1, [pc, #564]	; (8016e28 <lwip_netconn_do_writemore+0x280>)
 8016bf2:	488b      	ldr	r0, [pc, #556]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016bf4:	f00d fb4c 	bl	8024290 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 8016bf8:	687b      	ldr	r3, [r7, #4]
 8016bfa:	685b      	ldr	r3, [r3, #4]
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d106      	bne.n	8016c0e <lwip_netconn_do_writemore+0x66>
 8016c00:	4b85      	ldr	r3, [pc, #532]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016c02:	f240 6276 	movw	r2, #1654	; 0x676
 8016c06:	4989      	ldr	r1, [pc, #548]	; (8016e2c <lwip_netconn_do_writemore+0x284>)
 8016c08:	4885      	ldr	r0, [pc, #532]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016c0a:	f00d fb41 	bl	8024290 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 8016c0e:	687b      	ldr	r3, [r7, #4]
 8016c10:	6a1b      	ldr	r3, [r3, #32]
 8016c12:	699a      	ldr	r2, [r3, #24]
 8016c14:	687b      	ldr	r3, [r7, #4]
 8016c16:	6a1b      	ldr	r3, [r3, #32]
 8016c18:	695b      	ldr	r3, [r3, #20]
 8016c1a:	429a      	cmp	r2, r3
 8016c1c:	d306      	bcc.n	8016c2c <lwip_netconn_do_writemore+0x84>
 8016c1e:	4b7e      	ldr	r3, [pc, #504]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016c20:	f240 6277 	movw	r2, #1655	; 0x677
 8016c24:	4982      	ldr	r1, [pc, #520]	; (8016e30 <lwip_netconn_do_writemore+0x288>)
 8016c26:	487e      	ldr	r0, [pc, #504]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016c28:	f00d fb32 	bl	8024290 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	6a1b      	ldr	r3, [r3, #32]
 8016c30:	899b      	ldrh	r3, [r3, #12]
 8016c32:	2b00      	cmp	r3, #0
 8016c34:	d106      	bne.n	8016c44 <lwip_netconn_do_writemore+0x9c>
 8016c36:	4b78      	ldr	r3, [pc, #480]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016c38:	f240 6279 	movw	r2, #1657	; 0x679
 8016c3c:	497d      	ldr	r1, [pc, #500]	; (8016e34 <lwip_netconn_do_writemore+0x28c>)
 8016c3e:	4878      	ldr	r0, [pc, #480]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016c40:	f00d fb26 	bl	8024290 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	6a1b      	ldr	r3, [r3, #32]
 8016c48:	7f1b      	ldrb	r3, [r3, #28]
 8016c4a:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8016c4c:	687b      	ldr	r3, [r7, #4]
 8016c4e:	7f1b      	ldrb	r3, [r3, #28]
 8016c50:	f003 0302 	and.w	r3, r3, #2
 8016c54:	2b00      	cmp	r3, #0
 8016c56:	d104      	bne.n	8016c62 <lwip_netconn_do_writemore+0xba>
 8016c58:	7ebb      	ldrb	r3, [r7, #26]
 8016c5a:	f003 0304 	and.w	r3, r3, #4
 8016c5e:	2b00      	cmp	r3, #0
 8016c60:	d001      	beq.n	8016c66 <lwip_netconn_do_writemore+0xbe>
 8016c62:	2301      	movs	r3, #1
 8016c64:	e000      	b.n	8016c68 <lwip_netconn_do_writemore+0xc0>
 8016c66:	2300      	movs	r3, #0
 8016c68:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 8016c6a:	687b      	ldr	r3, [r7, #4]
 8016c6c:	6a1b      	ldr	r3, [r3, #32]
 8016c6e:	689b      	ldr	r3, [r3, #8]
 8016c70:	681a      	ldr	r2, [r3, #0]
 8016c72:	687b      	ldr	r3, [r7, #4]
 8016c74:	6a1b      	ldr	r3, [r3, #32]
 8016c76:	691b      	ldr	r3, [r3, #16]
 8016c78:	4413      	add	r3, r2
 8016c7a:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6a1b      	ldr	r3, [r3, #32]
 8016c80:	689b      	ldr	r3, [r3, #8]
 8016c82:	685a      	ldr	r2, [r3, #4]
 8016c84:	687b      	ldr	r3, [r7, #4]
 8016c86:	6a1b      	ldr	r3, [r3, #32]
 8016c88:	691b      	ldr	r3, [r3, #16]
 8016c8a:	1ad3      	subs	r3, r2, r3
 8016c8c:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 8016c8e:	693b      	ldr	r3, [r7, #16]
 8016c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016c94:	d307      	bcc.n	8016ca6 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 8016c96:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8016c9a:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016c9c:	7ebb      	ldrb	r3, [r7, #26]
 8016c9e:	f043 0302 	orr.w	r3, r3, #2
 8016ca2:	76bb      	strb	r3, [r7, #26]
 8016ca4:	e001      	b.n	8016caa <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 8016ca6:	693b      	ldr	r3, [r7, #16]
 8016ca8:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 8016caa:	687b      	ldr	r3, [r7, #4]
 8016cac:	685b      	ldr	r3, [r3, #4]
 8016cae:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016cb2:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 8016cb4:	89fa      	ldrh	r2, [r7, #14]
 8016cb6:	8bbb      	ldrh	r3, [r7, #28]
 8016cb8:	429a      	cmp	r2, r3
 8016cba:	d216      	bcs.n	8016cea <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 8016cbc:	89fb      	ldrh	r3, [r7, #14]
 8016cbe:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 8016cc0:	7e3b      	ldrb	r3, [r7, #24]
 8016cc2:	2b00      	cmp	r3, #0
 8016cc4:	d00d      	beq.n	8016ce2 <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 8016cc6:	8bbb      	ldrh	r3, [r7, #28]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d10e      	bne.n	8016cea <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	6a1b      	ldr	r3, [r3, #32]
 8016cd0:	699b      	ldr	r3, [r3, #24]
 8016cd2:	2b00      	cmp	r3, #0
 8016cd4:	d102      	bne.n	8016cdc <lwip_netconn_do_writemore+0x134>
 8016cd6:	f06f 0306 	mvn.w	r3, #6
 8016cda:	e000      	b.n	8016cde <lwip_netconn_do_writemore+0x136>
 8016cdc:	2300      	movs	r3, #0
 8016cde:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 8016ce0:	e07d      	b.n	8016dde <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 8016ce2:	7ebb      	ldrb	r3, [r7, #26]
 8016ce4:	f043 0302 	orr.w	r3, r3, #2
 8016ce8:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 8016cea:	687b      	ldr	r3, [r7, #4]
 8016cec:	6a1b      	ldr	r3, [r3, #32]
 8016cee:	691a      	ldr	r2, [r3, #16]
 8016cf0:	8bbb      	ldrh	r3, [r7, #28]
 8016cf2:	441a      	add	r2, r3
 8016cf4:	687b      	ldr	r3, [r7, #4]
 8016cf6:	6a1b      	ldr	r3, [r3, #32]
 8016cf8:	689b      	ldr	r3, [r3, #8]
 8016cfa:	685b      	ldr	r3, [r3, #4]
 8016cfc:	429a      	cmp	r2, r3
 8016cfe:	d906      	bls.n	8016d0e <lwip_netconn_do_writemore+0x166>
 8016d00:	4b45      	ldr	r3, [pc, #276]	; (8016e18 <lwip_netconn_do_writemore+0x270>)
 8016d02:	f240 62a3 	movw	r2, #1699	; 0x6a3
 8016d06:	494c      	ldr	r1, [pc, #304]	; (8016e38 <lwip_netconn_do_writemore+0x290>)
 8016d08:	4845      	ldr	r0, [pc, #276]	; (8016e20 <lwip_netconn_do_writemore+0x278>)
 8016d0a:	f00d fac1 	bl	8024290 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016d0e:	8bbb      	ldrh	r3, [r7, #28]
 8016d10:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016d14:	4293      	cmp	r3, r2
 8016d16:	d103      	bne.n	8016d20 <lwip_netconn_do_writemore+0x178>
 8016d18:	693b      	ldr	r3, [r7, #16]
 8016d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8016d1e:	d209      	bcs.n	8016d34 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016d20:	693b      	ldr	r3, [r7, #16]
 8016d22:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 8016d24:	8bba      	ldrh	r2, [r7, #28]
 8016d26:	429a      	cmp	r2, r3
 8016d28:	d10b      	bne.n	8016d42 <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	6a1b      	ldr	r3, [r3, #32]
 8016d2e:	899b      	ldrh	r3, [r3, #12]
 8016d30:	2b01      	cmp	r3, #1
 8016d32:	d906      	bls.n	8016d42 <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 8016d34:	2301      	movs	r3, #1
 8016d36:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 8016d38:	7ebb      	ldrb	r3, [r7, #26]
 8016d3a:	f043 0302 	orr.w	r3, r3, #2
 8016d3e:	76bb      	strb	r3, [r7, #26]
 8016d40:	e001      	b.n	8016d46 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 8016d42:	2300      	movs	r3, #0
 8016d44:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 8016d46:	687b      	ldr	r3, [r7, #4]
 8016d48:	6858      	ldr	r0, [r3, #4]
 8016d4a:	7ebb      	ldrb	r3, [r7, #26]
 8016d4c:	8bba      	ldrh	r2, [r7, #28]
 8016d4e:	6979      	ldr	r1, [r7, #20]
 8016d50:	f006 ff4e 	bl	801dbf0 <tcp_write>
 8016d54:	4603      	mov	r3, r0
 8016d56:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 8016d58:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d12c      	bne.n	8016dba <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	6a1b      	ldr	r3, [r3, #32]
 8016d64:	6999      	ldr	r1, [r3, #24]
 8016d66:	8bba      	ldrh	r2, [r7, #28]
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	6a1b      	ldr	r3, [r3, #32]
 8016d6c:	440a      	add	r2, r1
 8016d6e:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	6a1b      	ldr	r3, [r3, #32]
 8016d74:	6919      	ldr	r1, [r3, #16]
 8016d76:	8bba      	ldrh	r2, [r7, #28]
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	6a1b      	ldr	r3, [r3, #32]
 8016d7c:	440a      	add	r2, r1
 8016d7e:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 8016d80:	687b      	ldr	r3, [r7, #4]
 8016d82:	6a1b      	ldr	r3, [r3, #32]
 8016d84:	691a      	ldr	r2, [r3, #16]
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	6a1b      	ldr	r3, [r3, #32]
 8016d8a:	689b      	ldr	r3, [r3, #8]
 8016d8c:	685b      	ldr	r3, [r3, #4]
 8016d8e:	429a      	cmp	r2, r3
 8016d90:	d113      	bne.n	8016dba <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	6a1b      	ldr	r3, [r3, #32]
 8016d96:	899a      	ldrh	r2, [r3, #12]
 8016d98:	3a01      	subs	r2, #1
 8016d9a:	b292      	uxth	r2, r2
 8016d9c:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	6a1b      	ldr	r3, [r3, #32]
 8016da2:	899b      	ldrh	r3, [r3, #12]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d008      	beq.n	8016dba <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6a1b      	ldr	r3, [r3, #32]
 8016dac:	689a      	ldr	r2, [r3, #8]
 8016dae:	3208      	adds	r2, #8
 8016db0:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6a1b      	ldr	r3, [r3, #32]
 8016db6:	2200      	movs	r2, #0
 8016db8:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 8016dba:	7e7b      	ldrb	r3, [r7, #25]
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d004      	beq.n	8016dca <lwip_netconn_do_writemore+0x222>
 8016dc0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	f43f af50 	beq.w	8016c6a <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 8016dca:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016dce:	2b00      	cmp	r3, #0
 8016dd0:	d004      	beq.n	8016ddc <lwip_netconn_do_writemore+0x234>
 8016dd2:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016dd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016dda:	d146      	bne.n	8016e6a <lwip_netconn_do_writemore+0x2c2>
err_mem:
 8016ddc:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 8016dde:	7e3b      	ldrb	r3, [r7, #24]
 8016de0:	2b00      	cmp	r3, #0
 8016de2:	d02b      	beq.n	8016e3c <lwip_netconn_do_writemore+0x294>
 8016de4:	687b      	ldr	r3, [r7, #4]
 8016de6:	6a1b      	ldr	r3, [r3, #32]
 8016de8:	699a      	ldr	r2, [r3, #24]
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	6a1b      	ldr	r3, [r3, #32]
 8016dee:	695b      	ldr	r3, [r3, #20]
 8016df0:	429a      	cmp	r2, r3
 8016df2:	d223      	bcs.n	8016e3c <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d005      	beq.n	8016e08 <lwip_netconn_do_writemore+0x260>
 8016dfc:	687b      	ldr	r3, [r7, #4]
 8016dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e00:	2200      	movs	r2, #0
 8016e02:	2103      	movs	r1, #3
 8016e04:	6878      	ldr	r0, [r7, #4]
 8016e06:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	7f1b      	ldrb	r3, [r3, #28]
 8016e0c:	f043 0310 	orr.w	r3, r3, #16
 8016e10:	b2da      	uxtb	r2, r3
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	771a      	strb	r2, [r3, #28]
 8016e16:	e028      	b.n	8016e6a <lwip_netconn_do_writemore+0x2c2>
 8016e18:	08025b88 	.word	0x08025b88
 8016e1c:	08025ce0 	.word	0x08025ce0
 8016e20:	08025bcc 	.word	0x08025bcc
 8016e24:	08025fe8 	.word	0x08025fe8
 8016e28:	08025cf0 	.word	0x08025cf0
 8016e2c:	08026008 	.word	0x08026008
 8016e30:	08026020 	.word	0x08026020
 8016e34:	08026060 	.word	0x08026060
 8016e38:	08026088 	.word	0x08026088
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016e3c:	687b      	ldr	r3, [r7, #4]
 8016e3e:	685b      	ldr	r3, [r3, #4]
 8016e40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8016e44:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 8016e48:	d305      	bcc.n	8016e56 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 8016e4a:	687b      	ldr	r3, [r7, #4]
 8016e4c:	685b      	ldr	r3, [r3, #4]
 8016e4e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 8016e52:	2b04      	cmp	r3, #4
 8016e54:	d909      	bls.n	8016e6a <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e5a:	2b00      	cmp	r3, #0
 8016e5c:	d005      	beq.n	8016e6a <lwip_netconn_do_writemore+0x2c2>
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e62:	2200      	movs	r2, #0
 8016e64:	2103      	movs	r1, #3
 8016e66:	6878      	ldr	r0, [r7, #4]
 8016e68:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 8016e6a:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016e6e:	2b00      	cmp	r3, #0
 8016e70:	d11d      	bne.n	8016eae <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 8016e72:	687b      	ldr	r3, [r7, #4]
 8016e74:	6a1b      	ldr	r3, [r3, #32]
 8016e76:	699a      	ldr	r2, [r3, #24]
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	6a1b      	ldr	r3, [r3, #32]
 8016e7c:	695b      	ldr	r3, [r3, #20]
 8016e7e:	429a      	cmp	r2, r3
 8016e80:	d002      	beq.n	8016e88 <lwip_netconn_do_writemore+0x2e0>
 8016e82:	7e3b      	ldrb	r3, [r7, #24]
 8016e84:	2b00      	cmp	r3, #0
 8016e86:	d001      	beq.n	8016e8c <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 8016e88:	2301      	movs	r3, #1
 8016e8a:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	685b      	ldr	r3, [r3, #4]
 8016e90:	4618      	mov	r0, r3
 8016e92:	f007 fc97 	bl	801e7c4 <tcp_output>
 8016e96:	4603      	mov	r3, r0
 8016e98:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 8016e9a:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8016e9e:	f113 0f04 	cmn.w	r3, #4
 8016ea2:	d12c      	bne.n	8016efe <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016ea4:	7b3b      	ldrb	r3, [r7, #12]
 8016ea6:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016ea8:	2301      	movs	r3, #1
 8016eaa:	76fb      	strb	r3, [r7, #27]
 8016eac:	e027      	b.n	8016efe <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 8016eae:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8016eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8016eb6:	d120      	bne.n	8016efa <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	685b      	ldr	r3, [r3, #4]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f007 fc81 	bl	801e7c4 <tcp_output>
 8016ec2:	4603      	mov	r3, r0
 8016ec4:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 8016ec6:	f997 300d 	ldrsb.w	r3, [r7, #13]
 8016eca:	f113 0f04 	cmn.w	r3, #4
 8016ece:	d104      	bne.n	8016eda <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 8016ed0:	7b7b      	ldrb	r3, [r7, #13]
 8016ed2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016ed4:	2301      	movs	r3, #1
 8016ed6:	76fb      	strb	r3, [r7, #27]
 8016ed8:	e011      	b.n	8016efe <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 8016eda:	7e3b      	ldrb	r3, [r7, #24]
 8016edc:	2b00      	cmp	r3, #0
 8016ede:	d00e      	beq.n	8016efe <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 8016ee0:	687b      	ldr	r3, [r7, #4]
 8016ee2:	6a1b      	ldr	r3, [r3, #32]
 8016ee4:	699b      	ldr	r3, [r3, #24]
 8016ee6:	2b00      	cmp	r3, #0
 8016ee8:	d102      	bne.n	8016ef0 <lwip_netconn_do_writemore+0x348>
 8016eea:	f06f 0306 	mvn.w	r3, #6
 8016eee:	e000      	b.n	8016ef2 <lwip_netconn_do_writemore+0x34a>
 8016ef0:	2300      	movs	r3, #0
 8016ef2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 8016ef4:	2301      	movs	r3, #1
 8016ef6:	76fb      	strb	r3, [r7, #27]
 8016ef8:	e001      	b.n	8016efe <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 8016efa:	2301      	movs	r3, #1
 8016efc:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 8016efe:	7efb      	ldrb	r3, [r7, #27]
 8016f00:	2b00      	cmp	r3, #0
 8016f02:	d015      	beq.n	8016f30 <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 8016f04:	687b      	ldr	r3, [r7, #4]
 8016f06:	6a1b      	ldr	r3, [r3, #32]
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	330c      	adds	r3, #12
 8016f0c:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 8016f0e:	687b      	ldr	r3, [r7, #4]
 8016f10:	6a1b      	ldr	r3, [r3, #32]
 8016f12:	7ffa      	ldrb	r2, [r7, #31]
 8016f14:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 8016f16:	687b      	ldr	r3, [r7, #4]
 8016f18:	2200      	movs	r2, #0
 8016f1a:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 8016f22:	78fb      	ldrb	r3, [r7, #3]
 8016f24:	2b00      	cmp	r3, #0
 8016f26:	d006      	beq.n	8016f36 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 8016f28:	68b8      	ldr	r0, [r7, #8]
 8016f2a:	f00b fe79 	bl	8022c20 <sys_sem_signal>
 8016f2e:	e002      	b.n	8016f36 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 8016f30:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8016f34:	e000      	b.n	8016f38 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 8016f36:	2300      	movs	r3, #0
}
 8016f38:	4618      	mov	r0, r3
 8016f3a:	3720      	adds	r7, #32
 8016f3c:	46bd      	mov	sp, r7
 8016f3e:	bd80      	pop	{r7, pc}

08016f40 <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 8016f40:	b580      	push	{r7, lr}
 8016f42:	b084      	sub	sp, #16
 8016f44:	af00      	add	r7, sp, #0
 8016f46:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8016f48:	687b      	ldr	r3, [r7, #4]
 8016f4a:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 8016f4c:	68bb      	ldr	r3, [r7, #8]
 8016f4e:	681b      	ldr	r3, [r3, #0]
 8016f50:	4618      	mov	r0, r3
 8016f52:	f7fe fb82 	bl	801565a <netconn_err>
 8016f56:	4603      	mov	r3, r0
 8016f58:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 8016f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8016f5e:	2b00      	cmp	r3, #0
 8016f60:	d166      	bne.n	8017030 <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 8016f62:	68bb      	ldr	r3, [r7, #8]
 8016f64:	681b      	ldr	r3, [r3, #0]
 8016f66:	781b      	ldrb	r3, [r3, #0]
 8016f68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8016f6c:	2b10      	cmp	r3, #16
 8016f6e:	d15d      	bne.n	801702c <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	681b      	ldr	r3, [r3, #0]
 8016f74:	785b      	ldrb	r3, [r3, #1]
 8016f76:	2b00      	cmp	r3, #0
 8016f78:	d002      	beq.n	8016f80 <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 8016f7a:	23fb      	movs	r3, #251	; 0xfb
 8016f7c:	73fb      	strb	r3, [r7, #15]
 8016f7e:	e057      	b.n	8017030 <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 8016f80:	68bb      	ldr	r3, [r7, #8]
 8016f82:	681b      	ldr	r3, [r3, #0]
 8016f84:	685b      	ldr	r3, [r3, #4]
 8016f86:	2b00      	cmp	r3, #0
 8016f88:	d04d      	beq.n	8017026 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 8016f8a:	68bb      	ldr	r3, [r7, #8]
 8016f8c:	681b      	ldr	r3, [r3, #0]
 8016f8e:	2201      	movs	r2, #1
 8016f90:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 8016f92:	68bb      	ldr	r3, [r7, #8]
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	6a1b      	ldr	r3, [r3, #32]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	d006      	beq.n	8016faa <lwip_netconn_do_write+0x6a>
 8016f9c:	4b28      	ldr	r3, [pc, #160]	; (8017040 <lwip_netconn_do_write+0x100>)
 8016f9e:	f240 7223 	movw	r2, #1827	; 0x723
 8016fa2:	4928      	ldr	r1, [pc, #160]	; (8017044 <lwip_netconn_do_write+0x104>)
 8016fa4:	4828      	ldr	r0, [pc, #160]	; (8017048 <lwip_netconn_do_write+0x108>)
 8016fa6:	f00d f973 	bl	8024290 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 8016faa:	68bb      	ldr	r3, [r7, #8]
 8016fac:	695b      	ldr	r3, [r3, #20]
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d106      	bne.n	8016fc0 <lwip_netconn_do_write+0x80>
 8016fb2:	4b23      	ldr	r3, [pc, #140]	; (8017040 <lwip_netconn_do_write+0x100>)
 8016fb4:	f240 7224 	movw	r2, #1828	; 0x724
 8016fb8:	4924      	ldr	r1, [pc, #144]	; (801704c <lwip_netconn_do_write+0x10c>)
 8016fba:	4823      	ldr	r0, [pc, #140]	; (8017048 <lwip_netconn_do_write+0x108>)
 8016fbc:	f00d f968 	bl	8024290 <iprintf>
        msg->conn->current_msg = msg;
 8016fc0:	68bb      	ldr	r3, [r7, #8]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	68ba      	ldr	r2, [r7, #8]
 8016fc6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 8016fc8:	68bb      	ldr	r3, [r7, #8]
 8016fca:	681b      	ldr	r3, [r3, #0]
 8016fcc:	2100      	movs	r1, #0
 8016fce:	4618      	mov	r0, r3
 8016fd0:	f7ff fdea 	bl	8016ba8 <lwip_netconn_do_writemore>
 8016fd4:	4603      	mov	r3, r0
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d02e      	beq.n	8017038 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 8016fda:	68bb      	ldr	r3, [r7, #8]
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	785b      	ldrb	r3, [r3, #1]
 8016fe0:	2b01      	cmp	r3, #1
 8016fe2:	d006      	beq.n	8016ff2 <lwip_netconn_do_write+0xb2>
 8016fe4:	4b16      	ldr	r3, [pc, #88]	; (8017040 <lwip_netconn_do_write+0x100>)
 8016fe6:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 8016fea:	4919      	ldr	r1, [pc, #100]	; (8017050 <lwip_netconn_do_write+0x110>)
 8016fec:	4816      	ldr	r0, [pc, #88]	; (8017048 <lwip_netconn_do_write+0x108>)
 8016fee:	f00d f94f 	bl	8024290 <iprintf>
          UNLOCK_TCPIP_CORE();
 8016ff2:	4818      	ldr	r0, [pc, #96]	; (8017054 <lwip_netconn_do_write+0x114>)
 8016ff4:	f00b fe85 	bl	8022d02 <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 8016ff8:	68bb      	ldr	r3, [r7, #8]
 8016ffa:	681b      	ldr	r3, [r3, #0]
 8016ffc:	330c      	adds	r3, #12
 8016ffe:	2100      	movs	r1, #0
 8017000:	4618      	mov	r0, r3
 8017002:	f00b fddc 	bl	8022bbe <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 8017006:	4813      	ldr	r0, [pc, #76]	; (8017054 <lwip_netconn_do_write+0x114>)
 8017008:	f00b fe6c 	bl	8022ce4 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 801700c:	68bb      	ldr	r3, [r7, #8]
 801700e:	681b      	ldr	r3, [r3, #0]
 8017010:	785b      	ldrb	r3, [r3, #1]
 8017012:	2b01      	cmp	r3, #1
 8017014:	d110      	bne.n	8017038 <lwip_netconn_do_write+0xf8>
 8017016:	4b0a      	ldr	r3, [pc, #40]	; (8017040 <lwip_netconn_do_write+0x100>)
 8017018:	f240 722c 	movw	r2, #1836	; 0x72c
 801701c:	490c      	ldr	r1, [pc, #48]	; (8017050 <lwip_netconn_do_write+0x110>)
 801701e:	480a      	ldr	r0, [pc, #40]	; (8017048 <lwip_netconn_do_write+0x108>)
 8017020:	f00d f936 	bl	8024290 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 8017024:	e008      	b.n	8017038 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 8017026:	23f5      	movs	r3, #245	; 0xf5
 8017028:	73fb      	strb	r3, [r7, #15]
 801702a:	e001      	b.n	8017030 <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 801702c:	23fa      	movs	r3, #250	; 0xfa
 801702e:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 8017030:	68bb      	ldr	r3, [r7, #8]
 8017032:	7bfa      	ldrb	r2, [r7, #15]
 8017034:	711a      	strb	r2, [r3, #4]
 8017036:	e000      	b.n	801703a <lwip_netconn_do_write+0xfa>
        return;
 8017038:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 801703a:	3710      	adds	r7, #16
 801703c:	46bd      	mov	sp, r7
 801703e:	bd80      	pop	{r7, pc}
 8017040:	08025b88 	.word	0x08025b88
 8017044:	08025f2c 	.word	0x08025f2c
 8017048:	08025bcc 	.word	0x08025bcc
 801704c:	080260b4 	.word	0x080260b4
 8017050:	08025f48 	.word	0x08025f48
 8017054:	200066a4 	.word	0x200066a4

08017058 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 8017060:	687b      	ldr	r3, [r7, #4]
 8017062:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 8017064:	68fb      	ldr	r3, [r7, #12]
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	785b      	ldrb	r3, [r3, #1]
 801706a:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 801706c:	68fb      	ldr	r3, [r7, #12]
 801706e:	681b      	ldr	r3, [r3, #0]
 8017070:	685b      	ldr	r3, [r3, #4]
 8017072:	2b00      	cmp	r3, #0
 8017074:	d069      	beq.n	801714a <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8017076:	68fb      	ldr	r3, [r7, #12]
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	781b      	ldrb	r3, [r3, #0]
 801707c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 8017080:	2b10      	cmp	r3, #16
 8017082:	d162      	bne.n	801714a <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 8017084:	68fb      	ldr	r3, [r7, #12]
 8017086:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 8017088:	2b03      	cmp	r3, #3
 801708a:	d002      	beq.n	8017092 <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 801708c:	7afb      	ldrb	r3, [r7, #11]
 801708e:	2b02      	cmp	r3, #2
 8017090:	d05b      	beq.n	801714a <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 8017092:	7afb      	ldrb	r3, [r7, #11]
 8017094:	2b03      	cmp	r3, #3
 8017096:	d103      	bne.n	80170a0 <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 8017098:	68fb      	ldr	r3, [r7, #12]
 801709a:	22f5      	movs	r2, #245	; 0xf5
 801709c:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 801709e:	e059      	b.n	8017154 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 80170a0:	7afb      	ldrb	r3, [r7, #11]
 80170a2:	2b01      	cmp	r3, #1
 80170a4:	d103      	bne.n	80170ae <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 80170a6:	68fb      	ldr	r3, [r7, #12]
 80170a8:	22fb      	movs	r2, #251	; 0xfb
 80170aa:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 80170ac:	e052      	b.n	8017154 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 80170ae:	68fb      	ldr	r3, [r7, #12]
 80170b0:	7a1b      	ldrb	r3, [r3, #8]
 80170b2:	f003 0301 	and.w	r3, r3, #1
 80170b6:	2b00      	cmp	r3, #0
 80170b8:	d004      	beq.n	80170c4 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 80170ba:	68fb      	ldr	r3, [r7, #12]
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	4618      	mov	r0, r3
 80170c0:	f7ff f804 	bl	80160cc <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	6a1b      	ldr	r3, [r3, #32]
 80170ca:	2b00      	cmp	r3, #0
 80170cc:	d006      	beq.n	80170dc <lwip_netconn_do_close+0x84>
 80170ce:	4b23      	ldr	r3, [pc, #140]	; (801715c <lwip_netconn_do_close+0x104>)
 80170d0:	f240 72bd 	movw	r2, #1981	; 0x7bd
 80170d4:	4922      	ldr	r1, [pc, #136]	; (8017160 <lwip_netconn_do_close+0x108>)
 80170d6:	4823      	ldr	r0, [pc, #140]	; (8017164 <lwip_netconn_do_close+0x10c>)
 80170d8:	f00d f8da 	bl	8024290 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 80170dc:	68fb      	ldr	r3, [r7, #12]
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	2204      	movs	r2, #4
 80170e2:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 80170e4:	68fb      	ldr	r3, [r7, #12]
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	68fa      	ldr	r2, [r7, #12]
 80170ea:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 80170ec:	68fb      	ldr	r3, [r7, #12]
 80170ee:	681b      	ldr	r3, [r3, #0]
 80170f0:	2100      	movs	r1, #0
 80170f2:	4618      	mov	r0, r3
 80170f4:	f7ff f868 	bl	80161c8 <lwip_netconn_do_close_internal>
 80170f8:	4603      	mov	r3, r0
 80170fa:	2b00      	cmp	r3, #0
 80170fc:	d029      	beq.n	8017152 <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 80170fe:	68fb      	ldr	r3, [r7, #12]
 8017100:	681b      	ldr	r3, [r3, #0]
 8017102:	785b      	ldrb	r3, [r3, #1]
 8017104:	2b04      	cmp	r3, #4
 8017106:	d006      	beq.n	8017116 <lwip_netconn_do_close+0xbe>
 8017108:	4b14      	ldr	r3, [pc, #80]	; (801715c <lwip_netconn_do_close+0x104>)
 801710a:	f240 72c2 	movw	r2, #1986	; 0x7c2
 801710e:	4916      	ldr	r1, [pc, #88]	; (8017168 <lwip_netconn_do_close+0x110>)
 8017110:	4814      	ldr	r0, [pc, #80]	; (8017164 <lwip_netconn_do_close+0x10c>)
 8017112:	f00d f8bd 	bl	8024290 <iprintf>
        UNLOCK_TCPIP_CORE();
 8017116:	4815      	ldr	r0, [pc, #84]	; (801716c <lwip_netconn_do_close+0x114>)
 8017118:	f00b fdf3 	bl	8022d02 <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 801711c:	68fb      	ldr	r3, [r7, #12]
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	330c      	adds	r3, #12
 8017122:	2100      	movs	r1, #0
 8017124:	4618      	mov	r0, r3
 8017126:	f00b fd4a 	bl	8022bbe <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 801712a:	4810      	ldr	r0, [pc, #64]	; (801716c <lwip_netconn_do_close+0x114>)
 801712c:	f00b fdda 	bl	8022ce4 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 8017130:	68fb      	ldr	r3, [r7, #12]
 8017132:	681b      	ldr	r3, [r3, #0]
 8017134:	785b      	ldrb	r3, [r3, #1]
 8017136:	2b00      	cmp	r3, #0
 8017138:	d00b      	beq.n	8017152 <lwip_netconn_do_close+0xfa>
 801713a:	4b08      	ldr	r3, [pc, #32]	; (801715c <lwip_netconn_do_close+0x104>)
 801713c:	f240 72c6 	movw	r2, #1990	; 0x7c6
 8017140:	4909      	ldr	r1, [pc, #36]	; (8017168 <lwip_netconn_do_close+0x110>)
 8017142:	4808      	ldr	r0, [pc, #32]	; (8017164 <lwip_netconn_do_close+0x10c>)
 8017144:	f00d f8a4 	bl	8024290 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 8017148:	e003      	b.n	8017152 <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 801714a:	68fb      	ldr	r3, [r7, #12]
 801714c:	22f5      	movs	r2, #245	; 0xf5
 801714e:	711a      	strb	r2, [r3, #4]
 8017150:	e000      	b.n	8017154 <lwip_netconn_do_close+0xfc>
      return;
 8017152:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 8017154:	3710      	adds	r7, #16
 8017156:	46bd      	mov	sp, r7
 8017158:	bd80      	pop	{r7, pc}
 801715a:	bf00      	nop
 801715c:	08025b88 	.word	0x08025b88
 8017160:	08025f2c 	.word	0x08025f2c
 8017164:	08025bcc 	.word	0x08025bcc
 8017168:	08025f48 	.word	0x08025f48
 801716c:	200066a4 	.word	0x200066a4

08017170 <netbuf_new>:
 * @return a pointer to a new netbuf
 *         NULL on lack of memory
 */
struct
netbuf *netbuf_new(void)
{
 8017170:	b580      	push	{r7, lr}
 8017172:	b082      	sub	sp, #8
 8017174:	af00      	add	r7, sp, #0
  struct netbuf *buf;

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8017176:	2006      	movs	r0, #6
 8017178:	f000 ff38 	bl	8017fec <memp_malloc>
 801717c:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 801717e:	687b      	ldr	r3, [r7, #4]
 8017180:	2b00      	cmp	r3, #0
 8017182:	d004      	beq.n	801718e <netbuf_new+0x1e>
    memset(buf, 0, sizeof(struct netbuf));
 8017184:	2210      	movs	r2, #16
 8017186:	2100      	movs	r1, #0
 8017188:	6878      	ldr	r0, [r7, #4]
 801718a:	f00c ff99 	bl	80240c0 <memset>
  }
  return buf;
 801718e:	687b      	ldr	r3, [r7, #4]
}
 8017190:	4618      	mov	r0, r3
 8017192:	3708      	adds	r7, #8
 8017194:	46bd      	mov	sp, r7
 8017196:	bd80      	pop	{r7, pc}

08017198 <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 8017198:	b580      	push	{r7, lr}
 801719a:	b082      	sub	sp, #8
 801719c:	af00      	add	r7, sp, #0
 801719e:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 80171a0:	687b      	ldr	r3, [r7, #4]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d013      	beq.n	80171ce <netbuf_delete+0x36>
    if (buf->p != NULL) {
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	2b00      	cmp	r3, #0
 80171ac:	d00b      	beq.n	80171c6 <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	681b      	ldr	r3, [r3, #0]
 80171b2:	4618      	mov	r0, r3
 80171b4:	f001 fe34 	bl	8018e20 <pbuf_free>
      buf->p = buf->ptr = NULL;
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	2200      	movs	r2, #0
 80171bc:	605a      	str	r2, [r3, #4]
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	685a      	ldr	r2, [r3, #4]
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 80171c6:	6879      	ldr	r1, [r7, #4]
 80171c8:	2006      	movs	r0, #6
 80171ca:	f000 ff85 	bl	80180d8 <memp_free>
  }
}
 80171ce:	bf00      	nop
 80171d0:	3708      	adds	r7, #8
 80171d2:	46bd      	mov	sp, r7
 80171d4:	bd80      	pop	{r7, pc}
	...

080171d8 <netbuf_ref>:
 * @return ERR_OK if data is referenced
 *         ERR_MEM if data couldn't be referenced due to lack of memory
 */
err_t
netbuf_ref(struct netbuf *buf, const void *dataptr, u16_t size)
{
 80171d8:	b580      	push	{r7, lr}
 80171da:	b084      	sub	sp, #16
 80171dc:	af00      	add	r7, sp, #0
 80171de:	60f8      	str	r0, [r7, #12]
 80171e0:	60b9      	str	r1, [r7, #8]
 80171e2:	4613      	mov	r3, r2
 80171e4:	80fb      	strh	r3, [r7, #6]
  LWIP_ERROR("netbuf_ref: invalid buf", (buf != NULL), return ERR_ARG;);
 80171e6:	68fb      	ldr	r3, [r7, #12]
 80171e8:	2b00      	cmp	r3, #0
 80171ea:	d108      	bne.n	80171fe <netbuf_ref+0x26>
 80171ec:	4b1c      	ldr	r3, [pc, #112]	; (8017260 <netbuf_ref+0x88>)
 80171ee:	2299      	movs	r2, #153	; 0x99
 80171f0:	491c      	ldr	r1, [pc, #112]	; (8017264 <netbuf_ref+0x8c>)
 80171f2:	481d      	ldr	r0, [pc, #116]	; (8017268 <netbuf_ref+0x90>)
 80171f4:	f00d f84c 	bl	8024290 <iprintf>
 80171f8:	f06f 030f 	mvn.w	r3, #15
 80171fc:	e02b      	b.n	8017256 <netbuf_ref+0x7e>
  if (buf->p != NULL) {
 80171fe:	68fb      	ldr	r3, [r7, #12]
 8017200:	681b      	ldr	r3, [r3, #0]
 8017202:	2b00      	cmp	r3, #0
 8017204:	d004      	beq.n	8017210 <netbuf_ref+0x38>
    pbuf_free(buf->p);
 8017206:	68fb      	ldr	r3, [r7, #12]
 8017208:	681b      	ldr	r3, [r3, #0]
 801720a:	4618      	mov	r0, r3
 801720c:	f001 fe08 	bl	8018e20 <pbuf_free>
  }
  buf->p = pbuf_alloc(PBUF_TRANSPORT, 0, PBUF_REF);
 8017210:	2241      	movs	r2, #65	; 0x41
 8017212:	2100      	movs	r1, #0
 8017214:	2036      	movs	r0, #54	; 0x36
 8017216:	f001 fb1f 	bl	8018858 <pbuf_alloc>
 801721a:	4602      	mov	r2, r0
 801721c:	68fb      	ldr	r3, [r7, #12]
 801721e:	601a      	str	r2, [r3, #0]
  if (buf->p == NULL) {
 8017220:	68fb      	ldr	r3, [r7, #12]
 8017222:	681b      	ldr	r3, [r3, #0]
 8017224:	2b00      	cmp	r3, #0
 8017226:	d105      	bne.n	8017234 <netbuf_ref+0x5c>
    buf->ptr = NULL;
 8017228:	68fb      	ldr	r3, [r7, #12]
 801722a:	2200      	movs	r2, #0
 801722c:	605a      	str	r2, [r3, #4]
    return ERR_MEM;
 801722e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017232:	e010      	b.n	8017256 <netbuf_ref+0x7e>
  }
  ((struct pbuf_rom *)buf->p)->payload = dataptr;
 8017234:	68fb      	ldr	r3, [r7, #12]
 8017236:	681b      	ldr	r3, [r3, #0]
 8017238:	68ba      	ldr	r2, [r7, #8]
 801723a:	605a      	str	r2, [r3, #4]
  buf->p->len = buf->p->tot_len = size;
 801723c:	68fb      	ldr	r3, [r7, #12]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	88fa      	ldrh	r2, [r7, #6]
 8017242:	811a      	strh	r2, [r3, #8]
 8017244:	68fa      	ldr	r2, [r7, #12]
 8017246:	6812      	ldr	r2, [r2, #0]
 8017248:	891b      	ldrh	r3, [r3, #8]
 801724a:	8153      	strh	r3, [r2, #10]
  buf->ptr = buf->p;
 801724c:	68fb      	ldr	r3, [r7, #12]
 801724e:	681a      	ldr	r2, [r3, #0]
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	605a      	str	r2, [r3, #4]
  return ERR_OK;
 8017254:	2300      	movs	r3, #0
}
 8017256:	4618      	mov	r0, r3
 8017258:	3710      	adds	r7, #16
 801725a:	46bd      	mov	sp, r7
 801725c:	bd80      	pop	{r7, pc}
 801725e:	bf00      	nop
 8017260:	080260e0 	.word	0x080260e0
 8017264:	08026198 	.word	0x08026198
 8017268:	08026130 	.word	0x08026130

0801726c <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 801726c:	b580      	push	{r7, lr}
 801726e:	b082      	sub	sp, #8
 8017270:	af00      	add	r7, sp, #0
 8017272:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	2b00      	cmp	r3, #0
 8017278:	d108      	bne.n	801728c <netbuf_next+0x20>
 801727a:	4b11      	ldr	r3, [pc, #68]	; (80172c0 <netbuf_next+0x54>)
 801727c:	22e0      	movs	r2, #224	; 0xe0
 801727e:	4911      	ldr	r1, [pc, #68]	; (80172c4 <netbuf_next+0x58>)
 8017280:	4811      	ldr	r0, [pc, #68]	; (80172c8 <netbuf_next+0x5c>)
 8017282:	f00d f805 	bl	8024290 <iprintf>
 8017286:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801728a:	e014      	b.n	80172b6 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	685b      	ldr	r3, [r3, #4]
 8017290:	681b      	ldr	r3, [r3, #0]
 8017292:	2b00      	cmp	r3, #0
 8017294:	d102      	bne.n	801729c <netbuf_next+0x30>
    return -1;
 8017296:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801729a:	e00c      	b.n	80172b6 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	685b      	ldr	r3, [r3, #4]
 80172a0:	681a      	ldr	r2, [r3, #0]
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	685b      	ldr	r3, [r3, #4]
 80172aa:	681b      	ldr	r3, [r3, #0]
 80172ac:	2b00      	cmp	r3, #0
 80172ae:	d101      	bne.n	80172b4 <netbuf_next+0x48>
    return 1;
 80172b0:	2301      	movs	r3, #1
 80172b2:	e000      	b.n	80172b6 <netbuf_next+0x4a>
  }
  return 0;
 80172b4:	2300      	movs	r3, #0
}
 80172b6:	4618      	mov	r0, r3
 80172b8:	3708      	adds	r7, #8
 80172ba:	46bd      	mov	sp, r7
 80172bc:	bd80      	pop	{r7, pc}
 80172be:	bf00      	nop
 80172c0:	080260e0 	.word	0x080260e0
 80172c4:	08026240 	.word	0x08026240
 80172c8:	08026130 	.word	0x08026130

080172cc <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 80172cc:	b580      	push	{r7, lr}
 80172ce:	b084      	sub	sp, #16
 80172d0:	af00      	add	r7, sp, #0
 80172d2:	6078      	str	r0, [r7, #4]
 80172d4:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 80172d6:	f008 fb2d 	bl	801f934 <sys_timeouts_sleeptime>
 80172da:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80172dc:	68fb      	ldr	r3, [r7, #12]
 80172de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80172e2:	d10b      	bne.n	80172fc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80172e4:	4813      	ldr	r0, [pc, #76]	; (8017334 <tcpip_timeouts_mbox_fetch+0x68>)
 80172e6:	f00b fd0c 	bl	8022d02 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80172ea:	2200      	movs	r2, #0
 80172ec:	6839      	ldr	r1, [r7, #0]
 80172ee:	6878      	ldr	r0, [r7, #4]
 80172f0:	f00b fbc4 	bl	8022a7c <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80172f4:	480f      	ldr	r0, [pc, #60]	; (8017334 <tcpip_timeouts_mbox_fetch+0x68>)
 80172f6:	f00b fcf5 	bl	8022ce4 <sys_mutex_lock>
    return;
 80172fa:	e018      	b.n	801732e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80172fc:	68fb      	ldr	r3, [r7, #12]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d102      	bne.n	8017308 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 8017302:	f008 fadd 	bl	801f8c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 8017306:	e7e6      	b.n	80172d6 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 8017308:	480a      	ldr	r0, [pc, #40]	; (8017334 <tcpip_timeouts_mbox_fetch+0x68>)
 801730a:	f00b fcfa 	bl	8022d02 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 801730e:	68fa      	ldr	r2, [r7, #12]
 8017310:	6839      	ldr	r1, [r7, #0]
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f00b fbb2 	bl	8022a7c <sys_arch_mbox_fetch>
 8017318:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 801731a:	4806      	ldr	r0, [pc, #24]	; (8017334 <tcpip_timeouts_mbox_fetch+0x68>)
 801731c:	f00b fce2 	bl	8022ce4 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 8017320:	68bb      	ldr	r3, [r7, #8]
 8017322:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8017326:	d102      	bne.n	801732e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 8017328:	f008 faca 	bl	801f8c0 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 801732c:	e7d3      	b.n	80172d6 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 801732e:	3710      	adds	r7, #16
 8017330:	46bd      	mov	sp, r7
 8017332:	bd80      	pop	{r7, pc}
 8017334:	200066a4 	.word	0x200066a4

08017338 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b084      	sub	sp, #16
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8017340:	4810      	ldr	r0, [pc, #64]	; (8017384 <tcpip_thread+0x4c>)
 8017342:	f00b fccf 	bl	8022ce4 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8017346:	4b10      	ldr	r3, [pc, #64]	; (8017388 <tcpip_thread+0x50>)
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	2b00      	cmp	r3, #0
 801734c:	d005      	beq.n	801735a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 801734e:	4b0e      	ldr	r3, [pc, #56]	; (8017388 <tcpip_thread+0x50>)
 8017350:	681b      	ldr	r3, [r3, #0]
 8017352:	4a0e      	ldr	r2, [pc, #56]	; (801738c <tcpip_thread+0x54>)
 8017354:	6812      	ldr	r2, [r2, #0]
 8017356:	4610      	mov	r0, r2
 8017358:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801735a:	f107 030c 	add.w	r3, r7, #12
 801735e:	4619      	mov	r1, r3
 8017360:	480b      	ldr	r0, [pc, #44]	; (8017390 <tcpip_thread+0x58>)
 8017362:	f7ff ffb3 	bl	80172cc <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8017366:	68fb      	ldr	r3, [r7, #12]
 8017368:	2b00      	cmp	r3, #0
 801736a:	d106      	bne.n	801737a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801736c:	4b09      	ldr	r3, [pc, #36]	; (8017394 <tcpip_thread+0x5c>)
 801736e:	2291      	movs	r2, #145	; 0x91
 8017370:	4909      	ldr	r1, [pc, #36]	; (8017398 <tcpip_thread+0x60>)
 8017372:	480a      	ldr	r0, [pc, #40]	; (801739c <tcpip_thread+0x64>)
 8017374:	f00c ff8c 	bl	8024290 <iprintf>
      continue;
 8017378:	e003      	b.n	8017382 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801737a:	68fb      	ldr	r3, [r7, #12]
 801737c:	4618      	mov	r0, r3
 801737e:	f000 f80f 	bl	80173a0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8017382:	e7ea      	b.n	801735a <tcpip_thread+0x22>
 8017384:	200066a4 	.word	0x200066a4
 8017388:	20006698 	.word	0x20006698
 801738c:	2000669c 	.word	0x2000669c
 8017390:	200066a0 	.word	0x200066a0
 8017394:	08026278 	.word	0x08026278
 8017398:	080262a8 	.word	0x080262a8
 801739c:	080262c8 	.word	0x080262c8

080173a0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 80173a0:	b580      	push	{r7, lr}
 80173a2:	b082      	sub	sp, #8
 80173a4:	af00      	add	r7, sp, #0
 80173a6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 80173a8:	687b      	ldr	r3, [r7, #4]
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	2b02      	cmp	r3, #2
 80173ae:	d026      	beq.n	80173fe <tcpip_thread_handle_msg+0x5e>
 80173b0:	2b02      	cmp	r3, #2
 80173b2:	dc2b      	bgt.n	801740c <tcpip_thread_handle_msg+0x6c>
 80173b4:	2b00      	cmp	r3, #0
 80173b6:	d002      	beq.n	80173be <tcpip_thread_handle_msg+0x1e>
 80173b8:	2b01      	cmp	r3, #1
 80173ba:	d015      	beq.n	80173e8 <tcpip_thread_handle_msg+0x48>
 80173bc:	e026      	b.n	801740c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	68db      	ldr	r3, [r3, #12]
 80173c2:	687a      	ldr	r2, [r7, #4]
 80173c4:	6850      	ldr	r0, [r2, #4]
 80173c6:	687a      	ldr	r2, [r7, #4]
 80173c8:	6892      	ldr	r2, [r2, #8]
 80173ca:	4611      	mov	r1, r2
 80173cc:	4798      	blx	r3
 80173ce:	4603      	mov	r3, r0
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	d004      	beq.n	80173de <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 80173d4:	687b      	ldr	r3, [r7, #4]
 80173d6:	685b      	ldr	r3, [r3, #4]
 80173d8:	4618      	mov	r0, r3
 80173da:	f001 fd21 	bl	8018e20 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80173de:	6879      	ldr	r1, [r7, #4]
 80173e0:	2009      	movs	r0, #9
 80173e2:	f000 fe79 	bl	80180d8 <memp_free>
      break;
 80173e6:	e018      	b.n	801741a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	685b      	ldr	r3, [r3, #4]
 80173ec:	687a      	ldr	r2, [r7, #4]
 80173ee:	6892      	ldr	r2, [r2, #8]
 80173f0:	4610      	mov	r0, r2
 80173f2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80173f4:	6879      	ldr	r1, [r7, #4]
 80173f6:	2008      	movs	r0, #8
 80173f8:	f000 fe6e 	bl	80180d8 <memp_free>
      break;
 80173fc:	e00d      	b.n	801741a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80173fe:	687b      	ldr	r3, [r7, #4]
 8017400:	685b      	ldr	r3, [r3, #4]
 8017402:	687a      	ldr	r2, [r7, #4]
 8017404:	6892      	ldr	r2, [r2, #8]
 8017406:	4610      	mov	r0, r2
 8017408:	4798      	blx	r3
      break;
 801740a:	e006      	b.n	801741a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 801740c:	4b05      	ldr	r3, [pc, #20]	; (8017424 <tcpip_thread_handle_msg+0x84>)
 801740e:	22cf      	movs	r2, #207	; 0xcf
 8017410:	4905      	ldr	r1, [pc, #20]	; (8017428 <tcpip_thread_handle_msg+0x88>)
 8017412:	4806      	ldr	r0, [pc, #24]	; (801742c <tcpip_thread_handle_msg+0x8c>)
 8017414:	f00c ff3c 	bl	8024290 <iprintf>
      break;
 8017418:	bf00      	nop
  }
}
 801741a:	bf00      	nop
 801741c:	3708      	adds	r7, #8
 801741e:	46bd      	mov	sp, r7
 8017420:	bd80      	pop	{r7, pc}
 8017422:	bf00      	nop
 8017424:	08026278 	.word	0x08026278
 8017428:	080262a8 	.word	0x080262a8
 801742c:	080262c8 	.word	0x080262c8

08017430 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8017430:	b580      	push	{r7, lr}
 8017432:	b086      	sub	sp, #24
 8017434:	af00      	add	r7, sp, #0
 8017436:	60f8      	str	r0, [r7, #12]
 8017438:	60b9      	str	r1, [r7, #8]
 801743a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 801743c:	481a      	ldr	r0, [pc, #104]	; (80174a8 <tcpip_inpkt+0x78>)
 801743e:	f00b fb78 	bl	8022b32 <sys_mbox_valid>
 8017442:	4603      	mov	r3, r0
 8017444:	2b00      	cmp	r3, #0
 8017446:	d105      	bne.n	8017454 <tcpip_inpkt+0x24>
 8017448:	4b18      	ldr	r3, [pc, #96]	; (80174ac <tcpip_inpkt+0x7c>)
 801744a:	22fc      	movs	r2, #252	; 0xfc
 801744c:	4918      	ldr	r1, [pc, #96]	; (80174b0 <tcpip_inpkt+0x80>)
 801744e:	4819      	ldr	r0, [pc, #100]	; (80174b4 <tcpip_inpkt+0x84>)
 8017450:	f00c ff1e 	bl	8024290 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8017454:	2009      	movs	r0, #9
 8017456:	f000 fdc9 	bl	8017fec <memp_malloc>
 801745a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 801745c:	697b      	ldr	r3, [r7, #20]
 801745e:	2b00      	cmp	r3, #0
 8017460:	d102      	bne.n	8017468 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8017462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017466:	e01a      	b.n	801749e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8017468:	697b      	ldr	r3, [r7, #20]
 801746a:	2200      	movs	r2, #0
 801746c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 801746e:	697b      	ldr	r3, [r7, #20]
 8017470:	68fa      	ldr	r2, [r7, #12]
 8017472:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8017474:	697b      	ldr	r3, [r7, #20]
 8017476:	68ba      	ldr	r2, [r7, #8]
 8017478:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801747a:	697b      	ldr	r3, [r7, #20]
 801747c:	687a      	ldr	r2, [r7, #4]
 801747e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017480:	6979      	ldr	r1, [r7, #20]
 8017482:	4809      	ldr	r0, [pc, #36]	; (80174a8 <tcpip_inpkt+0x78>)
 8017484:	f00b fae0 	bl	8022a48 <sys_mbox_trypost>
 8017488:	4603      	mov	r3, r0
 801748a:	2b00      	cmp	r3, #0
 801748c:	d006      	beq.n	801749c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 801748e:	6979      	ldr	r1, [r7, #20]
 8017490:	2009      	movs	r0, #9
 8017492:	f000 fe21 	bl	80180d8 <memp_free>
    return ERR_MEM;
 8017496:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801749a:	e000      	b.n	801749e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 801749c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 801749e:	4618      	mov	r0, r3
 80174a0:	3718      	adds	r7, #24
 80174a2:	46bd      	mov	sp, r7
 80174a4:	bd80      	pop	{r7, pc}
 80174a6:	bf00      	nop
 80174a8:	200066a0 	.word	0x200066a0
 80174ac:	08026278 	.word	0x08026278
 80174b0:	080262f0 	.word	0x080262f0
 80174b4:	080262c8 	.word	0x080262c8

080174b8 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 80174b8:	b580      	push	{r7, lr}
 80174ba:	b082      	sub	sp, #8
 80174bc:	af00      	add	r7, sp, #0
 80174be:	6078      	str	r0, [r7, #4]
 80174c0:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 80174c2:	683b      	ldr	r3, [r7, #0]
 80174c4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80174c8:	f003 0318 	and.w	r3, r3, #24
 80174cc:	2b00      	cmp	r3, #0
 80174ce:	d006      	beq.n	80174de <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 80174d0:	4a08      	ldr	r2, [pc, #32]	; (80174f4 <tcpip_input+0x3c>)
 80174d2:	6839      	ldr	r1, [r7, #0]
 80174d4:	6878      	ldr	r0, [r7, #4]
 80174d6:	f7ff ffab 	bl	8017430 <tcpip_inpkt>
 80174da:	4603      	mov	r3, r0
 80174dc:	e005      	b.n	80174ea <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80174de:	4a06      	ldr	r2, [pc, #24]	; (80174f8 <tcpip_input+0x40>)
 80174e0:	6839      	ldr	r1, [r7, #0]
 80174e2:	6878      	ldr	r0, [r7, #4]
 80174e4:	f7ff ffa4 	bl	8017430 <tcpip_inpkt>
 80174e8:	4603      	mov	r3, r0
}
 80174ea:	4618      	mov	r0, r3
 80174ec:	3708      	adds	r7, #8
 80174ee:	46bd      	mov	sp, r7
 80174f0:	bd80      	pop	{r7, pc}
 80174f2:	bf00      	nop
 80174f4:	08022835 	.word	0x08022835
 80174f8:	0802173d 	.word	0x0802173d

080174fc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	6078      	str	r0, [r7, #4]
 8017504:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8017506:	4819      	ldr	r0, [pc, #100]	; (801756c <tcpip_try_callback+0x70>)
 8017508:	f00b fb13 	bl	8022b32 <sys_mbox_valid>
 801750c:	4603      	mov	r3, r0
 801750e:	2b00      	cmp	r3, #0
 8017510:	d106      	bne.n	8017520 <tcpip_try_callback+0x24>
 8017512:	4b17      	ldr	r3, [pc, #92]	; (8017570 <tcpip_try_callback+0x74>)
 8017514:	f240 125d 	movw	r2, #349	; 0x15d
 8017518:	4916      	ldr	r1, [pc, #88]	; (8017574 <tcpip_try_callback+0x78>)
 801751a:	4817      	ldr	r0, [pc, #92]	; (8017578 <tcpip_try_callback+0x7c>)
 801751c:	f00c feb8 	bl	8024290 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8017520:	2008      	movs	r0, #8
 8017522:	f000 fd63 	bl	8017fec <memp_malloc>
 8017526:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8017528:	68fb      	ldr	r3, [r7, #12]
 801752a:	2b00      	cmp	r3, #0
 801752c:	d102      	bne.n	8017534 <tcpip_try_callback+0x38>
    return ERR_MEM;
 801752e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017532:	e017      	b.n	8017564 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	2201      	movs	r2, #1
 8017538:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	687a      	ldr	r2, [r7, #4]
 801753e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8017540:	68fb      	ldr	r3, [r7, #12]
 8017542:	683a      	ldr	r2, [r7, #0]
 8017544:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8017546:	68f9      	ldr	r1, [r7, #12]
 8017548:	4808      	ldr	r0, [pc, #32]	; (801756c <tcpip_try_callback+0x70>)
 801754a:	f00b fa7d 	bl	8022a48 <sys_mbox_trypost>
 801754e:	4603      	mov	r3, r0
 8017550:	2b00      	cmp	r3, #0
 8017552:	d006      	beq.n	8017562 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8017554:	68f9      	ldr	r1, [r7, #12]
 8017556:	2008      	movs	r0, #8
 8017558:	f000 fdbe 	bl	80180d8 <memp_free>
    return ERR_MEM;
 801755c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8017560:	e000      	b.n	8017564 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8017562:	2300      	movs	r3, #0
}
 8017564:	4618      	mov	r0, r3
 8017566:	3710      	adds	r7, #16
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}
 801756c:	200066a0 	.word	0x200066a0
 8017570:	08026278 	.word	0x08026278
 8017574:	080262f0 	.word	0x080262f0
 8017578:	080262c8 	.word	0x080262c8

0801757c <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 801757c:	b580      	push	{r7, lr}
 801757e:	b084      	sub	sp, #16
 8017580:	af00      	add	r7, sp, #0
 8017582:	60f8      	str	r0, [r7, #12]
 8017584:	60b9      	str	r1, [r7, #8]
 8017586:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 8017588:	4806      	ldr	r0, [pc, #24]	; (80175a4 <tcpip_send_msg_wait_sem+0x28>)
 801758a:	f00b fbab 	bl	8022ce4 <sys_mutex_lock>
  fn(apimsg);
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	68b8      	ldr	r0, [r7, #8]
 8017592:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 8017594:	4803      	ldr	r0, [pc, #12]	; (80175a4 <tcpip_send_msg_wait_sem+0x28>)
 8017596:	f00b fbb4 	bl	8022d02 <sys_mutex_unlock>
  return ERR_OK;
 801759a:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 801759c:	4618      	mov	r0, r3
 801759e:	3710      	adds	r7, #16
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}
 80175a4:	200066a4 	.word	0x200066a4

080175a8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 80175a8:	b580      	push	{r7, lr}
 80175aa:	b084      	sub	sp, #16
 80175ac:	af02      	add	r7, sp, #8
 80175ae:	6078      	str	r0, [r7, #4]
 80175b0:	6039      	str	r1, [r7, #0]
  lwip_init();
 80175b2:	f000 f871 	bl	8017698 <lwip_init>

  tcpip_init_done = initfunc;
 80175b6:	4a17      	ldr	r2, [pc, #92]	; (8017614 <tcpip_init+0x6c>)
 80175b8:	687b      	ldr	r3, [r7, #4]
 80175ba:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 80175bc:	4a16      	ldr	r2, [pc, #88]	; (8017618 <tcpip_init+0x70>)
 80175be:	683b      	ldr	r3, [r7, #0]
 80175c0:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 80175c2:	2106      	movs	r1, #6
 80175c4:	4815      	ldr	r0, [pc, #84]	; (801761c <tcpip_init+0x74>)
 80175c6:	f00b fa0b 	bl	80229e0 <sys_mbox_new>
 80175ca:	4603      	mov	r3, r0
 80175cc:	2b00      	cmp	r3, #0
 80175ce:	d006      	beq.n	80175de <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 80175d0:	4b13      	ldr	r3, [pc, #76]	; (8017620 <tcpip_init+0x78>)
 80175d2:	f240 2261 	movw	r2, #609	; 0x261
 80175d6:	4913      	ldr	r1, [pc, #76]	; (8017624 <tcpip_init+0x7c>)
 80175d8:	4813      	ldr	r0, [pc, #76]	; (8017628 <tcpip_init+0x80>)
 80175da:	f00c fe59 	bl	8024290 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 80175de:	4813      	ldr	r0, [pc, #76]	; (801762c <tcpip_init+0x84>)
 80175e0:	f00b fb64 	bl	8022cac <sys_mutex_new>
 80175e4:	4603      	mov	r3, r0
 80175e6:	2b00      	cmp	r3, #0
 80175e8:	d006      	beq.n	80175f8 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 80175ea:	4b0d      	ldr	r3, [pc, #52]	; (8017620 <tcpip_init+0x78>)
 80175ec:	f240 2265 	movw	r2, #613	; 0x265
 80175f0:	490f      	ldr	r1, [pc, #60]	; (8017630 <tcpip_init+0x88>)
 80175f2:	480d      	ldr	r0, [pc, #52]	; (8017628 <tcpip_init+0x80>)
 80175f4:	f00c fe4c 	bl	8024290 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 80175f8:	2300      	movs	r3, #0
 80175fa:	9300      	str	r3, [sp, #0]
 80175fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017600:	2200      	movs	r2, #0
 8017602:	490c      	ldr	r1, [pc, #48]	; (8017634 <tcpip_init+0x8c>)
 8017604:	480c      	ldr	r0, [pc, #48]	; (8017638 <tcpip_init+0x90>)
 8017606:	f00b fb89 	bl	8022d1c <sys_thread_new>
}
 801760a:	bf00      	nop
 801760c:	3708      	adds	r7, #8
 801760e:	46bd      	mov	sp, r7
 8017610:	bd80      	pop	{r7, pc}
 8017612:	bf00      	nop
 8017614:	20006698 	.word	0x20006698
 8017618:	2000669c 	.word	0x2000669c
 801761c:	200066a0 	.word	0x200066a0
 8017620:	08026278 	.word	0x08026278
 8017624:	08026300 	.word	0x08026300
 8017628:	080262c8 	.word	0x080262c8
 801762c:	200066a4 	.word	0x200066a4
 8017630:	08026324 	.word	0x08026324
 8017634:	08017339 	.word	0x08017339
 8017638:	08026348 	.word	0x08026348

0801763c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 801763c:	b480      	push	{r7}
 801763e:	b083      	sub	sp, #12
 8017640:	af00      	add	r7, sp, #0
 8017642:	4603      	mov	r3, r0
 8017644:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8017646:	88fb      	ldrh	r3, [r7, #6]
 8017648:	021b      	lsls	r3, r3, #8
 801764a:	b21a      	sxth	r2, r3
 801764c:	88fb      	ldrh	r3, [r7, #6]
 801764e:	0a1b      	lsrs	r3, r3, #8
 8017650:	b29b      	uxth	r3, r3
 8017652:	b21b      	sxth	r3, r3
 8017654:	4313      	orrs	r3, r2
 8017656:	b21b      	sxth	r3, r3
 8017658:	b29b      	uxth	r3, r3
}
 801765a:	4618      	mov	r0, r3
 801765c:	370c      	adds	r7, #12
 801765e:	46bd      	mov	sp, r7
 8017660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017664:	4770      	bx	lr

08017666 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8017666:	b480      	push	{r7}
 8017668:	b083      	sub	sp, #12
 801766a:	af00      	add	r7, sp, #0
 801766c:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 801766e:	687b      	ldr	r3, [r7, #4]
 8017670:	061a      	lsls	r2, r3, #24
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	021b      	lsls	r3, r3, #8
 8017676:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 801767a:	431a      	orrs	r2, r3
 801767c:	687b      	ldr	r3, [r7, #4]
 801767e:	0a1b      	lsrs	r3, r3, #8
 8017680:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8017684:	431a      	orrs	r2, r3
 8017686:	687b      	ldr	r3, [r7, #4]
 8017688:	0e1b      	lsrs	r3, r3, #24
 801768a:	4313      	orrs	r3, r2
}
 801768c:	4618      	mov	r0, r3
 801768e:	370c      	adds	r7, #12
 8017690:	46bd      	mov	sp, r7
 8017692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017696:	4770      	bx	lr

08017698 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8017698:	b580      	push	{r7, lr}
 801769a:	b082      	sub	sp, #8
 801769c:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 801769e:	2300      	movs	r3, #0
 80176a0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 80176a2:	f00b faf5 	bl	8022c90 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 80176a6:	f000 f8d5 	bl	8017854 <mem_init>
  memp_init();
 80176aa:	f000 fc31 	bl	8017f10 <memp_init>
  pbuf_init();
  netif_init();
 80176ae:	f000 fd3d 	bl	801812c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 80176b2:	f008 f977 	bl	801f9a4 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 80176b6:	f001 fe5d 	bl	8019374 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 80176ba:	f008 f8b9 	bl	801f830 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 80176be:	bf00      	nop
 80176c0:	3708      	adds	r7, #8
 80176c2:	46bd      	mov	sp, r7
 80176c4:	bd80      	pop	{r7, pc}
	...

080176c8 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 80176c8:	b480      	push	{r7}
 80176ca:	b083      	sub	sp, #12
 80176cc:	af00      	add	r7, sp, #0
 80176ce:	4603      	mov	r3, r0
 80176d0:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 80176d2:	4b05      	ldr	r3, [pc, #20]	; (80176e8 <ptr_to_mem+0x20>)
 80176d4:	681a      	ldr	r2, [r3, #0]
 80176d6:	88fb      	ldrh	r3, [r7, #6]
 80176d8:	4413      	add	r3, r2
}
 80176da:	4618      	mov	r0, r3
 80176dc:	370c      	adds	r7, #12
 80176de:	46bd      	mov	sp, r7
 80176e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e4:	4770      	bx	lr
 80176e6:	bf00      	nop
 80176e8:	20008ed4 	.word	0x20008ed4

080176ec <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 80176ec:	b480      	push	{r7}
 80176ee:	b083      	sub	sp, #12
 80176f0:	af00      	add	r7, sp, #0
 80176f2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 80176f4:	4b05      	ldr	r3, [pc, #20]	; (801770c <mem_to_ptr+0x20>)
 80176f6:	681b      	ldr	r3, [r3, #0]
 80176f8:	687a      	ldr	r2, [r7, #4]
 80176fa:	1ad3      	subs	r3, r2, r3
 80176fc:	b29b      	uxth	r3, r3
}
 80176fe:	4618      	mov	r0, r3
 8017700:	370c      	adds	r7, #12
 8017702:	46bd      	mov	sp, r7
 8017704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017708:	4770      	bx	lr
 801770a:	bf00      	nop
 801770c:	20008ed4 	.word	0x20008ed4

08017710 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8017710:	b590      	push	{r4, r7, lr}
 8017712:	b085      	sub	sp, #20
 8017714:	af00      	add	r7, sp, #0
 8017716:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8017718:	4b45      	ldr	r3, [pc, #276]	; (8017830 <plug_holes+0x120>)
 801771a:	681b      	ldr	r3, [r3, #0]
 801771c:	687a      	ldr	r2, [r7, #4]
 801771e:	429a      	cmp	r2, r3
 8017720:	d206      	bcs.n	8017730 <plug_holes+0x20>
 8017722:	4b44      	ldr	r3, [pc, #272]	; (8017834 <plug_holes+0x124>)
 8017724:	f240 12df 	movw	r2, #479	; 0x1df
 8017728:	4943      	ldr	r1, [pc, #268]	; (8017838 <plug_holes+0x128>)
 801772a:	4844      	ldr	r0, [pc, #272]	; (801783c <plug_holes+0x12c>)
 801772c:	f00c fdb0 	bl	8024290 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8017730:	4b43      	ldr	r3, [pc, #268]	; (8017840 <plug_holes+0x130>)
 8017732:	681b      	ldr	r3, [r3, #0]
 8017734:	687a      	ldr	r2, [r7, #4]
 8017736:	429a      	cmp	r2, r3
 8017738:	d306      	bcc.n	8017748 <plug_holes+0x38>
 801773a:	4b3e      	ldr	r3, [pc, #248]	; (8017834 <plug_holes+0x124>)
 801773c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8017740:	4940      	ldr	r1, [pc, #256]	; (8017844 <plug_holes+0x134>)
 8017742:	483e      	ldr	r0, [pc, #248]	; (801783c <plug_holes+0x12c>)
 8017744:	f00c fda4 	bl	8024290 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8017748:	687b      	ldr	r3, [r7, #4]
 801774a:	791b      	ldrb	r3, [r3, #4]
 801774c:	2b00      	cmp	r3, #0
 801774e:	d006      	beq.n	801775e <plug_holes+0x4e>
 8017750:	4b38      	ldr	r3, [pc, #224]	; (8017834 <plug_holes+0x124>)
 8017752:	f240 12e1 	movw	r2, #481	; 0x1e1
 8017756:	493c      	ldr	r1, [pc, #240]	; (8017848 <plug_holes+0x138>)
 8017758:	4838      	ldr	r0, [pc, #224]	; (801783c <plug_holes+0x12c>)
 801775a:	f00c fd99 	bl	8024290 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	881b      	ldrh	r3, [r3, #0]
 8017762:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017766:	d906      	bls.n	8017776 <plug_holes+0x66>
 8017768:	4b32      	ldr	r3, [pc, #200]	; (8017834 <plug_holes+0x124>)
 801776a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 801776e:	4937      	ldr	r1, [pc, #220]	; (801784c <plug_holes+0x13c>)
 8017770:	4832      	ldr	r0, [pc, #200]	; (801783c <plug_holes+0x12c>)
 8017772:	f00c fd8d 	bl	8024290 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8017776:	687b      	ldr	r3, [r7, #4]
 8017778:	881b      	ldrh	r3, [r3, #0]
 801777a:	4618      	mov	r0, r3
 801777c:	f7ff ffa4 	bl	80176c8 <ptr_to_mem>
 8017780:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8017782:	687a      	ldr	r2, [r7, #4]
 8017784:	68fb      	ldr	r3, [r7, #12]
 8017786:	429a      	cmp	r2, r3
 8017788:	d024      	beq.n	80177d4 <plug_holes+0xc4>
 801778a:	68fb      	ldr	r3, [r7, #12]
 801778c:	791b      	ldrb	r3, [r3, #4]
 801778e:	2b00      	cmp	r3, #0
 8017790:	d120      	bne.n	80177d4 <plug_holes+0xc4>
 8017792:	4b2b      	ldr	r3, [pc, #172]	; (8017840 <plug_holes+0x130>)
 8017794:	681b      	ldr	r3, [r3, #0]
 8017796:	68fa      	ldr	r2, [r7, #12]
 8017798:	429a      	cmp	r2, r3
 801779a:	d01b      	beq.n	80177d4 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 801779c:	4b2c      	ldr	r3, [pc, #176]	; (8017850 <plug_holes+0x140>)
 801779e:	681b      	ldr	r3, [r3, #0]
 80177a0:	68fa      	ldr	r2, [r7, #12]
 80177a2:	429a      	cmp	r2, r3
 80177a4:	d102      	bne.n	80177ac <plug_holes+0x9c>
      lfree = mem;
 80177a6:	4a2a      	ldr	r2, [pc, #168]	; (8017850 <plug_holes+0x140>)
 80177a8:	687b      	ldr	r3, [r7, #4]
 80177aa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 80177ac:	68fb      	ldr	r3, [r7, #12]
 80177ae:	881a      	ldrh	r2, [r3, #0]
 80177b0:	687b      	ldr	r3, [r7, #4]
 80177b2:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 80177b4:	68fb      	ldr	r3, [r7, #12]
 80177b6:	881b      	ldrh	r3, [r3, #0]
 80177b8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 80177bc:	d00a      	beq.n	80177d4 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 80177be:	68fb      	ldr	r3, [r7, #12]
 80177c0:	881b      	ldrh	r3, [r3, #0]
 80177c2:	4618      	mov	r0, r3
 80177c4:	f7ff ff80 	bl	80176c8 <ptr_to_mem>
 80177c8:	4604      	mov	r4, r0
 80177ca:	6878      	ldr	r0, [r7, #4]
 80177cc:	f7ff ff8e 	bl	80176ec <mem_to_ptr>
 80177d0:	4603      	mov	r3, r0
 80177d2:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 80177d4:	687b      	ldr	r3, [r7, #4]
 80177d6:	885b      	ldrh	r3, [r3, #2]
 80177d8:	4618      	mov	r0, r3
 80177da:	f7ff ff75 	bl	80176c8 <ptr_to_mem>
 80177de:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 80177e0:	68ba      	ldr	r2, [r7, #8]
 80177e2:	687b      	ldr	r3, [r7, #4]
 80177e4:	429a      	cmp	r2, r3
 80177e6:	d01f      	beq.n	8017828 <plug_holes+0x118>
 80177e8:	68bb      	ldr	r3, [r7, #8]
 80177ea:	791b      	ldrb	r3, [r3, #4]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d11b      	bne.n	8017828 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 80177f0:	4b17      	ldr	r3, [pc, #92]	; (8017850 <plug_holes+0x140>)
 80177f2:	681b      	ldr	r3, [r3, #0]
 80177f4:	687a      	ldr	r2, [r7, #4]
 80177f6:	429a      	cmp	r2, r3
 80177f8:	d102      	bne.n	8017800 <plug_holes+0xf0>
      lfree = pmem;
 80177fa:	4a15      	ldr	r2, [pc, #84]	; (8017850 <plug_holes+0x140>)
 80177fc:	68bb      	ldr	r3, [r7, #8]
 80177fe:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8017800:	687b      	ldr	r3, [r7, #4]
 8017802:	881a      	ldrh	r2, [r3, #0]
 8017804:	68bb      	ldr	r3, [r7, #8]
 8017806:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8017808:	687b      	ldr	r3, [r7, #4]
 801780a:	881b      	ldrh	r3, [r3, #0]
 801780c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017810:	d00a      	beq.n	8017828 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	881b      	ldrh	r3, [r3, #0]
 8017816:	4618      	mov	r0, r3
 8017818:	f7ff ff56 	bl	80176c8 <ptr_to_mem>
 801781c:	4604      	mov	r4, r0
 801781e:	68b8      	ldr	r0, [r7, #8]
 8017820:	f7ff ff64 	bl	80176ec <mem_to_ptr>
 8017824:	4603      	mov	r3, r0
 8017826:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8017828:	bf00      	nop
 801782a:	3714      	adds	r7, #20
 801782c:	46bd      	mov	sp, r7
 801782e:	bd90      	pop	{r4, r7, pc}
 8017830:	20008ed4 	.word	0x20008ed4
 8017834:	08026358 	.word	0x08026358
 8017838:	08026388 	.word	0x08026388
 801783c:	080263a0 	.word	0x080263a0
 8017840:	20008ed8 	.word	0x20008ed8
 8017844:	080263c8 	.word	0x080263c8
 8017848:	080263e4 	.word	0x080263e4
 801784c:	08026400 	.word	0x08026400
 8017850:	20008ee0 	.word	0x20008ee0

08017854 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8017854:	b580      	push	{r7, lr}
 8017856:	b082      	sub	sp, #8
 8017858:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 801785a:	4b1f      	ldr	r3, [pc, #124]	; (80178d8 <mem_init+0x84>)
 801785c:	3303      	adds	r3, #3
 801785e:	f023 0303 	bic.w	r3, r3, #3
 8017862:	461a      	mov	r2, r3
 8017864:	4b1d      	ldr	r3, [pc, #116]	; (80178dc <mem_init+0x88>)
 8017866:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8017868:	4b1c      	ldr	r3, [pc, #112]	; (80178dc <mem_init+0x88>)
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 8017874:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8017876:	687b      	ldr	r3, [r7, #4]
 8017878:	2200      	movs	r2, #0
 801787a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801787c:	687b      	ldr	r3, [r7, #4]
 801787e:	2200      	movs	r2, #0
 8017880:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8017882:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 8017886:	f7ff ff1f 	bl	80176c8 <ptr_to_mem>
 801788a:	4603      	mov	r3, r0
 801788c:	4a14      	ldr	r2, [pc, #80]	; (80178e0 <mem_init+0x8c>)
 801788e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8017890:	4b13      	ldr	r3, [pc, #76]	; (80178e0 <mem_init+0x8c>)
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	2201      	movs	r2, #1
 8017896:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8017898:	4b11      	ldr	r3, [pc, #68]	; (80178e0 <mem_init+0x8c>)
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80178a0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 80178a2:	4b0f      	ldr	r3, [pc, #60]	; (80178e0 <mem_init+0x8c>)
 80178a4:	681b      	ldr	r3, [r3, #0]
 80178a6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 80178aa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 80178ac:	4b0b      	ldr	r3, [pc, #44]	; (80178dc <mem_init+0x88>)
 80178ae:	681b      	ldr	r3, [r3, #0]
 80178b0:	4a0c      	ldr	r2, [pc, #48]	; (80178e4 <mem_init+0x90>)
 80178b2:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 80178b4:	480c      	ldr	r0, [pc, #48]	; (80178e8 <mem_init+0x94>)
 80178b6:	f00b f9f9 	bl	8022cac <sys_mutex_new>
 80178ba:	4603      	mov	r3, r0
 80178bc:	2b00      	cmp	r3, #0
 80178be:	d006      	beq.n	80178ce <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 80178c0:	4b0a      	ldr	r3, [pc, #40]	; (80178ec <mem_init+0x98>)
 80178c2:	f240 221f 	movw	r2, #543	; 0x21f
 80178c6:	490a      	ldr	r1, [pc, #40]	; (80178f0 <mem_init+0x9c>)
 80178c8:	480a      	ldr	r0, [pc, #40]	; (80178f4 <mem_init+0xa0>)
 80178ca:	f00c fce1 	bl	8024290 <iprintf>
  }
}
 80178ce:	bf00      	nop
 80178d0:	3708      	adds	r7, #8
 80178d2:	46bd      	mov	sp, r7
 80178d4:	bd80      	pop	{r7, pc}
 80178d6:	bf00      	nop
 80178d8:	200066c0 	.word	0x200066c0
 80178dc:	20008ed4 	.word	0x20008ed4
 80178e0:	20008ed8 	.word	0x20008ed8
 80178e4:	20008ee0 	.word	0x20008ee0
 80178e8:	20008edc 	.word	0x20008edc
 80178ec:	08026358 	.word	0x08026358
 80178f0:	0802642c 	.word	0x0802642c
 80178f4:	080263a0 	.word	0x080263a0

080178f8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 80178f8:	b580      	push	{r7, lr}
 80178fa:	b086      	sub	sp, #24
 80178fc:	af00      	add	r7, sp, #0
 80178fe:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8017900:	6878      	ldr	r0, [r7, #4]
 8017902:	f7ff fef3 	bl	80176ec <mem_to_ptr>
 8017906:	4603      	mov	r3, r0
 8017908:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 801790a:	687b      	ldr	r3, [r7, #4]
 801790c:	881b      	ldrh	r3, [r3, #0]
 801790e:	4618      	mov	r0, r3
 8017910:	f7ff feda 	bl	80176c8 <ptr_to_mem>
 8017914:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	885b      	ldrh	r3, [r3, #2]
 801791a:	4618      	mov	r0, r3
 801791c:	f7ff fed4 	bl	80176c8 <ptr_to_mem>
 8017920:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8017922:	687b      	ldr	r3, [r7, #4]
 8017924:	881b      	ldrh	r3, [r3, #0]
 8017926:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 801792a:	d818      	bhi.n	801795e <mem_link_valid+0x66>
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	885b      	ldrh	r3, [r3, #2]
 8017930:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017934:	d813      	bhi.n	801795e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 801793a:	8afa      	ldrh	r2, [r7, #22]
 801793c:	429a      	cmp	r2, r3
 801793e:	d004      	beq.n	801794a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8017940:	68fb      	ldr	r3, [r7, #12]
 8017942:	881b      	ldrh	r3, [r3, #0]
 8017944:	8afa      	ldrh	r2, [r7, #22]
 8017946:	429a      	cmp	r2, r3
 8017948:	d109      	bne.n	801795e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 801794a:	4b08      	ldr	r3, [pc, #32]	; (801796c <mem_link_valid+0x74>)
 801794c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 801794e:	693a      	ldr	r2, [r7, #16]
 8017950:	429a      	cmp	r2, r3
 8017952:	d006      	beq.n	8017962 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8017954:	693b      	ldr	r3, [r7, #16]
 8017956:	885b      	ldrh	r3, [r3, #2]
 8017958:	8afa      	ldrh	r2, [r7, #22]
 801795a:	429a      	cmp	r2, r3
 801795c:	d001      	beq.n	8017962 <mem_link_valid+0x6a>
    return 0;
 801795e:	2300      	movs	r3, #0
 8017960:	e000      	b.n	8017964 <mem_link_valid+0x6c>
  }
  return 1;
 8017962:	2301      	movs	r3, #1
}
 8017964:	4618      	mov	r0, r3
 8017966:	3718      	adds	r7, #24
 8017968:	46bd      	mov	sp, r7
 801796a:	bd80      	pop	{r7, pc}
 801796c:	20008ed8 	.word	0x20008ed8

08017970 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8017970:	b580      	push	{r7, lr}
 8017972:	b088      	sub	sp, #32
 8017974:	af00      	add	r7, sp, #0
 8017976:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 8017978:	687b      	ldr	r3, [r7, #4]
 801797a:	2b00      	cmp	r3, #0
 801797c:	d070      	beq.n	8017a60 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	f003 0303 	and.w	r3, r3, #3
 8017984:	2b00      	cmp	r3, #0
 8017986:	d00d      	beq.n	80179a4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 8017988:	4b37      	ldr	r3, [pc, #220]	; (8017a68 <mem_free+0xf8>)
 801798a:	f240 2273 	movw	r2, #627	; 0x273
 801798e:	4937      	ldr	r1, [pc, #220]	; (8017a6c <mem_free+0xfc>)
 8017990:	4837      	ldr	r0, [pc, #220]	; (8017a70 <mem_free+0x100>)
 8017992:	f00c fc7d 	bl	8024290 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017996:	f00b f9e7 	bl	8022d68 <sys_arch_protect>
 801799a:	60f8      	str	r0, [r7, #12]
 801799c:	68f8      	ldr	r0, [r7, #12]
 801799e:	f00b f9f1 	bl	8022d84 <sys_arch_unprotect>
    return;
 80179a2:	e05e      	b.n	8017a62 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	3b08      	subs	r3, #8
 80179a8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 80179aa:	4b32      	ldr	r3, [pc, #200]	; (8017a74 <mem_free+0x104>)
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	69fa      	ldr	r2, [r7, #28]
 80179b0:	429a      	cmp	r2, r3
 80179b2:	d306      	bcc.n	80179c2 <mem_free+0x52>
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	f103 020c 	add.w	r2, r3, #12
 80179ba:	4b2f      	ldr	r3, [pc, #188]	; (8017a78 <mem_free+0x108>)
 80179bc:	681b      	ldr	r3, [r3, #0]
 80179be:	429a      	cmp	r2, r3
 80179c0:	d90d      	bls.n	80179de <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 80179c2:	4b29      	ldr	r3, [pc, #164]	; (8017a68 <mem_free+0xf8>)
 80179c4:	f240 227f 	movw	r2, #639	; 0x27f
 80179c8:	492c      	ldr	r1, [pc, #176]	; (8017a7c <mem_free+0x10c>)
 80179ca:	4829      	ldr	r0, [pc, #164]	; (8017a70 <mem_free+0x100>)
 80179cc:	f00c fc60 	bl	8024290 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80179d0:	f00b f9ca 	bl	8022d68 <sys_arch_protect>
 80179d4:	6138      	str	r0, [r7, #16]
 80179d6:	6938      	ldr	r0, [r7, #16]
 80179d8:	f00b f9d4 	bl	8022d84 <sys_arch_unprotect>
    return;
 80179dc:	e041      	b.n	8017a62 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80179de:	4828      	ldr	r0, [pc, #160]	; (8017a80 <mem_free+0x110>)
 80179e0:	f00b f980 	bl	8022ce4 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 80179e4:	69fb      	ldr	r3, [r7, #28]
 80179e6:	791b      	ldrb	r3, [r3, #4]
 80179e8:	2b00      	cmp	r3, #0
 80179ea:	d110      	bne.n	8017a0e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 80179ec:	4b1e      	ldr	r3, [pc, #120]	; (8017a68 <mem_free+0xf8>)
 80179ee:	f44f 7223 	mov.w	r2, #652	; 0x28c
 80179f2:	4924      	ldr	r1, [pc, #144]	; (8017a84 <mem_free+0x114>)
 80179f4:	481e      	ldr	r0, [pc, #120]	; (8017a70 <mem_free+0x100>)
 80179f6:	f00c fc4b 	bl	8024290 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80179fa:	4821      	ldr	r0, [pc, #132]	; (8017a80 <mem_free+0x110>)
 80179fc:	f00b f981 	bl	8022d02 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017a00:	f00b f9b2 	bl	8022d68 <sys_arch_protect>
 8017a04:	6178      	str	r0, [r7, #20]
 8017a06:	6978      	ldr	r0, [r7, #20]
 8017a08:	f00b f9bc 	bl	8022d84 <sys_arch_unprotect>
    return;
 8017a0c:	e029      	b.n	8017a62 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 8017a0e:	69f8      	ldr	r0, [r7, #28]
 8017a10:	f7ff ff72 	bl	80178f8 <mem_link_valid>
 8017a14:	4603      	mov	r3, r0
 8017a16:	2b00      	cmp	r3, #0
 8017a18:	d110      	bne.n	8017a3c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 8017a1a:	4b13      	ldr	r3, [pc, #76]	; (8017a68 <mem_free+0xf8>)
 8017a1c:	f240 2295 	movw	r2, #661	; 0x295
 8017a20:	4919      	ldr	r1, [pc, #100]	; (8017a88 <mem_free+0x118>)
 8017a22:	4813      	ldr	r0, [pc, #76]	; (8017a70 <mem_free+0x100>)
 8017a24:	f00c fc34 	bl	8024290 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 8017a28:	4815      	ldr	r0, [pc, #84]	; (8017a80 <mem_free+0x110>)
 8017a2a:	f00b f96a 	bl	8022d02 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017a2e:	f00b f99b 	bl	8022d68 <sys_arch_protect>
 8017a32:	61b8      	str	r0, [r7, #24]
 8017a34:	69b8      	ldr	r0, [r7, #24]
 8017a36:	f00b f9a5 	bl	8022d84 <sys_arch_unprotect>
    return;
 8017a3a:	e012      	b.n	8017a62 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 8017a3c:	69fb      	ldr	r3, [r7, #28]
 8017a3e:	2200      	movs	r2, #0
 8017a40:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 8017a42:	4b12      	ldr	r3, [pc, #72]	; (8017a8c <mem_free+0x11c>)
 8017a44:	681b      	ldr	r3, [r3, #0]
 8017a46:	69fa      	ldr	r2, [r7, #28]
 8017a48:	429a      	cmp	r2, r3
 8017a4a:	d202      	bcs.n	8017a52 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 8017a4c:	4a0f      	ldr	r2, [pc, #60]	; (8017a8c <mem_free+0x11c>)
 8017a4e:	69fb      	ldr	r3, [r7, #28]
 8017a50:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 8017a52:	69f8      	ldr	r0, [r7, #28]
 8017a54:	f7ff fe5c 	bl	8017710 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017a58:	4809      	ldr	r0, [pc, #36]	; (8017a80 <mem_free+0x110>)
 8017a5a:	f00b f952 	bl	8022d02 <sys_mutex_unlock>
 8017a5e:	e000      	b.n	8017a62 <mem_free+0xf2>
    return;
 8017a60:	bf00      	nop
}
 8017a62:	3720      	adds	r7, #32
 8017a64:	46bd      	mov	sp, r7
 8017a66:	bd80      	pop	{r7, pc}
 8017a68:	08026358 	.word	0x08026358
 8017a6c:	08026448 	.word	0x08026448
 8017a70:	080263a0 	.word	0x080263a0
 8017a74:	20008ed4 	.word	0x20008ed4
 8017a78:	20008ed8 	.word	0x20008ed8
 8017a7c:	0802646c 	.word	0x0802646c
 8017a80:	20008edc 	.word	0x20008edc
 8017a84:	08026488 	.word	0x08026488
 8017a88:	080264b0 	.word	0x080264b0
 8017a8c:	20008ee0 	.word	0x20008ee0

08017a90 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8017a90:	b580      	push	{r7, lr}
 8017a92:	b088      	sub	sp, #32
 8017a94:	af00      	add	r7, sp, #0
 8017a96:	6078      	str	r0, [r7, #4]
 8017a98:	460b      	mov	r3, r1
 8017a9a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8017a9c:	887b      	ldrh	r3, [r7, #2]
 8017a9e:	3303      	adds	r3, #3
 8017aa0:	b29b      	uxth	r3, r3
 8017aa2:	f023 0303 	bic.w	r3, r3, #3
 8017aa6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 8017aa8:	8bfb      	ldrh	r3, [r7, #30]
 8017aaa:	2b0b      	cmp	r3, #11
 8017aac:	d801      	bhi.n	8017ab2 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8017aae:	230c      	movs	r3, #12
 8017ab0:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8017ab2:	8bfb      	ldrh	r3, [r7, #30]
 8017ab4:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017ab8:	d803      	bhi.n	8017ac2 <mem_trim+0x32>
 8017aba:	8bfa      	ldrh	r2, [r7, #30]
 8017abc:	887b      	ldrh	r3, [r7, #2]
 8017abe:	429a      	cmp	r2, r3
 8017ac0:	d201      	bcs.n	8017ac6 <mem_trim+0x36>
    return NULL;
 8017ac2:	2300      	movs	r3, #0
 8017ac4:	e0d8      	b.n	8017c78 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 8017ac6:	4b6e      	ldr	r3, [pc, #440]	; (8017c80 <mem_trim+0x1f0>)
 8017ac8:	681b      	ldr	r3, [r3, #0]
 8017aca:	687a      	ldr	r2, [r7, #4]
 8017acc:	429a      	cmp	r2, r3
 8017ace:	d304      	bcc.n	8017ada <mem_trim+0x4a>
 8017ad0:	4b6c      	ldr	r3, [pc, #432]	; (8017c84 <mem_trim+0x1f4>)
 8017ad2:	681b      	ldr	r3, [r3, #0]
 8017ad4:	687a      	ldr	r2, [r7, #4]
 8017ad6:	429a      	cmp	r2, r3
 8017ad8:	d306      	bcc.n	8017ae8 <mem_trim+0x58>
 8017ada:	4b6b      	ldr	r3, [pc, #428]	; (8017c88 <mem_trim+0x1f8>)
 8017adc:	f240 22d1 	movw	r2, #721	; 0x2d1
 8017ae0:	496a      	ldr	r1, [pc, #424]	; (8017c8c <mem_trim+0x1fc>)
 8017ae2:	486b      	ldr	r0, [pc, #428]	; (8017c90 <mem_trim+0x200>)
 8017ae4:	f00c fbd4 	bl	8024290 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 8017ae8:	4b65      	ldr	r3, [pc, #404]	; (8017c80 <mem_trim+0x1f0>)
 8017aea:	681b      	ldr	r3, [r3, #0]
 8017aec:	687a      	ldr	r2, [r7, #4]
 8017aee:	429a      	cmp	r2, r3
 8017af0:	d304      	bcc.n	8017afc <mem_trim+0x6c>
 8017af2:	4b64      	ldr	r3, [pc, #400]	; (8017c84 <mem_trim+0x1f4>)
 8017af4:	681b      	ldr	r3, [r3, #0]
 8017af6:	687a      	ldr	r2, [r7, #4]
 8017af8:	429a      	cmp	r2, r3
 8017afa:	d307      	bcc.n	8017b0c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8017afc:	f00b f934 	bl	8022d68 <sys_arch_protect>
 8017b00:	60b8      	str	r0, [r7, #8]
 8017b02:	68b8      	ldr	r0, [r7, #8]
 8017b04:	f00b f93e 	bl	8022d84 <sys_arch_unprotect>
    return rmem;
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	e0b5      	b.n	8017c78 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8017b0c:	687b      	ldr	r3, [r7, #4]
 8017b0e:	3b08      	subs	r3, #8
 8017b10:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 8017b12:	69b8      	ldr	r0, [r7, #24]
 8017b14:	f7ff fdea 	bl	80176ec <mem_to_ptr>
 8017b18:	4603      	mov	r3, r0
 8017b1a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 8017b1c:	69bb      	ldr	r3, [r7, #24]
 8017b1e:	881a      	ldrh	r2, [r3, #0]
 8017b20:	8afb      	ldrh	r3, [r7, #22]
 8017b22:	1ad3      	subs	r3, r2, r3
 8017b24:	b29b      	uxth	r3, r3
 8017b26:	3b08      	subs	r3, #8
 8017b28:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 8017b2a:	8bfa      	ldrh	r2, [r7, #30]
 8017b2c:	8abb      	ldrh	r3, [r7, #20]
 8017b2e:	429a      	cmp	r2, r3
 8017b30:	d906      	bls.n	8017b40 <mem_trim+0xb0>
 8017b32:	4b55      	ldr	r3, [pc, #340]	; (8017c88 <mem_trim+0x1f8>)
 8017b34:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 8017b38:	4956      	ldr	r1, [pc, #344]	; (8017c94 <mem_trim+0x204>)
 8017b3a:	4855      	ldr	r0, [pc, #340]	; (8017c90 <mem_trim+0x200>)
 8017b3c:	f00c fba8 	bl	8024290 <iprintf>
  if (newsize > size) {
 8017b40:	8bfa      	ldrh	r2, [r7, #30]
 8017b42:	8abb      	ldrh	r3, [r7, #20]
 8017b44:	429a      	cmp	r2, r3
 8017b46:	d901      	bls.n	8017b4c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 8017b48:	2300      	movs	r3, #0
 8017b4a:	e095      	b.n	8017c78 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 8017b4c:	8bfa      	ldrh	r2, [r7, #30]
 8017b4e:	8abb      	ldrh	r3, [r7, #20]
 8017b50:	429a      	cmp	r2, r3
 8017b52:	d101      	bne.n	8017b58 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 8017b54:	687b      	ldr	r3, [r7, #4]
 8017b56:	e08f      	b.n	8017c78 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8017b58:	484f      	ldr	r0, [pc, #316]	; (8017c98 <mem_trim+0x208>)
 8017b5a:	f00b f8c3 	bl	8022ce4 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8017b5e:	69bb      	ldr	r3, [r7, #24]
 8017b60:	881b      	ldrh	r3, [r3, #0]
 8017b62:	4618      	mov	r0, r3
 8017b64:	f7ff fdb0 	bl	80176c8 <ptr_to_mem>
 8017b68:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8017b6a:	693b      	ldr	r3, [r7, #16]
 8017b6c:	791b      	ldrb	r3, [r3, #4]
 8017b6e:	2b00      	cmp	r3, #0
 8017b70:	d13f      	bne.n	8017bf2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017b72:	69bb      	ldr	r3, [r7, #24]
 8017b74:	881b      	ldrh	r3, [r3, #0]
 8017b76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017b7a:	d106      	bne.n	8017b8a <mem_trim+0xfa>
 8017b7c:	4b42      	ldr	r3, [pc, #264]	; (8017c88 <mem_trim+0x1f8>)
 8017b7e:	f240 22f5 	movw	r2, #757	; 0x2f5
 8017b82:	4946      	ldr	r1, [pc, #280]	; (8017c9c <mem_trim+0x20c>)
 8017b84:	4842      	ldr	r0, [pc, #264]	; (8017c90 <mem_trim+0x200>)
 8017b86:	f00c fb83 	bl	8024290 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8017b8a:	693b      	ldr	r3, [r7, #16]
 8017b8c:	881b      	ldrh	r3, [r3, #0]
 8017b8e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017b90:	8afa      	ldrh	r2, [r7, #22]
 8017b92:	8bfb      	ldrh	r3, [r7, #30]
 8017b94:	4413      	add	r3, r2
 8017b96:	b29b      	uxth	r3, r3
 8017b98:	3308      	adds	r3, #8
 8017b9a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8017b9c:	4b40      	ldr	r3, [pc, #256]	; (8017ca0 <mem_trim+0x210>)
 8017b9e:	681b      	ldr	r3, [r3, #0]
 8017ba0:	693a      	ldr	r2, [r7, #16]
 8017ba2:	429a      	cmp	r2, r3
 8017ba4:	d106      	bne.n	8017bb4 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 8017ba6:	89fb      	ldrh	r3, [r7, #14]
 8017ba8:	4618      	mov	r0, r3
 8017baa:	f7ff fd8d 	bl	80176c8 <ptr_to_mem>
 8017bae:	4603      	mov	r3, r0
 8017bb0:	4a3b      	ldr	r2, [pc, #236]	; (8017ca0 <mem_trim+0x210>)
 8017bb2:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8017bb4:	89fb      	ldrh	r3, [r7, #14]
 8017bb6:	4618      	mov	r0, r3
 8017bb8:	f7ff fd86 	bl	80176c8 <ptr_to_mem>
 8017bbc:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8017bbe:	693b      	ldr	r3, [r7, #16]
 8017bc0:	2200      	movs	r2, #0
 8017bc2:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8017bc4:	693b      	ldr	r3, [r7, #16]
 8017bc6:	89ba      	ldrh	r2, [r7, #12]
 8017bc8:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8017bca:	693b      	ldr	r3, [r7, #16]
 8017bcc:	8afa      	ldrh	r2, [r7, #22]
 8017bce:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8017bd0:	69bb      	ldr	r3, [r7, #24]
 8017bd2:	89fa      	ldrh	r2, [r7, #14]
 8017bd4:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017bd6:	693b      	ldr	r3, [r7, #16]
 8017bd8:	881b      	ldrh	r3, [r3, #0]
 8017bda:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017bde:	d047      	beq.n	8017c70 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017be0:	693b      	ldr	r3, [r7, #16]
 8017be2:	881b      	ldrh	r3, [r3, #0]
 8017be4:	4618      	mov	r0, r3
 8017be6:	f7ff fd6f 	bl	80176c8 <ptr_to_mem>
 8017bea:	4602      	mov	r2, r0
 8017bec:	89fb      	ldrh	r3, [r7, #14]
 8017bee:	8053      	strh	r3, [r2, #2]
 8017bf0:	e03e      	b.n	8017c70 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8017bf2:	8bfb      	ldrh	r3, [r7, #30]
 8017bf4:	f103 0214 	add.w	r2, r3, #20
 8017bf8:	8abb      	ldrh	r3, [r7, #20]
 8017bfa:	429a      	cmp	r2, r3
 8017bfc:	d838      	bhi.n	8017c70 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8017bfe:	8afa      	ldrh	r2, [r7, #22]
 8017c00:	8bfb      	ldrh	r3, [r7, #30]
 8017c02:	4413      	add	r3, r2
 8017c04:	b29b      	uxth	r3, r3
 8017c06:	3308      	adds	r3, #8
 8017c08:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8017c0a:	69bb      	ldr	r3, [r7, #24]
 8017c0c:	881b      	ldrh	r3, [r3, #0]
 8017c0e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017c12:	d106      	bne.n	8017c22 <mem_trim+0x192>
 8017c14:	4b1c      	ldr	r3, [pc, #112]	; (8017c88 <mem_trim+0x1f8>)
 8017c16:	f240 3216 	movw	r2, #790	; 0x316
 8017c1a:	4920      	ldr	r1, [pc, #128]	; (8017c9c <mem_trim+0x20c>)
 8017c1c:	481c      	ldr	r0, [pc, #112]	; (8017c90 <mem_trim+0x200>)
 8017c1e:	f00c fb37 	bl	8024290 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8017c22:	89fb      	ldrh	r3, [r7, #14]
 8017c24:	4618      	mov	r0, r3
 8017c26:	f7ff fd4f 	bl	80176c8 <ptr_to_mem>
 8017c2a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8017c2c:	4b1c      	ldr	r3, [pc, #112]	; (8017ca0 <mem_trim+0x210>)
 8017c2e:	681b      	ldr	r3, [r3, #0]
 8017c30:	693a      	ldr	r2, [r7, #16]
 8017c32:	429a      	cmp	r2, r3
 8017c34:	d202      	bcs.n	8017c3c <mem_trim+0x1ac>
      lfree = mem2;
 8017c36:	4a1a      	ldr	r2, [pc, #104]	; (8017ca0 <mem_trim+0x210>)
 8017c38:	693b      	ldr	r3, [r7, #16]
 8017c3a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8017c3c:	693b      	ldr	r3, [r7, #16]
 8017c3e:	2200      	movs	r2, #0
 8017c40:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8017c42:	69bb      	ldr	r3, [r7, #24]
 8017c44:	881a      	ldrh	r2, [r3, #0]
 8017c46:	693b      	ldr	r3, [r7, #16]
 8017c48:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8017c4a:	693b      	ldr	r3, [r7, #16]
 8017c4c:	8afa      	ldrh	r2, [r7, #22]
 8017c4e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8017c50:	69bb      	ldr	r3, [r7, #24]
 8017c52:	89fa      	ldrh	r2, [r7, #14]
 8017c54:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8017c56:	693b      	ldr	r3, [r7, #16]
 8017c58:	881b      	ldrh	r3, [r3, #0]
 8017c5a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017c5e:	d007      	beq.n	8017c70 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8017c60:	693b      	ldr	r3, [r7, #16]
 8017c62:	881b      	ldrh	r3, [r3, #0]
 8017c64:	4618      	mov	r0, r3
 8017c66:	f7ff fd2f 	bl	80176c8 <ptr_to_mem>
 8017c6a:	4602      	mov	r2, r0
 8017c6c:	89fb      	ldrh	r3, [r7, #14]
 8017c6e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8017c70:	4809      	ldr	r0, [pc, #36]	; (8017c98 <mem_trim+0x208>)
 8017c72:	f00b f846 	bl	8022d02 <sys_mutex_unlock>
  return rmem;
 8017c76:	687b      	ldr	r3, [r7, #4]
}
 8017c78:	4618      	mov	r0, r3
 8017c7a:	3720      	adds	r7, #32
 8017c7c:	46bd      	mov	sp, r7
 8017c7e:	bd80      	pop	{r7, pc}
 8017c80:	20008ed4 	.word	0x20008ed4
 8017c84:	20008ed8 	.word	0x20008ed8
 8017c88:	08026358 	.word	0x08026358
 8017c8c:	080264e4 	.word	0x080264e4
 8017c90:	080263a0 	.word	0x080263a0
 8017c94:	080264fc 	.word	0x080264fc
 8017c98:	20008edc 	.word	0x20008edc
 8017c9c:	0802651c 	.word	0x0802651c
 8017ca0:	20008ee0 	.word	0x20008ee0

08017ca4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8017ca4:	b580      	push	{r7, lr}
 8017ca6:	b088      	sub	sp, #32
 8017ca8:	af00      	add	r7, sp, #0
 8017caa:	4603      	mov	r3, r0
 8017cac:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8017cae:	88fb      	ldrh	r3, [r7, #6]
 8017cb0:	2b00      	cmp	r3, #0
 8017cb2:	d101      	bne.n	8017cb8 <mem_malloc+0x14>
    return NULL;
 8017cb4:	2300      	movs	r3, #0
 8017cb6:	e0e2      	b.n	8017e7e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8017cb8:	88fb      	ldrh	r3, [r7, #6]
 8017cba:	3303      	adds	r3, #3
 8017cbc:	b29b      	uxth	r3, r3
 8017cbe:	f023 0303 	bic.w	r3, r3, #3
 8017cc2:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8017cc4:	8bbb      	ldrh	r3, [r7, #28]
 8017cc6:	2b0b      	cmp	r3, #11
 8017cc8:	d801      	bhi.n	8017cce <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8017cca:	230c      	movs	r3, #12
 8017ccc:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8017cce:	8bbb      	ldrh	r3, [r7, #28]
 8017cd0:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017cd4:	d803      	bhi.n	8017cde <mem_malloc+0x3a>
 8017cd6:	8bba      	ldrh	r2, [r7, #28]
 8017cd8:	88fb      	ldrh	r3, [r7, #6]
 8017cda:	429a      	cmp	r2, r3
 8017cdc:	d201      	bcs.n	8017ce2 <mem_malloc+0x3e>
    return NULL;
 8017cde:	2300      	movs	r3, #0
 8017ce0:	e0cd      	b.n	8017e7e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8017ce2:	4869      	ldr	r0, [pc, #420]	; (8017e88 <mem_malloc+0x1e4>)
 8017ce4:	f00a fffe 	bl	8022ce4 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017ce8:	4b68      	ldr	r3, [pc, #416]	; (8017e8c <mem_malloc+0x1e8>)
 8017cea:	681b      	ldr	r3, [r3, #0]
 8017cec:	4618      	mov	r0, r3
 8017cee:	f7ff fcfd 	bl	80176ec <mem_to_ptr>
 8017cf2:	4603      	mov	r3, r0
 8017cf4:	83fb      	strh	r3, [r7, #30]
 8017cf6:	e0b7      	b.n	8017e68 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8017cf8:	8bfb      	ldrh	r3, [r7, #30]
 8017cfa:	4618      	mov	r0, r3
 8017cfc:	f7ff fce4 	bl	80176c8 <ptr_to_mem>
 8017d00:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8017d02:	697b      	ldr	r3, [r7, #20]
 8017d04:	791b      	ldrb	r3, [r3, #4]
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	f040 80a7 	bne.w	8017e5a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8017d0c:	697b      	ldr	r3, [r7, #20]
 8017d0e:	881b      	ldrh	r3, [r3, #0]
 8017d10:	461a      	mov	r2, r3
 8017d12:	8bfb      	ldrh	r3, [r7, #30]
 8017d14:	1ad3      	subs	r3, r2, r3
 8017d16:	f1a3 0208 	sub.w	r2, r3, #8
 8017d1a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8017d1c:	429a      	cmp	r2, r3
 8017d1e:	f0c0 809c 	bcc.w	8017e5a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8017d22:	697b      	ldr	r3, [r7, #20]
 8017d24:	881b      	ldrh	r3, [r3, #0]
 8017d26:	461a      	mov	r2, r3
 8017d28:	8bfb      	ldrh	r3, [r7, #30]
 8017d2a:	1ad3      	subs	r3, r2, r3
 8017d2c:	f1a3 0208 	sub.w	r2, r3, #8
 8017d30:	8bbb      	ldrh	r3, [r7, #28]
 8017d32:	3314      	adds	r3, #20
 8017d34:	429a      	cmp	r2, r3
 8017d36:	d333      	bcc.n	8017da0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8017d38:	8bfa      	ldrh	r2, [r7, #30]
 8017d3a:	8bbb      	ldrh	r3, [r7, #28]
 8017d3c:	4413      	add	r3, r2
 8017d3e:	b29b      	uxth	r3, r3
 8017d40:	3308      	adds	r3, #8
 8017d42:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8017d44:	8a7b      	ldrh	r3, [r7, #18]
 8017d46:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017d4a:	d106      	bne.n	8017d5a <mem_malloc+0xb6>
 8017d4c:	4b50      	ldr	r3, [pc, #320]	; (8017e90 <mem_malloc+0x1ec>)
 8017d4e:	f240 3287 	movw	r2, #903	; 0x387
 8017d52:	4950      	ldr	r1, [pc, #320]	; (8017e94 <mem_malloc+0x1f0>)
 8017d54:	4850      	ldr	r0, [pc, #320]	; (8017e98 <mem_malloc+0x1f4>)
 8017d56:	f00c fa9b 	bl	8024290 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8017d5a:	8a7b      	ldrh	r3, [r7, #18]
 8017d5c:	4618      	mov	r0, r3
 8017d5e:	f7ff fcb3 	bl	80176c8 <ptr_to_mem>
 8017d62:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8017d64:	68fb      	ldr	r3, [r7, #12]
 8017d66:	2200      	movs	r2, #0
 8017d68:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8017d6a:	697b      	ldr	r3, [r7, #20]
 8017d6c:	881a      	ldrh	r2, [r3, #0]
 8017d6e:	68fb      	ldr	r3, [r7, #12]
 8017d70:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	8bfa      	ldrh	r2, [r7, #30]
 8017d76:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8017d78:	697b      	ldr	r3, [r7, #20]
 8017d7a:	8a7a      	ldrh	r2, [r7, #18]
 8017d7c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	2201      	movs	r2, #1
 8017d82:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8017d84:	68fb      	ldr	r3, [r7, #12]
 8017d86:	881b      	ldrh	r3, [r3, #0]
 8017d88:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 8017d8c:	d00b      	beq.n	8017da6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8017d8e:	68fb      	ldr	r3, [r7, #12]
 8017d90:	881b      	ldrh	r3, [r3, #0]
 8017d92:	4618      	mov	r0, r3
 8017d94:	f7ff fc98 	bl	80176c8 <ptr_to_mem>
 8017d98:	4602      	mov	r2, r0
 8017d9a:	8a7b      	ldrh	r3, [r7, #18]
 8017d9c:	8053      	strh	r3, [r2, #2]
 8017d9e:	e002      	b.n	8017da6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	2201      	movs	r2, #1
 8017da4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8017da6:	4b39      	ldr	r3, [pc, #228]	; (8017e8c <mem_malloc+0x1e8>)
 8017da8:	681b      	ldr	r3, [r3, #0]
 8017daa:	697a      	ldr	r2, [r7, #20]
 8017dac:	429a      	cmp	r2, r3
 8017dae:	d127      	bne.n	8017e00 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 8017db0:	4b36      	ldr	r3, [pc, #216]	; (8017e8c <mem_malloc+0x1e8>)
 8017db2:	681b      	ldr	r3, [r3, #0]
 8017db4:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8017db6:	e005      	b.n	8017dc4 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8017db8:	69bb      	ldr	r3, [r7, #24]
 8017dba:	881b      	ldrh	r3, [r3, #0]
 8017dbc:	4618      	mov	r0, r3
 8017dbe:	f7ff fc83 	bl	80176c8 <ptr_to_mem>
 8017dc2:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8017dc4:	69bb      	ldr	r3, [r7, #24]
 8017dc6:	791b      	ldrb	r3, [r3, #4]
 8017dc8:	2b00      	cmp	r3, #0
 8017dca:	d004      	beq.n	8017dd6 <mem_malloc+0x132>
 8017dcc:	4b33      	ldr	r3, [pc, #204]	; (8017e9c <mem_malloc+0x1f8>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	69ba      	ldr	r2, [r7, #24]
 8017dd2:	429a      	cmp	r2, r3
 8017dd4:	d1f0      	bne.n	8017db8 <mem_malloc+0x114>
          }
          lfree = cur;
 8017dd6:	4a2d      	ldr	r2, [pc, #180]	; (8017e8c <mem_malloc+0x1e8>)
 8017dd8:	69bb      	ldr	r3, [r7, #24]
 8017dda:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8017ddc:	4b2b      	ldr	r3, [pc, #172]	; (8017e8c <mem_malloc+0x1e8>)
 8017dde:	681a      	ldr	r2, [r3, #0]
 8017de0:	4b2e      	ldr	r3, [pc, #184]	; (8017e9c <mem_malloc+0x1f8>)
 8017de2:	681b      	ldr	r3, [r3, #0]
 8017de4:	429a      	cmp	r2, r3
 8017de6:	d00b      	beq.n	8017e00 <mem_malloc+0x15c>
 8017de8:	4b28      	ldr	r3, [pc, #160]	; (8017e8c <mem_malloc+0x1e8>)
 8017dea:	681b      	ldr	r3, [r3, #0]
 8017dec:	791b      	ldrb	r3, [r3, #4]
 8017dee:	2b00      	cmp	r3, #0
 8017df0:	d006      	beq.n	8017e00 <mem_malloc+0x15c>
 8017df2:	4b27      	ldr	r3, [pc, #156]	; (8017e90 <mem_malloc+0x1ec>)
 8017df4:	f240 32b5 	movw	r2, #949	; 0x3b5
 8017df8:	4929      	ldr	r1, [pc, #164]	; (8017ea0 <mem_malloc+0x1fc>)
 8017dfa:	4827      	ldr	r0, [pc, #156]	; (8017e98 <mem_malloc+0x1f4>)
 8017dfc:	f00c fa48 	bl	8024290 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8017e00:	4821      	ldr	r0, [pc, #132]	; (8017e88 <mem_malloc+0x1e4>)
 8017e02:	f00a ff7e 	bl	8022d02 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8017e06:	8bba      	ldrh	r2, [r7, #28]
 8017e08:	697b      	ldr	r3, [r7, #20]
 8017e0a:	4413      	add	r3, r2
 8017e0c:	3308      	adds	r3, #8
 8017e0e:	4a23      	ldr	r2, [pc, #140]	; (8017e9c <mem_malloc+0x1f8>)
 8017e10:	6812      	ldr	r2, [r2, #0]
 8017e12:	4293      	cmp	r3, r2
 8017e14:	d906      	bls.n	8017e24 <mem_malloc+0x180>
 8017e16:	4b1e      	ldr	r3, [pc, #120]	; (8017e90 <mem_malloc+0x1ec>)
 8017e18:	f240 32b9 	movw	r2, #953	; 0x3b9
 8017e1c:	4921      	ldr	r1, [pc, #132]	; (8017ea4 <mem_malloc+0x200>)
 8017e1e:	481e      	ldr	r0, [pc, #120]	; (8017e98 <mem_malloc+0x1f4>)
 8017e20:	f00c fa36 	bl	8024290 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8017e24:	697b      	ldr	r3, [r7, #20]
 8017e26:	f003 0303 	and.w	r3, r3, #3
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d006      	beq.n	8017e3c <mem_malloc+0x198>
 8017e2e:	4b18      	ldr	r3, [pc, #96]	; (8017e90 <mem_malloc+0x1ec>)
 8017e30:	f240 32bb 	movw	r2, #955	; 0x3bb
 8017e34:	491c      	ldr	r1, [pc, #112]	; (8017ea8 <mem_malloc+0x204>)
 8017e36:	4818      	ldr	r0, [pc, #96]	; (8017e98 <mem_malloc+0x1f4>)
 8017e38:	f00c fa2a 	bl	8024290 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8017e3c:	697b      	ldr	r3, [r7, #20]
 8017e3e:	f003 0303 	and.w	r3, r3, #3
 8017e42:	2b00      	cmp	r3, #0
 8017e44:	d006      	beq.n	8017e54 <mem_malloc+0x1b0>
 8017e46:	4b12      	ldr	r3, [pc, #72]	; (8017e90 <mem_malloc+0x1ec>)
 8017e48:	f240 32bd 	movw	r2, #957	; 0x3bd
 8017e4c:	4917      	ldr	r1, [pc, #92]	; (8017eac <mem_malloc+0x208>)
 8017e4e:	4812      	ldr	r0, [pc, #72]	; (8017e98 <mem_malloc+0x1f4>)
 8017e50:	f00c fa1e 	bl	8024290 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8017e54:	697b      	ldr	r3, [r7, #20]
 8017e56:	3308      	adds	r3, #8
 8017e58:	e011      	b.n	8017e7e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 8017e5a:	8bfb      	ldrh	r3, [r7, #30]
 8017e5c:	4618      	mov	r0, r3
 8017e5e:	f7ff fc33 	bl	80176c8 <ptr_to_mem>
 8017e62:	4603      	mov	r3, r0
 8017e64:	881b      	ldrh	r3, [r3, #0]
 8017e66:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8017e68:	8bfa      	ldrh	r2, [r7, #30]
 8017e6a:	8bbb      	ldrh	r3, [r7, #28]
 8017e6c:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 8017e70:	429a      	cmp	r2, r3
 8017e72:	f4ff af41 	bcc.w	8017cf8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8017e76:	4804      	ldr	r0, [pc, #16]	; (8017e88 <mem_malloc+0x1e4>)
 8017e78:	f00a ff43 	bl	8022d02 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8017e7c:	2300      	movs	r3, #0
}
 8017e7e:	4618      	mov	r0, r3
 8017e80:	3720      	adds	r7, #32
 8017e82:	46bd      	mov	sp, r7
 8017e84:	bd80      	pop	{r7, pc}
 8017e86:	bf00      	nop
 8017e88:	20008edc 	.word	0x20008edc
 8017e8c:	20008ee0 	.word	0x20008ee0
 8017e90:	08026358 	.word	0x08026358
 8017e94:	0802651c 	.word	0x0802651c
 8017e98:	080263a0 	.word	0x080263a0
 8017e9c:	20008ed8 	.word	0x20008ed8
 8017ea0:	08026530 	.word	0x08026530
 8017ea4:	0802654c 	.word	0x0802654c
 8017ea8:	0802657c 	.word	0x0802657c
 8017eac:	080265ac 	.word	0x080265ac

08017eb0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8017eb0:	b480      	push	{r7}
 8017eb2:	b085      	sub	sp, #20
 8017eb4:	af00      	add	r7, sp, #0
 8017eb6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	689b      	ldr	r3, [r3, #8]
 8017ebc:	2200      	movs	r2, #0
 8017ebe:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8017ec0:	687b      	ldr	r3, [r7, #4]
 8017ec2:	685b      	ldr	r3, [r3, #4]
 8017ec4:	3303      	adds	r3, #3
 8017ec6:	f023 0303 	bic.w	r3, r3, #3
 8017eca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8017ecc:	2300      	movs	r3, #0
 8017ece:	60fb      	str	r3, [r7, #12]
 8017ed0:	e011      	b.n	8017ef6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8017ed2:	687b      	ldr	r3, [r7, #4]
 8017ed4:	689b      	ldr	r3, [r3, #8]
 8017ed6:	681a      	ldr	r2, [r3, #0]
 8017ed8:	68bb      	ldr	r3, [r7, #8]
 8017eda:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8017edc:	687b      	ldr	r3, [r7, #4]
 8017ede:	689b      	ldr	r3, [r3, #8]
 8017ee0:	68ba      	ldr	r2, [r7, #8]
 8017ee2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8017ee4:	687b      	ldr	r3, [r7, #4]
 8017ee6:	881b      	ldrh	r3, [r3, #0]
 8017ee8:	461a      	mov	r2, r3
 8017eea:	68bb      	ldr	r3, [r7, #8]
 8017eec:	4413      	add	r3, r2
 8017eee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8017ef0:	68fb      	ldr	r3, [r7, #12]
 8017ef2:	3301      	adds	r3, #1
 8017ef4:	60fb      	str	r3, [r7, #12]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	885b      	ldrh	r3, [r3, #2]
 8017efa:	461a      	mov	r2, r3
 8017efc:	68fb      	ldr	r3, [r7, #12]
 8017efe:	4293      	cmp	r3, r2
 8017f00:	dbe7      	blt.n	8017ed2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8017f02:	bf00      	nop
 8017f04:	bf00      	nop
 8017f06:	3714      	adds	r7, #20
 8017f08:	46bd      	mov	sp, r7
 8017f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f0e:	4770      	bx	lr

08017f10 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8017f10:	b580      	push	{r7, lr}
 8017f12:	b082      	sub	sp, #8
 8017f14:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017f16:	2300      	movs	r3, #0
 8017f18:	80fb      	strh	r3, [r7, #6]
 8017f1a:	e009      	b.n	8017f30 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8017f1c:	88fb      	ldrh	r3, [r7, #6]
 8017f1e:	4a08      	ldr	r2, [pc, #32]	; (8017f40 <memp_init+0x30>)
 8017f20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017f24:	4618      	mov	r0, r3
 8017f26:	f7ff ffc3 	bl	8017eb0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8017f2a:	88fb      	ldrh	r3, [r7, #6]
 8017f2c:	3301      	adds	r3, #1
 8017f2e:	80fb      	strh	r3, [r7, #6]
 8017f30:	88fb      	ldrh	r3, [r7, #6]
 8017f32:	2b0c      	cmp	r3, #12
 8017f34:	d9f2      	bls.n	8017f1c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8017f36:	bf00      	nop
 8017f38:	bf00      	nop
 8017f3a:	3708      	adds	r7, #8
 8017f3c:	46bd      	mov	sp, r7
 8017f3e:	bd80      	pop	{r7, pc}
 8017f40:	08028e14 	.word	0x08028e14

08017f44 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017f44:	b580      	push	{r7, lr}
 8017f46:	b084      	sub	sp, #16
 8017f48:	af00      	add	r7, sp, #0
 8017f4a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8017f4c:	f00a ff0c 	bl	8022d68 <sys_arch_protect>
 8017f50:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8017f52:	687b      	ldr	r3, [r7, #4]
 8017f54:	689b      	ldr	r3, [r3, #8]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8017f5a:	68bb      	ldr	r3, [r7, #8]
 8017f5c:	2b00      	cmp	r3, #0
 8017f5e:	d015      	beq.n	8017f8c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8017f60:	687b      	ldr	r3, [r7, #4]
 8017f62:	689b      	ldr	r3, [r3, #8]
 8017f64:	68ba      	ldr	r2, [r7, #8]
 8017f66:	6812      	ldr	r2, [r2, #0]
 8017f68:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8017f6a:	68bb      	ldr	r3, [r7, #8]
 8017f6c:	f003 0303 	and.w	r3, r3, #3
 8017f70:	2b00      	cmp	r3, #0
 8017f72:	d006      	beq.n	8017f82 <do_memp_malloc_pool+0x3e>
 8017f74:	4b09      	ldr	r3, [pc, #36]	; (8017f9c <do_memp_malloc_pool+0x58>)
 8017f76:	f44f 728c 	mov.w	r2, #280	; 0x118
 8017f7a:	4909      	ldr	r1, [pc, #36]	; (8017fa0 <do_memp_malloc_pool+0x5c>)
 8017f7c:	4809      	ldr	r0, [pc, #36]	; (8017fa4 <do_memp_malloc_pool+0x60>)
 8017f7e:	f00c f987 	bl	8024290 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017f82:	68f8      	ldr	r0, [r7, #12]
 8017f84:	f00a fefe 	bl	8022d84 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8017f88:	68bb      	ldr	r3, [r7, #8]
 8017f8a:	e003      	b.n	8017f94 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8017f8c:	68f8      	ldr	r0, [r7, #12]
 8017f8e:	f00a fef9 	bl	8022d84 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8017f92:	2300      	movs	r3, #0
}
 8017f94:	4618      	mov	r0, r3
 8017f96:	3710      	adds	r7, #16
 8017f98:	46bd      	mov	sp, r7
 8017f9a:	bd80      	pop	{r7, pc}
 8017f9c:	080265d0 	.word	0x080265d0
 8017fa0:	08026600 	.word	0x08026600
 8017fa4:	08026624 	.word	0x08026624

08017fa8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8017fa8:	b580      	push	{r7, lr}
 8017faa:	b082      	sub	sp, #8
 8017fac:	af00      	add	r7, sp, #0
 8017fae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8017fb0:	687b      	ldr	r3, [r7, #4]
 8017fb2:	2b00      	cmp	r3, #0
 8017fb4:	d106      	bne.n	8017fc4 <memp_malloc_pool+0x1c>
 8017fb6:	4b0a      	ldr	r3, [pc, #40]	; (8017fe0 <memp_malloc_pool+0x38>)
 8017fb8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8017fbc:	4909      	ldr	r1, [pc, #36]	; (8017fe4 <memp_malloc_pool+0x3c>)
 8017fbe:	480a      	ldr	r0, [pc, #40]	; (8017fe8 <memp_malloc_pool+0x40>)
 8017fc0:	f00c f966 	bl	8024290 <iprintf>
  if (desc == NULL) {
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	2b00      	cmp	r3, #0
 8017fc8:	d101      	bne.n	8017fce <memp_malloc_pool+0x26>
    return NULL;
 8017fca:	2300      	movs	r3, #0
 8017fcc:	e003      	b.n	8017fd6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8017fce:	6878      	ldr	r0, [r7, #4]
 8017fd0:	f7ff ffb8 	bl	8017f44 <do_memp_malloc_pool>
 8017fd4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8017fd6:	4618      	mov	r0, r3
 8017fd8:	3708      	adds	r7, #8
 8017fda:	46bd      	mov	sp, r7
 8017fdc:	bd80      	pop	{r7, pc}
 8017fde:	bf00      	nop
 8017fe0:	080265d0 	.word	0x080265d0
 8017fe4:	0802664c 	.word	0x0802664c
 8017fe8:	08026624 	.word	0x08026624

08017fec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8017fec:	b580      	push	{r7, lr}
 8017fee:	b084      	sub	sp, #16
 8017ff0:	af00      	add	r7, sp, #0
 8017ff2:	4603      	mov	r3, r0
 8017ff4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8017ff6:	79fb      	ldrb	r3, [r7, #7]
 8017ff8:	2b0c      	cmp	r3, #12
 8017ffa:	d908      	bls.n	801800e <memp_malloc+0x22>
 8017ffc:	4b0a      	ldr	r3, [pc, #40]	; (8018028 <memp_malloc+0x3c>)
 8017ffe:	f240 1257 	movw	r2, #343	; 0x157
 8018002:	490a      	ldr	r1, [pc, #40]	; (801802c <memp_malloc+0x40>)
 8018004:	480a      	ldr	r0, [pc, #40]	; (8018030 <memp_malloc+0x44>)
 8018006:	f00c f943 	bl	8024290 <iprintf>
 801800a:	2300      	movs	r3, #0
 801800c:	e008      	b.n	8018020 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 801800e:	79fb      	ldrb	r3, [r7, #7]
 8018010:	4a08      	ldr	r2, [pc, #32]	; (8018034 <memp_malloc+0x48>)
 8018012:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018016:	4618      	mov	r0, r3
 8018018:	f7ff ff94 	bl	8017f44 <do_memp_malloc_pool>
 801801c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 801801e:	68fb      	ldr	r3, [r7, #12]
}
 8018020:	4618      	mov	r0, r3
 8018022:	3710      	adds	r7, #16
 8018024:	46bd      	mov	sp, r7
 8018026:	bd80      	pop	{r7, pc}
 8018028:	080265d0 	.word	0x080265d0
 801802c:	08026660 	.word	0x08026660
 8018030:	08026624 	.word	0x08026624
 8018034:	08028e14 	.word	0x08028e14

08018038 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8018038:	b580      	push	{r7, lr}
 801803a:	b084      	sub	sp, #16
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
 8018040:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8018042:	683b      	ldr	r3, [r7, #0]
 8018044:	f003 0303 	and.w	r3, r3, #3
 8018048:	2b00      	cmp	r3, #0
 801804a:	d006      	beq.n	801805a <do_memp_free_pool+0x22>
 801804c:	4b0d      	ldr	r3, [pc, #52]	; (8018084 <do_memp_free_pool+0x4c>)
 801804e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8018052:	490d      	ldr	r1, [pc, #52]	; (8018088 <do_memp_free_pool+0x50>)
 8018054:	480d      	ldr	r0, [pc, #52]	; (801808c <do_memp_free_pool+0x54>)
 8018056:	f00c f91b 	bl	8024290 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 801805a:	683b      	ldr	r3, [r7, #0]
 801805c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 801805e:	f00a fe83 	bl	8022d68 <sys_arch_protect>
 8018062:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	689b      	ldr	r3, [r3, #8]
 8018068:	681a      	ldr	r2, [r3, #0]
 801806a:	68fb      	ldr	r3, [r7, #12]
 801806c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	689b      	ldr	r3, [r3, #8]
 8018072:	68fa      	ldr	r2, [r7, #12]
 8018074:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8018076:	68b8      	ldr	r0, [r7, #8]
 8018078:	f00a fe84 	bl	8022d84 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 801807c:	bf00      	nop
 801807e:	3710      	adds	r7, #16
 8018080:	46bd      	mov	sp, r7
 8018082:	bd80      	pop	{r7, pc}
 8018084:	080265d0 	.word	0x080265d0
 8018088:	08026680 	.word	0x08026680
 801808c:	08026624 	.word	0x08026624

08018090 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8018090:	b580      	push	{r7, lr}
 8018092:	b082      	sub	sp, #8
 8018094:	af00      	add	r7, sp, #0
 8018096:	6078      	str	r0, [r7, #4]
 8018098:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 801809a:	687b      	ldr	r3, [r7, #4]
 801809c:	2b00      	cmp	r3, #0
 801809e:	d106      	bne.n	80180ae <memp_free_pool+0x1e>
 80180a0:	4b0a      	ldr	r3, [pc, #40]	; (80180cc <memp_free_pool+0x3c>)
 80180a2:	f240 1295 	movw	r2, #405	; 0x195
 80180a6:	490a      	ldr	r1, [pc, #40]	; (80180d0 <memp_free_pool+0x40>)
 80180a8:	480a      	ldr	r0, [pc, #40]	; (80180d4 <memp_free_pool+0x44>)
 80180aa:	f00c f8f1 	bl	8024290 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 80180ae:	687b      	ldr	r3, [r7, #4]
 80180b0:	2b00      	cmp	r3, #0
 80180b2:	d007      	beq.n	80180c4 <memp_free_pool+0x34>
 80180b4:	683b      	ldr	r3, [r7, #0]
 80180b6:	2b00      	cmp	r3, #0
 80180b8:	d004      	beq.n	80180c4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 80180ba:	6839      	ldr	r1, [r7, #0]
 80180bc:	6878      	ldr	r0, [r7, #4]
 80180be:	f7ff ffbb 	bl	8018038 <do_memp_free_pool>
 80180c2:	e000      	b.n	80180c6 <memp_free_pool+0x36>
    return;
 80180c4:	bf00      	nop
}
 80180c6:	3708      	adds	r7, #8
 80180c8:	46bd      	mov	sp, r7
 80180ca:	bd80      	pop	{r7, pc}
 80180cc:	080265d0 	.word	0x080265d0
 80180d0:	0802664c 	.word	0x0802664c
 80180d4:	08026624 	.word	0x08026624

080180d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 80180d8:	b580      	push	{r7, lr}
 80180da:	b082      	sub	sp, #8
 80180dc:	af00      	add	r7, sp, #0
 80180de:	4603      	mov	r3, r0
 80180e0:	6039      	str	r1, [r7, #0]
 80180e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 80180e4:	79fb      	ldrb	r3, [r7, #7]
 80180e6:	2b0c      	cmp	r3, #12
 80180e8:	d907      	bls.n	80180fa <memp_free+0x22>
 80180ea:	4b0c      	ldr	r3, [pc, #48]	; (801811c <memp_free+0x44>)
 80180ec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 80180f0:	490b      	ldr	r1, [pc, #44]	; (8018120 <memp_free+0x48>)
 80180f2:	480c      	ldr	r0, [pc, #48]	; (8018124 <memp_free+0x4c>)
 80180f4:	f00c f8cc 	bl	8024290 <iprintf>
 80180f8:	e00c      	b.n	8018114 <memp_free+0x3c>

  if (mem == NULL) {
 80180fa:	683b      	ldr	r3, [r7, #0]
 80180fc:	2b00      	cmp	r3, #0
 80180fe:	d008      	beq.n	8018112 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8018100:	79fb      	ldrb	r3, [r7, #7]
 8018102:	4a09      	ldr	r2, [pc, #36]	; (8018128 <memp_free+0x50>)
 8018104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8018108:	6839      	ldr	r1, [r7, #0]
 801810a:	4618      	mov	r0, r3
 801810c:	f7ff ff94 	bl	8018038 <do_memp_free_pool>
 8018110:	e000      	b.n	8018114 <memp_free+0x3c>
    return;
 8018112:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8018114:	3708      	adds	r7, #8
 8018116:	46bd      	mov	sp, r7
 8018118:	bd80      	pop	{r7, pc}
 801811a:	bf00      	nop
 801811c:	080265d0 	.word	0x080265d0
 8018120:	080266a0 	.word	0x080266a0
 8018124:	08026624 	.word	0x08026624
 8018128:	08028e14 	.word	0x08028e14

0801812c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 801812c:	b480      	push	{r7}
 801812e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8018130:	bf00      	nop
 8018132:	46bd      	mov	sp, r7
 8018134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018138:	4770      	bx	lr
	...

0801813c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 801813c:	b580      	push	{r7, lr}
 801813e:	b086      	sub	sp, #24
 8018140:	af00      	add	r7, sp, #0
 8018142:	60f8      	str	r0, [r7, #12]
 8018144:	60b9      	str	r1, [r7, #8]
 8018146:	607a      	str	r2, [r7, #4]
 8018148:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 801814a:	68fb      	ldr	r3, [r7, #12]
 801814c:	2b00      	cmp	r3, #0
 801814e:	d108      	bne.n	8018162 <netif_add+0x26>
 8018150:	4b57      	ldr	r3, [pc, #348]	; (80182b0 <netif_add+0x174>)
 8018152:	f240 1227 	movw	r2, #295	; 0x127
 8018156:	4957      	ldr	r1, [pc, #348]	; (80182b4 <netif_add+0x178>)
 8018158:	4857      	ldr	r0, [pc, #348]	; (80182b8 <netif_add+0x17c>)
 801815a:	f00c f899 	bl	8024290 <iprintf>
 801815e:	2300      	movs	r3, #0
 8018160:	e0a2      	b.n	80182a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 8018162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018164:	2b00      	cmp	r3, #0
 8018166:	d108      	bne.n	801817a <netif_add+0x3e>
 8018168:	4b51      	ldr	r3, [pc, #324]	; (80182b0 <netif_add+0x174>)
 801816a:	f44f 7294 	mov.w	r2, #296	; 0x128
 801816e:	4953      	ldr	r1, [pc, #332]	; (80182bc <netif_add+0x180>)
 8018170:	4851      	ldr	r0, [pc, #324]	; (80182b8 <netif_add+0x17c>)
 8018172:	f00c f88d 	bl	8024290 <iprintf>
 8018176:	2300      	movs	r3, #0
 8018178:	e096      	b.n	80182a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 801817a:	68bb      	ldr	r3, [r7, #8]
 801817c:	2b00      	cmp	r3, #0
 801817e:	d101      	bne.n	8018184 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8018180:	4b4f      	ldr	r3, [pc, #316]	; (80182c0 <netif_add+0x184>)
 8018182:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8018184:	687b      	ldr	r3, [r7, #4]
 8018186:	2b00      	cmp	r3, #0
 8018188:	d101      	bne.n	801818e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 801818a:	4b4d      	ldr	r3, [pc, #308]	; (80182c0 <netif_add+0x184>)
 801818c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 801818e:	683b      	ldr	r3, [r7, #0]
 8018190:	2b00      	cmp	r3, #0
 8018192:	d101      	bne.n	8018198 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 8018194:	4b4a      	ldr	r3, [pc, #296]	; (80182c0 <netif_add+0x184>)
 8018196:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8018198:	68fb      	ldr	r3, [r7, #12]
 801819a:	2200      	movs	r2, #0
 801819c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 801819e:	68fb      	ldr	r3, [r7, #12]
 80181a0:	2200      	movs	r2, #0
 80181a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 80181a4:	68fb      	ldr	r3, [r7, #12]
 80181a6:	2200      	movs	r2, #0
 80181a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 80181aa:	68fb      	ldr	r3, [r7, #12]
 80181ac:	4a45      	ldr	r2, [pc, #276]	; (80182c4 <netif_add+0x188>)
 80181ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 80181b0:	68fb      	ldr	r3, [r7, #12]
 80181b2:	2200      	movs	r2, #0
 80181b4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 80181b6:	68fb      	ldr	r3, [r7, #12]
 80181b8:	2200      	movs	r2, #0
 80181ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 80181be:	68fb      	ldr	r3, [r7, #12]
 80181c0:	2200      	movs	r2, #0
 80181c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	6a3a      	ldr	r2, [r7, #32]
 80181c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 80181ca:	4b3f      	ldr	r3, [pc, #252]	; (80182c8 <netif_add+0x18c>)
 80181cc:	781a      	ldrb	r2, [r3, #0]
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 80181d4:	68fb      	ldr	r3, [r7, #12]
 80181d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80181d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 80181da:	683b      	ldr	r3, [r7, #0]
 80181dc:	687a      	ldr	r2, [r7, #4]
 80181de:	68b9      	ldr	r1, [r7, #8]
 80181e0:	68f8      	ldr	r0, [r7, #12]
 80181e2:	f000 f913 	bl	801840c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 80181e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80181e8:	68f8      	ldr	r0, [r7, #12]
 80181ea:	4798      	blx	r3
 80181ec:	4603      	mov	r3, r0
 80181ee:	2b00      	cmp	r3, #0
 80181f0:	d001      	beq.n	80181f6 <netif_add+0xba>
    return NULL;
 80181f2:	2300      	movs	r3, #0
 80181f4:	e058      	b.n	80182a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80181f6:	68fb      	ldr	r3, [r7, #12]
 80181f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80181fc:	2bff      	cmp	r3, #255	; 0xff
 80181fe:	d103      	bne.n	8018208 <netif_add+0xcc>
        netif->num = 0;
 8018200:	68fb      	ldr	r3, [r7, #12]
 8018202:	2200      	movs	r2, #0
 8018204:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 8018208:	2300      	movs	r3, #0
 801820a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801820c:	4b2f      	ldr	r3, [pc, #188]	; (80182cc <netif_add+0x190>)
 801820e:	681b      	ldr	r3, [r3, #0]
 8018210:	617b      	str	r3, [r7, #20]
 8018212:	e02b      	b.n	801826c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 8018214:	697a      	ldr	r2, [r7, #20]
 8018216:	68fb      	ldr	r3, [r7, #12]
 8018218:	429a      	cmp	r2, r3
 801821a:	d106      	bne.n	801822a <netif_add+0xee>
 801821c:	4b24      	ldr	r3, [pc, #144]	; (80182b0 <netif_add+0x174>)
 801821e:	f240 128b 	movw	r2, #395	; 0x18b
 8018222:	492b      	ldr	r1, [pc, #172]	; (80182d0 <netif_add+0x194>)
 8018224:	4824      	ldr	r0, [pc, #144]	; (80182b8 <netif_add+0x17c>)
 8018226:	f00c f833 	bl	8024290 <iprintf>
        num_netifs++;
 801822a:	693b      	ldr	r3, [r7, #16]
 801822c:	3301      	adds	r3, #1
 801822e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 8018230:	693b      	ldr	r3, [r7, #16]
 8018232:	2bff      	cmp	r3, #255	; 0xff
 8018234:	dd06      	ble.n	8018244 <netif_add+0x108>
 8018236:	4b1e      	ldr	r3, [pc, #120]	; (80182b0 <netif_add+0x174>)
 8018238:	f240 128d 	movw	r2, #397	; 0x18d
 801823c:	4925      	ldr	r1, [pc, #148]	; (80182d4 <netif_add+0x198>)
 801823e:	481e      	ldr	r0, [pc, #120]	; (80182b8 <netif_add+0x17c>)
 8018240:	f00c f826 	bl	8024290 <iprintf>
        if (netif2->num == netif->num) {
 8018244:	697b      	ldr	r3, [r7, #20]
 8018246:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 801824a:	68fb      	ldr	r3, [r7, #12]
 801824c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018250:	429a      	cmp	r2, r3
 8018252:	d108      	bne.n	8018266 <netif_add+0x12a>
          netif->num++;
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801825a:	3301      	adds	r3, #1
 801825c:	b2da      	uxtb	r2, r3
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 8018264:	e005      	b.n	8018272 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 8018266:	697b      	ldr	r3, [r7, #20]
 8018268:	681b      	ldr	r3, [r3, #0]
 801826a:	617b      	str	r3, [r7, #20]
 801826c:	697b      	ldr	r3, [r7, #20]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d1d0      	bne.n	8018214 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 8018272:	697b      	ldr	r3, [r7, #20]
 8018274:	2b00      	cmp	r3, #0
 8018276:	d1be      	bne.n	80181f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 8018278:	68fb      	ldr	r3, [r7, #12]
 801827a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801827e:	2bfe      	cmp	r3, #254	; 0xfe
 8018280:	d103      	bne.n	801828a <netif_add+0x14e>
    netif_num = 0;
 8018282:	4b11      	ldr	r3, [pc, #68]	; (80182c8 <netif_add+0x18c>)
 8018284:	2200      	movs	r2, #0
 8018286:	701a      	strb	r2, [r3, #0]
 8018288:	e006      	b.n	8018298 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 801828a:	68fb      	ldr	r3, [r7, #12]
 801828c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018290:	3301      	adds	r3, #1
 8018292:	b2da      	uxtb	r2, r3
 8018294:	4b0c      	ldr	r3, [pc, #48]	; (80182c8 <netif_add+0x18c>)
 8018296:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8018298:	4b0c      	ldr	r3, [pc, #48]	; (80182cc <netif_add+0x190>)
 801829a:	681a      	ldr	r2, [r3, #0]
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 80182a0:	4a0a      	ldr	r2, [pc, #40]	; (80182cc <netif_add+0x190>)
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 80182a6:	68fb      	ldr	r3, [r7, #12]
}
 80182a8:	4618      	mov	r0, r3
 80182aa:	3718      	adds	r7, #24
 80182ac:	46bd      	mov	sp, r7
 80182ae:	bd80      	pop	{r7, pc}
 80182b0:	080266bc 	.word	0x080266bc
 80182b4:	08026750 	.word	0x08026750
 80182b8:	0802670c 	.word	0x0802670c
 80182bc:	0802676c 	.word	0x0802676c
 80182c0:	08028e88 	.word	0x08028e88
 80182c4:	080186e7 	.word	0x080186e7
 80182c8:	2000bfb8 	.word	0x2000bfb8
 80182cc:	2000bfb0 	.word	0x2000bfb0
 80182d0:	08026790 	.word	0x08026790
 80182d4:	080267a4 	.word	0x080267a4

080182d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80182d8:	b580      	push	{r7, lr}
 80182da:	b082      	sub	sp, #8
 80182dc:	af00      	add	r7, sp, #0
 80182de:	6078      	str	r0, [r7, #4]
 80182e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 80182e2:	6839      	ldr	r1, [r7, #0]
 80182e4:	6878      	ldr	r0, [r7, #4]
 80182e6:	f002 ff77 	bl	801b1d8 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80182ea:	6839      	ldr	r1, [r7, #0]
 80182ec:	6878      	ldr	r0, [r7, #4]
 80182ee:	f008 f881 	bl	80203f4 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80182f2:	bf00      	nop
 80182f4:	3708      	adds	r7, #8
 80182f6:	46bd      	mov	sp, r7
 80182f8:	bd80      	pop	{r7, pc}
	...

080182fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b086      	sub	sp, #24
 8018300:	af00      	add	r7, sp, #0
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	60b9      	str	r1, [r7, #8]
 8018306:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	2b00      	cmp	r3, #0
 801830c:	d106      	bne.n	801831c <netif_do_set_ipaddr+0x20>
 801830e:	4b1d      	ldr	r3, [pc, #116]	; (8018384 <netif_do_set_ipaddr+0x88>)
 8018310:	f240 12cb 	movw	r2, #459	; 0x1cb
 8018314:	491c      	ldr	r1, [pc, #112]	; (8018388 <netif_do_set_ipaddr+0x8c>)
 8018316:	481d      	ldr	r0, [pc, #116]	; (801838c <netif_do_set_ipaddr+0x90>)
 8018318:	f00b ffba 	bl	8024290 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 801831c:	687b      	ldr	r3, [r7, #4]
 801831e:	2b00      	cmp	r3, #0
 8018320:	d106      	bne.n	8018330 <netif_do_set_ipaddr+0x34>
 8018322:	4b18      	ldr	r3, [pc, #96]	; (8018384 <netif_do_set_ipaddr+0x88>)
 8018324:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 8018328:	4917      	ldr	r1, [pc, #92]	; (8018388 <netif_do_set_ipaddr+0x8c>)
 801832a:	4818      	ldr	r0, [pc, #96]	; (801838c <netif_do_set_ipaddr+0x90>)
 801832c:	f00b ffb0 	bl	8024290 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 8018330:	68bb      	ldr	r3, [r7, #8]
 8018332:	681a      	ldr	r2, [r3, #0]
 8018334:	68fb      	ldr	r3, [r7, #12]
 8018336:	3304      	adds	r3, #4
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	429a      	cmp	r2, r3
 801833c:	d01c      	beq.n	8018378 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 801833e:	68bb      	ldr	r3, [r7, #8]
 8018340:	681b      	ldr	r3, [r3, #0]
 8018342:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 8018344:	68fb      	ldr	r3, [r7, #12]
 8018346:	3304      	adds	r3, #4
 8018348:	681a      	ldr	r2, [r3, #0]
 801834a:	687b      	ldr	r3, [r7, #4]
 801834c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 801834e:	f107 0314 	add.w	r3, r7, #20
 8018352:	4619      	mov	r1, r3
 8018354:	6878      	ldr	r0, [r7, #4]
 8018356:	f7ff ffbf 	bl	80182d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	2b00      	cmp	r3, #0
 801835e:	d002      	beq.n	8018366 <netif_do_set_ipaddr+0x6a>
 8018360:	68bb      	ldr	r3, [r7, #8]
 8018362:	681b      	ldr	r3, [r3, #0]
 8018364:	e000      	b.n	8018368 <netif_do_set_ipaddr+0x6c>
 8018366:	2300      	movs	r3, #0
 8018368:	68fa      	ldr	r2, [r7, #12]
 801836a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 801836c:	2101      	movs	r1, #1
 801836e:	68f8      	ldr	r0, [r7, #12]
 8018370:	f000 f8d2 	bl	8018518 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8018374:	2301      	movs	r3, #1
 8018376:	e000      	b.n	801837a <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8018378:	2300      	movs	r3, #0
}
 801837a:	4618      	mov	r0, r3
 801837c:	3718      	adds	r7, #24
 801837e:	46bd      	mov	sp, r7
 8018380:	bd80      	pop	{r7, pc}
 8018382:	bf00      	nop
 8018384:	080266bc 	.word	0x080266bc
 8018388:	080267d4 	.word	0x080267d4
 801838c:	0802670c 	.word	0x0802670c

08018390 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8018390:	b480      	push	{r7}
 8018392:	b085      	sub	sp, #20
 8018394:	af00      	add	r7, sp, #0
 8018396:	60f8      	str	r0, [r7, #12]
 8018398:	60b9      	str	r1, [r7, #8]
 801839a:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 801839c:	68bb      	ldr	r3, [r7, #8]
 801839e:	681a      	ldr	r2, [r3, #0]
 80183a0:	68fb      	ldr	r3, [r7, #12]
 80183a2:	3308      	adds	r3, #8
 80183a4:	681b      	ldr	r3, [r3, #0]
 80183a6:	429a      	cmp	r2, r3
 80183a8:	d00a      	beq.n	80183c0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 80183aa:	68bb      	ldr	r3, [r7, #8]
 80183ac:	2b00      	cmp	r3, #0
 80183ae:	d002      	beq.n	80183b6 <netif_do_set_netmask+0x26>
 80183b0:	68bb      	ldr	r3, [r7, #8]
 80183b2:	681b      	ldr	r3, [r3, #0]
 80183b4:	e000      	b.n	80183b8 <netif_do_set_netmask+0x28>
 80183b6:	2300      	movs	r3, #0
 80183b8:	68fa      	ldr	r2, [r7, #12]
 80183ba:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 80183bc:	2301      	movs	r3, #1
 80183be:	e000      	b.n	80183c2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 80183c0:	2300      	movs	r3, #0
}
 80183c2:	4618      	mov	r0, r3
 80183c4:	3714      	adds	r7, #20
 80183c6:	46bd      	mov	sp, r7
 80183c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183cc:	4770      	bx	lr

080183ce <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 80183ce:	b480      	push	{r7}
 80183d0:	b085      	sub	sp, #20
 80183d2:	af00      	add	r7, sp, #0
 80183d4:	60f8      	str	r0, [r7, #12]
 80183d6:	60b9      	str	r1, [r7, #8]
 80183d8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 80183da:	68bb      	ldr	r3, [r7, #8]
 80183dc:	681a      	ldr	r2, [r3, #0]
 80183de:	68fb      	ldr	r3, [r7, #12]
 80183e0:	330c      	adds	r3, #12
 80183e2:	681b      	ldr	r3, [r3, #0]
 80183e4:	429a      	cmp	r2, r3
 80183e6:	d00a      	beq.n	80183fe <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80183e8:	68bb      	ldr	r3, [r7, #8]
 80183ea:	2b00      	cmp	r3, #0
 80183ec:	d002      	beq.n	80183f4 <netif_do_set_gw+0x26>
 80183ee:	68bb      	ldr	r3, [r7, #8]
 80183f0:	681b      	ldr	r3, [r3, #0]
 80183f2:	e000      	b.n	80183f6 <netif_do_set_gw+0x28>
 80183f4:	2300      	movs	r3, #0
 80183f6:	68fa      	ldr	r2, [r7, #12]
 80183f8:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80183fa:	2301      	movs	r3, #1
 80183fc:	e000      	b.n	8018400 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80183fe:	2300      	movs	r3, #0
}
 8018400:	4618      	mov	r0, r3
 8018402:	3714      	adds	r7, #20
 8018404:	46bd      	mov	sp, r7
 8018406:	f85d 7b04 	ldr.w	r7, [sp], #4
 801840a:	4770      	bx	lr

0801840c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 801840c:	b580      	push	{r7, lr}
 801840e:	b088      	sub	sp, #32
 8018410:	af00      	add	r7, sp, #0
 8018412:	60f8      	str	r0, [r7, #12]
 8018414:	60b9      	str	r1, [r7, #8]
 8018416:	607a      	str	r2, [r7, #4]
 8018418:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 801841a:	2300      	movs	r3, #0
 801841c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 801841e:	2300      	movs	r3, #0
 8018420:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	2b00      	cmp	r3, #0
 8018426:	d101      	bne.n	801842c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8018428:	4b1c      	ldr	r3, [pc, #112]	; (801849c <netif_set_addr+0x90>)
 801842a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801842c:	687b      	ldr	r3, [r7, #4]
 801842e:	2b00      	cmp	r3, #0
 8018430:	d101      	bne.n	8018436 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8018432:	4b1a      	ldr	r3, [pc, #104]	; (801849c <netif_set_addr+0x90>)
 8018434:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8018436:	683b      	ldr	r3, [r7, #0]
 8018438:	2b00      	cmp	r3, #0
 801843a:	d101      	bne.n	8018440 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 801843c:	4b17      	ldr	r3, [pc, #92]	; (801849c <netif_set_addr+0x90>)
 801843e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8018440:	68bb      	ldr	r3, [r7, #8]
 8018442:	2b00      	cmp	r3, #0
 8018444:	d003      	beq.n	801844e <netif_set_addr+0x42>
 8018446:	68bb      	ldr	r3, [r7, #8]
 8018448:	681b      	ldr	r3, [r3, #0]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d101      	bne.n	8018452 <netif_set_addr+0x46>
 801844e:	2301      	movs	r3, #1
 8018450:	e000      	b.n	8018454 <netif_set_addr+0x48>
 8018452:	2300      	movs	r3, #0
 8018454:	617b      	str	r3, [r7, #20]
  if (remove) {
 8018456:	697b      	ldr	r3, [r7, #20]
 8018458:	2b00      	cmp	r3, #0
 801845a:	d006      	beq.n	801846a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801845c:	f107 0310 	add.w	r3, r7, #16
 8018460:	461a      	mov	r2, r3
 8018462:	68b9      	ldr	r1, [r7, #8]
 8018464:	68f8      	ldr	r0, [r7, #12]
 8018466:	f7ff ff49 	bl	80182fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 801846a:	69fa      	ldr	r2, [r7, #28]
 801846c:	6879      	ldr	r1, [r7, #4]
 801846e:	68f8      	ldr	r0, [r7, #12]
 8018470:	f7ff ff8e 	bl	8018390 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8018474:	69ba      	ldr	r2, [r7, #24]
 8018476:	6839      	ldr	r1, [r7, #0]
 8018478:	68f8      	ldr	r0, [r7, #12]
 801847a:	f7ff ffa8 	bl	80183ce <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 801847e:	697b      	ldr	r3, [r7, #20]
 8018480:	2b00      	cmp	r3, #0
 8018482:	d106      	bne.n	8018492 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8018484:	f107 0310 	add.w	r3, r7, #16
 8018488:	461a      	mov	r2, r3
 801848a:	68b9      	ldr	r1, [r7, #8]
 801848c:	68f8      	ldr	r0, [r7, #12]
 801848e:	f7ff ff35 	bl	80182fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8018492:	bf00      	nop
 8018494:	3720      	adds	r7, #32
 8018496:	46bd      	mov	sp, r7
 8018498:	bd80      	pop	{r7, pc}
 801849a:	bf00      	nop
 801849c:	08028e88 	.word	0x08028e88

080184a0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 80184a0:	b480      	push	{r7}
 80184a2:	b083      	sub	sp, #12
 80184a4:	af00      	add	r7, sp, #0
 80184a6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 80184a8:	4a04      	ldr	r2, [pc, #16]	; (80184bc <netif_set_default+0x1c>)
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 80184ae:	bf00      	nop
 80184b0:	370c      	adds	r7, #12
 80184b2:	46bd      	mov	sp, r7
 80184b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184b8:	4770      	bx	lr
 80184ba:	bf00      	nop
 80184bc:	2000bfb4 	.word	0x2000bfb4

080184c0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 80184c0:	b580      	push	{r7, lr}
 80184c2:	b082      	sub	sp, #8
 80184c4:	af00      	add	r7, sp, #0
 80184c6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2b00      	cmp	r3, #0
 80184cc:	d107      	bne.n	80184de <netif_set_up+0x1e>
 80184ce:	4b0f      	ldr	r3, [pc, #60]	; (801850c <netif_set_up+0x4c>)
 80184d0:	f44f 7254 	mov.w	r2, #848	; 0x350
 80184d4:	490e      	ldr	r1, [pc, #56]	; (8018510 <netif_set_up+0x50>)
 80184d6:	480f      	ldr	r0, [pc, #60]	; (8018514 <netif_set_up+0x54>)
 80184d8:	f00b feda 	bl	8024290 <iprintf>
 80184dc:	e013      	b.n	8018506 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184e4:	f003 0301 	and.w	r3, r3, #1
 80184e8:	2b00      	cmp	r3, #0
 80184ea:	d10c      	bne.n	8018506 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80184ec:	687b      	ldr	r3, [r7, #4]
 80184ee:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80184f2:	f043 0301 	orr.w	r3, r3, #1
 80184f6:	b2da      	uxtb	r2, r3
 80184f8:	687b      	ldr	r3, [r7, #4]
 80184fa:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80184fe:	2103      	movs	r1, #3
 8018500:	6878      	ldr	r0, [r7, #4]
 8018502:	f000 f809 	bl	8018518 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8018506:	3708      	adds	r7, #8
 8018508:	46bd      	mov	sp, r7
 801850a:	bd80      	pop	{r7, pc}
 801850c:	080266bc 	.word	0x080266bc
 8018510:	08026844 	.word	0x08026844
 8018514:	0802670c 	.word	0x0802670c

08018518 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8018518:	b580      	push	{r7, lr}
 801851a:	b082      	sub	sp, #8
 801851c:	af00      	add	r7, sp, #0
 801851e:	6078      	str	r0, [r7, #4]
 8018520:	460b      	mov	r3, r1
 8018522:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	2b00      	cmp	r3, #0
 8018528:	d106      	bne.n	8018538 <netif_issue_reports+0x20>
 801852a:	4b18      	ldr	r3, [pc, #96]	; (801858c <netif_issue_reports+0x74>)
 801852c:	f240 326d 	movw	r2, #877	; 0x36d
 8018530:	4917      	ldr	r1, [pc, #92]	; (8018590 <netif_issue_reports+0x78>)
 8018532:	4818      	ldr	r0, [pc, #96]	; (8018594 <netif_issue_reports+0x7c>)
 8018534:	f00b feac 	bl	8024290 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801853e:	f003 0304 	and.w	r3, r3, #4
 8018542:	2b00      	cmp	r3, #0
 8018544:	d01e      	beq.n	8018584 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801854c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8018550:	2b00      	cmp	r3, #0
 8018552:	d017      	beq.n	8018584 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018554:	78fb      	ldrb	r3, [r7, #3]
 8018556:	f003 0301 	and.w	r3, r3, #1
 801855a:	2b00      	cmp	r3, #0
 801855c:	d013      	beq.n	8018586 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801855e:	687b      	ldr	r3, [r7, #4]
 8018560:	3304      	adds	r3, #4
 8018562:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8018564:	2b00      	cmp	r3, #0
 8018566:	d00e      	beq.n	8018586 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8018568:	687b      	ldr	r3, [r7, #4]
 801856a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801856e:	f003 0308 	and.w	r3, r3, #8
 8018572:	2b00      	cmp	r3, #0
 8018574:	d007      	beq.n	8018586 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	3304      	adds	r3, #4
 801857a:	4619      	mov	r1, r3
 801857c:	6878      	ldr	r0, [r7, #4]
 801857e:	f008 fea3 	bl	80212c8 <etharp_request>
 8018582:	e000      	b.n	8018586 <netif_issue_reports+0x6e>
    return;
 8018584:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8018586:	3708      	adds	r7, #8
 8018588:	46bd      	mov	sp, r7
 801858a:	bd80      	pop	{r7, pc}
 801858c:	080266bc 	.word	0x080266bc
 8018590:	08026860 	.word	0x08026860
 8018594:	0802670c 	.word	0x0802670c

08018598 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8018598:	b580      	push	{r7, lr}
 801859a:	b082      	sub	sp, #8
 801859c:	af00      	add	r7, sp, #0
 801859e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	2b00      	cmp	r3, #0
 80185a4:	d107      	bne.n	80185b6 <netif_set_down+0x1e>
 80185a6:	4b12      	ldr	r3, [pc, #72]	; (80185f0 <netif_set_down+0x58>)
 80185a8:	f240 329b 	movw	r2, #923	; 0x39b
 80185ac:	4911      	ldr	r1, [pc, #68]	; (80185f4 <netif_set_down+0x5c>)
 80185ae:	4812      	ldr	r0, [pc, #72]	; (80185f8 <netif_set_down+0x60>)
 80185b0:	f00b fe6e 	bl	8024290 <iprintf>
 80185b4:	e019      	b.n	80185ea <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80185bc:	f003 0301 	and.w	r3, r3, #1
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	d012      	beq.n	80185ea <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80185ca:	f023 0301 	bic.w	r3, r3, #1
 80185ce:	b2da      	uxtb	r2, r3
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 80185d6:	687b      	ldr	r3, [r7, #4]
 80185d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80185dc:	f003 0308 	and.w	r3, r3, #8
 80185e0:	2b00      	cmp	r3, #0
 80185e2:	d002      	beq.n	80185ea <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 80185e4:	6878      	ldr	r0, [r7, #4]
 80185e6:	f008 fa2d 	bl	8020a44 <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80185ea:	3708      	adds	r7, #8
 80185ec:	46bd      	mov	sp, r7
 80185ee:	bd80      	pop	{r7, pc}
 80185f0:	080266bc 	.word	0x080266bc
 80185f4:	08026884 	.word	0x08026884
 80185f8:	0802670c 	.word	0x0802670c

080185fc <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80185fc:	b580      	push	{r7, lr}
 80185fe:	b082      	sub	sp, #8
 8018600:	af00      	add	r7, sp, #0
 8018602:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8018604:	687b      	ldr	r3, [r7, #4]
 8018606:	2b00      	cmp	r3, #0
 8018608:	d107      	bne.n	801861a <netif_set_link_up+0x1e>
 801860a:	4b13      	ldr	r3, [pc, #76]	; (8018658 <netif_set_link_up+0x5c>)
 801860c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8018610:	4912      	ldr	r1, [pc, #72]	; (801865c <netif_set_link_up+0x60>)
 8018612:	4813      	ldr	r0, [pc, #76]	; (8018660 <netif_set_link_up+0x64>)
 8018614:	f00b fe3c 	bl	8024290 <iprintf>
 8018618:	e01b      	b.n	8018652 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018620:	f003 0304 	and.w	r3, r3, #4
 8018624:	2b00      	cmp	r3, #0
 8018626:	d114      	bne.n	8018652 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801862e:	f043 0304 	orr.w	r3, r3, #4
 8018632:	b2da      	uxtb	r2, r3
 8018634:	687b      	ldr	r3, [r7, #4]
 8018636:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 801863a:	2103      	movs	r1, #3
 801863c:	6878      	ldr	r0, [r7, #4]
 801863e:	f7ff ff6b 	bl	8018518 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8018642:	687b      	ldr	r3, [r7, #4]
 8018644:	69db      	ldr	r3, [r3, #28]
 8018646:	2b00      	cmp	r3, #0
 8018648:	d003      	beq.n	8018652 <netif_set_link_up+0x56>
 801864a:	687b      	ldr	r3, [r7, #4]
 801864c:	69db      	ldr	r3, [r3, #28]
 801864e:	6878      	ldr	r0, [r7, #4]
 8018650:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8018652:	3708      	adds	r7, #8
 8018654:	46bd      	mov	sp, r7
 8018656:	bd80      	pop	{r7, pc}
 8018658:	080266bc 	.word	0x080266bc
 801865c:	080268a4 	.word	0x080268a4
 8018660:	0802670c 	.word	0x0802670c

08018664 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8018664:	b580      	push	{r7, lr}
 8018666:	b082      	sub	sp, #8
 8018668:	af00      	add	r7, sp, #0
 801866a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 801866c:	687b      	ldr	r3, [r7, #4]
 801866e:	2b00      	cmp	r3, #0
 8018670:	d107      	bne.n	8018682 <netif_set_link_down+0x1e>
 8018672:	4b11      	ldr	r3, [pc, #68]	; (80186b8 <netif_set_link_down+0x54>)
 8018674:	f240 4206 	movw	r2, #1030	; 0x406
 8018678:	4910      	ldr	r1, [pc, #64]	; (80186bc <netif_set_link_down+0x58>)
 801867a:	4811      	ldr	r0, [pc, #68]	; (80186c0 <netif_set_link_down+0x5c>)
 801867c:	f00b fe08 	bl	8024290 <iprintf>
 8018680:	e017      	b.n	80186b2 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8018682:	687b      	ldr	r3, [r7, #4]
 8018684:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018688:	f003 0304 	and.w	r3, r3, #4
 801868c:	2b00      	cmp	r3, #0
 801868e:	d010      	beq.n	80186b2 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8018690:	687b      	ldr	r3, [r7, #4]
 8018692:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8018696:	f023 0304 	bic.w	r3, r3, #4
 801869a:	b2da      	uxtb	r2, r3
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	69db      	ldr	r3, [r3, #28]
 80186a6:	2b00      	cmp	r3, #0
 80186a8:	d003      	beq.n	80186b2 <netif_set_link_down+0x4e>
 80186aa:	687b      	ldr	r3, [r7, #4]
 80186ac:	69db      	ldr	r3, [r3, #28]
 80186ae:	6878      	ldr	r0, [r7, #4]
 80186b0:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 80186b2:	3708      	adds	r7, #8
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	080266bc 	.word	0x080266bc
 80186bc:	080268c8 	.word	0x080268c8
 80186c0:	0802670c 	.word	0x0802670c

080186c4 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 80186c4:	b480      	push	{r7}
 80186c6:	b083      	sub	sp, #12
 80186c8:	af00      	add	r7, sp, #0
 80186ca:	6078      	str	r0, [r7, #4]
 80186cc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	2b00      	cmp	r3, #0
 80186d2:	d002      	beq.n	80186da <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 80186d4:	687b      	ldr	r3, [r7, #4]
 80186d6:	683a      	ldr	r2, [r7, #0]
 80186d8:	61da      	str	r2, [r3, #28]
  }
}
 80186da:	bf00      	nop
 80186dc:	370c      	adds	r7, #12
 80186de:	46bd      	mov	sp, r7
 80186e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186e4:	4770      	bx	lr

080186e6 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 80186e6:	b480      	push	{r7}
 80186e8:	b085      	sub	sp, #20
 80186ea:	af00      	add	r7, sp, #0
 80186ec:	60f8      	str	r0, [r7, #12]
 80186ee:	60b9      	str	r1, [r7, #8]
 80186f0:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80186f2:	f06f 030b 	mvn.w	r3, #11
}
 80186f6:	4618      	mov	r0, r3
 80186f8:	3714      	adds	r7, #20
 80186fa:	46bd      	mov	sp, r7
 80186fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018700:	4770      	bx	lr
	...

08018704 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8018704:	b480      	push	{r7}
 8018706:	b085      	sub	sp, #20
 8018708:	af00      	add	r7, sp, #0
 801870a:	4603      	mov	r3, r0
 801870c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 801870e:	79fb      	ldrb	r3, [r7, #7]
 8018710:	2b00      	cmp	r3, #0
 8018712:	d013      	beq.n	801873c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8018714:	4b0d      	ldr	r3, [pc, #52]	; (801874c <netif_get_by_index+0x48>)
 8018716:	681b      	ldr	r3, [r3, #0]
 8018718:	60fb      	str	r3, [r7, #12]
 801871a:	e00c      	b.n	8018736 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 801871c:	68fb      	ldr	r3, [r7, #12]
 801871e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8018722:	3301      	adds	r3, #1
 8018724:	b2db      	uxtb	r3, r3
 8018726:	79fa      	ldrb	r2, [r7, #7]
 8018728:	429a      	cmp	r2, r3
 801872a:	d101      	bne.n	8018730 <netif_get_by_index+0x2c>
        return netif; /* found! */
 801872c:	68fb      	ldr	r3, [r7, #12]
 801872e:	e006      	b.n	801873e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8018730:	68fb      	ldr	r3, [r7, #12]
 8018732:	681b      	ldr	r3, [r3, #0]
 8018734:	60fb      	str	r3, [r7, #12]
 8018736:	68fb      	ldr	r3, [r7, #12]
 8018738:	2b00      	cmp	r3, #0
 801873a:	d1ef      	bne.n	801871c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 801873c:	2300      	movs	r3, #0
}
 801873e:	4618      	mov	r0, r3
 8018740:	3714      	adds	r7, #20
 8018742:	46bd      	mov	sp, r7
 8018744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018748:	4770      	bx	lr
 801874a:	bf00      	nop
 801874c:	2000bfb0 	.word	0x2000bfb0

08018750 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8018750:	b580      	push	{r7, lr}
 8018752:	b082      	sub	sp, #8
 8018754:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8018756:	f00a fb07 	bl	8022d68 <sys_arch_protect>
 801875a:	6038      	str	r0, [r7, #0]
 801875c:	4b0d      	ldr	r3, [pc, #52]	; (8018794 <pbuf_free_ooseq+0x44>)
 801875e:	2200      	movs	r2, #0
 8018760:	701a      	strb	r2, [r3, #0]
 8018762:	6838      	ldr	r0, [r7, #0]
 8018764:	f00a fb0e 	bl	8022d84 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018768:	4b0b      	ldr	r3, [pc, #44]	; (8018798 <pbuf_free_ooseq+0x48>)
 801876a:	681b      	ldr	r3, [r3, #0]
 801876c:	607b      	str	r3, [r7, #4]
 801876e:	e00a      	b.n	8018786 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8018774:	2b00      	cmp	r3, #0
 8018776:	d003      	beq.n	8018780 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f002 fd6b 	bl	801b254 <tcp_free_ooseq>
      return;
 801877e:	e005      	b.n	801878c <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	68db      	ldr	r3, [r3, #12]
 8018784:	607b      	str	r3, [r7, #4]
 8018786:	687b      	ldr	r3, [r7, #4]
 8018788:	2b00      	cmp	r3, #0
 801878a:	d1f1      	bne.n	8018770 <pbuf_free_ooseq+0x20>
    }
  }
}
 801878c:	3708      	adds	r7, #8
 801878e:	46bd      	mov	sp, r7
 8018790:	bd80      	pop	{r7, pc}
 8018792:	bf00      	nop
 8018794:	2000bfb9 	.word	0x2000bfb9
 8018798:	2000bfc8 	.word	0x2000bfc8

0801879c <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 801879c:	b580      	push	{r7, lr}
 801879e:	b082      	sub	sp, #8
 80187a0:	af00      	add	r7, sp, #0
 80187a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 80187a4:	f7ff ffd4 	bl	8018750 <pbuf_free_ooseq>
}
 80187a8:	bf00      	nop
 80187aa:	3708      	adds	r7, #8
 80187ac:	46bd      	mov	sp, r7
 80187ae:	bd80      	pop	{r7, pc}

080187b0 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 80187b0:	b580      	push	{r7, lr}
 80187b2:	b082      	sub	sp, #8
 80187b4:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 80187b6:	f00a fad7 	bl	8022d68 <sys_arch_protect>
 80187ba:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 80187bc:	4b0f      	ldr	r3, [pc, #60]	; (80187fc <pbuf_pool_is_empty+0x4c>)
 80187be:	781b      	ldrb	r3, [r3, #0]
 80187c0:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 80187c2:	4b0e      	ldr	r3, [pc, #56]	; (80187fc <pbuf_pool_is_empty+0x4c>)
 80187c4:	2201      	movs	r2, #1
 80187c6:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 80187c8:	6878      	ldr	r0, [r7, #4]
 80187ca:	f00a fadb 	bl	8022d84 <sys_arch_unprotect>

  if (!queued) {
 80187ce:	78fb      	ldrb	r3, [r7, #3]
 80187d0:	2b00      	cmp	r3, #0
 80187d2:	d10f      	bne.n	80187f4 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 80187d4:	2100      	movs	r1, #0
 80187d6:	480a      	ldr	r0, [pc, #40]	; (8018800 <pbuf_pool_is_empty+0x50>)
 80187d8:	f7fe fe90 	bl	80174fc <tcpip_try_callback>
 80187dc:	4603      	mov	r3, r0
 80187de:	2b00      	cmp	r3, #0
 80187e0:	d008      	beq.n	80187f4 <pbuf_pool_is_empty+0x44>
 80187e2:	f00a fac1 	bl	8022d68 <sys_arch_protect>
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	4b04      	ldr	r3, [pc, #16]	; (80187fc <pbuf_pool_is_empty+0x4c>)
 80187ea:	2200      	movs	r2, #0
 80187ec:	701a      	strb	r2, [r3, #0]
 80187ee:	6878      	ldr	r0, [r7, #4]
 80187f0:	f00a fac8 	bl	8022d84 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80187f4:	bf00      	nop
 80187f6:	3708      	adds	r7, #8
 80187f8:	46bd      	mov	sp, r7
 80187fa:	bd80      	pop	{r7, pc}
 80187fc:	2000bfb9 	.word	0x2000bfb9
 8018800:	0801879d 	.word	0x0801879d

08018804 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8018804:	b480      	push	{r7}
 8018806:	b085      	sub	sp, #20
 8018808:	af00      	add	r7, sp, #0
 801880a:	60f8      	str	r0, [r7, #12]
 801880c:	60b9      	str	r1, [r7, #8]
 801880e:	4611      	mov	r1, r2
 8018810:	461a      	mov	r2, r3
 8018812:	460b      	mov	r3, r1
 8018814:	80fb      	strh	r3, [r7, #6]
 8018816:	4613      	mov	r3, r2
 8018818:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	2200      	movs	r2, #0
 801881e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8018820:	68fb      	ldr	r3, [r7, #12]
 8018822:	68ba      	ldr	r2, [r7, #8]
 8018824:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8018826:	68fb      	ldr	r3, [r7, #12]
 8018828:	88fa      	ldrh	r2, [r7, #6]
 801882a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 801882c:	68fb      	ldr	r3, [r7, #12]
 801882e:	88ba      	ldrh	r2, [r7, #4]
 8018830:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8018832:	8b3b      	ldrh	r3, [r7, #24]
 8018834:	b2da      	uxtb	r2, r3
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 801883a:	68fb      	ldr	r3, [r7, #12]
 801883c:	7f3a      	ldrb	r2, [r7, #28]
 801883e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8018840:	68fb      	ldr	r3, [r7, #12]
 8018842:	2201      	movs	r2, #1
 8018844:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8018846:	68fb      	ldr	r3, [r7, #12]
 8018848:	2200      	movs	r2, #0
 801884a:	73da      	strb	r2, [r3, #15]
}
 801884c:	bf00      	nop
 801884e:	3714      	adds	r7, #20
 8018850:	46bd      	mov	sp, r7
 8018852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018856:	4770      	bx	lr

08018858 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8018858:	b580      	push	{r7, lr}
 801885a:	b08c      	sub	sp, #48	; 0x30
 801885c:	af02      	add	r7, sp, #8
 801885e:	4603      	mov	r3, r0
 8018860:	71fb      	strb	r3, [r7, #7]
 8018862:	460b      	mov	r3, r1
 8018864:	80bb      	strh	r3, [r7, #4]
 8018866:	4613      	mov	r3, r2
 8018868:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 801886a:	79fb      	ldrb	r3, [r7, #7]
 801886c:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 801886e:	887b      	ldrh	r3, [r7, #2]
 8018870:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8018874:	d07f      	beq.n	8018976 <pbuf_alloc+0x11e>
 8018876:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801887a:	f300 80c8 	bgt.w	8018a0e <pbuf_alloc+0x1b6>
 801887e:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018882:	d010      	beq.n	80188a6 <pbuf_alloc+0x4e>
 8018884:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8018888:	f300 80c1 	bgt.w	8018a0e <pbuf_alloc+0x1b6>
 801888c:	2b01      	cmp	r3, #1
 801888e:	d002      	beq.n	8018896 <pbuf_alloc+0x3e>
 8018890:	2b41      	cmp	r3, #65	; 0x41
 8018892:	f040 80bc 	bne.w	8018a0e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8018896:	887a      	ldrh	r2, [r7, #2]
 8018898:	88bb      	ldrh	r3, [r7, #4]
 801889a:	4619      	mov	r1, r3
 801889c:	2000      	movs	r0, #0
 801889e:	f000 f8d1 	bl	8018a44 <pbuf_alloc_reference>
 80188a2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 80188a4:	e0bd      	b.n	8018a22 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 80188a6:	2300      	movs	r3, #0
 80188a8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 80188aa:	2300      	movs	r3, #0
 80188ac:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 80188ae:	88bb      	ldrh	r3, [r7, #4]
 80188b0:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 80188b2:	200c      	movs	r0, #12
 80188b4:	f7ff fb9a 	bl	8017fec <memp_malloc>
 80188b8:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 80188ba:	693b      	ldr	r3, [r7, #16]
 80188bc:	2b00      	cmp	r3, #0
 80188be:	d109      	bne.n	80188d4 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 80188c0:	f7ff ff76 	bl	80187b0 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 80188c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188c6:	2b00      	cmp	r3, #0
 80188c8:	d002      	beq.n	80188d0 <pbuf_alloc+0x78>
            pbuf_free(p);
 80188ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80188cc:	f000 faa8 	bl	8018e20 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 80188d0:	2300      	movs	r3, #0
 80188d2:	e0a7      	b.n	8018a24 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 80188d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188d6:	3303      	adds	r3, #3
 80188d8:	b29b      	uxth	r3, r3
 80188da:	f023 0303 	bic.w	r3, r3, #3
 80188de:	b29b      	uxth	r3, r3
 80188e0:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 80188e4:	b29b      	uxth	r3, r3
 80188e6:	8b7a      	ldrh	r2, [r7, #26]
 80188e8:	4293      	cmp	r3, r2
 80188ea:	bf28      	it	cs
 80188ec:	4613      	movcs	r3, r2
 80188ee:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80188f0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80188f2:	3310      	adds	r3, #16
 80188f4:	693a      	ldr	r2, [r7, #16]
 80188f6:	4413      	add	r3, r2
 80188f8:	3303      	adds	r3, #3
 80188fa:	f023 0303 	bic.w	r3, r3, #3
 80188fe:	4618      	mov	r0, r3
 8018900:	89f9      	ldrh	r1, [r7, #14]
 8018902:	8b7a      	ldrh	r2, [r7, #26]
 8018904:	2300      	movs	r3, #0
 8018906:	9301      	str	r3, [sp, #4]
 8018908:	887b      	ldrh	r3, [r7, #2]
 801890a:	9300      	str	r3, [sp, #0]
 801890c:	460b      	mov	r3, r1
 801890e:	4601      	mov	r1, r0
 8018910:	6938      	ldr	r0, [r7, #16]
 8018912:	f7ff ff77 	bl	8018804 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8018916:	693b      	ldr	r3, [r7, #16]
 8018918:	685b      	ldr	r3, [r3, #4]
 801891a:	f003 0303 	and.w	r3, r3, #3
 801891e:	2b00      	cmp	r3, #0
 8018920:	d006      	beq.n	8018930 <pbuf_alloc+0xd8>
 8018922:	4b42      	ldr	r3, [pc, #264]	; (8018a2c <pbuf_alloc+0x1d4>)
 8018924:	f44f 7280 	mov.w	r2, #256	; 0x100
 8018928:	4941      	ldr	r1, [pc, #260]	; (8018a30 <pbuf_alloc+0x1d8>)
 801892a:	4842      	ldr	r0, [pc, #264]	; (8018a34 <pbuf_alloc+0x1dc>)
 801892c:	f00b fcb0 	bl	8024290 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8018930:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018932:	3303      	adds	r3, #3
 8018934:	f023 0303 	bic.w	r3, r3, #3
 8018938:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 801893c:	d106      	bne.n	801894c <pbuf_alloc+0xf4>
 801893e:	4b3b      	ldr	r3, [pc, #236]	; (8018a2c <pbuf_alloc+0x1d4>)
 8018940:	f44f 7281 	mov.w	r2, #258	; 0x102
 8018944:	493c      	ldr	r1, [pc, #240]	; (8018a38 <pbuf_alloc+0x1e0>)
 8018946:	483b      	ldr	r0, [pc, #236]	; (8018a34 <pbuf_alloc+0x1dc>)
 8018948:	f00b fca2 	bl	8024290 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 801894c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801894e:	2b00      	cmp	r3, #0
 8018950:	d102      	bne.n	8018958 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8018952:	693b      	ldr	r3, [r7, #16]
 8018954:	627b      	str	r3, [r7, #36]	; 0x24
 8018956:	e002      	b.n	801895e <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8018958:	69fb      	ldr	r3, [r7, #28]
 801895a:	693a      	ldr	r2, [r7, #16]
 801895c:	601a      	str	r2, [r3, #0]
        }
        last = q;
 801895e:	693b      	ldr	r3, [r7, #16]
 8018960:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 8018962:	8b7a      	ldrh	r2, [r7, #26]
 8018964:	89fb      	ldrh	r3, [r7, #14]
 8018966:	1ad3      	subs	r3, r2, r3
 8018968:	837b      	strh	r3, [r7, #26]
        offset = 0;
 801896a:	2300      	movs	r3, #0
 801896c:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 801896e:	8b7b      	ldrh	r3, [r7, #26]
 8018970:	2b00      	cmp	r3, #0
 8018972:	d19e      	bne.n	80188b2 <pbuf_alloc+0x5a>
      break;
 8018974:	e055      	b.n	8018a22 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 8018976:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8018978:	3303      	adds	r3, #3
 801897a:	b29b      	uxth	r3, r3
 801897c:	f023 0303 	bic.w	r3, r3, #3
 8018980:	b29a      	uxth	r2, r3
 8018982:	88bb      	ldrh	r3, [r7, #4]
 8018984:	3303      	adds	r3, #3
 8018986:	b29b      	uxth	r3, r3
 8018988:	f023 0303 	bic.w	r3, r3, #3
 801898c:	b29b      	uxth	r3, r3
 801898e:	4413      	add	r3, r2
 8018990:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 8018992:	8b3b      	ldrh	r3, [r7, #24]
 8018994:	3310      	adds	r3, #16
 8018996:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8018998:	8b3a      	ldrh	r2, [r7, #24]
 801899a:	88bb      	ldrh	r3, [r7, #4]
 801899c:	3303      	adds	r3, #3
 801899e:	f023 0303 	bic.w	r3, r3, #3
 80189a2:	429a      	cmp	r2, r3
 80189a4:	d306      	bcc.n	80189b4 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 80189a6:	8afa      	ldrh	r2, [r7, #22]
 80189a8:	88bb      	ldrh	r3, [r7, #4]
 80189aa:	3303      	adds	r3, #3
 80189ac:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 80189b0:	429a      	cmp	r2, r3
 80189b2:	d201      	bcs.n	80189b8 <pbuf_alloc+0x160>
        return NULL;
 80189b4:	2300      	movs	r3, #0
 80189b6:	e035      	b.n	8018a24 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 80189b8:	8afb      	ldrh	r3, [r7, #22]
 80189ba:	4618      	mov	r0, r3
 80189bc:	f7ff f972 	bl	8017ca4 <mem_malloc>
 80189c0:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 80189c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189c4:	2b00      	cmp	r3, #0
 80189c6:	d101      	bne.n	80189cc <pbuf_alloc+0x174>
        return NULL;
 80189c8:	2300      	movs	r3, #0
 80189ca:	e02b      	b.n	8018a24 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 80189cc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80189ce:	3310      	adds	r3, #16
 80189d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80189d2:	4413      	add	r3, r2
 80189d4:	3303      	adds	r3, #3
 80189d6:	f023 0303 	bic.w	r3, r3, #3
 80189da:	4618      	mov	r0, r3
 80189dc:	88b9      	ldrh	r1, [r7, #4]
 80189de:	88ba      	ldrh	r2, [r7, #4]
 80189e0:	2300      	movs	r3, #0
 80189e2:	9301      	str	r3, [sp, #4]
 80189e4:	887b      	ldrh	r3, [r7, #2]
 80189e6:	9300      	str	r3, [sp, #0]
 80189e8:	460b      	mov	r3, r1
 80189ea:	4601      	mov	r1, r0
 80189ec:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80189ee:	f7ff ff09 	bl	8018804 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80189f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80189f4:	685b      	ldr	r3, [r3, #4]
 80189f6:	f003 0303 	and.w	r3, r3, #3
 80189fa:	2b00      	cmp	r3, #0
 80189fc:	d010      	beq.n	8018a20 <pbuf_alloc+0x1c8>
 80189fe:	4b0b      	ldr	r3, [pc, #44]	; (8018a2c <pbuf_alloc+0x1d4>)
 8018a00:	f44f 7291 	mov.w	r2, #290	; 0x122
 8018a04:	490d      	ldr	r1, [pc, #52]	; (8018a3c <pbuf_alloc+0x1e4>)
 8018a06:	480b      	ldr	r0, [pc, #44]	; (8018a34 <pbuf_alloc+0x1dc>)
 8018a08:	f00b fc42 	bl	8024290 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 8018a0c:	e008      	b.n	8018a20 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 8018a0e:	4b07      	ldr	r3, [pc, #28]	; (8018a2c <pbuf_alloc+0x1d4>)
 8018a10:	f240 1227 	movw	r2, #295	; 0x127
 8018a14:	490a      	ldr	r1, [pc, #40]	; (8018a40 <pbuf_alloc+0x1e8>)
 8018a16:	4807      	ldr	r0, [pc, #28]	; (8018a34 <pbuf_alloc+0x1dc>)
 8018a18:	f00b fc3a 	bl	8024290 <iprintf>
      return NULL;
 8018a1c:	2300      	movs	r3, #0
 8018a1e:	e001      	b.n	8018a24 <pbuf_alloc+0x1cc>
      break;
 8018a20:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 8018a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8018a24:	4618      	mov	r0, r3
 8018a26:	3728      	adds	r7, #40	; 0x28
 8018a28:	46bd      	mov	sp, r7
 8018a2a:	bd80      	pop	{r7, pc}
 8018a2c:	080268ec 	.word	0x080268ec
 8018a30:	0802691c 	.word	0x0802691c
 8018a34:	0802694c 	.word	0x0802694c
 8018a38:	08026974 	.word	0x08026974
 8018a3c:	080269a8 	.word	0x080269a8
 8018a40:	080269d4 	.word	0x080269d4

08018a44 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 8018a44:	b580      	push	{r7, lr}
 8018a46:	b086      	sub	sp, #24
 8018a48:	af02      	add	r7, sp, #8
 8018a4a:	6078      	str	r0, [r7, #4]
 8018a4c:	460b      	mov	r3, r1
 8018a4e:	807b      	strh	r3, [r7, #2]
 8018a50:	4613      	mov	r3, r2
 8018a52:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 8018a54:	883b      	ldrh	r3, [r7, #0]
 8018a56:	2b41      	cmp	r3, #65	; 0x41
 8018a58:	d009      	beq.n	8018a6e <pbuf_alloc_reference+0x2a>
 8018a5a:	883b      	ldrh	r3, [r7, #0]
 8018a5c:	2b01      	cmp	r3, #1
 8018a5e:	d006      	beq.n	8018a6e <pbuf_alloc_reference+0x2a>
 8018a60:	4b0f      	ldr	r3, [pc, #60]	; (8018aa0 <pbuf_alloc_reference+0x5c>)
 8018a62:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 8018a66:	490f      	ldr	r1, [pc, #60]	; (8018aa4 <pbuf_alloc_reference+0x60>)
 8018a68:	480f      	ldr	r0, [pc, #60]	; (8018aa8 <pbuf_alloc_reference+0x64>)
 8018a6a:	f00b fc11 	bl	8024290 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8018a6e:	200b      	movs	r0, #11
 8018a70:	f7ff fabc 	bl	8017fec <memp_malloc>
 8018a74:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 8018a76:	68fb      	ldr	r3, [r7, #12]
 8018a78:	2b00      	cmp	r3, #0
 8018a7a:	d101      	bne.n	8018a80 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8018a7c:	2300      	movs	r3, #0
 8018a7e:	e00b      	b.n	8018a98 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8018a80:	8879      	ldrh	r1, [r7, #2]
 8018a82:	887a      	ldrh	r2, [r7, #2]
 8018a84:	2300      	movs	r3, #0
 8018a86:	9301      	str	r3, [sp, #4]
 8018a88:	883b      	ldrh	r3, [r7, #0]
 8018a8a:	9300      	str	r3, [sp, #0]
 8018a8c:	460b      	mov	r3, r1
 8018a8e:	6879      	ldr	r1, [r7, #4]
 8018a90:	68f8      	ldr	r0, [r7, #12]
 8018a92:	f7ff feb7 	bl	8018804 <pbuf_init_alloced_pbuf>
  return p;
 8018a96:	68fb      	ldr	r3, [r7, #12]
}
 8018a98:	4618      	mov	r0, r3
 8018a9a:	3710      	adds	r7, #16
 8018a9c:	46bd      	mov	sp, r7
 8018a9e:	bd80      	pop	{r7, pc}
 8018aa0:	080268ec 	.word	0x080268ec
 8018aa4:	080269f0 	.word	0x080269f0
 8018aa8:	0802694c 	.word	0x0802694c

08018aac <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8018aac:	b580      	push	{r7, lr}
 8018aae:	b088      	sub	sp, #32
 8018ab0:	af02      	add	r7, sp, #8
 8018ab2:	607b      	str	r3, [r7, #4]
 8018ab4:	4603      	mov	r3, r0
 8018ab6:	73fb      	strb	r3, [r7, #15]
 8018ab8:	460b      	mov	r3, r1
 8018aba:	81bb      	strh	r3, [r7, #12]
 8018abc:	4613      	mov	r3, r2
 8018abe:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8018ac0:	7bfb      	ldrb	r3, [r7, #15]
 8018ac2:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 8018ac4:	8a7b      	ldrh	r3, [r7, #18]
 8018ac6:	3303      	adds	r3, #3
 8018ac8:	f023 0203 	bic.w	r2, r3, #3
 8018acc:	89bb      	ldrh	r3, [r7, #12]
 8018ace:	441a      	add	r2, r3
 8018ad0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018ad2:	429a      	cmp	r2, r3
 8018ad4:	d901      	bls.n	8018ada <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 8018ad6:	2300      	movs	r3, #0
 8018ad8:	e018      	b.n	8018b0c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8018ada:	6a3b      	ldr	r3, [r7, #32]
 8018adc:	2b00      	cmp	r3, #0
 8018ade:	d007      	beq.n	8018af0 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8018ae0:	8a7b      	ldrh	r3, [r7, #18]
 8018ae2:	3303      	adds	r3, #3
 8018ae4:	f023 0303 	bic.w	r3, r3, #3
 8018ae8:	6a3a      	ldr	r2, [r7, #32]
 8018aea:	4413      	add	r3, r2
 8018aec:	617b      	str	r3, [r7, #20]
 8018aee:	e001      	b.n	8018af4 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8018af0:	2300      	movs	r3, #0
 8018af2:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 8018af4:	6878      	ldr	r0, [r7, #4]
 8018af6:	89b9      	ldrh	r1, [r7, #12]
 8018af8:	89ba      	ldrh	r2, [r7, #12]
 8018afa:	2302      	movs	r3, #2
 8018afc:	9301      	str	r3, [sp, #4]
 8018afe:	897b      	ldrh	r3, [r7, #10]
 8018b00:	9300      	str	r3, [sp, #0]
 8018b02:	460b      	mov	r3, r1
 8018b04:	6979      	ldr	r1, [r7, #20]
 8018b06:	f7ff fe7d 	bl	8018804 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 8018b0a:	687b      	ldr	r3, [r7, #4]
}
 8018b0c:	4618      	mov	r0, r3
 8018b0e:	3718      	adds	r7, #24
 8018b10:	46bd      	mov	sp, r7
 8018b12:	bd80      	pop	{r7, pc}

08018b14 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 8018b14:	b580      	push	{r7, lr}
 8018b16:	b084      	sub	sp, #16
 8018b18:	af00      	add	r7, sp, #0
 8018b1a:	6078      	str	r0, [r7, #4]
 8018b1c:	460b      	mov	r3, r1
 8018b1e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	2b00      	cmp	r3, #0
 8018b24:	d106      	bne.n	8018b34 <pbuf_realloc+0x20>
 8018b26:	4b3a      	ldr	r3, [pc, #232]	; (8018c10 <pbuf_realloc+0xfc>)
 8018b28:	f44f 72cc 	mov.w	r2, #408	; 0x198
 8018b2c:	4939      	ldr	r1, [pc, #228]	; (8018c14 <pbuf_realloc+0x100>)
 8018b2e:	483a      	ldr	r0, [pc, #232]	; (8018c18 <pbuf_realloc+0x104>)
 8018b30:	f00b fbae 	bl	8024290 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 8018b34:	687b      	ldr	r3, [r7, #4]
 8018b36:	891b      	ldrh	r3, [r3, #8]
 8018b38:	887a      	ldrh	r2, [r7, #2]
 8018b3a:	429a      	cmp	r2, r3
 8018b3c:	d263      	bcs.n	8018c06 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	891a      	ldrh	r2, [r3, #8]
 8018b42:	887b      	ldrh	r3, [r7, #2]
 8018b44:	1ad3      	subs	r3, r2, r3
 8018b46:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8018b48:	887b      	ldrh	r3, [r7, #2]
 8018b4a:	817b      	strh	r3, [r7, #10]
  q = p;
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8018b50:	e018      	b.n	8018b84 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8018b52:	68fb      	ldr	r3, [r7, #12]
 8018b54:	895b      	ldrh	r3, [r3, #10]
 8018b56:	897a      	ldrh	r2, [r7, #10]
 8018b58:	1ad3      	subs	r3, r2, r3
 8018b5a:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8018b5c:	68fb      	ldr	r3, [r7, #12]
 8018b5e:	891a      	ldrh	r2, [r3, #8]
 8018b60:	893b      	ldrh	r3, [r7, #8]
 8018b62:	1ad3      	subs	r3, r2, r3
 8018b64:	b29a      	uxth	r2, r3
 8018b66:	68fb      	ldr	r3, [r7, #12]
 8018b68:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8018b6a:	68fb      	ldr	r3, [r7, #12]
 8018b6c:	681b      	ldr	r3, [r3, #0]
 8018b6e:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8018b70:	68fb      	ldr	r3, [r7, #12]
 8018b72:	2b00      	cmp	r3, #0
 8018b74:	d106      	bne.n	8018b84 <pbuf_realloc+0x70>
 8018b76:	4b26      	ldr	r3, [pc, #152]	; (8018c10 <pbuf_realloc+0xfc>)
 8018b78:	f240 12af 	movw	r2, #431	; 0x1af
 8018b7c:	4927      	ldr	r1, [pc, #156]	; (8018c1c <pbuf_realloc+0x108>)
 8018b7e:	4826      	ldr	r0, [pc, #152]	; (8018c18 <pbuf_realloc+0x104>)
 8018b80:	f00b fb86 	bl	8024290 <iprintf>
  while (rem_len > q->len) {
 8018b84:	68fb      	ldr	r3, [r7, #12]
 8018b86:	895b      	ldrh	r3, [r3, #10]
 8018b88:	897a      	ldrh	r2, [r7, #10]
 8018b8a:	429a      	cmp	r2, r3
 8018b8c:	d8e1      	bhi.n	8018b52 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8018b8e:	68fb      	ldr	r3, [r7, #12]
 8018b90:	7b1b      	ldrb	r3, [r3, #12]
 8018b92:	f003 030f 	and.w	r3, r3, #15
 8018b96:	2b00      	cmp	r3, #0
 8018b98:	d121      	bne.n	8018bde <pbuf_realloc+0xca>
 8018b9a:	68fb      	ldr	r3, [r7, #12]
 8018b9c:	895b      	ldrh	r3, [r3, #10]
 8018b9e:	897a      	ldrh	r2, [r7, #10]
 8018ba0:	429a      	cmp	r2, r3
 8018ba2:	d01c      	beq.n	8018bde <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8018ba4:	68fb      	ldr	r3, [r7, #12]
 8018ba6:	7b5b      	ldrb	r3, [r3, #13]
 8018ba8:	f003 0302 	and.w	r3, r3, #2
 8018bac:	2b00      	cmp	r3, #0
 8018bae:	d116      	bne.n	8018bde <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8018bb0:	68fb      	ldr	r3, [r7, #12]
 8018bb2:	685a      	ldr	r2, [r3, #4]
 8018bb4:	68fb      	ldr	r3, [r7, #12]
 8018bb6:	1ad3      	subs	r3, r2, r3
 8018bb8:	b29a      	uxth	r2, r3
 8018bba:	897b      	ldrh	r3, [r7, #10]
 8018bbc:	4413      	add	r3, r2
 8018bbe:	b29b      	uxth	r3, r3
 8018bc0:	4619      	mov	r1, r3
 8018bc2:	68f8      	ldr	r0, [r7, #12]
 8018bc4:	f7fe ff64 	bl	8017a90 <mem_trim>
 8018bc8:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	2b00      	cmp	r3, #0
 8018bce:	d106      	bne.n	8018bde <pbuf_realloc+0xca>
 8018bd0:	4b0f      	ldr	r3, [pc, #60]	; (8018c10 <pbuf_realloc+0xfc>)
 8018bd2:	f240 12bd 	movw	r2, #445	; 0x1bd
 8018bd6:	4912      	ldr	r1, [pc, #72]	; (8018c20 <pbuf_realloc+0x10c>)
 8018bd8:	480f      	ldr	r0, [pc, #60]	; (8018c18 <pbuf_realloc+0x104>)
 8018bda:	f00b fb59 	bl	8024290 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8018bde:	68fb      	ldr	r3, [r7, #12]
 8018be0:	897a      	ldrh	r2, [r7, #10]
 8018be2:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8018be4:	68fb      	ldr	r3, [r7, #12]
 8018be6:	895a      	ldrh	r2, [r3, #10]
 8018be8:	68fb      	ldr	r3, [r7, #12]
 8018bea:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8018bec:	68fb      	ldr	r3, [r7, #12]
 8018bee:	681b      	ldr	r3, [r3, #0]
 8018bf0:	2b00      	cmp	r3, #0
 8018bf2:	d004      	beq.n	8018bfe <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8018bf4:	68fb      	ldr	r3, [r7, #12]
 8018bf6:	681b      	ldr	r3, [r3, #0]
 8018bf8:	4618      	mov	r0, r3
 8018bfa:	f000 f911 	bl	8018e20 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8018bfe:	68fb      	ldr	r3, [r7, #12]
 8018c00:	2200      	movs	r2, #0
 8018c02:	601a      	str	r2, [r3, #0]
 8018c04:	e000      	b.n	8018c08 <pbuf_realloc+0xf4>
    return;
 8018c06:	bf00      	nop

}
 8018c08:	3710      	adds	r7, #16
 8018c0a:	46bd      	mov	sp, r7
 8018c0c:	bd80      	pop	{r7, pc}
 8018c0e:	bf00      	nop
 8018c10:	080268ec 	.word	0x080268ec
 8018c14:	08026a04 	.word	0x08026a04
 8018c18:	0802694c 	.word	0x0802694c
 8018c1c:	08026a1c 	.word	0x08026a1c
 8018c20:	08026a34 	.word	0x08026a34

08018c24 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8018c24:	b580      	push	{r7, lr}
 8018c26:	b086      	sub	sp, #24
 8018c28:	af00      	add	r7, sp, #0
 8018c2a:	60f8      	str	r0, [r7, #12]
 8018c2c:	60b9      	str	r1, [r7, #8]
 8018c2e:	4613      	mov	r3, r2
 8018c30:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018c32:	68fb      	ldr	r3, [r7, #12]
 8018c34:	2b00      	cmp	r3, #0
 8018c36:	d106      	bne.n	8018c46 <pbuf_add_header_impl+0x22>
 8018c38:	4b2b      	ldr	r3, [pc, #172]	; (8018ce8 <pbuf_add_header_impl+0xc4>)
 8018c3a:	f240 12df 	movw	r2, #479	; 0x1df
 8018c3e:	492b      	ldr	r1, [pc, #172]	; (8018cec <pbuf_add_header_impl+0xc8>)
 8018c40:	482b      	ldr	r0, [pc, #172]	; (8018cf0 <pbuf_add_header_impl+0xcc>)
 8018c42:	f00b fb25 	bl	8024290 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	2b00      	cmp	r3, #0
 8018c4a:	d003      	beq.n	8018c54 <pbuf_add_header_impl+0x30>
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018c52:	d301      	bcc.n	8018c58 <pbuf_add_header_impl+0x34>
    return 1;
 8018c54:	2301      	movs	r3, #1
 8018c56:	e043      	b.n	8018ce0 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8018c58:	68bb      	ldr	r3, [r7, #8]
 8018c5a:	2b00      	cmp	r3, #0
 8018c5c:	d101      	bne.n	8018c62 <pbuf_add_header_impl+0x3e>
    return 0;
 8018c5e:	2300      	movs	r3, #0
 8018c60:	e03e      	b.n	8018ce0 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8018c62:	68bb      	ldr	r3, [r7, #8]
 8018c64:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8018c66:	68fb      	ldr	r3, [r7, #12]
 8018c68:	891a      	ldrh	r2, [r3, #8]
 8018c6a:	8a7b      	ldrh	r3, [r7, #18]
 8018c6c:	4413      	add	r3, r2
 8018c6e:	b29b      	uxth	r3, r3
 8018c70:	8a7a      	ldrh	r2, [r7, #18]
 8018c72:	429a      	cmp	r2, r3
 8018c74:	d901      	bls.n	8018c7a <pbuf_add_header_impl+0x56>
    return 1;
 8018c76:	2301      	movs	r3, #1
 8018c78:	e032      	b.n	8018ce0 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8018c7a:	68fb      	ldr	r3, [r7, #12]
 8018c7c:	7b1b      	ldrb	r3, [r3, #12]
 8018c7e:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8018c80:	8a3b      	ldrh	r3, [r7, #16]
 8018c82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8018c86:	2b00      	cmp	r3, #0
 8018c88:	d00c      	beq.n	8018ca4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8018c8a:	68fb      	ldr	r3, [r7, #12]
 8018c8c:	685a      	ldr	r2, [r3, #4]
 8018c8e:	68bb      	ldr	r3, [r7, #8]
 8018c90:	425b      	negs	r3, r3
 8018c92:	4413      	add	r3, r2
 8018c94:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8018c96:	68fb      	ldr	r3, [r7, #12]
 8018c98:	3310      	adds	r3, #16
 8018c9a:	697a      	ldr	r2, [r7, #20]
 8018c9c:	429a      	cmp	r2, r3
 8018c9e:	d20d      	bcs.n	8018cbc <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8018ca0:	2301      	movs	r3, #1
 8018ca2:	e01d      	b.n	8018ce0 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8018ca4:	79fb      	ldrb	r3, [r7, #7]
 8018ca6:	2b00      	cmp	r3, #0
 8018ca8:	d006      	beq.n	8018cb8 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	685a      	ldr	r2, [r3, #4]
 8018cae:	68bb      	ldr	r3, [r7, #8]
 8018cb0:	425b      	negs	r3, r3
 8018cb2:	4413      	add	r3, r2
 8018cb4:	617b      	str	r3, [r7, #20]
 8018cb6:	e001      	b.n	8018cbc <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8018cb8:	2301      	movs	r3, #1
 8018cba:	e011      	b.n	8018ce0 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8018cbc:	68fb      	ldr	r3, [r7, #12]
 8018cbe:	697a      	ldr	r2, [r7, #20]
 8018cc0:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8018cc2:	68fb      	ldr	r3, [r7, #12]
 8018cc4:	895a      	ldrh	r2, [r3, #10]
 8018cc6:	8a7b      	ldrh	r3, [r7, #18]
 8018cc8:	4413      	add	r3, r2
 8018cca:	b29a      	uxth	r2, r3
 8018ccc:	68fb      	ldr	r3, [r7, #12]
 8018cce:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8018cd0:	68fb      	ldr	r3, [r7, #12]
 8018cd2:	891a      	ldrh	r2, [r3, #8]
 8018cd4:	8a7b      	ldrh	r3, [r7, #18]
 8018cd6:	4413      	add	r3, r2
 8018cd8:	b29a      	uxth	r2, r3
 8018cda:	68fb      	ldr	r3, [r7, #12]
 8018cdc:	811a      	strh	r2, [r3, #8]


  return 0;
 8018cde:	2300      	movs	r3, #0
}
 8018ce0:	4618      	mov	r0, r3
 8018ce2:	3718      	adds	r7, #24
 8018ce4:	46bd      	mov	sp, r7
 8018ce6:	bd80      	pop	{r7, pc}
 8018ce8:	080268ec 	.word	0x080268ec
 8018cec:	08026a50 	.word	0x08026a50
 8018cf0:	0802694c 	.word	0x0802694c

08018cf4 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8018cf4:	b580      	push	{r7, lr}
 8018cf6:	b082      	sub	sp, #8
 8018cf8:	af00      	add	r7, sp, #0
 8018cfa:	6078      	str	r0, [r7, #4]
 8018cfc:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8018cfe:	2200      	movs	r2, #0
 8018d00:	6839      	ldr	r1, [r7, #0]
 8018d02:	6878      	ldr	r0, [r7, #4]
 8018d04:	f7ff ff8e 	bl	8018c24 <pbuf_add_header_impl>
 8018d08:	4603      	mov	r3, r0
}
 8018d0a:	4618      	mov	r0, r3
 8018d0c:	3708      	adds	r7, #8
 8018d0e:	46bd      	mov	sp, r7
 8018d10:	bd80      	pop	{r7, pc}
	...

08018d14 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b084      	sub	sp, #16
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	6078      	str	r0, [r7, #4]
 8018d1c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	2b00      	cmp	r3, #0
 8018d22:	d106      	bne.n	8018d32 <pbuf_remove_header+0x1e>
 8018d24:	4b20      	ldr	r3, [pc, #128]	; (8018da8 <pbuf_remove_header+0x94>)
 8018d26:	f240 224b 	movw	r2, #587	; 0x24b
 8018d2a:	4920      	ldr	r1, [pc, #128]	; (8018dac <pbuf_remove_header+0x98>)
 8018d2c:	4820      	ldr	r0, [pc, #128]	; (8018db0 <pbuf_remove_header+0x9c>)
 8018d2e:	f00b faaf 	bl	8024290 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d003      	beq.n	8018d40 <pbuf_remove_header+0x2c>
 8018d38:	683b      	ldr	r3, [r7, #0]
 8018d3a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8018d3e:	d301      	bcc.n	8018d44 <pbuf_remove_header+0x30>
    return 1;
 8018d40:	2301      	movs	r3, #1
 8018d42:	e02c      	b.n	8018d9e <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8018d44:	683b      	ldr	r3, [r7, #0]
 8018d46:	2b00      	cmp	r3, #0
 8018d48:	d101      	bne.n	8018d4e <pbuf_remove_header+0x3a>
    return 0;
 8018d4a:	2300      	movs	r3, #0
 8018d4c:	e027      	b.n	8018d9e <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8018d4e:	683b      	ldr	r3, [r7, #0]
 8018d50:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8018d52:	687b      	ldr	r3, [r7, #4]
 8018d54:	895b      	ldrh	r3, [r3, #10]
 8018d56:	89fa      	ldrh	r2, [r7, #14]
 8018d58:	429a      	cmp	r2, r3
 8018d5a:	d908      	bls.n	8018d6e <pbuf_remove_header+0x5a>
 8018d5c:	4b12      	ldr	r3, [pc, #72]	; (8018da8 <pbuf_remove_header+0x94>)
 8018d5e:	f240 2255 	movw	r2, #597	; 0x255
 8018d62:	4914      	ldr	r1, [pc, #80]	; (8018db4 <pbuf_remove_header+0xa0>)
 8018d64:	4812      	ldr	r0, [pc, #72]	; (8018db0 <pbuf_remove_header+0x9c>)
 8018d66:	f00b fa93 	bl	8024290 <iprintf>
 8018d6a:	2301      	movs	r3, #1
 8018d6c:	e017      	b.n	8018d9e <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8018d6e:	687b      	ldr	r3, [r7, #4]
 8018d70:	685b      	ldr	r3, [r3, #4]
 8018d72:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8018d74:	687b      	ldr	r3, [r7, #4]
 8018d76:	685a      	ldr	r2, [r3, #4]
 8018d78:	683b      	ldr	r3, [r7, #0]
 8018d7a:	441a      	add	r2, r3
 8018d7c:	687b      	ldr	r3, [r7, #4]
 8018d7e:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8018d80:	687b      	ldr	r3, [r7, #4]
 8018d82:	895a      	ldrh	r2, [r3, #10]
 8018d84:	89fb      	ldrh	r3, [r7, #14]
 8018d86:	1ad3      	subs	r3, r2, r3
 8018d88:	b29a      	uxth	r2, r3
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	891a      	ldrh	r2, [r3, #8]
 8018d92:	89fb      	ldrh	r3, [r7, #14]
 8018d94:	1ad3      	subs	r3, r2, r3
 8018d96:	b29a      	uxth	r2, r3
 8018d98:	687b      	ldr	r3, [r7, #4]
 8018d9a:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8018d9c:	2300      	movs	r3, #0
}
 8018d9e:	4618      	mov	r0, r3
 8018da0:	3710      	adds	r7, #16
 8018da2:	46bd      	mov	sp, r7
 8018da4:	bd80      	pop	{r7, pc}
 8018da6:	bf00      	nop
 8018da8:	080268ec 	.word	0x080268ec
 8018dac:	08026a50 	.word	0x08026a50
 8018db0:	0802694c 	.word	0x0802694c
 8018db4:	08026a5c 	.word	0x08026a5c

08018db8 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8018db8:	b580      	push	{r7, lr}
 8018dba:	b082      	sub	sp, #8
 8018dbc:	af00      	add	r7, sp, #0
 8018dbe:	6078      	str	r0, [r7, #4]
 8018dc0:	460b      	mov	r3, r1
 8018dc2:	807b      	strh	r3, [r7, #2]
 8018dc4:	4613      	mov	r3, r2
 8018dc6:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8018dc8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018dcc:	2b00      	cmp	r3, #0
 8018dce:	da08      	bge.n	8018de2 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8018dd0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018dd4:	425b      	negs	r3, r3
 8018dd6:	4619      	mov	r1, r3
 8018dd8:	6878      	ldr	r0, [r7, #4]
 8018dda:	f7ff ff9b 	bl	8018d14 <pbuf_remove_header>
 8018dde:	4603      	mov	r3, r0
 8018de0:	e007      	b.n	8018df2 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8018de2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018de6:	787a      	ldrb	r2, [r7, #1]
 8018de8:	4619      	mov	r1, r3
 8018dea:	6878      	ldr	r0, [r7, #4]
 8018dec:	f7ff ff1a 	bl	8018c24 <pbuf_add_header_impl>
 8018df0:	4603      	mov	r3, r0
  }
}
 8018df2:	4618      	mov	r0, r3
 8018df4:	3708      	adds	r7, #8
 8018df6:	46bd      	mov	sp, r7
 8018df8:	bd80      	pop	{r7, pc}

08018dfa <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8018dfa:	b580      	push	{r7, lr}
 8018dfc:	b082      	sub	sp, #8
 8018dfe:	af00      	add	r7, sp, #0
 8018e00:	6078      	str	r0, [r7, #4]
 8018e02:	460b      	mov	r3, r1
 8018e04:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8018e06:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8018e0a:	2201      	movs	r2, #1
 8018e0c:	4619      	mov	r1, r3
 8018e0e:	6878      	ldr	r0, [r7, #4]
 8018e10:	f7ff ffd2 	bl	8018db8 <pbuf_header_impl>
 8018e14:	4603      	mov	r3, r0
}
 8018e16:	4618      	mov	r0, r3
 8018e18:	3708      	adds	r7, #8
 8018e1a:	46bd      	mov	sp, r7
 8018e1c:	bd80      	pop	{r7, pc}
	...

08018e20 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8018e20:	b580      	push	{r7, lr}
 8018e22:	b088      	sub	sp, #32
 8018e24:	af00      	add	r7, sp, #0
 8018e26:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8018e28:	687b      	ldr	r3, [r7, #4]
 8018e2a:	2b00      	cmp	r3, #0
 8018e2c:	d10b      	bne.n	8018e46 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8018e2e:	687b      	ldr	r3, [r7, #4]
 8018e30:	2b00      	cmp	r3, #0
 8018e32:	d106      	bne.n	8018e42 <pbuf_free+0x22>
 8018e34:	4b3b      	ldr	r3, [pc, #236]	; (8018f24 <pbuf_free+0x104>)
 8018e36:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8018e3a:	493b      	ldr	r1, [pc, #236]	; (8018f28 <pbuf_free+0x108>)
 8018e3c:	483b      	ldr	r0, [pc, #236]	; (8018f2c <pbuf_free+0x10c>)
 8018e3e:	f00b fa27 	bl	8024290 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8018e42:	2300      	movs	r3, #0
 8018e44:	e069      	b.n	8018f1a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8018e46:	2300      	movs	r3, #0
 8018e48:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8018e4a:	e062      	b.n	8018f12 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8018e4c:	f009 ff8c 	bl	8022d68 <sys_arch_protect>
 8018e50:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8018e52:	687b      	ldr	r3, [r7, #4]
 8018e54:	7b9b      	ldrb	r3, [r3, #14]
 8018e56:	2b00      	cmp	r3, #0
 8018e58:	d106      	bne.n	8018e68 <pbuf_free+0x48>
 8018e5a:	4b32      	ldr	r3, [pc, #200]	; (8018f24 <pbuf_free+0x104>)
 8018e5c:	f240 22f1 	movw	r2, #753	; 0x2f1
 8018e60:	4933      	ldr	r1, [pc, #204]	; (8018f30 <pbuf_free+0x110>)
 8018e62:	4832      	ldr	r0, [pc, #200]	; (8018f2c <pbuf_free+0x10c>)
 8018e64:	f00b fa14 	bl	8024290 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	7b9b      	ldrb	r3, [r3, #14]
 8018e6c:	3b01      	subs	r3, #1
 8018e6e:	b2da      	uxtb	r2, r3
 8018e70:	687b      	ldr	r3, [r7, #4]
 8018e72:	739a      	strb	r2, [r3, #14]
 8018e74:	687b      	ldr	r3, [r7, #4]
 8018e76:	7b9b      	ldrb	r3, [r3, #14]
 8018e78:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8018e7a:	69b8      	ldr	r0, [r7, #24]
 8018e7c:	f009 ff82 	bl	8022d84 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8018e80:	7dfb      	ldrb	r3, [r7, #23]
 8018e82:	2b00      	cmp	r3, #0
 8018e84:	d143      	bne.n	8018f0e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	681b      	ldr	r3, [r3, #0]
 8018e8a:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	7b1b      	ldrb	r3, [r3, #12]
 8018e90:	f003 030f 	and.w	r3, r3, #15
 8018e94:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8018e96:	687b      	ldr	r3, [r7, #4]
 8018e98:	7b5b      	ldrb	r3, [r3, #13]
 8018e9a:	f003 0302 	and.w	r3, r3, #2
 8018e9e:	2b00      	cmp	r3, #0
 8018ea0:	d011      	beq.n	8018ec6 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8018ea2:	687b      	ldr	r3, [r7, #4]
 8018ea4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8018ea6:	68bb      	ldr	r3, [r7, #8]
 8018ea8:	691b      	ldr	r3, [r3, #16]
 8018eaa:	2b00      	cmp	r3, #0
 8018eac:	d106      	bne.n	8018ebc <pbuf_free+0x9c>
 8018eae:	4b1d      	ldr	r3, [pc, #116]	; (8018f24 <pbuf_free+0x104>)
 8018eb0:	f240 22ff 	movw	r2, #767	; 0x2ff
 8018eb4:	491f      	ldr	r1, [pc, #124]	; (8018f34 <pbuf_free+0x114>)
 8018eb6:	481d      	ldr	r0, [pc, #116]	; (8018f2c <pbuf_free+0x10c>)
 8018eb8:	f00b f9ea 	bl	8024290 <iprintf>
        pc->custom_free_function(p);
 8018ebc:	68bb      	ldr	r3, [r7, #8]
 8018ebe:	691b      	ldr	r3, [r3, #16]
 8018ec0:	6878      	ldr	r0, [r7, #4]
 8018ec2:	4798      	blx	r3
 8018ec4:	e01d      	b.n	8018f02 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8018ec6:	7bfb      	ldrb	r3, [r7, #15]
 8018ec8:	2b02      	cmp	r3, #2
 8018eca:	d104      	bne.n	8018ed6 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8018ecc:	6879      	ldr	r1, [r7, #4]
 8018ece:	200c      	movs	r0, #12
 8018ed0:	f7ff f902 	bl	80180d8 <memp_free>
 8018ed4:	e015      	b.n	8018f02 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8018ed6:	7bfb      	ldrb	r3, [r7, #15]
 8018ed8:	2b01      	cmp	r3, #1
 8018eda:	d104      	bne.n	8018ee6 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8018edc:	6879      	ldr	r1, [r7, #4]
 8018ede:	200b      	movs	r0, #11
 8018ee0:	f7ff f8fa 	bl	80180d8 <memp_free>
 8018ee4:	e00d      	b.n	8018f02 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8018ee6:	7bfb      	ldrb	r3, [r7, #15]
 8018ee8:	2b00      	cmp	r3, #0
 8018eea:	d103      	bne.n	8018ef4 <pbuf_free+0xd4>
          mem_free(p);
 8018eec:	6878      	ldr	r0, [r7, #4]
 8018eee:	f7fe fd3f 	bl	8017970 <mem_free>
 8018ef2:	e006      	b.n	8018f02 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8018ef4:	4b0b      	ldr	r3, [pc, #44]	; (8018f24 <pbuf_free+0x104>)
 8018ef6:	f240 320f 	movw	r2, #783	; 0x30f
 8018efa:	490f      	ldr	r1, [pc, #60]	; (8018f38 <pbuf_free+0x118>)
 8018efc:	480b      	ldr	r0, [pc, #44]	; (8018f2c <pbuf_free+0x10c>)
 8018efe:	f00b f9c7 	bl	8024290 <iprintf>
        }
      }
      count++;
 8018f02:	7ffb      	ldrb	r3, [r7, #31]
 8018f04:	3301      	adds	r3, #1
 8018f06:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8018f08:	693b      	ldr	r3, [r7, #16]
 8018f0a:	607b      	str	r3, [r7, #4]
 8018f0c:	e001      	b.n	8018f12 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018f12:	687b      	ldr	r3, [r7, #4]
 8018f14:	2b00      	cmp	r3, #0
 8018f16:	d199      	bne.n	8018e4c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8018f18:	7ffb      	ldrb	r3, [r7, #31]
}
 8018f1a:	4618      	mov	r0, r3
 8018f1c:	3720      	adds	r7, #32
 8018f1e:	46bd      	mov	sp, r7
 8018f20:	bd80      	pop	{r7, pc}
 8018f22:	bf00      	nop
 8018f24:	080268ec 	.word	0x080268ec
 8018f28:	08026a50 	.word	0x08026a50
 8018f2c:	0802694c 	.word	0x0802694c
 8018f30:	08026a7c 	.word	0x08026a7c
 8018f34:	08026a94 	.word	0x08026a94
 8018f38:	08026ab8 	.word	0x08026ab8

08018f3c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8018f3c:	b480      	push	{r7}
 8018f3e:	b085      	sub	sp, #20
 8018f40:	af00      	add	r7, sp, #0
 8018f42:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8018f44:	2300      	movs	r3, #0
 8018f46:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8018f48:	e005      	b.n	8018f56 <pbuf_clen+0x1a>
    ++len;
 8018f4a:	89fb      	ldrh	r3, [r7, #14]
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8018f50:	687b      	ldr	r3, [r7, #4]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d1f6      	bne.n	8018f4a <pbuf_clen+0xe>
  }
  return len;
 8018f5c:	89fb      	ldrh	r3, [r7, #14]
}
 8018f5e:	4618      	mov	r0, r3
 8018f60:	3714      	adds	r7, #20
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr
	...

08018f6c <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8018f6c:	b580      	push	{r7, lr}
 8018f6e:	b084      	sub	sp, #16
 8018f70:	af00      	add	r7, sp, #0
 8018f72:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8018f74:	687b      	ldr	r3, [r7, #4]
 8018f76:	2b00      	cmp	r3, #0
 8018f78:	d016      	beq.n	8018fa8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8018f7a:	f009 fef5 	bl	8022d68 <sys_arch_protect>
 8018f7e:	60f8      	str	r0, [r7, #12]
 8018f80:	687b      	ldr	r3, [r7, #4]
 8018f82:	7b9b      	ldrb	r3, [r3, #14]
 8018f84:	3301      	adds	r3, #1
 8018f86:	b2da      	uxtb	r2, r3
 8018f88:	687b      	ldr	r3, [r7, #4]
 8018f8a:	739a      	strb	r2, [r3, #14]
 8018f8c:	68f8      	ldr	r0, [r7, #12]
 8018f8e:	f009 fef9 	bl	8022d84 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	7b9b      	ldrb	r3, [r3, #14]
 8018f96:	2b00      	cmp	r3, #0
 8018f98:	d106      	bne.n	8018fa8 <pbuf_ref+0x3c>
 8018f9a:	4b05      	ldr	r3, [pc, #20]	; (8018fb0 <pbuf_ref+0x44>)
 8018f9c:	f240 3242 	movw	r2, #834	; 0x342
 8018fa0:	4904      	ldr	r1, [pc, #16]	; (8018fb4 <pbuf_ref+0x48>)
 8018fa2:	4805      	ldr	r0, [pc, #20]	; (8018fb8 <pbuf_ref+0x4c>)
 8018fa4:	f00b f974 	bl	8024290 <iprintf>
  }
}
 8018fa8:	bf00      	nop
 8018faa:	3710      	adds	r7, #16
 8018fac:	46bd      	mov	sp, r7
 8018fae:	bd80      	pop	{r7, pc}
 8018fb0:	080268ec 	.word	0x080268ec
 8018fb4:	08026acc 	.word	0x08026acc
 8018fb8:	0802694c 	.word	0x0802694c

08018fbc <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8018fbc:	b580      	push	{r7, lr}
 8018fbe:	b084      	sub	sp, #16
 8018fc0:	af00      	add	r7, sp, #0
 8018fc2:	6078      	str	r0, [r7, #4]
 8018fc4:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8018fc6:	687b      	ldr	r3, [r7, #4]
 8018fc8:	2b00      	cmp	r3, #0
 8018fca:	d002      	beq.n	8018fd2 <pbuf_cat+0x16>
 8018fcc:	683b      	ldr	r3, [r7, #0]
 8018fce:	2b00      	cmp	r3, #0
 8018fd0:	d107      	bne.n	8018fe2 <pbuf_cat+0x26>
 8018fd2:	4b20      	ldr	r3, [pc, #128]	; (8019054 <pbuf_cat+0x98>)
 8018fd4:	f240 3259 	movw	r2, #857	; 0x359
 8018fd8:	491f      	ldr	r1, [pc, #124]	; (8019058 <pbuf_cat+0x9c>)
 8018fda:	4820      	ldr	r0, [pc, #128]	; (801905c <pbuf_cat+0xa0>)
 8018fdc:	f00b f958 	bl	8024290 <iprintf>
 8018fe0:	e034      	b.n	801904c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8018fe2:	687b      	ldr	r3, [r7, #4]
 8018fe4:	60fb      	str	r3, [r7, #12]
 8018fe6:	e00a      	b.n	8018ffe <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8018fe8:	68fb      	ldr	r3, [r7, #12]
 8018fea:	891a      	ldrh	r2, [r3, #8]
 8018fec:	683b      	ldr	r3, [r7, #0]
 8018fee:	891b      	ldrh	r3, [r3, #8]
 8018ff0:	4413      	add	r3, r2
 8018ff2:	b29a      	uxth	r2, r3
 8018ff4:	68fb      	ldr	r3, [r7, #12]
 8018ff6:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8018ff8:	68fb      	ldr	r3, [r7, #12]
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	60fb      	str	r3, [r7, #12]
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	681b      	ldr	r3, [r3, #0]
 8019002:	2b00      	cmp	r3, #0
 8019004:	d1f0      	bne.n	8018fe8 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8019006:	68fb      	ldr	r3, [r7, #12]
 8019008:	891a      	ldrh	r2, [r3, #8]
 801900a:	68fb      	ldr	r3, [r7, #12]
 801900c:	895b      	ldrh	r3, [r3, #10]
 801900e:	429a      	cmp	r2, r3
 8019010:	d006      	beq.n	8019020 <pbuf_cat+0x64>
 8019012:	4b10      	ldr	r3, [pc, #64]	; (8019054 <pbuf_cat+0x98>)
 8019014:	f240 3262 	movw	r2, #866	; 0x362
 8019018:	4911      	ldr	r1, [pc, #68]	; (8019060 <pbuf_cat+0xa4>)
 801901a:	4810      	ldr	r0, [pc, #64]	; (801905c <pbuf_cat+0xa0>)
 801901c:	f00b f938 	bl	8024290 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8019020:	68fb      	ldr	r3, [r7, #12]
 8019022:	681b      	ldr	r3, [r3, #0]
 8019024:	2b00      	cmp	r3, #0
 8019026:	d006      	beq.n	8019036 <pbuf_cat+0x7a>
 8019028:	4b0a      	ldr	r3, [pc, #40]	; (8019054 <pbuf_cat+0x98>)
 801902a:	f240 3263 	movw	r2, #867	; 0x363
 801902e:	490d      	ldr	r1, [pc, #52]	; (8019064 <pbuf_cat+0xa8>)
 8019030:	480a      	ldr	r0, [pc, #40]	; (801905c <pbuf_cat+0xa0>)
 8019032:	f00b f92d 	bl	8024290 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8019036:	68fb      	ldr	r3, [r7, #12]
 8019038:	891a      	ldrh	r2, [r3, #8]
 801903a:	683b      	ldr	r3, [r7, #0]
 801903c:	891b      	ldrh	r3, [r3, #8]
 801903e:	4413      	add	r3, r2
 8019040:	b29a      	uxth	r2, r3
 8019042:	68fb      	ldr	r3, [r7, #12]
 8019044:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8019046:	68fb      	ldr	r3, [r7, #12]
 8019048:	683a      	ldr	r2, [r7, #0]
 801904a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 801904c:	3710      	adds	r7, #16
 801904e:	46bd      	mov	sp, r7
 8019050:	bd80      	pop	{r7, pc}
 8019052:	bf00      	nop
 8019054:	080268ec 	.word	0x080268ec
 8019058:	08026ae0 	.word	0x08026ae0
 801905c:	0802694c 	.word	0x0802694c
 8019060:	08026b18 	.word	0x08026b18
 8019064:	08026b48 	.word	0x08026b48

08019068 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8019068:	b580      	push	{r7, lr}
 801906a:	b082      	sub	sp, #8
 801906c:	af00      	add	r7, sp, #0
 801906e:	6078      	str	r0, [r7, #4]
 8019070:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8019072:	6839      	ldr	r1, [r7, #0]
 8019074:	6878      	ldr	r0, [r7, #4]
 8019076:	f7ff ffa1 	bl	8018fbc <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 801907a:	6838      	ldr	r0, [r7, #0]
 801907c:	f7ff ff76 	bl	8018f6c <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8019080:	bf00      	nop
 8019082:	3708      	adds	r7, #8
 8019084:	46bd      	mov	sp, r7
 8019086:	bd80      	pop	{r7, pc}

08019088 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8019088:	b580      	push	{r7, lr}
 801908a:	b086      	sub	sp, #24
 801908c:	af00      	add	r7, sp, #0
 801908e:	6078      	str	r0, [r7, #4]
 8019090:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8019092:	2300      	movs	r3, #0
 8019094:	617b      	str	r3, [r7, #20]
 8019096:	2300      	movs	r3, #0
 8019098:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 801909a:	687b      	ldr	r3, [r7, #4]
 801909c:	2b00      	cmp	r3, #0
 801909e:	d008      	beq.n	80190b2 <pbuf_copy+0x2a>
 80190a0:	683b      	ldr	r3, [r7, #0]
 80190a2:	2b00      	cmp	r3, #0
 80190a4:	d005      	beq.n	80190b2 <pbuf_copy+0x2a>
 80190a6:	687b      	ldr	r3, [r7, #4]
 80190a8:	891a      	ldrh	r2, [r3, #8]
 80190aa:	683b      	ldr	r3, [r7, #0]
 80190ac:	891b      	ldrh	r3, [r3, #8]
 80190ae:	429a      	cmp	r2, r3
 80190b0:	d209      	bcs.n	80190c6 <pbuf_copy+0x3e>
 80190b2:	4b57      	ldr	r3, [pc, #348]	; (8019210 <pbuf_copy+0x188>)
 80190b4:	f240 32c9 	movw	r2, #969	; 0x3c9
 80190b8:	4956      	ldr	r1, [pc, #344]	; (8019214 <pbuf_copy+0x18c>)
 80190ba:	4857      	ldr	r0, [pc, #348]	; (8019218 <pbuf_copy+0x190>)
 80190bc:	f00b f8e8 	bl	8024290 <iprintf>
 80190c0:	f06f 030f 	mvn.w	r3, #15
 80190c4:	e09f      	b.n	8019206 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	895b      	ldrh	r3, [r3, #10]
 80190ca:	461a      	mov	r2, r3
 80190cc:	697b      	ldr	r3, [r7, #20]
 80190ce:	1ad2      	subs	r2, r2, r3
 80190d0:	683b      	ldr	r3, [r7, #0]
 80190d2:	895b      	ldrh	r3, [r3, #10]
 80190d4:	4619      	mov	r1, r3
 80190d6:	693b      	ldr	r3, [r7, #16]
 80190d8:	1acb      	subs	r3, r1, r3
 80190da:	429a      	cmp	r2, r3
 80190dc:	d306      	bcc.n	80190ec <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 80190de:	683b      	ldr	r3, [r7, #0]
 80190e0:	895b      	ldrh	r3, [r3, #10]
 80190e2:	461a      	mov	r2, r3
 80190e4:	693b      	ldr	r3, [r7, #16]
 80190e6:	1ad3      	subs	r3, r2, r3
 80190e8:	60fb      	str	r3, [r7, #12]
 80190ea:	e005      	b.n	80190f8 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	895b      	ldrh	r3, [r3, #10]
 80190f0:	461a      	mov	r2, r3
 80190f2:	697b      	ldr	r3, [r7, #20]
 80190f4:	1ad3      	subs	r3, r2, r3
 80190f6:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80190f8:	687b      	ldr	r3, [r7, #4]
 80190fa:	685a      	ldr	r2, [r3, #4]
 80190fc:	697b      	ldr	r3, [r7, #20]
 80190fe:	18d0      	adds	r0, r2, r3
 8019100:	683b      	ldr	r3, [r7, #0]
 8019102:	685a      	ldr	r2, [r3, #4]
 8019104:	693b      	ldr	r3, [r7, #16]
 8019106:	4413      	add	r3, r2
 8019108:	68fa      	ldr	r2, [r7, #12]
 801910a:	4619      	mov	r1, r3
 801910c:	f00a ffb0 	bl	8024070 <memcpy>
    offset_to += len;
 8019110:	697a      	ldr	r2, [r7, #20]
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	4413      	add	r3, r2
 8019116:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8019118:	693a      	ldr	r2, [r7, #16]
 801911a:	68fb      	ldr	r3, [r7, #12]
 801911c:	4413      	add	r3, r2
 801911e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8019120:	687b      	ldr	r3, [r7, #4]
 8019122:	895b      	ldrh	r3, [r3, #10]
 8019124:	461a      	mov	r2, r3
 8019126:	697b      	ldr	r3, [r7, #20]
 8019128:	4293      	cmp	r3, r2
 801912a:	d906      	bls.n	801913a <pbuf_copy+0xb2>
 801912c:	4b38      	ldr	r3, [pc, #224]	; (8019210 <pbuf_copy+0x188>)
 801912e:	f240 32d9 	movw	r2, #985	; 0x3d9
 8019132:	493a      	ldr	r1, [pc, #232]	; (801921c <pbuf_copy+0x194>)
 8019134:	4838      	ldr	r0, [pc, #224]	; (8019218 <pbuf_copy+0x190>)
 8019136:	f00b f8ab 	bl	8024290 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 801913a:	683b      	ldr	r3, [r7, #0]
 801913c:	895b      	ldrh	r3, [r3, #10]
 801913e:	461a      	mov	r2, r3
 8019140:	693b      	ldr	r3, [r7, #16]
 8019142:	4293      	cmp	r3, r2
 8019144:	d906      	bls.n	8019154 <pbuf_copy+0xcc>
 8019146:	4b32      	ldr	r3, [pc, #200]	; (8019210 <pbuf_copy+0x188>)
 8019148:	f240 32da 	movw	r2, #986	; 0x3da
 801914c:	4934      	ldr	r1, [pc, #208]	; (8019220 <pbuf_copy+0x198>)
 801914e:	4832      	ldr	r0, [pc, #200]	; (8019218 <pbuf_copy+0x190>)
 8019150:	f00b f89e 	bl	8024290 <iprintf>
    if (offset_from >= p_from->len) {
 8019154:	683b      	ldr	r3, [r7, #0]
 8019156:	895b      	ldrh	r3, [r3, #10]
 8019158:	461a      	mov	r2, r3
 801915a:	693b      	ldr	r3, [r7, #16]
 801915c:	4293      	cmp	r3, r2
 801915e:	d304      	bcc.n	801916a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8019160:	2300      	movs	r3, #0
 8019162:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 8019164:	683b      	ldr	r3, [r7, #0]
 8019166:	681b      	ldr	r3, [r3, #0]
 8019168:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 801916a:	687b      	ldr	r3, [r7, #4]
 801916c:	895b      	ldrh	r3, [r3, #10]
 801916e:	461a      	mov	r2, r3
 8019170:	697b      	ldr	r3, [r7, #20]
 8019172:	4293      	cmp	r3, r2
 8019174:	d114      	bne.n	80191a0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 8019176:	2300      	movs	r3, #0
 8019178:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8019180:	687b      	ldr	r3, [r7, #4]
 8019182:	2b00      	cmp	r3, #0
 8019184:	d10c      	bne.n	80191a0 <pbuf_copy+0x118>
 8019186:	683b      	ldr	r3, [r7, #0]
 8019188:	2b00      	cmp	r3, #0
 801918a:	d009      	beq.n	80191a0 <pbuf_copy+0x118>
 801918c:	4b20      	ldr	r3, [pc, #128]	; (8019210 <pbuf_copy+0x188>)
 801918e:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 8019192:	4924      	ldr	r1, [pc, #144]	; (8019224 <pbuf_copy+0x19c>)
 8019194:	4820      	ldr	r0, [pc, #128]	; (8019218 <pbuf_copy+0x190>)
 8019196:	f00b f87b 	bl	8024290 <iprintf>
 801919a:	f06f 030f 	mvn.w	r3, #15
 801919e:	e032      	b.n	8019206 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 80191a0:	683b      	ldr	r3, [r7, #0]
 80191a2:	2b00      	cmp	r3, #0
 80191a4:	d013      	beq.n	80191ce <pbuf_copy+0x146>
 80191a6:	683b      	ldr	r3, [r7, #0]
 80191a8:	895a      	ldrh	r2, [r3, #10]
 80191aa:	683b      	ldr	r3, [r7, #0]
 80191ac:	891b      	ldrh	r3, [r3, #8]
 80191ae:	429a      	cmp	r2, r3
 80191b0:	d10d      	bne.n	80191ce <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80191b2:	683b      	ldr	r3, [r7, #0]
 80191b4:	681b      	ldr	r3, [r3, #0]
 80191b6:	2b00      	cmp	r3, #0
 80191b8:	d009      	beq.n	80191ce <pbuf_copy+0x146>
 80191ba:	4b15      	ldr	r3, [pc, #84]	; (8019210 <pbuf_copy+0x188>)
 80191bc:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80191c0:	4919      	ldr	r1, [pc, #100]	; (8019228 <pbuf_copy+0x1a0>)
 80191c2:	4815      	ldr	r0, [pc, #84]	; (8019218 <pbuf_copy+0x190>)
 80191c4:	f00b f864 	bl	8024290 <iprintf>
 80191c8:	f06f 0305 	mvn.w	r3, #5
 80191cc:	e01b      	b.n	8019206 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	2b00      	cmp	r3, #0
 80191d2:	d013      	beq.n	80191fc <pbuf_copy+0x174>
 80191d4:	687b      	ldr	r3, [r7, #4]
 80191d6:	895a      	ldrh	r2, [r3, #10]
 80191d8:	687b      	ldr	r3, [r7, #4]
 80191da:	891b      	ldrh	r3, [r3, #8]
 80191dc:	429a      	cmp	r2, r3
 80191de:	d10d      	bne.n	80191fc <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	681b      	ldr	r3, [r3, #0]
 80191e4:	2b00      	cmp	r3, #0
 80191e6:	d009      	beq.n	80191fc <pbuf_copy+0x174>
 80191e8:	4b09      	ldr	r3, [pc, #36]	; (8019210 <pbuf_copy+0x188>)
 80191ea:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80191ee:	490e      	ldr	r1, [pc, #56]	; (8019228 <pbuf_copy+0x1a0>)
 80191f0:	4809      	ldr	r0, [pc, #36]	; (8019218 <pbuf_copy+0x190>)
 80191f2:	f00b f84d 	bl	8024290 <iprintf>
 80191f6:	f06f 0305 	mvn.w	r3, #5
 80191fa:	e004      	b.n	8019206 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	2b00      	cmp	r3, #0
 8019200:	f47f af61 	bne.w	80190c6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 8019204:	2300      	movs	r3, #0
}
 8019206:	4618      	mov	r0, r3
 8019208:	3718      	adds	r7, #24
 801920a:	46bd      	mov	sp, r7
 801920c:	bd80      	pop	{r7, pc}
 801920e:	bf00      	nop
 8019210:	080268ec 	.word	0x080268ec
 8019214:	08026b94 	.word	0x08026b94
 8019218:	0802694c 	.word	0x0802694c
 801921c:	08026bc4 	.word	0x08026bc4
 8019220:	08026bdc 	.word	0x08026bdc
 8019224:	08026bf8 	.word	0x08026bf8
 8019228:	08026c08 	.word	0x08026c08

0801922c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 801922c:	b580      	push	{r7, lr}
 801922e:	b088      	sub	sp, #32
 8019230:	af00      	add	r7, sp, #0
 8019232:	60f8      	str	r0, [r7, #12]
 8019234:	60b9      	str	r1, [r7, #8]
 8019236:	4611      	mov	r1, r2
 8019238:	461a      	mov	r2, r3
 801923a:	460b      	mov	r3, r1
 801923c:	80fb      	strh	r3, [r7, #6]
 801923e:	4613      	mov	r3, r2
 8019240:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 8019242:	2300      	movs	r3, #0
 8019244:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 8019246:	2300      	movs	r3, #0
 8019248:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 801924a:	68fb      	ldr	r3, [r7, #12]
 801924c:	2b00      	cmp	r3, #0
 801924e:	d108      	bne.n	8019262 <pbuf_copy_partial+0x36>
 8019250:	4b2b      	ldr	r3, [pc, #172]	; (8019300 <pbuf_copy_partial+0xd4>)
 8019252:	f240 420a 	movw	r2, #1034	; 0x40a
 8019256:	492b      	ldr	r1, [pc, #172]	; (8019304 <pbuf_copy_partial+0xd8>)
 8019258:	482b      	ldr	r0, [pc, #172]	; (8019308 <pbuf_copy_partial+0xdc>)
 801925a:	f00b f819 	bl	8024290 <iprintf>
 801925e:	2300      	movs	r3, #0
 8019260:	e04a      	b.n	80192f8 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 8019262:	68bb      	ldr	r3, [r7, #8]
 8019264:	2b00      	cmp	r3, #0
 8019266:	d108      	bne.n	801927a <pbuf_copy_partial+0x4e>
 8019268:	4b25      	ldr	r3, [pc, #148]	; (8019300 <pbuf_copy_partial+0xd4>)
 801926a:	f240 420b 	movw	r2, #1035	; 0x40b
 801926e:	4927      	ldr	r1, [pc, #156]	; (801930c <pbuf_copy_partial+0xe0>)
 8019270:	4825      	ldr	r0, [pc, #148]	; (8019308 <pbuf_copy_partial+0xdc>)
 8019272:	f00b f80d 	bl	8024290 <iprintf>
 8019276:	2300      	movs	r3, #0
 8019278:	e03e      	b.n	80192f8 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801927a:	68fb      	ldr	r3, [r7, #12]
 801927c:	61fb      	str	r3, [r7, #28]
 801927e:	e034      	b.n	80192ea <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8019280:	88bb      	ldrh	r3, [r7, #4]
 8019282:	2b00      	cmp	r3, #0
 8019284:	d00a      	beq.n	801929c <pbuf_copy_partial+0x70>
 8019286:	69fb      	ldr	r3, [r7, #28]
 8019288:	895b      	ldrh	r3, [r3, #10]
 801928a:	88ba      	ldrh	r2, [r7, #4]
 801928c:	429a      	cmp	r2, r3
 801928e:	d305      	bcc.n	801929c <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8019290:	69fb      	ldr	r3, [r7, #28]
 8019292:	895b      	ldrh	r3, [r3, #10]
 8019294:	88ba      	ldrh	r2, [r7, #4]
 8019296:	1ad3      	subs	r3, r2, r3
 8019298:	80bb      	strh	r3, [r7, #4]
 801929a:	e023      	b.n	80192e4 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 801929c:	69fb      	ldr	r3, [r7, #28]
 801929e:	895a      	ldrh	r2, [r3, #10]
 80192a0:	88bb      	ldrh	r3, [r7, #4]
 80192a2:	1ad3      	subs	r3, r2, r3
 80192a4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 80192a6:	8b3a      	ldrh	r2, [r7, #24]
 80192a8:	88fb      	ldrh	r3, [r7, #6]
 80192aa:	429a      	cmp	r2, r3
 80192ac:	d901      	bls.n	80192b2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 80192ae:	88fb      	ldrh	r3, [r7, #6]
 80192b0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 80192b2:	8b7b      	ldrh	r3, [r7, #26]
 80192b4:	68ba      	ldr	r2, [r7, #8]
 80192b6:	18d0      	adds	r0, r2, r3
 80192b8:	69fb      	ldr	r3, [r7, #28]
 80192ba:	685a      	ldr	r2, [r3, #4]
 80192bc:	88bb      	ldrh	r3, [r7, #4]
 80192be:	4413      	add	r3, r2
 80192c0:	8b3a      	ldrh	r2, [r7, #24]
 80192c2:	4619      	mov	r1, r3
 80192c4:	f00a fed4 	bl	8024070 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 80192c8:	8afa      	ldrh	r2, [r7, #22]
 80192ca:	8b3b      	ldrh	r3, [r7, #24]
 80192cc:	4413      	add	r3, r2
 80192ce:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 80192d0:	8b7a      	ldrh	r2, [r7, #26]
 80192d2:	8b3b      	ldrh	r3, [r7, #24]
 80192d4:	4413      	add	r3, r2
 80192d6:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 80192d8:	88fa      	ldrh	r2, [r7, #6]
 80192da:	8b3b      	ldrh	r3, [r7, #24]
 80192dc:	1ad3      	subs	r3, r2, r3
 80192de:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 80192e0:	2300      	movs	r3, #0
 80192e2:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 80192e4:	69fb      	ldr	r3, [r7, #28]
 80192e6:	681b      	ldr	r3, [r3, #0]
 80192e8:	61fb      	str	r3, [r7, #28]
 80192ea:	88fb      	ldrh	r3, [r7, #6]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d002      	beq.n	80192f6 <pbuf_copy_partial+0xca>
 80192f0:	69fb      	ldr	r3, [r7, #28]
 80192f2:	2b00      	cmp	r3, #0
 80192f4:	d1c4      	bne.n	8019280 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80192f6:	8afb      	ldrh	r3, [r7, #22]
}
 80192f8:	4618      	mov	r0, r3
 80192fa:	3720      	adds	r7, #32
 80192fc:	46bd      	mov	sp, r7
 80192fe:	bd80      	pop	{r7, pc}
 8019300:	080268ec 	.word	0x080268ec
 8019304:	08026c34 	.word	0x08026c34
 8019308:	0802694c 	.word	0x0802694c
 801930c:	08026c54 	.word	0x08026c54

08019310 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 8019310:	b580      	push	{r7, lr}
 8019312:	b084      	sub	sp, #16
 8019314:	af00      	add	r7, sp, #0
 8019316:	4603      	mov	r3, r0
 8019318:	603a      	str	r2, [r7, #0]
 801931a:	71fb      	strb	r3, [r7, #7]
 801931c:	460b      	mov	r3, r1
 801931e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 8019320:	683b      	ldr	r3, [r7, #0]
 8019322:	8919      	ldrh	r1, [r3, #8]
 8019324:	88ba      	ldrh	r2, [r7, #4]
 8019326:	79fb      	ldrb	r3, [r7, #7]
 8019328:	4618      	mov	r0, r3
 801932a:	f7ff fa95 	bl	8018858 <pbuf_alloc>
 801932e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 8019330:	68fb      	ldr	r3, [r7, #12]
 8019332:	2b00      	cmp	r3, #0
 8019334:	d101      	bne.n	801933a <pbuf_clone+0x2a>
    return NULL;
 8019336:	2300      	movs	r3, #0
 8019338:	e011      	b.n	801935e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 801933a:	6839      	ldr	r1, [r7, #0]
 801933c:	68f8      	ldr	r0, [r7, #12]
 801933e:	f7ff fea3 	bl	8019088 <pbuf_copy>
 8019342:	4603      	mov	r3, r0
 8019344:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 8019346:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801934a:	2b00      	cmp	r3, #0
 801934c:	d006      	beq.n	801935c <pbuf_clone+0x4c>
 801934e:	4b06      	ldr	r3, [pc, #24]	; (8019368 <pbuf_clone+0x58>)
 8019350:	f240 5224 	movw	r2, #1316	; 0x524
 8019354:	4905      	ldr	r1, [pc, #20]	; (801936c <pbuf_clone+0x5c>)
 8019356:	4806      	ldr	r0, [pc, #24]	; (8019370 <pbuf_clone+0x60>)
 8019358:	f00a ff9a 	bl	8024290 <iprintf>
  return q;
 801935c:	68fb      	ldr	r3, [r7, #12]
}
 801935e:	4618      	mov	r0, r3
 8019360:	3710      	adds	r7, #16
 8019362:	46bd      	mov	sp, r7
 8019364:	bd80      	pop	{r7, pc}
 8019366:	bf00      	nop
 8019368:	080268ec 	.word	0x080268ec
 801936c:	08026d60 	.word	0x08026d60
 8019370:	0802694c 	.word	0x0802694c

08019374 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8019374:	b580      	push	{r7, lr}
 8019376:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8019378:	f00a ffa2 	bl	80242c0 <rand>
 801937c:	4603      	mov	r3, r0
 801937e:	b29b      	uxth	r3, r3
 8019380:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8019384:	b29b      	uxth	r3, r3
 8019386:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801938a:	b29a      	uxth	r2, r3
 801938c:	4b01      	ldr	r3, [pc, #4]	; (8019394 <tcp_init+0x20>)
 801938e:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8019390:	bf00      	nop
 8019392:	bd80      	pop	{r7, pc}
 8019394:	20000028 	.word	0x20000028

08019398 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	7d1b      	ldrb	r3, [r3, #20]
 80193a4:	2b01      	cmp	r3, #1
 80193a6:	d105      	bne.n	80193b4 <tcp_free+0x1c>
 80193a8:	4b06      	ldr	r3, [pc, #24]	; (80193c4 <tcp_free+0x2c>)
 80193aa:	22d4      	movs	r2, #212	; 0xd4
 80193ac:	4906      	ldr	r1, [pc, #24]	; (80193c8 <tcp_free+0x30>)
 80193ae:	4807      	ldr	r0, [pc, #28]	; (80193cc <tcp_free+0x34>)
 80193b0:	f00a ff6e 	bl	8024290 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 80193b4:	6879      	ldr	r1, [r7, #4]
 80193b6:	2001      	movs	r0, #1
 80193b8:	f7fe fe8e 	bl	80180d8 <memp_free>
}
 80193bc:	bf00      	nop
 80193be:	3708      	adds	r7, #8
 80193c0:	46bd      	mov	sp, r7
 80193c2:	bd80      	pop	{r7, pc}
 80193c4:	08026dec 	.word	0x08026dec
 80193c8:	08026e1c 	.word	0x08026e1c
 80193cc:	08026e30 	.word	0x08026e30

080193d0 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 80193d0:	b580      	push	{r7, lr}
 80193d2:	b082      	sub	sp, #8
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	7d1b      	ldrb	r3, [r3, #20]
 80193dc:	2b01      	cmp	r3, #1
 80193de:	d105      	bne.n	80193ec <tcp_free_listen+0x1c>
 80193e0:	4b06      	ldr	r3, [pc, #24]	; (80193fc <tcp_free_listen+0x2c>)
 80193e2:	22df      	movs	r2, #223	; 0xdf
 80193e4:	4906      	ldr	r1, [pc, #24]	; (8019400 <tcp_free_listen+0x30>)
 80193e6:	4807      	ldr	r0, [pc, #28]	; (8019404 <tcp_free_listen+0x34>)
 80193e8:	f00a ff52 	bl	8024290 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80193ec:	6879      	ldr	r1, [r7, #4]
 80193ee:	2002      	movs	r0, #2
 80193f0:	f7fe fe72 	bl	80180d8 <memp_free>
}
 80193f4:	bf00      	nop
 80193f6:	3708      	adds	r7, #8
 80193f8:	46bd      	mov	sp, r7
 80193fa:	bd80      	pop	{r7, pc}
 80193fc:	08026dec 	.word	0x08026dec
 8019400:	08026e58 	.word	0x08026e58
 8019404:	08026e30 	.word	0x08026e30

08019408 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8019408:	b580      	push	{r7, lr}
 801940a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 801940c:	f001 f9be 	bl	801a78c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8019410:	4b07      	ldr	r3, [pc, #28]	; (8019430 <tcp_tmr+0x28>)
 8019412:	781b      	ldrb	r3, [r3, #0]
 8019414:	3301      	adds	r3, #1
 8019416:	b2da      	uxtb	r2, r3
 8019418:	4b05      	ldr	r3, [pc, #20]	; (8019430 <tcp_tmr+0x28>)
 801941a:	701a      	strb	r2, [r3, #0]
 801941c:	4b04      	ldr	r3, [pc, #16]	; (8019430 <tcp_tmr+0x28>)
 801941e:	781b      	ldrb	r3, [r3, #0]
 8019420:	f003 0301 	and.w	r3, r3, #1
 8019424:	2b00      	cmp	r3, #0
 8019426:	d001      	beq.n	801942c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8019428:	f000 fe70 	bl	801a10c <tcp_slowtmr>
  }
}
 801942c:	bf00      	nop
 801942e:	bd80      	pop	{r7, pc}
 8019430:	2000bfd1 	.word	0x2000bfd1

08019434 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8019434:	b580      	push	{r7, lr}
 8019436:	b084      	sub	sp, #16
 8019438:	af00      	add	r7, sp, #0
 801943a:	6078      	str	r0, [r7, #4]
 801943c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 801943e:	683b      	ldr	r3, [r7, #0]
 8019440:	2b00      	cmp	r3, #0
 8019442:	d105      	bne.n	8019450 <tcp_remove_listener+0x1c>
 8019444:	4b0d      	ldr	r3, [pc, #52]	; (801947c <tcp_remove_listener+0x48>)
 8019446:	22ff      	movs	r2, #255	; 0xff
 8019448:	490d      	ldr	r1, [pc, #52]	; (8019480 <tcp_remove_listener+0x4c>)
 801944a:	480e      	ldr	r0, [pc, #56]	; (8019484 <tcp_remove_listener+0x50>)
 801944c:	f00a ff20 	bl	8024290 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019450:	687b      	ldr	r3, [r7, #4]
 8019452:	60fb      	str	r3, [r7, #12]
 8019454:	e00a      	b.n	801946c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801945a:	683a      	ldr	r2, [r7, #0]
 801945c:	429a      	cmp	r2, r3
 801945e:	d102      	bne.n	8019466 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8019460:	68fb      	ldr	r3, [r7, #12]
 8019462:	2200      	movs	r2, #0
 8019464:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8019466:	68fb      	ldr	r3, [r7, #12]
 8019468:	68db      	ldr	r3, [r3, #12]
 801946a:	60fb      	str	r3, [r7, #12]
 801946c:	68fb      	ldr	r3, [r7, #12]
 801946e:	2b00      	cmp	r3, #0
 8019470:	d1f1      	bne.n	8019456 <tcp_remove_listener+0x22>
    }
  }
}
 8019472:	bf00      	nop
 8019474:	bf00      	nop
 8019476:	3710      	adds	r7, #16
 8019478:	46bd      	mov	sp, r7
 801947a:	bd80      	pop	{r7, pc}
 801947c:	08026dec 	.word	0x08026dec
 8019480:	08026e74 	.word	0x08026e74
 8019484:	08026e30 	.word	0x08026e30

08019488 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8019488:	b580      	push	{r7, lr}
 801948a:	b084      	sub	sp, #16
 801948c:	af00      	add	r7, sp, #0
 801948e:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	2b00      	cmp	r3, #0
 8019494:	d106      	bne.n	80194a4 <tcp_listen_closed+0x1c>
 8019496:	4b14      	ldr	r3, [pc, #80]	; (80194e8 <tcp_listen_closed+0x60>)
 8019498:	f240 1211 	movw	r2, #273	; 0x111
 801949c:	4913      	ldr	r1, [pc, #76]	; (80194ec <tcp_listen_closed+0x64>)
 801949e:	4814      	ldr	r0, [pc, #80]	; (80194f0 <tcp_listen_closed+0x68>)
 80194a0:	f00a fef6 	bl	8024290 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	7d1b      	ldrb	r3, [r3, #20]
 80194a8:	2b01      	cmp	r3, #1
 80194aa:	d006      	beq.n	80194ba <tcp_listen_closed+0x32>
 80194ac:	4b0e      	ldr	r3, [pc, #56]	; (80194e8 <tcp_listen_closed+0x60>)
 80194ae:	f44f 7289 	mov.w	r2, #274	; 0x112
 80194b2:	4910      	ldr	r1, [pc, #64]	; (80194f4 <tcp_listen_closed+0x6c>)
 80194b4:	480e      	ldr	r0, [pc, #56]	; (80194f0 <tcp_listen_closed+0x68>)
 80194b6:	f00a feeb 	bl	8024290 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80194ba:	2301      	movs	r3, #1
 80194bc:	60fb      	str	r3, [r7, #12]
 80194be:	e00b      	b.n	80194d8 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 80194c0:	4a0d      	ldr	r2, [pc, #52]	; (80194f8 <tcp_listen_closed+0x70>)
 80194c2:	68fb      	ldr	r3, [r7, #12]
 80194c4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80194c8:	681b      	ldr	r3, [r3, #0]
 80194ca:	6879      	ldr	r1, [r7, #4]
 80194cc:	4618      	mov	r0, r3
 80194ce:	f7ff ffb1 	bl	8019434 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 80194d2:	68fb      	ldr	r3, [r7, #12]
 80194d4:	3301      	adds	r3, #1
 80194d6:	60fb      	str	r3, [r7, #12]
 80194d8:	68fb      	ldr	r3, [r7, #12]
 80194da:	2b03      	cmp	r3, #3
 80194dc:	d9f0      	bls.n	80194c0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 80194de:	bf00      	nop
 80194e0:	bf00      	nop
 80194e2:	3710      	adds	r7, #16
 80194e4:	46bd      	mov	sp, r7
 80194e6:	bd80      	pop	{r7, pc}
 80194e8:	08026dec 	.word	0x08026dec
 80194ec:	08026e9c 	.word	0x08026e9c
 80194f0:	08026e30 	.word	0x08026e30
 80194f4:	08026ea8 	.word	0x08026ea8
 80194f8:	08028e60 	.word	0x08028e60

080194fc <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80194fc:	b5b0      	push	{r4, r5, r7, lr}
 80194fe:	b088      	sub	sp, #32
 8019500:	af04      	add	r7, sp, #16
 8019502:	6078      	str	r0, [r7, #4]
 8019504:	460b      	mov	r3, r1
 8019506:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	2b00      	cmp	r3, #0
 801950c:	d106      	bne.n	801951c <tcp_close_shutdown+0x20>
 801950e:	4b63      	ldr	r3, [pc, #396]	; (801969c <tcp_close_shutdown+0x1a0>)
 8019510:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8019514:	4962      	ldr	r1, [pc, #392]	; (80196a0 <tcp_close_shutdown+0x1a4>)
 8019516:	4863      	ldr	r0, [pc, #396]	; (80196a4 <tcp_close_shutdown+0x1a8>)
 8019518:	f00a feba 	bl	8024290 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 801951c:	78fb      	ldrb	r3, [r7, #3]
 801951e:	2b00      	cmp	r3, #0
 8019520:	d066      	beq.n	80195f0 <tcp_close_shutdown+0xf4>
 8019522:	687b      	ldr	r3, [r7, #4]
 8019524:	7d1b      	ldrb	r3, [r3, #20]
 8019526:	2b04      	cmp	r3, #4
 8019528:	d003      	beq.n	8019532 <tcp_close_shutdown+0x36>
 801952a:	687b      	ldr	r3, [r7, #4]
 801952c:	7d1b      	ldrb	r3, [r3, #20]
 801952e:	2b07      	cmp	r3, #7
 8019530:	d15e      	bne.n	80195f0 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8019532:	687b      	ldr	r3, [r7, #4]
 8019534:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019536:	2b00      	cmp	r3, #0
 8019538:	d104      	bne.n	8019544 <tcp_close_shutdown+0x48>
 801953a:	687b      	ldr	r3, [r7, #4]
 801953c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801953e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019542:	d055      	beq.n	80195f0 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8019544:	687b      	ldr	r3, [r7, #4]
 8019546:	8b5b      	ldrh	r3, [r3, #26]
 8019548:	f003 0310 	and.w	r3, r3, #16
 801954c:	2b00      	cmp	r3, #0
 801954e:	d106      	bne.n	801955e <tcp_close_shutdown+0x62>
 8019550:	4b52      	ldr	r3, [pc, #328]	; (801969c <tcp_close_shutdown+0x1a0>)
 8019552:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8019556:	4954      	ldr	r1, [pc, #336]	; (80196a8 <tcp_close_shutdown+0x1ac>)
 8019558:	4852      	ldr	r0, [pc, #328]	; (80196a4 <tcp_close_shutdown+0x1a8>)
 801955a:	f00a fe99 	bl	8024290 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801955e:	687b      	ldr	r3, [r7, #4]
 8019560:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8019562:	687b      	ldr	r3, [r7, #4]
 8019564:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8019566:	687d      	ldr	r5, [r7, #4]
 8019568:	687b      	ldr	r3, [r7, #4]
 801956a:	3304      	adds	r3, #4
 801956c:	687a      	ldr	r2, [r7, #4]
 801956e:	8ad2      	ldrh	r2, [r2, #22]
 8019570:	6879      	ldr	r1, [r7, #4]
 8019572:	8b09      	ldrh	r1, [r1, #24]
 8019574:	9102      	str	r1, [sp, #8]
 8019576:	9201      	str	r2, [sp, #4]
 8019578:	9300      	str	r3, [sp, #0]
 801957a:	462b      	mov	r3, r5
 801957c:	4622      	mov	r2, r4
 801957e:	4601      	mov	r1, r0
 8019580:	6878      	ldr	r0, [r7, #4]
 8019582:	f005 fed3 	bl	801f32c <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8019586:	6878      	ldr	r0, [r7, #4]
 8019588:	f001 fcb0 	bl	801aeec <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 801958c:	4b47      	ldr	r3, [pc, #284]	; (80196ac <tcp_close_shutdown+0x1b0>)
 801958e:	681b      	ldr	r3, [r3, #0]
 8019590:	687a      	ldr	r2, [r7, #4]
 8019592:	429a      	cmp	r2, r3
 8019594:	d105      	bne.n	80195a2 <tcp_close_shutdown+0xa6>
 8019596:	4b45      	ldr	r3, [pc, #276]	; (80196ac <tcp_close_shutdown+0x1b0>)
 8019598:	681b      	ldr	r3, [r3, #0]
 801959a:	68db      	ldr	r3, [r3, #12]
 801959c:	4a43      	ldr	r2, [pc, #268]	; (80196ac <tcp_close_shutdown+0x1b0>)
 801959e:	6013      	str	r3, [r2, #0]
 80195a0:	e013      	b.n	80195ca <tcp_close_shutdown+0xce>
 80195a2:	4b42      	ldr	r3, [pc, #264]	; (80196ac <tcp_close_shutdown+0x1b0>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	60fb      	str	r3, [r7, #12]
 80195a8:	e00c      	b.n	80195c4 <tcp_close_shutdown+0xc8>
 80195aa:	68fb      	ldr	r3, [r7, #12]
 80195ac:	68db      	ldr	r3, [r3, #12]
 80195ae:	687a      	ldr	r2, [r7, #4]
 80195b0:	429a      	cmp	r2, r3
 80195b2:	d104      	bne.n	80195be <tcp_close_shutdown+0xc2>
 80195b4:	687b      	ldr	r3, [r7, #4]
 80195b6:	68da      	ldr	r2, [r3, #12]
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	60da      	str	r2, [r3, #12]
 80195bc:	e005      	b.n	80195ca <tcp_close_shutdown+0xce>
 80195be:	68fb      	ldr	r3, [r7, #12]
 80195c0:	68db      	ldr	r3, [r3, #12]
 80195c2:	60fb      	str	r3, [r7, #12]
 80195c4:	68fb      	ldr	r3, [r7, #12]
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d1ef      	bne.n	80195aa <tcp_close_shutdown+0xae>
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	2200      	movs	r2, #0
 80195ce:	60da      	str	r2, [r3, #12]
 80195d0:	4b37      	ldr	r3, [pc, #220]	; (80196b0 <tcp_close_shutdown+0x1b4>)
 80195d2:	2201      	movs	r2, #1
 80195d4:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 80195d6:	4b37      	ldr	r3, [pc, #220]	; (80196b4 <tcp_close_shutdown+0x1b8>)
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	687a      	ldr	r2, [r7, #4]
 80195dc:	429a      	cmp	r2, r3
 80195de:	d102      	bne.n	80195e6 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 80195e0:	f004 f948 	bl	801d874 <tcp_trigger_input_pcb_close>
 80195e4:	e002      	b.n	80195ec <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 80195e6:	6878      	ldr	r0, [r7, #4]
 80195e8:	f7ff fed6 	bl	8019398 <tcp_free>
      }
      return ERR_OK;
 80195ec:	2300      	movs	r3, #0
 80195ee:	e050      	b.n	8019692 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80195f0:	687b      	ldr	r3, [r7, #4]
 80195f2:	7d1b      	ldrb	r3, [r3, #20]
 80195f4:	2b02      	cmp	r3, #2
 80195f6:	d03b      	beq.n	8019670 <tcp_close_shutdown+0x174>
 80195f8:	2b02      	cmp	r3, #2
 80195fa:	dc44      	bgt.n	8019686 <tcp_close_shutdown+0x18a>
 80195fc:	2b00      	cmp	r3, #0
 80195fe:	d002      	beq.n	8019606 <tcp_close_shutdown+0x10a>
 8019600:	2b01      	cmp	r3, #1
 8019602:	d02a      	beq.n	801965a <tcp_close_shutdown+0x15e>
 8019604:	e03f      	b.n	8019686 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8019606:	687b      	ldr	r3, [r7, #4]
 8019608:	8adb      	ldrh	r3, [r3, #22]
 801960a:	2b00      	cmp	r3, #0
 801960c:	d021      	beq.n	8019652 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 801960e:	4b2a      	ldr	r3, [pc, #168]	; (80196b8 <tcp_close_shutdown+0x1bc>)
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	687a      	ldr	r2, [r7, #4]
 8019614:	429a      	cmp	r2, r3
 8019616:	d105      	bne.n	8019624 <tcp_close_shutdown+0x128>
 8019618:	4b27      	ldr	r3, [pc, #156]	; (80196b8 <tcp_close_shutdown+0x1bc>)
 801961a:	681b      	ldr	r3, [r3, #0]
 801961c:	68db      	ldr	r3, [r3, #12]
 801961e:	4a26      	ldr	r2, [pc, #152]	; (80196b8 <tcp_close_shutdown+0x1bc>)
 8019620:	6013      	str	r3, [r2, #0]
 8019622:	e013      	b.n	801964c <tcp_close_shutdown+0x150>
 8019624:	4b24      	ldr	r3, [pc, #144]	; (80196b8 <tcp_close_shutdown+0x1bc>)
 8019626:	681b      	ldr	r3, [r3, #0]
 8019628:	60bb      	str	r3, [r7, #8]
 801962a:	e00c      	b.n	8019646 <tcp_close_shutdown+0x14a>
 801962c:	68bb      	ldr	r3, [r7, #8]
 801962e:	68db      	ldr	r3, [r3, #12]
 8019630:	687a      	ldr	r2, [r7, #4]
 8019632:	429a      	cmp	r2, r3
 8019634:	d104      	bne.n	8019640 <tcp_close_shutdown+0x144>
 8019636:	687b      	ldr	r3, [r7, #4]
 8019638:	68da      	ldr	r2, [r3, #12]
 801963a:	68bb      	ldr	r3, [r7, #8]
 801963c:	60da      	str	r2, [r3, #12]
 801963e:	e005      	b.n	801964c <tcp_close_shutdown+0x150>
 8019640:	68bb      	ldr	r3, [r7, #8]
 8019642:	68db      	ldr	r3, [r3, #12]
 8019644:	60bb      	str	r3, [r7, #8]
 8019646:	68bb      	ldr	r3, [r7, #8]
 8019648:	2b00      	cmp	r3, #0
 801964a:	d1ef      	bne.n	801962c <tcp_close_shutdown+0x130>
 801964c:	687b      	ldr	r3, [r7, #4]
 801964e:	2200      	movs	r2, #0
 8019650:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8019652:	6878      	ldr	r0, [r7, #4]
 8019654:	f7ff fea0 	bl	8019398 <tcp_free>
      break;
 8019658:	e01a      	b.n	8019690 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 801965a:	6878      	ldr	r0, [r7, #4]
 801965c:	f7ff ff14 	bl	8019488 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8019660:	6879      	ldr	r1, [r7, #4]
 8019662:	4816      	ldr	r0, [pc, #88]	; (80196bc <tcp_close_shutdown+0x1c0>)
 8019664:	f001 fc92 	bl	801af8c <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8019668:	6878      	ldr	r0, [r7, #4]
 801966a:	f7ff feb1 	bl	80193d0 <tcp_free_listen>
      break;
 801966e:	e00f      	b.n	8019690 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019670:	6879      	ldr	r1, [r7, #4]
 8019672:	480e      	ldr	r0, [pc, #56]	; (80196ac <tcp_close_shutdown+0x1b0>)
 8019674:	f001 fc8a 	bl	801af8c <tcp_pcb_remove>
 8019678:	4b0d      	ldr	r3, [pc, #52]	; (80196b0 <tcp_close_shutdown+0x1b4>)
 801967a:	2201      	movs	r2, #1
 801967c:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 801967e:	6878      	ldr	r0, [r7, #4]
 8019680:	f7ff fe8a 	bl	8019398 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8019684:	e004      	b.n	8019690 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8019686:	6878      	ldr	r0, [r7, #4]
 8019688:	f000 f81a 	bl	80196c0 <tcp_close_shutdown_fin>
 801968c:	4603      	mov	r3, r0
 801968e:	e000      	b.n	8019692 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8019690:	2300      	movs	r3, #0
}
 8019692:	4618      	mov	r0, r3
 8019694:	3710      	adds	r7, #16
 8019696:	46bd      	mov	sp, r7
 8019698:	bdb0      	pop	{r4, r5, r7, pc}
 801969a:	bf00      	nop
 801969c:	08026dec 	.word	0x08026dec
 80196a0:	08026ec0 	.word	0x08026ec0
 80196a4:	08026e30 	.word	0x08026e30
 80196a8:	08026ee0 	.word	0x08026ee0
 80196ac:	2000bfc8 	.word	0x2000bfc8
 80196b0:	2000bfd0 	.word	0x2000bfd0
 80196b4:	2000c008 	.word	0x2000c008
 80196b8:	2000bfc0 	.word	0x2000bfc0
 80196bc:	2000bfc4 	.word	0x2000bfc4

080196c0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 80196c0:	b580      	push	{r7, lr}
 80196c2:	b084      	sub	sp, #16
 80196c4:	af00      	add	r7, sp, #0
 80196c6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	2b00      	cmp	r3, #0
 80196cc:	d106      	bne.n	80196dc <tcp_close_shutdown_fin+0x1c>
 80196ce:	4b2e      	ldr	r3, [pc, #184]	; (8019788 <tcp_close_shutdown_fin+0xc8>)
 80196d0:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 80196d4:	492d      	ldr	r1, [pc, #180]	; (801978c <tcp_close_shutdown_fin+0xcc>)
 80196d6:	482e      	ldr	r0, [pc, #184]	; (8019790 <tcp_close_shutdown_fin+0xd0>)
 80196d8:	f00a fdda 	bl	8024290 <iprintf>

  switch (pcb->state) {
 80196dc:	687b      	ldr	r3, [r7, #4]
 80196de:	7d1b      	ldrb	r3, [r3, #20]
 80196e0:	2b07      	cmp	r3, #7
 80196e2:	d020      	beq.n	8019726 <tcp_close_shutdown_fin+0x66>
 80196e4:	2b07      	cmp	r3, #7
 80196e6:	dc2b      	bgt.n	8019740 <tcp_close_shutdown_fin+0x80>
 80196e8:	2b03      	cmp	r3, #3
 80196ea:	d002      	beq.n	80196f2 <tcp_close_shutdown_fin+0x32>
 80196ec:	2b04      	cmp	r3, #4
 80196ee:	d00d      	beq.n	801970c <tcp_close_shutdown_fin+0x4c>
 80196f0:	e026      	b.n	8019740 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80196f2:	6878      	ldr	r0, [r7, #4]
 80196f4:	f004 ff28 	bl	801e548 <tcp_send_fin>
 80196f8:	4603      	mov	r3, r0
 80196fa:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80196fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019700:	2b00      	cmp	r3, #0
 8019702:	d11f      	bne.n	8019744 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8019704:	687b      	ldr	r3, [r7, #4]
 8019706:	2205      	movs	r2, #5
 8019708:	751a      	strb	r2, [r3, #20]
      }
      break;
 801970a:	e01b      	b.n	8019744 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 801970c:	6878      	ldr	r0, [r7, #4]
 801970e:	f004 ff1b 	bl	801e548 <tcp_send_fin>
 8019712:	4603      	mov	r3, r0
 8019714:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801971a:	2b00      	cmp	r3, #0
 801971c:	d114      	bne.n	8019748 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 801971e:	687b      	ldr	r3, [r7, #4]
 8019720:	2205      	movs	r2, #5
 8019722:	751a      	strb	r2, [r3, #20]
      }
      break;
 8019724:	e010      	b.n	8019748 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8019726:	6878      	ldr	r0, [r7, #4]
 8019728:	f004 ff0e 	bl	801e548 <tcp_send_fin>
 801972c:	4603      	mov	r3, r0
 801972e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8019730:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019734:	2b00      	cmp	r3, #0
 8019736:	d109      	bne.n	801974c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8019738:	687b      	ldr	r3, [r7, #4]
 801973a:	2209      	movs	r2, #9
 801973c:	751a      	strb	r2, [r3, #20]
      }
      break;
 801973e:	e005      	b.n	801974c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8019740:	2300      	movs	r3, #0
 8019742:	e01c      	b.n	801977e <tcp_close_shutdown_fin+0xbe>
      break;
 8019744:	bf00      	nop
 8019746:	e002      	b.n	801974e <tcp_close_shutdown_fin+0x8e>
      break;
 8019748:	bf00      	nop
 801974a:	e000      	b.n	801974e <tcp_close_shutdown_fin+0x8e>
      break;
 801974c:	bf00      	nop
  }

  if (err == ERR_OK) {
 801974e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d103      	bne.n	801975e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8019756:	6878      	ldr	r0, [r7, #4]
 8019758:	f005 f834 	bl	801e7c4 <tcp_output>
 801975c:	e00d      	b.n	801977a <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 801975e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8019762:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8019766:	d108      	bne.n	801977a <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8019768:	687b      	ldr	r3, [r7, #4]
 801976a:	8b5b      	ldrh	r3, [r3, #26]
 801976c:	f043 0308 	orr.w	r3, r3, #8
 8019770:	b29a      	uxth	r2, r3
 8019772:	687b      	ldr	r3, [r7, #4]
 8019774:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8019776:	2300      	movs	r3, #0
 8019778:	e001      	b.n	801977e <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 801977a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801977e:	4618      	mov	r0, r3
 8019780:	3710      	adds	r7, #16
 8019782:	46bd      	mov	sp, r7
 8019784:	bd80      	pop	{r7, pc}
 8019786:	bf00      	nop
 8019788:	08026dec 	.word	0x08026dec
 801978c:	08026e9c 	.word	0x08026e9c
 8019790:	08026e30 	.word	0x08026e30

08019794 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8019794:	b580      	push	{r7, lr}
 8019796:	b082      	sub	sp, #8
 8019798:	af00      	add	r7, sp, #0
 801979a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	2b00      	cmp	r3, #0
 80197a0:	d109      	bne.n	80197b6 <tcp_close+0x22>
 80197a2:	4b0f      	ldr	r3, [pc, #60]	; (80197e0 <tcp_close+0x4c>)
 80197a4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 80197a8:	490e      	ldr	r1, [pc, #56]	; (80197e4 <tcp_close+0x50>)
 80197aa:	480f      	ldr	r0, [pc, #60]	; (80197e8 <tcp_close+0x54>)
 80197ac:	f00a fd70 	bl	8024290 <iprintf>
 80197b0:	f06f 030f 	mvn.w	r3, #15
 80197b4:	e00f      	b.n	80197d6 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 80197b6:	687b      	ldr	r3, [r7, #4]
 80197b8:	7d1b      	ldrb	r3, [r3, #20]
 80197ba:	2b01      	cmp	r3, #1
 80197bc:	d006      	beq.n	80197cc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 80197be:	687b      	ldr	r3, [r7, #4]
 80197c0:	8b5b      	ldrh	r3, [r3, #26]
 80197c2:	f043 0310 	orr.w	r3, r3, #16
 80197c6:	b29a      	uxth	r2, r3
 80197c8:	687b      	ldr	r3, [r7, #4]
 80197ca:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 80197cc:	2101      	movs	r1, #1
 80197ce:	6878      	ldr	r0, [r7, #4]
 80197d0:	f7ff fe94 	bl	80194fc <tcp_close_shutdown>
 80197d4:	4603      	mov	r3, r0
}
 80197d6:	4618      	mov	r0, r3
 80197d8:	3708      	adds	r7, #8
 80197da:	46bd      	mov	sp, r7
 80197dc:	bd80      	pop	{r7, pc}
 80197de:	bf00      	nop
 80197e0:	08026dec 	.word	0x08026dec
 80197e4:	08026efc 	.word	0x08026efc
 80197e8:	08026e30 	.word	0x08026e30

080197ec <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 80197ec:	b580      	push	{r7, lr}
 80197ee:	b084      	sub	sp, #16
 80197f0:	af00      	add	r7, sp, #0
 80197f2:	60f8      	str	r0, [r7, #12]
 80197f4:	60b9      	str	r1, [r7, #8]
 80197f6:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 80197f8:	68fb      	ldr	r3, [r7, #12]
 80197fa:	2b00      	cmp	r3, #0
 80197fc:	d109      	bne.n	8019812 <tcp_shutdown+0x26>
 80197fe:	4b26      	ldr	r3, [pc, #152]	; (8019898 <tcp_shutdown+0xac>)
 8019800:	f240 2207 	movw	r2, #519	; 0x207
 8019804:	4925      	ldr	r1, [pc, #148]	; (801989c <tcp_shutdown+0xb0>)
 8019806:	4826      	ldr	r0, [pc, #152]	; (80198a0 <tcp_shutdown+0xb4>)
 8019808:	f00a fd42 	bl	8024290 <iprintf>
 801980c:	f06f 030f 	mvn.w	r3, #15
 8019810:	e03d      	b.n	801988e <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 8019812:	68fb      	ldr	r3, [r7, #12]
 8019814:	7d1b      	ldrb	r3, [r3, #20]
 8019816:	2b01      	cmp	r3, #1
 8019818:	d102      	bne.n	8019820 <tcp_shutdown+0x34>
    return ERR_CONN;
 801981a:	f06f 030a 	mvn.w	r3, #10
 801981e:	e036      	b.n	801988e <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 8019820:	68bb      	ldr	r3, [r7, #8]
 8019822:	2b00      	cmp	r3, #0
 8019824:	d01b      	beq.n	801985e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8019826:	68fb      	ldr	r3, [r7, #12]
 8019828:	8b5b      	ldrh	r3, [r3, #26]
 801982a:	f043 0310 	orr.w	r3, r3, #16
 801982e:	b29a      	uxth	r2, r3
 8019830:	68fb      	ldr	r3, [r7, #12]
 8019832:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d005      	beq.n	8019846 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 801983a:	2101      	movs	r1, #1
 801983c:	68f8      	ldr	r0, [r7, #12]
 801983e:	f7ff fe5d 	bl	80194fc <tcp_close_shutdown>
 8019842:	4603      	mov	r3, r0
 8019844:	e023      	b.n	801988e <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 8019846:	68fb      	ldr	r3, [r7, #12]
 8019848:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801984a:	2b00      	cmp	r3, #0
 801984c:	d007      	beq.n	801985e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 801984e:	68fb      	ldr	r3, [r7, #12]
 8019850:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8019852:	4618      	mov	r0, r3
 8019854:	f7ff fae4 	bl	8018e20 <pbuf_free>
      pcb->refused_data = NULL;
 8019858:	68fb      	ldr	r3, [r7, #12]
 801985a:	2200      	movs	r2, #0
 801985c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 801985e:	687b      	ldr	r3, [r7, #4]
 8019860:	2b00      	cmp	r3, #0
 8019862:	d013      	beq.n	801988c <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 8019864:	68fb      	ldr	r3, [r7, #12]
 8019866:	7d1b      	ldrb	r3, [r3, #20]
 8019868:	2b04      	cmp	r3, #4
 801986a:	dc02      	bgt.n	8019872 <tcp_shutdown+0x86>
 801986c:	2b03      	cmp	r3, #3
 801986e:	da02      	bge.n	8019876 <tcp_shutdown+0x8a>
 8019870:	e009      	b.n	8019886 <tcp_shutdown+0x9a>
 8019872:	2b07      	cmp	r3, #7
 8019874:	d107      	bne.n	8019886 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 8019876:	68bb      	ldr	r3, [r7, #8]
 8019878:	b2db      	uxtb	r3, r3
 801987a:	4619      	mov	r1, r3
 801987c:	68f8      	ldr	r0, [r7, #12]
 801987e:	f7ff fe3d 	bl	80194fc <tcp_close_shutdown>
 8019882:	4603      	mov	r3, r0
 8019884:	e003      	b.n	801988e <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 8019886:	f06f 030a 	mvn.w	r3, #10
 801988a:	e000      	b.n	801988e <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 801988c:	2300      	movs	r3, #0
}
 801988e:	4618      	mov	r0, r3
 8019890:	3710      	adds	r7, #16
 8019892:	46bd      	mov	sp, r7
 8019894:	bd80      	pop	{r7, pc}
 8019896:	bf00      	nop
 8019898:	08026dec 	.word	0x08026dec
 801989c:	08026f14 	.word	0x08026f14
 80198a0:	08026e30 	.word	0x08026e30

080198a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80198a4:	b580      	push	{r7, lr}
 80198a6:	b08e      	sub	sp, #56	; 0x38
 80198a8:	af04      	add	r7, sp, #16
 80198aa:	6078      	str	r0, [r7, #4]
 80198ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80198ae:	687b      	ldr	r3, [r7, #4]
 80198b0:	2b00      	cmp	r3, #0
 80198b2:	d107      	bne.n	80198c4 <tcp_abandon+0x20>
 80198b4:	4b52      	ldr	r3, [pc, #328]	; (8019a00 <tcp_abandon+0x15c>)
 80198b6:	f240 223d 	movw	r2, #573	; 0x23d
 80198ba:	4952      	ldr	r1, [pc, #328]	; (8019a04 <tcp_abandon+0x160>)
 80198bc:	4852      	ldr	r0, [pc, #328]	; (8019a08 <tcp_abandon+0x164>)
 80198be:	f00a fce7 	bl	8024290 <iprintf>
 80198c2:	e099      	b.n	80199f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80198c4:	687b      	ldr	r3, [r7, #4]
 80198c6:	7d1b      	ldrb	r3, [r3, #20]
 80198c8:	2b01      	cmp	r3, #1
 80198ca:	d106      	bne.n	80198da <tcp_abandon+0x36>
 80198cc:	4b4c      	ldr	r3, [pc, #304]	; (8019a00 <tcp_abandon+0x15c>)
 80198ce:	f44f 7210 	mov.w	r2, #576	; 0x240
 80198d2:	494e      	ldr	r1, [pc, #312]	; (8019a0c <tcp_abandon+0x168>)
 80198d4:	484c      	ldr	r0, [pc, #304]	; (8019a08 <tcp_abandon+0x164>)
 80198d6:	f00a fcdb 	bl	8024290 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80198da:	687b      	ldr	r3, [r7, #4]
 80198dc:	7d1b      	ldrb	r3, [r3, #20]
 80198de:	2b0a      	cmp	r3, #10
 80198e0:	d107      	bne.n	80198f2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80198e2:	6879      	ldr	r1, [r7, #4]
 80198e4:	484a      	ldr	r0, [pc, #296]	; (8019a10 <tcp_abandon+0x16c>)
 80198e6:	f001 fb51 	bl	801af8c <tcp_pcb_remove>
    tcp_free(pcb);
 80198ea:	6878      	ldr	r0, [r7, #4]
 80198ec:	f7ff fd54 	bl	8019398 <tcp_free>
 80198f0:	e082      	b.n	80199f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80198f2:	2300      	movs	r3, #0
 80198f4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80198f6:	2300      	movs	r3, #0
 80198f8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80198fa:	687b      	ldr	r3, [r7, #4]
 80198fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80198fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8019900:	687b      	ldr	r3, [r7, #4]
 8019902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019904:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801990c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801990e:	687b      	ldr	r3, [r7, #4]
 8019910:	691b      	ldr	r3, [r3, #16]
 8019912:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	7d1b      	ldrb	r3, [r3, #20]
 8019918:	2b00      	cmp	r3, #0
 801991a:	d126      	bne.n	801996a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801991c:	687b      	ldr	r3, [r7, #4]
 801991e:	8adb      	ldrh	r3, [r3, #22]
 8019920:	2b00      	cmp	r3, #0
 8019922:	d02e      	beq.n	8019982 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8019924:	4b3b      	ldr	r3, [pc, #236]	; (8019a14 <tcp_abandon+0x170>)
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	687a      	ldr	r2, [r7, #4]
 801992a:	429a      	cmp	r2, r3
 801992c:	d105      	bne.n	801993a <tcp_abandon+0x96>
 801992e:	4b39      	ldr	r3, [pc, #228]	; (8019a14 <tcp_abandon+0x170>)
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	68db      	ldr	r3, [r3, #12]
 8019934:	4a37      	ldr	r2, [pc, #220]	; (8019a14 <tcp_abandon+0x170>)
 8019936:	6013      	str	r3, [r2, #0]
 8019938:	e013      	b.n	8019962 <tcp_abandon+0xbe>
 801993a:	4b36      	ldr	r3, [pc, #216]	; (8019a14 <tcp_abandon+0x170>)
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	61fb      	str	r3, [r7, #28]
 8019940:	e00c      	b.n	801995c <tcp_abandon+0xb8>
 8019942:	69fb      	ldr	r3, [r7, #28]
 8019944:	68db      	ldr	r3, [r3, #12]
 8019946:	687a      	ldr	r2, [r7, #4]
 8019948:	429a      	cmp	r2, r3
 801994a:	d104      	bne.n	8019956 <tcp_abandon+0xb2>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	68da      	ldr	r2, [r3, #12]
 8019950:	69fb      	ldr	r3, [r7, #28]
 8019952:	60da      	str	r2, [r3, #12]
 8019954:	e005      	b.n	8019962 <tcp_abandon+0xbe>
 8019956:	69fb      	ldr	r3, [r7, #28]
 8019958:	68db      	ldr	r3, [r3, #12]
 801995a:	61fb      	str	r3, [r7, #28]
 801995c:	69fb      	ldr	r3, [r7, #28]
 801995e:	2b00      	cmp	r3, #0
 8019960:	d1ef      	bne.n	8019942 <tcp_abandon+0x9e>
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	2200      	movs	r2, #0
 8019966:	60da      	str	r2, [r3, #12]
 8019968:	e00b      	b.n	8019982 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801996a:	683b      	ldr	r3, [r7, #0]
 801996c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801996e:	687b      	ldr	r3, [r7, #4]
 8019970:	8adb      	ldrh	r3, [r3, #22]
 8019972:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8019974:	6879      	ldr	r1, [r7, #4]
 8019976:	4828      	ldr	r0, [pc, #160]	; (8019a18 <tcp_abandon+0x174>)
 8019978:	f001 fb08 	bl	801af8c <tcp_pcb_remove>
 801997c:	4b27      	ldr	r3, [pc, #156]	; (8019a1c <tcp_abandon+0x178>)
 801997e:	2201      	movs	r2, #1
 8019980:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8019982:	687b      	ldr	r3, [r7, #4]
 8019984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8019986:	2b00      	cmp	r3, #0
 8019988:	d004      	beq.n	8019994 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801998e:	4618      	mov	r0, r3
 8019990:	f000 ffdc 	bl	801a94c <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8019998:	2b00      	cmp	r3, #0
 801999a:	d004      	beq.n	80199a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801999c:	687b      	ldr	r3, [r7, #4]
 801999e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80199a0:	4618      	mov	r0, r3
 80199a2:	f000 ffd3 	bl	801a94c <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80199a6:	687b      	ldr	r3, [r7, #4]
 80199a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199aa:	2b00      	cmp	r3, #0
 80199ac:	d004      	beq.n	80199b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80199b2:	4618      	mov	r0, r3
 80199b4:	f000 ffca 	bl	801a94c <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80199b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199ba:	2b00      	cmp	r3, #0
 80199bc:	d00e      	beq.n	80199dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80199be:	6879      	ldr	r1, [r7, #4]
 80199c0:	687b      	ldr	r3, [r7, #4]
 80199c2:	3304      	adds	r3, #4
 80199c4:	687a      	ldr	r2, [r7, #4]
 80199c6:	8b12      	ldrh	r2, [r2, #24]
 80199c8:	9202      	str	r2, [sp, #8]
 80199ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80199cc:	9201      	str	r2, [sp, #4]
 80199ce:	9300      	str	r3, [sp, #0]
 80199d0:	460b      	mov	r3, r1
 80199d2:	697a      	ldr	r2, [r7, #20]
 80199d4:	69b9      	ldr	r1, [r7, #24]
 80199d6:	6878      	ldr	r0, [r7, #4]
 80199d8:	f005 fca8 	bl	801f32c <tcp_rst>
    }
    last_state = pcb->state;
 80199dc:	687b      	ldr	r3, [r7, #4]
 80199de:	7d1b      	ldrb	r3, [r3, #20]
 80199e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80199e2:	6878      	ldr	r0, [r7, #4]
 80199e4:	f7ff fcd8 	bl	8019398 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80199e8:	693b      	ldr	r3, [r7, #16]
 80199ea:	2b00      	cmp	r3, #0
 80199ec:	d004      	beq.n	80199f8 <tcp_abandon+0x154>
 80199ee:	693b      	ldr	r3, [r7, #16]
 80199f0:	f06f 010c 	mvn.w	r1, #12
 80199f4:	68f8      	ldr	r0, [r7, #12]
 80199f6:	4798      	blx	r3
  }
}
 80199f8:	3728      	adds	r7, #40	; 0x28
 80199fa:	46bd      	mov	sp, r7
 80199fc:	bd80      	pop	{r7, pc}
 80199fe:	bf00      	nop
 8019a00:	08026dec 	.word	0x08026dec
 8019a04:	08026f30 	.word	0x08026f30
 8019a08:	08026e30 	.word	0x08026e30
 8019a0c:	08026f4c 	.word	0x08026f4c
 8019a10:	2000bfcc 	.word	0x2000bfcc
 8019a14:	2000bfc0 	.word	0x2000bfc0
 8019a18:	2000bfc8 	.word	0x2000bfc8
 8019a1c:	2000bfd0 	.word	0x2000bfd0

08019a20 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8019a20:	b580      	push	{r7, lr}
 8019a22:	b082      	sub	sp, #8
 8019a24:	af00      	add	r7, sp, #0
 8019a26:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8019a28:	2101      	movs	r1, #1
 8019a2a:	6878      	ldr	r0, [r7, #4]
 8019a2c:	f7ff ff3a 	bl	80198a4 <tcp_abandon>
}
 8019a30:	bf00      	nop
 8019a32:	3708      	adds	r7, #8
 8019a34:	46bd      	mov	sp, r7
 8019a36:	bd80      	pop	{r7, pc}

08019a38 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019a38:	b580      	push	{r7, lr}
 8019a3a:	b088      	sub	sp, #32
 8019a3c:	af00      	add	r7, sp, #0
 8019a3e:	60f8      	str	r0, [r7, #12]
 8019a40:	60b9      	str	r1, [r7, #8]
 8019a42:	4613      	mov	r3, r2
 8019a44:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 8019a46:	2304      	movs	r3, #4
 8019a48:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019a4a:	68bb      	ldr	r3, [r7, #8]
 8019a4c:	2b00      	cmp	r3, #0
 8019a4e:	d101      	bne.n	8019a54 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 8019a50:	4b3e      	ldr	r3, [pc, #248]	; (8019b4c <tcp_bind+0x114>)
 8019a52:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019a54:	68fb      	ldr	r3, [r7, #12]
 8019a56:	2b00      	cmp	r3, #0
 8019a58:	d109      	bne.n	8019a6e <tcp_bind+0x36>
 8019a5a:	4b3d      	ldr	r3, [pc, #244]	; (8019b50 <tcp_bind+0x118>)
 8019a5c:	f240 22a9 	movw	r2, #681	; 0x2a9
 8019a60:	493c      	ldr	r1, [pc, #240]	; (8019b54 <tcp_bind+0x11c>)
 8019a62:	483d      	ldr	r0, [pc, #244]	; (8019b58 <tcp_bind+0x120>)
 8019a64:	f00a fc14 	bl	8024290 <iprintf>
 8019a68:	f06f 030f 	mvn.w	r3, #15
 8019a6c:	e06a      	b.n	8019b44 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 8019a6e:	68fb      	ldr	r3, [r7, #12]
 8019a70:	7d1b      	ldrb	r3, [r3, #20]
 8019a72:	2b00      	cmp	r3, #0
 8019a74:	d009      	beq.n	8019a8a <tcp_bind+0x52>
 8019a76:	4b36      	ldr	r3, [pc, #216]	; (8019b50 <tcp_bind+0x118>)
 8019a78:	f240 22ab 	movw	r2, #683	; 0x2ab
 8019a7c:	4937      	ldr	r1, [pc, #220]	; (8019b5c <tcp_bind+0x124>)
 8019a7e:	4836      	ldr	r0, [pc, #216]	; (8019b58 <tcp_bind+0x120>)
 8019a80:	f00a fc06 	bl	8024290 <iprintf>
 8019a84:	f06f 0305 	mvn.w	r3, #5
 8019a88:	e05c      	b.n	8019b44 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 8019a8a:	88fb      	ldrh	r3, [r7, #6]
 8019a8c:	2b00      	cmp	r3, #0
 8019a8e:	d109      	bne.n	8019aa4 <tcp_bind+0x6c>
    port = tcp_new_port();
 8019a90:	f000 f9de 	bl	8019e50 <tcp_new_port>
 8019a94:	4603      	mov	r3, r0
 8019a96:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019a98:	88fb      	ldrh	r3, [r7, #6]
 8019a9a:	2b00      	cmp	r3, #0
 8019a9c:	d135      	bne.n	8019b0a <tcp_bind+0xd2>
      return ERR_BUF;
 8019a9e:	f06f 0301 	mvn.w	r3, #1
 8019aa2:	e04f      	b.n	8019b44 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 8019aa4:	2300      	movs	r3, #0
 8019aa6:	61fb      	str	r3, [r7, #28]
 8019aa8:	e02b      	b.n	8019b02 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019aaa:	4a2d      	ldr	r2, [pc, #180]	; (8019b60 <tcp_bind+0x128>)
 8019aac:	69fb      	ldr	r3, [r7, #28]
 8019aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	61bb      	str	r3, [r7, #24]
 8019ab6:	e01e      	b.n	8019af6 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 8019ab8:	69bb      	ldr	r3, [r7, #24]
 8019aba:	8adb      	ldrh	r3, [r3, #22]
 8019abc:	88fa      	ldrh	r2, [r7, #6]
 8019abe:	429a      	cmp	r2, r3
 8019ac0:	d116      	bne.n	8019af0 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 8019ac2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019ac4:	2b00      	cmp	r3, #0
 8019ac6:	d010      	beq.n	8019aea <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 8019ac8:	69bb      	ldr	r3, [r7, #24]
 8019aca:	681b      	ldr	r3, [r3, #0]
 8019acc:	2b00      	cmp	r3, #0
 8019ace:	d00c      	beq.n	8019aea <tcp_bind+0xb2>
 8019ad0:	68bb      	ldr	r3, [r7, #8]
 8019ad2:	2b00      	cmp	r3, #0
 8019ad4:	d009      	beq.n	8019aea <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 8019ad6:	68bb      	ldr	r3, [r7, #8]
 8019ad8:	681b      	ldr	r3, [r3, #0]
 8019ada:	2b00      	cmp	r3, #0
 8019adc:	d005      	beq.n	8019aea <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 8019ade:	69bb      	ldr	r3, [r7, #24]
 8019ae0:	681a      	ldr	r2, [r3, #0]
 8019ae2:	68bb      	ldr	r3, [r7, #8]
 8019ae4:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 8019ae6:	429a      	cmp	r2, r3
 8019ae8:	d102      	bne.n	8019af0 <tcp_bind+0xb8>
              return ERR_USE;
 8019aea:	f06f 0307 	mvn.w	r3, #7
 8019aee:	e029      	b.n	8019b44 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 8019af0:	69bb      	ldr	r3, [r7, #24]
 8019af2:	68db      	ldr	r3, [r3, #12]
 8019af4:	61bb      	str	r3, [r7, #24]
 8019af6:	69bb      	ldr	r3, [r7, #24]
 8019af8:	2b00      	cmp	r3, #0
 8019afa:	d1dd      	bne.n	8019ab8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 8019afc:	69fb      	ldr	r3, [r7, #28]
 8019afe:	3301      	adds	r3, #1
 8019b00:	61fb      	str	r3, [r7, #28]
 8019b02:	69fa      	ldr	r2, [r7, #28]
 8019b04:	697b      	ldr	r3, [r7, #20]
 8019b06:	429a      	cmp	r2, r3
 8019b08:	dbcf      	blt.n	8019aaa <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 8019b0a:	68bb      	ldr	r3, [r7, #8]
 8019b0c:	2b00      	cmp	r3, #0
 8019b0e:	d00c      	beq.n	8019b2a <tcp_bind+0xf2>
 8019b10:	68bb      	ldr	r3, [r7, #8]
 8019b12:	681b      	ldr	r3, [r3, #0]
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d008      	beq.n	8019b2a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 8019b18:	68bb      	ldr	r3, [r7, #8]
 8019b1a:	2b00      	cmp	r3, #0
 8019b1c:	d002      	beq.n	8019b24 <tcp_bind+0xec>
 8019b1e:	68bb      	ldr	r3, [r7, #8]
 8019b20:	681b      	ldr	r3, [r3, #0]
 8019b22:	e000      	b.n	8019b26 <tcp_bind+0xee>
 8019b24:	2300      	movs	r3, #0
 8019b26:	68fa      	ldr	r2, [r7, #12]
 8019b28:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 8019b2a:	68fb      	ldr	r3, [r7, #12]
 8019b2c:	88fa      	ldrh	r2, [r7, #6]
 8019b2e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 8019b30:	4b0c      	ldr	r3, [pc, #48]	; (8019b64 <tcp_bind+0x12c>)
 8019b32:	681a      	ldr	r2, [r3, #0]
 8019b34:	68fb      	ldr	r3, [r7, #12]
 8019b36:	60da      	str	r2, [r3, #12]
 8019b38:	4a0a      	ldr	r2, [pc, #40]	; (8019b64 <tcp_bind+0x12c>)
 8019b3a:	68fb      	ldr	r3, [r7, #12]
 8019b3c:	6013      	str	r3, [r2, #0]
 8019b3e:	f005 fdb7 	bl	801f6b0 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 8019b42:	2300      	movs	r3, #0
}
 8019b44:	4618      	mov	r0, r3
 8019b46:	3720      	adds	r7, #32
 8019b48:	46bd      	mov	sp, r7
 8019b4a:	bd80      	pop	{r7, pc}
 8019b4c:	08028e88 	.word	0x08028e88
 8019b50:	08026dec 	.word	0x08026dec
 8019b54:	08026f80 	.word	0x08026f80
 8019b58:	08026e30 	.word	0x08026e30
 8019b5c:	08026f98 	.word	0x08026f98
 8019b60:	08028e60 	.word	0x08028e60
 8019b64:	2000bfc0 	.word	0x2000bfc0

08019b68 <tcp_accept_null>:
/**
 * Default accept callback if no accept callback is specified by the user.
 */
static err_t
tcp_accept_null(void *arg, struct tcp_pcb *pcb, err_t err)
{
 8019b68:	b580      	push	{r7, lr}
 8019b6a:	b084      	sub	sp, #16
 8019b6c:	af00      	add	r7, sp, #0
 8019b6e:	60f8      	str	r0, [r7, #12]
 8019b70:	60b9      	str	r1, [r7, #8]
 8019b72:	4613      	mov	r3, r2
 8019b74:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(arg);
  LWIP_UNUSED_ARG(err);

  LWIP_ASSERT("tcp_accept_null: invalid pcb", pcb != NULL);
 8019b76:	68bb      	ldr	r3, [r7, #8]
 8019b78:	2b00      	cmp	r3, #0
 8019b7a:	d106      	bne.n	8019b8a <tcp_accept_null+0x22>
 8019b7c:	4b07      	ldr	r3, [pc, #28]	; (8019b9c <tcp_accept_null+0x34>)
 8019b7e:	f240 320f 	movw	r2, #783	; 0x30f
 8019b82:	4907      	ldr	r1, [pc, #28]	; (8019ba0 <tcp_accept_null+0x38>)
 8019b84:	4807      	ldr	r0, [pc, #28]	; (8019ba4 <tcp_accept_null+0x3c>)
 8019b86:	f00a fb83 	bl	8024290 <iprintf>

  tcp_abort(pcb);
 8019b8a:	68b8      	ldr	r0, [r7, #8]
 8019b8c:	f7ff ff48 	bl	8019a20 <tcp_abort>

  return ERR_ABRT;
 8019b90:	f06f 030c 	mvn.w	r3, #12
}
 8019b94:	4618      	mov	r0, r3
 8019b96:	3710      	adds	r7, #16
 8019b98:	46bd      	mov	sp, r7
 8019b9a:	bd80      	pop	{r7, pc}
 8019b9c:	08026dec 	.word	0x08026dec
 8019ba0:	08026fc0 	.word	0x08026fc0
 8019ba4:	08026e30 	.word	0x08026e30

08019ba8 <tcp_listen_with_backlog_and_err>:
 *       called like this:
 *             tpcb = tcp_listen_with_backlog_and_err(tpcb, backlog, &err);
 */
struct tcp_pcb *
tcp_listen_with_backlog_and_err(struct tcp_pcb *pcb, u8_t backlog, err_t *err)
{
 8019ba8:	b580      	push	{r7, lr}
 8019baa:	b088      	sub	sp, #32
 8019bac:	af00      	add	r7, sp, #0
 8019bae:	60f8      	str	r0, [r7, #12]
 8019bb0:	460b      	mov	r3, r1
 8019bb2:	607a      	str	r2, [r7, #4]
 8019bb4:	72fb      	strb	r3, [r7, #11]
  struct tcp_pcb_listen *lpcb = NULL;
 8019bb6:	2300      	movs	r3, #0
 8019bb8:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(backlog);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_listen_with_backlog_and_err: invalid pcb", pcb != NULL, res = ERR_ARG; goto done);
 8019bba:	68fb      	ldr	r3, [r7, #12]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d109      	bne.n	8019bd4 <tcp_listen_with_backlog_and_err+0x2c>
 8019bc0:	4b47      	ldr	r3, [pc, #284]	; (8019ce0 <tcp_listen_with_backlog_and_err+0x138>)
 8019bc2:	f240 3259 	movw	r2, #857	; 0x359
 8019bc6:	4947      	ldr	r1, [pc, #284]	; (8019ce4 <tcp_listen_with_backlog_and_err+0x13c>)
 8019bc8:	4847      	ldr	r0, [pc, #284]	; (8019ce8 <tcp_listen_with_backlog_and_err+0x140>)
 8019bca:	f00a fb61 	bl	8024290 <iprintf>
 8019bce:	23f0      	movs	r3, #240	; 0xf0
 8019bd0:	76fb      	strb	r3, [r7, #27]
 8019bd2:	e079      	b.n	8019cc8 <tcp_listen_with_backlog_and_err+0x120>
  LWIP_ERROR("tcp_listen_with_backlog_and_err: pcb already connected", pcb->state == CLOSED, res = ERR_CLSD; goto done);
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	7d1b      	ldrb	r3, [r3, #20]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d009      	beq.n	8019bf0 <tcp_listen_with_backlog_and_err+0x48>
 8019bdc:	4b40      	ldr	r3, [pc, #256]	; (8019ce0 <tcp_listen_with_backlog_and_err+0x138>)
 8019bde:	f240 325a 	movw	r2, #858	; 0x35a
 8019be2:	4942      	ldr	r1, [pc, #264]	; (8019cec <tcp_listen_with_backlog_and_err+0x144>)
 8019be4:	4840      	ldr	r0, [pc, #256]	; (8019ce8 <tcp_listen_with_backlog_and_err+0x140>)
 8019be6:	f00a fb53 	bl	8024290 <iprintf>
 8019bea:	23f1      	movs	r3, #241	; 0xf1
 8019bec:	76fb      	strb	r3, [r7, #27]
 8019bee:	e06b      	b.n	8019cc8 <tcp_listen_with_backlog_and_err+0x120>

  /* already listening? */
  if (pcb->state == LISTEN) {
 8019bf0:	68fb      	ldr	r3, [r7, #12]
 8019bf2:	7d1b      	ldrb	r3, [r3, #20]
 8019bf4:	2b01      	cmp	r3, #1
 8019bf6:	d104      	bne.n	8019c02 <tcp_listen_with_backlog_and_err+0x5a>
    lpcb = (struct tcp_pcb_listen *)pcb;
 8019bf8:	68fb      	ldr	r3, [r7, #12]
 8019bfa:	61fb      	str	r3, [r7, #28]
    res = ERR_ALREADY;
 8019bfc:	23f7      	movs	r3, #247	; 0xf7
 8019bfe:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019c00:	e062      	b.n	8019cc8 <tcp_listen_with_backlog_and_err+0x120>
        goto done;
      }
    }
  }
#endif /* SO_REUSE */
  lpcb = (struct tcp_pcb_listen *)memp_malloc(MEMP_TCP_PCB_LISTEN);
 8019c02:	2002      	movs	r0, #2
 8019c04:	f7fe f9f2 	bl	8017fec <memp_malloc>
 8019c08:	61f8      	str	r0, [r7, #28]
  if (lpcb == NULL) {
 8019c0a:	69fb      	ldr	r3, [r7, #28]
 8019c0c:	2b00      	cmp	r3, #0
 8019c0e:	d102      	bne.n	8019c16 <tcp_listen_with_backlog_and_err+0x6e>
    res = ERR_MEM;
 8019c10:	23ff      	movs	r3, #255	; 0xff
 8019c12:	76fb      	strb	r3, [r7, #27]
    goto done;
 8019c14:	e058      	b.n	8019cc8 <tcp_listen_with_backlog_and_err+0x120>
  }
  lpcb->callback_arg = pcb->callback_arg;
 8019c16:	68fb      	ldr	r3, [r7, #12]
 8019c18:	691a      	ldr	r2, [r3, #16]
 8019c1a:	69fb      	ldr	r3, [r7, #28]
 8019c1c:	611a      	str	r2, [r3, #16]
  lpcb->local_port = pcb->local_port;
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	8ada      	ldrh	r2, [r3, #22]
 8019c22:	69fb      	ldr	r3, [r7, #28]
 8019c24:	82da      	strh	r2, [r3, #22]
  lpcb->state = LISTEN;
 8019c26:	69fb      	ldr	r3, [r7, #28]
 8019c28:	2201      	movs	r2, #1
 8019c2a:	751a      	strb	r2, [r3, #20]
  lpcb->prio = pcb->prio;
 8019c2c:	68fb      	ldr	r3, [r7, #12]
 8019c2e:	7d5a      	ldrb	r2, [r3, #21]
 8019c30:	69fb      	ldr	r3, [r7, #28]
 8019c32:	755a      	strb	r2, [r3, #21]
  lpcb->so_options = pcb->so_options;
 8019c34:	68fb      	ldr	r3, [r7, #12]
 8019c36:	7a5a      	ldrb	r2, [r3, #9]
 8019c38:	69fb      	ldr	r3, [r7, #28]
 8019c3a:	725a      	strb	r2, [r3, #9]
  lpcb->netif_idx = NETIF_NO_INDEX;
 8019c3c:	69fb      	ldr	r3, [r7, #28]
 8019c3e:	2200      	movs	r2, #0
 8019c40:	721a      	strb	r2, [r3, #8]
  lpcb->ttl = pcb->ttl;
 8019c42:	68fb      	ldr	r3, [r7, #12]
 8019c44:	7ada      	ldrb	r2, [r3, #11]
 8019c46:	69fb      	ldr	r3, [r7, #28]
 8019c48:	72da      	strb	r2, [r3, #11]
  lpcb->tos = pcb->tos;
 8019c4a:	68fb      	ldr	r3, [r7, #12]
 8019c4c:	7a9a      	ldrb	r2, [r3, #10]
 8019c4e:	69fb      	ldr	r3, [r7, #28]
 8019c50:	729a      	strb	r2, [r3, #10]
#if LWIP_IPV4 && LWIP_IPV6
  IP_SET_TYPE_VAL(lpcb->remote_ip, pcb->local_ip.type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  ip_addr_copy(lpcb->local_ip, pcb->local_ip);
 8019c52:	68fb      	ldr	r3, [r7, #12]
 8019c54:	681a      	ldr	r2, [r3, #0]
 8019c56:	69fb      	ldr	r3, [r7, #28]
 8019c58:	601a      	str	r2, [r3, #0]
  if (pcb->local_port != 0) {
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	8adb      	ldrh	r3, [r3, #22]
 8019c5e:	2b00      	cmp	r3, #0
 8019c60:	d021      	beq.n	8019ca6 <tcp_listen_with_backlog_and_err+0xfe>
    TCP_RMV(&tcp_bound_pcbs, pcb);
 8019c62:	4b23      	ldr	r3, [pc, #140]	; (8019cf0 <tcp_listen_with_backlog_and_err+0x148>)
 8019c64:	681b      	ldr	r3, [r3, #0]
 8019c66:	68fa      	ldr	r2, [r7, #12]
 8019c68:	429a      	cmp	r2, r3
 8019c6a:	d105      	bne.n	8019c78 <tcp_listen_with_backlog_and_err+0xd0>
 8019c6c:	4b20      	ldr	r3, [pc, #128]	; (8019cf0 <tcp_listen_with_backlog_and_err+0x148>)
 8019c6e:	681b      	ldr	r3, [r3, #0]
 8019c70:	68db      	ldr	r3, [r3, #12]
 8019c72:	4a1f      	ldr	r2, [pc, #124]	; (8019cf0 <tcp_listen_with_backlog_and_err+0x148>)
 8019c74:	6013      	str	r3, [r2, #0]
 8019c76:	e013      	b.n	8019ca0 <tcp_listen_with_backlog_and_err+0xf8>
 8019c78:	4b1d      	ldr	r3, [pc, #116]	; (8019cf0 <tcp_listen_with_backlog_and_err+0x148>)
 8019c7a:	681b      	ldr	r3, [r3, #0]
 8019c7c:	617b      	str	r3, [r7, #20]
 8019c7e:	e00c      	b.n	8019c9a <tcp_listen_with_backlog_and_err+0xf2>
 8019c80:	697b      	ldr	r3, [r7, #20]
 8019c82:	68db      	ldr	r3, [r3, #12]
 8019c84:	68fa      	ldr	r2, [r7, #12]
 8019c86:	429a      	cmp	r2, r3
 8019c88:	d104      	bne.n	8019c94 <tcp_listen_with_backlog_and_err+0xec>
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	68da      	ldr	r2, [r3, #12]
 8019c8e:	697b      	ldr	r3, [r7, #20]
 8019c90:	60da      	str	r2, [r3, #12]
 8019c92:	e005      	b.n	8019ca0 <tcp_listen_with_backlog_and_err+0xf8>
 8019c94:	697b      	ldr	r3, [r7, #20]
 8019c96:	68db      	ldr	r3, [r3, #12]
 8019c98:	617b      	str	r3, [r7, #20]
 8019c9a:	697b      	ldr	r3, [r7, #20]
 8019c9c:	2b00      	cmp	r3, #0
 8019c9e:	d1ef      	bne.n	8019c80 <tcp_listen_with_backlog_and_err+0xd8>
 8019ca0:	68fb      	ldr	r3, [r7, #12]
 8019ca2:	2200      	movs	r2, #0
 8019ca4:	60da      	str	r2, [r3, #12]
  }
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  /* copy over ext_args to listening pcb  */
  memcpy(&lpcb->ext_args, &pcb->ext_args, sizeof(pcb->ext_args));
#endif
  tcp_free(pcb);
 8019ca6:	68f8      	ldr	r0, [r7, #12]
 8019ca8:	f7ff fb76 	bl	8019398 <tcp_free>
#if LWIP_CALLBACK_API
  lpcb->accept = tcp_accept_null;
 8019cac:	69fb      	ldr	r3, [r7, #28]
 8019cae:	4a11      	ldr	r2, [pc, #68]	; (8019cf4 <tcp_listen_with_backlog_and_err+0x14c>)
 8019cb0:	619a      	str	r2, [r3, #24]
#endif /* LWIP_CALLBACK_API */
#if TCP_LISTEN_BACKLOG
  lpcb->accepts_pending = 0;
  tcp_backlog_set(lpcb, backlog);
#endif /* TCP_LISTEN_BACKLOG */
  TCP_REG(&tcp_listen_pcbs.pcbs, (struct tcp_pcb *)lpcb);
 8019cb2:	4b11      	ldr	r3, [pc, #68]	; (8019cf8 <tcp_listen_with_backlog_and_err+0x150>)
 8019cb4:	681a      	ldr	r2, [r3, #0]
 8019cb6:	69fb      	ldr	r3, [r7, #28]
 8019cb8:	60da      	str	r2, [r3, #12]
 8019cba:	4a0f      	ldr	r2, [pc, #60]	; (8019cf8 <tcp_listen_with_backlog_and_err+0x150>)
 8019cbc:	69fb      	ldr	r3, [r7, #28]
 8019cbe:	6013      	str	r3, [r2, #0]
 8019cc0:	f005 fcf6 	bl	801f6b0 <tcp_timer_needed>
  res = ERR_OK;
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	76fb      	strb	r3, [r7, #27]
done:
  if (err != NULL) {
 8019cc8:	687b      	ldr	r3, [r7, #4]
 8019cca:	2b00      	cmp	r3, #0
 8019ccc:	d002      	beq.n	8019cd4 <tcp_listen_with_backlog_and_err+0x12c>
    *err = res;
 8019cce:	687b      	ldr	r3, [r7, #4]
 8019cd0:	7efa      	ldrb	r2, [r7, #27]
 8019cd2:	701a      	strb	r2, [r3, #0]
  }
  return (struct tcp_pcb *)lpcb;
 8019cd4:	69fb      	ldr	r3, [r7, #28]
}
 8019cd6:	4618      	mov	r0, r3
 8019cd8:	3720      	adds	r7, #32
 8019cda:	46bd      	mov	sp, r7
 8019cdc:	bd80      	pop	{r7, pc}
 8019cde:	bf00      	nop
 8019ce0:	08026dec 	.word	0x08026dec
 8019ce4:	08026fe0 	.word	0x08026fe0
 8019ce8:	08026e30 	.word	0x08026e30
 8019cec:	08027010 	.word	0x08027010
 8019cf0:	2000bfc0 	.word	0x2000bfc0
 8019cf4:	08019b69 	.word	0x08019b69
 8019cf8:	2000bfc4 	.word	0x2000bfc4

08019cfc <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b084      	sub	sp, #16
 8019d00:	af00      	add	r7, sp, #0
 8019d02:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8019d04:	687b      	ldr	r3, [r7, #4]
 8019d06:	2b00      	cmp	r3, #0
 8019d08:	d106      	bne.n	8019d18 <tcp_update_rcv_ann_wnd+0x1c>
 8019d0a:	4b25      	ldr	r3, [pc, #148]	; (8019da0 <tcp_update_rcv_ann_wnd+0xa4>)
 8019d0c:	f240 32a6 	movw	r2, #934	; 0x3a6
 8019d10:	4924      	ldr	r1, [pc, #144]	; (8019da4 <tcp_update_rcv_ann_wnd+0xa8>)
 8019d12:	4825      	ldr	r0, [pc, #148]	; (8019da8 <tcp_update_rcv_ann_wnd+0xac>)
 8019d14:	f00a fabc 	bl	8024290 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8019d18:	687b      	ldr	r3, [r7, #4]
 8019d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d1c:	687a      	ldr	r2, [r7, #4]
 8019d1e:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8019d20:	4413      	add	r3, r2
 8019d22:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8019d24:	687b      	ldr	r3, [r7, #4]
 8019d26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d28:	687a      	ldr	r2, [r7, #4]
 8019d2a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8019d2c:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 8019d30:	bf28      	it	cs
 8019d32:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8019d36:	b292      	uxth	r2, r2
 8019d38:	4413      	add	r3, r2
 8019d3a:	68fa      	ldr	r2, [r7, #12]
 8019d3c:	1ad3      	subs	r3, r2, r3
 8019d3e:	2b00      	cmp	r3, #0
 8019d40:	db08      	blt.n	8019d54 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 8019d42:	687b      	ldr	r3, [r7, #4]
 8019d44:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019d46:	687b      	ldr	r3, [r7, #4]
 8019d48:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d4e:	68fa      	ldr	r2, [r7, #12]
 8019d50:	1ad3      	subs	r3, r2, r3
 8019d52:	e020      	b.n	8019d96 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8019d58:	687b      	ldr	r3, [r7, #4]
 8019d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8019d5c:	1ad3      	subs	r3, r2, r3
 8019d5e:	2b00      	cmp	r3, #0
 8019d60:	dd03      	ble.n	8019d6a <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 8019d62:	687b      	ldr	r3, [r7, #4]
 8019d64:	2200      	movs	r2, #0
 8019d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8019d68:	e014      	b.n	8019d94 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8019d6a:	687b      	ldr	r3, [r7, #4]
 8019d6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8019d6e:	687b      	ldr	r3, [r7, #4]
 8019d70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8019d72:	1ad3      	subs	r3, r2, r3
 8019d74:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 8019d76:	68bb      	ldr	r3, [r7, #8]
 8019d78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8019d7c:	d306      	bcc.n	8019d8c <tcp_update_rcv_ann_wnd+0x90>
 8019d7e:	4b08      	ldr	r3, [pc, #32]	; (8019da0 <tcp_update_rcv_ann_wnd+0xa4>)
 8019d80:	f240 32b6 	movw	r2, #950	; 0x3b6
 8019d84:	4909      	ldr	r1, [pc, #36]	; (8019dac <tcp_update_rcv_ann_wnd+0xb0>)
 8019d86:	4808      	ldr	r0, [pc, #32]	; (8019da8 <tcp_update_rcv_ann_wnd+0xac>)
 8019d88:	f00a fa82 	bl	8024290 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 8019d8c:	68bb      	ldr	r3, [r7, #8]
 8019d8e:	b29a      	uxth	r2, r3
 8019d90:	687b      	ldr	r3, [r7, #4]
 8019d92:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 8019d94:	2300      	movs	r3, #0
  }
}
 8019d96:	4618      	mov	r0, r3
 8019d98:	3710      	adds	r7, #16
 8019d9a:	46bd      	mov	sp, r7
 8019d9c:	bd80      	pop	{r7, pc}
 8019d9e:	bf00      	nop
 8019da0:	08026dec 	.word	0x08026dec
 8019da4:	08027048 	.word	0x08027048
 8019da8:	08026e30 	.word	0x08026e30
 8019dac:	0802706c 	.word	0x0802706c

08019db0 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 8019db0:	b580      	push	{r7, lr}
 8019db2:	b084      	sub	sp, #16
 8019db4:	af00      	add	r7, sp, #0
 8019db6:	6078      	str	r0, [r7, #4]
 8019db8:	460b      	mov	r3, r1
 8019dba:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	2b00      	cmp	r3, #0
 8019dc0:	d107      	bne.n	8019dd2 <tcp_recved+0x22>
 8019dc2:	4b1f      	ldr	r3, [pc, #124]	; (8019e40 <tcp_recved+0x90>)
 8019dc4:	f240 32cf 	movw	r2, #975	; 0x3cf
 8019dc8:	491e      	ldr	r1, [pc, #120]	; (8019e44 <tcp_recved+0x94>)
 8019dca:	481f      	ldr	r0, [pc, #124]	; (8019e48 <tcp_recved+0x98>)
 8019dcc:	f00a fa60 	bl	8024290 <iprintf>
 8019dd0:	e032      	b.n	8019e38 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 8019dd2:	687b      	ldr	r3, [r7, #4]
 8019dd4:	7d1b      	ldrb	r3, [r3, #20]
 8019dd6:	2b01      	cmp	r3, #1
 8019dd8:	d106      	bne.n	8019de8 <tcp_recved+0x38>
 8019dda:	4b19      	ldr	r3, [pc, #100]	; (8019e40 <tcp_recved+0x90>)
 8019ddc:	f240 32d2 	movw	r2, #978	; 0x3d2
 8019de0:	491a      	ldr	r1, [pc, #104]	; (8019e4c <tcp_recved+0x9c>)
 8019de2:	4819      	ldr	r0, [pc, #100]	; (8019e48 <tcp_recved+0x98>)
 8019de4:	f00a fa54 	bl	8024290 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8019de8:	687b      	ldr	r3, [r7, #4]
 8019dea:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8019dec:	887b      	ldrh	r3, [r7, #2]
 8019dee:	4413      	add	r3, r2
 8019df0:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 8019df2:	89fb      	ldrh	r3, [r7, #14]
 8019df4:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8019df8:	d804      	bhi.n	8019e04 <tcp_recved+0x54>
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8019dfe:	89fa      	ldrh	r2, [r7, #14]
 8019e00:	429a      	cmp	r2, r3
 8019e02:	d204      	bcs.n	8019e0e <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8019e04:	687b      	ldr	r3, [r7, #4]
 8019e06:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8019e0a:	851a      	strh	r2, [r3, #40]	; 0x28
 8019e0c:	e002      	b.n	8019e14 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 8019e0e:	687b      	ldr	r3, [r7, #4]
 8019e10:	89fa      	ldrh	r2, [r7, #14]
 8019e12:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8019e14:	6878      	ldr	r0, [r7, #4]
 8019e16:	f7ff ff71 	bl	8019cfc <tcp_update_rcv_ann_wnd>
 8019e1a:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8019e1c:	68bb      	ldr	r3, [r7, #8]
 8019e1e:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8019e22:	d309      	bcc.n	8019e38 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	8b5b      	ldrh	r3, [r3, #26]
 8019e28:	f043 0302 	orr.w	r3, r3, #2
 8019e2c:	b29a      	uxth	r2, r3
 8019e2e:	687b      	ldr	r3, [r7, #4]
 8019e30:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8019e32:	6878      	ldr	r0, [r7, #4]
 8019e34:	f004 fcc6 	bl	801e7c4 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8019e38:	3710      	adds	r7, #16
 8019e3a:	46bd      	mov	sp, r7
 8019e3c:	bd80      	pop	{r7, pc}
 8019e3e:	bf00      	nop
 8019e40:	08026dec 	.word	0x08026dec
 8019e44:	08027088 	.word	0x08027088
 8019e48:	08026e30 	.word	0x08026e30
 8019e4c:	080270a0 	.word	0x080270a0

08019e50 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 8019e50:	b480      	push	{r7}
 8019e52:	b083      	sub	sp, #12
 8019e54:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 8019e56:	2300      	movs	r3, #0
 8019e58:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 8019e5a:	4b1e      	ldr	r3, [pc, #120]	; (8019ed4 <tcp_new_port+0x84>)
 8019e5c:	881b      	ldrh	r3, [r3, #0]
 8019e5e:	3301      	adds	r3, #1
 8019e60:	b29a      	uxth	r2, r3
 8019e62:	4b1c      	ldr	r3, [pc, #112]	; (8019ed4 <tcp_new_port+0x84>)
 8019e64:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 8019e66:	4b1b      	ldr	r3, [pc, #108]	; (8019ed4 <tcp_new_port+0x84>)
 8019e68:	881b      	ldrh	r3, [r3, #0]
 8019e6a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019e6e:	4293      	cmp	r3, r2
 8019e70:	d103      	bne.n	8019e7a <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 8019e72:	4b18      	ldr	r3, [pc, #96]	; (8019ed4 <tcp_new_port+0x84>)
 8019e74:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019e78:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019e7a:	2300      	movs	r3, #0
 8019e7c:	71fb      	strb	r3, [r7, #7]
 8019e7e:	e01e      	b.n	8019ebe <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019e80:	79fb      	ldrb	r3, [r7, #7]
 8019e82:	4a15      	ldr	r2, [pc, #84]	; (8019ed8 <tcp_new_port+0x88>)
 8019e84:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8019e88:	681b      	ldr	r3, [r3, #0]
 8019e8a:	603b      	str	r3, [r7, #0]
 8019e8c:	e011      	b.n	8019eb2 <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 8019e8e:	683b      	ldr	r3, [r7, #0]
 8019e90:	8ada      	ldrh	r2, [r3, #22]
 8019e92:	4b10      	ldr	r3, [pc, #64]	; (8019ed4 <tcp_new_port+0x84>)
 8019e94:	881b      	ldrh	r3, [r3, #0]
 8019e96:	429a      	cmp	r2, r3
 8019e98:	d108      	bne.n	8019eac <tcp_new_port+0x5c>
        n++;
 8019e9a:	88bb      	ldrh	r3, [r7, #4]
 8019e9c:	3301      	adds	r3, #1
 8019e9e:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 8019ea0:	88bb      	ldrh	r3, [r7, #4]
 8019ea2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019ea6:	d3d8      	bcc.n	8019e5a <tcp_new_port+0xa>
          return 0;
 8019ea8:	2300      	movs	r3, #0
 8019eaa:	e00d      	b.n	8019ec8 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 8019eac:	683b      	ldr	r3, [r7, #0]
 8019eae:	68db      	ldr	r3, [r3, #12]
 8019eb0:	603b      	str	r3, [r7, #0]
 8019eb2:	683b      	ldr	r3, [r7, #0]
 8019eb4:	2b00      	cmp	r3, #0
 8019eb6:	d1ea      	bne.n	8019e8e <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 8019eb8:	79fb      	ldrb	r3, [r7, #7]
 8019eba:	3301      	adds	r3, #1
 8019ebc:	71fb      	strb	r3, [r7, #7]
 8019ebe:	79fb      	ldrb	r3, [r7, #7]
 8019ec0:	2b03      	cmp	r3, #3
 8019ec2:	d9dd      	bls.n	8019e80 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 8019ec4:	4b03      	ldr	r3, [pc, #12]	; (8019ed4 <tcp_new_port+0x84>)
 8019ec6:	881b      	ldrh	r3, [r3, #0]
}
 8019ec8:	4618      	mov	r0, r3
 8019eca:	370c      	adds	r7, #12
 8019ecc:	46bd      	mov	sp, r7
 8019ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019ed2:	4770      	bx	lr
 8019ed4:	20000028 	.word	0x20000028
 8019ed8:	08028e60 	.word	0x08028e60

08019edc <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 8019edc:	b580      	push	{r7, lr}
 8019ede:	b08a      	sub	sp, #40	; 0x28
 8019ee0:	af00      	add	r7, sp, #0
 8019ee2:	60f8      	str	r0, [r7, #12]
 8019ee4:	60b9      	str	r1, [r7, #8]
 8019ee6:	603b      	str	r3, [r7, #0]
 8019ee8:	4613      	mov	r3, r2
 8019eea:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 8019eec:	2300      	movs	r3, #0
 8019eee:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ef0:	68fb      	ldr	r3, [r7, #12]
 8019ef2:	2b00      	cmp	r3, #0
 8019ef4:	d109      	bne.n	8019f0a <tcp_connect+0x2e>
 8019ef6:	4b7d      	ldr	r3, [pc, #500]	; (801a0ec <tcp_connect+0x210>)
 8019ef8:	f240 4235 	movw	r2, #1077	; 0x435
 8019efc:	497c      	ldr	r1, [pc, #496]	; (801a0f0 <tcp_connect+0x214>)
 8019efe:	487d      	ldr	r0, [pc, #500]	; (801a0f4 <tcp_connect+0x218>)
 8019f00:	f00a f9c6 	bl	8024290 <iprintf>
 8019f04:	f06f 030f 	mvn.w	r3, #15
 8019f08:	e0ec      	b.n	801a0e4 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8019f0a:	68bb      	ldr	r3, [r7, #8]
 8019f0c:	2b00      	cmp	r3, #0
 8019f0e:	d109      	bne.n	8019f24 <tcp_connect+0x48>
 8019f10:	4b76      	ldr	r3, [pc, #472]	; (801a0ec <tcp_connect+0x210>)
 8019f12:	f240 4236 	movw	r2, #1078	; 0x436
 8019f16:	4978      	ldr	r1, [pc, #480]	; (801a0f8 <tcp_connect+0x21c>)
 8019f18:	4876      	ldr	r0, [pc, #472]	; (801a0f4 <tcp_connect+0x218>)
 8019f1a:	f00a f9b9 	bl	8024290 <iprintf>
 8019f1e:	f06f 030f 	mvn.w	r3, #15
 8019f22:	e0df      	b.n	801a0e4 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 8019f24:	68fb      	ldr	r3, [r7, #12]
 8019f26:	7d1b      	ldrb	r3, [r3, #20]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d009      	beq.n	8019f40 <tcp_connect+0x64>
 8019f2c:	4b6f      	ldr	r3, [pc, #444]	; (801a0ec <tcp_connect+0x210>)
 8019f2e:	f44f 6287 	mov.w	r2, #1080	; 0x438
 8019f32:	4972      	ldr	r1, [pc, #456]	; (801a0fc <tcp_connect+0x220>)
 8019f34:	486f      	ldr	r0, [pc, #444]	; (801a0f4 <tcp_connect+0x218>)
 8019f36:	f00a f9ab 	bl	8024290 <iprintf>
 8019f3a:	f06f 0309 	mvn.w	r3, #9
 8019f3e:	e0d1      	b.n	801a0e4 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 8019f40:	68bb      	ldr	r3, [r7, #8]
 8019f42:	2b00      	cmp	r3, #0
 8019f44:	d002      	beq.n	8019f4c <tcp_connect+0x70>
 8019f46:	68bb      	ldr	r3, [r7, #8]
 8019f48:	681b      	ldr	r3, [r3, #0]
 8019f4a:	e000      	b.n	8019f4e <tcp_connect+0x72>
 8019f4c:	2300      	movs	r3, #0
 8019f4e:	68fa      	ldr	r2, [r7, #12]
 8019f50:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	88fa      	ldrh	r2, [r7, #6]
 8019f56:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	7a1b      	ldrb	r3, [r3, #8]
 8019f5c:	2b00      	cmp	r3, #0
 8019f5e:	d006      	beq.n	8019f6e <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 8019f60:	68fb      	ldr	r3, [r7, #12]
 8019f62:	7a1b      	ldrb	r3, [r3, #8]
 8019f64:	4618      	mov	r0, r3
 8019f66:	f7fe fbcd 	bl	8018704 <netif_get_by_index>
 8019f6a:	6278      	str	r0, [r7, #36]	; 0x24
 8019f6c:	e005      	b.n	8019f7a <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 8019f6e:	68fb      	ldr	r3, [r7, #12]
 8019f70:	3304      	adds	r3, #4
 8019f72:	4618      	mov	r0, r3
 8019f74:	f007 fb48 	bl	8021608 <ip4_route>
 8019f78:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 8019f7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d102      	bne.n	8019f86 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 8019f80:	f06f 0303 	mvn.w	r3, #3
 8019f84:	e0ae      	b.n	801a0e4 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 8019f86:	68fb      	ldr	r3, [r7, #12]
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d003      	beq.n	8019f94 <tcp_connect+0xb8>
 8019f8c:	68fb      	ldr	r3, [r7, #12]
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d111      	bne.n	8019fb8 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 8019f94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f96:	2b00      	cmp	r3, #0
 8019f98:	d002      	beq.n	8019fa0 <tcp_connect+0xc4>
 8019f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019f9c:	3304      	adds	r3, #4
 8019f9e:	e000      	b.n	8019fa2 <tcp_connect+0xc6>
 8019fa0:	2300      	movs	r3, #0
 8019fa2:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 8019fa4:	69fb      	ldr	r3, [r7, #28]
 8019fa6:	2b00      	cmp	r3, #0
 8019fa8:	d102      	bne.n	8019fb0 <tcp_connect+0xd4>
      return ERR_RTE;
 8019faa:	f06f 0303 	mvn.w	r3, #3
 8019fae:	e099      	b.n	801a0e4 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8019fb0:	69fb      	ldr	r3, [r7, #28]
 8019fb2:	681a      	ldr	r2, [r3, #0]
 8019fb4:	68fb      	ldr	r3, [r7, #12]
 8019fb6:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 8019fb8:	68fb      	ldr	r3, [r7, #12]
 8019fba:	8adb      	ldrh	r3, [r3, #22]
 8019fbc:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 8019fbe:	68fb      	ldr	r3, [r7, #12]
 8019fc0:	8adb      	ldrh	r3, [r3, #22]
 8019fc2:	2b00      	cmp	r3, #0
 8019fc4:	d10c      	bne.n	8019fe0 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 8019fc6:	f7ff ff43 	bl	8019e50 <tcp_new_port>
 8019fca:	4603      	mov	r3, r0
 8019fcc:	461a      	mov	r2, r3
 8019fce:	68fb      	ldr	r3, [r7, #12]
 8019fd0:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 8019fd2:	68fb      	ldr	r3, [r7, #12]
 8019fd4:	8adb      	ldrh	r3, [r3, #22]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d102      	bne.n	8019fe0 <tcp_connect+0x104>
      return ERR_BUF;
 8019fda:	f06f 0301 	mvn.w	r3, #1
 8019fde:	e081      	b.n	801a0e4 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 8019fe0:	68f8      	ldr	r0, [r7, #12]
 8019fe2:	f001 f867 	bl	801b0b4 <tcp_next_iss>
 8019fe6:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 8019fe8:	68fb      	ldr	r3, [r7, #12]
 8019fea:	2200      	movs	r2, #0
 8019fec:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 8019fee:	68fb      	ldr	r3, [r7, #12]
 8019ff0:	697a      	ldr	r2, [r7, #20]
 8019ff2:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 8019ff4:	697b      	ldr	r3, [r7, #20]
 8019ff6:	1e5a      	subs	r2, r3, #1
 8019ff8:	68fb      	ldr	r3, [r7, #12]
 8019ffa:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 8019ffc:	697b      	ldr	r3, [r7, #20]
 8019ffe:	1e5a      	subs	r2, r3, #1
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 801a004:	697b      	ldr	r3, [r7, #20]
 801a006:	1e5a      	subs	r2, r3, #1
 801a008:	68fb      	ldr	r3, [r7, #12]
 801a00a:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801a00c:	68fb      	ldr	r3, [r7, #12]
 801a00e:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a012:	855a      	strh	r2, [r3, #42]	; 0x2a
 801a014:	68fb      	ldr	r3, [r7, #12]
 801a016:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801a018:	68fb      	ldr	r3, [r7, #12]
 801a01a:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801a01c:	68fb      	ldr	r3, [r7, #12]
 801a01e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801a020:	68fb      	ldr	r3, [r7, #12]
 801a022:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 801a024:	68fb      	ldr	r3, [r7, #12]
 801a026:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801a02a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	f44f 7206 	mov.w	r2, #536	; 0x218
 801a034:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 801a036:	68fb      	ldr	r3, [r7, #12]
 801a038:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 801a03a:	68fb      	ldr	r3, [r7, #12]
 801a03c:	3304      	adds	r3, #4
 801a03e:	461a      	mov	r2, r3
 801a040:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a042:	f001 f85d 	bl	801b100 <tcp_eff_send_mss_netif>
 801a046:	4603      	mov	r3, r0
 801a048:	461a      	mov	r2, r3
 801a04a:	68fb      	ldr	r3, [r7, #12]
 801a04c:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 801a04e:	68fb      	ldr	r3, [r7, #12]
 801a050:	2201      	movs	r2, #1
 801a052:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 801a056:	68fb      	ldr	r3, [r7, #12]
 801a058:	683a      	ldr	r2, [r7, #0]
 801a05a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 801a05e:	2102      	movs	r1, #2
 801a060:	68f8      	ldr	r0, [r7, #12]
 801a062:	f004 fac1 	bl	801e5e8 <tcp_enqueue_flags>
 801a066:	4603      	mov	r3, r0
 801a068:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 801a06a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801a06e:	2b00      	cmp	r3, #0
 801a070:	d136      	bne.n	801a0e0 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 801a072:	68fb      	ldr	r3, [r7, #12]
 801a074:	2202      	movs	r2, #2
 801a076:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 801a078:	8b7b      	ldrh	r3, [r7, #26]
 801a07a:	2b00      	cmp	r3, #0
 801a07c:	d021      	beq.n	801a0c2 <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 801a07e:	4b20      	ldr	r3, [pc, #128]	; (801a100 <tcp_connect+0x224>)
 801a080:	681b      	ldr	r3, [r3, #0]
 801a082:	68fa      	ldr	r2, [r7, #12]
 801a084:	429a      	cmp	r2, r3
 801a086:	d105      	bne.n	801a094 <tcp_connect+0x1b8>
 801a088:	4b1d      	ldr	r3, [pc, #116]	; (801a100 <tcp_connect+0x224>)
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	68db      	ldr	r3, [r3, #12]
 801a08e:	4a1c      	ldr	r2, [pc, #112]	; (801a100 <tcp_connect+0x224>)
 801a090:	6013      	str	r3, [r2, #0]
 801a092:	e013      	b.n	801a0bc <tcp_connect+0x1e0>
 801a094:	4b1a      	ldr	r3, [pc, #104]	; (801a100 <tcp_connect+0x224>)
 801a096:	681b      	ldr	r3, [r3, #0]
 801a098:	623b      	str	r3, [r7, #32]
 801a09a:	e00c      	b.n	801a0b6 <tcp_connect+0x1da>
 801a09c:	6a3b      	ldr	r3, [r7, #32]
 801a09e:	68db      	ldr	r3, [r3, #12]
 801a0a0:	68fa      	ldr	r2, [r7, #12]
 801a0a2:	429a      	cmp	r2, r3
 801a0a4:	d104      	bne.n	801a0b0 <tcp_connect+0x1d4>
 801a0a6:	68fb      	ldr	r3, [r7, #12]
 801a0a8:	68da      	ldr	r2, [r3, #12]
 801a0aa:	6a3b      	ldr	r3, [r7, #32]
 801a0ac:	60da      	str	r2, [r3, #12]
 801a0ae:	e005      	b.n	801a0bc <tcp_connect+0x1e0>
 801a0b0:	6a3b      	ldr	r3, [r7, #32]
 801a0b2:	68db      	ldr	r3, [r3, #12]
 801a0b4:	623b      	str	r3, [r7, #32]
 801a0b6:	6a3b      	ldr	r3, [r7, #32]
 801a0b8:	2b00      	cmp	r3, #0
 801a0ba:	d1ef      	bne.n	801a09c <tcp_connect+0x1c0>
 801a0bc:	68fb      	ldr	r3, [r7, #12]
 801a0be:	2200      	movs	r2, #0
 801a0c0:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 801a0c2:	4b10      	ldr	r3, [pc, #64]	; (801a104 <tcp_connect+0x228>)
 801a0c4:	681a      	ldr	r2, [r3, #0]
 801a0c6:	68fb      	ldr	r3, [r7, #12]
 801a0c8:	60da      	str	r2, [r3, #12]
 801a0ca:	4a0e      	ldr	r2, [pc, #56]	; (801a104 <tcp_connect+0x228>)
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	6013      	str	r3, [r2, #0]
 801a0d0:	f005 faee 	bl	801f6b0 <tcp_timer_needed>
 801a0d4:	4b0c      	ldr	r3, [pc, #48]	; (801a108 <tcp_connect+0x22c>)
 801a0d6:	2201      	movs	r2, #1
 801a0d8:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 801a0da:	68f8      	ldr	r0, [r7, #12]
 801a0dc:	f004 fb72 	bl	801e7c4 <tcp_output>
  }
  return ret;
 801a0e0:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801a0e4:	4618      	mov	r0, r3
 801a0e6:	3728      	adds	r7, #40	; 0x28
 801a0e8:	46bd      	mov	sp, r7
 801a0ea:	bd80      	pop	{r7, pc}
 801a0ec:	08026dec 	.word	0x08026dec
 801a0f0:	080270c8 	.word	0x080270c8
 801a0f4:	08026e30 	.word	0x08026e30
 801a0f8:	080270e4 	.word	0x080270e4
 801a0fc:	08027100 	.word	0x08027100
 801a100:	2000bfc0 	.word	0x2000bfc0
 801a104:	2000bfc8 	.word	0x2000bfc8
 801a108:	2000bfd0 	.word	0x2000bfd0

0801a10c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801a10c:	b5b0      	push	{r4, r5, r7, lr}
 801a10e:	b090      	sub	sp, #64	; 0x40
 801a110:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 801a112:	2300      	movs	r3, #0
 801a114:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 801a118:	4b94      	ldr	r3, [pc, #592]	; (801a36c <tcp_slowtmr+0x260>)
 801a11a:	681b      	ldr	r3, [r3, #0]
 801a11c:	3301      	adds	r3, #1
 801a11e:	4a93      	ldr	r2, [pc, #588]	; (801a36c <tcp_slowtmr+0x260>)
 801a120:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 801a122:	4b93      	ldr	r3, [pc, #588]	; (801a370 <tcp_slowtmr+0x264>)
 801a124:	781b      	ldrb	r3, [r3, #0]
 801a126:	3301      	adds	r3, #1
 801a128:	b2da      	uxtb	r2, r3
 801a12a:	4b91      	ldr	r3, [pc, #580]	; (801a370 <tcp_slowtmr+0x264>)
 801a12c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801a12e:	2300      	movs	r3, #0
 801a130:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 801a132:	4b90      	ldr	r3, [pc, #576]	; (801a374 <tcp_slowtmr+0x268>)
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 801a138:	e29d      	b.n	801a676 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 801a13a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a13c:	7d1b      	ldrb	r3, [r3, #20]
 801a13e:	2b00      	cmp	r3, #0
 801a140:	d106      	bne.n	801a150 <tcp_slowtmr+0x44>
 801a142:	4b8d      	ldr	r3, [pc, #564]	; (801a378 <tcp_slowtmr+0x26c>)
 801a144:	f240 42be 	movw	r2, #1214	; 0x4be
 801a148:	498c      	ldr	r1, [pc, #560]	; (801a37c <tcp_slowtmr+0x270>)
 801a14a:	488d      	ldr	r0, [pc, #564]	; (801a380 <tcp_slowtmr+0x274>)
 801a14c:	f00a f8a0 	bl	8024290 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 801a150:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a152:	7d1b      	ldrb	r3, [r3, #20]
 801a154:	2b01      	cmp	r3, #1
 801a156:	d106      	bne.n	801a166 <tcp_slowtmr+0x5a>
 801a158:	4b87      	ldr	r3, [pc, #540]	; (801a378 <tcp_slowtmr+0x26c>)
 801a15a:	f240 42bf 	movw	r2, #1215	; 0x4bf
 801a15e:	4989      	ldr	r1, [pc, #548]	; (801a384 <tcp_slowtmr+0x278>)
 801a160:	4887      	ldr	r0, [pc, #540]	; (801a380 <tcp_slowtmr+0x274>)
 801a162:	f00a f895 	bl	8024290 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 801a166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a168:	7d1b      	ldrb	r3, [r3, #20]
 801a16a:	2b0a      	cmp	r3, #10
 801a16c:	d106      	bne.n	801a17c <tcp_slowtmr+0x70>
 801a16e:	4b82      	ldr	r3, [pc, #520]	; (801a378 <tcp_slowtmr+0x26c>)
 801a170:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 801a174:	4984      	ldr	r1, [pc, #528]	; (801a388 <tcp_slowtmr+0x27c>)
 801a176:	4882      	ldr	r0, [pc, #520]	; (801a380 <tcp_slowtmr+0x274>)
 801a178:	f00a f88a 	bl	8024290 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 801a17c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a17e:	7f9a      	ldrb	r2, [r3, #30]
 801a180:	4b7b      	ldr	r3, [pc, #492]	; (801a370 <tcp_slowtmr+0x264>)
 801a182:	781b      	ldrb	r3, [r3, #0]
 801a184:	429a      	cmp	r2, r3
 801a186:	d105      	bne.n	801a194 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 801a188:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a18e:	68db      	ldr	r3, [r3, #12]
 801a190:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 801a192:	e270      	b.n	801a676 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 801a194:	4b76      	ldr	r3, [pc, #472]	; (801a370 <tcp_slowtmr+0x264>)
 801a196:	781a      	ldrb	r2, [r3, #0]
 801a198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a19a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801a19c:	2300      	movs	r3, #0
 801a19e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 801a1a2:	2300      	movs	r3, #0
 801a1a4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 801a1a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1aa:	7d1b      	ldrb	r3, [r3, #20]
 801a1ac:	2b02      	cmp	r3, #2
 801a1ae:	d10a      	bne.n	801a1c6 <tcp_slowtmr+0xba>
 801a1b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1b2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a1b6:	2b05      	cmp	r3, #5
 801a1b8:	d905      	bls.n	801a1c6 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801a1ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1be:	3301      	adds	r3, #1
 801a1c0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a1c4:	e11e      	b.n	801a404 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 801a1c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1c8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a1cc:	2b0b      	cmp	r3, #11
 801a1ce:	d905      	bls.n	801a1dc <tcp_slowtmr+0xd0>
      ++pcb_remove;
 801a1d0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a1d4:	3301      	adds	r3, #1
 801a1d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a1da:	e113      	b.n	801a404 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801a1dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1de:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a1e2:	2b00      	cmp	r3, #0
 801a1e4:	d075      	beq.n	801a2d2 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 801a1e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a1ea:	2b00      	cmp	r3, #0
 801a1ec:	d006      	beq.n	801a1fc <tcp_slowtmr+0xf0>
 801a1ee:	4b62      	ldr	r3, [pc, #392]	; (801a378 <tcp_slowtmr+0x26c>)
 801a1f0:	f240 42d4 	movw	r2, #1236	; 0x4d4
 801a1f4:	4965      	ldr	r1, [pc, #404]	; (801a38c <tcp_slowtmr+0x280>)
 801a1f6:	4862      	ldr	r0, [pc, #392]	; (801a380 <tcp_slowtmr+0x274>)
 801a1f8:	f00a f84a 	bl	8024290 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801a1fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a1fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a200:	2b00      	cmp	r3, #0
 801a202:	d106      	bne.n	801a212 <tcp_slowtmr+0x106>
 801a204:	4b5c      	ldr	r3, [pc, #368]	; (801a378 <tcp_slowtmr+0x26c>)
 801a206:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801a20a:	4961      	ldr	r1, [pc, #388]	; (801a390 <tcp_slowtmr+0x284>)
 801a20c:	485c      	ldr	r0, [pc, #368]	; (801a380 <tcp_slowtmr+0x274>)
 801a20e:	f00a f83f 	bl	8024290 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 801a212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a214:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801a218:	2b0b      	cmp	r3, #11
 801a21a:	d905      	bls.n	801a228 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801a21c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a220:	3301      	adds	r3, #1
 801a222:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a226:	e0ed      	b.n	801a404 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 801a228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a22a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a22e:	3b01      	subs	r3, #1
 801a230:	4a58      	ldr	r2, [pc, #352]	; (801a394 <tcp_slowtmr+0x288>)
 801a232:	5cd3      	ldrb	r3, [r2, r3]
 801a234:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 801a236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a238:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a23c:	7c7a      	ldrb	r2, [r7, #17]
 801a23e:	429a      	cmp	r2, r3
 801a240:	d907      	bls.n	801a252 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 801a242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a244:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a248:	3301      	adds	r3, #1
 801a24a:	b2da      	uxtb	r2, r3
 801a24c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a24e:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 801a252:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a254:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 801a258:	7c7a      	ldrb	r2, [r7, #17]
 801a25a:	429a      	cmp	r2, r3
 801a25c:	f200 80d2 	bhi.w	801a404 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 801a260:	2301      	movs	r3, #1
 801a262:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 801a264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a266:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d108      	bne.n	801a280 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 801a26e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a270:	f005 f950 	bl	801f514 <tcp_zero_window_probe>
 801a274:	4603      	mov	r3, r0
 801a276:	2b00      	cmp	r3, #0
 801a278:	d014      	beq.n	801a2a4 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 801a27a:	2300      	movs	r3, #0
 801a27c:	623b      	str	r3, [r7, #32]
 801a27e:	e011      	b.n	801a2a4 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 801a280:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a282:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801a286:	4619      	mov	r1, r3
 801a288:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a28a:	f004 f815 	bl	801e2b8 <tcp_split_unsent_seg>
 801a28e:	4603      	mov	r3, r0
 801a290:	2b00      	cmp	r3, #0
 801a292:	d107      	bne.n	801a2a4 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 801a294:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a296:	f004 fa95 	bl	801e7c4 <tcp_output>
 801a29a:	4603      	mov	r3, r0
 801a29c:	2b00      	cmp	r3, #0
 801a29e:	d101      	bne.n	801a2a4 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 801a2a0:	2300      	movs	r3, #0
 801a2a2:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 801a2a4:	6a3b      	ldr	r3, [r7, #32]
 801a2a6:	2b00      	cmp	r3, #0
 801a2a8:	f000 80ac 	beq.w	801a404 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801a2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ae:	2200      	movs	r2, #0
 801a2b0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 801a2b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2b6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a2ba:	2b06      	cmp	r3, #6
 801a2bc:	f200 80a2 	bhi.w	801a404 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 801a2c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2c2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	b2da      	uxtb	r2, r3
 801a2ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2cc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 801a2d0:	e098      	b.n	801a404 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 801a2d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2d4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a2d8:	2b00      	cmp	r3, #0
 801a2da:	db0f      	blt.n	801a2fc <tcp_slowtmr+0x1f0>
 801a2dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2de:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a2e2:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a2e6:	4293      	cmp	r3, r2
 801a2e8:	d008      	beq.n	801a2fc <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801a2ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2ec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801a2f0:	b29b      	uxth	r3, r3
 801a2f2:	3301      	adds	r3, #1
 801a2f4:	b29b      	uxth	r3, r3
 801a2f6:	b21a      	sxth	r2, r3
 801a2f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fa:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801a2fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a2fe:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 801a302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a304:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a308:	429a      	cmp	r2, r3
 801a30a:	db7b      	blt.n	801a404 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801a30c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a30e:	f004 fd4b 	bl	801eda8 <tcp_rexmit_rto_prepare>
 801a312:	4603      	mov	r3, r0
 801a314:	2b00      	cmp	r3, #0
 801a316:	d007      	beq.n	801a328 <tcp_slowtmr+0x21c>
 801a318:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a31a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801a31c:	2b00      	cmp	r3, #0
 801a31e:	d171      	bne.n	801a404 <tcp_slowtmr+0x2f8>
 801a320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a322:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801a324:	2b00      	cmp	r3, #0
 801a326:	d06d      	beq.n	801a404 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 801a328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a32a:	7d1b      	ldrb	r3, [r3, #20]
 801a32c:	2b02      	cmp	r3, #2
 801a32e:	d03a      	beq.n	801a3a6 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 801a330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a332:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801a336:	2b0c      	cmp	r3, #12
 801a338:	bf28      	it	cs
 801a33a:	230c      	movcs	r3, #12
 801a33c:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 801a33e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a340:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801a344:	10db      	asrs	r3, r3, #3
 801a346:	b21b      	sxth	r3, r3
 801a348:	461a      	mov	r2, r3
 801a34a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a34c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801a350:	4413      	add	r3, r2
 801a352:	7efa      	ldrb	r2, [r7, #27]
 801a354:	4910      	ldr	r1, [pc, #64]	; (801a398 <tcp_slowtmr+0x28c>)
 801a356:	5c8a      	ldrb	r2, [r1, r2]
 801a358:	4093      	lsls	r3, r2
 801a35a:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 801a35c:	697b      	ldr	r3, [r7, #20]
 801a35e:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 801a362:	4293      	cmp	r3, r2
 801a364:	dc1a      	bgt.n	801a39c <tcp_slowtmr+0x290>
 801a366:	697b      	ldr	r3, [r7, #20]
 801a368:	b21a      	sxth	r2, r3
 801a36a:	e019      	b.n	801a3a0 <tcp_slowtmr+0x294>
 801a36c:	2000bfbc 	.word	0x2000bfbc
 801a370:	2000bfd2 	.word	0x2000bfd2
 801a374:	2000bfc8 	.word	0x2000bfc8
 801a378:	08026dec 	.word	0x08026dec
 801a37c:	08027130 	.word	0x08027130
 801a380:	08026e30 	.word	0x08026e30
 801a384:	0802715c 	.word	0x0802715c
 801a388:	08027188 	.word	0x08027188
 801a38c:	080271b8 	.word	0x080271b8
 801a390:	080271ec 	.word	0x080271ec
 801a394:	08028e58 	.word	0x08028e58
 801a398:	08028e48 	.word	0x08028e48
 801a39c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 801a3a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 801a3a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3a8:	2200      	movs	r2, #0
 801a3aa:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801a3ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ae:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801a3b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3b4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801a3b8:	4293      	cmp	r3, r2
 801a3ba:	bf28      	it	cs
 801a3bc:	4613      	movcs	r3, r2
 801a3be:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 801a3c0:	8a7b      	ldrh	r3, [r7, #18]
 801a3c2:	085b      	lsrs	r3, r3, #1
 801a3c4:	b29a      	uxth	r2, r3
 801a3c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801a3cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ce:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801a3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3d4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3d6:	005b      	lsls	r3, r3, #1
 801a3d8:	b29b      	uxth	r3, r3
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	d206      	bcs.n	801a3ec <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801a3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801a3e2:	005b      	lsls	r3, r3, #1
 801a3e4:	b29a      	uxth	r2, r3
 801a3e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801a3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3ee:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 801a3f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 801a3f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a3f8:	2200      	movs	r2, #0
 801a3fa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801a3fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a400:	f004 fd42 	bl	801ee88 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 801a404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a406:	7d1b      	ldrb	r3, [r3, #20]
 801a408:	2b06      	cmp	r3, #6
 801a40a:	d111      	bne.n	801a430 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801a40c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a40e:	8b5b      	ldrh	r3, [r3, #26]
 801a410:	f003 0310 	and.w	r3, r3, #16
 801a414:	2b00      	cmp	r3, #0
 801a416:	d00b      	beq.n	801a430 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a418:	4b9c      	ldr	r3, [pc, #624]	; (801a68c <tcp_slowtmr+0x580>)
 801a41a:	681a      	ldr	r2, [r3, #0]
 801a41c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a41e:	6a1b      	ldr	r3, [r3, #32]
 801a420:	1ad3      	subs	r3, r2, r3
 801a422:	2b28      	cmp	r3, #40	; 0x28
 801a424:	d904      	bls.n	801a430 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 801a426:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a42a:	3301      	adds	r3, #1
 801a42c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a432:	7a5b      	ldrb	r3, [r3, #9]
 801a434:	f003 0308 	and.w	r3, r3, #8
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d04a      	beq.n	801a4d2 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 801a43c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a43e:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 801a440:	2b04      	cmp	r3, #4
 801a442:	d003      	beq.n	801a44c <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 801a444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a446:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 801a448:	2b07      	cmp	r3, #7
 801a44a:	d142      	bne.n	801a4d2 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a44c:	4b8f      	ldr	r3, [pc, #572]	; (801a68c <tcp_slowtmr+0x580>)
 801a44e:	681a      	ldr	r2, [r3, #0]
 801a450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a452:	6a1b      	ldr	r3, [r3, #32]
 801a454:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 801a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a458:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a45c:	4b8c      	ldr	r3, [pc, #560]	; (801a690 <tcp_slowtmr+0x584>)
 801a45e:	440b      	add	r3, r1
 801a460:	498c      	ldr	r1, [pc, #560]	; (801a694 <tcp_slowtmr+0x588>)
 801a462:	fba1 1303 	umull	r1, r3, r1, r3
 801a466:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a468:	429a      	cmp	r2, r3
 801a46a:	d90a      	bls.n	801a482 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 801a46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a470:	3301      	adds	r3, #1
 801a472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 801a476:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a47a:	3301      	adds	r3, #1
 801a47c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801a480:	e027      	b.n	801a4d2 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a482:	4b82      	ldr	r3, [pc, #520]	; (801a68c <tcp_slowtmr+0x580>)
 801a484:	681a      	ldr	r2, [r3, #0]
 801a486:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a488:	6a1b      	ldr	r3, [r3, #32]
 801a48a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 801a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a48e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 801a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a494:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a498:	4618      	mov	r0, r3
 801a49a:	4b7f      	ldr	r3, [pc, #508]	; (801a698 <tcp_slowtmr+0x58c>)
 801a49c:	fb00 f303 	mul.w	r3, r0, r3
 801a4a0:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 801a4a2:	497c      	ldr	r1, [pc, #496]	; (801a694 <tcp_slowtmr+0x588>)
 801a4a4:	fba1 1303 	umull	r1, r3, r1, r3
 801a4a8:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a4aa:	429a      	cmp	r2, r3
 801a4ac:	d911      	bls.n	801a4d2 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801a4ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a4b0:	f004 fff0 	bl	801f494 <tcp_keepalive>
 801a4b4:	4603      	mov	r3, r0
 801a4b6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801a4ba:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d107      	bne.n	801a4d2 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 801a4c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4c4:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	b2da      	uxtb	r2, r3
 801a4cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4ce:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 801a4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801a4d6:	2b00      	cmp	r3, #0
 801a4d8:	d011      	beq.n	801a4fe <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801a4da:	4b6c      	ldr	r3, [pc, #432]	; (801a68c <tcp_slowtmr+0x580>)
 801a4dc:	681a      	ldr	r2, [r3, #0]
 801a4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e0:	6a1b      	ldr	r3, [r3, #32]
 801a4e2:	1ad2      	subs	r2, r2, r3
 801a4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a4e6:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801a4ea:	4619      	mov	r1, r3
 801a4ec:	460b      	mov	r3, r1
 801a4ee:	005b      	lsls	r3, r3, #1
 801a4f0:	440b      	add	r3, r1
 801a4f2:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 801a4f4:	429a      	cmp	r2, r3
 801a4f6:	d302      	bcc.n	801a4fe <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 801a4f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a4fa:	f000 feab 	bl	801b254 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801a4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a500:	7d1b      	ldrb	r3, [r3, #20]
 801a502:	2b03      	cmp	r3, #3
 801a504:	d10b      	bne.n	801a51e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 801a506:	4b61      	ldr	r3, [pc, #388]	; (801a68c <tcp_slowtmr+0x580>)
 801a508:	681a      	ldr	r2, [r3, #0]
 801a50a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a50c:	6a1b      	ldr	r3, [r3, #32]
 801a50e:	1ad3      	subs	r3, r2, r3
 801a510:	2b28      	cmp	r3, #40	; 0x28
 801a512:	d904      	bls.n	801a51e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 801a514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a518:	3301      	adds	r3, #1
 801a51a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801a51e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a520:	7d1b      	ldrb	r3, [r3, #20]
 801a522:	2b09      	cmp	r3, #9
 801a524:	d10b      	bne.n	801a53e <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a526:	4b59      	ldr	r3, [pc, #356]	; (801a68c <tcp_slowtmr+0x580>)
 801a528:	681a      	ldr	r2, [r3, #0]
 801a52a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a52c:	6a1b      	ldr	r3, [r3, #32]
 801a52e:	1ad3      	subs	r3, r2, r3
 801a530:	2bf0      	cmp	r3, #240	; 0xf0
 801a532:	d904      	bls.n	801a53e <tcp_slowtmr+0x432>
        ++pcb_remove;
 801a534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a538:	3301      	adds	r3, #1
 801a53a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a53e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a542:	2b00      	cmp	r3, #0
 801a544:	d060      	beq.n	801a608 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 801a546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a548:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801a54c:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 801a54e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a550:	f000 fccc 	bl	801aeec <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 801a554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a556:	2b00      	cmp	r3, #0
 801a558:	d010      	beq.n	801a57c <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 801a55a:	4b50      	ldr	r3, [pc, #320]	; (801a69c <tcp_slowtmr+0x590>)
 801a55c:	681b      	ldr	r3, [r3, #0]
 801a55e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a560:	429a      	cmp	r2, r3
 801a562:	d106      	bne.n	801a572 <tcp_slowtmr+0x466>
 801a564:	4b4e      	ldr	r3, [pc, #312]	; (801a6a0 <tcp_slowtmr+0x594>)
 801a566:	f240 526d 	movw	r2, #1389	; 0x56d
 801a56a:	494e      	ldr	r1, [pc, #312]	; (801a6a4 <tcp_slowtmr+0x598>)
 801a56c:	484e      	ldr	r0, [pc, #312]	; (801a6a8 <tcp_slowtmr+0x59c>)
 801a56e:	f009 fe8f 	bl	8024290 <iprintf>
        prev->next = pcb->next;
 801a572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a574:	68da      	ldr	r2, [r3, #12]
 801a576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a578:	60da      	str	r2, [r3, #12]
 801a57a:	e00f      	b.n	801a59c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 801a57c:	4b47      	ldr	r3, [pc, #284]	; (801a69c <tcp_slowtmr+0x590>)
 801a57e:	681b      	ldr	r3, [r3, #0]
 801a580:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a582:	429a      	cmp	r2, r3
 801a584:	d006      	beq.n	801a594 <tcp_slowtmr+0x488>
 801a586:	4b46      	ldr	r3, [pc, #280]	; (801a6a0 <tcp_slowtmr+0x594>)
 801a588:	f240 5271 	movw	r2, #1393	; 0x571
 801a58c:	4947      	ldr	r1, [pc, #284]	; (801a6ac <tcp_slowtmr+0x5a0>)
 801a58e:	4846      	ldr	r0, [pc, #280]	; (801a6a8 <tcp_slowtmr+0x59c>)
 801a590:	f009 fe7e 	bl	8024290 <iprintf>
        tcp_active_pcbs = pcb->next;
 801a594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a596:	68db      	ldr	r3, [r3, #12]
 801a598:	4a40      	ldr	r2, [pc, #256]	; (801a69c <tcp_slowtmr+0x590>)
 801a59a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801a59c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801a5a0:	2b00      	cmp	r3, #0
 801a5a2:	d013      	beq.n	801a5cc <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 801a5a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5a6:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801a5a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5aa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801a5ac:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801a5ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5b0:	3304      	adds	r3, #4
 801a5b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a5b4:	8ad2      	ldrh	r2, [r2, #22]
 801a5b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a5b8:	8b09      	ldrh	r1, [r1, #24]
 801a5ba:	9102      	str	r1, [sp, #8]
 801a5bc:	9201      	str	r2, [sp, #4]
 801a5be:	9300      	str	r3, [sp, #0]
 801a5c0:	462b      	mov	r3, r5
 801a5c2:	4622      	mov	r2, r4
 801a5c4:	4601      	mov	r1, r0
 801a5c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a5c8:	f004 feb0 	bl	801f32c <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801a5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5ce:	691b      	ldr	r3, [r3, #16]
 801a5d0:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 801a5d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5d4:	7d1b      	ldrb	r3, [r3, #20]
 801a5d6:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 801a5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5da:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801a5dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a5de:	68db      	ldr	r3, [r3, #12]
 801a5e0:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a5e2:	6838      	ldr	r0, [r7, #0]
 801a5e4:	f7fe fed8 	bl	8019398 <tcp_free>

      tcp_active_pcbs_changed = 0;
 801a5e8:	4b31      	ldr	r3, [pc, #196]	; (801a6b0 <tcp_slowtmr+0x5a4>)
 801a5ea:	2200      	movs	r2, #0
 801a5ec:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801a5ee:	68fb      	ldr	r3, [r7, #12]
 801a5f0:	2b00      	cmp	r3, #0
 801a5f2:	d004      	beq.n	801a5fe <tcp_slowtmr+0x4f2>
 801a5f4:	68fb      	ldr	r3, [r7, #12]
 801a5f6:	f06f 010c 	mvn.w	r1, #12
 801a5fa:	68b8      	ldr	r0, [r7, #8]
 801a5fc:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801a5fe:	4b2c      	ldr	r3, [pc, #176]	; (801a6b0 <tcp_slowtmr+0x5a4>)
 801a600:	781b      	ldrb	r3, [r3, #0]
 801a602:	2b00      	cmp	r3, #0
 801a604:	d037      	beq.n	801a676 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 801a606:	e592      	b.n	801a12e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 801a608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a60a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a60c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a60e:	68db      	ldr	r3, [r3, #12]
 801a610:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 801a612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a614:	7f1b      	ldrb	r3, [r3, #28]
 801a616:	3301      	adds	r3, #1
 801a618:	b2da      	uxtb	r2, r3
 801a61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a61c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801a61e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a620:	7f1a      	ldrb	r2, [r3, #28]
 801a622:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a624:	7f5b      	ldrb	r3, [r3, #29]
 801a626:	429a      	cmp	r2, r3
 801a628:	d325      	bcc.n	801a676 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801a62a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a62c:	2200      	movs	r2, #0
 801a62e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 801a630:	4b1f      	ldr	r3, [pc, #124]	; (801a6b0 <tcp_slowtmr+0x5a4>)
 801a632:	2200      	movs	r2, #0
 801a634:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 801a636:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a638:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	d00b      	beq.n	801a658 <tcp_slowtmr+0x54c>
 801a640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a642:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801a646:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a648:	6912      	ldr	r2, [r2, #16]
 801a64a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801a64c:	4610      	mov	r0, r2
 801a64e:	4798      	blx	r3
 801a650:	4603      	mov	r3, r0
 801a652:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 801a656:	e002      	b.n	801a65e <tcp_slowtmr+0x552>
 801a658:	2300      	movs	r3, #0
 801a65a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 801a65e:	4b14      	ldr	r3, [pc, #80]	; (801a6b0 <tcp_slowtmr+0x5a4>)
 801a660:	781b      	ldrb	r3, [r3, #0]
 801a662:	2b00      	cmp	r3, #0
 801a664:	d000      	beq.n	801a668 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 801a666:	e562      	b.n	801a12e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 801a668:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801a66c:	2b00      	cmp	r3, #0
 801a66e:	d102      	bne.n	801a676 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 801a670:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801a672:	f004 f8a7 	bl	801e7c4 <tcp_output>
  while (pcb != NULL) {
 801a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a678:	2b00      	cmp	r3, #0
 801a67a:	f47f ad5e 	bne.w	801a13a <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 801a67e:	2300      	movs	r3, #0
 801a680:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 801a682:	4b0c      	ldr	r3, [pc, #48]	; (801a6b4 <tcp_slowtmr+0x5a8>)
 801a684:	681b      	ldr	r3, [r3, #0]
 801a686:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a688:	e069      	b.n	801a75e <tcp_slowtmr+0x652>
 801a68a:	bf00      	nop
 801a68c:	2000bfbc 	.word	0x2000bfbc
 801a690:	000a4cb8 	.word	0x000a4cb8
 801a694:	10624dd3 	.word	0x10624dd3
 801a698:	000124f8 	.word	0x000124f8
 801a69c:	2000bfc8 	.word	0x2000bfc8
 801a6a0:	08026dec 	.word	0x08026dec
 801a6a4:	08027224 	.word	0x08027224
 801a6a8:	08026e30 	.word	0x08026e30
 801a6ac:	08027250 	.word	0x08027250
 801a6b0:	2000bfd0 	.word	0x2000bfd0
 801a6b4:	2000bfcc 	.word	0x2000bfcc
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801a6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6ba:	7d1b      	ldrb	r3, [r3, #20]
 801a6bc:	2b0a      	cmp	r3, #10
 801a6be:	d006      	beq.n	801a6ce <tcp_slowtmr+0x5c2>
 801a6c0:	4b2b      	ldr	r3, [pc, #172]	; (801a770 <tcp_slowtmr+0x664>)
 801a6c2:	f240 52a1 	movw	r2, #1441	; 0x5a1
 801a6c6:	492b      	ldr	r1, [pc, #172]	; (801a774 <tcp_slowtmr+0x668>)
 801a6c8:	482b      	ldr	r0, [pc, #172]	; (801a778 <tcp_slowtmr+0x66c>)
 801a6ca:	f009 fde1 	bl	8024290 <iprintf>
    pcb_remove = 0;
 801a6ce:	2300      	movs	r3, #0
 801a6d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 801a6d4:	4b29      	ldr	r3, [pc, #164]	; (801a77c <tcp_slowtmr+0x670>)
 801a6d6:	681a      	ldr	r2, [r3, #0]
 801a6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a6da:	6a1b      	ldr	r3, [r3, #32]
 801a6dc:	1ad3      	subs	r3, r2, r3
 801a6de:	2bf0      	cmp	r3, #240	; 0xf0
 801a6e0:	d904      	bls.n	801a6ec <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 801a6e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6e6:	3301      	adds	r3, #1
 801a6e8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801a6ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801a6f0:	2b00      	cmp	r3, #0
 801a6f2:	d02f      	beq.n	801a754 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 801a6f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801a6f6:	f000 fbf9 	bl	801aeec <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801a6fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a6fc:	2b00      	cmp	r3, #0
 801a6fe:	d010      	beq.n	801a722 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 801a700:	4b1f      	ldr	r3, [pc, #124]	; (801a780 <tcp_slowtmr+0x674>)
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a706:	429a      	cmp	r2, r3
 801a708:	d106      	bne.n	801a718 <tcp_slowtmr+0x60c>
 801a70a:	4b19      	ldr	r3, [pc, #100]	; (801a770 <tcp_slowtmr+0x664>)
 801a70c:	f240 52af 	movw	r2, #1455	; 0x5af
 801a710:	491c      	ldr	r1, [pc, #112]	; (801a784 <tcp_slowtmr+0x678>)
 801a712:	4819      	ldr	r0, [pc, #100]	; (801a778 <tcp_slowtmr+0x66c>)
 801a714:	f009 fdbc 	bl	8024290 <iprintf>
        prev->next = pcb->next;
 801a718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a71a:	68da      	ldr	r2, [r3, #12]
 801a71c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801a71e:	60da      	str	r2, [r3, #12]
 801a720:	e00f      	b.n	801a742 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 801a722:	4b17      	ldr	r3, [pc, #92]	; (801a780 <tcp_slowtmr+0x674>)
 801a724:	681b      	ldr	r3, [r3, #0]
 801a726:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801a728:	429a      	cmp	r2, r3
 801a72a:	d006      	beq.n	801a73a <tcp_slowtmr+0x62e>
 801a72c:	4b10      	ldr	r3, [pc, #64]	; (801a770 <tcp_slowtmr+0x664>)
 801a72e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 801a732:	4915      	ldr	r1, [pc, #84]	; (801a788 <tcp_slowtmr+0x67c>)
 801a734:	4810      	ldr	r0, [pc, #64]	; (801a778 <tcp_slowtmr+0x66c>)
 801a736:	f009 fdab 	bl	8024290 <iprintf>
        tcp_tw_pcbs = pcb->next;
 801a73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a73c:	68db      	ldr	r3, [r3, #12]
 801a73e:	4a10      	ldr	r2, [pc, #64]	; (801a780 <tcp_slowtmr+0x674>)
 801a740:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 801a742:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a744:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 801a746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a748:	68db      	ldr	r3, [r3, #12]
 801a74a:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 801a74c:	69f8      	ldr	r0, [r7, #28]
 801a74e:	f7fe fe23 	bl	8019398 <tcp_free>
 801a752:	e004      	b.n	801a75e <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 801a754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a756:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801a758:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a75a:	68db      	ldr	r3, [r3, #12]
 801a75c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 801a75e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801a760:	2b00      	cmp	r3, #0
 801a762:	d1a9      	bne.n	801a6b8 <tcp_slowtmr+0x5ac>
    }
  }
}
 801a764:	bf00      	nop
 801a766:	bf00      	nop
 801a768:	3730      	adds	r7, #48	; 0x30
 801a76a:	46bd      	mov	sp, r7
 801a76c:	bdb0      	pop	{r4, r5, r7, pc}
 801a76e:	bf00      	nop
 801a770:	08026dec 	.word	0x08026dec
 801a774:	0802727c 	.word	0x0802727c
 801a778:	08026e30 	.word	0x08026e30
 801a77c:	2000bfbc 	.word	0x2000bfbc
 801a780:	2000bfcc 	.word	0x2000bfcc
 801a784:	080272ac 	.word	0x080272ac
 801a788:	080272d4 	.word	0x080272d4

0801a78c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801a78c:	b580      	push	{r7, lr}
 801a78e:	b082      	sub	sp, #8
 801a790:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 801a792:	4b2d      	ldr	r3, [pc, #180]	; (801a848 <tcp_fasttmr+0xbc>)
 801a794:	781b      	ldrb	r3, [r3, #0]
 801a796:	3301      	adds	r3, #1
 801a798:	b2da      	uxtb	r2, r3
 801a79a:	4b2b      	ldr	r3, [pc, #172]	; (801a848 <tcp_fasttmr+0xbc>)
 801a79c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801a79e:	4b2b      	ldr	r3, [pc, #172]	; (801a84c <tcp_fasttmr+0xc0>)
 801a7a0:	681b      	ldr	r3, [r3, #0]
 801a7a2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801a7a4:	e048      	b.n	801a838 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	7f9a      	ldrb	r2, [r3, #30]
 801a7aa:	4b27      	ldr	r3, [pc, #156]	; (801a848 <tcp_fasttmr+0xbc>)
 801a7ac:	781b      	ldrb	r3, [r3, #0]
 801a7ae:	429a      	cmp	r2, r3
 801a7b0:	d03f      	beq.n	801a832 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 801a7b2:	4b25      	ldr	r3, [pc, #148]	; (801a848 <tcp_fasttmr+0xbc>)
 801a7b4:	781a      	ldrb	r2, [r3, #0]
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	8b5b      	ldrh	r3, [r3, #26]
 801a7be:	f003 0301 	and.w	r3, r3, #1
 801a7c2:	2b00      	cmp	r3, #0
 801a7c4:	d010      	beq.n	801a7e8 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 801a7c6:	687b      	ldr	r3, [r7, #4]
 801a7c8:	8b5b      	ldrh	r3, [r3, #26]
 801a7ca:	f043 0302 	orr.w	r3, r3, #2
 801a7ce:	b29a      	uxth	r2, r3
 801a7d0:	687b      	ldr	r3, [r7, #4]
 801a7d2:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 801a7d4:	6878      	ldr	r0, [r7, #4]
 801a7d6:	f003 fff5 	bl	801e7c4 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801a7da:	687b      	ldr	r3, [r7, #4]
 801a7dc:	8b5b      	ldrh	r3, [r3, #26]
 801a7de:	f023 0303 	bic.w	r3, r3, #3
 801a7e2:	b29a      	uxth	r2, r3
 801a7e4:	687b      	ldr	r3, [r7, #4]
 801a7e6:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	8b5b      	ldrh	r3, [r3, #26]
 801a7ec:	f003 0308 	and.w	r3, r3, #8
 801a7f0:	2b00      	cmp	r3, #0
 801a7f2:	d009      	beq.n	801a808 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 801a7f4:	687b      	ldr	r3, [r7, #4]
 801a7f6:	8b5b      	ldrh	r3, [r3, #26]
 801a7f8:	f023 0308 	bic.w	r3, r3, #8
 801a7fc:	b29a      	uxth	r2, r3
 801a7fe:	687b      	ldr	r3, [r7, #4]
 801a800:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 801a802:	6878      	ldr	r0, [r7, #4]
 801a804:	f7fe ff5c 	bl	80196c0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 801a808:	687b      	ldr	r3, [r7, #4]
 801a80a:	68db      	ldr	r3, [r3, #12]
 801a80c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801a80e:	687b      	ldr	r3, [r7, #4]
 801a810:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a812:	2b00      	cmp	r3, #0
 801a814:	d00a      	beq.n	801a82c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 801a816:	4b0e      	ldr	r3, [pc, #56]	; (801a850 <tcp_fasttmr+0xc4>)
 801a818:	2200      	movs	r2, #0
 801a81a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801a81c:	6878      	ldr	r0, [r7, #4]
 801a81e:	f000 f819 	bl	801a854 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 801a822:	4b0b      	ldr	r3, [pc, #44]	; (801a850 <tcp_fasttmr+0xc4>)
 801a824:	781b      	ldrb	r3, [r3, #0]
 801a826:	2b00      	cmp	r3, #0
 801a828:	d000      	beq.n	801a82c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801a82a:	e7b8      	b.n	801a79e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801a82c:	683b      	ldr	r3, [r7, #0]
 801a82e:	607b      	str	r3, [r7, #4]
 801a830:	e002      	b.n	801a838 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	68db      	ldr	r3, [r3, #12]
 801a836:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	2b00      	cmp	r3, #0
 801a83c:	d1b3      	bne.n	801a7a6 <tcp_fasttmr+0x1a>
    }
  }
}
 801a83e:	bf00      	nop
 801a840:	bf00      	nop
 801a842:	3708      	adds	r7, #8
 801a844:	46bd      	mov	sp, r7
 801a846:	bd80      	pop	{r7, pc}
 801a848:	2000bfd2 	.word	0x2000bfd2
 801a84c:	2000bfc8 	.word	0x2000bfc8
 801a850:	2000bfd0 	.word	0x2000bfd0

0801a854 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 801a854:	b590      	push	{r4, r7, lr}
 801a856:	b085      	sub	sp, #20
 801a858:	af00      	add	r7, sp, #0
 801a85a:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 801a85c:	687b      	ldr	r3, [r7, #4]
 801a85e:	2b00      	cmp	r3, #0
 801a860:	d109      	bne.n	801a876 <tcp_process_refused_data+0x22>
 801a862:	4b37      	ldr	r3, [pc, #220]	; (801a940 <tcp_process_refused_data+0xec>)
 801a864:	f240 6209 	movw	r2, #1545	; 0x609
 801a868:	4936      	ldr	r1, [pc, #216]	; (801a944 <tcp_process_refused_data+0xf0>)
 801a86a:	4837      	ldr	r0, [pc, #220]	; (801a948 <tcp_process_refused_data+0xf4>)
 801a86c:	f009 fd10 	bl	8024290 <iprintf>
 801a870:	f06f 030f 	mvn.w	r3, #15
 801a874:	e060      	b.n	801a938 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a87a:	7b5b      	ldrb	r3, [r3, #13]
 801a87c:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 801a87e:	687b      	ldr	r3, [r7, #4]
 801a880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801a882:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 801a884:	687b      	ldr	r3, [r7, #4]
 801a886:	2200      	movs	r2, #0
 801a888:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a890:	2b00      	cmp	r3, #0
 801a892:	d00b      	beq.n	801a8ac <tcp_process_refused_data+0x58>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	6918      	ldr	r0, [r3, #16]
 801a89e:	2300      	movs	r3, #0
 801a8a0:	68ba      	ldr	r2, [r7, #8]
 801a8a2:	6879      	ldr	r1, [r7, #4]
 801a8a4:	47a0      	blx	r4
 801a8a6:	4603      	mov	r3, r0
 801a8a8:	73fb      	strb	r3, [r7, #15]
 801a8aa:	e007      	b.n	801a8bc <tcp_process_refused_data+0x68>
 801a8ac:	2300      	movs	r3, #0
 801a8ae:	68ba      	ldr	r2, [r7, #8]
 801a8b0:	6879      	ldr	r1, [r7, #4]
 801a8b2:	2000      	movs	r0, #0
 801a8b4:	f000 f8a4 	bl	801aa00 <tcp_recv_null>
 801a8b8:	4603      	mov	r3, r0
 801a8ba:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801a8bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a8c0:	2b00      	cmp	r3, #0
 801a8c2:	d12a      	bne.n	801a91a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 801a8c4:	7bbb      	ldrb	r3, [r7, #14]
 801a8c6:	f003 0320 	and.w	r3, r3, #32
 801a8ca:	2b00      	cmp	r3, #0
 801a8cc:	d033      	beq.n	801a936 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8d2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801a8d6:	d005      	beq.n	801a8e4 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 801a8d8:	687b      	ldr	r3, [r7, #4]
 801a8da:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801a8dc:	3301      	adds	r3, #1
 801a8de:	b29a      	uxth	r2, r3
 801a8e0:	687b      	ldr	r3, [r7, #4]
 801a8e2:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801a8ea:	2b00      	cmp	r3, #0
 801a8ec:	d00b      	beq.n	801a906 <tcp_process_refused_data+0xb2>
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801a8f4:	687b      	ldr	r3, [r7, #4]
 801a8f6:	6918      	ldr	r0, [r3, #16]
 801a8f8:	2300      	movs	r3, #0
 801a8fa:	2200      	movs	r2, #0
 801a8fc:	6879      	ldr	r1, [r7, #4]
 801a8fe:	47a0      	blx	r4
 801a900:	4603      	mov	r3, r0
 801a902:	73fb      	strb	r3, [r7, #15]
 801a904:	e001      	b.n	801a90a <tcp_process_refused_data+0xb6>
 801a906:	2300      	movs	r3, #0
 801a908:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801a90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a90e:	f113 0f0d 	cmn.w	r3, #13
 801a912:	d110      	bne.n	801a936 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 801a914:	f06f 030c 	mvn.w	r3, #12
 801a918:	e00e      	b.n	801a938 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801a91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801a91e:	f113 0f0d 	cmn.w	r3, #13
 801a922:	d102      	bne.n	801a92a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 801a924:	f06f 030c 	mvn.w	r3, #12
 801a928:	e006      	b.n	801a938 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801a92a:	687b      	ldr	r3, [r7, #4]
 801a92c:	68ba      	ldr	r2, [r7, #8]
 801a92e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 801a930:	f06f 0304 	mvn.w	r3, #4
 801a934:	e000      	b.n	801a938 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 801a936:	2300      	movs	r3, #0
}
 801a938:	4618      	mov	r0, r3
 801a93a:	3714      	adds	r7, #20
 801a93c:	46bd      	mov	sp, r7
 801a93e:	bd90      	pop	{r4, r7, pc}
 801a940:	08026dec 	.word	0x08026dec
 801a944:	080272fc 	.word	0x080272fc
 801a948:	08026e30 	.word	0x08026e30

0801a94c <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 801a94c:	b580      	push	{r7, lr}
 801a94e:	b084      	sub	sp, #16
 801a950:	af00      	add	r7, sp, #0
 801a952:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 801a954:	e007      	b.n	801a966 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 801a956:	687b      	ldr	r3, [r7, #4]
 801a958:	681b      	ldr	r3, [r3, #0]
 801a95a:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f000 f80a 	bl	801a976 <tcp_seg_free>
    seg = next;
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 801a966:	687b      	ldr	r3, [r7, #4]
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d1f4      	bne.n	801a956 <tcp_segs_free+0xa>
  }
}
 801a96c:	bf00      	nop
 801a96e:	bf00      	nop
 801a970:	3710      	adds	r7, #16
 801a972:	46bd      	mov	sp, r7
 801a974:	bd80      	pop	{r7, pc}

0801a976 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 801a976:	b580      	push	{r7, lr}
 801a978:	b082      	sub	sp, #8
 801a97a:	af00      	add	r7, sp, #0
 801a97c:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 801a97e:	687b      	ldr	r3, [r7, #4]
 801a980:	2b00      	cmp	r3, #0
 801a982:	d00c      	beq.n	801a99e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 801a984:	687b      	ldr	r3, [r7, #4]
 801a986:	685b      	ldr	r3, [r3, #4]
 801a988:	2b00      	cmp	r3, #0
 801a98a:	d004      	beq.n	801a996 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801a98c:	687b      	ldr	r3, [r7, #4]
 801a98e:	685b      	ldr	r3, [r3, #4]
 801a990:	4618      	mov	r0, r3
 801a992:	f7fe fa45 	bl	8018e20 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 801a996:	6879      	ldr	r1, [r7, #4]
 801a998:	2003      	movs	r0, #3
 801a99a:	f7fd fb9d 	bl	80180d8 <memp_free>
  }
}
 801a99e:	bf00      	nop
 801a9a0:	3708      	adds	r7, #8
 801a9a2:	46bd      	mov	sp, r7
 801a9a4:	bd80      	pop	{r7, pc}
	...

0801a9a8 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 801a9a8:	b580      	push	{r7, lr}
 801a9aa:	b084      	sub	sp, #16
 801a9ac:	af00      	add	r7, sp, #0
 801a9ae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 801a9b0:	687b      	ldr	r3, [r7, #4]
 801a9b2:	2b00      	cmp	r3, #0
 801a9b4:	d106      	bne.n	801a9c4 <tcp_seg_copy+0x1c>
 801a9b6:	4b0f      	ldr	r3, [pc, #60]	; (801a9f4 <tcp_seg_copy+0x4c>)
 801a9b8:	f240 6282 	movw	r2, #1666	; 0x682
 801a9bc:	490e      	ldr	r1, [pc, #56]	; (801a9f8 <tcp_seg_copy+0x50>)
 801a9be:	480f      	ldr	r0, [pc, #60]	; (801a9fc <tcp_seg_copy+0x54>)
 801a9c0:	f009 fc66 	bl	8024290 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 801a9c4:	2003      	movs	r0, #3
 801a9c6:	f7fd fb11 	bl	8017fec <memp_malloc>
 801a9ca:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801a9cc:	68fb      	ldr	r3, [r7, #12]
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	d101      	bne.n	801a9d6 <tcp_seg_copy+0x2e>
    return NULL;
 801a9d2:	2300      	movs	r3, #0
 801a9d4:	e00a      	b.n	801a9ec <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 801a9d6:	2210      	movs	r2, #16
 801a9d8:	6879      	ldr	r1, [r7, #4]
 801a9da:	68f8      	ldr	r0, [r7, #12]
 801a9dc:	f009 fb48 	bl	8024070 <memcpy>
  pbuf_ref(cseg->p);
 801a9e0:	68fb      	ldr	r3, [r7, #12]
 801a9e2:	685b      	ldr	r3, [r3, #4]
 801a9e4:	4618      	mov	r0, r3
 801a9e6:	f7fe fac1 	bl	8018f6c <pbuf_ref>
  return cseg;
 801a9ea:	68fb      	ldr	r3, [r7, #12]
}
 801a9ec:	4618      	mov	r0, r3
 801a9ee:	3710      	adds	r7, #16
 801a9f0:	46bd      	mov	sp, r7
 801a9f2:	bd80      	pop	{r7, pc}
 801a9f4:	08026dec 	.word	0x08026dec
 801a9f8:	08027340 	.word	0x08027340
 801a9fc:	08026e30 	.word	0x08026e30

0801aa00 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 801aa00:	b580      	push	{r7, lr}
 801aa02:	b084      	sub	sp, #16
 801aa04:	af00      	add	r7, sp, #0
 801aa06:	60f8      	str	r0, [r7, #12]
 801aa08:	60b9      	str	r1, [r7, #8]
 801aa0a:	607a      	str	r2, [r7, #4]
 801aa0c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801aa0e:	68bb      	ldr	r3, [r7, #8]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d109      	bne.n	801aa28 <tcp_recv_null+0x28>
 801aa14:	4b12      	ldr	r3, [pc, #72]	; (801aa60 <tcp_recv_null+0x60>)
 801aa16:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801aa1a:	4912      	ldr	r1, [pc, #72]	; (801aa64 <tcp_recv_null+0x64>)
 801aa1c:	4812      	ldr	r0, [pc, #72]	; (801aa68 <tcp_recv_null+0x68>)
 801aa1e:	f009 fc37 	bl	8024290 <iprintf>
 801aa22:	f06f 030f 	mvn.w	r3, #15
 801aa26:	e016      	b.n	801aa56 <tcp_recv_null+0x56>

  if (p != NULL) {
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	2b00      	cmp	r3, #0
 801aa2c:	d009      	beq.n	801aa42 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	891b      	ldrh	r3, [r3, #8]
 801aa32:	4619      	mov	r1, r3
 801aa34:	68b8      	ldr	r0, [r7, #8]
 801aa36:	f7ff f9bb 	bl	8019db0 <tcp_recved>
    pbuf_free(p);
 801aa3a:	6878      	ldr	r0, [r7, #4]
 801aa3c:	f7fe f9f0 	bl	8018e20 <pbuf_free>
 801aa40:	e008      	b.n	801aa54 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 801aa42:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801aa46:	2b00      	cmp	r3, #0
 801aa48:	d104      	bne.n	801aa54 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 801aa4a:	68b8      	ldr	r0, [r7, #8]
 801aa4c:	f7fe fea2 	bl	8019794 <tcp_close>
 801aa50:	4603      	mov	r3, r0
 801aa52:	e000      	b.n	801aa56 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 801aa54:	2300      	movs	r3, #0
}
 801aa56:	4618      	mov	r0, r3
 801aa58:	3710      	adds	r7, #16
 801aa5a:	46bd      	mov	sp, r7
 801aa5c:	bd80      	pop	{r7, pc}
 801aa5e:	bf00      	nop
 801aa60:	08026dec 	.word	0x08026dec
 801aa64:	0802735c 	.word	0x0802735c
 801aa68:	08026e30 	.word	0x08026e30

0801aa6c <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 801aa6c:	b580      	push	{r7, lr}
 801aa6e:	b086      	sub	sp, #24
 801aa70:	af00      	add	r7, sp, #0
 801aa72:	4603      	mov	r3, r0
 801aa74:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 801aa76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	db01      	blt.n	801aa82 <tcp_kill_prio+0x16>
 801aa7e:	79fb      	ldrb	r3, [r7, #7]
 801aa80:	e000      	b.n	801aa84 <tcp_kill_prio+0x18>
 801aa82:	237f      	movs	r3, #127	; 0x7f
 801aa84:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 801aa86:	7afb      	ldrb	r3, [r7, #11]
 801aa88:	2b00      	cmp	r3, #0
 801aa8a:	d034      	beq.n	801aaf6 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801aa8c:	7afb      	ldrb	r3, [r7, #11]
 801aa8e:	3b01      	subs	r3, #1
 801aa90:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 801aa92:	2300      	movs	r3, #0
 801aa94:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801aa96:	2300      	movs	r3, #0
 801aa98:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801aa9a:	4b19      	ldr	r3, [pc, #100]	; (801ab00 <tcp_kill_prio+0x94>)
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	617b      	str	r3, [r7, #20]
 801aaa0:	e01f      	b.n	801aae2 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 801aaa2:	697b      	ldr	r3, [r7, #20]
 801aaa4:	7d5b      	ldrb	r3, [r3, #21]
 801aaa6:	7afa      	ldrb	r2, [r7, #11]
 801aaa8:	429a      	cmp	r2, r3
 801aaaa:	d80c      	bhi.n	801aac6 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801aaac:	697b      	ldr	r3, [r7, #20]
 801aaae:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 801aab0:	7afa      	ldrb	r2, [r7, #11]
 801aab2:	429a      	cmp	r2, r3
 801aab4:	d112      	bne.n	801aadc <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801aab6:	4b13      	ldr	r3, [pc, #76]	; (801ab04 <tcp_kill_prio+0x98>)
 801aab8:	681a      	ldr	r2, [r3, #0]
 801aaba:	697b      	ldr	r3, [r7, #20]
 801aabc:	6a1b      	ldr	r3, [r3, #32]
 801aabe:	1ad3      	subs	r3, r2, r3
 801aac0:	68fa      	ldr	r2, [r7, #12]
 801aac2:	429a      	cmp	r2, r3
 801aac4:	d80a      	bhi.n	801aadc <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 801aac6:	4b0f      	ldr	r3, [pc, #60]	; (801ab04 <tcp_kill_prio+0x98>)
 801aac8:	681a      	ldr	r2, [r3, #0]
 801aaca:	697b      	ldr	r3, [r7, #20]
 801aacc:	6a1b      	ldr	r3, [r3, #32]
 801aace:	1ad3      	subs	r3, r2, r3
 801aad0:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 801aad2:	697b      	ldr	r3, [r7, #20]
 801aad4:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 801aad6:	697b      	ldr	r3, [r7, #20]
 801aad8:	7d5b      	ldrb	r3, [r3, #21]
 801aada:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801aadc:	697b      	ldr	r3, [r7, #20]
 801aade:	68db      	ldr	r3, [r3, #12]
 801aae0:	617b      	str	r3, [r7, #20]
 801aae2:	697b      	ldr	r3, [r7, #20]
 801aae4:	2b00      	cmp	r3, #0
 801aae6:	d1dc      	bne.n	801aaa2 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 801aae8:	693b      	ldr	r3, [r7, #16]
 801aaea:	2b00      	cmp	r3, #0
 801aaec:	d004      	beq.n	801aaf8 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801aaee:	6938      	ldr	r0, [r7, #16]
 801aaf0:	f7fe ff96 	bl	8019a20 <tcp_abort>
 801aaf4:	e000      	b.n	801aaf8 <tcp_kill_prio+0x8c>
    return;
 801aaf6:	bf00      	nop
  }
}
 801aaf8:	3718      	adds	r7, #24
 801aafa:	46bd      	mov	sp, r7
 801aafc:	bd80      	pop	{r7, pc}
 801aafe:	bf00      	nop
 801ab00:	2000bfc8 	.word	0x2000bfc8
 801ab04:	2000bfbc 	.word	0x2000bfbc

0801ab08 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 801ab08:	b580      	push	{r7, lr}
 801ab0a:	b086      	sub	sp, #24
 801ab0c:	af00      	add	r7, sp, #0
 801ab0e:	4603      	mov	r3, r0
 801ab10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 801ab12:	79fb      	ldrb	r3, [r7, #7]
 801ab14:	2b08      	cmp	r3, #8
 801ab16:	d009      	beq.n	801ab2c <tcp_kill_state+0x24>
 801ab18:	79fb      	ldrb	r3, [r7, #7]
 801ab1a:	2b09      	cmp	r3, #9
 801ab1c:	d006      	beq.n	801ab2c <tcp_kill_state+0x24>
 801ab1e:	4b1a      	ldr	r3, [pc, #104]	; (801ab88 <tcp_kill_state+0x80>)
 801ab20:	f240 62dd 	movw	r2, #1757	; 0x6dd
 801ab24:	4919      	ldr	r1, [pc, #100]	; (801ab8c <tcp_kill_state+0x84>)
 801ab26:	481a      	ldr	r0, [pc, #104]	; (801ab90 <tcp_kill_state+0x88>)
 801ab28:	f009 fbb2 	bl	8024290 <iprintf>

  inactivity = 0;
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 801ab30:	2300      	movs	r3, #0
 801ab32:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab34:	4b17      	ldr	r3, [pc, #92]	; (801ab94 <tcp_kill_state+0x8c>)
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	617b      	str	r3, [r7, #20]
 801ab3a:	e017      	b.n	801ab6c <tcp_kill_state+0x64>
    if (pcb->state == state) {
 801ab3c:	697b      	ldr	r3, [r7, #20]
 801ab3e:	7d1b      	ldrb	r3, [r3, #20]
 801ab40:	79fa      	ldrb	r2, [r7, #7]
 801ab42:	429a      	cmp	r2, r3
 801ab44:	d10f      	bne.n	801ab66 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801ab46:	4b14      	ldr	r3, [pc, #80]	; (801ab98 <tcp_kill_state+0x90>)
 801ab48:	681a      	ldr	r2, [r3, #0]
 801ab4a:	697b      	ldr	r3, [r7, #20]
 801ab4c:	6a1b      	ldr	r3, [r3, #32]
 801ab4e:	1ad3      	subs	r3, r2, r3
 801ab50:	68fa      	ldr	r2, [r7, #12]
 801ab52:	429a      	cmp	r2, r3
 801ab54:	d807      	bhi.n	801ab66 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 801ab56:	4b10      	ldr	r3, [pc, #64]	; (801ab98 <tcp_kill_state+0x90>)
 801ab58:	681a      	ldr	r2, [r3, #0]
 801ab5a:	697b      	ldr	r3, [r7, #20]
 801ab5c:	6a1b      	ldr	r3, [r3, #32]
 801ab5e:	1ad3      	subs	r3, r2, r3
 801ab60:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 801ab62:	697b      	ldr	r3, [r7, #20]
 801ab64:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801ab66:	697b      	ldr	r3, [r7, #20]
 801ab68:	68db      	ldr	r3, [r3, #12]
 801ab6a:	617b      	str	r3, [r7, #20]
 801ab6c:	697b      	ldr	r3, [r7, #20]
 801ab6e:	2b00      	cmp	r3, #0
 801ab70:	d1e4      	bne.n	801ab3c <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 801ab72:	693b      	ldr	r3, [r7, #16]
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d003      	beq.n	801ab80 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 801ab78:	2100      	movs	r1, #0
 801ab7a:	6938      	ldr	r0, [r7, #16]
 801ab7c:	f7fe fe92 	bl	80198a4 <tcp_abandon>
  }
}
 801ab80:	bf00      	nop
 801ab82:	3718      	adds	r7, #24
 801ab84:	46bd      	mov	sp, r7
 801ab86:	bd80      	pop	{r7, pc}
 801ab88:	08026dec 	.word	0x08026dec
 801ab8c:	08027378 	.word	0x08027378
 801ab90:	08026e30 	.word	0x08026e30
 801ab94:	2000bfc8 	.word	0x2000bfc8
 801ab98:	2000bfbc 	.word	0x2000bfbc

0801ab9c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801ab9c:	b580      	push	{r7, lr}
 801ab9e:	b084      	sub	sp, #16
 801aba0:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 801aba2:	2300      	movs	r3, #0
 801aba4:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 801aba6:	2300      	movs	r3, #0
 801aba8:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801abaa:	4b12      	ldr	r3, [pc, #72]	; (801abf4 <tcp_kill_timewait+0x58>)
 801abac:	681b      	ldr	r3, [r3, #0]
 801abae:	60fb      	str	r3, [r7, #12]
 801abb0:	e012      	b.n	801abd8 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 801abb2:	4b11      	ldr	r3, [pc, #68]	; (801abf8 <tcp_kill_timewait+0x5c>)
 801abb4:	681a      	ldr	r2, [r3, #0]
 801abb6:	68fb      	ldr	r3, [r7, #12]
 801abb8:	6a1b      	ldr	r3, [r3, #32]
 801abba:	1ad3      	subs	r3, r2, r3
 801abbc:	687a      	ldr	r2, [r7, #4]
 801abbe:	429a      	cmp	r2, r3
 801abc0:	d807      	bhi.n	801abd2 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 801abc2:	4b0d      	ldr	r3, [pc, #52]	; (801abf8 <tcp_kill_timewait+0x5c>)
 801abc4:	681a      	ldr	r2, [r3, #0]
 801abc6:	68fb      	ldr	r3, [r7, #12]
 801abc8:	6a1b      	ldr	r3, [r3, #32]
 801abca:	1ad3      	subs	r3, r2, r3
 801abcc:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801abce:	68fb      	ldr	r3, [r7, #12]
 801abd0:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801abd2:	68fb      	ldr	r3, [r7, #12]
 801abd4:	68db      	ldr	r3, [r3, #12]
 801abd6:	60fb      	str	r3, [r7, #12]
 801abd8:	68fb      	ldr	r3, [r7, #12]
 801abda:	2b00      	cmp	r3, #0
 801abdc:	d1e9      	bne.n	801abb2 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801abde:	68bb      	ldr	r3, [r7, #8]
 801abe0:	2b00      	cmp	r3, #0
 801abe2:	d002      	beq.n	801abea <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801abe4:	68b8      	ldr	r0, [r7, #8]
 801abe6:	f7fe ff1b 	bl	8019a20 <tcp_abort>
  }
}
 801abea:	bf00      	nop
 801abec:	3710      	adds	r7, #16
 801abee:	46bd      	mov	sp, r7
 801abf0:	bd80      	pop	{r7, pc}
 801abf2:	bf00      	nop
 801abf4:	2000bfcc 	.word	0x2000bfcc
 801abf8:	2000bfbc 	.word	0x2000bfbc

0801abfc <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801abfc:	b580      	push	{r7, lr}
 801abfe:	b082      	sub	sp, #8
 801ac00:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 801ac02:	4b10      	ldr	r3, [pc, #64]	; (801ac44 <tcp_handle_closepend+0x48>)
 801ac04:	681b      	ldr	r3, [r3, #0]
 801ac06:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 801ac08:	e014      	b.n	801ac34 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	68db      	ldr	r3, [r3, #12]
 801ac0e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 801ac10:	687b      	ldr	r3, [r7, #4]
 801ac12:	8b5b      	ldrh	r3, [r3, #26]
 801ac14:	f003 0308 	and.w	r3, r3, #8
 801ac18:	2b00      	cmp	r3, #0
 801ac1a:	d009      	beq.n	801ac30 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	8b5b      	ldrh	r3, [r3, #26]
 801ac20:	f023 0308 	bic.w	r3, r3, #8
 801ac24:	b29a      	uxth	r2, r3
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 801ac2a:	6878      	ldr	r0, [r7, #4]
 801ac2c:	f7fe fd48 	bl	80196c0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 801ac30:	683b      	ldr	r3, [r7, #0]
 801ac32:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 801ac34:	687b      	ldr	r3, [r7, #4]
 801ac36:	2b00      	cmp	r3, #0
 801ac38:	d1e7      	bne.n	801ac0a <tcp_handle_closepend+0xe>
  }
}
 801ac3a:	bf00      	nop
 801ac3c:	bf00      	nop
 801ac3e:	3708      	adds	r7, #8
 801ac40:	46bd      	mov	sp, r7
 801ac42:	bd80      	pop	{r7, pc}
 801ac44:	2000bfc8 	.word	0x2000bfc8

0801ac48 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 801ac48:	b580      	push	{r7, lr}
 801ac4a:	b084      	sub	sp, #16
 801ac4c:	af00      	add	r7, sp, #0
 801ac4e:	4603      	mov	r3, r0
 801ac50:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ac52:	2001      	movs	r0, #1
 801ac54:	f7fd f9ca 	bl	8017fec <memp_malloc>
 801ac58:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 801ac5a:	68fb      	ldr	r3, [r7, #12]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d126      	bne.n	801acae <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 801ac60:	f7ff ffcc 	bl	801abfc <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 801ac64:	f7ff ff9a 	bl	801ab9c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ac68:	2001      	movs	r0, #1
 801ac6a:	f7fd f9bf 	bl	8017fec <memp_malloc>
 801ac6e:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 801ac70:	68fb      	ldr	r3, [r7, #12]
 801ac72:	2b00      	cmp	r3, #0
 801ac74:	d11b      	bne.n	801acae <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 801ac76:	2009      	movs	r0, #9
 801ac78:	f7ff ff46 	bl	801ab08 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ac7c:	2001      	movs	r0, #1
 801ac7e:	f7fd f9b5 	bl	8017fec <memp_malloc>
 801ac82:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 801ac84:	68fb      	ldr	r3, [r7, #12]
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d111      	bne.n	801acae <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801ac8a:	2008      	movs	r0, #8
 801ac8c:	f7ff ff3c 	bl	801ab08 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801ac90:	2001      	movs	r0, #1
 801ac92:	f7fd f9ab 	bl	8017fec <memp_malloc>
 801ac96:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 801ac98:	68fb      	ldr	r3, [r7, #12]
 801ac9a:	2b00      	cmp	r3, #0
 801ac9c:	d107      	bne.n	801acae <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801ac9e:	79fb      	ldrb	r3, [r7, #7]
 801aca0:	4618      	mov	r0, r3
 801aca2:	f7ff fee3 	bl	801aa6c <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 801aca6:	2001      	movs	r0, #1
 801aca8:	f7fd f9a0 	bl	8017fec <memp_malloc>
 801acac:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801acae:	68fb      	ldr	r3, [r7, #12]
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d03f      	beq.n	801ad34 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 801acb4:	229c      	movs	r2, #156	; 0x9c
 801acb6:	2100      	movs	r1, #0
 801acb8:	68f8      	ldr	r0, [r7, #12]
 801acba:	f009 fa01 	bl	80240c0 <memset>
    pcb->prio = prio;
 801acbe:	68fb      	ldr	r3, [r7, #12]
 801acc0:	79fa      	ldrb	r2, [r7, #7]
 801acc2:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 801acc4:	68fb      	ldr	r3, [r7, #12]
 801acc6:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801acca:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801acce:	68fb      	ldr	r3, [r7, #12]
 801acd0:	f44f 6206 	mov.w	r2, #2144	; 0x860
 801acd4:	855a      	strh	r2, [r3, #42]	; 0x2a
 801acd6:	68fb      	ldr	r3, [r7, #12]
 801acd8:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801acda:	68fb      	ldr	r3, [r7, #12]
 801acdc:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801acde:	68fb      	ldr	r3, [r7, #12]
 801ace0:	22ff      	movs	r2, #255	; 0xff
 801ace2:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 801ace4:	68fb      	ldr	r3, [r7, #12]
 801ace6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801acea:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801acec:	68fb      	ldr	r3, [r7, #12]
 801acee:	2206      	movs	r2, #6
 801acf0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 801acf4:	68fb      	ldr	r3, [r7, #12]
 801acf6:	2206      	movs	r2, #6
 801acf8:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801acfa:	68fb      	ldr	r3, [r7, #12]
 801acfc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801ad00:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 801ad02:	68fb      	ldr	r3, [r7, #12]
 801ad04:	2201      	movs	r2, #1
 801ad06:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801ad0a:	4b0d      	ldr	r3, [pc, #52]	; (801ad40 <tcp_alloc+0xf8>)
 801ad0c:	681a      	ldr	r2, [r3, #0]
 801ad0e:	68fb      	ldr	r3, [r7, #12]
 801ad10:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 801ad12:	4b0c      	ldr	r3, [pc, #48]	; (801ad44 <tcp_alloc+0xfc>)
 801ad14:	781a      	ldrb	r2, [r3, #0]
 801ad16:	68fb      	ldr	r3, [r7, #12]
 801ad18:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801ad1a:	68fb      	ldr	r3, [r7, #12]
 801ad1c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801ad20:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 801ad24:	68fb      	ldr	r3, [r7, #12]
 801ad26:	4a08      	ldr	r2, [pc, #32]	; (801ad48 <tcp_alloc+0x100>)
 801ad28:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 801ad2c:	68fb      	ldr	r3, [r7, #12]
 801ad2e:	4a07      	ldr	r2, [pc, #28]	; (801ad4c <tcp_alloc+0x104>)
 801ad30:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 801ad34:	68fb      	ldr	r3, [r7, #12]
}
 801ad36:	4618      	mov	r0, r3
 801ad38:	3710      	adds	r7, #16
 801ad3a:	46bd      	mov	sp, r7
 801ad3c:	bd80      	pop	{r7, pc}
 801ad3e:	bf00      	nop
 801ad40:	2000bfbc 	.word	0x2000bfbc
 801ad44:	2000bfd2 	.word	0x2000bfd2
 801ad48:	0801aa01 	.word	0x0801aa01
 801ad4c:	006ddd00 	.word	0x006ddd00

0801ad50 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 801ad50:	b580      	push	{r7, lr}
 801ad52:	b084      	sub	sp, #16
 801ad54:	af00      	add	r7, sp, #0
 801ad56:	4603      	mov	r3, r0
 801ad58:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 801ad5a:	2040      	movs	r0, #64	; 0x40
 801ad5c:	f7ff ff74 	bl	801ac48 <tcp_alloc>
 801ad60:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 801ad62:	68fb      	ldr	r3, [r7, #12]
}
 801ad64:	4618      	mov	r0, r3
 801ad66:	3710      	adds	r7, #16
 801ad68:	46bd      	mov	sp, r7
 801ad6a:	bd80      	pop	{r7, pc}

0801ad6c <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 801ad6c:	b480      	push	{r7}
 801ad6e:	b083      	sub	sp, #12
 801ad70:	af00      	add	r7, sp, #0
 801ad72:	6078      	str	r0, [r7, #4]
 801ad74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	2b00      	cmp	r3, #0
 801ad7a:	d002      	beq.n	801ad82 <tcp_arg+0x16>
    pcb->callback_arg = arg;
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	683a      	ldr	r2, [r7, #0]
 801ad80:	611a      	str	r2, [r3, #16]
  }
}
 801ad82:	bf00      	nop
 801ad84:	370c      	adds	r7, #12
 801ad86:	46bd      	mov	sp, r7
 801ad88:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ad8c:	4770      	bx	lr
	...

0801ad90 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 801ad90:	b580      	push	{r7, lr}
 801ad92:	b082      	sub	sp, #8
 801ad94:	af00      	add	r7, sp, #0
 801ad96:	6078      	str	r0, [r7, #4]
 801ad98:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ad9a:	687b      	ldr	r3, [r7, #4]
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	d00e      	beq.n	801adbe <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 801ada0:	687b      	ldr	r3, [r7, #4]
 801ada2:	7d1b      	ldrb	r3, [r3, #20]
 801ada4:	2b01      	cmp	r3, #1
 801ada6:	d106      	bne.n	801adb6 <tcp_recv+0x26>
 801ada8:	4b07      	ldr	r3, [pc, #28]	; (801adc8 <tcp_recv+0x38>)
 801adaa:	f240 72df 	movw	r2, #2015	; 0x7df
 801adae:	4907      	ldr	r1, [pc, #28]	; (801adcc <tcp_recv+0x3c>)
 801adb0:	4807      	ldr	r0, [pc, #28]	; (801add0 <tcp_recv+0x40>)
 801adb2:	f009 fa6d 	bl	8024290 <iprintf>
    pcb->recv = recv;
 801adb6:	687b      	ldr	r3, [r7, #4]
 801adb8:	683a      	ldr	r2, [r7, #0]
 801adba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 801adbe:	bf00      	nop
 801adc0:	3708      	adds	r7, #8
 801adc2:	46bd      	mov	sp, r7
 801adc4:	bd80      	pop	{r7, pc}
 801adc6:	bf00      	nop
 801adc8:	08026dec 	.word	0x08026dec
 801adcc:	08027388 	.word	0x08027388
 801add0:	08026e30 	.word	0x08026e30

0801add4 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 801add4:	b580      	push	{r7, lr}
 801add6:	b082      	sub	sp, #8
 801add8:	af00      	add	r7, sp, #0
 801adda:	6078      	str	r0, [r7, #4]
 801addc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	2b00      	cmp	r3, #0
 801ade2:	d00e      	beq.n	801ae02 <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	7d1b      	ldrb	r3, [r3, #20]
 801ade8:	2b01      	cmp	r3, #1
 801adea:	d106      	bne.n	801adfa <tcp_sent+0x26>
 801adec:	4b07      	ldr	r3, [pc, #28]	; (801ae0c <tcp_sent+0x38>)
 801adee:	f240 72f3 	movw	r2, #2035	; 0x7f3
 801adf2:	4907      	ldr	r1, [pc, #28]	; (801ae10 <tcp_sent+0x3c>)
 801adf4:	4807      	ldr	r0, [pc, #28]	; (801ae14 <tcp_sent+0x40>)
 801adf6:	f009 fa4b 	bl	8024290 <iprintf>
    pcb->sent = sent;
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	683a      	ldr	r2, [r7, #0]
 801adfe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 801ae02:	bf00      	nop
 801ae04:	3708      	adds	r7, #8
 801ae06:	46bd      	mov	sp, r7
 801ae08:	bd80      	pop	{r7, pc}
 801ae0a:	bf00      	nop
 801ae0c:	08026dec 	.word	0x08026dec
 801ae10:	080273b0 	.word	0x080273b0
 801ae14:	08026e30 	.word	0x08026e30

0801ae18 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 801ae18:	b580      	push	{r7, lr}
 801ae1a:	b082      	sub	sp, #8
 801ae1c:	af00      	add	r7, sp, #0
 801ae1e:	6078      	str	r0, [r7, #4]
 801ae20:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	2b00      	cmp	r3, #0
 801ae26:	d00e      	beq.n	801ae46 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 801ae28:	687b      	ldr	r3, [r7, #4]
 801ae2a:	7d1b      	ldrb	r3, [r3, #20]
 801ae2c:	2b01      	cmp	r3, #1
 801ae2e:	d106      	bne.n	801ae3e <tcp_err+0x26>
 801ae30:	4b07      	ldr	r3, [pc, #28]	; (801ae50 <tcp_err+0x38>)
 801ae32:	f640 020d 	movw	r2, #2061	; 0x80d
 801ae36:	4907      	ldr	r1, [pc, #28]	; (801ae54 <tcp_err+0x3c>)
 801ae38:	4807      	ldr	r0, [pc, #28]	; (801ae58 <tcp_err+0x40>)
 801ae3a:	f009 fa29 	bl	8024290 <iprintf>
    pcb->errf = err;
 801ae3e:	687b      	ldr	r3, [r7, #4]
 801ae40:	683a      	ldr	r2, [r7, #0]
 801ae42:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 801ae46:	bf00      	nop
 801ae48:	3708      	adds	r7, #8
 801ae4a:	46bd      	mov	sp, r7
 801ae4c:	bd80      	pop	{r7, pc}
 801ae4e:	bf00      	nop
 801ae50:	08026dec 	.word	0x08026dec
 801ae54:	080273d8 	.word	0x080273d8
 801ae58:	08026e30 	.word	0x08026e30

0801ae5c <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 801ae5c:	b480      	push	{r7}
 801ae5e:	b085      	sub	sp, #20
 801ae60:	af00      	add	r7, sp, #0
 801ae62:	6078      	str	r0, [r7, #4]
 801ae64:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 801ae66:	687b      	ldr	r3, [r7, #4]
 801ae68:	2b00      	cmp	r3, #0
 801ae6a:	d008      	beq.n	801ae7e <tcp_accept+0x22>
 801ae6c:	687b      	ldr	r3, [r7, #4]
 801ae6e:	7d1b      	ldrb	r3, [r3, #20]
 801ae70:	2b01      	cmp	r3, #1
 801ae72:	d104      	bne.n	801ae7e <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 801ae78:	68fb      	ldr	r3, [r7, #12]
 801ae7a:	683a      	ldr	r2, [r7, #0]
 801ae7c:	619a      	str	r2, [r3, #24]
  }
}
 801ae7e:	bf00      	nop
 801ae80:	3714      	adds	r7, #20
 801ae82:	46bd      	mov	sp, r7
 801ae84:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ae88:	4770      	bx	lr
	...

0801ae8c <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 801ae8c:	b580      	push	{r7, lr}
 801ae8e:	b084      	sub	sp, #16
 801ae90:	af00      	add	r7, sp, #0
 801ae92:	60f8      	str	r0, [r7, #12]
 801ae94:	60b9      	str	r1, [r7, #8]
 801ae96:	4613      	mov	r3, r2
 801ae98:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 801ae9a:	68fb      	ldr	r3, [r7, #12]
 801ae9c:	2b00      	cmp	r3, #0
 801ae9e:	d107      	bne.n	801aeb0 <tcp_poll+0x24>
 801aea0:	4b0e      	ldr	r3, [pc, #56]	; (801aedc <tcp_poll+0x50>)
 801aea2:	f640 023d 	movw	r2, #2109	; 0x83d
 801aea6:	490e      	ldr	r1, [pc, #56]	; (801aee0 <tcp_poll+0x54>)
 801aea8:	480e      	ldr	r0, [pc, #56]	; (801aee4 <tcp_poll+0x58>)
 801aeaa:	f009 f9f1 	bl	8024290 <iprintf>
 801aeae:	e011      	b.n	801aed4 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	7d1b      	ldrb	r3, [r3, #20]
 801aeb4:	2b01      	cmp	r3, #1
 801aeb6:	d106      	bne.n	801aec6 <tcp_poll+0x3a>
 801aeb8:	4b08      	ldr	r3, [pc, #32]	; (801aedc <tcp_poll+0x50>)
 801aeba:	f640 023e 	movw	r2, #2110	; 0x83e
 801aebe:	490a      	ldr	r1, [pc, #40]	; (801aee8 <tcp_poll+0x5c>)
 801aec0:	4808      	ldr	r0, [pc, #32]	; (801aee4 <tcp_poll+0x58>)
 801aec2:	f009 f9e5 	bl	8024290 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 801aec6:	68fb      	ldr	r3, [r7, #12]
 801aec8:	68ba      	ldr	r2, [r7, #8]
 801aeca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	79fa      	ldrb	r2, [r7, #7]
 801aed2:	775a      	strb	r2, [r3, #29]
}
 801aed4:	3710      	adds	r7, #16
 801aed6:	46bd      	mov	sp, r7
 801aed8:	bd80      	pop	{r7, pc}
 801aeda:	bf00      	nop
 801aedc:	08026dec 	.word	0x08026dec
 801aee0:	08027400 	.word	0x08027400
 801aee4:	08026e30 	.word	0x08026e30
 801aee8:	08027418 	.word	0x08027418

0801aeec <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 801aeec:	b580      	push	{r7, lr}
 801aeee:	b082      	sub	sp, #8
 801aef0:	af00      	add	r7, sp, #0
 801aef2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	2b00      	cmp	r3, #0
 801aef8:	d107      	bne.n	801af0a <tcp_pcb_purge+0x1e>
 801aefa:	4b21      	ldr	r3, [pc, #132]	; (801af80 <tcp_pcb_purge+0x94>)
 801aefc:	f640 0251 	movw	r2, #2129	; 0x851
 801af00:	4920      	ldr	r1, [pc, #128]	; (801af84 <tcp_pcb_purge+0x98>)
 801af02:	4821      	ldr	r0, [pc, #132]	; (801af88 <tcp_pcb_purge+0x9c>)
 801af04:	f009 f9c4 	bl	8024290 <iprintf>
 801af08:	e037      	b.n	801af7a <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 801af0a:	687b      	ldr	r3, [r7, #4]
 801af0c:	7d1b      	ldrb	r3, [r3, #20]
 801af0e:	2b00      	cmp	r3, #0
 801af10:	d033      	beq.n	801af7a <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 801af12:	687b      	ldr	r3, [r7, #4]
 801af14:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 801af16:	2b0a      	cmp	r3, #10
 801af18:	d02f      	beq.n	801af7a <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 801af1a:	687b      	ldr	r3, [r7, #4]
 801af1c:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 801af1e:	2b01      	cmp	r3, #1
 801af20:	d02b      	beq.n	801af7a <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 801af22:	687b      	ldr	r3, [r7, #4]
 801af24:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801af26:	2b00      	cmp	r3, #0
 801af28:	d007      	beq.n	801af3a <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801af2e:	4618      	mov	r0, r3
 801af30:	f7fd ff76 	bl	8018e20 <pbuf_free>
      pcb->refused_data = NULL;
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	2200      	movs	r2, #0
 801af38:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801af3a:	687b      	ldr	r3, [r7, #4]
 801af3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801af3e:	2b00      	cmp	r3, #0
 801af40:	d002      	beq.n	801af48 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 801af42:	6878      	ldr	r0, [r7, #4]
 801af44:	f000 f986 	bl	801b254 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801af48:	687b      	ldr	r3, [r7, #4]
 801af4a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801af4e:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 801af50:	687b      	ldr	r3, [r7, #4]
 801af52:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801af54:	4618      	mov	r0, r3
 801af56:	f7ff fcf9 	bl	801a94c <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801af5a:	687b      	ldr	r3, [r7, #4]
 801af5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801af5e:	4618      	mov	r0, r3
 801af60:	f7ff fcf4 	bl	801a94c <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 801af64:	687b      	ldr	r3, [r7, #4]
 801af66:	2200      	movs	r2, #0
 801af68:	66da      	str	r2, [r3, #108]	; 0x6c
 801af6a:	687b      	ldr	r3, [r7, #4]
 801af6c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801af6e:	687b      	ldr	r3, [r7, #4]
 801af70:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 801af72:	687b      	ldr	r3, [r7, #4]
 801af74:	2200      	movs	r2, #0
 801af76:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801af7a:	3708      	adds	r7, #8
 801af7c:	46bd      	mov	sp, r7
 801af7e:	bd80      	pop	{r7, pc}
 801af80:	08026dec 	.word	0x08026dec
 801af84:	08027438 	.word	0x08027438
 801af88:	08026e30 	.word	0x08026e30

0801af8c <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 801af8c:	b580      	push	{r7, lr}
 801af8e:	b084      	sub	sp, #16
 801af90:	af00      	add	r7, sp, #0
 801af92:	6078      	str	r0, [r7, #4]
 801af94:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801af96:	683b      	ldr	r3, [r7, #0]
 801af98:	2b00      	cmp	r3, #0
 801af9a:	d106      	bne.n	801afaa <tcp_pcb_remove+0x1e>
 801af9c:	4b3e      	ldr	r3, [pc, #248]	; (801b098 <tcp_pcb_remove+0x10c>)
 801af9e:	f640 0283 	movw	r2, #2179	; 0x883
 801afa2:	493e      	ldr	r1, [pc, #248]	; (801b09c <tcp_pcb_remove+0x110>)
 801afa4:	483e      	ldr	r0, [pc, #248]	; (801b0a0 <tcp_pcb_remove+0x114>)
 801afa6:	f009 f973 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801afaa:	687b      	ldr	r3, [r7, #4]
 801afac:	2b00      	cmp	r3, #0
 801afae:	d106      	bne.n	801afbe <tcp_pcb_remove+0x32>
 801afb0:	4b39      	ldr	r3, [pc, #228]	; (801b098 <tcp_pcb_remove+0x10c>)
 801afb2:	f640 0284 	movw	r2, #2180	; 0x884
 801afb6:	493b      	ldr	r1, [pc, #236]	; (801b0a4 <tcp_pcb_remove+0x118>)
 801afb8:	4839      	ldr	r0, [pc, #228]	; (801b0a0 <tcp_pcb_remove+0x114>)
 801afba:	f009 f969 	bl	8024290 <iprintf>

  TCP_RMV(pcblist, pcb);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	683a      	ldr	r2, [r7, #0]
 801afc4:	429a      	cmp	r2, r3
 801afc6:	d105      	bne.n	801afd4 <tcp_pcb_remove+0x48>
 801afc8:	687b      	ldr	r3, [r7, #4]
 801afca:	681b      	ldr	r3, [r3, #0]
 801afcc:	68da      	ldr	r2, [r3, #12]
 801afce:	687b      	ldr	r3, [r7, #4]
 801afd0:	601a      	str	r2, [r3, #0]
 801afd2:	e013      	b.n	801affc <tcp_pcb_remove+0x70>
 801afd4:	687b      	ldr	r3, [r7, #4]
 801afd6:	681b      	ldr	r3, [r3, #0]
 801afd8:	60fb      	str	r3, [r7, #12]
 801afda:	e00c      	b.n	801aff6 <tcp_pcb_remove+0x6a>
 801afdc:	68fb      	ldr	r3, [r7, #12]
 801afde:	68db      	ldr	r3, [r3, #12]
 801afe0:	683a      	ldr	r2, [r7, #0]
 801afe2:	429a      	cmp	r2, r3
 801afe4:	d104      	bne.n	801aff0 <tcp_pcb_remove+0x64>
 801afe6:	683b      	ldr	r3, [r7, #0]
 801afe8:	68da      	ldr	r2, [r3, #12]
 801afea:	68fb      	ldr	r3, [r7, #12]
 801afec:	60da      	str	r2, [r3, #12]
 801afee:	e005      	b.n	801affc <tcp_pcb_remove+0x70>
 801aff0:	68fb      	ldr	r3, [r7, #12]
 801aff2:	68db      	ldr	r3, [r3, #12]
 801aff4:	60fb      	str	r3, [r7, #12]
 801aff6:	68fb      	ldr	r3, [r7, #12]
 801aff8:	2b00      	cmp	r3, #0
 801affa:	d1ef      	bne.n	801afdc <tcp_pcb_remove+0x50>
 801affc:	683b      	ldr	r3, [r7, #0]
 801affe:	2200      	movs	r2, #0
 801b000:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 801b002:	6838      	ldr	r0, [r7, #0]
 801b004:	f7ff ff72 	bl	801aeec <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 801b008:	683b      	ldr	r3, [r7, #0]
 801b00a:	7d1b      	ldrb	r3, [r3, #20]
 801b00c:	2b0a      	cmp	r3, #10
 801b00e:	d013      	beq.n	801b038 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 801b010:	683b      	ldr	r3, [r7, #0]
 801b012:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 801b014:	2b01      	cmp	r3, #1
 801b016:	d00f      	beq.n	801b038 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 801b018:	683b      	ldr	r3, [r7, #0]
 801b01a:	8b5b      	ldrh	r3, [r3, #26]
 801b01c:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 801b020:	2b00      	cmp	r3, #0
 801b022:	d009      	beq.n	801b038 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 801b024:	683b      	ldr	r3, [r7, #0]
 801b026:	8b5b      	ldrh	r3, [r3, #26]
 801b028:	f043 0302 	orr.w	r3, r3, #2
 801b02c:	b29a      	uxth	r2, r3
 801b02e:	683b      	ldr	r3, [r7, #0]
 801b030:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801b032:	6838      	ldr	r0, [r7, #0]
 801b034:	f003 fbc6 	bl	801e7c4 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801b038:	683b      	ldr	r3, [r7, #0]
 801b03a:	7d1b      	ldrb	r3, [r3, #20]
 801b03c:	2b01      	cmp	r3, #1
 801b03e:	d020      	beq.n	801b082 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 801b040:	683b      	ldr	r3, [r7, #0]
 801b042:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801b044:	2b00      	cmp	r3, #0
 801b046:	d006      	beq.n	801b056 <tcp_pcb_remove+0xca>
 801b048:	4b13      	ldr	r3, [pc, #76]	; (801b098 <tcp_pcb_remove+0x10c>)
 801b04a:	f640 0293 	movw	r2, #2195	; 0x893
 801b04e:	4916      	ldr	r1, [pc, #88]	; (801b0a8 <tcp_pcb_remove+0x11c>)
 801b050:	4813      	ldr	r0, [pc, #76]	; (801b0a0 <tcp_pcb_remove+0x114>)
 801b052:	f009 f91d 	bl	8024290 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801b056:	683b      	ldr	r3, [r7, #0]
 801b058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801b05a:	2b00      	cmp	r3, #0
 801b05c:	d006      	beq.n	801b06c <tcp_pcb_remove+0xe0>
 801b05e:	4b0e      	ldr	r3, [pc, #56]	; (801b098 <tcp_pcb_remove+0x10c>)
 801b060:	f640 0294 	movw	r2, #2196	; 0x894
 801b064:	4911      	ldr	r1, [pc, #68]	; (801b0ac <tcp_pcb_remove+0x120>)
 801b066:	480e      	ldr	r0, [pc, #56]	; (801b0a0 <tcp_pcb_remove+0x114>)
 801b068:	f009 f912 	bl	8024290 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 801b06c:	683b      	ldr	r3, [r7, #0]
 801b06e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b070:	2b00      	cmp	r3, #0
 801b072:	d006      	beq.n	801b082 <tcp_pcb_remove+0xf6>
 801b074:	4b08      	ldr	r3, [pc, #32]	; (801b098 <tcp_pcb_remove+0x10c>)
 801b076:	f640 0296 	movw	r2, #2198	; 0x896
 801b07a:	490d      	ldr	r1, [pc, #52]	; (801b0b0 <tcp_pcb_remove+0x124>)
 801b07c:	4808      	ldr	r0, [pc, #32]	; (801b0a0 <tcp_pcb_remove+0x114>)
 801b07e:	f009 f907 	bl	8024290 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 801b082:	683b      	ldr	r3, [r7, #0]
 801b084:	2200      	movs	r2, #0
 801b086:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801b088:	683b      	ldr	r3, [r7, #0]
 801b08a:	2200      	movs	r2, #0
 801b08c:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 801b08e:	bf00      	nop
 801b090:	3710      	adds	r7, #16
 801b092:	46bd      	mov	sp, r7
 801b094:	bd80      	pop	{r7, pc}
 801b096:	bf00      	nop
 801b098:	08026dec 	.word	0x08026dec
 801b09c:	08027454 	.word	0x08027454
 801b0a0:	08026e30 	.word	0x08026e30
 801b0a4:	08027470 	.word	0x08027470
 801b0a8:	08027490 	.word	0x08027490
 801b0ac:	080274a8 	.word	0x080274a8
 801b0b0:	080274c4 	.word	0x080274c4

0801b0b4 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 801b0b4:	b580      	push	{r7, lr}
 801b0b6:	b082      	sub	sp, #8
 801b0b8:	af00      	add	r7, sp, #0
 801b0ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	2b00      	cmp	r3, #0
 801b0c0:	d106      	bne.n	801b0d0 <tcp_next_iss+0x1c>
 801b0c2:	4b0a      	ldr	r3, [pc, #40]	; (801b0ec <tcp_next_iss+0x38>)
 801b0c4:	f640 02af 	movw	r2, #2223	; 0x8af
 801b0c8:	4909      	ldr	r1, [pc, #36]	; (801b0f0 <tcp_next_iss+0x3c>)
 801b0ca:	480a      	ldr	r0, [pc, #40]	; (801b0f4 <tcp_next_iss+0x40>)
 801b0cc:	f009 f8e0 	bl	8024290 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 801b0d0:	4b09      	ldr	r3, [pc, #36]	; (801b0f8 <tcp_next_iss+0x44>)
 801b0d2:	681a      	ldr	r2, [r3, #0]
 801b0d4:	4b09      	ldr	r3, [pc, #36]	; (801b0fc <tcp_next_iss+0x48>)
 801b0d6:	681b      	ldr	r3, [r3, #0]
 801b0d8:	4413      	add	r3, r2
 801b0da:	4a07      	ldr	r2, [pc, #28]	; (801b0f8 <tcp_next_iss+0x44>)
 801b0dc:	6013      	str	r3, [r2, #0]
  return iss;
 801b0de:	4b06      	ldr	r3, [pc, #24]	; (801b0f8 <tcp_next_iss+0x44>)
 801b0e0:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 801b0e2:	4618      	mov	r0, r3
 801b0e4:	3708      	adds	r7, #8
 801b0e6:	46bd      	mov	sp, r7
 801b0e8:	bd80      	pop	{r7, pc}
 801b0ea:	bf00      	nop
 801b0ec:	08026dec 	.word	0x08026dec
 801b0f0:	080274dc 	.word	0x080274dc
 801b0f4:	08026e30 	.word	0x08026e30
 801b0f8:	2000002c 	.word	0x2000002c
 801b0fc:	2000bfbc 	.word	0x2000bfbc

0801b100 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 801b100:	b580      	push	{r7, lr}
 801b102:	b086      	sub	sp, #24
 801b104:	af00      	add	r7, sp, #0
 801b106:	4603      	mov	r3, r0
 801b108:	60b9      	str	r1, [r7, #8]
 801b10a:	607a      	str	r2, [r7, #4]
 801b10c:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	2b00      	cmp	r3, #0
 801b112:	d106      	bne.n	801b122 <tcp_eff_send_mss_netif+0x22>
 801b114:	4b14      	ldr	r3, [pc, #80]	; (801b168 <tcp_eff_send_mss_netif+0x68>)
 801b116:	f640 02c5 	movw	r2, #2245	; 0x8c5
 801b11a:	4914      	ldr	r1, [pc, #80]	; (801b16c <tcp_eff_send_mss_netif+0x6c>)
 801b11c:	4814      	ldr	r0, [pc, #80]	; (801b170 <tcp_eff_send_mss_netif+0x70>)
 801b11e:	f009 f8b7 	bl	8024290 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 801b122:	68bb      	ldr	r3, [r7, #8]
 801b124:	2b00      	cmp	r3, #0
 801b126:	d101      	bne.n	801b12c <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801b128:	89fb      	ldrh	r3, [r7, #14]
 801b12a:	e019      	b.n	801b160 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 801b12c:	68bb      	ldr	r3, [r7, #8]
 801b12e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b130:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 801b132:	8afb      	ldrh	r3, [r7, #22]
 801b134:	2b00      	cmp	r3, #0
 801b136:	d012      	beq.n	801b15e <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801b138:	2328      	movs	r3, #40	; 0x28
 801b13a:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 801b13c:	8afa      	ldrh	r2, [r7, #22]
 801b13e:	8abb      	ldrh	r3, [r7, #20]
 801b140:	429a      	cmp	r2, r3
 801b142:	d904      	bls.n	801b14e <tcp_eff_send_mss_netif+0x4e>
 801b144:	8afa      	ldrh	r2, [r7, #22]
 801b146:	8abb      	ldrh	r3, [r7, #20]
 801b148:	1ad3      	subs	r3, r2, r3
 801b14a:	b29b      	uxth	r3, r3
 801b14c:	e000      	b.n	801b150 <tcp_eff_send_mss_netif+0x50>
 801b14e:	2300      	movs	r3, #0
 801b150:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 801b152:	8a7a      	ldrh	r2, [r7, #18]
 801b154:	89fb      	ldrh	r3, [r7, #14]
 801b156:	4293      	cmp	r3, r2
 801b158:	bf28      	it	cs
 801b15a:	4613      	movcs	r3, r2
 801b15c:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 801b15e:	89fb      	ldrh	r3, [r7, #14]
}
 801b160:	4618      	mov	r0, r3
 801b162:	3718      	adds	r7, #24
 801b164:	46bd      	mov	sp, r7
 801b166:	bd80      	pop	{r7, pc}
 801b168:	08026dec 	.word	0x08026dec
 801b16c:	080274f8 	.word	0x080274f8
 801b170:	08026e30 	.word	0x08026e30

0801b174 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 801b174:	b580      	push	{r7, lr}
 801b176:	b084      	sub	sp, #16
 801b178:	af00      	add	r7, sp, #0
 801b17a:	6078      	str	r0, [r7, #4]
 801b17c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 801b17e:	683b      	ldr	r3, [r7, #0]
 801b180:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	2b00      	cmp	r3, #0
 801b186:	d119      	bne.n	801b1bc <tcp_netif_ip_addr_changed_pcblist+0x48>
 801b188:	4b10      	ldr	r3, [pc, #64]	; (801b1cc <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801b18a:	f44f 6210 	mov.w	r2, #2304	; 0x900
 801b18e:	4910      	ldr	r1, [pc, #64]	; (801b1d0 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 801b190:	4810      	ldr	r0, [pc, #64]	; (801b1d4 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 801b192:	f009 f87d 	bl	8024290 <iprintf>

  while (pcb != NULL) {
 801b196:	e011      	b.n	801b1bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801b198:	68fb      	ldr	r3, [r7, #12]
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	429a      	cmp	r2, r3
 801b1a2:	d108      	bne.n	801b1b6 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 801b1a4:	68fb      	ldr	r3, [r7, #12]
 801b1a6:	68db      	ldr	r3, [r3, #12]
 801b1a8:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801b1aa:	68f8      	ldr	r0, [r7, #12]
 801b1ac:	f7fe fc38 	bl	8019a20 <tcp_abort>
      pcb = next;
 801b1b0:	68bb      	ldr	r3, [r7, #8]
 801b1b2:	60fb      	str	r3, [r7, #12]
 801b1b4:	e002      	b.n	801b1bc <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801b1b6:	68fb      	ldr	r3, [r7, #12]
 801b1b8:	68db      	ldr	r3, [r3, #12]
 801b1ba:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 801b1bc:	68fb      	ldr	r3, [r7, #12]
 801b1be:	2b00      	cmp	r3, #0
 801b1c0:	d1ea      	bne.n	801b198 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 801b1c2:	bf00      	nop
 801b1c4:	bf00      	nop
 801b1c6:	3710      	adds	r7, #16
 801b1c8:	46bd      	mov	sp, r7
 801b1ca:	bd80      	pop	{r7, pc}
 801b1cc:	08026dec 	.word	0x08026dec
 801b1d0:	08027520 	.word	0x08027520
 801b1d4:	08026e30 	.word	0x08026e30

0801b1d8 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801b1d8:	b580      	push	{r7, lr}
 801b1da:	b084      	sub	sp, #16
 801b1dc:	af00      	add	r7, sp, #0
 801b1de:	6078      	str	r0, [r7, #4]
 801b1e0:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 801b1e2:	687b      	ldr	r3, [r7, #4]
 801b1e4:	2b00      	cmp	r3, #0
 801b1e6:	d02a      	beq.n	801b23e <tcp_netif_ip_addr_changed+0x66>
 801b1e8:	687b      	ldr	r3, [r7, #4]
 801b1ea:	681b      	ldr	r3, [r3, #0]
 801b1ec:	2b00      	cmp	r3, #0
 801b1ee:	d026      	beq.n	801b23e <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 801b1f0:	4b15      	ldr	r3, [pc, #84]	; (801b248 <tcp_netif_ip_addr_changed+0x70>)
 801b1f2:	681b      	ldr	r3, [r3, #0]
 801b1f4:	4619      	mov	r1, r3
 801b1f6:	6878      	ldr	r0, [r7, #4]
 801b1f8:	f7ff ffbc 	bl	801b174 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 801b1fc:	4b13      	ldr	r3, [pc, #76]	; (801b24c <tcp_netif_ip_addr_changed+0x74>)
 801b1fe:	681b      	ldr	r3, [r3, #0]
 801b200:	4619      	mov	r1, r3
 801b202:	6878      	ldr	r0, [r7, #4]
 801b204:	f7ff ffb6 	bl	801b174 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 801b208:	683b      	ldr	r3, [r7, #0]
 801b20a:	2b00      	cmp	r3, #0
 801b20c:	d017      	beq.n	801b23e <tcp_netif_ip_addr_changed+0x66>
 801b20e:	683b      	ldr	r3, [r7, #0]
 801b210:	681b      	ldr	r3, [r3, #0]
 801b212:	2b00      	cmp	r3, #0
 801b214:	d013      	beq.n	801b23e <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b216:	4b0e      	ldr	r3, [pc, #56]	; (801b250 <tcp_netif_ip_addr_changed+0x78>)
 801b218:	681b      	ldr	r3, [r3, #0]
 801b21a:	60fb      	str	r3, [r7, #12]
 801b21c:	e00c      	b.n	801b238 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 801b21e:	68fb      	ldr	r3, [r7, #12]
 801b220:	681a      	ldr	r2, [r3, #0]
 801b222:	687b      	ldr	r3, [r7, #4]
 801b224:	681b      	ldr	r3, [r3, #0]
 801b226:	429a      	cmp	r2, r3
 801b228:	d103      	bne.n	801b232 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801b22a:	683b      	ldr	r3, [r7, #0]
 801b22c:	681a      	ldr	r2, [r3, #0]
 801b22e:	68fb      	ldr	r3, [r7, #12]
 801b230:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b232:	68fb      	ldr	r3, [r7, #12]
 801b234:	68db      	ldr	r3, [r3, #12]
 801b236:	60fb      	str	r3, [r7, #12]
 801b238:	68fb      	ldr	r3, [r7, #12]
 801b23a:	2b00      	cmp	r3, #0
 801b23c:	d1ef      	bne.n	801b21e <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 801b23e:	bf00      	nop
 801b240:	3710      	adds	r7, #16
 801b242:	46bd      	mov	sp, r7
 801b244:	bd80      	pop	{r7, pc}
 801b246:	bf00      	nop
 801b248:	2000bfc8 	.word	0x2000bfc8
 801b24c:	2000bfc0 	.word	0x2000bfc0
 801b250:	2000bfc4 	.word	0x2000bfc4

0801b254 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 801b254:	b580      	push	{r7, lr}
 801b256:	b082      	sub	sp, #8
 801b258:	af00      	add	r7, sp, #0
 801b25a:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b260:	2b00      	cmp	r3, #0
 801b262:	d007      	beq.n	801b274 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 801b264:	687b      	ldr	r3, [r7, #4]
 801b266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801b268:	4618      	mov	r0, r3
 801b26a:	f7ff fb6f 	bl	801a94c <tcp_segs_free>
    pcb->ooseq = NULL;
 801b26e:	687b      	ldr	r3, [r7, #4]
 801b270:	2200      	movs	r2, #0
 801b272:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 801b274:	bf00      	nop
 801b276:	3708      	adds	r7, #8
 801b278:	46bd      	mov	sp, r7
 801b27a:	bd80      	pop	{r7, pc}

0801b27c <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 801b27c:	b590      	push	{r4, r7, lr}
 801b27e:	b08d      	sub	sp, #52	; 0x34
 801b280:	af04      	add	r7, sp, #16
 801b282:	6078      	str	r0, [r7, #4]
 801b284:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801b286:	687b      	ldr	r3, [r7, #4]
 801b288:	2b00      	cmp	r3, #0
 801b28a:	d105      	bne.n	801b298 <tcp_input+0x1c>
 801b28c:	4b9b      	ldr	r3, [pc, #620]	; (801b4fc <tcp_input+0x280>)
 801b28e:	2283      	movs	r2, #131	; 0x83
 801b290:	499b      	ldr	r1, [pc, #620]	; (801b500 <tcp_input+0x284>)
 801b292:	489c      	ldr	r0, [pc, #624]	; (801b504 <tcp_input+0x288>)
 801b294:	f008 fffc 	bl	8024290 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	685b      	ldr	r3, [r3, #4]
 801b29c:	4a9a      	ldr	r2, [pc, #616]	; (801b508 <tcp_input+0x28c>)
 801b29e:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 801b2a0:	687b      	ldr	r3, [r7, #4]
 801b2a2:	895b      	ldrh	r3, [r3, #10]
 801b2a4:	2b13      	cmp	r3, #19
 801b2a6:	f240 83d1 	bls.w	801ba4c <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b2aa:	4b98      	ldr	r3, [pc, #608]	; (801b50c <tcp_input+0x290>)
 801b2ac:	695b      	ldr	r3, [r3, #20]
 801b2ae:	4a97      	ldr	r2, [pc, #604]	; (801b50c <tcp_input+0x290>)
 801b2b0:	6812      	ldr	r2, [r2, #0]
 801b2b2:	4611      	mov	r1, r2
 801b2b4:	4618      	mov	r0, r3
 801b2b6:	f006 fc3d 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 801b2ba:	4603      	mov	r3, r0
 801b2bc:	2b00      	cmp	r3, #0
 801b2be:	f040 83c7 	bne.w	801ba50 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 801b2c2:	4b92      	ldr	r3, [pc, #584]	; (801b50c <tcp_input+0x290>)
 801b2c4:	695b      	ldr	r3, [r3, #20]
 801b2c6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801b2ca:	2be0      	cmp	r3, #224	; 0xe0
 801b2cc:	f000 83c0 	beq.w	801ba50 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 801b2d0:	4b8d      	ldr	r3, [pc, #564]	; (801b508 <tcp_input+0x28c>)
 801b2d2:	681b      	ldr	r3, [r3, #0]
 801b2d4:	899b      	ldrh	r3, [r3, #12]
 801b2d6:	b29b      	uxth	r3, r3
 801b2d8:	4618      	mov	r0, r3
 801b2da:	f7fc f9af 	bl	801763c <lwip_htons>
 801b2de:	4603      	mov	r3, r0
 801b2e0:	0b1b      	lsrs	r3, r3, #12
 801b2e2:	b29b      	uxth	r3, r3
 801b2e4:	b2db      	uxtb	r3, r3
 801b2e6:	009b      	lsls	r3, r3, #2
 801b2e8:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 801b2ea:	7cbb      	ldrb	r3, [r7, #18]
 801b2ec:	2b13      	cmp	r3, #19
 801b2ee:	f240 83b1 	bls.w	801ba54 <tcp_input+0x7d8>
 801b2f2:	7cbb      	ldrb	r3, [r7, #18]
 801b2f4:	b29a      	uxth	r2, r3
 801b2f6:	687b      	ldr	r3, [r7, #4]
 801b2f8:	891b      	ldrh	r3, [r3, #8]
 801b2fa:	429a      	cmp	r2, r3
 801b2fc:	f200 83aa 	bhi.w	801ba54 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 801b300:	7cbb      	ldrb	r3, [r7, #18]
 801b302:	b29b      	uxth	r3, r3
 801b304:	3b14      	subs	r3, #20
 801b306:	b29a      	uxth	r2, r3
 801b308:	4b81      	ldr	r3, [pc, #516]	; (801b510 <tcp_input+0x294>)
 801b30a:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 801b30c:	4b81      	ldr	r3, [pc, #516]	; (801b514 <tcp_input+0x298>)
 801b30e:	2200      	movs	r2, #0
 801b310:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	895a      	ldrh	r2, [r3, #10]
 801b316:	7cbb      	ldrb	r3, [r7, #18]
 801b318:	b29b      	uxth	r3, r3
 801b31a:	429a      	cmp	r2, r3
 801b31c:	d309      	bcc.n	801b332 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 801b31e:	4b7c      	ldr	r3, [pc, #496]	; (801b510 <tcp_input+0x294>)
 801b320:	881a      	ldrh	r2, [r3, #0]
 801b322:	4b7d      	ldr	r3, [pc, #500]	; (801b518 <tcp_input+0x29c>)
 801b324:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 801b326:	7cbb      	ldrb	r3, [r7, #18]
 801b328:	4619      	mov	r1, r3
 801b32a:	6878      	ldr	r0, [r7, #4]
 801b32c:	f7fd fcf2 	bl	8018d14 <pbuf_remove_header>
 801b330:	e04e      	b.n	801b3d0 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 801b332:	687b      	ldr	r3, [r7, #4]
 801b334:	681b      	ldr	r3, [r3, #0]
 801b336:	2b00      	cmp	r3, #0
 801b338:	d105      	bne.n	801b346 <tcp_input+0xca>
 801b33a:	4b70      	ldr	r3, [pc, #448]	; (801b4fc <tcp_input+0x280>)
 801b33c:	22c2      	movs	r2, #194	; 0xc2
 801b33e:	4977      	ldr	r1, [pc, #476]	; (801b51c <tcp_input+0x2a0>)
 801b340:	4870      	ldr	r0, [pc, #448]	; (801b504 <tcp_input+0x288>)
 801b342:	f008 ffa5 	bl	8024290 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801b346:	2114      	movs	r1, #20
 801b348:	6878      	ldr	r0, [r7, #4]
 801b34a:	f7fd fce3 	bl	8018d14 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 801b34e:	687b      	ldr	r3, [r7, #4]
 801b350:	895a      	ldrh	r2, [r3, #10]
 801b352:	4b71      	ldr	r3, [pc, #452]	; (801b518 <tcp_input+0x29c>)
 801b354:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801b356:	4b6e      	ldr	r3, [pc, #440]	; (801b510 <tcp_input+0x294>)
 801b358:	881a      	ldrh	r2, [r3, #0]
 801b35a:	4b6f      	ldr	r3, [pc, #444]	; (801b518 <tcp_input+0x29c>)
 801b35c:	881b      	ldrh	r3, [r3, #0]
 801b35e:	1ad3      	subs	r3, r2, r3
 801b360:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 801b362:	4b6d      	ldr	r3, [pc, #436]	; (801b518 <tcp_input+0x29c>)
 801b364:	881b      	ldrh	r3, [r3, #0]
 801b366:	4619      	mov	r1, r3
 801b368:	6878      	ldr	r0, [r7, #4]
 801b36a:	f7fd fcd3 	bl	8018d14 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 801b36e:	687b      	ldr	r3, [r7, #4]
 801b370:	681b      	ldr	r3, [r3, #0]
 801b372:	895b      	ldrh	r3, [r3, #10]
 801b374:	8a3a      	ldrh	r2, [r7, #16]
 801b376:	429a      	cmp	r2, r3
 801b378:	f200 836e 	bhi.w	801ba58 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 801b37c:	687b      	ldr	r3, [r7, #4]
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	685b      	ldr	r3, [r3, #4]
 801b382:	4a64      	ldr	r2, [pc, #400]	; (801b514 <tcp_input+0x298>)
 801b384:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	681b      	ldr	r3, [r3, #0]
 801b38a:	8a3a      	ldrh	r2, [r7, #16]
 801b38c:	4611      	mov	r1, r2
 801b38e:	4618      	mov	r0, r3
 801b390:	f7fd fcc0 	bl	8018d14 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 801b394:	687b      	ldr	r3, [r7, #4]
 801b396:	891a      	ldrh	r2, [r3, #8]
 801b398:	8a3b      	ldrh	r3, [r7, #16]
 801b39a:	1ad3      	subs	r3, r2, r3
 801b39c:	b29a      	uxth	r2, r3
 801b39e:	687b      	ldr	r3, [r7, #4]
 801b3a0:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	895b      	ldrh	r3, [r3, #10]
 801b3a6:	2b00      	cmp	r3, #0
 801b3a8:	d005      	beq.n	801b3b6 <tcp_input+0x13a>
 801b3aa:	4b54      	ldr	r3, [pc, #336]	; (801b4fc <tcp_input+0x280>)
 801b3ac:	22df      	movs	r2, #223	; 0xdf
 801b3ae:	495c      	ldr	r1, [pc, #368]	; (801b520 <tcp_input+0x2a4>)
 801b3b0:	4854      	ldr	r0, [pc, #336]	; (801b504 <tcp_input+0x288>)
 801b3b2:	f008 ff6d 	bl	8024290 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801b3b6:	687b      	ldr	r3, [r7, #4]
 801b3b8:	891a      	ldrh	r2, [r3, #8]
 801b3ba:	687b      	ldr	r3, [r7, #4]
 801b3bc:	681b      	ldr	r3, [r3, #0]
 801b3be:	891b      	ldrh	r3, [r3, #8]
 801b3c0:	429a      	cmp	r2, r3
 801b3c2:	d005      	beq.n	801b3d0 <tcp_input+0x154>
 801b3c4:	4b4d      	ldr	r3, [pc, #308]	; (801b4fc <tcp_input+0x280>)
 801b3c6:	22e0      	movs	r2, #224	; 0xe0
 801b3c8:	4956      	ldr	r1, [pc, #344]	; (801b524 <tcp_input+0x2a8>)
 801b3ca:	484e      	ldr	r0, [pc, #312]	; (801b504 <tcp_input+0x288>)
 801b3cc:	f008 ff60 	bl	8024290 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 801b3d0:	4b4d      	ldr	r3, [pc, #308]	; (801b508 <tcp_input+0x28c>)
 801b3d2:	681b      	ldr	r3, [r3, #0]
 801b3d4:	881b      	ldrh	r3, [r3, #0]
 801b3d6:	b29b      	uxth	r3, r3
 801b3d8:	4a4b      	ldr	r2, [pc, #300]	; (801b508 <tcp_input+0x28c>)
 801b3da:	6814      	ldr	r4, [r2, #0]
 801b3dc:	4618      	mov	r0, r3
 801b3de:	f7fc f92d 	bl	801763c <lwip_htons>
 801b3e2:	4603      	mov	r3, r0
 801b3e4:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 801b3e6:	4b48      	ldr	r3, [pc, #288]	; (801b508 <tcp_input+0x28c>)
 801b3e8:	681b      	ldr	r3, [r3, #0]
 801b3ea:	885b      	ldrh	r3, [r3, #2]
 801b3ec:	b29b      	uxth	r3, r3
 801b3ee:	4a46      	ldr	r2, [pc, #280]	; (801b508 <tcp_input+0x28c>)
 801b3f0:	6814      	ldr	r4, [r2, #0]
 801b3f2:	4618      	mov	r0, r3
 801b3f4:	f7fc f922 	bl	801763c <lwip_htons>
 801b3f8:	4603      	mov	r3, r0
 801b3fa:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 801b3fc:	4b42      	ldr	r3, [pc, #264]	; (801b508 <tcp_input+0x28c>)
 801b3fe:	681b      	ldr	r3, [r3, #0]
 801b400:	685b      	ldr	r3, [r3, #4]
 801b402:	4a41      	ldr	r2, [pc, #260]	; (801b508 <tcp_input+0x28c>)
 801b404:	6814      	ldr	r4, [r2, #0]
 801b406:	4618      	mov	r0, r3
 801b408:	f7fc f92d 	bl	8017666 <lwip_htonl>
 801b40c:	4603      	mov	r3, r0
 801b40e:	6063      	str	r3, [r4, #4]
 801b410:	6863      	ldr	r3, [r4, #4]
 801b412:	4a45      	ldr	r2, [pc, #276]	; (801b528 <tcp_input+0x2ac>)
 801b414:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 801b416:	4b3c      	ldr	r3, [pc, #240]	; (801b508 <tcp_input+0x28c>)
 801b418:	681b      	ldr	r3, [r3, #0]
 801b41a:	689b      	ldr	r3, [r3, #8]
 801b41c:	4a3a      	ldr	r2, [pc, #232]	; (801b508 <tcp_input+0x28c>)
 801b41e:	6814      	ldr	r4, [r2, #0]
 801b420:	4618      	mov	r0, r3
 801b422:	f7fc f920 	bl	8017666 <lwip_htonl>
 801b426:	4603      	mov	r3, r0
 801b428:	60a3      	str	r3, [r4, #8]
 801b42a:	68a3      	ldr	r3, [r4, #8]
 801b42c:	4a3f      	ldr	r2, [pc, #252]	; (801b52c <tcp_input+0x2b0>)
 801b42e:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 801b430:	4b35      	ldr	r3, [pc, #212]	; (801b508 <tcp_input+0x28c>)
 801b432:	681b      	ldr	r3, [r3, #0]
 801b434:	89db      	ldrh	r3, [r3, #14]
 801b436:	b29b      	uxth	r3, r3
 801b438:	4a33      	ldr	r2, [pc, #204]	; (801b508 <tcp_input+0x28c>)
 801b43a:	6814      	ldr	r4, [r2, #0]
 801b43c:	4618      	mov	r0, r3
 801b43e:	f7fc f8fd 	bl	801763c <lwip_htons>
 801b442:	4603      	mov	r3, r0
 801b444:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801b446:	4b30      	ldr	r3, [pc, #192]	; (801b508 <tcp_input+0x28c>)
 801b448:	681b      	ldr	r3, [r3, #0]
 801b44a:	899b      	ldrh	r3, [r3, #12]
 801b44c:	b29b      	uxth	r3, r3
 801b44e:	4618      	mov	r0, r3
 801b450:	f7fc f8f4 	bl	801763c <lwip_htons>
 801b454:	4603      	mov	r3, r0
 801b456:	b2db      	uxtb	r3, r3
 801b458:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801b45c:	b2da      	uxtb	r2, r3
 801b45e:	4b34      	ldr	r3, [pc, #208]	; (801b530 <tcp_input+0x2b4>)
 801b460:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	891a      	ldrh	r2, [r3, #8]
 801b466:	4b33      	ldr	r3, [pc, #204]	; (801b534 <tcp_input+0x2b8>)
 801b468:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801b46a:	4b31      	ldr	r3, [pc, #196]	; (801b530 <tcp_input+0x2b4>)
 801b46c:	781b      	ldrb	r3, [r3, #0]
 801b46e:	f003 0303 	and.w	r3, r3, #3
 801b472:	2b00      	cmp	r3, #0
 801b474:	d00c      	beq.n	801b490 <tcp_input+0x214>
    tcplen++;
 801b476:	4b2f      	ldr	r3, [pc, #188]	; (801b534 <tcp_input+0x2b8>)
 801b478:	881b      	ldrh	r3, [r3, #0]
 801b47a:	3301      	adds	r3, #1
 801b47c:	b29a      	uxth	r2, r3
 801b47e:	4b2d      	ldr	r3, [pc, #180]	; (801b534 <tcp_input+0x2b8>)
 801b480:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 801b482:	687b      	ldr	r3, [r7, #4]
 801b484:	891a      	ldrh	r2, [r3, #8]
 801b486:	4b2b      	ldr	r3, [pc, #172]	; (801b534 <tcp_input+0x2b8>)
 801b488:	881b      	ldrh	r3, [r3, #0]
 801b48a:	429a      	cmp	r2, r3
 801b48c:	f200 82e6 	bhi.w	801ba5c <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 801b490:	2300      	movs	r3, #0
 801b492:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b494:	4b28      	ldr	r3, [pc, #160]	; (801b538 <tcp_input+0x2bc>)
 801b496:	681b      	ldr	r3, [r3, #0]
 801b498:	61fb      	str	r3, [r7, #28]
 801b49a:	e09d      	b.n	801b5d8 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 801b49c:	69fb      	ldr	r3, [r7, #28]
 801b49e:	7d1b      	ldrb	r3, [r3, #20]
 801b4a0:	2b00      	cmp	r3, #0
 801b4a2:	d105      	bne.n	801b4b0 <tcp_input+0x234>
 801b4a4:	4b15      	ldr	r3, [pc, #84]	; (801b4fc <tcp_input+0x280>)
 801b4a6:	22fb      	movs	r2, #251	; 0xfb
 801b4a8:	4924      	ldr	r1, [pc, #144]	; (801b53c <tcp_input+0x2c0>)
 801b4aa:	4816      	ldr	r0, [pc, #88]	; (801b504 <tcp_input+0x288>)
 801b4ac:	f008 fef0 	bl	8024290 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 801b4b0:	69fb      	ldr	r3, [r7, #28]
 801b4b2:	7d1b      	ldrb	r3, [r3, #20]
 801b4b4:	2b0a      	cmp	r3, #10
 801b4b6:	d105      	bne.n	801b4c4 <tcp_input+0x248>
 801b4b8:	4b10      	ldr	r3, [pc, #64]	; (801b4fc <tcp_input+0x280>)
 801b4ba:	22fc      	movs	r2, #252	; 0xfc
 801b4bc:	4920      	ldr	r1, [pc, #128]	; (801b540 <tcp_input+0x2c4>)
 801b4be:	4811      	ldr	r0, [pc, #68]	; (801b504 <tcp_input+0x288>)
 801b4c0:	f008 fee6 	bl	8024290 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 801b4c4:	69fb      	ldr	r3, [r7, #28]
 801b4c6:	7d1b      	ldrb	r3, [r3, #20]
 801b4c8:	2b01      	cmp	r3, #1
 801b4ca:	d105      	bne.n	801b4d8 <tcp_input+0x25c>
 801b4cc:	4b0b      	ldr	r3, [pc, #44]	; (801b4fc <tcp_input+0x280>)
 801b4ce:	22fd      	movs	r2, #253	; 0xfd
 801b4d0:	491c      	ldr	r1, [pc, #112]	; (801b544 <tcp_input+0x2c8>)
 801b4d2:	480c      	ldr	r0, [pc, #48]	; (801b504 <tcp_input+0x288>)
 801b4d4:	f008 fedc 	bl	8024290 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b4d8:	69fb      	ldr	r3, [r7, #28]
 801b4da:	7a1b      	ldrb	r3, [r3, #8]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d033      	beq.n	801b548 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b4e0:	69fb      	ldr	r3, [r7, #28]
 801b4e2:	7a1a      	ldrb	r2, [r3, #8]
 801b4e4:	4b09      	ldr	r3, [pc, #36]	; (801b50c <tcp_input+0x290>)
 801b4e6:	685b      	ldr	r3, [r3, #4]
 801b4e8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b4ec:	3301      	adds	r3, #1
 801b4ee:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d029      	beq.n	801b548 <tcp_input+0x2cc>
      prev = pcb;
 801b4f4:	69fb      	ldr	r3, [r7, #28]
 801b4f6:	61bb      	str	r3, [r7, #24]
      continue;
 801b4f8:	e06b      	b.n	801b5d2 <tcp_input+0x356>
 801b4fa:	bf00      	nop
 801b4fc:	08027554 	.word	0x08027554
 801b500:	08027588 	.word	0x08027588
 801b504:	080275a0 	.word	0x080275a0
 801b508:	2000bfe4 	.word	0x2000bfe4
 801b50c:	200066a8 	.word	0x200066a8
 801b510:	2000bfe8 	.word	0x2000bfe8
 801b514:	2000bfec 	.word	0x2000bfec
 801b518:	2000bfea 	.word	0x2000bfea
 801b51c:	080275c8 	.word	0x080275c8
 801b520:	080275d8 	.word	0x080275d8
 801b524:	080275e4 	.word	0x080275e4
 801b528:	2000bff4 	.word	0x2000bff4
 801b52c:	2000bff8 	.word	0x2000bff8
 801b530:	2000c000 	.word	0x2000c000
 801b534:	2000bffe 	.word	0x2000bffe
 801b538:	2000bfc8 	.word	0x2000bfc8
 801b53c:	08027604 	.word	0x08027604
 801b540:	0802762c 	.word	0x0802762c
 801b544:	08027658 	.word	0x08027658
    }

    if (pcb->remote_port == tcphdr->src &&
 801b548:	69fb      	ldr	r3, [r7, #28]
 801b54a:	8b1a      	ldrh	r2, [r3, #24]
 801b54c:	4b72      	ldr	r3, [pc, #456]	; (801b718 <tcp_input+0x49c>)
 801b54e:	681b      	ldr	r3, [r3, #0]
 801b550:	881b      	ldrh	r3, [r3, #0]
 801b552:	b29b      	uxth	r3, r3
 801b554:	429a      	cmp	r2, r3
 801b556:	d13a      	bne.n	801b5ce <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801b558:	69fb      	ldr	r3, [r7, #28]
 801b55a:	8ada      	ldrh	r2, [r3, #22]
 801b55c:	4b6e      	ldr	r3, [pc, #440]	; (801b718 <tcp_input+0x49c>)
 801b55e:	681b      	ldr	r3, [r3, #0]
 801b560:	885b      	ldrh	r3, [r3, #2]
 801b562:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 801b564:	429a      	cmp	r2, r3
 801b566:	d132      	bne.n	801b5ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b568:	69fb      	ldr	r3, [r7, #28]
 801b56a:	685a      	ldr	r2, [r3, #4]
 801b56c:	4b6b      	ldr	r3, [pc, #428]	; (801b71c <tcp_input+0x4a0>)
 801b56e:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 801b570:	429a      	cmp	r2, r3
 801b572:	d12c      	bne.n	801b5ce <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b574:	69fb      	ldr	r3, [r7, #28]
 801b576:	681a      	ldr	r2, [r3, #0]
 801b578:	4b68      	ldr	r3, [pc, #416]	; (801b71c <tcp_input+0x4a0>)
 801b57a:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b57c:	429a      	cmp	r2, r3
 801b57e:	d126      	bne.n	801b5ce <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 801b580:	69fb      	ldr	r3, [r7, #28]
 801b582:	68db      	ldr	r3, [r3, #12]
 801b584:	69fa      	ldr	r2, [r7, #28]
 801b586:	429a      	cmp	r2, r3
 801b588:	d106      	bne.n	801b598 <tcp_input+0x31c>
 801b58a:	4b65      	ldr	r3, [pc, #404]	; (801b720 <tcp_input+0x4a4>)
 801b58c:	f240 120d 	movw	r2, #269	; 0x10d
 801b590:	4964      	ldr	r1, [pc, #400]	; (801b724 <tcp_input+0x4a8>)
 801b592:	4865      	ldr	r0, [pc, #404]	; (801b728 <tcp_input+0x4ac>)
 801b594:	f008 fe7c 	bl	8024290 <iprintf>
      if (prev != NULL) {
 801b598:	69bb      	ldr	r3, [r7, #24]
 801b59a:	2b00      	cmp	r3, #0
 801b59c:	d00a      	beq.n	801b5b4 <tcp_input+0x338>
        prev->next = pcb->next;
 801b59e:	69fb      	ldr	r3, [r7, #28]
 801b5a0:	68da      	ldr	r2, [r3, #12]
 801b5a2:	69bb      	ldr	r3, [r7, #24]
 801b5a4:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801b5a6:	4b61      	ldr	r3, [pc, #388]	; (801b72c <tcp_input+0x4b0>)
 801b5a8:	681a      	ldr	r2, [r3, #0]
 801b5aa:	69fb      	ldr	r3, [r7, #28]
 801b5ac:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 801b5ae:	4a5f      	ldr	r2, [pc, #380]	; (801b72c <tcp_input+0x4b0>)
 801b5b0:	69fb      	ldr	r3, [r7, #28]
 801b5b2:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 801b5b4:	69fb      	ldr	r3, [r7, #28]
 801b5b6:	68db      	ldr	r3, [r3, #12]
 801b5b8:	69fa      	ldr	r2, [r7, #28]
 801b5ba:	429a      	cmp	r2, r3
 801b5bc:	d111      	bne.n	801b5e2 <tcp_input+0x366>
 801b5be:	4b58      	ldr	r3, [pc, #352]	; (801b720 <tcp_input+0x4a4>)
 801b5c0:	f240 1215 	movw	r2, #277	; 0x115
 801b5c4:	495a      	ldr	r1, [pc, #360]	; (801b730 <tcp_input+0x4b4>)
 801b5c6:	4858      	ldr	r0, [pc, #352]	; (801b728 <tcp_input+0x4ac>)
 801b5c8:	f008 fe62 	bl	8024290 <iprintf>
      break;
 801b5cc:	e009      	b.n	801b5e2 <tcp_input+0x366>
    }
    prev = pcb;
 801b5ce:	69fb      	ldr	r3, [r7, #28]
 801b5d0:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801b5d2:	69fb      	ldr	r3, [r7, #28]
 801b5d4:	68db      	ldr	r3, [r3, #12]
 801b5d6:	61fb      	str	r3, [r7, #28]
 801b5d8:	69fb      	ldr	r3, [r7, #28]
 801b5da:	2b00      	cmp	r3, #0
 801b5dc:	f47f af5e 	bne.w	801b49c <tcp_input+0x220>
 801b5e0:	e000      	b.n	801b5e4 <tcp_input+0x368>
      break;
 801b5e2:	bf00      	nop
  }

  if (pcb == NULL) {
 801b5e4:	69fb      	ldr	r3, [r7, #28]
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	f040 80aa 	bne.w	801b740 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b5ec:	4b51      	ldr	r3, [pc, #324]	; (801b734 <tcp_input+0x4b8>)
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	61fb      	str	r3, [r7, #28]
 801b5f2:	e03f      	b.n	801b674 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 801b5f4:	69fb      	ldr	r3, [r7, #28]
 801b5f6:	7d1b      	ldrb	r3, [r3, #20]
 801b5f8:	2b0a      	cmp	r3, #10
 801b5fa:	d006      	beq.n	801b60a <tcp_input+0x38e>
 801b5fc:	4b48      	ldr	r3, [pc, #288]	; (801b720 <tcp_input+0x4a4>)
 801b5fe:	f240 121f 	movw	r2, #287	; 0x11f
 801b602:	494d      	ldr	r1, [pc, #308]	; (801b738 <tcp_input+0x4bc>)
 801b604:	4848      	ldr	r0, [pc, #288]	; (801b728 <tcp_input+0x4ac>)
 801b606:	f008 fe43 	bl	8024290 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b60a:	69fb      	ldr	r3, [r7, #28]
 801b60c:	7a1b      	ldrb	r3, [r3, #8]
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d009      	beq.n	801b626 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b612:	69fb      	ldr	r3, [r7, #28]
 801b614:	7a1a      	ldrb	r2, [r3, #8]
 801b616:	4b41      	ldr	r3, [pc, #260]	; (801b71c <tcp_input+0x4a0>)
 801b618:	685b      	ldr	r3, [r3, #4]
 801b61a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b61e:	3301      	adds	r3, #1
 801b620:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801b622:	429a      	cmp	r2, r3
 801b624:	d122      	bne.n	801b66c <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 801b626:	69fb      	ldr	r3, [r7, #28]
 801b628:	8b1a      	ldrh	r2, [r3, #24]
 801b62a:	4b3b      	ldr	r3, [pc, #236]	; (801b718 <tcp_input+0x49c>)
 801b62c:	681b      	ldr	r3, [r3, #0]
 801b62e:	881b      	ldrh	r3, [r3, #0]
 801b630:	b29b      	uxth	r3, r3
 801b632:	429a      	cmp	r2, r3
 801b634:	d11b      	bne.n	801b66e <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801b636:	69fb      	ldr	r3, [r7, #28]
 801b638:	8ada      	ldrh	r2, [r3, #22]
 801b63a:	4b37      	ldr	r3, [pc, #220]	; (801b718 <tcp_input+0x49c>)
 801b63c:	681b      	ldr	r3, [r3, #0]
 801b63e:	885b      	ldrh	r3, [r3, #2]
 801b640:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 801b642:	429a      	cmp	r2, r3
 801b644:	d113      	bne.n	801b66e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b646:	69fb      	ldr	r3, [r7, #28]
 801b648:	685a      	ldr	r2, [r3, #4]
 801b64a:	4b34      	ldr	r3, [pc, #208]	; (801b71c <tcp_input+0x4a0>)
 801b64c:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 801b64e:	429a      	cmp	r2, r3
 801b650:	d10d      	bne.n	801b66e <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801b652:	69fb      	ldr	r3, [r7, #28]
 801b654:	681a      	ldr	r2, [r3, #0]
 801b656:	4b31      	ldr	r3, [pc, #196]	; (801b71c <tcp_input+0x4a0>)
 801b658:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801b65a:	429a      	cmp	r2, r3
 801b65c:	d107      	bne.n	801b66e <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 801b65e:	69f8      	ldr	r0, [r7, #28]
 801b660:	f000 fb56 	bl	801bd10 <tcp_timewait_input>
        }
        pbuf_free(p);
 801b664:	6878      	ldr	r0, [r7, #4]
 801b666:	f7fd fbdb 	bl	8018e20 <pbuf_free>
        return;
 801b66a:	e1fd      	b.n	801ba68 <tcp_input+0x7ec>
        continue;
 801b66c:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801b66e:	69fb      	ldr	r3, [r7, #28]
 801b670:	68db      	ldr	r3, [r3, #12]
 801b672:	61fb      	str	r3, [r7, #28]
 801b674:	69fb      	ldr	r3, [r7, #28]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d1bc      	bne.n	801b5f4 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801b67a:	2300      	movs	r3, #0
 801b67c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b67e:	4b2f      	ldr	r3, [pc, #188]	; (801b73c <tcp_input+0x4c0>)
 801b680:	681b      	ldr	r3, [r3, #0]
 801b682:	617b      	str	r3, [r7, #20]
 801b684:	e02a      	b.n	801b6dc <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b686:	697b      	ldr	r3, [r7, #20]
 801b688:	7a1b      	ldrb	r3, [r3, #8]
 801b68a:	2b00      	cmp	r3, #0
 801b68c:	d00c      	beq.n	801b6a8 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801b68e:	697b      	ldr	r3, [r7, #20]
 801b690:	7a1a      	ldrb	r2, [r3, #8]
 801b692:	4b22      	ldr	r3, [pc, #136]	; (801b71c <tcp_input+0x4a0>)
 801b694:	685b      	ldr	r3, [r3, #4]
 801b696:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801b69a:	3301      	adds	r3, #1
 801b69c:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801b69e:	429a      	cmp	r2, r3
 801b6a0:	d002      	beq.n	801b6a8 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 801b6a2:	697b      	ldr	r3, [r7, #20]
 801b6a4:	61bb      	str	r3, [r7, #24]
        continue;
 801b6a6:	e016      	b.n	801b6d6 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801b6a8:	697b      	ldr	r3, [r7, #20]
 801b6aa:	8ada      	ldrh	r2, [r3, #22]
 801b6ac:	4b1a      	ldr	r3, [pc, #104]	; (801b718 <tcp_input+0x49c>)
 801b6ae:	681b      	ldr	r3, [r3, #0]
 801b6b0:	885b      	ldrh	r3, [r3, #2]
 801b6b2:	b29b      	uxth	r3, r3
 801b6b4:	429a      	cmp	r2, r3
 801b6b6:	d10c      	bne.n	801b6d2 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801b6b8:	697b      	ldr	r3, [r7, #20]
 801b6ba:	681a      	ldr	r2, [r3, #0]
 801b6bc:	4b17      	ldr	r3, [pc, #92]	; (801b71c <tcp_input+0x4a0>)
 801b6be:	695b      	ldr	r3, [r3, #20]
 801b6c0:	429a      	cmp	r2, r3
 801b6c2:	d00f      	beq.n	801b6e4 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 801b6c4:	697b      	ldr	r3, [r7, #20]
 801b6c6:	2b00      	cmp	r3, #0
 801b6c8:	d00d      	beq.n	801b6e6 <tcp_input+0x46a>
 801b6ca:	697b      	ldr	r3, [r7, #20]
 801b6cc:	681b      	ldr	r3, [r3, #0]
 801b6ce:	2b00      	cmp	r3, #0
 801b6d0:	d009      	beq.n	801b6e6 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 801b6d2:	697b      	ldr	r3, [r7, #20]
 801b6d4:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 801b6d6:	697b      	ldr	r3, [r7, #20]
 801b6d8:	68db      	ldr	r3, [r3, #12]
 801b6da:	617b      	str	r3, [r7, #20]
 801b6dc:	697b      	ldr	r3, [r7, #20]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	d1d1      	bne.n	801b686 <tcp_input+0x40a>
 801b6e2:	e000      	b.n	801b6e6 <tcp_input+0x46a>
            break;
 801b6e4:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 801b6e6:	697b      	ldr	r3, [r7, #20]
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d029      	beq.n	801b740 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 801b6ec:	69bb      	ldr	r3, [r7, #24]
 801b6ee:	2b00      	cmp	r3, #0
 801b6f0:	d00a      	beq.n	801b708 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 801b6f2:	697b      	ldr	r3, [r7, #20]
 801b6f4:	68da      	ldr	r2, [r3, #12]
 801b6f6:	69bb      	ldr	r3, [r7, #24]
 801b6f8:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 801b6fa:	4b10      	ldr	r3, [pc, #64]	; (801b73c <tcp_input+0x4c0>)
 801b6fc:	681a      	ldr	r2, [r3, #0]
 801b6fe:	697b      	ldr	r3, [r7, #20]
 801b700:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 801b702:	4a0e      	ldr	r2, [pc, #56]	; (801b73c <tcp_input+0x4c0>)
 801b704:	697b      	ldr	r3, [r7, #20]
 801b706:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 801b708:	6978      	ldr	r0, [r7, #20]
 801b70a:	f000 fa03 	bl	801bb14 <tcp_listen_input>
      }
      pbuf_free(p);
 801b70e:	6878      	ldr	r0, [r7, #4]
 801b710:	f7fd fb86 	bl	8018e20 <pbuf_free>
      return;
 801b714:	e1a8      	b.n	801ba68 <tcp_input+0x7ec>
 801b716:	bf00      	nop
 801b718:	2000bfe4 	.word	0x2000bfe4
 801b71c:	200066a8 	.word	0x200066a8
 801b720:	08027554 	.word	0x08027554
 801b724:	08027680 	.word	0x08027680
 801b728:	080275a0 	.word	0x080275a0
 801b72c:	2000bfc8 	.word	0x2000bfc8
 801b730:	080276ac 	.word	0x080276ac
 801b734:	2000bfcc 	.word	0x2000bfcc
 801b738:	080276d8 	.word	0x080276d8
 801b73c:	2000bfc4 	.word	0x2000bfc4
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 801b740:	69fb      	ldr	r3, [r7, #28]
 801b742:	2b00      	cmp	r3, #0
 801b744:	f000 8158 	beq.w	801b9f8 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801b748:	4b95      	ldr	r3, [pc, #596]	; (801b9a0 <tcp_input+0x724>)
 801b74a:	2200      	movs	r2, #0
 801b74c:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 801b74e:	687b      	ldr	r3, [r7, #4]
 801b750:	891a      	ldrh	r2, [r3, #8]
 801b752:	4b93      	ldr	r3, [pc, #588]	; (801b9a0 <tcp_input+0x724>)
 801b754:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801b756:	4a92      	ldr	r2, [pc, #584]	; (801b9a0 <tcp_input+0x724>)
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 801b75c:	4b91      	ldr	r3, [pc, #580]	; (801b9a4 <tcp_input+0x728>)
 801b75e:	681b      	ldr	r3, [r3, #0]
 801b760:	4a8f      	ldr	r2, [pc, #572]	; (801b9a0 <tcp_input+0x724>)
 801b762:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 801b764:	4b90      	ldr	r3, [pc, #576]	; (801b9a8 <tcp_input+0x72c>)
 801b766:	2200      	movs	r2, #0
 801b768:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801b76a:	4b90      	ldr	r3, [pc, #576]	; (801b9ac <tcp_input+0x730>)
 801b76c:	2200      	movs	r2, #0
 801b76e:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 801b770:	4b8f      	ldr	r3, [pc, #572]	; (801b9b0 <tcp_input+0x734>)
 801b772:	2200      	movs	r2, #0
 801b774:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801b776:	4b8f      	ldr	r3, [pc, #572]	; (801b9b4 <tcp_input+0x738>)
 801b778:	781b      	ldrb	r3, [r3, #0]
 801b77a:	f003 0308 	and.w	r3, r3, #8
 801b77e:	2b00      	cmp	r3, #0
 801b780:	d006      	beq.n	801b790 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 801b782:	687b      	ldr	r3, [r7, #4]
 801b784:	7b5b      	ldrb	r3, [r3, #13]
 801b786:	f043 0301 	orr.w	r3, r3, #1
 801b78a:	b2da      	uxtb	r2, r3
 801b78c:	687b      	ldr	r3, [r7, #4]
 801b78e:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 801b790:	69fb      	ldr	r3, [r7, #28]
 801b792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b794:	2b00      	cmp	r3, #0
 801b796:	d017      	beq.n	801b7c8 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b798:	69f8      	ldr	r0, [r7, #28]
 801b79a:	f7ff f85b 	bl	801a854 <tcp_process_refused_data>
 801b79e:	4603      	mov	r3, r0
 801b7a0:	f113 0f0d 	cmn.w	r3, #13
 801b7a4:	d007      	beq.n	801b7b6 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b7a6:	69fb      	ldr	r3, [r7, #28]
 801b7a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d00c      	beq.n	801b7c8 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801b7ae:	4b82      	ldr	r3, [pc, #520]	; (801b9b8 <tcp_input+0x73c>)
 801b7b0:	881b      	ldrh	r3, [r3, #0]
 801b7b2:	2b00      	cmp	r3, #0
 801b7b4:	d008      	beq.n	801b7c8 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801b7b6:	69fb      	ldr	r3, [r7, #28]
 801b7b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801b7ba:	2b00      	cmp	r3, #0
 801b7bc:	f040 80e3 	bne.w	801b986 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 801b7c0:	69f8      	ldr	r0, [r7, #28]
 801b7c2:	f003 fe05 	bl	801f3d0 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801b7c6:	e0de      	b.n	801b986 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801b7c8:	4a7c      	ldr	r2, [pc, #496]	; (801b9bc <tcp_input+0x740>)
 801b7ca:	69fb      	ldr	r3, [r7, #28]
 801b7cc:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 801b7ce:	69f8      	ldr	r0, [r7, #28]
 801b7d0:	f000 fb18 	bl	801be04 <tcp_process>
 801b7d4:	4603      	mov	r3, r0
 801b7d6:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 801b7d8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b7dc:	f113 0f0d 	cmn.w	r3, #13
 801b7e0:	f000 80d3 	beq.w	801b98a <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 801b7e4:	4b71      	ldr	r3, [pc, #452]	; (801b9ac <tcp_input+0x730>)
 801b7e6:	781b      	ldrb	r3, [r3, #0]
 801b7e8:	f003 0308 	and.w	r3, r3, #8
 801b7ec:	2b00      	cmp	r3, #0
 801b7ee:	d015      	beq.n	801b81c <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 801b7f0:	69fb      	ldr	r3, [r7, #28]
 801b7f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b7f6:	2b00      	cmp	r3, #0
 801b7f8:	d008      	beq.n	801b80c <tcp_input+0x590>
 801b7fa:	69fb      	ldr	r3, [r7, #28]
 801b7fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801b800:	69fa      	ldr	r2, [r7, #28]
 801b802:	6912      	ldr	r2, [r2, #16]
 801b804:	f06f 010d 	mvn.w	r1, #13
 801b808:	4610      	mov	r0, r2
 801b80a:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801b80c:	69f9      	ldr	r1, [r7, #28]
 801b80e:	486c      	ldr	r0, [pc, #432]	; (801b9c0 <tcp_input+0x744>)
 801b810:	f7ff fbbc 	bl	801af8c <tcp_pcb_remove>
        tcp_free(pcb);
 801b814:	69f8      	ldr	r0, [r7, #28]
 801b816:	f7fd fdbf 	bl	8019398 <tcp_free>
 801b81a:	e0da      	b.n	801b9d2 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 801b81c:	2300      	movs	r3, #0
 801b81e:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 801b820:	4b63      	ldr	r3, [pc, #396]	; (801b9b0 <tcp_input+0x734>)
 801b822:	881b      	ldrh	r3, [r3, #0]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d01d      	beq.n	801b864 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 801b828:	4b61      	ldr	r3, [pc, #388]	; (801b9b0 <tcp_input+0x734>)
 801b82a:	881b      	ldrh	r3, [r3, #0]
 801b82c:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 801b82e:	69fb      	ldr	r3, [r7, #28]
 801b830:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b834:	2b00      	cmp	r3, #0
 801b836:	d00a      	beq.n	801b84e <tcp_input+0x5d2>
 801b838:	69fb      	ldr	r3, [r7, #28]
 801b83a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 801b83e:	69fa      	ldr	r2, [r7, #28]
 801b840:	6910      	ldr	r0, [r2, #16]
 801b842:	89fa      	ldrh	r2, [r7, #14]
 801b844:	69f9      	ldr	r1, [r7, #28]
 801b846:	4798      	blx	r3
 801b848:	4603      	mov	r3, r0
 801b84a:	74fb      	strb	r3, [r7, #19]
 801b84c:	e001      	b.n	801b852 <tcp_input+0x5d6>
 801b84e:	2300      	movs	r3, #0
 801b850:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b852:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b856:	f113 0f0d 	cmn.w	r3, #13
 801b85a:	f000 8098 	beq.w	801b98e <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 801b85e:	4b54      	ldr	r3, [pc, #336]	; (801b9b0 <tcp_input+0x734>)
 801b860:	2200      	movs	r2, #0
 801b862:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 801b864:	69f8      	ldr	r0, [r7, #28]
 801b866:	f000 f915 	bl	801ba94 <tcp_input_delayed_close>
 801b86a:	4603      	mov	r3, r0
 801b86c:	2b00      	cmp	r3, #0
 801b86e:	f040 8090 	bne.w	801b992 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 801b872:	4b4d      	ldr	r3, [pc, #308]	; (801b9a8 <tcp_input+0x72c>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d041      	beq.n	801b8fe <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801b87a:	69fb      	ldr	r3, [r7, #28]
 801b87c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b87e:	2b00      	cmp	r3, #0
 801b880:	d006      	beq.n	801b890 <tcp_input+0x614>
 801b882:	4b50      	ldr	r3, [pc, #320]	; (801b9c4 <tcp_input+0x748>)
 801b884:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801b888:	494f      	ldr	r1, [pc, #316]	; (801b9c8 <tcp_input+0x74c>)
 801b88a:	4850      	ldr	r0, [pc, #320]	; (801b9cc <tcp_input+0x750>)
 801b88c:	f008 fd00 	bl	8024290 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 801b890:	69fb      	ldr	r3, [r7, #28]
 801b892:	8b5b      	ldrh	r3, [r3, #26]
 801b894:	f003 0310 	and.w	r3, r3, #16
 801b898:	2b00      	cmp	r3, #0
 801b89a:	d008      	beq.n	801b8ae <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 801b89c:	4b42      	ldr	r3, [pc, #264]	; (801b9a8 <tcp_input+0x72c>)
 801b89e:	681b      	ldr	r3, [r3, #0]
 801b8a0:	4618      	mov	r0, r3
 801b8a2:	f7fd fabd 	bl	8018e20 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801b8a6:	69f8      	ldr	r0, [r7, #28]
 801b8a8:	f7fe f8ba 	bl	8019a20 <tcp_abort>
            goto aborted;
 801b8ac:	e091      	b.n	801b9d2 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 801b8ae:	69fb      	ldr	r3, [r7, #28]
 801b8b0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b8b4:	2b00      	cmp	r3, #0
 801b8b6:	d00c      	beq.n	801b8d2 <tcp_input+0x656>
 801b8b8:	69fb      	ldr	r3, [r7, #28]
 801b8ba:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b8be:	69fb      	ldr	r3, [r7, #28]
 801b8c0:	6918      	ldr	r0, [r3, #16]
 801b8c2:	4b39      	ldr	r3, [pc, #228]	; (801b9a8 <tcp_input+0x72c>)
 801b8c4:	681a      	ldr	r2, [r3, #0]
 801b8c6:	2300      	movs	r3, #0
 801b8c8:	69f9      	ldr	r1, [r7, #28]
 801b8ca:	47a0      	blx	r4
 801b8cc:	4603      	mov	r3, r0
 801b8ce:	74fb      	strb	r3, [r7, #19]
 801b8d0:	e008      	b.n	801b8e4 <tcp_input+0x668>
 801b8d2:	4b35      	ldr	r3, [pc, #212]	; (801b9a8 <tcp_input+0x72c>)
 801b8d4:	681a      	ldr	r2, [r3, #0]
 801b8d6:	2300      	movs	r3, #0
 801b8d8:	69f9      	ldr	r1, [r7, #28]
 801b8da:	2000      	movs	r0, #0
 801b8dc:	f7ff f890 	bl	801aa00 <tcp_recv_null>
 801b8e0:	4603      	mov	r3, r0
 801b8e2:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 801b8e4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b8e8:	f113 0f0d 	cmn.w	r3, #13
 801b8ec:	d053      	beq.n	801b996 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 801b8ee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b8f2:	2b00      	cmp	r3, #0
 801b8f4:	d003      	beq.n	801b8fe <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 801b8f6:	4b2c      	ldr	r3, [pc, #176]	; (801b9a8 <tcp_input+0x72c>)
 801b8f8:	681a      	ldr	r2, [r3, #0]
 801b8fa:	69fb      	ldr	r3, [r7, #28]
 801b8fc:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 801b8fe:	4b2b      	ldr	r3, [pc, #172]	; (801b9ac <tcp_input+0x730>)
 801b900:	781b      	ldrb	r3, [r3, #0]
 801b902:	f003 0320 	and.w	r3, r3, #32
 801b906:	2b00      	cmp	r3, #0
 801b908:	d030      	beq.n	801b96c <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 801b90a:	69fb      	ldr	r3, [r7, #28]
 801b90c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b90e:	2b00      	cmp	r3, #0
 801b910:	d009      	beq.n	801b926 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 801b912:	69fb      	ldr	r3, [r7, #28]
 801b914:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b916:	7b5a      	ldrb	r2, [r3, #13]
 801b918:	69fb      	ldr	r3, [r7, #28]
 801b91a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801b91c:	f042 0220 	orr.w	r2, r2, #32
 801b920:	b2d2      	uxtb	r2, r2
 801b922:	735a      	strb	r2, [r3, #13]
 801b924:	e022      	b.n	801b96c <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801b926:	69fb      	ldr	r3, [r7, #28]
 801b928:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b92a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 801b92e:	d005      	beq.n	801b93c <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 801b930:	69fb      	ldr	r3, [r7, #28]
 801b932:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801b934:	3301      	adds	r3, #1
 801b936:	b29a      	uxth	r2, r3
 801b938:	69fb      	ldr	r3, [r7, #28]
 801b93a:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 801b93c:	69fb      	ldr	r3, [r7, #28]
 801b93e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801b942:	2b00      	cmp	r3, #0
 801b944:	d00b      	beq.n	801b95e <tcp_input+0x6e2>
 801b946:	69fb      	ldr	r3, [r7, #28]
 801b948:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801b94c:	69fb      	ldr	r3, [r7, #28]
 801b94e:	6918      	ldr	r0, [r3, #16]
 801b950:	2300      	movs	r3, #0
 801b952:	2200      	movs	r2, #0
 801b954:	69f9      	ldr	r1, [r7, #28]
 801b956:	47a0      	blx	r4
 801b958:	4603      	mov	r3, r0
 801b95a:	74fb      	strb	r3, [r7, #19]
 801b95c:	e001      	b.n	801b962 <tcp_input+0x6e6>
 801b95e:	2300      	movs	r3, #0
 801b960:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 801b962:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801b966:	f113 0f0d 	cmn.w	r3, #13
 801b96a:	d016      	beq.n	801b99a <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 801b96c:	4b13      	ldr	r3, [pc, #76]	; (801b9bc <tcp_input+0x740>)
 801b96e:	2200      	movs	r2, #0
 801b970:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 801b972:	69f8      	ldr	r0, [r7, #28]
 801b974:	f000 f88e 	bl	801ba94 <tcp_input_delayed_close>
 801b978:	4603      	mov	r3, r0
 801b97a:	2b00      	cmp	r3, #0
 801b97c:	d128      	bne.n	801b9d0 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 801b97e:	69f8      	ldr	r0, [r7, #28]
 801b980:	f002 ff20 	bl	801e7c4 <tcp_output>
 801b984:	e025      	b.n	801b9d2 <tcp_input+0x756>
        goto aborted;
 801b986:	bf00      	nop
 801b988:	e023      	b.n	801b9d2 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801b98a:	bf00      	nop
 801b98c:	e021      	b.n	801b9d2 <tcp_input+0x756>
              goto aborted;
 801b98e:	bf00      	nop
 801b990:	e01f      	b.n	801b9d2 <tcp_input+0x756>
          goto aborted;
 801b992:	bf00      	nop
 801b994:	e01d      	b.n	801b9d2 <tcp_input+0x756>
            goto aborted;
 801b996:	bf00      	nop
 801b998:	e01b      	b.n	801b9d2 <tcp_input+0x756>
              goto aborted;
 801b99a:	bf00      	nop
 801b99c:	e019      	b.n	801b9d2 <tcp_input+0x756>
 801b99e:	bf00      	nop
 801b9a0:	2000bfd4 	.word	0x2000bfd4
 801b9a4:	2000bfe4 	.word	0x2000bfe4
 801b9a8:	2000c004 	.word	0x2000c004
 801b9ac:	2000c001 	.word	0x2000c001
 801b9b0:	2000bffc 	.word	0x2000bffc
 801b9b4:	2000c000 	.word	0x2000c000
 801b9b8:	2000bffe 	.word	0x2000bffe
 801b9bc:	2000c008 	.word	0x2000c008
 801b9c0:	2000bfc8 	.word	0x2000bfc8
 801b9c4:	08027554 	.word	0x08027554
 801b9c8:	08027708 	.word	0x08027708
 801b9cc:	080275a0 	.word	0x080275a0
          goto aborted;
 801b9d0:	bf00      	nop
    tcp_input_pcb = NULL;
 801b9d2:	4b27      	ldr	r3, [pc, #156]	; (801ba70 <tcp_input+0x7f4>)
 801b9d4:	2200      	movs	r2, #0
 801b9d6:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 801b9d8:	4b26      	ldr	r3, [pc, #152]	; (801ba74 <tcp_input+0x7f8>)
 801b9da:	2200      	movs	r2, #0
 801b9dc:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 801b9de:	4b26      	ldr	r3, [pc, #152]	; (801ba78 <tcp_input+0x7fc>)
 801b9e0:	685b      	ldr	r3, [r3, #4]
 801b9e2:	2b00      	cmp	r3, #0
 801b9e4:	d03f      	beq.n	801ba66 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 801b9e6:	4b24      	ldr	r3, [pc, #144]	; (801ba78 <tcp_input+0x7fc>)
 801b9e8:	685b      	ldr	r3, [r3, #4]
 801b9ea:	4618      	mov	r0, r3
 801b9ec:	f7fd fa18 	bl	8018e20 <pbuf_free>
      inseg.p = NULL;
 801b9f0:	4b21      	ldr	r3, [pc, #132]	; (801ba78 <tcp_input+0x7fc>)
 801b9f2:	2200      	movs	r2, #0
 801b9f4:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 801b9f6:	e036      	b.n	801ba66 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 801b9f8:	4b20      	ldr	r3, [pc, #128]	; (801ba7c <tcp_input+0x800>)
 801b9fa:	681b      	ldr	r3, [r3, #0]
 801b9fc:	899b      	ldrh	r3, [r3, #12]
 801b9fe:	b29b      	uxth	r3, r3
 801ba00:	4618      	mov	r0, r3
 801ba02:	f7fb fe1b 	bl	801763c <lwip_htons>
 801ba06:	4603      	mov	r3, r0
 801ba08:	b2db      	uxtb	r3, r3
 801ba0a:	f003 0304 	and.w	r3, r3, #4
 801ba0e:	2b00      	cmp	r3, #0
 801ba10:	d118      	bne.n	801ba44 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ba12:	4b1b      	ldr	r3, [pc, #108]	; (801ba80 <tcp_input+0x804>)
 801ba14:	6819      	ldr	r1, [r3, #0]
 801ba16:	4b1b      	ldr	r3, [pc, #108]	; (801ba84 <tcp_input+0x808>)
 801ba18:	881b      	ldrh	r3, [r3, #0]
 801ba1a:	461a      	mov	r2, r3
 801ba1c:	4b1a      	ldr	r3, [pc, #104]	; (801ba88 <tcp_input+0x80c>)
 801ba1e:	681b      	ldr	r3, [r3, #0]
 801ba20:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ba22:	4b16      	ldr	r3, [pc, #88]	; (801ba7c <tcp_input+0x800>)
 801ba24:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ba26:	885b      	ldrh	r3, [r3, #2]
 801ba28:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801ba2a:	4a14      	ldr	r2, [pc, #80]	; (801ba7c <tcp_input+0x800>)
 801ba2c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801ba2e:	8812      	ldrh	r2, [r2, #0]
 801ba30:	b292      	uxth	r2, r2
 801ba32:	9202      	str	r2, [sp, #8]
 801ba34:	9301      	str	r3, [sp, #4]
 801ba36:	4b15      	ldr	r3, [pc, #84]	; (801ba8c <tcp_input+0x810>)
 801ba38:	9300      	str	r3, [sp, #0]
 801ba3a:	4b15      	ldr	r3, [pc, #84]	; (801ba90 <tcp_input+0x814>)
 801ba3c:	4602      	mov	r2, r0
 801ba3e:	2000      	movs	r0, #0
 801ba40:	f003 fc74 	bl	801f32c <tcp_rst>
    pbuf_free(p);
 801ba44:	6878      	ldr	r0, [r7, #4]
 801ba46:	f7fd f9eb 	bl	8018e20 <pbuf_free>
  return;
 801ba4a:	e00c      	b.n	801ba66 <tcp_input+0x7ea>
    goto dropped;
 801ba4c:	bf00      	nop
 801ba4e:	e006      	b.n	801ba5e <tcp_input+0x7e2>
    goto dropped;
 801ba50:	bf00      	nop
 801ba52:	e004      	b.n	801ba5e <tcp_input+0x7e2>
    goto dropped;
 801ba54:	bf00      	nop
 801ba56:	e002      	b.n	801ba5e <tcp_input+0x7e2>
      goto dropped;
 801ba58:	bf00      	nop
 801ba5a:	e000      	b.n	801ba5e <tcp_input+0x7e2>
      goto dropped;
 801ba5c:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 801ba5e:	6878      	ldr	r0, [r7, #4]
 801ba60:	f7fd f9de 	bl	8018e20 <pbuf_free>
 801ba64:	e000      	b.n	801ba68 <tcp_input+0x7ec>
  return;
 801ba66:	bf00      	nop
}
 801ba68:	3724      	adds	r7, #36	; 0x24
 801ba6a:	46bd      	mov	sp, r7
 801ba6c:	bd90      	pop	{r4, r7, pc}
 801ba6e:	bf00      	nop
 801ba70:	2000c008 	.word	0x2000c008
 801ba74:	2000c004 	.word	0x2000c004
 801ba78:	2000bfd4 	.word	0x2000bfd4
 801ba7c:	2000bfe4 	.word	0x2000bfe4
 801ba80:	2000bff8 	.word	0x2000bff8
 801ba84:	2000bffe 	.word	0x2000bffe
 801ba88:	2000bff4 	.word	0x2000bff4
 801ba8c:	200066b8 	.word	0x200066b8
 801ba90:	200066bc 	.word	0x200066bc

0801ba94 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 801ba94:	b580      	push	{r7, lr}
 801ba96:	b082      	sub	sp, #8
 801ba98:	af00      	add	r7, sp, #0
 801ba9a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 801ba9c:	687b      	ldr	r3, [r7, #4]
 801ba9e:	2b00      	cmp	r3, #0
 801baa0:	d106      	bne.n	801bab0 <tcp_input_delayed_close+0x1c>
 801baa2:	4b17      	ldr	r3, [pc, #92]	; (801bb00 <tcp_input_delayed_close+0x6c>)
 801baa4:	f240 225a 	movw	r2, #602	; 0x25a
 801baa8:	4916      	ldr	r1, [pc, #88]	; (801bb04 <tcp_input_delayed_close+0x70>)
 801baaa:	4817      	ldr	r0, [pc, #92]	; (801bb08 <tcp_input_delayed_close+0x74>)
 801baac:	f008 fbf0 	bl	8024290 <iprintf>

  if (recv_flags & TF_CLOSED) {
 801bab0:	4b16      	ldr	r3, [pc, #88]	; (801bb0c <tcp_input_delayed_close+0x78>)
 801bab2:	781b      	ldrb	r3, [r3, #0]
 801bab4:	f003 0310 	and.w	r3, r3, #16
 801bab8:	2b00      	cmp	r3, #0
 801baba:	d01c      	beq.n	801baf6 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 801babc:	687b      	ldr	r3, [r7, #4]
 801babe:	8b5b      	ldrh	r3, [r3, #26]
 801bac0:	f003 0310 	and.w	r3, r3, #16
 801bac4:	2b00      	cmp	r3, #0
 801bac6:	d10d      	bne.n	801bae4 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801bac8:	687b      	ldr	r3, [r7, #4]
 801baca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bace:	2b00      	cmp	r3, #0
 801bad0:	d008      	beq.n	801bae4 <tcp_input_delayed_close+0x50>
 801bad2:	687b      	ldr	r3, [r7, #4]
 801bad4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801bad8:	687a      	ldr	r2, [r7, #4]
 801bada:	6912      	ldr	r2, [r2, #16]
 801badc:	f06f 010e 	mvn.w	r1, #14
 801bae0:	4610      	mov	r0, r2
 801bae2:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 801bae4:	6879      	ldr	r1, [r7, #4]
 801bae6:	480a      	ldr	r0, [pc, #40]	; (801bb10 <tcp_input_delayed_close+0x7c>)
 801bae8:	f7ff fa50 	bl	801af8c <tcp_pcb_remove>
    tcp_free(pcb);
 801baec:	6878      	ldr	r0, [r7, #4]
 801baee:	f7fd fc53 	bl	8019398 <tcp_free>
    return 1;
 801baf2:	2301      	movs	r3, #1
 801baf4:	e000      	b.n	801baf8 <tcp_input_delayed_close+0x64>
  }
  return 0;
 801baf6:	2300      	movs	r3, #0
}
 801baf8:	4618      	mov	r0, r3
 801bafa:	3708      	adds	r7, #8
 801bafc:	46bd      	mov	sp, r7
 801bafe:	bd80      	pop	{r7, pc}
 801bb00:	08027554 	.word	0x08027554
 801bb04:	08027724 	.word	0x08027724
 801bb08:	080275a0 	.word	0x080275a0
 801bb0c:	2000c001 	.word	0x2000c001
 801bb10:	2000bfc8 	.word	0x2000bfc8

0801bb14 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 801bb14:	b590      	push	{r4, r7, lr}
 801bb16:	b08b      	sub	sp, #44	; 0x2c
 801bb18:	af04      	add	r7, sp, #16
 801bb1a:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 801bb1c:	4b6f      	ldr	r3, [pc, #444]	; (801bcdc <tcp_listen_input+0x1c8>)
 801bb1e:	781b      	ldrb	r3, [r3, #0]
 801bb20:	f003 0304 	and.w	r3, r3, #4
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	f040 80d2 	bne.w	801bcce <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	2b00      	cmp	r3, #0
 801bb2e:	d106      	bne.n	801bb3e <tcp_listen_input+0x2a>
 801bb30:	4b6b      	ldr	r3, [pc, #428]	; (801bce0 <tcp_listen_input+0x1cc>)
 801bb32:	f240 2281 	movw	r2, #641	; 0x281
 801bb36:	496b      	ldr	r1, [pc, #428]	; (801bce4 <tcp_listen_input+0x1d0>)
 801bb38:	486b      	ldr	r0, [pc, #428]	; (801bce8 <tcp_listen_input+0x1d4>)
 801bb3a:	f008 fba9 	bl	8024290 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 801bb3e:	4b67      	ldr	r3, [pc, #412]	; (801bcdc <tcp_listen_input+0x1c8>)
 801bb40:	781b      	ldrb	r3, [r3, #0]
 801bb42:	f003 0310 	and.w	r3, r3, #16
 801bb46:	2b00      	cmp	r3, #0
 801bb48:	d019      	beq.n	801bb7e <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb4a:	4b68      	ldr	r3, [pc, #416]	; (801bcec <tcp_listen_input+0x1d8>)
 801bb4c:	6819      	ldr	r1, [r3, #0]
 801bb4e:	4b68      	ldr	r3, [pc, #416]	; (801bcf0 <tcp_listen_input+0x1dc>)
 801bb50:	881b      	ldrh	r3, [r3, #0]
 801bb52:	461a      	mov	r2, r3
 801bb54:	4b67      	ldr	r3, [pc, #412]	; (801bcf4 <tcp_listen_input+0x1e0>)
 801bb56:	681b      	ldr	r3, [r3, #0]
 801bb58:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bb5a:	4b67      	ldr	r3, [pc, #412]	; (801bcf8 <tcp_listen_input+0x1e4>)
 801bb5c:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb5e:	885b      	ldrh	r3, [r3, #2]
 801bb60:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bb62:	4a65      	ldr	r2, [pc, #404]	; (801bcf8 <tcp_listen_input+0x1e4>)
 801bb64:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bb66:	8812      	ldrh	r2, [r2, #0]
 801bb68:	b292      	uxth	r2, r2
 801bb6a:	9202      	str	r2, [sp, #8]
 801bb6c:	9301      	str	r3, [sp, #4]
 801bb6e:	4b63      	ldr	r3, [pc, #396]	; (801bcfc <tcp_listen_input+0x1e8>)
 801bb70:	9300      	str	r3, [sp, #0]
 801bb72:	4b63      	ldr	r3, [pc, #396]	; (801bd00 <tcp_listen_input+0x1ec>)
 801bb74:	4602      	mov	r2, r0
 801bb76:	6878      	ldr	r0, [r7, #4]
 801bb78:	f003 fbd8 	bl	801f32c <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 801bb7c:	e0a9      	b.n	801bcd2 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 801bb7e:	4b57      	ldr	r3, [pc, #348]	; (801bcdc <tcp_listen_input+0x1c8>)
 801bb80:	781b      	ldrb	r3, [r3, #0]
 801bb82:	f003 0302 	and.w	r3, r3, #2
 801bb86:	2b00      	cmp	r3, #0
 801bb88:	f000 80a3 	beq.w	801bcd2 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 801bb8c:	687b      	ldr	r3, [r7, #4]
 801bb8e:	7d5b      	ldrb	r3, [r3, #21]
 801bb90:	4618      	mov	r0, r3
 801bb92:	f7ff f859 	bl	801ac48 <tcp_alloc>
 801bb96:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801bb98:	697b      	ldr	r3, [r7, #20]
 801bb9a:	2b00      	cmp	r3, #0
 801bb9c:	d111      	bne.n	801bbc2 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bb9e:	687b      	ldr	r3, [r7, #4]
 801bba0:	699b      	ldr	r3, [r3, #24]
 801bba2:	2b00      	cmp	r3, #0
 801bba4:	d00a      	beq.n	801bbbc <tcp_listen_input+0xa8>
 801bba6:	687b      	ldr	r3, [r7, #4]
 801bba8:	699b      	ldr	r3, [r3, #24]
 801bbaa:	687a      	ldr	r2, [r7, #4]
 801bbac:	6910      	ldr	r0, [r2, #16]
 801bbae:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801bbb2:	2100      	movs	r1, #0
 801bbb4:	4798      	blx	r3
 801bbb6:	4603      	mov	r3, r0
 801bbb8:	73bb      	strb	r3, [r7, #14]
      return;
 801bbba:	e08b      	b.n	801bcd4 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 801bbbc:	23f0      	movs	r3, #240	; 0xf0
 801bbbe:	73bb      	strb	r3, [r7, #14]
      return;
 801bbc0:	e088      	b.n	801bcd4 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 801bbc2:	4b50      	ldr	r3, [pc, #320]	; (801bd04 <tcp_listen_input+0x1f0>)
 801bbc4:	695a      	ldr	r2, [r3, #20]
 801bbc6:	697b      	ldr	r3, [r7, #20]
 801bbc8:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 801bbca:	4b4e      	ldr	r3, [pc, #312]	; (801bd04 <tcp_listen_input+0x1f0>)
 801bbcc:	691a      	ldr	r2, [r3, #16]
 801bbce:	697b      	ldr	r3, [r7, #20]
 801bbd0:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 801bbd2:	687b      	ldr	r3, [r7, #4]
 801bbd4:	8ada      	ldrh	r2, [r3, #22]
 801bbd6:	697b      	ldr	r3, [r7, #20]
 801bbd8:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 801bbda:	4b47      	ldr	r3, [pc, #284]	; (801bcf8 <tcp_listen_input+0x1e4>)
 801bbdc:	681b      	ldr	r3, [r3, #0]
 801bbde:	881b      	ldrh	r3, [r3, #0]
 801bbe0:	b29a      	uxth	r2, r3
 801bbe2:	697b      	ldr	r3, [r7, #20]
 801bbe4:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 801bbe6:	697b      	ldr	r3, [r7, #20]
 801bbe8:	2203      	movs	r2, #3
 801bbea:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 801bbec:	4b41      	ldr	r3, [pc, #260]	; (801bcf4 <tcp_listen_input+0x1e0>)
 801bbee:	681b      	ldr	r3, [r3, #0]
 801bbf0:	1c5a      	adds	r2, r3, #1
 801bbf2:	697b      	ldr	r3, [r7, #20]
 801bbf4:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 801bbf6:	697b      	ldr	r3, [r7, #20]
 801bbf8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bbfa:	697b      	ldr	r3, [r7, #20]
 801bbfc:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 801bbfe:	6978      	ldr	r0, [r7, #20]
 801bc00:	f7ff fa58 	bl	801b0b4 <tcp_next_iss>
 801bc04:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 801bc06:	697b      	ldr	r3, [r7, #20]
 801bc08:	693a      	ldr	r2, [r7, #16]
 801bc0a:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 801bc0c:	697b      	ldr	r3, [r7, #20]
 801bc0e:	693a      	ldr	r2, [r7, #16]
 801bc10:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 801bc12:	697b      	ldr	r3, [r7, #20]
 801bc14:	693a      	ldr	r2, [r7, #16]
 801bc16:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 801bc18:	697b      	ldr	r3, [r7, #20]
 801bc1a:	693a      	ldr	r2, [r7, #16]
 801bc1c:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 801bc1e:	4b35      	ldr	r3, [pc, #212]	; (801bcf4 <tcp_listen_input+0x1e0>)
 801bc20:	681b      	ldr	r3, [r3, #0]
 801bc22:	1e5a      	subs	r2, r3, #1
 801bc24:	697b      	ldr	r3, [r7, #20]
 801bc26:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801bc28:	687b      	ldr	r3, [r7, #4]
 801bc2a:	691a      	ldr	r2, [r3, #16]
 801bc2c:	697b      	ldr	r3, [r7, #20]
 801bc2e:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 801bc30:	697b      	ldr	r3, [r7, #20]
 801bc32:	687a      	ldr	r2, [r7, #4]
 801bc34:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801bc36:	687b      	ldr	r3, [r7, #4]
 801bc38:	7a5b      	ldrb	r3, [r3, #9]
 801bc3a:	f003 030c 	and.w	r3, r3, #12
 801bc3e:	b2da      	uxtb	r2, r3
 801bc40:	697b      	ldr	r3, [r7, #20]
 801bc42:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 801bc44:	687b      	ldr	r3, [r7, #4]
 801bc46:	7a1a      	ldrb	r2, [r3, #8]
 801bc48:	697b      	ldr	r3, [r7, #20]
 801bc4a:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 801bc4c:	4b2e      	ldr	r3, [pc, #184]	; (801bd08 <tcp_listen_input+0x1f4>)
 801bc4e:	681a      	ldr	r2, [r3, #0]
 801bc50:	697b      	ldr	r3, [r7, #20]
 801bc52:	60da      	str	r2, [r3, #12]
 801bc54:	4a2c      	ldr	r2, [pc, #176]	; (801bd08 <tcp_listen_input+0x1f4>)
 801bc56:	697b      	ldr	r3, [r7, #20]
 801bc58:	6013      	str	r3, [r2, #0]
 801bc5a:	f003 fd29 	bl	801f6b0 <tcp_timer_needed>
 801bc5e:	4b2b      	ldr	r3, [pc, #172]	; (801bd0c <tcp_listen_input+0x1f8>)
 801bc60:	2201      	movs	r2, #1
 801bc62:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 801bc64:	6978      	ldr	r0, [r7, #20]
 801bc66:	f001 fd8f 	bl	801d788 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801bc6a:	4b23      	ldr	r3, [pc, #140]	; (801bcf8 <tcp_listen_input+0x1e4>)
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	89db      	ldrh	r3, [r3, #14]
 801bc70:	b29a      	uxth	r2, r3
 801bc72:	697b      	ldr	r3, [r7, #20]
 801bc74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801bc78:	697b      	ldr	r3, [r7, #20]
 801bc7a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bc7e:	697b      	ldr	r3, [r7, #20]
 801bc80:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 801bc84:	697b      	ldr	r3, [r7, #20]
 801bc86:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bc88:	697b      	ldr	r3, [r7, #20]
 801bc8a:	3304      	adds	r3, #4
 801bc8c:	4618      	mov	r0, r3
 801bc8e:	f005 fcbb 	bl	8021608 <ip4_route>
 801bc92:	4601      	mov	r1, r0
 801bc94:	697b      	ldr	r3, [r7, #20]
 801bc96:	3304      	adds	r3, #4
 801bc98:	461a      	mov	r2, r3
 801bc9a:	4620      	mov	r0, r4
 801bc9c:	f7ff fa30 	bl	801b100 <tcp_eff_send_mss_netif>
 801bca0:	4603      	mov	r3, r0
 801bca2:	461a      	mov	r2, r3
 801bca4:	697b      	ldr	r3, [r7, #20]
 801bca6:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801bca8:	2112      	movs	r1, #18
 801bcaa:	6978      	ldr	r0, [r7, #20]
 801bcac:	f002 fc9c 	bl	801e5e8 <tcp_enqueue_flags>
 801bcb0:	4603      	mov	r3, r0
 801bcb2:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 801bcb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801bcb8:	2b00      	cmp	r3, #0
 801bcba:	d004      	beq.n	801bcc6 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 801bcbc:	2100      	movs	r1, #0
 801bcbe:	6978      	ldr	r0, [r7, #20]
 801bcc0:	f7fd fdf0 	bl	80198a4 <tcp_abandon>
      return;
 801bcc4:	e006      	b.n	801bcd4 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 801bcc6:	6978      	ldr	r0, [r7, #20]
 801bcc8:	f002 fd7c 	bl	801e7c4 <tcp_output>
  return;
 801bccc:	e001      	b.n	801bcd2 <tcp_listen_input+0x1be>
    return;
 801bcce:	bf00      	nop
 801bcd0:	e000      	b.n	801bcd4 <tcp_listen_input+0x1c0>
  return;
 801bcd2:	bf00      	nop
}
 801bcd4:	371c      	adds	r7, #28
 801bcd6:	46bd      	mov	sp, r7
 801bcd8:	bd90      	pop	{r4, r7, pc}
 801bcda:	bf00      	nop
 801bcdc:	2000c000 	.word	0x2000c000
 801bce0:	08027554 	.word	0x08027554
 801bce4:	0802774c 	.word	0x0802774c
 801bce8:	080275a0 	.word	0x080275a0
 801bcec:	2000bff8 	.word	0x2000bff8
 801bcf0:	2000bffe 	.word	0x2000bffe
 801bcf4:	2000bff4 	.word	0x2000bff4
 801bcf8:	2000bfe4 	.word	0x2000bfe4
 801bcfc:	200066b8 	.word	0x200066b8
 801bd00:	200066bc 	.word	0x200066bc
 801bd04:	200066a8 	.word	0x200066a8
 801bd08:	2000bfc8 	.word	0x2000bfc8
 801bd0c:	2000bfd0 	.word	0x2000bfd0

0801bd10 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 801bd10:	b580      	push	{r7, lr}
 801bd12:	b086      	sub	sp, #24
 801bd14:	af04      	add	r7, sp, #16
 801bd16:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 801bd18:	4b2f      	ldr	r3, [pc, #188]	; (801bdd8 <tcp_timewait_input+0xc8>)
 801bd1a:	781b      	ldrb	r3, [r3, #0]
 801bd1c:	f003 0304 	and.w	r3, r3, #4
 801bd20:	2b00      	cmp	r3, #0
 801bd22:	d153      	bne.n	801bdcc <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	2b00      	cmp	r3, #0
 801bd28:	d106      	bne.n	801bd38 <tcp_timewait_input+0x28>
 801bd2a:	4b2c      	ldr	r3, [pc, #176]	; (801bddc <tcp_timewait_input+0xcc>)
 801bd2c:	f240 22ee 	movw	r2, #750	; 0x2ee
 801bd30:	492b      	ldr	r1, [pc, #172]	; (801bde0 <tcp_timewait_input+0xd0>)
 801bd32:	482c      	ldr	r0, [pc, #176]	; (801bde4 <tcp_timewait_input+0xd4>)
 801bd34:	f008 faac 	bl	8024290 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801bd38:	4b27      	ldr	r3, [pc, #156]	; (801bdd8 <tcp_timewait_input+0xc8>)
 801bd3a:	781b      	ldrb	r3, [r3, #0]
 801bd3c:	f003 0302 	and.w	r3, r3, #2
 801bd40:	2b00      	cmp	r3, #0
 801bd42:	d02a      	beq.n	801bd9a <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 801bd44:	4b28      	ldr	r3, [pc, #160]	; (801bde8 <tcp_timewait_input+0xd8>)
 801bd46:	681a      	ldr	r2, [r3, #0]
 801bd48:	687b      	ldr	r3, [r7, #4]
 801bd4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd4c:	1ad3      	subs	r3, r2, r3
 801bd4e:	2b00      	cmp	r3, #0
 801bd50:	db2d      	blt.n	801bdae <tcp_timewait_input+0x9e>
 801bd52:	4b25      	ldr	r3, [pc, #148]	; (801bde8 <tcp_timewait_input+0xd8>)
 801bd54:	681a      	ldr	r2, [r3, #0]
 801bd56:	687b      	ldr	r3, [r7, #4]
 801bd58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801bd5a:	6879      	ldr	r1, [r7, #4]
 801bd5c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801bd5e:	440b      	add	r3, r1
 801bd60:	1ad3      	subs	r3, r2, r3
 801bd62:	2b00      	cmp	r3, #0
 801bd64:	dc23      	bgt.n	801bdae <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd66:	4b21      	ldr	r3, [pc, #132]	; (801bdec <tcp_timewait_input+0xdc>)
 801bd68:	6819      	ldr	r1, [r3, #0]
 801bd6a:	4b21      	ldr	r3, [pc, #132]	; (801bdf0 <tcp_timewait_input+0xe0>)
 801bd6c:	881b      	ldrh	r3, [r3, #0]
 801bd6e:	461a      	mov	r2, r3
 801bd70:	4b1d      	ldr	r3, [pc, #116]	; (801bde8 <tcp_timewait_input+0xd8>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd76:	4b1f      	ldr	r3, [pc, #124]	; (801bdf4 <tcp_timewait_input+0xe4>)
 801bd78:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd7a:	885b      	ldrh	r3, [r3, #2]
 801bd7c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801bd7e:	4a1d      	ldr	r2, [pc, #116]	; (801bdf4 <tcp_timewait_input+0xe4>)
 801bd80:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801bd82:	8812      	ldrh	r2, [r2, #0]
 801bd84:	b292      	uxth	r2, r2
 801bd86:	9202      	str	r2, [sp, #8]
 801bd88:	9301      	str	r3, [sp, #4]
 801bd8a:	4b1b      	ldr	r3, [pc, #108]	; (801bdf8 <tcp_timewait_input+0xe8>)
 801bd8c:	9300      	str	r3, [sp, #0]
 801bd8e:	4b1b      	ldr	r3, [pc, #108]	; (801bdfc <tcp_timewait_input+0xec>)
 801bd90:	4602      	mov	r2, r0
 801bd92:	6878      	ldr	r0, [r7, #4]
 801bd94:	f003 faca 	bl	801f32c <tcp_rst>
      return;
 801bd98:	e01b      	b.n	801bdd2 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801bd9a:	4b0f      	ldr	r3, [pc, #60]	; (801bdd8 <tcp_timewait_input+0xc8>)
 801bd9c:	781b      	ldrb	r3, [r3, #0]
 801bd9e:	f003 0301 	and.w	r3, r3, #1
 801bda2:	2b00      	cmp	r3, #0
 801bda4:	d003      	beq.n	801bdae <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801bda6:	4b16      	ldr	r3, [pc, #88]	; (801be00 <tcp_timewait_input+0xf0>)
 801bda8:	681a      	ldr	r2, [r3, #0]
 801bdaa:	687b      	ldr	r3, [r7, #4]
 801bdac:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801bdae:	4b10      	ldr	r3, [pc, #64]	; (801bdf0 <tcp_timewait_input+0xe0>)
 801bdb0:	881b      	ldrh	r3, [r3, #0]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d00c      	beq.n	801bdd0 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801bdb6:	687b      	ldr	r3, [r7, #4]
 801bdb8:	8b5b      	ldrh	r3, [r3, #26]
 801bdba:	f043 0302 	orr.w	r3, r3, #2
 801bdbe:	b29a      	uxth	r2, r3
 801bdc0:	687b      	ldr	r3, [r7, #4]
 801bdc2:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801bdc4:	6878      	ldr	r0, [r7, #4]
 801bdc6:	f002 fcfd 	bl	801e7c4 <tcp_output>
  }
  return;
 801bdca:	e001      	b.n	801bdd0 <tcp_timewait_input+0xc0>
    return;
 801bdcc:	bf00      	nop
 801bdce:	e000      	b.n	801bdd2 <tcp_timewait_input+0xc2>
  return;
 801bdd0:	bf00      	nop
}
 801bdd2:	3708      	adds	r7, #8
 801bdd4:	46bd      	mov	sp, r7
 801bdd6:	bd80      	pop	{r7, pc}
 801bdd8:	2000c000 	.word	0x2000c000
 801bddc:	08027554 	.word	0x08027554
 801bde0:	0802776c 	.word	0x0802776c
 801bde4:	080275a0 	.word	0x080275a0
 801bde8:	2000bff4 	.word	0x2000bff4
 801bdec:	2000bff8 	.word	0x2000bff8
 801bdf0:	2000bffe 	.word	0x2000bffe
 801bdf4:	2000bfe4 	.word	0x2000bfe4
 801bdf8:	200066b8 	.word	0x200066b8
 801bdfc:	200066bc 	.word	0x200066bc
 801be00:	2000bfbc 	.word	0x2000bfbc

0801be04 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 801be04:	b590      	push	{r4, r7, lr}
 801be06:	b08d      	sub	sp, #52	; 0x34
 801be08:	af04      	add	r7, sp, #16
 801be0a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 801be0c:	2300      	movs	r3, #0
 801be0e:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 801be10:	2300      	movs	r3, #0
 801be12:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 801be14:	687b      	ldr	r3, [r7, #4]
 801be16:	2b00      	cmp	r3, #0
 801be18:	d106      	bne.n	801be28 <tcp_process+0x24>
 801be1a:	4b9d      	ldr	r3, [pc, #628]	; (801c090 <tcp_process+0x28c>)
 801be1c:	f44f 7247 	mov.w	r2, #796	; 0x31c
 801be20:	499c      	ldr	r1, [pc, #624]	; (801c094 <tcp_process+0x290>)
 801be22:	489d      	ldr	r0, [pc, #628]	; (801c098 <tcp_process+0x294>)
 801be24:	f008 fa34 	bl	8024290 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801be28:	4b9c      	ldr	r3, [pc, #624]	; (801c09c <tcp_process+0x298>)
 801be2a:	781b      	ldrb	r3, [r3, #0]
 801be2c:	f003 0304 	and.w	r3, r3, #4
 801be30:	2b00      	cmp	r3, #0
 801be32:	d04e      	beq.n	801bed2 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 801be34:	687b      	ldr	r3, [r7, #4]
 801be36:	7d1b      	ldrb	r3, [r3, #20]
 801be38:	2b02      	cmp	r3, #2
 801be3a:	d108      	bne.n	801be4e <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801be40:	4b97      	ldr	r3, [pc, #604]	; (801c0a0 <tcp_process+0x29c>)
 801be42:	681b      	ldr	r3, [r3, #0]
 801be44:	429a      	cmp	r2, r3
 801be46:	d123      	bne.n	801be90 <tcp_process+0x8c>
        acceptable = 1;
 801be48:	2301      	movs	r3, #1
 801be4a:	76fb      	strb	r3, [r7, #27]
 801be4c:	e020      	b.n	801be90 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801be52:	4b94      	ldr	r3, [pc, #592]	; (801c0a4 <tcp_process+0x2a0>)
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	429a      	cmp	r2, r3
 801be58:	d102      	bne.n	801be60 <tcp_process+0x5c>
        acceptable = 1;
 801be5a:	2301      	movs	r3, #1
 801be5c:	76fb      	strb	r3, [r7, #27]
 801be5e:	e017      	b.n	801be90 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801be60:	4b90      	ldr	r3, [pc, #576]	; (801c0a4 <tcp_process+0x2a0>)
 801be62:	681a      	ldr	r2, [r3, #0]
 801be64:	687b      	ldr	r3, [r7, #4]
 801be66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be68:	1ad3      	subs	r3, r2, r3
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	db10      	blt.n	801be90 <tcp_process+0x8c>
 801be6e:	4b8d      	ldr	r3, [pc, #564]	; (801c0a4 <tcp_process+0x2a0>)
 801be70:	681a      	ldr	r2, [r3, #0]
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801be76:	6879      	ldr	r1, [r7, #4]
 801be78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801be7a:	440b      	add	r3, r1
 801be7c:	1ad3      	subs	r3, r2, r3
 801be7e:	2b00      	cmp	r3, #0
 801be80:	dc06      	bgt.n	801be90 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801be82:	687b      	ldr	r3, [r7, #4]
 801be84:	8b5b      	ldrh	r3, [r3, #26]
 801be86:	f043 0302 	orr.w	r3, r3, #2
 801be8a:	b29a      	uxth	r2, r3
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801be90:	7efb      	ldrb	r3, [r7, #27]
 801be92:	2b00      	cmp	r3, #0
 801be94:	d01b      	beq.n	801bece <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	7d1b      	ldrb	r3, [r3, #20]
 801be9a:	2b00      	cmp	r3, #0
 801be9c:	d106      	bne.n	801beac <tcp_process+0xa8>
 801be9e:	4b7c      	ldr	r3, [pc, #496]	; (801c090 <tcp_process+0x28c>)
 801bea0:	f44f 724e 	mov.w	r2, #824	; 0x338
 801bea4:	4980      	ldr	r1, [pc, #512]	; (801c0a8 <tcp_process+0x2a4>)
 801bea6:	487c      	ldr	r0, [pc, #496]	; (801c098 <tcp_process+0x294>)
 801bea8:	f008 f9f2 	bl	8024290 <iprintf>
      recv_flags |= TF_RESET;
 801beac:	4b7f      	ldr	r3, [pc, #508]	; (801c0ac <tcp_process+0x2a8>)
 801beae:	781b      	ldrb	r3, [r3, #0]
 801beb0:	f043 0308 	orr.w	r3, r3, #8
 801beb4:	b2da      	uxtb	r2, r3
 801beb6:	4b7d      	ldr	r3, [pc, #500]	; (801c0ac <tcp_process+0x2a8>)
 801beb8:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801beba:	687b      	ldr	r3, [r7, #4]
 801bebc:	8b5b      	ldrh	r3, [r3, #26]
 801bebe:	f023 0301 	bic.w	r3, r3, #1
 801bec2:	b29a      	uxth	r2, r3
 801bec4:	687b      	ldr	r3, [r7, #4]
 801bec6:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 801bec8:	f06f 030d 	mvn.w	r3, #13
 801becc:	e37a      	b.n	801c5c4 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801bece:	2300      	movs	r3, #0
 801bed0:	e378      	b.n	801c5c4 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801bed2:	4b72      	ldr	r3, [pc, #456]	; (801c09c <tcp_process+0x298>)
 801bed4:	781b      	ldrb	r3, [r3, #0]
 801bed6:	f003 0302 	and.w	r3, r3, #2
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d010      	beq.n	801bf00 <tcp_process+0xfc>
 801bede:	687b      	ldr	r3, [r7, #4]
 801bee0:	7d1b      	ldrb	r3, [r3, #20]
 801bee2:	2b02      	cmp	r3, #2
 801bee4:	d00c      	beq.n	801bf00 <tcp_process+0xfc>
 801bee6:	687b      	ldr	r3, [r7, #4]
 801bee8:	7d1b      	ldrb	r3, [r3, #20]
 801beea:	2b03      	cmp	r3, #3
 801beec:	d008      	beq.n	801bf00 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801beee:	687b      	ldr	r3, [r7, #4]
 801bef0:	8b5b      	ldrh	r3, [r3, #26]
 801bef2:	f043 0302 	orr.w	r3, r3, #2
 801bef6:	b29a      	uxth	r2, r3
 801bef8:	687b      	ldr	r3, [r7, #4]
 801befa:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 801befc:	2300      	movs	r3, #0
 801befe:	e361      	b.n	801c5c4 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801bf00:	687b      	ldr	r3, [r7, #4]
 801bf02:	8b5b      	ldrh	r3, [r3, #26]
 801bf04:	f003 0310 	and.w	r3, r3, #16
 801bf08:	2b00      	cmp	r3, #0
 801bf0a:	d103      	bne.n	801bf14 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 801bf0c:	4b68      	ldr	r3, [pc, #416]	; (801c0b0 <tcp_process+0x2ac>)
 801bf0e:	681a      	ldr	r2, [r3, #0]
 801bf10:	687b      	ldr	r3, [r7, #4]
 801bf12:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 801bf14:	687b      	ldr	r3, [r7, #4]
 801bf16:	2200      	movs	r2, #0
 801bf18:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 801bf1c:	687b      	ldr	r3, [r7, #4]
 801bf1e:	2200      	movs	r2, #0
 801bf20:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 801bf24:	6878      	ldr	r0, [r7, #4]
 801bf26:	f001 fc2f 	bl	801d788 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801bf2a:	687b      	ldr	r3, [r7, #4]
 801bf2c:	7d1b      	ldrb	r3, [r3, #20]
 801bf2e:	3b02      	subs	r3, #2
 801bf30:	2b07      	cmp	r3, #7
 801bf32:	f200 8337 	bhi.w	801c5a4 <tcp_process+0x7a0>
 801bf36:	a201      	add	r2, pc, #4	; (adr r2, 801bf3c <tcp_process+0x138>)
 801bf38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bf3c:	0801bf5d 	.word	0x0801bf5d
 801bf40:	0801c18d 	.word	0x0801c18d
 801bf44:	0801c305 	.word	0x0801c305
 801bf48:	0801c32f 	.word	0x0801c32f
 801bf4c:	0801c453 	.word	0x0801c453
 801bf50:	0801c305 	.word	0x0801c305
 801bf54:	0801c4df 	.word	0x0801c4df
 801bf58:	0801c56f 	.word	0x0801c56f
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 801bf5c:	4b4f      	ldr	r3, [pc, #316]	; (801c09c <tcp_process+0x298>)
 801bf5e:	781b      	ldrb	r3, [r3, #0]
 801bf60:	f003 0310 	and.w	r3, r3, #16
 801bf64:	2b00      	cmp	r3, #0
 801bf66:	f000 80e4 	beq.w	801c132 <tcp_process+0x32e>
 801bf6a:	4b4c      	ldr	r3, [pc, #304]	; (801c09c <tcp_process+0x298>)
 801bf6c:	781b      	ldrb	r3, [r3, #0]
 801bf6e:	f003 0302 	and.w	r3, r3, #2
 801bf72:	2b00      	cmp	r3, #0
 801bf74:	f000 80dd 	beq.w	801c132 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801bf78:	687b      	ldr	r3, [r7, #4]
 801bf7a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801bf7c:	1c5a      	adds	r2, r3, #1
 801bf7e:	4b48      	ldr	r3, [pc, #288]	; (801c0a0 <tcp_process+0x29c>)
 801bf80:	681b      	ldr	r3, [r3, #0]
 801bf82:	429a      	cmp	r2, r3
 801bf84:	f040 80d5 	bne.w	801c132 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801bf88:	4b46      	ldr	r3, [pc, #280]	; (801c0a4 <tcp_process+0x2a0>)
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	1c5a      	adds	r2, r3, #1
 801bf8e:	687b      	ldr	r3, [r7, #4]
 801bf90:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801bf92:	687b      	ldr	r3, [r7, #4]
 801bf94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801bf96:	687b      	ldr	r3, [r7, #4]
 801bf98:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801bf9a:	4b41      	ldr	r3, [pc, #260]	; (801c0a0 <tcp_process+0x29c>)
 801bf9c:	681a      	ldr	r2, [r3, #0]
 801bf9e:	687b      	ldr	r3, [r7, #4]
 801bfa0:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801bfa2:	4b44      	ldr	r3, [pc, #272]	; (801c0b4 <tcp_process+0x2b0>)
 801bfa4:	681b      	ldr	r3, [r3, #0]
 801bfa6:	89db      	ldrh	r3, [r3, #14]
 801bfa8:	b29a      	uxth	r2, r3
 801bfaa:	687b      	ldr	r3, [r7, #4]
 801bfac:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801bfb0:	687b      	ldr	r3, [r7, #4]
 801bfb2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 801bfbc:	4b39      	ldr	r3, [pc, #228]	; (801c0a4 <tcp_process+0x2a0>)
 801bfbe:	681b      	ldr	r3, [r3, #0]
 801bfc0:	1e5a      	subs	r2, r3, #1
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 801bfc6:	687b      	ldr	r3, [r7, #4]
 801bfc8:	2204      	movs	r2, #4
 801bfca:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 801bfcc:	687b      	ldr	r3, [r7, #4]
 801bfce:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801bfd0:	687b      	ldr	r3, [r7, #4]
 801bfd2:	3304      	adds	r3, #4
 801bfd4:	4618      	mov	r0, r3
 801bfd6:	f005 fb17 	bl	8021608 <ip4_route>
 801bfda:	4601      	mov	r1, r0
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	3304      	adds	r3, #4
 801bfe0:	461a      	mov	r2, r3
 801bfe2:	4620      	mov	r0, r4
 801bfe4:	f7ff f88c 	bl	801b100 <tcp_eff_send_mss_netif>
 801bfe8:	4603      	mov	r3, r0
 801bfea:	461a      	mov	r2, r3
 801bfec:	687b      	ldr	r3, [r7, #4]
 801bfee:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bff4:	009a      	lsls	r2, r3, #2
 801bff6:	687b      	ldr	r3, [r7, #4]
 801bff8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801bffa:	005b      	lsls	r3, r3, #1
 801bffc:	f241 111c 	movw	r1, #4380	; 0x111c
 801c000:	428b      	cmp	r3, r1
 801c002:	bf38      	it	cc
 801c004:	460b      	movcc	r3, r1
 801c006:	429a      	cmp	r2, r3
 801c008:	d204      	bcs.n	801c014 <tcp_process+0x210>
 801c00a:	687b      	ldr	r3, [r7, #4]
 801c00c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c00e:	009b      	lsls	r3, r3, #2
 801c010:	b29b      	uxth	r3, r3
 801c012:	e00d      	b.n	801c030 <tcp_process+0x22c>
 801c014:	687b      	ldr	r3, [r7, #4]
 801c016:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c018:	005b      	lsls	r3, r3, #1
 801c01a:	f241 121c 	movw	r2, #4380	; 0x111c
 801c01e:	4293      	cmp	r3, r2
 801c020:	d904      	bls.n	801c02c <tcp_process+0x228>
 801c022:	687b      	ldr	r3, [r7, #4]
 801c024:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c026:	005b      	lsls	r3, r3, #1
 801c028:	b29b      	uxth	r3, r3
 801c02a:	e001      	b.n	801c030 <tcp_process+0x22c>
 801c02c:	f241 131c 	movw	r3, #4380	; 0x111c
 801c030:	687a      	ldr	r2, [r7, #4]
 801c032:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801c036:	687b      	ldr	r3, [r7, #4]
 801c038:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c03c:	2b00      	cmp	r3, #0
 801c03e:	d106      	bne.n	801c04e <tcp_process+0x24a>
 801c040:	4b13      	ldr	r3, [pc, #76]	; (801c090 <tcp_process+0x28c>)
 801c042:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801c046:	491c      	ldr	r1, [pc, #112]	; (801c0b8 <tcp_process+0x2b4>)
 801c048:	4813      	ldr	r0, [pc, #76]	; (801c098 <tcp_process+0x294>)
 801c04a:	f008 f921 	bl	8024290 <iprintf>
        --pcb->snd_queuelen;
 801c04e:	687b      	ldr	r3, [r7, #4]
 801c050:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c054:	3b01      	subs	r3, #1
 801c056:	b29a      	uxth	r2, r3
 801c058:	687b      	ldr	r3, [r7, #4]
 801c05a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 801c05e:	687b      	ldr	r3, [r7, #4]
 801c060:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c062:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 801c064:	69fb      	ldr	r3, [r7, #28]
 801c066:	2b00      	cmp	r3, #0
 801c068:	d12a      	bne.n	801c0c0 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801c06a:	687b      	ldr	r3, [r7, #4]
 801c06c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c06e:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801c070:	69fb      	ldr	r3, [r7, #28]
 801c072:	2b00      	cmp	r3, #0
 801c074:	d106      	bne.n	801c084 <tcp_process+0x280>
 801c076:	4b06      	ldr	r3, [pc, #24]	; (801c090 <tcp_process+0x28c>)
 801c078:	f44f 725d 	mov.w	r2, #884	; 0x374
 801c07c:	490f      	ldr	r1, [pc, #60]	; (801c0bc <tcp_process+0x2b8>)
 801c07e:	4806      	ldr	r0, [pc, #24]	; (801c098 <tcp_process+0x294>)
 801c080:	f008 f906 	bl	8024290 <iprintf>
          pcb->unsent = rseg->next;
 801c084:	69fb      	ldr	r3, [r7, #28]
 801c086:	681a      	ldr	r2, [r3, #0]
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	66da      	str	r2, [r3, #108]	; 0x6c
 801c08c:	e01c      	b.n	801c0c8 <tcp_process+0x2c4>
 801c08e:	bf00      	nop
 801c090:	08027554 	.word	0x08027554
 801c094:	0802778c 	.word	0x0802778c
 801c098:	080275a0 	.word	0x080275a0
 801c09c:	2000c000 	.word	0x2000c000
 801c0a0:	2000bff8 	.word	0x2000bff8
 801c0a4:	2000bff4 	.word	0x2000bff4
 801c0a8:	080277a8 	.word	0x080277a8
 801c0ac:	2000c001 	.word	0x2000c001
 801c0b0:	2000bfbc 	.word	0x2000bfbc
 801c0b4:	2000bfe4 	.word	0x2000bfe4
 801c0b8:	080277c8 	.word	0x080277c8
 801c0bc:	080277e0 	.word	0x080277e0
        } else {
          pcb->unacked = rseg->next;
 801c0c0:	69fb      	ldr	r3, [r7, #28]
 801c0c2:	681a      	ldr	r2, [r3, #0]
 801c0c4:	687b      	ldr	r3, [r7, #4]
 801c0c6:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 801c0c8:	69f8      	ldr	r0, [r7, #28]
 801c0ca:	f7fe fc54 	bl	801a976 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801c0ce:	687b      	ldr	r3, [r7, #4]
 801c0d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d104      	bne.n	801c0e0 <tcp_process+0x2dc>
          pcb->rtime = -1;
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c0dc:	861a      	strh	r2, [r3, #48]	; 0x30
 801c0de:	e006      	b.n	801c0ee <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801c0e0:	687b      	ldr	r3, [r7, #4]
 801c0e2:	2200      	movs	r2, #0
 801c0e4:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 801c0e6:	687b      	ldr	r3, [r7, #4]
 801c0e8:	2200      	movs	r2, #0
 801c0ea:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0f4:	2b00      	cmp	r3, #0
 801c0f6:	d00a      	beq.n	801c10e <tcp_process+0x30a>
 801c0f8:	687b      	ldr	r3, [r7, #4]
 801c0fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801c0fe:	687a      	ldr	r2, [r7, #4]
 801c100:	6910      	ldr	r0, [r2, #16]
 801c102:	2200      	movs	r2, #0
 801c104:	6879      	ldr	r1, [r7, #4]
 801c106:	4798      	blx	r3
 801c108:	4603      	mov	r3, r0
 801c10a:	76bb      	strb	r3, [r7, #26]
 801c10c:	e001      	b.n	801c112 <tcp_process+0x30e>
 801c10e:	2300      	movs	r3, #0
 801c110:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 801c112:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c116:	f113 0f0d 	cmn.w	r3, #13
 801c11a:	d102      	bne.n	801c122 <tcp_process+0x31e>
          return ERR_ABRT;
 801c11c:	f06f 030c 	mvn.w	r3, #12
 801c120:	e250      	b.n	801c5c4 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 801c122:	687b      	ldr	r3, [r7, #4]
 801c124:	8b5b      	ldrh	r3, [r3, #26]
 801c126:	f043 0302 	orr.w	r3, r3, #2
 801c12a:	b29a      	uxth	r2, r3
 801c12c:	687b      	ldr	r3, [r7, #4]
 801c12e:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 801c130:	e23a      	b.n	801c5a8 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 801c132:	4b98      	ldr	r3, [pc, #608]	; (801c394 <tcp_process+0x590>)
 801c134:	781b      	ldrb	r3, [r3, #0]
 801c136:	f003 0310 	and.w	r3, r3, #16
 801c13a:	2b00      	cmp	r3, #0
 801c13c:	f000 8234 	beq.w	801c5a8 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c140:	4b95      	ldr	r3, [pc, #596]	; (801c398 <tcp_process+0x594>)
 801c142:	6819      	ldr	r1, [r3, #0]
 801c144:	4b95      	ldr	r3, [pc, #596]	; (801c39c <tcp_process+0x598>)
 801c146:	881b      	ldrh	r3, [r3, #0]
 801c148:	461a      	mov	r2, r3
 801c14a:	4b95      	ldr	r3, [pc, #596]	; (801c3a0 <tcp_process+0x59c>)
 801c14c:	681b      	ldr	r3, [r3, #0]
 801c14e:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c150:	4b94      	ldr	r3, [pc, #592]	; (801c3a4 <tcp_process+0x5a0>)
 801c152:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c154:	885b      	ldrh	r3, [r3, #2]
 801c156:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c158:	4a92      	ldr	r2, [pc, #584]	; (801c3a4 <tcp_process+0x5a0>)
 801c15a:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c15c:	8812      	ldrh	r2, [r2, #0]
 801c15e:	b292      	uxth	r2, r2
 801c160:	9202      	str	r2, [sp, #8]
 801c162:	9301      	str	r3, [sp, #4]
 801c164:	4b90      	ldr	r3, [pc, #576]	; (801c3a8 <tcp_process+0x5a4>)
 801c166:	9300      	str	r3, [sp, #0]
 801c168:	4b90      	ldr	r3, [pc, #576]	; (801c3ac <tcp_process+0x5a8>)
 801c16a:	4602      	mov	r2, r0
 801c16c:	6878      	ldr	r0, [r7, #4]
 801c16e:	f003 f8dd 	bl	801f32c <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801c172:	687b      	ldr	r3, [r7, #4]
 801c174:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801c178:	2b05      	cmp	r3, #5
 801c17a:	f200 8215 	bhi.w	801c5a8 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801c17e:	687b      	ldr	r3, [r7, #4]
 801c180:	2200      	movs	r2, #0
 801c182:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 801c184:	6878      	ldr	r0, [r7, #4]
 801c186:	f002 fea7 	bl	801eed8 <tcp_rexmit_rto>
      break;
 801c18a:	e20d      	b.n	801c5a8 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 801c18c:	4b81      	ldr	r3, [pc, #516]	; (801c394 <tcp_process+0x590>)
 801c18e:	781b      	ldrb	r3, [r3, #0]
 801c190:	f003 0310 	and.w	r3, r3, #16
 801c194:	2b00      	cmp	r3, #0
 801c196:	f000 80a1 	beq.w	801c2dc <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c19a:	4b7f      	ldr	r3, [pc, #508]	; (801c398 <tcp_process+0x594>)
 801c19c:	681a      	ldr	r2, [r3, #0]
 801c19e:	687b      	ldr	r3, [r7, #4]
 801c1a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c1a2:	1ad3      	subs	r3, r2, r3
 801c1a4:	3b01      	subs	r3, #1
 801c1a6:	2b00      	cmp	r3, #0
 801c1a8:	db7e      	blt.n	801c2a8 <tcp_process+0x4a4>
 801c1aa:	4b7b      	ldr	r3, [pc, #492]	; (801c398 <tcp_process+0x594>)
 801c1ac:	681a      	ldr	r2, [r3, #0]
 801c1ae:	687b      	ldr	r3, [r7, #4]
 801c1b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c1b2:	1ad3      	subs	r3, r2, r3
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	dc77      	bgt.n	801c2a8 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801c1b8:	687b      	ldr	r3, [r7, #4]
 801c1ba:	2204      	movs	r2, #4
 801c1bc:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801c1be:	687b      	ldr	r3, [r7, #4]
 801c1c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d102      	bne.n	801c1cc <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801c1c6:	23fa      	movs	r3, #250	; 0xfa
 801c1c8:	76bb      	strb	r3, [r7, #26]
 801c1ca:	e01d      	b.n	801c208 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 801c1cc:	687b      	ldr	r3, [r7, #4]
 801c1ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1d0:	699b      	ldr	r3, [r3, #24]
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d106      	bne.n	801c1e4 <tcp_process+0x3e0>
 801c1d6:	4b76      	ldr	r3, [pc, #472]	; (801c3b0 <tcp_process+0x5ac>)
 801c1d8:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 801c1dc:	4975      	ldr	r1, [pc, #468]	; (801c3b4 <tcp_process+0x5b0>)
 801c1de:	4876      	ldr	r0, [pc, #472]	; (801c3b8 <tcp_process+0x5b4>)
 801c1e0:	f008 f856 	bl	8024290 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 801c1e4:	687b      	ldr	r3, [r7, #4]
 801c1e6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1e8:	699b      	ldr	r3, [r3, #24]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d00a      	beq.n	801c204 <tcp_process+0x400>
 801c1ee:	687b      	ldr	r3, [r7, #4]
 801c1f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801c1f2:	699b      	ldr	r3, [r3, #24]
 801c1f4:	687a      	ldr	r2, [r7, #4]
 801c1f6:	6910      	ldr	r0, [r2, #16]
 801c1f8:	2200      	movs	r2, #0
 801c1fa:	6879      	ldr	r1, [r7, #4]
 801c1fc:	4798      	blx	r3
 801c1fe:	4603      	mov	r3, r0
 801c200:	76bb      	strb	r3, [r7, #26]
 801c202:	e001      	b.n	801c208 <tcp_process+0x404>
 801c204:	23f0      	movs	r3, #240	; 0xf0
 801c206:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 801c208:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c20c:	2b00      	cmp	r3, #0
 801c20e:	d00a      	beq.n	801c226 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 801c210:	f997 301a 	ldrsb.w	r3, [r7, #26]
 801c214:	f113 0f0d 	cmn.w	r3, #13
 801c218:	d002      	beq.n	801c220 <tcp_process+0x41c>
              tcp_abort(pcb);
 801c21a:	6878      	ldr	r0, [r7, #4]
 801c21c:	f7fd fc00 	bl	8019a20 <tcp_abort>
            }
            return ERR_ABRT;
 801c220:	f06f 030c 	mvn.w	r3, #12
 801c224:	e1ce      	b.n	801c5c4 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801c226:	6878      	ldr	r0, [r7, #4]
 801c228:	f000 fae0 	bl	801c7ec <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 801c22c:	4b63      	ldr	r3, [pc, #396]	; (801c3bc <tcp_process+0x5b8>)
 801c22e:	881b      	ldrh	r3, [r3, #0]
 801c230:	2b00      	cmp	r3, #0
 801c232:	d005      	beq.n	801c240 <tcp_process+0x43c>
            recv_acked--;
 801c234:	4b61      	ldr	r3, [pc, #388]	; (801c3bc <tcp_process+0x5b8>)
 801c236:	881b      	ldrh	r3, [r3, #0]
 801c238:	3b01      	subs	r3, #1
 801c23a:	b29a      	uxth	r2, r3
 801c23c:	4b5f      	ldr	r3, [pc, #380]	; (801c3bc <tcp_process+0x5b8>)
 801c23e:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801c240:	687b      	ldr	r3, [r7, #4]
 801c242:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c244:	009a      	lsls	r2, r3, #2
 801c246:	687b      	ldr	r3, [r7, #4]
 801c248:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c24a:	005b      	lsls	r3, r3, #1
 801c24c:	f241 111c 	movw	r1, #4380	; 0x111c
 801c250:	428b      	cmp	r3, r1
 801c252:	bf38      	it	cc
 801c254:	460b      	movcc	r3, r1
 801c256:	429a      	cmp	r2, r3
 801c258:	d204      	bcs.n	801c264 <tcp_process+0x460>
 801c25a:	687b      	ldr	r3, [r7, #4]
 801c25c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c25e:	009b      	lsls	r3, r3, #2
 801c260:	b29b      	uxth	r3, r3
 801c262:	e00d      	b.n	801c280 <tcp_process+0x47c>
 801c264:	687b      	ldr	r3, [r7, #4]
 801c266:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c268:	005b      	lsls	r3, r3, #1
 801c26a:	f241 121c 	movw	r2, #4380	; 0x111c
 801c26e:	4293      	cmp	r3, r2
 801c270:	d904      	bls.n	801c27c <tcp_process+0x478>
 801c272:	687b      	ldr	r3, [r7, #4]
 801c274:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c276:	005b      	lsls	r3, r3, #1
 801c278:	b29b      	uxth	r3, r3
 801c27a:	e001      	b.n	801c280 <tcp_process+0x47c>
 801c27c:	f241 131c 	movw	r3, #4380	; 0x111c
 801c280:	687a      	ldr	r2, [r7, #4]
 801c282:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801c286:	4b4e      	ldr	r3, [pc, #312]	; (801c3c0 <tcp_process+0x5bc>)
 801c288:	781b      	ldrb	r3, [r3, #0]
 801c28a:	f003 0320 	and.w	r3, r3, #32
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d037      	beq.n	801c302 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801c292:	687b      	ldr	r3, [r7, #4]
 801c294:	8b5b      	ldrh	r3, [r3, #26]
 801c296:	f043 0302 	orr.w	r3, r3, #2
 801c29a:	b29a      	uxth	r2, r3
 801c29c:	687b      	ldr	r3, [r7, #4]
 801c29e:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801c2a0:	687b      	ldr	r3, [r7, #4]
 801c2a2:	2207      	movs	r2, #7
 801c2a4:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801c2a6:	e02c      	b.n	801c302 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2a8:	4b3b      	ldr	r3, [pc, #236]	; (801c398 <tcp_process+0x594>)
 801c2aa:	6819      	ldr	r1, [r3, #0]
 801c2ac:	4b3b      	ldr	r3, [pc, #236]	; (801c39c <tcp_process+0x598>)
 801c2ae:	881b      	ldrh	r3, [r3, #0]
 801c2b0:	461a      	mov	r2, r3
 801c2b2:	4b3b      	ldr	r3, [pc, #236]	; (801c3a0 <tcp_process+0x59c>)
 801c2b4:	681b      	ldr	r3, [r3, #0]
 801c2b6:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c2b8:	4b3a      	ldr	r3, [pc, #232]	; (801c3a4 <tcp_process+0x5a0>)
 801c2ba:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2bc:	885b      	ldrh	r3, [r3, #2]
 801c2be:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801c2c0:	4a38      	ldr	r2, [pc, #224]	; (801c3a4 <tcp_process+0x5a0>)
 801c2c2:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801c2c4:	8812      	ldrh	r2, [r2, #0]
 801c2c6:	b292      	uxth	r2, r2
 801c2c8:	9202      	str	r2, [sp, #8]
 801c2ca:	9301      	str	r3, [sp, #4]
 801c2cc:	4b36      	ldr	r3, [pc, #216]	; (801c3a8 <tcp_process+0x5a4>)
 801c2ce:	9300      	str	r3, [sp, #0]
 801c2d0:	4b36      	ldr	r3, [pc, #216]	; (801c3ac <tcp_process+0x5a8>)
 801c2d2:	4602      	mov	r2, r0
 801c2d4:	6878      	ldr	r0, [r7, #4]
 801c2d6:	f003 f829 	bl	801f32c <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 801c2da:	e167      	b.n	801c5ac <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 801c2dc:	4b2d      	ldr	r3, [pc, #180]	; (801c394 <tcp_process+0x590>)
 801c2de:	781b      	ldrb	r3, [r3, #0]
 801c2e0:	f003 0302 	and.w	r3, r3, #2
 801c2e4:	2b00      	cmp	r3, #0
 801c2e6:	f000 8161 	beq.w	801c5ac <tcp_process+0x7a8>
 801c2ea:	687b      	ldr	r3, [r7, #4]
 801c2ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c2ee:	1e5a      	subs	r2, r3, #1
 801c2f0:	4b2b      	ldr	r3, [pc, #172]	; (801c3a0 <tcp_process+0x59c>)
 801c2f2:	681b      	ldr	r3, [r3, #0]
 801c2f4:	429a      	cmp	r2, r3
 801c2f6:	f040 8159 	bne.w	801c5ac <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 801c2fa:	6878      	ldr	r0, [r7, #4]
 801c2fc:	f002 fe0e 	bl	801ef1c <tcp_rexmit>
      break;
 801c300:	e154      	b.n	801c5ac <tcp_process+0x7a8>
 801c302:	e153      	b.n	801c5ac <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 801c304:	6878      	ldr	r0, [r7, #4]
 801c306:	f000 fa71 	bl	801c7ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 801c30a:	4b2d      	ldr	r3, [pc, #180]	; (801c3c0 <tcp_process+0x5bc>)
 801c30c:	781b      	ldrb	r3, [r3, #0]
 801c30e:	f003 0320 	and.w	r3, r3, #32
 801c312:	2b00      	cmp	r3, #0
 801c314:	f000 814c 	beq.w	801c5b0 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 801c318:	687b      	ldr	r3, [r7, #4]
 801c31a:	8b5b      	ldrh	r3, [r3, #26]
 801c31c:	f043 0302 	orr.w	r3, r3, #2
 801c320:	b29a      	uxth	r2, r3
 801c322:	687b      	ldr	r3, [r7, #4]
 801c324:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 801c326:	687b      	ldr	r3, [r7, #4]
 801c328:	2207      	movs	r2, #7
 801c32a:	751a      	strb	r2, [r3, #20]
      }
      break;
 801c32c:	e140      	b.n	801c5b0 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 801c32e:	6878      	ldr	r0, [r7, #4]
 801c330:	f000 fa5c 	bl	801c7ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c334:	4b22      	ldr	r3, [pc, #136]	; (801c3c0 <tcp_process+0x5bc>)
 801c336:	781b      	ldrb	r3, [r3, #0]
 801c338:	f003 0320 	and.w	r3, r3, #32
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d071      	beq.n	801c424 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c340:	4b14      	ldr	r3, [pc, #80]	; (801c394 <tcp_process+0x590>)
 801c342:	781b      	ldrb	r3, [r3, #0]
 801c344:	f003 0310 	and.w	r3, r3, #16
 801c348:	2b00      	cmp	r3, #0
 801c34a:	d060      	beq.n	801c40e <tcp_process+0x60a>
 801c34c:	687b      	ldr	r3, [r7, #4]
 801c34e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c350:	4b11      	ldr	r3, [pc, #68]	; (801c398 <tcp_process+0x594>)
 801c352:	681b      	ldr	r3, [r3, #0]
 801c354:	429a      	cmp	r2, r3
 801c356:	d15a      	bne.n	801c40e <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801c358:	687b      	ldr	r3, [r7, #4]
 801c35a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d156      	bne.n	801c40e <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 801c360:	687b      	ldr	r3, [r7, #4]
 801c362:	8b5b      	ldrh	r3, [r3, #26]
 801c364:	f043 0302 	orr.w	r3, r3, #2
 801c368:	b29a      	uxth	r2, r3
 801c36a:	687b      	ldr	r3, [r7, #4]
 801c36c:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801c36e:	6878      	ldr	r0, [r7, #4]
 801c370:	f7fe fdbc 	bl	801aeec <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 801c374:	4b13      	ldr	r3, [pc, #76]	; (801c3c4 <tcp_process+0x5c0>)
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	687a      	ldr	r2, [r7, #4]
 801c37a:	429a      	cmp	r2, r3
 801c37c:	d105      	bne.n	801c38a <tcp_process+0x586>
 801c37e:	4b11      	ldr	r3, [pc, #68]	; (801c3c4 <tcp_process+0x5c0>)
 801c380:	681b      	ldr	r3, [r3, #0]
 801c382:	68db      	ldr	r3, [r3, #12]
 801c384:	4a0f      	ldr	r2, [pc, #60]	; (801c3c4 <tcp_process+0x5c0>)
 801c386:	6013      	str	r3, [r2, #0]
 801c388:	e02e      	b.n	801c3e8 <tcp_process+0x5e4>
 801c38a:	4b0e      	ldr	r3, [pc, #56]	; (801c3c4 <tcp_process+0x5c0>)
 801c38c:	681b      	ldr	r3, [r3, #0]
 801c38e:	617b      	str	r3, [r7, #20]
 801c390:	e027      	b.n	801c3e2 <tcp_process+0x5de>
 801c392:	bf00      	nop
 801c394:	2000c000 	.word	0x2000c000
 801c398:	2000bff8 	.word	0x2000bff8
 801c39c:	2000bffe 	.word	0x2000bffe
 801c3a0:	2000bff4 	.word	0x2000bff4
 801c3a4:	2000bfe4 	.word	0x2000bfe4
 801c3a8:	200066b8 	.word	0x200066b8
 801c3ac:	200066bc 	.word	0x200066bc
 801c3b0:	08027554 	.word	0x08027554
 801c3b4:	080277f4 	.word	0x080277f4
 801c3b8:	080275a0 	.word	0x080275a0
 801c3bc:	2000bffc 	.word	0x2000bffc
 801c3c0:	2000c001 	.word	0x2000c001
 801c3c4:	2000bfc8 	.word	0x2000bfc8
 801c3c8:	697b      	ldr	r3, [r7, #20]
 801c3ca:	68db      	ldr	r3, [r3, #12]
 801c3cc:	687a      	ldr	r2, [r7, #4]
 801c3ce:	429a      	cmp	r2, r3
 801c3d0:	d104      	bne.n	801c3dc <tcp_process+0x5d8>
 801c3d2:	687b      	ldr	r3, [r7, #4]
 801c3d4:	68da      	ldr	r2, [r3, #12]
 801c3d6:	697b      	ldr	r3, [r7, #20]
 801c3d8:	60da      	str	r2, [r3, #12]
 801c3da:	e005      	b.n	801c3e8 <tcp_process+0x5e4>
 801c3dc:	697b      	ldr	r3, [r7, #20]
 801c3de:	68db      	ldr	r3, [r3, #12]
 801c3e0:	617b      	str	r3, [r7, #20]
 801c3e2:	697b      	ldr	r3, [r7, #20]
 801c3e4:	2b00      	cmp	r3, #0
 801c3e6:	d1ef      	bne.n	801c3c8 <tcp_process+0x5c4>
 801c3e8:	687b      	ldr	r3, [r7, #4]
 801c3ea:	2200      	movs	r2, #0
 801c3ec:	60da      	str	r2, [r3, #12]
 801c3ee:	4b77      	ldr	r3, [pc, #476]	; (801c5cc <tcp_process+0x7c8>)
 801c3f0:	2201      	movs	r2, #1
 801c3f2:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 801c3f4:	687b      	ldr	r3, [r7, #4]
 801c3f6:	220a      	movs	r2, #10
 801c3f8:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 801c3fa:	4b75      	ldr	r3, [pc, #468]	; (801c5d0 <tcp_process+0x7cc>)
 801c3fc:	681a      	ldr	r2, [r3, #0]
 801c3fe:	687b      	ldr	r3, [r7, #4]
 801c400:	60da      	str	r2, [r3, #12]
 801c402:	4a73      	ldr	r2, [pc, #460]	; (801c5d0 <tcp_process+0x7cc>)
 801c404:	687b      	ldr	r3, [r7, #4]
 801c406:	6013      	str	r3, [r2, #0]
 801c408:	f003 f952 	bl	801f6b0 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 801c40c:	e0d2      	b.n	801c5b4 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 801c40e:	687b      	ldr	r3, [r7, #4]
 801c410:	8b5b      	ldrh	r3, [r3, #26]
 801c412:	f043 0302 	orr.w	r3, r3, #2
 801c416:	b29a      	uxth	r2, r3
 801c418:	687b      	ldr	r3, [r7, #4]
 801c41a:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 801c41c:	687b      	ldr	r3, [r7, #4]
 801c41e:	2208      	movs	r2, #8
 801c420:	751a      	strb	r2, [r3, #20]
      break;
 801c422:	e0c7      	b.n	801c5b4 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c424:	4b6b      	ldr	r3, [pc, #428]	; (801c5d4 <tcp_process+0x7d0>)
 801c426:	781b      	ldrb	r3, [r3, #0]
 801c428:	f003 0310 	and.w	r3, r3, #16
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	f000 80c1 	beq.w	801c5b4 <tcp_process+0x7b0>
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c436:	4b68      	ldr	r3, [pc, #416]	; (801c5d8 <tcp_process+0x7d4>)
 801c438:	681b      	ldr	r3, [r3, #0]
 801c43a:	429a      	cmp	r2, r3
 801c43c:	f040 80ba 	bne.w	801c5b4 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 801c440:	687b      	ldr	r3, [r7, #4]
 801c442:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 801c444:	2b00      	cmp	r3, #0
 801c446:	f040 80b5 	bne.w	801c5b4 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801c44a:	687b      	ldr	r3, [r7, #4]
 801c44c:	2206      	movs	r2, #6
 801c44e:	751a      	strb	r2, [r3, #20]
      break;
 801c450:	e0b0      	b.n	801c5b4 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 801c452:	6878      	ldr	r0, [r7, #4]
 801c454:	f000 f9ca 	bl	801c7ec <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801c458:	4b60      	ldr	r3, [pc, #384]	; (801c5dc <tcp_process+0x7d8>)
 801c45a:	781b      	ldrb	r3, [r3, #0]
 801c45c:	f003 0320 	and.w	r3, r3, #32
 801c460:	2b00      	cmp	r3, #0
 801c462:	f000 80a9 	beq.w	801c5b8 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801c466:	687b      	ldr	r3, [r7, #4]
 801c468:	8b5b      	ldrh	r3, [r3, #26]
 801c46a:	f043 0302 	orr.w	r3, r3, #2
 801c46e:	b29a      	uxth	r2, r3
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 801c474:	6878      	ldr	r0, [r7, #4]
 801c476:	f7fe fd39 	bl	801aeec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c47a:	4b59      	ldr	r3, [pc, #356]	; (801c5e0 <tcp_process+0x7dc>)
 801c47c:	681b      	ldr	r3, [r3, #0]
 801c47e:	687a      	ldr	r2, [r7, #4]
 801c480:	429a      	cmp	r2, r3
 801c482:	d105      	bne.n	801c490 <tcp_process+0x68c>
 801c484:	4b56      	ldr	r3, [pc, #344]	; (801c5e0 <tcp_process+0x7dc>)
 801c486:	681b      	ldr	r3, [r3, #0]
 801c488:	68db      	ldr	r3, [r3, #12]
 801c48a:	4a55      	ldr	r2, [pc, #340]	; (801c5e0 <tcp_process+0x7dc>)
 801c48c:	6013      	str	r3, [r2, #0]
 801c48e:	e013      	b.n	801c4b8 <tcp_process+0x6b4>
 801c490:	4b53      	ldr	r3, [pc, #332]	; (801c5e0 <tcp_process+0x7dc>)
 801c492:	681b      	ldr	r3, [r3, #0]
 801c494:	613b      	str	r3, [r7, #16]
 801c496:	e00c      	b.n	801c4b2 <tcp_process+0x6ae>
 801c498:	693b      	ldr	r3, [r7, #16]
 801c49a:	68db      	ldr	r3, [r3, #12]
 801c49c:	687a      	ldr	r2, [r7, #4]
 801c49e:	429a      	cmp	r2, r3
 801c4a0:	d104      	bne.n	801c4ac <tcp_process+0x6a8>
 801c4a2:	687b      	ldr	r3, [r7, #4]
 801c4a4:	68da      	ldr	r2, [r3, #12]
 801c4a6:	693b      	ldr	r3, [r7, #16]
 801c4a8:	60da      	str	r2, [r3, #12]
 801c4aa:	e005      	b.n	801c4b8 <tcp_process+0x6b4>
 801c4ac:	693b      	ldr	r3, [r7, #16]
 801c4ae:	68db      	ldr	r3, [r3, #12]
 801c4b0:	613b      	str	r3, [r7, #16]
 801c4b2:	693b      	ldr	r3, [r7, #16]
 801c4b4:	2b00      	cmp	r3, #0
 801c4b6:	d1ef      	bne.n	801c498 <tcp_process+0x694>
 801c4b8:	687b      	ldr	r3, [r7, #4]
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	60da      	str	r2, [r3, #12]
 801c4be:	4b43      	ldr	r3, [pc, #268]	; (801c5cc <tcp_process+0x7c8>)
 801c4c0:	2201      	movs	r2, #1
 801c4c2:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c4c4:	687b      	ldr	r3, [r7, #4]
 801c4c6:	220a      	movs	r2, #10
 801c4c8:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c4ca:	4b41      	ldr	r3, [pc, #260]	; (801c5d0 <tcp_process+0x7cc>)
 801c4cc:	681a      	ldr	r2, [r3, #0]
 801c4ce:	687b      	ldr	r3, [r7, #4]
 801c4d0:	60da      	str	r2, [r3, #12]
 801c4d2:	4a3f      	ldr	r2, [pc, #252]	; (801c5d0 <tcp_process+0x7cc>)
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	6013      	str	r3, [r2, #0]
 801c4d8:	f003 f8ea 	bl	801f6b0 <tcp_timer_needed>
      }
      break;
 801c4dc:	e06c      	b.n	801c5b8 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801c4de:	6878      	ldr	r0, [r7, #4]
 801c4e0:	f000 f984 	bl	801c7ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c4e4:	4b3b      	ldr	r3, [pc, #236]	; (801c5d4 <tcp_process+0x7d0>)
 801c4e6:	781b      	ldrb	r3, [r3, #0]
 801c4e8:	f003 0310 	and.w	r3, r3, #16
 801c4ec:	2b00      	cmp	r3, #0
 801c4ee:	d065      	beq.n	801c5bc <tcp_process+0x7b8>
 801c4f0:	687b      	ldr	r3, [r7, #4]
 801c4f2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c4f4:	4b38      	ldr	r3, [pc, #224]	; (801c5d8 <tcp_process+0x7d4>)
 801c4f6:	681b      	ldr	r3, [r3, #0]
 801c4f8:	429a      	cmp	r2, r3
 801c4fa:	d15f      	bne.n	801c5bc <tcp_process+0x7b8>
 801c4fc:	687b      	ldr	r3, [r7, #4]
 801c4fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c500:	2b00      	cmp	r3, #0
 801c502:	d15b      	bne.n	801c5bc <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 801c504:	6878      	ldr	r0, [r7, #4]
 801c506:	f7fe fcf1 	bl	801aeec <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801c50a:	4b35      	ldr	r3, [pc, #212]	; (801c5e0 <tcp_process+0x7dc>)
 801c50c:	681b      	ldr	r3, [r3, #0]
 801c50e:	687a      	ldr	r2, [r7, #4]
 801c510:	429a      	cmp	r2, r3
 801c512:	d105      	bne.n	801c520 <tcp_process+0x71c>
 801c514:	4b32      	ldr	r3, [pc, #200]	; (801c5e0 <tcp_process+0x7dc>)
 801c516:	681b      	ldr	r3, [r3, #0]
 801c518:	68db      	ldr	r3, [r3, #12]
 801c51a:	4a31      	ldr	r2, [pc, #196]	; (801c5e0 <tcp_process+0x7dc>)
 801c51c:	6013      	str	r3, [r2, #0]
 801c51e:	e013      	b.n	801c548 <tcp_process+0x744>
 801c520:	4b2f      	ldr	r3, [pc, #188]	; (801c5e0 <tcp_process+0x7dc>)
 801c522:	681b      	ldr	r3, [r3, #0]
 801c524:	60fb      	str	r3, [r7, #12]
 801c526:	e00c      	b.n	801c542 <tcp_process+0x73e>
 801c528:	68fb      	ldr	r3, [r7, #12]
 801c52a:	68db      	ldr	r3, [r3, #12]
 801c52c:	687a      	ldr	r2, [r7, #4]
 801c52e:	429a      	cmp	r2, r3
 801c530:	d104      	bne.n	801c53c <tcp_process+0x738>
 801c532:	687b      	ldr	r3, [r7, #4]
 801c534:	68da      	ldr	r2, [r3, #12]
 801c536:	68fb      	ldr	r3, [r7, #12]
 801c538:	60da      	str	r2, [r3, #12]
 801c53a:	e005      	b.n	801c548 <tcp_process+0x744>
 801c53c:	68fb      	ldr	r3, [r7, #12]
 801c53e:	68db      	ldr	r3, [r3, #12]
 801c540:	60fb      	str	r3, [r7, #12]
 801c542:	68fb      	ldr	r3, [r7, #12]
 801c544:	2b00      	cmp	r3, #0
 801c546:	d1ef      	bne.n	801c528 <tcp_process+0x724>
 801c548:	687b      	ldr	r3, [r7, #4]
 801c54a:	2200      	movs	r2, #0
 801c54c:	60da      	str	r2, [r3, #12]
 801c54e:	4b1f      	ldr	r3, [pc, #124]	; (801c5cc <tcp_process+0x7c8>)
 801c550:	2201      	movs	r2, #1
 801c552:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	220a      	movs	r2, #10
 801c558:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801c55a:	4b1d      	ldr	r3, [pc, #116]	; (801c5d0 <tcp_process+0x7cc>)
 801c55c:	681a      	ldr	r2, [r3, #0]
 801c55e:	687b      	ldr	r3, [r7, #4]
 801c560:	60da      	str	r2, [r3, #12]
 801c562:	4a1b      	ldr	r2, [pc, #108]	; (801c5d0 <tcp_process+0x7cc>)
 801c564:	687b      	ldr	r3, [r7, #4]
 801c566:	6013      	str	r3, [r2, #0]
 801c568:	f003 f8a2 	bl	801f6b0 <tcp_timer_needed>
      }
      break;
 801c56c:	e026      	b.n	801c5bc <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801c56e:	6878      	ldr	r0, [r7, #4]
 801c570:	f000 f93c 	bl	801c7ec <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 801c574:	4b17      	ldr	r3, [pc, #92]	; (801c5d4 <tcp_process+0x7d0>)
 801c576:	781b      	ldrb	r3, [r3, #0]
 801c578:	f003 0310 	and.w	r3, r3, #16
 801c57c:	2b00      	cmp	r3, #0
 801c57e:	d01f      	beq.n	801c5c0 <tcp_process+0x7bc>
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c584:	4b14      	ldr	r3, [pc, #80]	; (801c5d8 <tcp_process+0x7d4>)
 801c586:	681b      	ldr	r3, [r3, #0]
 801c588:	429a      	cmp	r2, r3
 801c58a:	d119      	bne.n	801c5c0 <tcp_process+0x7bc>
 801c58c:	687b      	ldr	r3, [r7, #4]
 801c58e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801c590:	2b00      	cmp	r3, #0
 801c592:	d115      	bne.n	801c5c0 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 801c594:	4b11      	ldr	r3, [pc, #68]	; (801c5dc <tcp_process+0x7d8>)
 801c596:	781b      	ldrb	r3, [r3, #0]
 801c598:	f043 0310 	orr.w	r3, r3, #16
 801c59c:	b2da      	uxtb	r2, r3
 801c59e:	4b0f      	ldr	r3, [pc, #60]	; (801c5dc <tcp_process+0x7d8>)
 801c5a0:	701a      	strb	r2, [r3, #0]
      }
      break;
 801c5a2:	e00d      	b.n	801c5c0 <tcp_process+0x7bc>
    default:
      break;
 801c5a4:	bf00      	nop
 801c5a6:	e00c      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5a8:	bf00      	nop
 801c5aa:	e00a      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5ac:	bf00      	nop
 801c5ae:	e008      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5b0:	bf00      	nop
 801c5b2:	e006      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5b4:	bf00      	nop
 801c5b6:	e004      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5b8:	bf00      	nop
 801c5ba:	e002      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5bc:	bf00      	nop
 801c5be:	e000      	b.n	801c5c2 <tcp_process+0x7be>
      break;
 801c5c0:	bf00      	nop
  }
  return ERR_OK;
 801c5c2:	2300      	movs	r3, #0
}
 801c5c4:	4618      	mov	r0, r3
 801c5c6:	3724      	adds	r7, #36	; 0x24
 801c5c8:	46bd      	mov	sp, r7
 801c5ca:	bd90      	pop	{r4, r7, pc}
 801c5cc:	2000bfd0 	.word	0x2000bfd0
 801c5d0:	2000bfcc 	.word	0x2000bfcc
 801c5d4:	2000c000 	.word	0x2000c000
 801c5d8:	2000bff8 	.word	0x2000bff8
 801c5dc:	2000c001 	.word	0x2000c001
 801c5e0:	2000bfc8 	.word	0x2000bfc8

0801c5e4 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 801c5e4:	b590      	push	{r4, r7, lr}
 801c5e6:	b085      	sub	sp, #20
 801c5e8:	af00      	add	r7, sp, #0
 801c5ea:	6078      	str	r0, [r7, #4]
 801c5ec:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801c5ee:	687b      	ldr	r3, [r7, #4]
 801c5f0:	2b00      	cmp	r3, #0
 801c5f2:	d106      	bne.n	801c602 <tcp_oos_insert_segment+0x1e>
 801c5f4:	4b3b      	ldr	r3, [pc, #236]	; (801c6e4 <tcp_oos_insert_segment+0x100>)
 801c5f6:	f240 421f 	movw	r2, #1055	; 0x41f
 801c5fa:	493b      	ldr	r1, [pc, #236]	; (801c6e8 <tcp_oos_insert_segment+0x104>)
 801c5fc:	483b      	ldr	r0, [pc, #236]	; (801c6ec <tcp_oos_insert_segment+0x108>)
 801c5fe:	f007 fe47 	bl	8024290 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801c602:	687b      	ldr	r3, [r7, #4]
 801c604:	68db      	ldr	r3, [r3, #12]
 801c606:	899b      	ldrh	r3, [r3, #12]
 801c608:	b29b      	uxth	r3, r3
 801c60a:	4618      	mov	r0, r3
 801c60c:	f7fb f816 	bl	801763c <lwip_htons>
 801c610:	4603      	mov	r3, r0
 801c612:	b2db      	uxtb	r3, r3
 801c614:	f003 0301 	and.w	r3, r3, #1
 801c618:	2b00      	cmp	r3, #0
 801c61a:	d028      	beq.n	801c66e <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 801c61c:	6838      	ldr	r0, [r7, #0]
 801c61e:	f7fe f995 	bl	801a94c <tcp_segs_free>
    next = NULL;
 801c622:	2300      	movs	r3, #0
 801c624:	603b      	str	r3, [r7, #0]
 801c626:	e056      	b.n	801c6d6 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801c628:	683b      	ldr	r3, [r7, #0]
 801c62a:	68db      	ldr	r3, [r3, #12]
 801c62c:	899b      	ldrh	r3, [r3, #12]
 801c62e:	b29b      	uxth	r3, r3
 801c630:	4618      	mov	r0, r3
 801c632:	f7fb f803 	bl	801763c <lwip_htons>
 801c636:	4603      	mov	r3, r0
 801c638:	b2db      	uxtb	r3, r3
 801c63a:	f003 0301 	and.w	r3, r3, #1
 801c63e:	2b00      	cmp	r3, #0
 801c640:	d00d      	beq.n	801c65e <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 801c642:	687b      	ldr	r3, [r7, #4]
 801c644:	68db      	ldr	r3, [r3, #12]
 801c646:	899b      	ldrh	r3, [r3, #12]
 801c648:	b29c      	uxth	r4, r3
 801c64a:	2001      	movs	r0, #1
 801c64c:	f7fa fff6 	bl	801763c <lwip_htons>
 801c650:	4603      	mov	r3, r0
 801c652:	461a      	mov	r2, r3
 801c654:	687b      	ldr	r3, [r7, #4]
 801c656:	68db      	ldr	r3, [r3, #12]
 801c658:	4322      	orrs	r2, r4
 801c65a:	b292      	uxth	r2, r2
 801c65c:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 801c65e:	683b      	ldr	r3, [r7, #0]
 801c660:	60fb      	str	r3, [r7, #12]
      next = next->next;
 801c662:	683b      	ldr	r3, [r7, #0]
 801c664:	681b      	ldr	r3, [r3, #0]
 801c666:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801c668:	68f8      	ldr	r0, [r7, #12]
 801c66a:	f7fe f984 	bl	801a976 <tcp_seg_free>
    while (next &&
 801c66e:	683b      	ldr	r3, [r7, #0]
 801c670:	2b00      	cmp	r3, #0
 801c672:	d00e      	beq.n	801c692 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 801c674:	687b      	ldr	r3, [r7, #4]
 801c676:	891b      	ldrh	r3, [r3, #8]
 801c678:	461a      	mov	r2, r3
 801c67a:	4b1d      	ldr	r3, [pc, #116]	; (801c6f0 <tcp_oos_insert_segment+0x10c>)
 801c67c:	681b      	ldr	r3, [r3, #0]
 801c67e:	441a      	add	r2, r3
 801c680:	683b      	ldr	r3, [r7, #0]
 801c682:	68db      	ldr	r3, [r3, #12]
 801c684:	685b      	ldr	r3, [r3, #4]
 801c686:	6839      	ldr	r1, [r7, #0]
 801c688:	8909      	ldrh	r1, [r1, #8]
 801c68a:	440b      	add	r3, r1
 801c68c:	1ad3      	subs	r3, r2, r3
    while (next &&
 801c68e:	2b00      	cmp	r3, #0
 801c690:	daca      	bge.n	801c628 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801c692:	683b      	ldr	r3, [r7, #0]
 801c694:	2b00      	cmp	r3, #0
 801c696:	d01e      	beq.n	801c6d6 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801c698:	687b      	ldr	r3, [r7, #4]
 801c69a:	891b      	ldrh	r3, [r3, #8]
 801c69c:	461a      	mov	r2, r3
 801c69e:	4b14      	ldr	r3, [pc, #80]	; (801c6f0 <tcp_oos_insert_segment+0x10c>)
 801c6a0:	681b      	ldr	r3, [r3, #0]
 801c6a2:	441a      	add	r2, r3
 801c6a4:	683b      	ldr	r3, [r7, #0]
 801c6a6:	68db      	ldr	r3, [r3, #12]
 801c6a8:	685b      	ldr	r3, [r3, #4]
 801c6aa:	1ad3      	subs	r3, r2, r3
    if (next &&
 801c6ac:	2b00      	cmp	r3, #0
 801c6ae:	dd12      	ble.n	801c6d6 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801c6b0:	683b      	ldr	r3, [r7, #0]
 801c6b2:	68db      	ldr	r3, [r3, #12]
 801c6b4:	685b      	ldr	r3, [r3, #4]
 801c6b6:	b29a      	uxth	r2, r3
 801c6b8:	4b0d      	ldr	r3, [pc, #52]	; (801c6f0 <tcp_oos_insert_segment+0x10c>)
 801c6ba:	681b      	ldr	r3, [r3, #0]
 801c6bc:	b29b      	uxth	r3, r3
 801c6be:	1ad3      	subs	r3, r2, r3
 801c6c0:	b29a      	uxth	r2, r3
 801c6c2:	687b      	ldr	r3, [r7, #4]
 801c6c4:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801c6c6:	687b      	ldr	r3, [r7, #4]
 801c6c8:	685a      	ldr	r2, [r3, #4]
 801c6ca:	687b      	ldr	r3, [r7, #4]
 801c6cc:	891b      	ldrh	r3, [r3, #8]
 801c6ce:	4619      	mov	r1, r3
 801c6d0:	4610      	mov	r0, r2
 801c6d2:	f7fc fa1f 	bl	8018b14 <pbuf_realloc>
    }
  }
  cseg->next = next;
 801c6d6:	687b      	ldr	r3, [r7, #4]
 801c6d8:	683a      	ldr	r2, [r7, #0]
 801c6da:	601a      	str	r2, [r3, #0]
}
 801c6dc:	bf00      	nop
 801c6de:	3714      	adds	r7, #20
 801c6e0:	46bd      	mov	sp, r7
 801c6e2:	bd90      	pop	{r4, r7, pc}
 801c6e4:	08027554 	.word	0x08027554
 801c6e8:	08027814 	.word	0x08027814
 801c6ec:	080275a0 	.word	0x080275a0
 801c6f0:	2000bff4 	.word	0x2000bff4

0801c6f4 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 801c6f4:	b5b0      	push	{r4, r5, r7, lr}
 801c6f6:	b086      	sub	sp, #24
 801c6f8:	af00      	add	r7, sp, #0
 801c6fa:	60f8      	str	r0, [r7, #12]
 801c6fc:	60b9      	str	r1, [r7, #8]
 801c6fe:	607a      	str	r2, [r7, #4]
 801c700:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801c702:	e03e      	b.n	801c782 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 801c704:	68bb      	ldr	r3, [r7, #8]
 801c706:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	681b      	ldr	r3, [r3, #0]
 801c70c:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 801c70e:	697b      	ldr	r3, [r7, #20]
 801c710:	685b      	ldr	r3, [r3, #4]
 801c712:	4618      	mov	r0, r3
 801c714:	f7fc fc12 	bl	8018f3c <pbuf_clen>
 801c718:	4603      	mov	r3, r0
 801c71a:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 801c71c:	68fb      	ldr	r3, [r7, #12]
 801c71e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c722:	8a7a      	ldrh	r2, [r7, #18]
 801c724:	429a      	cmp	r2, r3
 801c726:	d906      	bls.n	801c736 <tcp_free_acked_segments+0x42>
 801c728:	4b2a      	ldr	r3, [pc, #168]	; (801c7d4 <tcp_free_acked_segments+0xe0>)
 801c72a:	f240 4257 	movw	r2, #1111	; 0x457
 801c72e:	492a      	ldr	r1, [pc, #168]	; (801c7d8 <tcp_free_acked_segments+0xe4>)
 801c730:	482a      	ldr	r0, [pc, #168]	; (801c7dc <tcp_free_acked_segments+0xe8>)
 801c732:	f007 fdad 	bl	8024290 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801c736:	68fb      	ldr	r3, [r7, #12]
 801c738:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 801c73c:	8a7b      	ldrh	r3, [r7, #18]
 801c73e:	1ad3      	subs	r3, r2, r3
 801c740:	b29a      	uxth	r2, r3
 801c742:	68fb      	ldr	r3, [r7, #12]
 801c744:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801c748:	697b      	ldr	r3, [r7, #20]
 801c74a:	891a      	ldrh	r2, [r3, #8]
 801c74c:	4b24      	ldr	r3, [pc, #144]	; (801c7e0 <tcp_free_acked_segments+0xec>)
 801c74e:	881b      	ldrh	r3, [r3, #0]
 801c750:	4413      	add	r3, r2
 801c752:	b29a      	uxth	r2, r3
 801c754:	4b22      	ldr	r3, [pc, #136]	; (801c7e0 <tcp_free_acked_segments+0xec>)
 801c756:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801c758:	6978      	ldr	r0, [r7, #20]
 801c75a:	f7fe f90c 	bl	801a976 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 801c75e:	68fb      	ldr	r3, [r7, #12]
 801c760:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801c764:	2b00      	cmp	r3, #0
 801c766:	d00c      	beq.n	801c782 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801c768:	68bb      	ldr	r3, [r7, #8]
 801c76a:	2b00      	cmp	r3, #0
 801c76c:	d109      	bne.n	801c782 <tcp_free_acked_segments+0x8e>
 801c76e:	683b      	ldr	r3, [r7, #0]
 801c770:	2b00      	cmp	r3, #0
 801c772:	d106      	bne.n	801c782 <tcp_free_acked_segments+0x8e>
 801c774:	4b17      	ldr	r3, [pc, #92]	; (801c7d4 <tcp_free_acked_segments+0xe0>)
 801c776:	f240 4261 	movw	r2, #1121	; 0x461
 801c77a:	491a      	ldr	r1, [pc, #104]	; (801c7e4 <tcp_free_acked_segments+0xf0>)
 801c77c:	4817      	ldr	r0, [pc, #92]	; (801c7dc <tcp_free_acked_segments+0xe8>)
 801c77e:	f007 fd87 	bl	8024290 <iprintf>
  while (seg_list != NULL &&
 801c782:	68bb      	ldr	r3, [r7, #8]
 801c784:	2b00      	cmp	r3, #0
 801c786:	d020      	beq.n	801c7ca <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801c788:	68bb      	ldr	r3, [r7, #8]
 801c78a:	68db      	ldr	r3, [r3, #12]
 801c78c:	685b      	ldr	r3, [r3, #4]
 801c78e:	4618      	mov	r0, r3
 801c790:	f7fa ff69 	bl	8017666 <lwip_htonl>
 801c794:	4604      	mov	r4, r0
 801c796:	68bb      	ldr	r3, [r7, #8]
 801c798:	891b      	ldrh	r3, [r3, #8]
 801c79a:	461d      	mov	r5, r3
 801c79c:	68bb      	ldr	r3, [r7, #8]
 801c79e:	68db      	ldr	r3, [r3, #12]
 801c7a0:	899b      	ldrh	r3, [r3, #12]
 801c7a2:	b29b      	uxth	r3, r3
 801c7a4:	4618      	mov	r0, r3
 801c7a6:	f7fa ff49 	bl	801763c <lwip_htons>
 801c7aa:	4603      	mov	r3, r0
 801c7ac:	b2db      	uxtb	r3, r3
 801c7ae:	f003 0303 	and.w	r3, r3, #3
 801c7b2:	2b00      	cmp	r3, #0
 801c7b4:	d001      	beq.n	801c7ba <tcp_free_acked_segments+0xc6>
 801c7b6:	2301      	movs	r3, #1
 801c7b8:	e000      	b.n	801c7bc <tcp_free_acked_segments+0xc8>
 801c7ba:	2300      	movs	r3, #0
 801c7bc:	442b      	add	r3, r5
 801c7be:	18e2      	adds	r2, r4, r3
 801c7c0:	4b09      	ldr	r3, [pc, #36]	; (801c7e8 <tcp_free_acked_segments+0xf4>)
 801c7c2:	681b      	ldr	r3, [r3, #0]
 801c7c4:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	dd9c      	ble.n	801c704 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801c7ca:	68bb      	ldr	r3, [r7, #8]
}
 801c7cc:	4618      	mov	r0, r3
 801c7ce:	3718      	adds	r7, #24
 801c7d0:	46bd      	mov	sp, r7
 801c7d2:	bdb0      	pop	{r4, r5, r7, pc}
 801c7d4:	08027554 	.word	0x08027554
 801c7d8:	0802783c 	.word	0x0802783c
 801c7dc:	080275a0 	.word	0x080275a0
 801c7e0:	2000bffc 	.word	0x2000bffc
 801c7e4:	08027864 	.word	0x08027864
 801c7e8:	2000bff8 	.word	0x2000bff8

0801c7ec <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 801c7ec:	b5b0      	push	{r4, r5, r7, lr}
 801c7ee:	b094      	sub	sp, #80	; 0x50
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 801c7f8:	687b      	ldr	r3, [r7, #4]
 801c7fa:	2b00      	cmp	r3, #0
 801c7fc:	d106      	bne.n	801c80c <tcp_receive+0x20>
 801c7fe:	4b91      	ldr	r3, [pc, #580]	; (801ca44 <tcp_receive+0x258>)
 801c800:	f240 427b 	movw	r2, #1147	; 0x47b
 801c804:	4990      	ldr	r1, [pc, #576]	; (801ca48 <tcp_receive+0x25c>)
 801c806:	4891      	ldr	r0, [pc, #580]	; (801ca4c <tcp_receive+0x260>)
 801c808:	f007 fd42 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	7d1b      	ldrb	r3, [r3, #20]
 801c810:	2b03      	cmp	r3, #3
 801c812:	d806      	bhi.n	801c822 <tcp_receive+0x36>
 801c814:	4b8b      	ldr	r3, [pc, #556]	; (801ca44 <tcp_receive+0x258>)
 801c816:	f240 427c 	movw	r2, #1148	; 0x47c
 801c81a:	498d      	ldr	r1, [pc, #564]	; (801ca50 <tcp_receive+0x264>)
 801c81c:	488b      	ldr	r0, [pc, #556]	; (801ca4c <tcp_receive+0x260>)
 801c81e:	f007 fd37 	bl	8024290 <iprintf>

  if (flags & TCP_ACK) {
 801c822:	4b8c      	ldr	r3, [pc, #560]	; (801ca54 <tcp_receive+0x268>)
 801c824:	781b      	ldrb	r3, [r3, #0]
 801c826:	f003 0310 	and.w	r3, r3, #16
 801c82a:	2b00      	cmp	r3, #0
 801c82c:	f000 8264 	beq.w	801ccf8 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c836:	461a      	mov	r2, r3
 801c838:	687b      	ldr	r3, [r7, #4]
 801c83a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c83c:	4413      	add	r3, r2
 801c83e:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c840:	687b      	ldr	r3, [r7, #4]
 801c842:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c844:	4b84      	ldr	r3, [pc, #528]	; (801ca58 <tcp_receive+0x26c>)
 801c846:	681b      	ldr	r3, [r3, #0]
 801c848:	1ad3      	subs	r3, r2, r3
 801c84a:	2b00      	cmp	r3, #0
 801c84c:	db1b      	blt.n	801c886 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c84e:	687b      	ldr	r3, [r7, #4]
 801c850:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 801c852:	4b81      	ldr	r3, [pc, #516]	; (801ca58 <tcp_receive+0x26c>)
 801c854:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801c856:	429a      	cmp	r2, r3
 801c858:	d106      	bne.n	801c868 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c85a:	687b      	ldr	r3, [r7, #4]
 801c85c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c85e:	4b7f      	ldr	r3, [pc, #508]	; (801ca5c <tcp_receive+0x270>)
 801c860:	681b      	ldr	r3, [r3, #0]
 801c862:	1ad3      	subs	r3, r2, r3
 801c864:	2b00      	cmp	r3, #0
 801c866:	db0e      	blt.n	801c886 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c868:	687b      	ldr	r3, [r7, #4]
 801c86a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 801c86c:	4b7b      	ldr	r3, [pc, #492]	; (801ca5c <tcp_receive+0x270>)
 801c86e:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801c870:	429a      	cmp	r2, r3
 801c872:	d125      	bne.n	801c8c0 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801c874:	4b7a      	ldr	r3, [pc, #488]	; (801ca60 <tcp_receive+0x274>)
 801c876:	681b      	ldr	r3, [r3, #0]
 801c878:	89db      	ldrh	r3, [r3, #14]
 801c87a:	b29a      	uxth	r2, r3
 801c87c:	687b      	ldr	r3, [r7, #4]
 801c87e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c882:	429a      	cmp	r2, r3
 801c884:	d91c      	bls.n	801c8c0 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801c886:	4b76      	ldr	r3, [pc, #472]	; (801ca60 <tcp_receive+0x274>)
 801c888:	681b      	ldr	r3, [r3, #0]
 801c88a:	89db      	ldrh	r3, [r3, #14]
 801c88c:	b29a      	uxth	r2, r3
 801c88e:	687b      	ldr	r3, [r7, #4]
 801c890:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 801c894:	687b      	ldr	r3, [r7, #4]
 801c896:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801c89a:	687b      	ldr	r3, [r7, #4]
 801c89c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801c8a0:	429a      	cmp	r2, r3
 801c8a2:	d205      	bcs.n	801c8b0 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801c8aa:	687b      	ldr	r3, [r7, #4]
 801c8ac:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 801c8b0:	4b69      	ldr	r3, [pc, #420]	; (801ca58 <tcp_receive+0x26c>)
 801c8b2:	681a      	ldr	r2, [r3, #0]
 801c8b4:	687b      	ldr	r3, [r7, #4]
 801c8b6:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801c8b8:	4b68      	ldr	r3, [pc, #416]	; (801ca5c <tcp_receive+0x270>)
 801c8ba:	681a      	ldr	r2, [r3, #0]
 801c8bc:	687b      	ldr	r3, [r7, #4]
 801c8be:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 801c8c0:	4b66      	ldr	r3, [pc, #408]	; (801ca5c <tcp_receive+0x270>)
 801c8c2:	681a      	ldr	r2, [r3, #0]
 801c8c4:	687b      	ldr	r3, [r7, #4]
 801c8c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c8c8:	1ad3      	subs	r3, r2, r3
 801c8ca:	2b00      	cmp	r3, #0
 801c8cc:	dc58      	bgt.n	801c980 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 801c8ce:	4b65      	ldr	r3, [pc, #404]	; (801ca64 <tcp_receive+0x278>)
 801c8d0:	881b      	ldrh	r3, [r3, #0]
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d14b      	bne.n	801c96e <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 801c8d6:	687b      	ldr	r3, [r7, #4]
 801c8d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8da:	687a      	ldr	r2, [r7, #4]
 801c8dc:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 801c8e0:	4413      	add	r3, r2
 801c8e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c8e4:	429a      	cmp	r2, r3
 801c8e6:	d142      	bne.n	801c96e <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 801c8e8:	687b      	ldr	r3, [r7, #4]
 801c8ea:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801c8ee:	2b00      	cmp	r3, #0
 801c8f0:	db3d      	blt.n	801c96e <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 801c8f2:	687b      	ldr	r3, [r7, #4]
 801c8f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c8f6:	4b59      	ldr	r3, [pc, #356]	; (801ca5c <tcp_receive+0x270>)
 801c8f8:	681b      	ldr	r3, [r3, #0]
 801c8fa:	429a      	cmp	r2, r3
 801c8fc:	d137      	bne.n	801c96e <tcp_receive+0x182>
              found_dupack = 1;
 801c8fe:	2301      	movs	r3, #1
 801c900:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 801c902:	687b      	ldr	r3, [r7, #4]
 801c904:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c908:	2bff      	cmp	r3, #255	; 0xff
 801c90a:	d007      	beq.n	801c91c <tcp_receive+0x130>
                ++pcb->dupacks;
 801c90c:	687b      	ldr	r3, [r7, #4]
 801c90e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c912:	3301      	adds	r3, #1
 801c914:	b2da      	uxtb	r2, r3
 801c916:	687b      	ldr	r3, [r7, #4]
 801c918:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 801c91c:	687b      	ldr	r3, [r7, #4]
 801c91e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c922:	2b03      	cmp	r3, #3
 801c924:	d91b      	bls.n	801c95e <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801c926:	687b      	ldr	r3, [r7, #4]
 801c928:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c92c:	687b      	ldr	r3, [r7, #4]
 801c92e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c930:	4413      	add	r3, r2
 801c932:	b29a      	uxth	r2, r3
 801c934:	687b      	ldr	r3, [r7, #4]
 801c936:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801c93a:	429a      	cmp	r2, r3
 801c93c:	d30a      	bcc.n	801c954 <tcp_receive+0x168>
 801c93e:	687b      	ldr	r3, [r7, #4]
 801c940:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801c944:	687b      	ldr	r3, [r7, #4]
 801c946:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801c948:	4413      	add	r3, r2
 801c94a:	b29a      	uxth	r2, r3
 801c94c:	687b      	ldr	r3, [r7, #4]
 801c94e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801c952:	e004      	b.n	801c95e <tcp_receive+0x172>
 801c954:	687b      	ldr	r3, [r7, #4]
 801c956:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801c95a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 801c95e:	687b      	ldr	r3, [r7, #4]
 801c960:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 801c964:	2b02      	cmp	r3, #2
 801c966:	d902      	bls.n	801c96e <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801c968:	6878      	ldr	r0, [r7, #4]
 801c96a:	f002 fb43 	bl	801eff4 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 801c96e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801c970:	2b00      	cmp	r3, #0
 801c972:	f040 8161 	bne.w	801cc38 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801c976:	687b      	ldr	r3, [r7, #4]
 801c978:	2200      	movs	r2, #0
 801c97a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 801c97e:	e15b      	b.n	801cc38 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801c980:	4b36      	ldr	r3, [pc, #216]	; (801ca5c <tcp_receive+0x270>)
 801c982:	681a      	ldr	r2, [r3, #0]
 801c984:	687b      	ldr	r3, [r7, #4]
 801c986:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c988:	1ad3      	subs	r3, r2, r3
 801c98a:	3b01      	subs	r3, #1
 801c98c:	2b00      	cmp	r3, #0
 801c98e:	f2c0 814e 	blt.w	801cc2e <tcp_receive+0x442>
 801c992:	4b32      	ldr	r3, [pc, #200]	; (801ca5c <tcp_receive+0x270>)
 801c994:	681a      	ldr	r2, [r3, #0]
 801c996:	687b      	ldr	r3, [r7, #4]
 801c998:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801c99a:	1ad3      	subs	r3, r2, r3
 801c99c:	2b00      	cmp	r3, #0
 801c99e:	f300 8146 	bgt.w	801cc2e <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 801c9a2:	687b      	ldr	r3, [r7, #4]
 801c9a4:	8b5b      	ldrh	r3, [r3, #26]
 801c9a6:	f003 0304 	and.w	r3, r3, #4
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d010      	beq.n	801c9d0 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 801c9ae:	687b      	ldr	r3, [r7, #4]
 801c9b0:	8b5b      	ldrh	r3, [r3, #26]
 801c9b2:	f023 0304 	bic.w	r3, r3, #4
 801c9b6:	b29a      	uxth	r2, r3
 801c9b8:	687b      	ldr	r3, [r7, #4]
 801c9ba:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 801c9bc:	687b      	ldr	r3, [r7, #4]
 801c9be:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801c9c2:	687b      	ldr	r3, [r7, #4]
 801c9c4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801c9c8:	687b      	ldr	r3, [r7, #4]
 801c9ca:	2200      	movs	r2, #0
 801c9cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 801c9d0:	687b      	ldr	r3, [r7, #4]
 801c9d2:	2200      	movs	r2, #0
 801c9d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801c9d8:	687b      	ldr	r3, [r7, #4]
 801c9da:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801c9de:	10db      	asrs	r3, r3, #3
 801c9e0:	b21b      	sxth	r3, r3
 801c9e2:	b29a      	uxth	r2, r3
 801c9e4:	687b      	ldr	r3, [r7, #4]
 801c9e6:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801c9ea:	b29b      	uxth	r3, r3
 801c9ec:	4413      	add	r3, r2
 801c9ee:	b29b      	uxth	r3, r3
 801c9f0:	b21a      	sxth	r2, r3
 801c9f2:	687b      	ldr	r3, [r7, #4]
 801c9f4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 801c9f8:	4b18      	ldr	r3, [pc, #96]	; (801ca5c <tcp_receive+0x270>)
 801c9fa:	681b      	ldr	r3, [r3, #0]
 801c9fc:	b29a      	uxth	r2, r3
 801c9fe:	687b      	ldr	r3, [r7, #4]
 801ca00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801ca02:	b29b      	uxth	r3, r3
 801ca04:	1ad3      	subs	r3, r2, r3
 801ca06:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 801ca08:	687b      	ldr	r3, [r7, #4]
 801ca0a:	2200      	movs	r2, #0
 801ca0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 801ca10:	4b12      	ldr	r3, [pc, #72]	; (801ca5c <tcp_receive+0x270>)
 801ca12:	681a      	ldr	r2, [r3, #0]
 801ca14:	687b      	ldr	r3, [r7, #4]
 801ca16:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 801ca18:	687b      	ldr	r3, [r7, #4]
 801ca1a:	7d1b      	ldrb	r3, [r3, #20]
 801ca1c:	2b03      	cmp	r3, #3
 801ca1e:	f240 8097 	bls.w	801cb50 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 801ca22:	687b      	ldr	r3, [r7, #4]
 801ca24:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca28:	687b      	ldr	r3, [r7, #4]
 801ca2a:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801ca2e:	429a      	cmp	r2, r3
 801ca30:	d245      	bcs.n	801cabe <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 801ca32:	687b      	ldr	r3, [r7, #4]
 801ca34:	8b5b      	ldrh	r3, [r3, #26]
 801ca36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801ca3a:	2b00      	cmp	r3, #0
 801ca3c:	d014      	beq.n	801ca68 <tcp_receive+0x27c>
 801ca3e:	2301      	movs	r3, #1
 801ca40:	e013      	b.n	801ca6a <tcp_receive+0x27e>
 801ca42:	bf00      	nop
 801ca44:	08027554 	.word	0x08027554
 801ca48:	08027884 	.word	0x08027884
 801ca4c:	080275a0 	.word	0x080275a0
 801ca50:	080278a0 	.word	0x080278a0
 801ca54:	2000c000 	.word	0x2000c000
 801ca58:	2000bff4 	.word	0x2000bff4
 801ca5c:	2000bff8 	.word	0x2000bff8
 801ca60:	2000bfe4 	.word	0x2000bfe4
 801ca64:	2000bffe 	.word	0x2000bffe
 801ca68:	2302      	movs	r3, #2
 801ca6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 801ca6e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 801ca72:	b29a      	uxth	r2, r3
 801ca74:	687b      	ldr	r3, [r7, #4]
 801ca76:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801ca78:	fb12 f303 	smulbb	r3, r2, r3
 801ca7c:	b29b      	uxth	r3, r3
 801ca7e:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 801ca80:	4293      	cmp	r3, r2
 801ca82:	bf28      	it	cs
 801ca84:	4613      	movcs	r3, r2
 801ca86:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801ca88:	687b      	ldr	r3, [r7, #4]
 801ca8a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801ca8e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801ca90:	4413      	add	r3, r2
 801ca92:	b29a      	uxth	r2, r3
 801ca94:	687b      	ldr	r3, [r7, #4]
 801ca96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801ca9a:	429a      	cmp	r2, r3
 801ca9c:	d309      	bcc.n	801cab2 <tcp_receive+0x2c6>
 801ca9e:	687b      	ldr	r3, [r7, #4]
 801caa0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801caa4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801caa6:	4413      	add	r3, r2
 801caa8:	b29a      	uxth	r2, r3
 801caaa:	687b      	ldr	r3, [r7, #4]
 801caac:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cab0:	e04e      	b.n	801cb50 <tcp_receive+0x364>
 801cab2:	687b      	ldr	r3, [r7, #4]
 801cab4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cab8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cabc:	e048      	b.n	801cb50 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 801cabe:	687b      	ldr	r3, [r7, #4]
 801cac0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cac4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cac6:	4413      	add	r3, r2
 801cac8:	b29a      	uxth	r2, r3
 801caca:	687b      	ldr	r3, [r7, #4]
 801cacc:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 801cad0:	429a      	cmp	r2, r3
 801cad2:	d309      	bcc.n	801cae8 <tcp_receive+0x2fc>
 801cad4:	687b      	ldr	r3, [r7, #4]
 801cad6:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cada:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801cadc:	4413      	add	r3, r2
 801cade:	b29a      	uxth	r2, r3
 801cae0:	687b      	ldr	r3, [r7, #4]
 801cae2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 801cae6:	e004      	b.n	801caf2 <tcp_receive+0x306>
 801cae8:	687b      	ldr	r3, [r7, #4]
 801caea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801caee:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 801caf2:	687b      	ldr	r3, [r7, #4]
 801caf4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801caf8:	687b      	ldr	r3, [r7, #4]
 801cafa:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cafe:	429a      	cmp	r2, r3
 801cb00:	d326      	bcc.n	801cb50 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 801cb02:	687b      	ldr	r3, [r7, #4]
 801cb04:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 801cb08:	687b      	ldr	r3, [r7, #4]
 801cb0a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cb0e:	1ad3      	subs	r3, r2, r3
 801cb10:	b29a      	uxth	r2, r3
 801cb12:	687b      	ldr	r3, [r7, #4]
 801cb14:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 801cb18:	687b      	ldr	r3, [r7, #4]
 801cb1a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb1e:	687b      	ldr	r3, [r7, #4]
 801cb20:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb22:	4413      	add	r3, r2
 801cb24:	b29a      	uxth	r2, r3
 801cb26:	687b      	ldr	r3, [r7, #4]
 801cb28:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801cb2c:	429a      	cmp	r2, r3
 801cb2e:	d30a      	bcc.n	801cb46 <tcp_receive+0x35a>
 801cb30:	687b      	ldr	r3, [r7, #4]
 801cb32:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801cb36:	687b      	ldr	r3, [r7, #4]
 801cb38:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801cb3a:	4413      	add	r3, r2
 801cb3c:	b29a      	uxth	r2, r3
 801cb3e:	687b      	ldr	r3, [r7, #4]
 801cb40:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 801cb44:	e004      	b.n	801cb50 <tcp_receive+0x364>
 801cb46:	687b      	ldr	r3, [r7, #4]
 801cb48:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb4c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 801cb50:	687b      	ldr	r3, [r7, #4]
 801cb52:	6f19      	ldr	r1, [r3, #112]	; 0x70
 801cb54:	687b      	ldr	r3, [r7, #4]
 801cb56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb58:	4a98      	ldr	r2, [pc, #608]	; (801cdbc <tcp_receive+0x5d0>)
 801cb5a:	6878      	ldr	r0, [r7, #4]
 801cb5c:	f7ff fdca 	bl	801c6f4 <tcp_free_acked_segments>
 801cb60:	4602      	mov	r2, r0
 801cb62:	687b      	ldr	r3, [r7, #4]
 801cb64:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801cb66:	687b      	ldr	r3, [r7, #4]
 801cb68:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801cb6a:	687b      	ldr	r3, [r7, #4]
 801cb6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb6e:	4a94      	ldr	r2, [pc, #592]	; (801cdc0 <tcp_receive+0x5d4>)
 801cb70:	6878      	ldr	r0, [r7, #4]
 801cb72:	f7ff fdbf 	bl	801c6f4 <tcp_free_acked_segments>
 801cb76:	4602      	mov	r2, r0
 801cb78:	687b      	ldr	r3, [r7, #4]
 801cb7a:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 801cb7c:	687b      	ldr	r3, [r7, #4]
 801cb7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cb80:	2b00      	cmp	r3, #0
 801cb82:	d104      	bne.n	801cb8e <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801cb84:	687b      	ldr	r3, [r7, #4]
 801cb86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801cb8a:	861a      	strh	r2, [r3, #48]	; 0x30
 801cb8c:	e002      	b.n	801cb94 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 801cb8e:	687b      	ldr	r3, [r7, #4]
 801cb90:	2200      	movs	r2, #0
 801cb92:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801cb94:	687b      	ldr	r3, [r7, #4]
 801cb96:	2200      	movs	r2, #0
 801cb98:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801cb9a:	687b      	ldr	r3, [r7, #4]
 801cb9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cb9e:	2b00      	cmp	r3, #0
 801cba0:	d103      	bne.n	801cbaa <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801cba2:	687b      	ldr	r3, [r7, #4]
 801cba4:	2200      	movs	r2, #0
 801cba6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801cbaa:	687b      	ldr	r3, [r7, #4]
 801cbac:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801cbb0:	4b84      	ldr	r3, [pc, #528]	; (801cdc4 <tcp_receive+0x5d8>)
 801cbb2:	881b      	ldrh	r3, [r3, #0]
 801cbb4:	4413      	add	r3, r2
 801cbb6:	b29a      	uxth	r2, r3
 801cbb8:	687b      	ldr	r3, [r7, #4]
 801cbba:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 801cbbe:	687b      	ldr	r3, [r7, #4]
 801cbc0:	8b5b      	ldrh	r3, [r3, #26]
 801cbc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801cbc6:	2b00      	cmp	r3, #0
 801cbc8:	d035      	beq.n	801cc36 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cbce:	2b00      	cmp	r3, #0
 801cbd0:	d118      	bne.n	801cc04 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801cbd2:	687b      	ldr	r3, [r7, #4]
 801cbd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbd6:	2b00      	cmp	r3, #0
 801cbd8:	d00c      	beq.n	801cbf4 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 801cbda:	687b      	ldr	r3, [r7, #4]
 801cbdc:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801cbde:	687b      	ldr	r3, [r7, #4]
 801cbe0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801cbe2:	68db      	ldr	r3, [r3, #12]
 801cbe4:	685b      	ldr	r3, [r3, #4]
 801cbe6:	4618      	mov	r0, r3
 801cbe8:	f7fa fd3d 	bl	8017666 <lwip_htonl>
 801cbec:	4603      	mov	r3, r0
 801cbee:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 801cbf0:	2b00      	cmp	r3, #0
 801cbf2:	dc20      	bgt.n	801cc36 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801cbf4:	687b      	ldr	r3, [r7, #4]
 801cbf6:	8b5b      	ldrh	r3, [r3, #26]
 801cbf8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cbfc:	b29a      	uxth	r2, r3
 801cbfe:	687b      	ldr	r3, [r7, #4]
 801cc00:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cc02:	e018      	b.n	801cc36 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 801cc08:	687b      	ldr	r3, [r7, #4]
 801cc0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801cc0c:	68db      	ldr	r3, [r3, #12]
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	4618      	mov	r0, r3
 801cc12:	f7fa fd28 	bl	8017666 <lwip_htonl>
 801cc16:	4603      	mov	r3, r0
 801cc18:	1ae3      	subs	r3, r4, r3
 801cc1a:	2b00      	cmp	r3, #0
 801cc1c:	dc0b      	bgt.n	801cc36 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 801cc1e:	687b      	ldr	r3, [r7, #4]
 801cc20:	8b5b      	ldrh	r3, [r3, #26]
 801cc22:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801cc26:	b29a      	uxth	r2, r3
 801cc28:	687b      	ldr	r3, [r7, #4]
 801cc2a:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cc2c:	e003      	b.n	801cc36 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 801cc2e:	6878      	ldr	r0, [r7, #4]
 801cc30:	f002 fbce 	bl	801f3d0 <tcp_send_empty_ack>
 801cc34:	e000      	b.n	801cc38 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801cc36:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc3c:	2b00      	cmp	r3, #0
 801cc3e:	d05b      	beq.n	801ccf8 <tcp_receive+0x50c>
 801cc40:	687b      	ldr	r3, [r7, #4]
 801cc42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801cc44:	4b60      	ldr	r3, [pc, #384]	; (801cdc8 <tcp_receive+0x5dc>)
 801cc46:	681b      	ldr	r3, [r3, #0]
 801cc48:	1ad3      	subs	r3, r2, r3
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	da54      	bge.n	801ccf8 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 801cc4e:	4b5f      	ldr	r3, [pc, #380]	; (801cdcc <tcp_receive+0x5e0>)
 801cc50:	681b      	ldr	r3, [r3, #0]
 801cc52:	b29a      	uxth	r2, r3
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801cc58:	b29b      	uxth	r3, r3
 801cc5a:	1ad3      	subs	r3, r2, r3
 801cc5c:	b29b      	uxth	r3, r3
 801cc5e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 801cc62:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801cc66:	687b      	ldr	r3, [r7, #4]
 801cc68:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cc6c:	10db      	asrs	r3, r3, #3
 801cc6e:	b21b      	sxth	r3, r3
 801cc70:	b29b      	uxth	r3, r3
 801cc72:	1ad3      	subs	r3, r2, r3
 801cc74:	b29b      	uxth	r3, r3
 801cc76:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801cc7a:	687b      	ldr	r3, [r7, #4]
 801cc7c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801cc80:	b29a      	uxth	r2, r3
 801cc82:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801cc86:	4413      	add	r3, r2
 801cc88:	b29b      	uxth	r3, r3
 801cc8a:	b21a      	sxth	r2, r3
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 801cc90:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801cc94:	2b00      	cmp	r3, #0
 801cc96:	da05      	bge.n	801cca4 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801cc98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801cc9c:	425b      	negs	r3, r3
 801cc9e:	b29b      	uxth	r3, r3
 801cca0:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801cca4:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801cca8:	687b      	ldr	r3, [r7, #4]
 801ccaa:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ccae:	109b      	asrs	r3, r3, #2
 801ccb0:	b21b      	sxth	r3, r3
 801ccb2:	b29b      	uxth	r3, r3
 801ccb4:	1ad3      	subs	r3, r2, r3
 801ccb6:	b29b      	uxth	r3, r3
 801ccb8:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 801ccbc:	687b      	ldr	r3, [r7, #4]
 801ccbe:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801ccc2:	b29a      	uxth	r2, r3
 801ccc4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801ccc8:	4413      	add	r3, r2
 801ccca:	b29b      	uxth	r3, r3
 801cccc:	b21a      	sxth	r2, r3
 801ccce:	687b      	ldr	r3, [r7, #4]
 801ccd0:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801ccd2:	687b      	ldr	r3, [r7, #4]
 801ccd4:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 801ccd8:	10db      	asrs	r3, r3, #3
 801ccda:	b21b      	sxth	r3, r3
 801ccdc:	b29a      	uxth	r2, r3
 801ccde:	687b      	ldr	r3, [r7, #4]
 801cce0:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801cce4:	b29b      	uxth	r3, r3
 801cce6:	4413      	add	r3, r2
 801cce8:	b29b      	uxth	r3, r3
 801ccea:	b21a      	sxth	r2, r3
 801ccec:	687b      	ldr	r3, [r7, #4]
 801ccee:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801ccf2:	687b      	ldr	r3, [r7, #4]
 801ccf4:	2200      	movs	r2, #0
 801ccf6:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 801ccf8:	4b35      	ldr	r3, [pc, #212]	; (801cdd0 <tcp_receive+0x5e4>)
 801ccfa:	881b      	ldrh	r3, [r3, #0]
 801ccfc:	2b00      	cmp	r3, #0
 801ccfe:	f000 84e2 	beq.w	801d6c6 <tcp_receive+0xeda>
 801cd02:	687b      	ldr	r3, [r7, #4]
 801cd04:	7d1b      	ldrb	r3, [r3, #20]
 801cd06:	2b06      	cmp	r3, #6
 801cd08:	f200 84dd 	bhi.w	801d6c6 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801cd0c:	687b      	ldr	r3, [r7, #4]
 801cd0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd10:	4b30      	ldr	r3, [pc, #192]	; (801cdd4 <tcp_receive+0x5e8>)
 801cd12:	681b      	ldr	r3, [r3, #0]
 801cd14:	1ad3      	subs	r3, r2, r3
 801cd16:	3b01      	subs	r3, #1
 801cd18:	2b00      	cmp	r3, #0
 801cd1a:	f2c0 808f 	blt.w	801ce3c <tcp_receive+0x650>
 801cd1e:	687b      	ldr	r3, [r7, #4]
 801cd20:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd22:	4b2b      	ldr	r3, [pc, #172]	; (801cdd0 <tcp_receive+0x5e4>)
 801cd24:	881b      	ldrh	r3, [r3, #0]
 801cd26:	4619      	mov	r1, r3
 801cd28:	4b2a      	ldr	r3, [pc, #168]	; (801cdd4 <tcp_receive+0x5e8>)
 801cd2a:	681b      	ldr	r3, [r3, #0]
 801cd2c:	440b      	add	r3, r1
 801cd2e:	1ad3      	subs	r3, r2, r3
 801cd30:	3301      	adds	r3, #1
 801cd32:	2b00      	cmp	r3, #0
 801cd34:	f300 8082 	bgt.w	801ce3c <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801cd38:	4b27      	ldr	r3, [pc, #156]	; (801cdd8 <tcp_receive+0x5ec>)
 801cd3a:	685b      	ldr	r3, [r3, #4]
 801cd3c:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 801cd3e:	687b      	ldr	r3, [r7, #4]
 801cd40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801cd42:	4b24      	ldr	r3, [pc, #144]	; (801cdd4 <tcp_receive+0x5e8>)
 801cd44:	681b      	ldr	r3, [r3, #0]
 801cd46:	1ad3      	subs	r3, r2, r3
 801cd48:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801cd4a:	4b23      	ldr	r3, [pc, #140]	; (801cdd8 <tcp_receive+0x5ec>)
 801cd4c:	685b      	ldr	r3, [r3, #4]
 801cd4e:	2b00      	cmp	r3, #0
 801cd50:	d106      	bne.n	801cd60 <tcp_receive+0x574>
 801cd52:	4b22      	ldr	r3, [pc, #136]	; (801cddc <tcp_receive+0x5f0>)
 801cd54:	f240 5294 	movw	r2, #1428	; 0x594
 801cd58:	4921      	ldr	r1, [pc, #132]	; (801cde0 <tcp_receive+0x5f4>)
 801cd5a:	4822      	ldr	r0, [pc, #136]	; (801cde4 <tcp_receive+0x5f8>)
 801cd5c:	f007 fa98 	bl	8024290 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 801cd60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd62:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801cd66:	4293      	cmp	r3, r2
 801cd68:	d906      	bls.n	801cd78 <tcp_receive+0x58c>
 801cd6a:	4b1c      	ldr	r3, [pc, #112]	; (801cddc <tcp_receive+0x5f0>)
 801cd6c:	f240 5295 	movw	r2, #1429	; 0x595
 801cd70:	491d      	ldr	r1, [pc, #116]	; (801cde8 <tcp_receive+0x5fc>)
 801cd72:	481c      	ldr	r0, [pc, #112]	; (801cde4 <tcp_receive+0x5f8>)
 801cd74:	f007 fa8c 	bl	8024290 <iprintf>
      off = (u16_t)off32;
 801cd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cd7a:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801cd7e:	4b16      	ldr	r3, [pc, #88]	; (801cdd8 <tcp_receive+0x5ec>)
 801cd80:	685b      	ldr	r3, [r3, #4]
 801cd82:	891b      	ldrh	r3, [r3, #8]
 801cd84:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cd88:	429a      	cmp	r2, r3
 801cd8a:	d906      	bls.n	801cd9a <tcp_receive+0x5ae>
 801cd8c:	4b13      	ldr	r3, [pc, #76]	; (801cddc <tcp_receive+0x5f0>)
 801cd8e:	f240 5297 	movw	r2, #1431	; 0x597
 801cd92:	4916      	ldr	r1, [pc, #88]	; (801cdec <tcp_receive+0x600>)
 801cd94:	4813      	ldr	r0, [pc, #76]	; (801cde4 <tcp_receive+0x5f8>)
 801cd96:	f007 fa7b 	bl	8024290 <iprintf>
      inseg.len -= off;
 801cd9a:	4b0f      	ldr	r3, [pc, #60]	; (801cdd8 <tcp_receive+0x5ec>)
 801cd9c:	891a      	ldrh	r2, [r3, #8]
 801cd9e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cda2:	1ad3      	subs	r3, r2, r3
 801cda4:	b29a      	uxth	r2, r3
 801cda6:	4b0c      	ldr	r3, [pc, #48]	; (801cdd8 <tcp_receive+0x5ec>)
 801cda8:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801cdaa:	4b0b      	ldr	r3, [pc, #44]	; (801cdd8 <tcp_receive+0x5ec>)
 801cdac:	685b      	ldr	r3, [r3, #4]
 801cdae:	891a      	ldrh	r2, [r3, #8]
 801cdb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801cdb4:	1ad3      	subs	r3, r2, r3
 801cdb6:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801cdb8:	e02a      	b.n	801ce10 <tcp_receive+0x624>
 801cdba:	bf00      	nop
 801cdbc:	080278bc 	.word	0x080278bc
 801cdc0:	080278c4 	.word	0x080278c4
 801cdc4:	2000bffc 	.word	0x2000bffc
 801cdc8:	2000bff8 	.word	0x2000bff8
 801cdcc:	2000bfbc 	.word	0x2000bfbc
 801cdd0:	2000bffe 	.word	0x2000bffe
 801cdd4:	2000bff4 	.word	0x2000bff4
 801cdd8:	2000bfd4 	.word	0x2000bfd4
 801cddc:	08027554 	.word	0x08027554
 801cde0:	080278cc 	.word	0x080278cc
 801cde4:	080275a0 	.word	0x080275a0
 801cde8:	080278dc 	.word	0x080278dc
 801cdec:	080278ec 	.word	0x080278ec
        off -= p->len;
 801cdf0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801cdf2:	895b      	ldrh	r3, [r3, #10]
 801cdf4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801cdf8:	1ad3      	subs	r3, r2, r3
 801cdfa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801cdfe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce00:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801ce02:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801ce04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce06:	2200      	movs	r2, #0
 801ce08:	815a      	strh	r2, [r3, #10]
        p = p->next;
 801ce0a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce0c:	681b      	ldr	r3, [r3, #0]
 801ce0e:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 801ce10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ce12:	895b      	ldrh	r3, [r3, #10]
 801ce14:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801ce18:	429a      	cmp	r2, r3
 801ce1a:	d8e9      	bhi.n	801cdf0 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 801ce1c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ce20:	4619      	mov	r1, r3
 801ce22:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801ce24:	f7fb ff76 	bl	8018d14 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801ce28:	687b      	ldr	r3, [r7, #4]
 801ce2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce2c:	4a91      	ldr	r2, [pc, #580]	; (801d074 <tcp_receive+0x888>)
 801ce2e:	6013      	str	r3, [r2, #0]
 801ce30:	4b91      	ldr	r3, [pc, #580]	; (801d078 <tcp_receive+0x88c>)
 801ce32:	68db      	ldr	r3, [r3, #12]
 801ce34:	4a8f      	ldr	r2, [pc, #572]	; (801d074 <tcp_receive+0x888>)
 801ce36:	6812      	ldr	r2, [r2, #0]
 801ce38:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801ce3a:	e00d      	b.n	801ce58 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 801ce3c:	4b8d      	ldr	r3, [pc, #564]	; (801d074 <tcp_receive+0x888>)
 801ce3e:	681a      	ldr	r2, [r3, #0]
 801ce40:	687b      	ldr	r3, [r7, #4]
 801ce42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce44:	1ad3      	subs	r3, r2, r3
 801ce46:	2b00      	cmp	r3, #0
 801ce48:	da06      	bge.n	801ce58 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801ce4a:	687b      	ldr	r3, [r7, #4]
 801ce4c:	8b5b      	ldrh	r3, [r3, #26]
 801ce4e:	f043 0302 	orr.w	r3, r3, #2
 801ce52:	b29a      	uxth	r2, r3
 801ce54:	687b      	ldr	r3, [r7, #4]
 801ce56:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801ce58:	4b86      	ldr	r3, [pc, #536]	; (801d074 <tcp_receive+0x888>)
 801ce5a:	681a      	ldr	r2, [r3, #0]
 801ce5c:	687b      	ldr	r3, [r7, #4]
 801ce5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce60:	1ad3      	subs	r3, r2, r3
 801ce62:	2b00      	cmp	r3, #0
 801ce64:	f2c0 842a 	blt.w	801d6bc <tcp_receive+0xed0>
 801ce68:	4b82      	ldr	r3, [pc, #520]	; (801d074 <tcp_receive+0x888>)
 801ce6a:	681a      	ldr	r2, [r3, #0]
 801ce6c:	687b      	ldr	r3, [r7, #4]
 801ce6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ce70:	6879      	ldr	r1, [r7, #4]
 801ce72:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801ce74:	440b      	add	r3, r1
 801ce76:	1ad3      	subs	r3, r2, r3
 801ce78:	3301      	adds	r3, #1
 801ce7a:	2b00      	cmp	r3, #0
 801ce7c:	f300 841e 	bgt.w	801d6bc <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801ce80:	687b      	ldr	r3, [r7, #4]
 801ce82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ce84:	4b7b      	ldr	r3, [pc, #492]	; (801d074 <tcp_receive+0x888>)
 801ce86:	681b      	ldr	r3, [r3, #0]
 801ce88:	429a      	cmp	r2, r3
 801ce8a:	f040 829a 	bne.w	801d3c2 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801ce8e:	4b7a      	ldr	r3, [pc, #488]	; (801d078 <tcp_receive+0x88c>)
 801ce90:	891c      	ldrh	r4, [r3, #8]
 801ce92:	4b79      	ldr	r3, [pc, #484]	; (801d078 <tcp_receive+0x88c>)
 801ce94:	68db      	ldr	r3, [r3, #12]
 801ce96:	899b      	ldrh	r3, [r3, #12]
 801ce98:	b29b      	uxth	r3, r3
 801ce9a:	4618      	mov	r0, r3
 801ce9c:	f7fa fbce 	bl	801763c <lwip_htons>
 801cea0:	4603      	mov	r3, r0
 801cea2:	b2db      	uxtb	r3, r3
 801cea4:	f003 0303 	and.w	r3, r3, #3
 801cea8:	2b00      	cmp	r3, #0
 801ceaa:	d001      	beq.n	801ceb0 <tcp_receive+0x6c4>
 801ceac:	2301      	movs	r3, #1
 801ceae:	e000      	b.n	801ceb2 <tcp_receive+0x6c6>
 801ceb0:	2300      	movs	r3, #0
 801ceb2:	4423      	add	r3, r4
 801ceb4:	b29a      	uxth	r2, r3
 801ceb6:	4b71      	ldr	r3, [pc, #452]	; (801d07c <tcp_receive+0x890>)
 801ceb8:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801ceba:	687b      	ldr	r3, [r7, #4]
 801cebc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cebe:	4b6f      	ldr	r3, [pc, #444]	; (801d07c <tcp_receive+0x890>)
 801cec0:	881b      	ldrh	r3, [r3, #0]
 801cec2:	429a      	cmp	r2, r3
 801cec4:	d275      	bcs.n	801cfb2 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cec6:	4b6c      	ldr	r3, [pc, #432]	; (801d078 <tcp_receive+0x88c>)
 801cec8:	68db      	ldr	r3, [r3, #12]
 801ceca:	899b      	ldrh	r3, [r3, #12]
 801cecc:	b29b      	uxth	r3, r3
 801cece:	4618      	mov	r0, r3
 801ced0:	f7fa fbb4 	bl	801763c <lwip_htons>
 801ced4:	4603      	mov	r3, r0
 801ced6:	b2db      	uxtb	r3, r3
 801ced8:	f003 0301 	and.w	r3, r3, #1
 801cedc:	2b00      	cmp	r3, #0
 801cede:	d01f      	beq.n	801cf20 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801cee0:	4b65      	ldr	r3, [pc, #404]	; (801d078 <tcp_receive+0x88c>)
 801cee2:	68db      	ldr	r3, [r3, #12]
 801cee4:	899b      	ldrh	r3, [r3, #12]
 801cee6:	b29b      	uxth	r3, r3
 801cee8:	b21b      	sxth	r3, r3
 801ceea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801ceee:	b21c      	sxth	r4, r3
 801cef0:	4b61      	ldr	r3, [pc, #388]	; (801d078 <tcp_receive+0x88c>)
 801cef2:	68db      	ldr	r3, [r3, #12]
 801cef4:	899b      	ldrh	r3, [r3, #12]
 801cef6:	b29b      	uxth	r3, r3
 801cef8:	4618      	mov	r0, r3
 801cefa:	f7fa fb9f 	bl	801763c <lwip_htons>
 801cefe:	4603      	mov	r3, r0
 801cf00:	b2db      	uxtb	r3, r3
 801cf02:	b29b      	uxth	r3, r3
 801cf04:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801cf08:	b29b      	uxth	r3, r3
 801cf0a:	4618      	mov	r0, r3
 801cf0c:	f7fa fb96 	bl	801763c <lwip_htons>
 801cf10:	4603      	mov	r3, r0
 801cf12:	b21b      	sxth	r3, r3
 801cf14:	4323      	orrs	r3, r4
 801cf16:	b21a      	sxth	r2, r3
 801cf18:	4b57      	ldr	r3, [pc, #348]	; (801d078 <tcp_receive+0x88c>)
 801cf1a:	68db      	ldr	r3, [r3, #12]
 801cf1c:	b292      	uxth	r2, r2
 801cf1e:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 801cf20:	687b      	ldr	r3, [r7, #4]
 801cf22:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801cf24:	4b54      	ldr	r3, [pc, #336]	; (801d078 <tcp_receive+0x88c>)
 801cf26:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801cf28:	4b53      	ldr	r3, [pc, #332]	; (801d078 <tcp_receive+0x88c>)
 801cf2a:	68db      	ldr	r3, [r3, #12]
 801cf2c:	899b      	ldrh	r3, [r3, #12]
 801cf2e:	b29b      	uxth	r3, r3
 801cf30:	4618      	mov	r0, r3
 801cf32:	f7fa fb83 	bl	801763c <lwip_htons>
 801cf36:	4603      	mov	r3, r0
 801cf38:	b2db      	uxtb	r3, r3
 801cf3a:	f003 0302 	and.w	r3, r3, #2
 801cf3e:	2b00      	cmp	r3, #0
 801cf40:	d005      	beq.n	801cf4e <tcp_receive+0x762>
            inseg.len -= 1;
 801cf42:	4b4d      	ldr	r3, [pc, #308]	; (801d078 <tcp_receive+0x88c>)
 801cf44:	891b      	ldrh	r3, [r3, #8]
 801cf46:	3b01      	subs	r3, #1
 801cf48:	b29a      	uxth	r2, r3
 801cf4a:	4b4b      	ldr	r3, [pc, #300]	; (801d078 <tcp_receive+0x88c>)
 801cf4c:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 801cf4e:	4b4a      	ldr	r3, [pc, #296]	; (801d078 <tcp_receive+0x88c>)
 801cf50:	685b      	ldr	r3, [r3, #4]
 801cf52:	4a49      	ldr	r2, [pc, #292]	; (801d078 <tcp_receive+0x88c>)
 801cf54:	8912      	ldrh	r2, [r2, #8]
 801cf56:	4611      	mov	r1, r2
 801cf58:	4618      	mov	r0, r3
 801cf5a:	f7fb fddb 	bl	8018b14 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 801cf5e:	4b46      	ldr	r3, [pc, #280]	; (801d078 <tcp_receive+0x88c>)
 801cf60:	891c      	ldrh	r4, [r3, #8]
 801cf62:	4b45      	ldr	r3, [pc, #276]	; (801d078 <tcp_receive+0x88c>)
 801cf64:	68db      	ldr	r3, [r3, #12]
 801cf66:	899b      	ldrh	r3, [r3, #12]
 801cf68:	b29b      	uxth	r3, r3
 801cf6a:	4618      	mov	r0, r3
 801cf6c:	f7fa fb66 	bl	801763c <lwip_htons>
 801cf70:	4603      	mov	r3, r0
 801cf72:	b2db      	uxtb	r3, r3
 801cf74:	f003 0303 	and.w	r3, r3, #3
 801cf78:	2b00      	cmp	r3, #0
 801cf7a:	d001      	beq.n	801cf80 <tcp_receive+0x794>
 801cf7c:	2301      	movs	r3, #1
 801cf7e:	e000      	b.n	801cf82 <tcp_receive+0x796>
 801cf80:	2300      	movs	r3, #0
 801cf82:	4423      	add	r3, r4
 801cf84:	b29a      	uxth	r2, r3
 801cf86:	4b3d      	ldr	r3, [pc, #244]	; (801d07c <tcp_receive+0x890>)
 801cf88:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801cf8a:	4b3c      	ldr	r3, [pc, #240]	; (801d07c <tcp_receive+0x890>)
 801cf8c:	881b      	ldrh	r3, [r3, #0]
 801cf8e:	461a      	mov	r2, r3
 801cf90:	4b38      	ldr	r3, [pc, #224]	; (801d074 <tcp_receive+0x888>)
 801cf92:	681b      	ldr	r3, [r3, #0]
 801cf94:	441a      	add	r2, r3
 801cf96:	687b      	ldr	r3, [r7, #4]
 801cf98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801cf9a:	6879      	ldr	r1, [r7, #4]
 801cf9c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801cf9e:	440b      	add	r3, r1
 801cfa0:	429a      	cmp	r2, r3
 801cfa2:	d006      	beq.n	801cfb2 <tcp_receive+0x7c6>
 801cfa4:	4b36      	ldr	r3, [pc, #216]	; (801d080 <tcp_receive+0x894>)
 801cfa6:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801cfaa:	4936      	ldr	r1, [pc, #216]	; (801d084 <tcp_receive+0x898>)
 801cfac:	4836      	ldr	r0, [pc, #216]	; (801d088 <tcp_receive+0x89c>)
 801cfae:	f007 f96f 	bl	8024290 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801cfb2:	687b      	ldr	r3, [r7, #4]
 801cfb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfb6:	2b00      	cmp	r3, #0
 801cfb8:	f000 80e7 	beq.w	801d18a <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801cfbc:	4b2e      	ldr	r3, [pc, #184]	; (801d078 <tcp_receive+0x88c>)
 801cfbe:	68db      	ldr	r3, [r3, #12]
 801cfc0:	899b      	ldrh	r3, [r3, #12]
 801cfc2:	b29b      	uxth	r3, r3
 801cfc4:	4618      	mov	r0, r3
 801cfc6:	f7fa fb39 	bl	801763c <lwip_htons>
 801cfca:	4603      	mov	r3, r0
 801cfcc:	b2db      	uxtb	r3, r3
 801cfce:	f003 0301 	and.w	r3, r3, #1
 801cfd2:	2b00      	cmp	r3, #0
 801cfd4:	d010      	beq.n	801cff8 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801cfd6:	e00a      	b.n	801cfee <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 801cfd8:	687b      	ldr	r3, [r7, #4]
 801cfda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfdc:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801cfde:	687b      	ldr	r3, [r7, #4]
 801cfe0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cfe2:	681a      	ldr	r2, [r3, #0]
 801cfe4:	687b      	ldr	r3, [r7, #4]
 801cfe6:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 801cfe8:	68f8      	ldr	r0, [r7, #12]
 801cfea:	f7fd fcc4 	bl	801a976 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801cfee:	687b      	ldr	r3, [r7, #4]
 801cff0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cff2:	2b00      	cmp	r3, #0
 801cff4:	d1f0      	bne.n	801cfd8 <tcp_receive+0x7ec>
 801cff6:	e0c8      	b.n	801d18a <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 801cff8:	687b      	ldr	r3, [r7, #4]
 801cffa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801cffc:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801cffe:	e052      	b.n	801d0a6 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d000:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d002:	68db      	ldr	r3, [r3, #12]
 801d004:	899b      	ldrh	r3, [r3, #12]
 801d006:	b29b      	uxth	r3, r3
 801d008:	4618      	mov	r0, r3
 801d00a:	f7fa fb17 	bl	801763c <lwip_htons>
 801d00e:	4603      	mov	r3, r0
 801d010:	b2db      	uxtb	r3, r3
 801d012:	f003 0301 	and.w	r3, r3, #1
 801d016:	2b00      	cmp	r3, #0
 801d018:	d03d      	beq.n	801d096 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 801d01a:	4b17      	ldr	r3, [pc, #92]	; (801d078 <tcp_receive+0x88c>)
 801d01c:	68db      	ldr	r3, [r3, #12]
 801d01e:	899b      	ldrh	r3, [r3, #12]
 801d020:	b29b      	uxth	r3, r3
 801d022:	4618      	mov	r0, r3
 801d024:	f7fa fb0a 	bl	801763c <lwip_htons>
 801d028:	4603      	mov	r3, r0
 801d02a:	b2db      	uxtb	r3, r3
 801d02c:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801d030:	2b00      	cmp	r3, #0
 801d032:	d130      	bne.n	801d096 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 801d034:	4b10      	ldr	r3, [pc, #64]	; (801d078 <tcp_receive+0x88c>)
 801d036:	68db      	ldr	r3, [r3, #12]
 801d038:	899b      	ldrh	r3, [r3, #12]
 801d03a:	b29c      	uxth	r4, r3
 801d03c:	2001      	movs	r0, #1
 801d03e:	f7fa fafd 	bl	801763c <lwip_htons>
 801d042:	4603      	mov	r3, r0
 801d044:	461a      	mov	r2, r3
 801d046:	4b0c      	ldr	r3, [pc, #48]	; (801d078 <tcp_receive+0x88c>)
 801d048:	68db      	ldr	r3, [r3, #12]
 801d04a:	4322      	orrs	r2, r4
 801d04c:	b292      	uxth	r2, r2
 801d04e:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 801d050:	4b09      	ldr	r3, [pc, #36]	; (801d078 <tcp_receive+0x88c>)
 801d052:	891c      	ldrh	r4, [r3, #8]
 801d054:	4b08      	ldr	r3, [pc, #32]	; (801d078 <tcp_receive+0x88c>)
 801d056:	68db      	ldr	r3, [r3, #12]
 801d058:	899b      	ldrh	r3, [r3, #12]
 801d05a:	b29b      	uxth	r3, r3
 801d05c:	4618      	mov	r0, r3
 801d05e:	f7fa faed 	bl	801763c <lwip_htons>
 801d062:	4603      	mov	r3, r0
 801d064:	b2db      	uxtb	r3, r3
 801d066:	f003 0303 	and.w	r3, r3, #3
 801d06a:	2b00      	cmp	r3, #0
 801d06c:	d00e      	beq.n	801d08c <tcp_receive+0x8a0>
 801d06e:	2301      	movs	r3, #1
 801d070:	e00d      	b.n	801d08e <tcp_receive+0x8a2>
 801d072:	bf00      	nop
 801d074:	2000bff4 	.word	0x2000bff4
 801d078:	2000bfd4 	.word	0x2000bfd4
 801d07c:	2000bffe 	.word	0x2000bffe
 801d080:	08027554 	.word	0x08027554
 801d084:	080278fc 	.word	0x080278fc
 801d088:	080275a0 	.word	0x080275a0
 801d08c:	2300      	movs	r3, #0
 801d08e:	4423      	add	r3, r4
 801d090:	b29a      	uxth	r2, r3
 801d092:	4b98      	ldr	r3, [pc, #608]	; (801d2f4 <tcp_receive+0xb08>)
 801d094:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801d096:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d098:	613b      	str	r3, [r7, #16]
              next = next->next;
 801d09a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d09c:	681b      	ldr	r3, [r3, #0]
 801d09e:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801d0a0:	6938      	ldr	r0, [r7, #16]
 801d0a2:	f7fd fc68 	bl	801a976 <tcp_seg_free>
            while (next &&
 801d0a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0a8:	2b00      	cmp	r3, #0
 801d0aa:	d00e      	beq.n	801d0ca <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 801d0ac:	4b91      	ldr	r3, [pc, #580]	; (801d2f4 <tcp_receive+0xb08>)
 801d0ae:	881b      	ldrh	r3, [r3, #0]
 801d0b0:	461a      	mov	r2, r3
 801d0b2:	4b91      	ldr	r3, [pc, #580]	; (801d2f8 <tcp_receive+0xb0c>)
 801d0b4:	681b      	ldr	r3, [r3, #0]
 801d0b6:	441a      	add	r2, r3
 801d0b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0ba:	68db      	ldr	r3, [r3, #12]
 801d0bc:	685b      	ldr	r3, [r3, #4]
 801d0be:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801d0c0:	8909      	ldrh	r1, [r1, #8]
 801d0c2:	440b      	add	r3, r1
 801d0c4:	1ad3      	subs	r3, r2, r3
            while (next &&
 801d0c6:	2b00      	cmp	r3, #0
 801d0c8:	da9a      	bge.n	801d000 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 801d0ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0cc:	2b00      	cmp	r3, #0
 801d0ce:	d059      	beq.n	801d184 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801d0d0:	4b88      	ldr	r3, [pc, #544]	; (801d2f4 <tcp_receive+0xb08>)
 801d0d2:	881b      	ldrh	r3, [r3, #0]
 801d0d4:	461a      	mov	r2, r3
 801d0d6:	4b88      	ldr	r3, [pc, #544]	; (801d2f8 <tcp_receive+0xb0c>)
 801d0d8:	681b      	ldr	r3, [r3, #0]
 801d0da:	441a      	add	r2, r3
 801d0dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0de:	68db      	ldr	r3, [r3, #12]
 801d0e0:	685b      	ldr	r3, [r3, #4]
 801d0e2:	1ad3      	subs	r3, r2, r3
            if (next &&
 801d0e4:	2b00      	cmp	r3, #0
 801d0e6:	dd4d      	ble.n	801d184 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 801d0e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d0ea:	68db      	ldr	r3, [r3, #12]
 801d0ec:	685b      	ldr	r3, [r3, #4]
 801d0ee:	b29a      	uxth	r2, r3
 801d0f0:	4b81      	ldr	r3, [pc, #516]	; (801d2f8 <tcp_receive+0xb0c>)
 801d0f2:	681b      	ldr	r3, [r3, #0]
 801d0f4:	b29b      	uxth	r3, r3
 801d0f6:	1ad3      	subs	r3, r2, r3
 801d0f8:	b29a      	uxth	r2, r3
 801d0fa:	4b80      	ldr	r3, [pc, #512]	; (801d2fc <tcp_receive+0xb10>)
 801d0fc:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801d0fe:	4b7f      	ldr	r3, [pc, #508]	; (801d2fc <tcp_receive+0xb10>)
 801d100:	68db      	ldr	r3, [r3, #12]
 801d102:	899b      	ldrh	r3, [r3, #12]
 801d104:	b29b      	uxth	r3, r3
 801d106:	4618      	mov	r0, r3
 801d108:	f7fa fa98 	bl	801763c <lwip_htons>
 801d10c:	4603      	mov	r3, r0
 801d10e:	b2db      	uxtb	r3, r3
 801d110:	f003 0302 	and.w	r3, r3, #2
 801d114:	2b00      	cmp	r3, #0
 801d116:	d005      	beq.n	801d124 <tcp_receive+0x938>
                inseg.len -= 1;
 801d118:	4b78      	ldr	r3, [pc, #480]	; (801d2fc <tcp_receive+0xb10>)
 801d11a:	891b      	ldrh	r3, [r3, #8]
 801d11c:	3b01      	subs	r3, #1
 801d11e:	b29a      	uxth	r2, r3
 801d120:	4b76      	ldr	r3, [pc, #472]	; (801d2fc <tcp_receive+0xb10>)
 801d122:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 801d124:	4b75      	ldr	r3, [pc, #468]	; (801d2fc <tcp_receive+0xb10>)
 801d126:	685b      	ldr	r3, [r3, #4]
 801d128:	4a74      	ldr	r2, [pc, #464]	; (801d2fc <tcp_receive+0xb10>)
 801d12a:	8912      	ldrh	r2, [r2, #8]
 801d12c:	4611      	mov	r1, r2
 801d12e:	4618      	mov	r0, r3
 801d130:	f7fb fcf0 	bl	8018b14 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 801d134:	4b71      	ldr	r3, [pc, #452]	; (801d2fc <tcp_receive+0xb10>)
 801d136:	891c      	ldrh	r4, [r3, #8]
 801d138:	4b70      	ldr	r3, [pc, #448]	; (801d2fc <tcp_receive+0xb10>)
 801d13a:	68db      	ldr	r3, [r3, #12]
 801d13c:	899b      	ldrh	r3, [r3, #12]
 801d13e:	b29b      	uxth	r3, r3
 801d140:	4618      	mov	r0, r3
 801d142:	f7fa fa7b 	bl	801763c <lwip_htons>
 801d146:	4603      	mov	r3, r0
 801d148:	b2db      	uxtb	r3, r3
 801d14a:	f003 0303 	and.w	r3, r3, #3
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d001      	beq.n	801d156 <tcp_receive+0x96a>
 801d152:	2301      	movs	r3, #1
 801d154:	e000      	b.n	801d158 <tcp_receive+0x96c>
 801d156:	2300      	movs	r3, #0
 801d158:	4423      	add	r3, r4
 801d15a:	b29a      	uxth	r2, r3
 801d15c:	4b65      	ldr	r3, [pc, #404]	; (801d2f4 <tcp_receive+0xb08>)
 801d15e:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 801d160:	4b64      	ldr	r3, [pc, #400]	; (801d2f4 <tcp_receive+0xb08>)
 801d162:	881b      	ldrh	r3, [r3, #0]
 801d164:	461a      	mov	r2, r3
 801d166:	4b64      	ldr	r3, [pc, #400]	; (801d2f8 <tcp_receive+0xb0c>)
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	441a      	add	r2, r3
 801d16c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d16e:	68db      	ldr	r3, [r3, #12]
 801d170:	685b      	ldr	r3, [r3, #4]
 801d172:	429a      	cmp	r2, r3
 801d174:	d006      	beq.n	801d184 <tcp_receive+0x998>
 801d176:	4b62      	ldr	r3, [pc, #392]	; (801d300 <tcp_receive+0xb14>)
 801d178:	f240 52fc 	movw	r2, #1532	; 0x5fc
 801d17c:	4961      	ldr	r1, [pc, #388]	; (801d304 <tcp_receive+0xb18>)
 801d17e:	4862      	ldr	r0, [pc, #392]	; (801d308 <tcp_receive+0xb1c>)
 801d180:	f007 f886 	bl	8024290 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801d184:	687b      	ldr	r3, [r7, #4]
 801d186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d188:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801d18a:	4b5a      	ldr	r3, [pc, #360]	; (801d2f4 <tcp_receive+0xb08>)
 801d18c:	881b      	ldrh	r3, [r3, #0]
 801d18e:	461a      	mov	r2, r3
 801d190:	4b59      	ldr	r3, [pc, #356]	; (801d2f8 <tcp_receive+0xb0c>)
 801d192:	681b      	ldr	r3, [r3, #0]
 801d194:	441a      	add	r2, r3
 801d196:	687b      	ldr	r3, [r7, #4]
 801d198:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801d19a:	687b      	ldr	r3, [r7, #4]
 801d19c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d19e:	4b55      	ldr	r3, [pc, #340]	; (801d2f4 <tcp_receive+0xb08>)
 801d1a0:	881b      	ldrh	r3, [r3, #0]
 801d1a2:	429a      	cmp	r2, r3
 801d1a4:	d206      	bcs.n	801d1b4 <tcp_receive+0x9c8>
 801d1a6:	4b56      	ldr	r3, [pc, #344]	; (801d300 <tcp_receive+0xb14>)
 801d1a8:	f240 6207 	movw	r2, #1543	; 0x607
 801d1ac:	4957      	ldr	r1, [pc, #348]	; (801d30c <tcp_receive+0xb20>)
 801d1ae:	4856      	ldr	r0, [pc, #344]	; (801d308 <tcp_receive+0xb1c>)
 801d1b0:	f007 f86e 	bl	8024290 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801d1b4:	687b      	ldr	r3, [r7, #4]
 801d1b6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d1b8:	4b4e      	ldr	r3, [pc, #312]	; (801d2f4 <tcp_receive+0xb08>)
 801d1ba:	881b      	ldrh	r3, [r3, #0]
 801d1bc:	1ad3      	subs	r3, r2, r3
 801d1be:	b29a      	uxth	r2, r3
 801d1c0:	687b      	ldr	r3, [r7, #4]
 801d1c2:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801d1c4:	6878      	ldr	r0, [r7, #4]
 801d1c6:	f7fc fd99 	bl	8019cfc <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801d1ca:	4b4c      	ldr	r3, [pc, #304]	; (801d2fc <tcp_receive+0xb10>)
 801d1cc:	685b      	ldr	r3, [r3, #4]
 801d1ce:	891b      	ldrh	r3, [r3, #8]
 801d1d0:	2b00      	cmp	r3, #0
 801d1d2:	d006      	beq.n	801d1e2 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801d1d4:	4b49      	ldr	r3, [pc, #292]	; (801d2fc <tcp_receive+0xb10>)
 801d1d6:	685b      	ldr	r3, [r3, #4]
 801d1d8:	4a4d      	ldr	r2, [pc, #308]	; (801d310 <tcp_receive+0xb24>)
 801d1da:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 801d1dc:	4b47      	ldr	r3, [pc, #284]	; (801d2fc <tcp_receive+0xb10>)
 801d1de:	2200      	movs	r2, #0
 801d1e0:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801d1e2:	4b46      	ldr	r3, [pc, #280]	; (801d2fc <tcp_receive+0xb10>)
 801d1e4:	68db      	ldr	r3, [r3, #12]
 801d1e6:	899b      	ldrh	r3, [r3, #12]
 801d1e8:	b29b      	uxth	r3, r3
 801d1ea:	4618      	mov	r0, r3
 801d1ec:	f7fa fa26 	bl	801763c <lwip_htons>
 801d1f0:	4603      	mov	r3, r0
 801d1f2:	b2db      	uxtb	r3, r3
 801d1f4:	f003 0301 	and.w	r3, r3, #1
 801d1f8:	2b00      	cmp	r3, #0
 801d1fa:	f000 80b8 	beq.w	801d36e <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801d1fe:	4b45      	ldr	r3, [pc, #276]	; (801d314 <tcp_receive+0xb28>)
 801d200:	781b      	ldrb	r3, [r3, #0]
 801d202:	f043 0320 	orr.w	r3, r3, #32
 801d206:	b2da      	uxtb	r2, r3
 801d208:	4b42      	ldr	r3, [pc, #264]	; (801d314 <tcp_receive+0xb28>)
 801d20a:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 801d20c:	e0af      	b.n	801d36e <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 801d20e:	687b      	ldr	r3, [r7, #4]
 801d210:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d212:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 801d214:	687b      	ldr	r3, [r7, #4]
 801d216:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d218:	68db      	ldr	r3, [r3, #12]
 801d21a:	685b      	ldr	r3, [r3, #4]
 801d21c:	4a36      	ldr	r2, [pc, #216]	; (801d2f8 <tcp_receive+0xb0c>)
 801d21e:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 801d220:	68bb      	ldr	r3, [r7, #8]
 801d222:	891b      	ldrh	r3, [r3, #8]
 801d224:	461c      	mov	r4, r3
 801d226:	68bb      	ldr	r3, [r7, #8]
 801d228:	68db      	ldr	r3, [r3, #12]
 801d22a:	899b      	ldrh	r3, [r3, #12]
 801d22c:	b29b      	uxth	r3, r3
 801d22e:	4618      	mov	r0, r3
 801d230:	f7fa fa04 	bl	801763c <lwip_htons>
 801d234:	4603      	mov	r3, r0
 801d236:	b2db      	uxtb	r3, r3
 801d238:	f003 0303 	and.w	r3, r3, #3
 801d23c:	2b00      	cmp	r3, #0
 801d23e:	d001      	beq.n	801d244 <tcp_receive+0xa58>
 801d240:	2301      	movs	r3, #1
 801d242:	e000      	b.n	801d246 <tcp_receive+0xa5a>
 801d244:	2300      	movs	r3, #0
 801d246:	191a      	adds	r2, r3, r4
 801d248:	687b      	ldr	r3, [r7, #4]
 801d24a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d24c:	441a      	add	r2, r3
 801d24e:	687b      	ldr	r3, [r7, #4]
 801d250:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 801d252:	687b      	ldr	r3, [r7, #4]
 801d254:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d256:	461c      	mov	r4, r3
 801d258:	68bb      	ldr	r3, [r7, #8]
 801d25a:	891b      	ldrh	r3, [r3, #8]
 801d25c:	461d      	mov	r5, r3
 801d25e:	68bb      	ldr	r3, [r7, #8]
 801d260:	68db      	ldr	r3, [r3, #12]
 801d262:	899b      	ldrh	r3, [r3, #12]
 801d264:	b29b      	uxth	r3, r3
 801d266:	4618      	mov	r0, r3
 801d268:	f7fa f9e8 	bl	801763c <lwip_htons>
 801d26c:	4603      	mov	r3, r0
 801d26e:	b2db      	uxtb	r3, r3
 801d270:	f003 0303 	and.w	r3, r3, #3
 801d274:	2b00      	cmp	r3, #0
 801d276:	d001      	beq.n	801d27c <tcp_receive+0xa90>
 801d278:	2301      	movs	r3, #1
 801d27a:	e000      	b.n	801d27e <tcp_receive+0xa92>
 801d27c:	2300      	movs	r3, #0
 801d27e:	442b      	add	r3, r5
 801d280:	429c      	cmp	r4, r3
 801d282:	d206      	bcs.n	801d292 <tcp_receive+0xaa6>
 801d284:	4b1e      	ldr	r3, [pc, #120]	; (801d300 <tcp_receive+0xb14>)
 801d286:	f240 622b 	movw	r2, #1579	; 0x62b
 801d28a:	4923      	ldr	r1, [pc, #140]	; (801d318 <tcp_receive+0xb2c>)
 801d28c:	481e      	ldr	r0, [pc, #120]	; (801d308 <tcp_receive+0xb1c>)
 801d28e:	f006 ffff 	bl	8024290 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801d292:	68bb      	ldr	r3, [r7, #8]
 801d294:	891b      	ldrh	r3, [r3, #8]
 801d296:	461c      	mov	r4, r3
 801d298:	68bb      	ldr	r3, [r7, #8]
 801d29a:	68db      	ldr	r3, [r3, #12]
 801d29c:	899b      	ldrh	r3, [r3, #12]
 801d29e:	b29b      	uxth	r3, r3
 801d2a0:	4618      	mov	r0, r3
 801d2a2:	f7fa f9cb 	bl	801763c <lwip_htons>
 801d2a6:	4603      	mov	r3, r0
 801d2a8:	b2db      	uxtb	r3, r3
 801d2aa:	f003 0303 	and.w	r3, r3, #3
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	d001      	beq.n	801d2b6 <tcp_receive+0xaca>
 801d2b2:	2301      	movs	r3, #1
 801d2b4:	e000      	b.n	801d2b8 <tcp_receive+0xacc>
 801d2b6:	2300      	movs	r3, #0
 801d2b8:	1919      	adds	r1, r3, r4
 801d2ba:	687b      	ldr	r3, [r7, #4]
 801d2bc:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801d2be:	b28b      	uxth	r3, r1
 801d2c0:	1ad3      	subs	r3, r2, r3
 801d2c2:	b29a      	uxth	r2, r3
 801d2c4:	687b      	ldr	r3, [r7, #4]
 801d2c6:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801d2c8:	6878      	ldr	r0, [r7, #4]
 801d2ca:	f7fc fd17 	bl	8019cfc <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801d2ce:	68bb      	ldr	r3, [r7, #8]
 801d2d0:	685b      	ldr	r3, [r3, #4]
 801d2d2:	891b      	ldrh	r3, [r3, #8]
 801d2d4:	2b00      	cmp	r3, #0
 801d2d6:	d028      	beq.n	801d32a <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 801d2d8:	4b0d      	ldr	r3, [pc, #52]	; (801d310 <tcp_receive+0xb24>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	2b00      	cmp	r3, #0
 801d2de:	d01d      	beq.n	801d31c <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801d2e0:	4b0b      	ldr	r3, [pc, #44]	; (801d310 <tcp_receive+0xb24>)
 801d2e2:	681a      	ldr	r2, [r3, #0]
 801d2e4:	68bb      	ldr	r3, [r7, #8]
 801d2e6:	685b      	ldr	r3, [r3, #4]
 801d2e8:	4619      	mov	r1, r3
 801d2ea:	4610      	mov	r0, r2
 801d2ec:	f7fb fe66 	bl	8018fbc <pbuf_cat>
 801d2f0:	e018      	b.n	801d324 <tcp_receive+0xb38>
 801d2f2:	bf00      	nop
 801d2f4:	2000bffe 	.word	0x2000bffe
 801d2f8:	2000bff4 	.word	0x2000bff4
 801d2fc:	2000bfd4 	.word	0x2000bfd4
 801d300:	08027554 	.word	0x08027554
 801d304:	08027934 	.word	0x08027934
 801d308:	080275a0 	.word	0x080275a0
 801d30c:	08027970 	.word	0x08027970
 801d310:	2000c004 	.word	0x2000c004
 801d314:	2000c001 	.word	0x2000c001
 801d318:	08027990 	.word	0x08027990
            } else {
              recv_data = cseg->p;
 801d31c:	68bb      	ldr	r3, [r7, #8]
 801d31e:	685b      	ldr	r3, [r3, #4]
 801d320:	4a70      	ldr	r2, [pc, #448]	; (801d4e4 <tcp_receive+0xcf8>)
 801d322:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 801d324:	68bb      	ldr	r3, [r7, #8]
 801d326:	2200      	movs	r2, #0
 801d328:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801d32a:	68bb      	ldr	r3, [r7, #8]
 801d32c:	68db      	ldr	r3, [r3, #12]
 801d32e:	899b      	ldrh	r3, [r3, #12]
 801d330:	b29b      	uxth	r3, r3
 801d332:	4618      	mov	r0, r3
 801d334:	f7fa f982 	bl	801763c <lwip_htons>
 801d338:	4603      	mov	r3, r0
 801d33a:	b2db      	uxtb	r3, r3
 801d33c:	f003 0301 	and.w	r3, r3, #1
 801d340:	2b00      	cmp	r3, #0
 801d342:	d00d      	beq.n	801d360 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 801d344:	4b68      	ldr	r3, [pc, #416]	; (801d4e8 <tcp_receive+0xcfc>)
 801d346:	781b      	ldrb	r3, [r3, #0]
 801d348:	f043 0320 	orr.w	r3, r3, #32
 801d34c:	b2da      	uxtb	r2, r3
 801d34e:	4b66      	ldr	r3, [pc, #408]	; (801d4e8 <tcp_receive+0xcfc>)
 801d350:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 801d352:	687b      	ldr	r3, [r7, #4]
 801d354:	7d1b      	ldrb	r3, [r3, #20]
 801d356:	2b04      	cmp	r3, #4
 801d358:	d102      	bne.n	801d360 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801d35a:	687b      	ldr	r3, [r7, #4]
 801d35c:	2207      	movs	r2, #7
 801d35e:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 801d360:	68bb      	ldr	r3, [r7, #8]
 801d362:	681a      	ldr	r2, [r3, #0]
 801d364:	687b      	ldr	r3, [r7, #4]
 801d366:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801d368:	68b8      	ldr	r0, [r7, #8]
 801d36a:	f7fd fb04 	bl	801a976 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801d36e:	687b      	ldr	r3, [r7, #4]
 801d370:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d372:	2b00      	cmp	r3, #0
 801d374:	d008      	beq.n	801d388 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801d376:	687b      	ldr	r3, [r7, #4]
 801d378:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d37a:	68db      	ldr	r3, [r3, #12]
 801d37c:	685a      	ldr	r2, [r3, #4]
 801d37e:	687b      	ldr	r3, [r7, #4]
 801d380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801d382:	429a      	cmp	r2, r3
 801d384:	f43f af43 	beq.w	801d20e <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801d388:	687b      	ldr	r3, [r7, #4]
 801d38a:	8b5b      	ldrh	r3, [r3, #26]
 801d38c:	f003 0301 	and.w	r3, r3, #1
 801d390:	2b00      	cmp	r3, #0
 801d392:	d00e      	beq.n	801d3b2 <tcp_receive+0xbc6>
 801d394:	687b      	ldr	r3, [r7, #4]
 801d396:	8b5b      	ldrh	r3, [r3, #26]
 801d398:	f023 0301 	bic.w	r3, r3, #1
 801d39c:	b29a      	uxth	r2, r3
 801d39e:	687b      	ldr	r3, [r7, #4]
 801d3a0:	835a      	strh	r2, [r3, #26]
 801d3a2:	687b      	ldr	r3, [r7, #4]
 801d3a4:	8b5b      	ldrh	r3, [r3, #26]
 801d3a6:	f043 0302 	orr.w	r3, r3, #2
 801d3aa:	b29a      	uxth	r2, r3
 801d3ac:	687b      	ldr	r3, [r7, #4]
 801d3ae:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d3b0:	e188      	b.n	801d6c4 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801d3b2:	687b      	ldr	r3, [r7, #4]
 801d3b4:	8b5b      	ldrh	r3, [r3, #26]
 801d3b6:	f043 0301 	orr.w	r3, r3, #1
 801d3ba:	b29a      	uxth	r2, r3
 801d3bc:	687b      	ldr	r3, [r7, #4]
 801d3be:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801d3c0:	e180      	b.n	801d6c4 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801d3c2:	687b      	ldr	r3, [r7, #4]
 801d3c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d106      	bne.n	801d3d8 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801d3ca:	4848      	ldr	r0, [pc, #288]	; (801d4ec <tcp_receive+0xd00>)
 801d3cc:	f7fd faec 	bl	801a9a8 <tcp_seg_copy>
 801d3d0:	4602      	mov	r2, r0
 801d3d2:	687b      	ldr	r3, [r7, #4]
 801d3d4:	675a      	str	r2, [r3, #116]	; 0x74
 801d3d6:	e16d      	b.n	801d6b4 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 801d3d8:	2300      	movs	r3, #0
 801d3da:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d3dc:	687b      	ldr	r3, [r7, #4]
 801d3de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801d3e0:	63bb      	str	r3, [r7, #56]	; 0x38
 801d3e2:	e157      	b.n	801d694 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801d3e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3e6:	68db      	ldr	r3, [r3, #12]
 801d3e8:	685a      	ldr	r2, [r3, #4]
 801d3ea:	4b41      	ldr	r3, [pc, #260]	; (801d4f0 <tcp_receive+0xd04>)
 801d3ec:	681b      	ldr	r3, [r3, #0]
 801d3ee:	429a      	cmp	r2, r3
 801d3f0:	d11d      	bne.n	801d42e <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801d3f2:	4b3e      	ldr	r3, [pc, #248]	; (801d4ec <tcp_receive+0xd00>)
 801d3f4:	891a      	ldrh	r2, [r3, #8]
 801d3f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d3f8:	891b      	ldrh	r3, [r3, #8]
 801d3fa:	429a      	cmp	r2, r3
 801d3fc:	f240 814f 	bls.w	801d69e <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d400:	483a      	ldr	r0, [pc, #232]	; (801d4ec <tcp_receive+0xd00>)
 801d402:	f7fd fad1 	bl	801a9a8 <tcp_seg_copy>
 801d406:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 801d408:	697b      	ldr	r3, [r7, #20]
 801d40a:	2b00      	cmp	r3, #0
 801d40c:	f000 8149 	beq.w	801d6a2 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 801d410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d412:	2b00      	cmp	r3, #0
 801d414:	d003      	beq.n	801d41e <tcp_receive+0xc32>
                    prev->next = cseg;
 801d416:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d418:	697a      	ldr	r2, [r7, #20]
 801d41a:	601a      	str	r2, [r3, #0]
 801d41c:	e002      	b.n	801d424 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 801d41e:	687b      	ldr	r3, [r7, #4]
 801d420:	697a      	ldr	r2, [r7, #20]
 801d422:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 801d424:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d426:	6978      	ldr	r0, [r7, #20]
 801d428:	f7ff f8dc 	bl	801c5e4 <tcp_oos_insert_segment>
                }
                break;
 801d42c:	e139      	b.n	801d6a2 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 801d42e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d430:	2b00      	cmp	r3, #0
 801d432:	d117      	bne.n	801d464 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 801d434:	4b2e      	ldr	r3, [pc, #184]	; (801d4f0 <tcp_receive+0xd04>)
 801d436:	681a      	ldr	r2, [r3, #0]
 801d438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d43a:	68db      	ldr	r3, [r3, #12]
 801d43c:	685b      	ldr	r3, [r3, #4]
 801d43e:	1ad3      	subs	r3, r2, r3
 801d440:	2b00      	cmp	r3, #0
 801d442:	da57      	bge.n	801d4f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d444:	4829      	ldr	r0, [pc, #164]	; (801d4ec <tcp_receive+0xd00>)
 801d446:	f7fd faaf 	bl	801a9a8 <tcp_seg_copy>
 801d44a:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 801d44c:	69bb      	ldr	r3, [r7, #24]
 801d44e:	2b00      	cmp	r3, #0
 801d450:	f000 8129 	beq.w	801d6a6 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 801d454:	687b      	ldr	r3, [r7, #4]
 801d456:	69ba      	ldr	r2, [r7, #24]
 801d458:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801d45a:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d45c:	69b8      	ldr	r0, [r7, #24]
 801d45e:	f7ff f8c1 	bl	801c5e4 <tcp_oos_insert_segment>
                  }
                  break;
 801d462:	e120      	b.n	801d6a6 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 801d464:	4b22      	ldr	r3, [pc, #136]	; (801d4f0 <tcp_receive+0xd04>)
 801d466:	681a      	ldr	r2, [r3, #0]
 801d468:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d46a:	68db      	ldr	r3, [r3, #12]
 801d46c:	685b      	ldr	r3, [r3, #4]
 801d46e:	1ad3      	subs	r3, r2, r3
 801d470:	3b01      	subs	r3, #1
 801d472:	2b00      	cmp	r3, #0
 801d474:	db3e      	blt.n	801d4f4 <tcp_receive+0xd08>
 801d476:	4b1e      	ldr	r3, [pc, #120]	; (801d4f0 <tcp_receive+0xd04>)
 801d478:	681a      	ldr	r2, [r3, #0]
 801d47a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d47c:	68db      	ldr	r3, [r3, #12]
 801d47e:	685b      	ldr	r3, [r3, #4]
 801d480:	1ad3      	subs	r3, r2, r3
 801d482:	3301      	adds	r3, #1
 801d484:	2b00      	cmp	r3, #0
 801d486:	dc35      	bgt.n	801d4f4 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801d488:	4818      	ldr	r0, [pc, #96]	; (801d4ec <tcp_receive+0xd00>)
 801d48a:	f7fd fa8d 	bl	801a9a8 <tcp_seg_copy>
 801d48e:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801d490:	69fb      	ldr	r3, [r7, #28]
 801d492:	2b00      	cmp	r3, #0
 801d494:	f000 8109 	beq.w	801d6aa <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801d498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d49a:	68db      	ldr	r3, [r3, #12]
 801d49c:	685b      	ldr	r3, [r3, #4]
 801d49e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d4a0:	8912      	ldrh	r2, [r2, #8]
 801d4a2:	441a      	add	r2, r3
 801d4a4:	4b12      	ldr	r3, [pc, #72]	; (801d4f0 <tcp_receive+0xd04>)
 801d4a6:	681b      	ldr	r3, [r3, #0]
 801d4a8:	1ad3      	subs	r3, r2, r3
 801d4aa:	2b00      	cmp	r3, #0
 801d4ac:	dd12      	ble.n	801d4d4 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801d4ae:	4b10      	ldr	r3, [pc, #64]	; (801d4f0 <tcp_receive+0xd04>)
 801d4b0:	681b      	ldr	r3, [r3, #0]
 801d4b2:	b29a      	uxth	r2, r3
 801d4b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4b6:	68db      	ldr	r3, [r3, #12]
 801d4b8:	685b      	ldr	r3, [r3, #4]
 801d4ba:	b29b      	uxth	r3, r3
 801d4bc:	1ad3      	subs	r3, r2, r3
 801d4be:	b29a      	uxth	r2, r3
 801d4c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c2:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801d4c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4c6:	685a      	ldr	r2, [r3, #4]
 801d4c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4ca:	891b      	ldrh	r3, [r3, #8]
 801d4cc:	4619      	mov	r1, r3
 801d4ce:	4610      	mov	r0, r2
 801d4d0:	f7fb fb20 	bl	8018b14 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801d4d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d4d6:	69fa      	ldr	r2, [r7, #28]
 801d4d8:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 801d4da:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 801d4dc:	69f8      	ldr	r0, [r7, #28]
 801d4de:	f7ff f881 	bl	801c5e4 <tcp_oos_insert_segment>
                  }
                  break;
 801d4e2:	e0e2      	b.n	801d6aa <tcp_receive+0xebe>
 801d4e4:	2000c004 	.word	0x2000c004
 801d4e8:	2000c001 	.word	0x2000c001
 801d4ec:	2000bfd4 	.word	0x2000bfd4
 801d4f0:	2000bff4 	.word	0x2000bff4
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801d4f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4f6:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 801d4f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d4fa:	681b      	ldr	r3, [r3, #0]
 801d4fc:	2b00      	cmp	r3, #0
 801d4fe:	f040 80c6 	bne.w	801d68e <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801d502:	4b80      	ldr	r3, [pc, #512]	; (801d704 <tcp_receive+0xf18>)
 801d504:	681a      	ldr	r2, [r3, #0]
 801d506:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d508:	68db      	ldr	r3, [r3, #12]
 801d50a:	685b      	ldr	r3, [r3, #4]
 801d50c:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 801d50e:	2b00      	cmp	r3, #0
 801d510:	f340 80bd 	ble.w	801d68e <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 801d514:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d516:	68db      	ldr	r3, [r3, #12]
 801d518:	899b      	ldrh	r3, [r3, #12]
 801d51a:	b29b      	uxth	r3, r3
 801d51c:	4618      	mov	r0, r3
 801d51e:	f7fa f88d 	bl	801763c <lwip_htons>
 801d522:	4603      	mov	r3, r0
 801d524:	b2db      	uxtb	r3, r3
 801d526:	f003 0301 	and.w	r3, r3, #1
 801d52a:	2b00      	cmp	r3, #0
 801d52c:	f040 80bf 	bne.w	801d6ae <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 801d530:	4875      	ldr	r0, [pc, #468]	; (801d708 <tcp_receive+0xf1c>)
 801d532:	f7fd fa39 	bl	801a9a8 <tcp_seg_copy>
 801d536:	4602      	mov	r2, r0
 801d538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d53a:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 801d53c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d53e:	681b      	ldr	r3, [r3, #0]
 801d540:	2b00      	cmp	r3, #0
 801d542:	f000 80b6 	beq.w	801d6b2 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801d546:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d548:	68db      	ldr	r3, [r3, #12]
 801d54a:	685b      	ldr	r3, [r3, #4]
 801d54c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d54e:	8912      	ldrh	r2, [r2, #8]
 801d550:	441a      	add	r2, r3
 801d552:	4b6c      	ldr	r3, [pc, #432]	; (801d704 <tcp_receive+0xf18>)
 801d554:	681b      	ldr	r3, [r3, #0]
 801d556:	1ad3      	subs	r3, r2, r3
 801d558:	2b00      	cmp	r3, #0
 801d55a:	dd12      	ble.n	801d582 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 801d55c:	4b69      	ldr	r3, [pc, #420]	; (801d704 <tcp_receive+0xf18>)
 801d55e:	681b      	ldr	r3, [r3, #0]
 801d560:	b29a      	uxth	r2, r3
 801d562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d564:	68db      	ldr	r3, [r3, #12]
 801d566:	685b      	ldr	r3, [r3, #4]
 801d568:	b29b      	uxth	r3, r3
 801d56a:	1ad3      	subs	r3, r2, r3
 801d56c:	b29a      	uxth	r2, r3
 801d56e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d570:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801d572:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d574:	685a      	ldr	r2, [r3, #4]
 801d576:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d578:	891b      	ldrh	r3, [r3, #8]
 801d57a:	4619      	mov	r1, r3
 801d57c:	4610      	mov	r0, r2
 801d57e:	f7fb fac9 	bl	8018b14 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801d582:	4b62      	ldr	r3, [pc, #392]	; (801d70c <tcp_receive+0xf20>)
 801d584:	881b      	ldrh	r3, [r3, #0]
 801d586:	461a      	mov	r2, r3
 801d588:	4b5e      	ldr	r3, [pc, #376]	; (801d704 <tcp_receive+0xf18>)
 801d58a:	681b      	ldr	r3, [r3, #0]
 801d58c:	441a      	add	r2, r3
 801d58e:	687b      	ldr	r3, [r7, #4]
 801d590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d592:	6879      	ldr	r1, [r7, #4]
 801d594:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d596:	440b      	add	r3, r1
 801d598:	1ad3      	subs	r3, r2, r3
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	f340 8089 	ble.w	801d6b2 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801d5a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5a2:	681b      	ldr	r3, [r3, #0]
 801d5a4:	68db      	ldr	r3, [r3, #12]
 801d5a6:	899b      	ldrh	r3, [r3, #12]
 801d5a8:	b29b      	uxth	r3, r3
 801d5aa:	4618      	mov	r0, r3
 801d5ac:	f7fa f846 	bl	801763c <lwip_htons>
 801d5b0:	4603      	mov	r3, r0
 801d5b2:	b2db      	uxtb	r3, r3
 801d5b4:	f003 0301 	and.w	r3, r3, #1
 801d5b8:	2b00      	cmp	r3, #0
 801d5ba:	d022      	beq.n	801d602 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 801d5bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5be:	681b      	ldr	r3, [r3, #0]
 801d5c0:	68db      	ldr	r3, [r3, #12]
 801d5c2:	899b      	ldrh	r3, [r3, #12]
 801d5c4:	b29b      	uxth	r3, r3
 801d5c6:	b21b      	sxth	r3, r3
 801d5c8:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801d5cc:	b21c      	sxth	r4, r3
 801d5ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5d0:	681b      	ldr	r3, [r3, #0]
 801d5d2:	68db      	ldr	r3, [r3, #12]
 801d5d4:	899b      	ldrh	r3, [r3, #12]
 801d5d6:	b29b      	uxth	r3, r3
 801d5d8:	4618      	mov	r0, r3
 801d5da:	f7fa f82f 	bl	801763c <lwip_htons>
 801d5de:	4603      	mov	r3, r0
 801d5e0:	b2db      	uxtb	r3, r3
 801d5e2:	b29b      	uxth	r3, r3
 801d5e4:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 801d5e8:	b29b      	uxth	r3, r3
 801d5ea:	4618      	mov	r0, r3
 801d5ec:	f7fa f826 	bl	801763c <lwip_htons>
 801d5f0:	4603      	mov	r3, r0
 801d5f2:	b21b      	sxth	r3, r3
 801d5f4:	4323      	orrs	r3, r4
 801d5f6:	b21a      	sxth	r2, r3
 801d5f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d5fa:	681b      	ldr	r3, [r3, #0]
 801d5fc:	68db      	ldr	r3, [r3, #12]
 801d5fe:	b292      	uxth	r2, r2
 801d600:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801d602:	687b      	ldr	r3, [r7, #4]
 801d604:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d606:	b29a      	uxth	r2, r3
 801d608:	687b      	ldr	r3, [r7, #4]
 801d60a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801d60c:	4413      	add	r3, r2
 801d60e:	b299      	uxth	r1, r3
 801d610:	4b3c      	ldr	r3, [pc, #240]	; (801d704 <tcp_receive+0xf18>)
 801d612:	681b      	ldr	r3, [r3, #0]
 801d614:	b29a      	uxth	r2, r3
 801d616:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d618:	681b      	ldr	r3, [r3, #0]
 801d61a:	1a8a      	subs	r2, r1, r2
 801d61c:	b292      	uxth	r2, r2
 801d61e:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 801d620:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d622:	681b      	ldr	r3, [r3, #0]
 801d624:	685a      	ldr	r2, [r3, #4]
 801d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d628:	681b      	ldr	r3, [r3, #0]
 801d62a:	891b      	ldrh	r3, [r3, #8]
 801d62c:	4619      	mov	r1, r3
 801d62e:	4610      	mov	r0, r2
 801d630:	f7fb fa70 	bl	8018b14 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 801d634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d636:	681b      	ldr	r3, [r3, #0]
 801d638:	891c      	ldrh	r4, [r3, #8]
 801d63a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d63c:	681b      	ldr	r3, [r3, #0]
 801d63e:	68db      	ldr	r3, [r3, #12]
 801d640:	899b      	ldrh	r3, [r3, #12]
 801d642:	b29b      	uxth	r3, r3
 801d644:	4618      	mov	r0, r3
 801d646:	f7f9 fff9 	bl	801763c <lwip_htons>
 801d64a:	4603      	mov	r3, r0
 801d64c:	b2db      	uxtb	r3, r3
 801d64e:	f003 0303 	and.w	r3, r3, #3
 801d652:	2b00      	cmp	r3, #0
 801d654:	d001      	beq.n	801d65a <tcp_receive+0xe6e>
 801d656:	2301      	movs	r3, #1
 801d658:	e000      	b.n	801d65c <tcp_receive+0xe70>
 801d65a:	2300      	movs	r3, #0
 801d65c:	4423      	add	r3, r4
 801d65e:	b29a      	uxth	r2, r3
 801d660:	4b2a      	ldr	r3, [pc, #168]	; (801d70c <tcp_receive+0xf20>)
 801d662:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801d664:	4b29      	ldr	r3, [pc, #164]	; (801d70c <tcp_receive+0xf20>)
 801d666:	881b      	ldrh	r3, [r3, #0]
 801d668:	461a      	mov	r2, r3
 801d66a:	4b26      	ldr	r3, [pc, #152]	; (801d704 <tcp_receive+0xf18>)
 801d66c:	681b      	ldr	r3, [r3, #0]
 801d66e:	441a      	add	r2, r3
 801d670:	687b      	ldr	r3, [r7, #4]
 801d672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d674:	6879      	ldr	r1, [r7, #4]
 801d676:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d678:	440b      	add	r3, r1
 801d67a:	429a      	cmp	r2, r3
 801d67c:	d019      	beq.n	801d6b2 <tcp_receive+0xec6>
 801d67e:	4b24      	ldr	r3, [pc, #144]	; (801d710 <tcp_receive+0xf24>)
 801d680:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 801d684:	4923      	ldr	r1, [pc, #140]	; (801d714 <tcp_receive+0xf28>)
 801d686:	4824      	ldr	r0, [pc, #144]	; (801d718 <tcp_receive+0xf2c>)
 801d688:	f006 fe02 	bl	8024290 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 801d68c:	e011      	b.n	801d6b2 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801d68e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d690:	681b      	ldr	r3, [r3, #0]
 801d692:	63bb      	str	r3, [r7, #56]	; 0x38
 801d694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d696:	2b00      	cmp	r3, #0
 801d698:	f47f aea4 	bne.w	801d3e4 <tcp_receive+0xbf8>
 801d69c:	e00a      	b.n	801d6b4 <tcp_receive+0xec8>
                break;
 801d69e:	bf00      	nop
 801d6a0:	e008      	b.n	801d6b4 <tcp_receive+0xec8>
                break;
 801d6a2:	bf00      	nop
 801d6a4:	e006      	b.n	801d6b4 <tcp_receive+0xec8>
                  break;
 801d6a6:	bf00      	nop
 801d6a8:	e004      	b.n	801d6b4 <tcp_receive+0xec8>
                  break;
 801d6aa:	bf00      	nop
 801d6ac:	e002      	b.n	801d6b4 <tcp_receive+0xec8>
                  break;
 801d6ae:	bf00      	nop
 801d6b0:	e000      	b.n	801d6b4 <tcp_receive+0xec8>
                break;
 801d6b2:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 801d6b4:	6878      	ldr	r0, [r7, #4]
 801d6b6:	f001 fe8b 	bl	801f3d0 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801d6ba:	e003      	b.n	801d6c4 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 801d6bc:	6878      	ldr	r0, [r7, #4]
 801d6be:	f001 fe87 	bl	801f3d0 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801d6c2:	e01a      	b.n	801d6fa <tcp_receive+0xf0e>
 801d6c4:	e019      	b.n	801d6fa <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801d6c6:	4b0f      	ldr	r3, [pc, #60]	; (801d704 <tcp_receive+0xf18>)
 801d6c8:	681a      	ldr	r2, [r3, #0]
 801d6ca:	687b      	ldr	r3, [r7, #4]
 801d6cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6ce:	1ad3      	subs	r3, r2, r3
 801d6d0:	2b00      	cmp	r3, #0
 801d6d2:	db0a      	blt.n	801d6ea <tcp_receive+0xefe>
 801d6d4:	4b0b      	ldr	r3, [pc, #44]	; (801d704 <tcp_receive+0xf18>)
 801d6d6:	681a      	ldr	r2, [r3, #0]
 801d6d8:	687b      	ldr	r3, [r7, #4]
 801d6da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801d6dc:	6879      	ldr	r1, [r7, #4]
 801d6de:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801d6e0:	440b      	add	r3, r1
 801d6e2:	1ad3      	subs	r3, r2, r3
 801d6e4:	3301      	adds	r3, #1
 801d6e6:	2b00      	cmp	r3, #0
 801d6e8:	dd07      	ble.n	801d6fa <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	8b5b      	ldrh	r3, [r3, #26]
 801d6ee:	f043 0302 	orr.w	r3, r3, #2
 801d6f2:	b29a      	uxth	r2, r3
 801d6f4:	687b      	ldr	r3, [r7, #4]
 801d6f6:	835a      	strh	r2, [r3, #26]
    }
  }
}
 801d6f8:	e7ff      	b.n	801d6fa <tcp_receive+0xf0e>
 801d6fa:	bf00      	nop
 801d6fc:	3750      	adds	r7, #80	; 0x50
 801d6fe:	46bd      	mov	sp, r7
 801d700:	bdb0      	pop	{r4, r5, r7, pc}
 801d702:	bf00      	nop
 801d704:	2000bff4 	.word	0x2000bff4
 801d708:	2000bfd4 	.word	0x2000bfd4
 801d70c:	2000bffe 	.word	0x2000bffe
 801d710:	08027554 	.word	0x08027554
 801d714:	080278fc 	.word	0x080278fc
 801d718:	080275a0 	.word	0x080275a0

0801d71c <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 801d71c:	b480      	push	{r7}
 801d71e:	b083      	sub	sp, #12
 801d720:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 801d722:	4b15      	ldr	r3, [pc, #84]	; (801d778 <tcp_get_next_optbyte+0x5c>)
 801d724:	881b      	ldrh	r3, [r3, #0]
 801d726:	1c5a      	adds	r2, r3, #1
 801d728:	b291      	uxth	r1, r2
 801d72a:	4a13      	ldr	r2, [pc, #76]	; (801d778 <tcp_get_next_optbyte+0x5c>)
 801d72c:	8011      	strh	r1, [r2, #0]
 801d72e:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 801d730:	4b12      	ldr	r3, [pc, #72]	; (801d77c <tcp_get_next_optbyte+0x60>)
 801d732:	681b      	ldr	r3, [r3, #0]
 801d734:	2b00      	cmp	r3, #0
 801d736:	d004      	beq.n	801d742 <tcp_get_next_optbyte+0x26>
 801d738:	4b11      	ldr	r3, [pc, #68]	; (801d780 <tcp_get_next_optbyte+0x64>)
 801d73a:	881b      	ldrh	r3, [r3, #0]
 801d73c:	88fa      	ldrh	r2, [r7, #6]
 801d73e:	429a      	cmp	r2, r3
 801d740:	d208      	bcs.n	801d754 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 801d742:	4b10      	ldr	r3, [pc, #64]	; (801d784 <tcp_get_next_optbyte+0x68>)
 801d744:	681b      	ldr	r3, [r3, #0]
 801d746:	3314      	adds	r3, #20
 801d748:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801d74a:	88fb      	ldrh	r3, [r7, #6]
 801d74c:	683a      	ldr	r2, [r7, #0]
 801d74e:	4413      	add	r3, r2
 801d750:	781b      	ldrb	r3, [r3, #0]
 801d752:	e00b      	b.n	801d76c <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 801d754:	88fb      	ldrh	r3, [r7, #6]
 801d756:	b2da      	uxtb	r2, r3
 801d758:	4b09      	ldr	r3, [pc, #36]	; (801d780 <tcp_get_next_optbyte+0x64>)
 801d75a:	881b      	ldrh	r3, [r3, #0]
 801d75c:	b2db      	uxtb	r3, r3
 801d75e:	1ad3      	subs	r3, r2, r3
 801d760:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 801d762:	4b06      	ldr	r3, [pc, #24]	; (801d77c <tcp_get_next_optbyte+0x60>)
 801d764:	681a      	ldr	r2, [r3, #0]
 801d766:	797b      	ldrb	r3, [r7, #5]
 801d768:	4413      	add	r3, r2
 801d76a:	781b      	ldrb	r3, [r3, #0]
  }
}
 801d76c:	4618      	mov	r0, r3
 801d76e:	370c      	adds	r7, #12
 801d770:	46bd      	mov	sp, r7
 801d772:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d776:	4770      	bx	lr
 801d778:	2000bff0 	.word	0x2000bff0
 801d77c:	2000bfec 	.word	0x2000bfec
 801d780:	2000bfea 	.word	0x2000bfea
 801d784:	2000bfe4 	.word	0x2000bfe4

0801d788 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801d788:	b580      	push	{r7, lr}
 801d78a:	b084      	sub	sp, #16
 801d78c:	af00      	add	r7, sp, #0
 801d78e:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 801d790:	687b      	ldr	r3, [r7, #4]
 801d792:	2b00      	cmp	r3, #0
 801d794:	d106      	bne.n	801d7a4 <tcp_parseopt+0x1c>
 801d796:	4b32      	ldr	r3, [pc, #200]	; (801d860 <tcp_parseopt+0xd8>)
 801d798:	f240 727d 	movw	r2, #1917	; 0x77d
 801d79c:	4931      	ldr	r1, [pc, #196]	; (801d864 <tcp_parseopt+0xdc>)
 801d79e:	4832      	ldr	r0, [pc, #200]	; (801d868 <tcp_parseopt+0xe0>)
 801d7a0:	f006 fd76 	bl	8024290 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 801d7a4:	4b31      	ldr	r3, [pc, #196]	; (801d86c <tcp_parseopt+0xe4>)
 801d7a6:	881b      	ldrh	r3, [r3, #0]
 801d7a8:	2b00      	cmp	r3, #0
 801d7aa:	d055      	beq.n	801d858 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d7ac:	4b30      	ldr	r3, [pc, #192]	; (801d870 <tcp_parseopt+0xe8>)
 801d7ae:	2200      	movs	r2, #0
 801d7b0:	801a      	strh	r2, [r3, #0]
 801d7b2:	e045      	b.n	801d840 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 801d7b4:	f7ff ffb2 	bl	801d71c <tcp_get_next_optbyte>
 801d7b8:	4603      	mov	r3, r0
 801d7ba:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 801d7bc:	7bfb      	ldrb	r3, [r7, #15]
 801d7be:	2b02      	cmp	r3, #2
 801d7c0:	d006      	beq.n	801d7d0 <tcp_parseopt+0x48>
 801d7c2:	2b02      	cmp	r3, #2
 801d7c4:	dc2b      	bgt.n	801d81e <tcp_parseopt+0x96>
 801d7c6:	2b00      	cmp	r3, #0
 801d7c8:	d041      	beq.n	801d84e <tcp_parseopt+0xc6>
 801d7ca:	2b01      	cmp	r3, #1
 801d7cc:	d127      	bne.n	801d81e <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 801d7ce:	e037      	b.n	801d840 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 801d7d0:	f7ff ffa4 	bl	801d71c <tcp_get_next_optbyte>
 801d7d4:	4603      	mov	r3, r0
 801d7d6:	2b04      	cmp	r3, #4
 801d7d8:	d13b      	bne.n	801d852 <tcp_parseopt+0xca>
 801d7da:	4b25      	ldr	r3, [pc, #148]	; (801d870 <tcp_parseopt+0xe8>)
 801d7dc:	881b      	ldrh	r3, [r3, #0]
 801d7de:	3301      	adds	r3, #1
 801d7e0:	4a22      	ldr	r2, [pc, #136]	; (801d86c <tcp_parseopt+0xe4>)
 801d7e2:	8812      	ldrh	r2, [r2, #0]
 801d7e4:	4293      	cmp	r3, r2
 801d7e6:	da34      	bge.n	801d852 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 801d7e8:	f7ff ff98 	bl	801d71c <tcp_get_next_optbyte>
 801d7ec:	4603      	mov	r3, r0
 801d7ee:	b29b      	uxth	r3, r3
 801d7f0:	021b      	lsls	r3, r3, #8
 801d7f2:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 801d7f4:	f7ff ff92 	bl	801d71c <tcp_get_next_optbyte>
 801d7f8:	4603      	mov	r3, r0
 801d7fa:	b29a      	uxth	r2, r3
 801d7fc:	89bb      	ldrh	r3, [r7, #12]
 801d7fe:	4313      	orrs	r3, r2
 801d800:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 801d802:	89bb      	ldrh	r3, [r7, #12]
 801d804:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801d808:	d804      	bhi.n	801d814 <tcp_parseopt+0x8c>
 801d80a:	89bb      	ldrh	r3, [r7, #12]
 801d80c:	2b00      	cmp	r3, #0
 801d80e:	d001      	beq.n	801d814 <tcp_parseopt+0x8c>
 801d810:	89ba      	ldrh	r2, [r7, #12]
 801d812:	e001      	b.n	801d818 <tcp_parseopt+0x90>
 801d814:	f44f 7206 	mov.w	r2, #536	; 0x218
 801d818:	687b      	ldr	r3, [r7, #4]
 801d81a:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 801d81c:	e010      	b.n	801d840 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 801d81e:	f7ff ff7d 	bl	801d71c <tcp_get_next_optbyte>
 801d822:	4603      	mov	r3, r0
 801d824:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 801d826:	7afb      	ldrb	r3, [r7, #11]
 801d828:	2b01      	cmp	r3, #1
 801d82a:	d914      	bls.n	801d856 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 801d82c:	7afb      	ldrb	r3, [r7, #11]
 801d82e:	b29a      	uxth	r2, r3
 801d830:	4b0f      	ldr	r3, [pc, #60]	; (801d870 <tcp_parseopt+0xe8>)
 801d832:	881b      	ldrh	r3, [r3, #0]
 801d834:	4413      	add	r3, r2
 801d836:	b29b      	uxth	r3, r3
 801d838:	3b02      	subs	r3, #2
 801d83a:	b29a      	uxth	r2, r3
 801d83c:	4b0c      	ldr	r3, [pc, #48]	; (801d870 <tcp_parseopt+0xe8>)
 801d83e:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 801d840:	4b0b      	ldr	r3, [pc, #44]	; (801d870 <tcp_parseopt+0xe8>)
 801d842:	881a      	ldrh	r2, [r3, #0]
 801d844:	4b09      	ldr	r3, [pc, #36]	; (801d86c <tcp_parseopt+0xe4>)
 801d846:	881b      	ldrh	r3, [r3, #0]
 801d848:	429a      	cmp	r2, r3
 801d84a:	d3b3      	bcc.n	801d7b4 <tcp_parseopt+0x2c>
 801d84c:	e004      	b.n	801d858 <tcp_parseopt+0xd0>
          return;
 801d84e:	bf00      	nop
 801d850:	e002      	b.n	801d858 <tcp_parseopt+0xd0>
            return;
 801d852:	bf00      	nop
 801d854:	e000      	b.n	801d858 <tcp_parseopt+0xd0>
            return;
 801d856:	bf00      	nop
      }
    }
  }
}
 801d858:	3710      	adds	r7, #16
 801d85a:	46bd      	mov	sp, r7
 801d85c:	bd80      	pop	{r7, pc}
 801d85e:	bf00      	nop
 801d860:	08027554 	.word	0x08027554
 801d864:	080279b8 	.word	0x080279b8
 801d868:	080275a0 	.word	0x080275a0
 801d86c:	2000bfe8 	.word	0x2000bfe8
 801d870:	2000bff0 	.word	0x2000bff0

0801d874 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 801d874:	b480      	push	{r7}
 801d876:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801d878:	4b05      	ldr	r3, [pc, #20]	; (801d890 <tcp_trigger_input_pcb_close+0x1c>)
 801d87a:	781b      	ldrb	r3, [r3, #0]
 801d87c:	f043 0310 	orr.w	r3, r3, #16
 801d880:	b2da      	uxtb	r2, r3
 801d882:	4b03      	ldr	r3, [pc, #12]	; (801d890 <tcp_trigger_input_pcb_close+0x1c>)
 801d884:	701a      	strb	r2, [r3, #0]
}
 801d886:	bf00      	nop
 801d888:	46bd      	mov	sp, r7
 801d88a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d88e:	4770      	bx	lr
 801d890:	2000c001 	.word	0x2000c001

0801d894 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 801d894:	b580      	push	{r7, lr}
 801d896:	b084      	sub	sp, #16
 801d898:	af00      	add	r7, sp, #0
 801d89a:	60f8      	str	r0, [r7, #12]
 801d89c:	60b9      	str	r1, [r7, #8]
 801d89e:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 801d8a0:	68fb      	ldr	r3, [r7, #12]
 801d8a2:	2b00      	cmp	r3, #0
 801d8a4:	d00a      	beq.n	801d8bc <tcp_route+0x28>
 801d8a6:	68fb      	ldr	r3, [r7, #12]
 801d8a8:	7a1b      	ldrb	r3, [r3, #8]
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d006      	beq.n	801d8bc <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 801d8ae:	68fb      	ldr	r3, [r7, #12]
 801d8b0:	7a1b      	ldrb	r3, [r3, #8]
 801d8b2:	4618      	mov	r0, r3
 801d8b4:	f7fa ff26 	bl	8018704 <netif_get_by_index>
 801d8b8:	4603      	mov	r3, r0
 801d8ba:	e003      	b.n	801d8c4 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 801d8bc:	6878      	ldr	r0, [r7, #4]
 801d8be:	f003 fea3 	bl	8021608 <ip4_route>
 801d8c2:	4603      	mov	r3, r0
  }
}
 801d8c4:	4618      	mov	r0, r3
 801d8c6:	3710      	adds	r7, #16
 801d8c8:	46bd      	mov	sp, r7
 801d8ca:	bd80      	pop	{r7, pc}

0801d8cc <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 801d8cc:	b590      	push	{r4, r7, lr}
 801d8ce:	b087      	sub	sp, #28
 801d8d0:	af00      	add	r7, sp, #0
 801d8d2:	60f8      	str	r0, [r7, #12]
 801d8d4:	60b9      	str	r1, [r7, #8]
 801d8d6:	603b      	str	r3, [r7, #0]
 801d8d8:	4613      	mov	r3, r2
 801d8da:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 801d8dc:	68fb      	ldr	r3, [r7, #12]
 801d8de:	2b00      	cmp	r3, #0
 801d8e0:	d105      	bne.n	801d8ee <tcp_create_segment+0x22>
 801d8e2:	4b44      	ldr	r3, [pc, #272]	; (801d9f4 <tcp_create_segment+0x128>)
 801d8e4:	22a3      	movs	r2, #163	; 0xa3
 801d8e6:	4944      	ldr	r1, [pc, #272]	; (801d9f8 <tcp_create_segment+0x12c>)
 801d8e8:	4844      	ldr	r0, [pc, #272]	; (801d9fc <tcp_create_segment+0x130>)
 801d8ea:	f006 fcd1 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 801d8ee:	68bb      	ldr	r3, [r7, #8]
 801d8f0:	2b00      	cmp	r3, #0
 801d8f2:	d105      	bne.n	801d900 <tcp_create_segment+0x34>
 801d8f4:	4b3f      	ldr	r3, [pc, #252]	; (801d9f4 <tcp_create_segment+0x128>)
 801d8f6:	22a4      	movs	r2, #164	; 0xa4
 801d8f8:	4941      	ldr	r1, [pc, #260]	; (801da00 <tcp_create_segment+0x134>)
 801d8fa:	4840      	ldr	r0, [pc, #256]	; (801d9fc <tcp_create_segment+0x130>)
 801d8fc:	f006 fcc8 	bl	8024290 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801d900:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801d904:	009b      	lsls	r3, r3, #2
 801d906:	b2db      	uxtb	r3, r3
 801d908:	f003 0304 	and.w	r3, r3, #4
 801d90c:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 801d90e:	2003      	movs	r0, #3
 801d910:	f7fa fb6c 	bl	8017fec <memp_malloc>
 801d914:	6138      	str	r0, [r7, #16]
 801d916:	693b      	ldr	r3, [r7, #16]
 801d918:	2b00      	cmp	r3, #0
 801d91a:	d104      	bne.n	801d926 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 801d91c:	68b8      	ldr	r0, [r7, #8]
 801d91e:	f7fb fa7f 	bl	8018e20 <pbuf_free>
    return NULL;
 801d922:	2300      	movs	r3, #0
 801d924:	e061      	b.n	801d9ea <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801d926:	693b      	ldr	r3, [r7, #16]
 801d928:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801d92c:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 801d92e:	693b      	ldr	r3, [r7, #16]
 801d930:	2200      	movs	r2, #0
 801d932:	601a      	str	r2, [r3, #0]
  seg->p = p;
 801d934:	693b      	ldr	r3, [r7, #16]
 801d936:	68ba      	ldr	r2, [r7, #8]
 801d938:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801d93a:	68bb      	ldr	r3, [r7, #8]
 801d93c:	891a      	ldrh	r2, [r3, #8]
 801d93e:	7dfb      	ldrb	r3, [r7, #23]
 801d940:	b29b      	uxth	r3, r3
 801d942:	429a      	cmp	r2, r3
 801d944:	d205      	bcs.n	801d952 <tcp_create_segment+0x86>
 801d946:	4b2b      	ldr	r3, [pc, #172]	; (801d9f4 <tcp_create_segment+0x128>)
 801d948:	22b0      	movs	r2, #176	; 0xb0
 801d94a:	492e      	ldr	r1, [pc, #184]	; (801da04 <tcp_create_segment+0x138>)
 801d94c:	482b      	ldr	r0, [pc, #172]	; (801d9fc <tcp_create_segment+0x130>)
 801d94e:	f006 fc9f 	bl	8024290 <iprintf>
  seg->len = p->tot_len - optlen;
 801d952:	68bb      	ldr	r3, [r7, #8]
 801d954:	891a      	ldrh	r2, [r3, #8]
 801d956:	7dfb      	ldrb	r3, [r7, #23]
 801d958:	b29b      	uxth	r3, r3
 801d95a:	1ad3      	subs	r3, r2, r3
 801d95c:	b29a      	uxth	r2, r3
 801d95e:	693b      	ldr	r3, [r7, #16]
 801d960:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 801d962:	2114      	movs	r1, #20
 801d964:	68b8      	ldr	r0, [r7, #8]
 801d966:	f7fb f9c5 	bl	8018cf4 <pbuf_add_header>
 801d96a:	4603      	mov	r3, r0
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	d004      	beq.n	801d97a <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 801d970:	6938      	ldr	r0, [r7, #16]
 801d972:	f7fd f800 	bl	801a976 <tcp_seg_free>
    return NULL;
 801d976:	2300      	movs	r3, #0
 801d978:	e037      	b.n	801d9ea <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801d97a:	693b      	ldr	r3, [r7, #16]
 801d97c:	685b      	ldr	r3, [r3, #4]
 801d97e:	685a      	ldr	r2, [r3, #4]
 801d980:	693b      	ldr	r3, [r7, #16]
 801d982:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 801d984:	68fb      	ldr	r3, [r7, #12]
 801d986:	8ada      	ldrh	r2, [r3, #22]
 801d988:	693b      	ldr	r3, [r7, #16]
 801d98a:	68dc      	ldr	r4, [r3, #12]
 801d98c:	4610      	mov	r0, r2
 801d98e:	f7f9 fe55 	bl	801763c <lwip_htons>
 801d992:	4603      	mov	r3, r0
 801d994:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801d996:	68fb      	ldr	r3, [r7, #12]
 801d998:	8b1a      	ldrh	r2, [r3, #24]
 801d99a:	693b      	ldr	r3, [r7, #16]
 801d99c:	68dc      	ldr	r4, [r3, #12]
 801d99e:	4610      	mov	r0, r2
 801d9a0:	f7f9 fe4c 	bl	801763c <lwip_htons>
 801d9a4:	4603      	mov	r3, r0
 801d9a6:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801d9a8:	693b      	ldr	r3, [r7, #16]
 801d9aa:	68dc      	ldr	r4, [r3, #12]
 801d9ac:	6838      	ldr	r0, [r7, #0]
 801d9ae:	f7f9 fe5a 	bl	8017666 <lwip_htonl>
 801d9b2:	4603      	mov	r3, r0
 801d9b4:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801d9b6:	7dfb      	ldrb	r3, [r7, #23]
 801d9b8:	089b      	lsrs	r3, r3, #2
 801d9ba:	b2db      	uxtb	r3, r3
 801d9bc:	b29b      	uxth	r3, r3
 801d9be:	3305      	adds	r3, #5
 801d9c0:	b29b      	uxth	r3, r3
 801d9c2:	031b      	lsls	r3, r3, #12
 801d9c4:	b29a      	uxth	r2, r3
 801d9c6:	79fb      	ldrb	r3, [r7, #7]
 801d9c8:	b29b      	uxth	r3, r3
 801d9ca:	4313      	orrs	r3, r2
 801d9cc:	b29a      	uxth	r2, r3
 801d9ce:	693b      	ldr	r3, [r7, #16]
 801d9d0:	68dc      	ldr	r4, [r3, #12]
 801d9d2:	4610      	mov	r0, r2
 801d9d4:	f7f9 fe32 	bl	801763c <lwip_htons>
 801d9d8:	4603      	mov	r3, r0
 801d9da:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 801d9dc:	693b      	ldr	r3, [r7, #16]
 801d9de:	68db      	ldr	r3, [r3, #12]
 801d9e0:	2200      	movs	r2, #0
 801d9e2:	749a      	strb	r2, [r3, #18]
 801d9e4:	2200      	movs	r2, #0
 801d9e6:	74da      	strb	r2, [r3, #19]
  return seg;
 801d9e8:	693b      	ldr	r3, [r7, #16]
}
 801d9ea:	4618      	mov	r0, r3
 801d9ec:	371c      	adds	r7, #28
 801d9ee:	46bd      	mov	sp, r7
 801d9f0:	bd90      	pop	{r4, r7, pc}
 801d9f2:	bf00      	nop
 801d9f4:	080279d4 	.word	0x080279d4
 801d9f8:	08027a08 	.word	0x08027a08
 801d9fc:	08027a28 	.word	0x08027a28
 801da00:	08027a50 	.word	0x08027a50
 801da04:	08027a74 	.word	0x08027a74

0801da08 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 801da08:	b580      	push	{r7, lr}
 801da0a:	b086      	sub	sp, #24
 801da0c:	af00      	add	r7, sp, #0
 801da0e:	607b      	str	r3, [r7, #4]
 801da10:	4603      	mov	r3, r0
 801da12:	73fb      	strb	r3, [r7, #15]
 801da14:	460b      	mov	r3, r1
 801da16:	81bb      	strh	r3, [r7, #12]
 801da18:	4613      	mov	r3, r2
 801da1a:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 801da1c:	89bb      	ldrh	r3, [r7, #12]
 801da1e:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 801da20:	687b      	ldr	r3, [r7, #4]
 801da22:	2b00      	cmp	r3, #0
 801da24:	d105      	bne.n	801da32 <tcp_pbuf_prealloc+0x2a>
 801da26:	4b30      	ldr	r3, [pc, #192]	; (801dae8 <tcp_pbuf_prealloc+0xe0>)
 801da28:	22e8      	movs	r2, #232	; 0xe8
 801da2a:	4930      	ldr	r1, [pc, #192]	; (801daec <tcp_pbuf_prealloc+0xe4>)
 801da2c:	4830      	ldr	r0, [pc, #192]	; (801daf0 <tcp_pbuf_prealloc+0xe8>)
 801da2e:	f006 fc2f 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 801da32:	6a3b      	ldr	r3, [r7, #32]
 801da34:	2b00      	cmp	r3, #0
 801da36:	d105      	bne.n	801da44 <tcp_pbuf_prealloc+0x3c>
 801da38:	4b2b      	ldr	r3, [pc, #172]	; (801dae8 <tcp_pbuf_prealloc+0xe0>)
 801da3a:	22e9      	movs	r2, #233	; 0xe9
 801da3c:	492d      	ldr	r1, [pc, #180]	; (801daf4 <tcp_pbuf_prealloc+0xec>)
 801da3e:	482c      	ldr	r0, [pc, #176]	; (801daf0 <tcp_pbuf_prealloc+0xe8>)
 801da40:	f006 fc26 	bl	8024290 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 801da44:	89ba      	ldrh	r2, [r7, #12]
 801da46:	897b      	ldrh	r3, [r7, #10]
 801da48:	429a      	cmp	r2, r3
 801da4a:	d221      	bcs.n	801da90 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801da4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801da50:	f003 0302 	and.w	r3, r3, #2
 801da54:	2b00      	cmp	r3, #0
 801da56:	d111      	bne.n	801da7c <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 801da58:	6a3b      	ldr	r3, [r7, #32]
 801da5a:	8b5b      	ldrh	r3, [r3, #26]
 801da5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 801da60:	2b00      	cmp	r3, #0
 801da62:	d115      	bne.n	801da90 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 801da64:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801da68:	2b00      	cmp	r3, #0
 801da6a:	d007      	beq.n	801da7c <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 801da6c:	6a3b      	ldr	r3, [r7, #32]
 801da6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 801da70:	2b00      	cmp	r3, #0
 801da72:	d103      	bne.n	801da7c <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 801da74:	6a3b      	ldr	r3, [r7, #32]
 801da76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 801da78:	2b00      	cmp	r3, #0
 801da7a:	d009      	beq.n	801da90 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 801da7c:	89bb      	ldrh	r3, [r7, #12]
 801da7e:	f203 231b 	addw	r3, r3, #539	; 0x21b
 801da82:	f023 0203 	bic.w	r2, r3, #3
 801da86:	897b      	ldrh	r3, [r7, #10]
 801da88:	4293      	cmp	r3, r2
 801da8a:	bf28      	it	cs
 801da8c:	4613      	movcs	r3, r2
 801da8e:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 801da90:	8af9      	ldrh	r1, [r7, #22]
 801da92:	7bfb      	ldrb	r3, [r7, #15]
 801da94:	f44f 7220 	mov.w	r2, #640	; 0x280
 801da98:	4618      	mov	r0, r3
 801da9a:	f7fa fedd 	bl	8018858 <pbuf_alloc>
 801da9e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801daa0:	693b      	ldr	r3, [r7, #16]
 801daa2:	2b00      	cmp	r3, #0
 801daa4:	d101      	bne.n	801daaa <tcp_pbuf_prealloc+0xa2>
    return NULL;
 801daa6:	2300      	movs	r3, #0
 801daa8:	e019      	b.n	801dade <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 801daaa:	693b      	ldr	r3, [r7, #16]
 801daac:	681b      	ldr	r3, [r3, #0]
 801daae:	2b00      	cmp	r3, #0
 801dab0:	d006      	beq.n	801dac0 <tcp_pbuf_prealloc+0xb8>
 801dab2:	4b0d      	ldr	r3, [pc, #52]	; (801dae8 <tcp_pbuf_prealloc+0xe0>)
 801dab4:	f240 120b 	movw	r2, #267	; 0x10b
 801dab8:	490f      	ldr	r1, [pc, #60]	; (801daf8 <tcp_pbuf_prealloc+0xf0>)
 801daba:	480d      	ldr	r0, [pc, #52]	; (801daf0 <tcp_pbuf_prealloc+0xe8>)
 801dabc:	f006 fbe8 	bl	8024290 <iprintf>
  *oversize = p->len - length;
 801dac0:	693b      	ldr	r3, [r7, #16]
 801dac2:	895a      	ldrh	r2, [r3, #10]
 801dac4:	89bb      	ldrh	r3, [r7, #12]
 801dac6:	1ad3      	subs	r3, r2, r3
 801dac8:	b29a      	uxth	r2, r3
 801daca:	687b      	ldr	r3, [r7, #4]
 801dacc:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 801dace:	693b      	ldr	r3, [r7, #16]
 801dad0:	89ba      	ldrh	r2, [r7, #12]
 801dad2:	811a      	strh	r2, [r3, #8]
 801dad4:	693b      	ldr	r3, [r7, #16]
 801dad6:	891a      	ldrh	r2, [r3, #8]
 801dad8:	693b      	ldr	r3, [r7, #16]
 801dada:	815a      	strh	r2, [r3, #10]
  return p;
 801dadc:	693b      	ldr	r3, [r7, #16]
}
 801dade:	4618      	mov	r0, r3
 801dae0:	3718      	adds	r7, #24
 801dae2:	46bd      	mov	sp, r7
 801dae4:	bd80      	pop	{r7, pc}
 801dae6:	bf00      	nop
 801dae8:	080279d4 	.word	0x080279d4
 801daec:	08027a8c 	.word	0x08027a8c
 801daf0:	08027a28 	.word	0x08027a28
 801daf4:	08027ab0 	.word	0x08027ab0
 801daf8:	08027ad0 	.word	0x08027ad0

0801dafc <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 801dafc:	b580      	push	{r7, lr}
 801dafe:	b082      	sub	sp, #8
 801db00:	af00      	add	r7, sp, #0
 801db02:	6078      	str	r0, [r7, #4]
 801db04:	460b      	mov	r3, r1
 801db06:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 801db08:	687b      	ldr	r3, [r7, #4]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	d106      	bne.n	801db1c <tcp_write_checks+0x20>
 801db0e:	4b33      	ldr	r3, [pc, #204]	; (801dbdc <tcp_write_checks+0xe0>)
 801db10:	f240 1233 	movw	r2, #307	; 0x133
 801db14:	4932      	ldr	r1, [pc, #200]	; (801dbe0 <tcp_write_checks+0xe4>)
 801db16:	4833      	ldr	r0, [pc, #204]	; (801dbe4 <tcp_write_checks+0xe8>)
 801db18:	f006 fbba 	bl	8024290 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 801db1c:	687b      	ldr	r3, [r7, #4]
 801db1e:	7d1b      	ldrb	r3, [r3, #20]
 801db20:	2b04      	cmp	r3, #4
 801db22:	d00e      	beq.n	801db42 <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 801db24:	687b      	ldr	r3, [r7, #4]
 801db26:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 801db28:	2b07      	cmp	r3, #7
 801db2a:	d00a      	beq.n	801db42 <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 801db2c:	687b      	ldr	r3, [r7, #4]
 801db2e:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 801db30:	2b02      	cmp	r3, #2
 801db32:	d006      	beq.n	801db42 <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 801db34:	687b      	ldr	r3, [r7, #4]
 801db36:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 801db38:	2b03      	cmp	r3, #3
 801db3a:	d002      	beq.n	801db42 <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 801db3c:	f06f 030a 	mvn.w	r3, #10
 801db40:	e048      	b.n	801dbd4 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 801db42:	887b      	ldrh	r3, [r7, #2]
 801db44:	2b00      	cmp	r3, #0
 801db46:	d101      	bne.n	801db4c <tcp_write_checks+0x50>
    return ERR_OK;
 801db48:	2300      	movs	r3, #0
 801db4a:	e043      	b.n	801dbd4 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 801db4c:	687b      	ldr	r3, [r7, #4]
 801db4e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801db52:	887a      	ldrh	r2, [r7, #2]
 801db54:	429a      	cmp	r2, r3
 801db56:	d909      	bls.n	801db6c <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801db58:	687b      	ldr	r3, [r7, #4]
 801db5a:	8b5b      	ldrh	r3, [r3, #26]
 801db5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db60:	b29a      	uxth	r2, r3
 801db62:	687b      	ldr	r3, [r7, #4]
 801db64:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801db66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801db6a:	e033      	b.n	801dbd4 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 801db6c:	687b      	ldr	r3, [r7, #4]
 801db6e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801db72:	2b08      	cmp	r3, #8
 801db74:	d909      	bls.n	801db8a <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801db76:	687b      	ldr	r3, [r7, #4]
 801db78:	8b5b      	ldrh	r3, [r3, #26]
 801db7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801db7e:	b29a      	uxth	r2, r3
 801db80:	687b      	ldr	r3, [r7, #4]
 801db82:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801db84:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801db88:	e024      	b.n	801dbd4 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 801db8a:	687b      	ldr	r3, [r7, #4]
 801db8c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801db90:	2b00      	cmp	r3, #0
 801db92:	d00f      	beq.n	801dbb4 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801db94:	687b      	ldr	r3, [r7, #4]
 801db96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db98:	2b00      	cmp	r3, #0
 801db9a:	d11a      	bne.n	801dbd2 <tcp_write_checks+0xd6>
 801db9c:	687b      	ldr	r3, [r7, #4]
 801db9e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d116      	bne.n	801dbd2 <tcp_write_checks+0xd6>
 801dba4:	4b0d      	ldr	r3, [pc, #52]	; (801dbdc <tcp_write_checks+0xe0>)
 801dba6:	f240 1255 	movw	r2, #341	; 0x155
 801dbaa:	490f      	ldr	r1, [pc, #60]	; (801dbe8 <tcp_write_checks+0xec>)
 801dbac:	480d      	ldr	r0, [pc, #52]	; (801dbe4 <tcp_write_checks+0xe8>)
 801dbae:	f006 fb6f 	bl	8024290 <iprintf>
 801dbb2:	e00e      	b.n	801dbd2 <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801dbb4:	687b      	ldr	r3, [r7, #4]
 801dbb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801dbb8:	2b00      	cmp	r3, #0
 801dbba:	d103      	bne.n	801dbc4 <tcp_write_checks+0xc8>
 801dbbc:	687b      	ldr	r3, [r7, #4]
 801dbbe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dbc0:	2b00      	cmp	r3, #0
 801dbc2:	d006      	beq.n	801dbd2 <tcp_write_checks+0xd6>
 801dbc4:	4b05      	ldr	r3, [pc, #20]	; (801dbdc <tcp_write_checks+0xe0>)
 801dbc6:	f44f 72ac 	mov.w	r2, #344	; 0x158
 801dbca:	4908      	ldr	r1, [pc, #32]	; (801dbec <tcp_write_checks+0xf0>)
 801dbcc:	4805      	ldr	r0, [pc, #20]	; (801dbe4 <tcp_write_checks+0xe8>)
 801dbce:	f006 fb5f 	bl	8024290 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801dbd2:	2300      	movs	r3, #0
}
 801dbd4:	4618      	mov	r0, r3
 801dbd6:	3708      	adds	r7, #8
 801dbd8:	46bd      	mov	sp, r7
 801dbda:	bd80      	pop	{r7, pc}
 801dbdc:	080279d4 	.word	0x080279d4
 801dbe0:	08027ae4 	.word	0x08027ae4
 801dbe4:	08027a28 	.word	0x08027a28
 801dbe8:	08027b04 	.word	0x08027b04
 801dbec:	08027b40 	.word	0x08027b40

0801dbf0 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 801dbf0:	b590      	push	{r4, r7, lr}
 801dbf2:	b09b      	sub	sp, #108	; 0x6c
 801dbf4:	af04      	add	r7, sp, #16
 801dbf6:	60f8      	str	r0, [r7, #12]
 801dbf8:	60b9      	str	r1, [r7, #8]
 801dbfa:	4611      	mov	r1, r2
 801dbfc:	461a      	mov	r2, r3
 801dbfe:	460b      	mov	r3, r1
 801dc00:	80fb      	strh	r3, [r7, #6]
 801dc02:	4613      	mov	r3, r2
 801dc04:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801dc06:	2300      	movs	r3, #0
 801dc08:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 801dc0a:	2300      	movs	r3, #0
 801dc0c:	653b      	str	r3, [r7, #80]	; 0x50
 801dc0e:	2300      	movs	r3, #0
 801dc10:	64fb      	str	r3, [r7, #76]	; 0x4c
 801dc12:	2300      	movs	r3, #0
 801dc14:	64bb      	str	r3, [r7, #72]	; 0x48
 801dc16:	2300      	movs	r3, #0
 801dc18:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 801dc20:	2300      	movs	r3, #0
 801dc22:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 801dc26:	2300      	movs	r3, #0
 801dc28:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 801dc2a:	2300      	movs	r3, #0
 801dc2c:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 801dc2e:	2300      	movs	r3, #0
 801dc30:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 801dc32:	68fb      	ldr	r3, [r7, #12]
 801dc34:	2b00      	cmp	r3, #0
 801dc36:	d109      	bne.n	801dc4c <tcp_write+0x5c>
 801dc38:	4ba4      	ldr	r3, [pc, #656]	; (801decc <tcp_write+0x2dc>)
 801dc3a:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 801dc3e:	49a4      	ldr	r1, [pc, #656]	; (801ded0 <tcp_write+0x2e0>)
 801dc40:	48a4      	ldr	r0, [pc, #656]	; (801ded4 <tcp_write+0x2e4>)
 801dc42:	f006 fb25 	bl	8024290 <iprintf>
 801dc46:	f06f 030f 	mvn.w	r3, #15
 801dc4a:	e32a      	b.n	801e2a2 <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 801dc4c:	68fb      	ldr	r3, [r7, #12]
 801dc4e:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 801dc52:	085b      	lsrs	r3, r3, #1
 801dc54:	b29a      	uxth	r2, r3
 801dc56:	68fb      	ldr	r3, [r7, #12]
 801dc58:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc5a:	4293      	cmp	r3, r2
 801dc5c:	bf28      	it	cs
 801dc5e:	4613      	movcs	r3, r2
 801dc60:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 801dc62:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dc64:	2b00      	cmp	r3, #0
 801dc66:	d102      	bne.n	801dc6e <tcp_write+0x7e>
 801dc68:	68fb      	ldr	r3, [r7, #12]
 801dc6a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801dc6c:	e000      	b.n	801dc70 <tcp_write+0x80>
 801dc6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801dc70:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801dc72:	68bb      	ldr	r3, [r7, #8]
 801dc74:	2b00      	cmp	r3, #0
 801dc76:	d109      	bne.n	801dc8c <tcp_write+0x9c>
 801dc78:	4b94      	ldr	r3, [pc, #592]	; (801decc <tcp_write+0x2dc>)
 801dc7a:	f240 12ad 	movw	r2, #429	; 0x1ad
 801dc7e:	4996      	ldr	r1, [pc, #600]	; (801ded8 <tcp_write+0x2e8>)
 801dc80:	4894      	ldr	r0, [pc, #592]	; (801ded4 <tcp_write+0x2e4>)
 801dc82:	f006 fb05 	bl	8024290 <iprintf>
 801dc86:	f06f 030f 	mvn.w	r3, #15
 801dc8a:	e30a      	b.n	801e2a2 <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 801dc8c:	88fb      	ldrh	r3, [r7, #6]
 801dc8e:	4619      	mov	r1, r3
 801dc90:	68f8      	ldr	r0, [r7, #12]
 801dc92:	f7ff ff33 	bl	801dafc <tcp_write_checks>
 801dc96:	4603      	mov	r3, r0
 801dc98:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 801dc9c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801dca0:	2b00      	cmp	r3, #0
 801dca2:	d002      	beq.n	801dcaa <tcp_write+0xba>
    return err;
 801dca4:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 801dca8:	e2fb      	b.n	801e2a2 <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 801dcaa:	68fb      	ldr	r3, [r7, #12]
 801dcac:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801dcb0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801dcb4:	2300      	movs	r3, #0
 801dcb6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 801dcba:	68fb      	ldr	r3, [r7, #12]
 801dcbc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcbe:	2b00      	cmp	r3, #0
 801dcc0:	f000 80f6 	beq.w	801deb0 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801dcc4:	68fb      	ldr	r3, [r7, #12]
 801dcc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801dcc8:	653b      	str	r3, [r7, #80]	; 0x50
 801dcca:	e002      	b.n	801dcd2 <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 801dccc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dcce:	681b      	ldr	r3, [r3, #0]
 801dcd0:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801dcd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dcd4:	681b      	ldr	r3, [r3, #0]
 801dcd6:	2b00      	cmp	r3, #0
 801dcd8:	d1f8      	bne.n	801dccc <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 801dcda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dcdc:	7a9b      	ldrb	r3, [r3, #10]
 801dcde:	009b      	lsls	r3, r3, #2
 801dce0:	b29b      	uxth	r3, r3
 801dce2:	f003 0304 	and.w	r3, r3, #4
 801dce6:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 801dce8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dcea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dcec:	891b      	ldrh	r3, [r3, #8]
 801dcee:	4619      	mov	r1, r3
 801dcf0:	8c3b      	ldrh	r3, [r7, #32]
 801dcf2:	440b      	add	r3, r1
 801dcf4:	429a      	cmp	r2, r3
 801dcf6:	da06      	bge.n	801dd06 <tcp_write+0x116>
 801dcf8:	4b74      	ldr	r3, [pc, #464]	; (801decc <tcp_write+0x2dc>)
 801dcfa:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801dcfe:	4977      	ldr	r1, [pc, #476]	; (801dedc <tcp_write+0x2ec>)
 801dd00:	4874      	ldr	r0, [pc, #464]	; (801ded4 <tcp_write+0x2e4>)
 801dd02:	f006 fac5 	bl	8024290 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801dd06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd08:	891a      	ldrh	r2, [r3, #8]
 801dd0a:	8c3b      	ldrh	r3, [r7, #32]
 801dd0c:	4413      	add	r3, r2
 801dd0e:	b29b      	uxth	r3, r3
 801dd10:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801dd12:	1ad3      	subs	r3, r2, r3
 801dd14:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 801dd16:	68fb      	ldr	r3, [r7, #12]
 801dd18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801dd1c:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 801dd1e:	8a7b      	ldrh	r3, [r7, #18]
 801dd20:	2b00      	cmp	r3, #0
 801dd22:	d026      	beq.n	801dd72 <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 801dd24:	8a7b      	ldrh	r3, [r7, #18]
 801dd26:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dd28:	429a      	cmp	r2, r3
 801dd2a:	d206      	bcs.n	801dd3a <tcp_write+0x14a>
 801dd2c:	4b67      	ldr	r3, [pc, #412]	; (801decc <tcp_write+0x2dc>)
 801dd2e:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 801dd32:	496b      	ldr	r1, [pc, #428]	; (801dee0 <tcp_write+0x2f0>)
 801dd34:	4867      	ldr	r0, [pc, #412]	; (801ded4 <tcp_write+0x2e4>)
 801dd36:	f006 faab 	bl	8024290 <iprintf>
      seg = last_unsent;
 801dd3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dd3c:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 801dd3e:	8a7b      	ldrh	r3, [r7, #18]
 801dd40:	88fa      	ldrh	r2, [r7, #6]
 801dd42:	4293      	cmp	r3, r2
 801dd44:	bf28      	it	cs
 801dd46:	4613      	movcs	r3, r2
 801dd48:	b29b      	uxth	r3, r3
 801dd4a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dd4c:	4293      	cmp	r3, r2
 801dd4e:	bf28      	it	cs
 801dd50:	4613      	movcs	r3, r2
 801dd52:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 801dd54:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dd58:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd5a:	4413      	add	r3, r2
 801dd5c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 801dd60:	8a7a      	ldrh	r2, [r7, #18]
 801dd62:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd64:	1ad3      	subs	r3, r2, r3
 801dd66:	b29b      	uxth	r3, r3
 801dd68:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 801dd6a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801dd6c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801dd6e:	1ad3      	subs	r3, r2, r3
 801dd70:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801dd72:	8a7b      	ldrh	r3, [r7, #18]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d00b      	beq.n	801dd90 <tcp_write+0x1a0>
 801dd78:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dd7c:	88fb      	ldrh	r3, [r7, #6]
 801dd7e:	429a      	cmp	r2, r3
 801dd80:	d006      	beq.n	801dd90 <tcp_write+0x1a0>
 801dd82:	4b52      	ldr	r3, [pc, #328]	; (801decc <tcp_write+0x2dc>)
 801dd84:	f44f 7200 	mov.w	r2, #512	; 0x200
 801dd88:	4956      	ldr	r1, [pc, #344]	; (801dee4 <tcp_write+0x2f4>)
 801dd8a:	4852      	ldr	r0, [pc, #328]	; (801ded4 <tcp_write+0x2e4>)
 801dd8c:	f006 fa80 	bl	8024290 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801dd90:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dd94:	88fb      	ldrh	r3, [r7, #6]
 801dd96:	429a      	cmp	r2, r3
 801dd98:	f080 8167 	bcs.w	801e06a <tcp_write+0x47a>
 801dd9c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801dd9e:	2b00      	cmp	r3, #0
 801dda0:	f000 8163 	beq.w	801e06a <tcp_write+0x47a>
 801dda4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801dda6:	891b      	ldrh	r3, [r3, #8]
 801dda8:	2b00      	cmp	r3, #0
 801ddaa:	f000 815e 	beq.w	801e06a <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801ddae:	88fa      	ldrh	r2, [r7, #6]
 801ddb0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ddb4:	1ad2      	subs	r2, r2, r3
 801ddb6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801ddb8:	4293      	cmp	r3, r2
 801ddba:	bfa8      	it	ge
 801ddbc:	4613      	movge	r3, r2
 801ddbe:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801ddc0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ddc2:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801ddc4:	797b      	ldrb	r3, [r7, #5]
 801ddc6:	f003 0301 	and.w	r3, r3, #1
 801ddca:	2b00      	cmp	r3, #0
 801ddcc:	d027      	beq.n	801de1e <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801ddce:	f107 0012 	add.w	r0, r7, #18
 801ddd2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801ddd4:	8bf9      	ldrh	r1, [r7, #30]
 801ddd6:	2301      	movs	r3, #1
 801ddd8:	9302      	str	r3, [sp, #8]
 801ddda:	797b      	ldrb	r3, [r7, #5]
 801dddc:	9301      	str	r3, [sp, #4]
 801ddde:	68fb      	ldr	r3, [r7, #12]
 801dde0:	9300      	str	r3, [sp, #0]
 801dde2:	4603      	mov	r3, r0
 801dde4:	2000      	movs	r0, #0
 801dde6:	f7ff fe0f 	bl	801da08 <tcp_pbuf_prealloc>
 801ddea:	6578      	str	r0, [r7, #84]	; 0x54
 801ddec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ddee:	2b00      	cmp	r3, #0
 801ddf0:	f000 8225 	beq.w	801e23e <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801ddf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ddf6:	6858      	ldr	r0, [r3, #4]
 801ddf8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801ddfc:	68ba      	ldr	r2, [r7, #8]
 801ddfe:	4413      	add	r3, r2
 801de00:	8bfa      	ldrh	r2, [r7, #30]
 801de02:	4619      	mov	r1, r3
 801de04:	f006 f934 	bl	8024070 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 801de08:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801de0a:	f7fb f897 	bl	8018f3c <pbuf_clen>
 801de0e:	4603      	mov	r3, r0
 801de10:	461a      	mov	r2, r3
 801de12:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801de16:	4413      	add	r3, r2
 801de18:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 801de1c:	e041      	b.n	801dea2 <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 801de1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801de20:	685b      	ldr	r3, [r3, #4]
 801de22:	637b      	str	r3, [r7, #52]	; 0x34
 801de24:	e002      	b.n	801de2c <tcp_write+0x23c>
 801de26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de28:	681b      	ldr	r3, [r3, #0]
 801de2a:	637b      	str	r3, [r7, #52]	; 0x34
 801de2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de2e:	681b      	ldr	r3, [r3, #0]
 801de30:	2b00      	cmp	r3, #0
 801de32:	d1f8      	bne.n	801de26 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801de34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de36:	7b1b      	ldrb	r3, [r3, #12]
 801de38:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 801de3c:	2b00      	cmp	r3, #0
 801de3e:	d115      	bne.n	801de6c <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 801de40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de42:	685b      	ldr	r3, [r3, #4]
 801de44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801de46:	8952      	ldrh	r2, [r2, #10]
 801de48:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 801de4a:	68ba      	ldr	r2, [r7, #8]
 801de4c:	429a      	cmp	r2, r3
 801de4e:	d10d      	bne.n	801de6c <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 801de50:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801de54:	2b00      	cmp	r3, #0
 801de56:	d006      	beq.n	801de66 <tcp_write+0x276>
 801de58:	4b1c      	ldr	r3, [pc, #112]	; (801decc <tcp_write+0x2dc>)
 801de5a:	f240 2231 	movw	r2, #561	; 0x231
 801de5e:	4922      	ldr	r1, [pc, #136]	; (801dee8 <tcp_write+0x2f8>)
 801de60:	481c      	ldr	r0, [pc, #112]	; (801ded4 <tcp_write+0x2e4>)
 801de62:	f006 fa15 	bl	8024290 <iprintf>
          extendlen = seglen;
 801de66:	8bfb      	ldrh	r3, [r7, #30]
 801de68:	87bb      	strh	r3, [r7, #60]	; 0x3c
 801de6a:	e01a      	b.n	801dea2 <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 801de6c:	8bfb      	ldrh	r3, [r7, #30]
 801de6e:	2201      	movs	r2, #1
 801de70:	4619      	mov	r1, r3
 801de72:	2000      	movs	r0, #0
 801de74:	f7fa fcf0 	bl	8018858 <pbuf_alloc>
 801de78:	6578      	str	r0, [r7, #84]	; 0x54
 801de7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801de7c:	2b00      	cmp	r3, #0
 801de7e:	f000 81e0 	beq.w	801e242 <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801de82:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801de86:	68ba      	ldr	r2, [r7, #8]
 801de88:	441a      	add	r2, r3
 801de8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801de8c:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801de8e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801de90:	f7fb f854 	bl	8018f3c <pbuf_clen>
 801de94:	4603      	mov	r3, r0
 801de96:	461a      	mov	r2, r3
 801de98:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801de9c:	4413      	add	r3, r2
 801de9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801dea2:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801dea6:	8bfb      	ldrh	r3, [r7, #30]
 801dea8:	4413      	add	r3, r2
 801deaa:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801deae:	e0dc      	b.n	801e06a <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801deb0:	68fb      	ldr	r3, [r7, #12]
 801deb2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801deb6:	2b00      	cmp	r3, #0
 801deb8:	f000 80d7 	beq.w	801e06a <tcp_write+0x47a>
 801debc:	4b03      	ldr	r3, [pc, #12]	; (801decc <tcp_write+0x2dc>)
 801debe:	f240 224a 	movw	r2, #586	; 0x24a
 801dec2:	490a      	ldr	r1, [pc, #40]	; (801deec <tcp_write+0x2fc>)
 801dec4:	4803      	ldr	r0, [pc, #12]	; (801ded4 <tcp_write+0x2e4>)
 801dec6:	f006 f9e3 	bl	8024290 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 801deca:	e0ce      	b.n	801e06a <tcp_write+0x47a>
 801decc:	080279d4 	.word	0x080279d4
 801ded0:	08027b74 	.word	0x08027b74
 801ded4:	08027a28 	.word	0x08027a28
 801ded8:	08027b8c 	.word	0x08027b8c
 801dedc:	08027bc0 	.word	0x08027bc0
 801dee0:	08027bd8 	.word	0x08027bd8
 801dee4:	08027bf8 	.word	0x08027bf8
 801dee8:	08027c18 	.word	0x08027c18
 801deec:	08027c44 	.word	0x08027c44
    struct pbuf *p;
    u16_t left = len - pos;
 801def0:	88fa      	ldrh	r2, [r7, #6]
 801def2:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801def6:	1ad3      	subs	r3, r2, r3
 801def8:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 801defa:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801defe:	b29b      	uxth	r3, r3
 801df00:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801df02:	1ad3      	subs	r3, r2, r3
 801df04:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801df06:	8b7a      	ldrh	r2, [r7, #26]
 801df08:	8bbb      	ldrh	r3, [r7, #28]
 801df0a:	4293      	cmp	r3, r2
 801df0c:	bf28      	it	cs
 801df0e:	4613      	movcs	r3, r2
 801df10:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 801df12:	797b      	ldrb	r3, [r7, #5]
 801df14:	f003 0301 	and.w	r3, r3, #1
 801df18:	2b00      	cmp	r3, #0
 801df1a:	d036      	beq.n	801df8a <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 801df1c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801df20:	b29a      	uxth	r2, r3
 801df22:	8b3b      	ldrh	r3, [r7, #24]
 801df24:	4413      	add	r3, r2
 801df26:	b299      	uxth	r1, r3
 801df28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801df2a:	2b00      	cmp	r3, #0
 801df2c:	bf0c      	ite	eq
 801df2e:	2301      	moveq	r3, #1
 801df30:	2300      	movne	r3, #0
 801df32:	b2db      	uxtb	r3, r3
 801df34:	f107 0012 	add.w	r0, r7, #18
 801df38:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801df3a:	9302      	str	r3, [sp, #8]
 801df3c:	797b      	ldrb	r3, [r7, #5]
 801df3e:	9301      	str	r3, [sp, #4]
 801df40:	68fb      	ldr	r3, [r7, #12]
 801df42:	9300      	str	r3, [sp, #0]
 801df44:	4603      	mov	r3, r0
 801df46:	2036      	movs	r0, #54	; 0x36
 801df48:	f7ff fd5e 	bl	801da08 <tcp_pbuf_prealloc>
 801df4c:	6338      	str	r0, [r7, #48]	; 0x30
 801df4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df50:	2b00      	cmp	r3, #0
 801df52:	f000 8178 	beq.w	801e246 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 801df56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df58:	895b      	ldrh	r3, [r3, #10]
 801df5a:	8b3a      	ldrh	r2, [r7, #24]
 801df5c:	429a      	cmp	r2, r3
 801df5e:	d906      	bls.n	801df6e <tcp_write+0x37e>
 801df60:	4b8c      	ldr	r3, [pc, #560]	; (801e194 <tcp_write+0x5a4>)
 801df62:	f240 2266 	movw	r2, #614	; 0x266
 801df66:	498c      	ldr	r1, [pc, #560]	; (801e198 <tcp_write+0x5a8>)
 801df68:	488c      	ldr	r0, [pc, #560]	; (801e19c <tcp_write+0x5ac>)
 801df6a:	f006 f991 	bl	8024290 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801df6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df70:	685a      	ldr	r2, [r3, #4]
 801df72:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801df76:	18d0      	adds	r0, r2, r3
 801df78:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801df7c:	68ba      	ldr	r2, [r7, #8]
 801df7e:	4413      	add	r3, r2
 801df80:	8b3a      	ldrh	r2, [r7, #24]
 801df82:	4619      	mov	r1, r3
 801df84:	f006 f874 	bl	8024070 <memcpy>
 801df88:	e02f      	b.n	801dfea <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 801df8a:	8a7b      	ldrh	r3, [r7, #18]
 801df8c:	2b00      	cmp	r3, #0
 801df8e:	d006      	beq.n	801df9e <tcp_write+0x3ae>
 801df90:	4b80      	ldr	r3, [pc, #512]	; (801e194 <tcp_write+0x5a4>)
 801df92:	f240 2271 	movw	r2, #625	; 0x271
 801df96:	4982      	ldr	r1, [pc, #520]	; (801e1a0 <tcp_write+0x5b0>)
 801df98:	4880      	ldr	r0, [pc, #512]	; (801e19c <tcp_write+0x5ac>)
 801df9a:	f006 f979 	bl	8024290 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801df9e:	8b3b      	ldrh	r3, [r7, #24]
 801dfa0:	2201      	movs	r2, #1
 801dfa2:	4619      	mov	r1, r3
 801dfa4:	2036      	movs	r0, #54	; 0x36
 801dfa6:	f7fa fc57 	bl	8018858 <pbuf_alloc>
 801dfaa:	6178      	str	r0, [r7, #20]
 801dfac:	697b      	ldr	r3, [r7, #20]
 801dfae:	2b00      	cmp	r3, #0
 801dfb0:	f000 814b 	beq.w	801e24a <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801dfb4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801dfb8:	68ba      	ldr	r2, [r7, #8]
 801dfba:	441a      	add	r2, r3
 801dfbc:	697b      	ldr	r3, [r7, #20]
 801dfbe:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801dfc0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801dfc4:	b29b      	uxth	r3, r3
 801dfc6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801dfca:	4619      	mov	r1, r3
 801dfcc:	2036      	movs	r0, #54	; 0x36
 801dfce:	f7fa fc43 	bl	8018858 <pbuf_alloc>
 801dfd2:	6338      	str	r0, [r7, #48]	; 0x30
 801dfd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d103      	bne.n	801dfe2 <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 801dfda:	6978      	ldr	r0, [r7, #20]
 801dfdc:	f7fa ff20 	bl	8018e20 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801dfe0:	e136      	b.n	801e250 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801dfe2:	6979      	ldr	r1, [r7, #20]
 801dfe4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dfe6:	f7fa ffe9 	bl	8018fbc <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 801dfea:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801dfec:	f7fa ffa6 	bl	8018f3c <pbuf_clen>
 801dff0:	4603      	mov	r3, r0
 801dff2:	461a      	mov	r2, r3
 801dff4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801dff8:	4413      	add	r3, r2
 801dffa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801dffe:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801e002:	2b09      	cmp	r3, #9
 801e004:	d903      	bls.n	801e00e <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801e006:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801e008:	f7fa ff0a 	bl	8018e20 <pbuf_free>
      goto memerr;
 801e00c:	e120      	b.n	801e250 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 801e00e:	68fb      	ldr	r3, [r7, #12]
 801e010:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e012:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801e016:	441a      	add	r2, r3
 801e018:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801e01c:	9300      	str	r3, [sp, #0]
 801e01e:	4613      	mov	r3, r2
 801e020:	2200      	movs	r2, #0
 801e022:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801e024:	68f8      	ldr	r0, [r7, #12]
 801e026:	f7ff fc51 	bl	801d8cc <tcp_create_segment>
 801e02a:	64f8      	str	r0, [r7, #76]	; 0x4c
 801e02c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e02e:	2b00      	cmp	r3, #0
 801e030:	f000 810d 	beq.w	801e24e <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 801e034:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e036:	2b00      	cmp	r3, #0
 801e038:	d102      	bne.n	801e040 <tcp_write+0x450>
      queue = seg;
 801e03a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e03c:	647b      	str	r3, [r7, #68]	; 0x44
 801e03e:	e00c      	b.n	801e05a <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 801e040:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e042:	2b00      	cmp	r3, #0
 801e044:	d106      	bne.n	801e054 <tcp_write+0x464>
 801e046:	4b53      	ldr	r3, [pc, #332]	; (801e194 <tcp_write+0x5a4>)
 801e048:	f240 22ab 	movw	r2, #683	; 0x2ab
 801e04c:	4955      	ldr	r1, [pc, #340]	; (801e1a4 <tcp_write+0x5b4>)
 801e04e:	4853      	ldr	r0, [pc, #332]	; (801e19c <tcp_write+0x5ac>)
 801e050:	f006 f91e 	bl	8024290 <iprintf>
      prev_seg->next = seg;
 801e054:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e056:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e058:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 801e05a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e05c:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 801e05e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e062:	8b3b      	ldrh	r3, [r7, #24]
 801e064:	4413      	add	r3, r2
 801e066:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 801e06a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801e06e:	88fb      	ldrh	r3, [r7, #6]
 801e070:	429a      	cmp	r2, r3
 801e072:	f4ff af3d 	bcc.w	801def0 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801e076:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e078:	2b00      	cmp	r3, #0
 801e07a:	d02c      	beq.n	801e0d6 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 801e07c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e07e:	685b      	ldr	r3, [r3, #4]
 801e080:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e082:	e01e      	b.n	801e0c2 <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801e084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e086:	891a      	ldrh	r2, [r3, #8]
 801e088:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e08a:	4413      	add	r3, r2
 801e08c:	b29a      	uxth	r2, r3
 801e08e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e090:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801e092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e094:	681b      	ldr	r3, [r3, #0]
 801e096:	2b00      	cmp	r3, #0
 801e098:	d110      	bne.n	801e0bc <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 801e09a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e09c:	685b      	ldr	r3, [r3, #4]
 801e09e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801e0a0:	8952      	ldrh	r2, [r2, #10]
 801e0a2:	4413      	add	r3, r2
 801e0a4:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801e0a6:	68b9      	ldr	r1, [r7, #8]
 801e0a8:	4618      	mov	r0, r3
 801e0aa:	f005 ffe1 	bl	8024070 <memcpy>
        p->len += oversize_used;
 801e0ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0b0:	895a      	ldrh	r2, [r3, #10]
 801e0b2:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e0b4:	4413      	add	r3, r2
 801e0b6:	b29a      	uxth	r2, r3
 801e0b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0ba:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 801e0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0be:	681b      	ldr	r3, [r3, #0]
 801e0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e0c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e0c4:	2b00      	cmp	r3, #0
 801e0c6:	d1dd      	bne.n	801e084 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 801e0c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e0ca:	891a      	ldrh	r2, [r3, #8]
 801e0cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801e0ce:	4413      	add	r3, r2
 801e0d0:	b29a      	uxth	r2, r3
 801e0d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e0d4:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801e0d6:	8a7a      	ldrh	r2, [r7, #18]
 801e0d8:	68fb      	ldr	r3, [r7, #12]
 801e0da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801e0de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e0e0:	2b00      	cmp	r3, #0
 801e0e2:	d018      	beq.n	801e116 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801e0e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e0e6:	2b00      	cmp	r3, #0
 801e0e8:	d106      	bne.n	801e0f8 <tcp_write+0x508>
 801e0ea:	4b2a      	ldr	r3, [pc, #168]	; (801e194 <tcp_write+0x5a4>)
 801e0ec:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801e0f0:	492d      	ldr	r1, [pc, #180]	; (801e1a8 <tcp_write+0x5b8>)
 801e0f2:	482a      	ldr	r0, [pc, #168]	; (801e19c <tcp_write+0x5ac>)
 801e0f4:	f006 f8cc 	bl	8024290 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 801e0f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e0fa:	685b      	ldr	r3, [r3, #4]
 801e0fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801e0fe:	4618      	mov	r0, r3
 801e100:	f7fa ff5c 	bl	8018fbc <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801e104:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e106:	891a      	ldrh	r2, [r3, #8]
 801e108:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e10a:	891b      	ldrh	r3, [r3, #8]
 801e10c:	4413      	add	r3, r2
 801e10e:	b29a      	uxth	r2, r3
 801e110:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e112:	811a      	strh	r2, [r3, #8]
 801e114:	e037      	b.n	801e186 <tcp_write+0x596>
  } else if (extendlen > 0) {
 801e116:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e118:	2b00      	cmp	r3, #0
 801e11a:	d034      	beq.n	801e186 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 801e11c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e11e:	2b00      	cmp	r3, #0
 801e120:	d003      	beq.n	801e12a <tcp_write+0x53a>
 801e122:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e124:	685b      	ldr	r3, [r3, #4]
 801e126:	2b00      	cmp	r3, #0
 801e128:	d106      	bne.n	801e138 <tcp_write+0x548>
 801e12a:	4b1a      	ldr	r3, [pc, #104]	; (801e194 <tcp_write+0x5a4>)
 801e12c:	f240 22e6 	movw	r2, #742	; 0x2e6
 801e130:	491e      	ldr	r1, [pc, #120]	; (801e1ac <tcp_write+0x5bc>)
 801e132:	481a      	ldr	r0, [pc, #104]	; (801e19c <tcp_write+0x5ac>)
 801e134:	f006 f8ac 	bl	8024290 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e138:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e13a:	685b      	ldr	r3, [r3, #4]
 801e13c:	62bb      	str	r3, [r7, #40]	; 0x28
 801e13e:	e009      	b.n	801e154 <tcp_write+0x564>
      p->tot_len += extendlen;
 801e140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e142:	891a      	ldrh	r2, [r3, #8]
 801e144:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e146:	4413      	add	r3, r2
 801e148:	b29a      	uxth	r2, r3
 801e14a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e14c:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 801e14e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e150:	681b      	ldr	r3, [r3, #0]
 801e152:	62bb      	str	r3, [r7, #40]	; 0x28
 801e154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e156:	681b      	ldr	r3, [r3, #0]
 801e158:	2b00      	cmp	r3, #0
 801e15a:	d1f1      	bne.n	801e140 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 801e15c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e15e:	891a      	ldrh	r2, [r3, #8]
 801e160:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e162:	4413      	add	r3, r2
 801e164:	b29a      	uxth	r2, r3
 801e166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e168:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 801e16a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e16c:	895a      	ldrh	r2, [r3, #10]
 801e16e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e170:	4413      	add	r3, r2
 801e172:	b29a      	uxth	r2, r3
 801e174:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e176:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 801e178:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e17a:	891a      	ldrh	r2, [r3, #8]
 801e17c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801e17e:	4413      	add	r3, r2
 801e180:	b29a      	uxth	r2, r3
 801e182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e184:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801e186:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e188:	2b00      	cmp	r3, #0
 801e18a:	d111      	bne.n	801e1b0 <tcp_write+0x5c0>
    pcb->unsent = queue;
 801e18c:	68fb      	ldr	r3, [r7, #12]
 801e18e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e190:	66da      	str	r2, [r3, #108]	; 0x6c
 801e192:	e010      	b.n	801e1b6 <tcp_write+0x5c6>
 801e194:	080279d4 	.word	0x080279d4
 801e198:	08027c74 	.word	0x08027c74
 801e19c:	08027a28 	.word	0x08027a28
 801e1a0:	08027cb4 	.word	0x08027cb4
 801e1a4:	08027cc4 	.word	0x08027cc4
 801e1a8:	08027cd8 	.word	0x08027cd8
 801e1ac:	08027d10 	.word	0x08027d10
  } else {
    last_unsent->next = queue;
 801e1b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1b2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e1b4:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801e1b6:	68fb      	ldr	r3, [r7, #12]
 801e1b8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 801e1ba:	88fb      	ldrh	r3, [r7, #6]
 801e1bc:	441a      	add	r2, r3
 801e1be:	68fb      	ldr	r3, [r7, #12]
 801e1c0:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801e1c2:	68fb      	ldr	r3, [r7, #12]
 801e1c4:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 801e1c8:	88fb      	ldrh	r3, [r7, #6]
 801e1ca:	1ad3      	subs	r3, r2, r3
 801e1cc:	b29a      	uxth	r2, r3
 801e1ce:	68fb      	ldr	r3, [r7, #12]
 801e1d0:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801e1d4:	68fb      	ldr	r3, [r7, #12]
 801e1d6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801e1da:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e1de:	68fb      	ldr	r3, [r7, #12]
 801e1e0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	d00e      	beq.n	801e206 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 801e1e8:	68fb      	ldr	r3, [r7, #12]
 801e1ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e1ec:	2b00      	cmp	r3, #0
 801e1ee:	d10a      	bne.n	801e206 <tcp_write+0x616>
 801e1f0:	68fb      	ldr	r3, [r7, #12]
 801e1f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e1f4:	2b00      	cmp	r3, #0
 801e1f6:	d106      	bne.n	801e206 <tcp_write+0x616>
 801e1f8:	4b2c      	ldr	r3, [pc, #176]	; (801e2ac <tcp_write+0x6bc>)
 801e1fa:	f240 3212 	movw	r2, #786	; 0x312
 801e1fe:	492c      	ldr	r1, [pc, #176]	; (801e2b0 <tcp_write+0x6c0>)
 801e200:	482c      	ldr	r0, [pc, #176]	; (801e2b4 <tcp_write+0x6c4>)
 801e202:	f006 f845 	bl	8024290 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801e206:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e208:	2b00      	cmp	r3, #0
 801e20a:	d016      	beq.n	801e23a <tcp_write+0x64a>
 801e20c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e20e:	68db      	ldr	r3, [r3, #12]
 801e210:	2b00      	cmp	r3, #0
 801e212:	d012      	beq.n	801e23a <tcp_write+0x64a>
 801e214:	797b      	ldrb	r3, [r7, #5]
 801e216:	f003 0302 	and.w	r3, r3, #2
 801e21a:	2b00      	cmp	r3, #0
 801e21c:	d10d      	bne.n	801e23a <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 801e21e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e220:	68db      	ldr	r3, [r3, #12]
 801e222:	899b      	ldrh	r3, [r3, #12]
 801e224:	b29c      	uxth	r4, r3
 801e226:	2008      	movs	r0, #8
 801e228:	f7f9 fa08 	bl	801763c <lwip_htons>
 801e22c:	4603      	mov	r3, r0
 801e22e:	461a      	mov	r2, r3
 801e230:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e232:	68db      	ldr	r3, [r3, #12]
 801e234:	4322      	orrs	r2, r4
 801e236:	b292      	uxth	r2, r2
 801e238:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 801e23a:	2300      	movs	r3, #0
 801e23c:	e031      	b.n	801e2a2 <tcp_write+0x6b2>
          goto memerr;
 801e23e:	bf00      	nop
 801e240:	e006      	b.n	801e250 <tcp_write+0x660>
            goto memerr;
 801e242:	bf00      	nop
 801e244:	e004      	b.n	801e250 <tcp_write+0x660>
        goto memerr;
 801e246:	bf00      	nop
 801e248:	e002      	b.n	801e250 <tcp_write+0x660>
        goto memerr;
 801e24a:	bf00      	nop
 801e24c:	e000      	b.n	801e250 <tcp_write+0x660>
      goto memerr;
 801e24e:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e250:	68fb      	ldr	r3, [r7, #12]
 801e252:	8b5b      	ldrh	r3, [r3, #26]
 801e254:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e258:	b29a      	uxth	r2, r3
 801e25a:	68fb      	ldr	r3, [r7, #12]
 801e25c:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 801e25e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e260:	2b00      	cmp	r3, #0
 801e262:	d002      	beq.n	801e26a <tcp_write+0x67a>
    pbuf_free(concat_p);
 801e264:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801e266:	f7fa fddb 	bl	8018e20 <pbuf_free>
  }
  if (queue != NULL) {
 801e26a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e26c:	2b00      	cmp	r3, #0
 801e26e:	d002      	beq.n	801e276 <tcp_write+0x686>
    tcp_segs_free(queue);
 801e270:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801e272:	f7fc fb6b 	bl	801a94c <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801e276:	68fb      	ldr	r3, [r7, #12]
 801e278:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e27c:	2b00      	cmp	r3, #0
 801e27e:	d00e      	beq.n	801e29e <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801e280:	68fb      	ldr	r3, [r7, #12]
 801e282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e284:	2b00      	cmp	r3, #0
 801e286:	d10a      	bne.n	801e29e <tcp_write+0x6ae>
 801e288:	68fb      	ldr	r3, [r7, #12]
 801e28a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e28c:	2b00      	cmp	r3, #0
 801e28e:	d106      	bne.n	801e29e <tcp_write+0x6ae>
 801e290:	4b06      	ldr	r3, [pc, #24]	; (801e2ac <tcp_write+0x6bc>)
 801e292:	f240 3227 	movw	r2, #807	; 0x327
 801e296:	4906      	ldr	r1, [pc, #24]	; (801e2b0 <tcp_write+0x6c0>)
 801e298:	4806      	ldr	r0, [pc, #24]	; (801e2b4 <tcp_write+0x6c4>)
 801e29a:	f005 fff9 	bl	8024290 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801e29e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e2a2:	4618      	mov	r0, r3
 801e2a4:	375c      	adds	r7, #92	; 0x5c
 801e2a6:	46bd      	mov	sp, r7
 801e2a8:	bd90      	pop	{r4, r7, pc}
 801e2aa:	bf00      	nop
 801e2ac:	080279d4 	.word	0x080279d4
 801e2b0:	08027d48 	.word	0x08027d48
 801e2b4:	08027a28 	.word	0x08027a28

0801e2b8 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 801e2b8:	b590      	push	{r4, r7, lr}
 801e2ba:	b08b      	sub	sp, #44	; 0x2c
 801e2bc:	af02      	add	r7, sp, #8
 801e2be:	6078      	str	r0, [r7, #4]
 801e2c0:	460b      	mov	r3, r1
 801e2c2:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801e2c4:	2300      	movs	r3, #0
 801e2c6:	61fb      	str	r3, [r7, #28]
 801e2c8:	2300      	movs	r3, #0
 801e2ca:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 801e2cc:	2300      	movs	r3, #0
 801e2ce:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	2b00      	cmp	r3, #0
 801e2d4:	d106      	bne.n	801e2e4 <tcp_split_unsent_seg+0x2c>
 801e2d6:	4b95      	ldr	r3, [pc, #596]	; (801e52c <tcp_split_unsent_seg+0x274>)
 801e2d8:	f240 324b 	movw	r2, #843	; 0x34b
 801e2dc:	4994      	ldr	r1, [pc, #592]	; (801e530 <tcp_split_unsent_seg+0x278>)
 801e2de:	4895      	ldr	r0, [pc, #596]	; (801e534 <tcp_split_unsent_seg+0x27c>)
 801e2e0:	f005 ffd6 	bl	8024290 <iprintf>

  useg = pcb->unsent;
 801e2e4:	687b      	ldr	r3, [r7, #4]
 801e2e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e2e8:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801e2ea:	697b      	ldr	r3, [r7, #20]
 801e2ec:	2b00      	cmp	r3, #0
 801e2ee:	d102      	bne.n	801e2f6 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801e2f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e2f4:	e116      	b.n	801e524 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801e2f6:	887b      	ldrh	r3, [r7, #2]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	d109      	bne.n	801e310 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 801e2fc:	4b8b      	ldr	r3, [pc, #556]	; (801e52c <tcp_split_unsent_seg+0x274>)
 801e2fe:	f240 3253 	movw	r2, #851	; 0x353
 801e302:	498d      	ldr	r1, [pc, #564]	; (801e538 <tcp_split_unsent_seg+0x280>)
 801e304:	488b      	ldr	r0, [pc, #556]	; (801e534 <tcp_split_unsent_seg+0x27c>)
 801e306:	f005 ffc3 	bl	8024290 <iprintf>
    return ERR_VAL;
 801e30a:	f06f 0305 	mvn.w	r3, #5
 801e30e:	e109      	b.n	801e524 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 801e310:	697b      	ldr	r3, [r7, #20]
 801e312:	891b      	ldrh	r3, [r3, #8]
 801e314:	887a      	ldrh	r2, [r7, #2]
 801e316:	429a      	cmp	r2, r3
 801e318:	d301      	bcc.n	801e31e <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801e31a:	2300      	movs	r3, #0
 801e31c:	e102      	b.n	801e524 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e322:	887a      	ldrh	r2, [r7, #2]
 801e324:	429a      	cmp	r2, r3
 801e326:	d906      	bls.n	801e336 <tcp_split_unsent_seg+0x7e>
 801e328:	4b80      	ldr	r3, [pc, #512]	; (801e52c <tcp_split_unsent_seg+0x274>)
 801e32a:	f240 325b 	movw	r2, #859	; 0x35b
 801e32e:	4983      	ldr	r1, [pc, #524]	; (801e53c <tcp_split_unsent_seg+0x284>)
 801e330:	4880      	ldr	r0, [pc, #512]	; (801e534 <tcp_split_unsent_seg+0x27c>)
 801e332:	f005 ffad 	bl	8024290 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801e336:	697b      	ldr	r3, [r7, #20]
 801e338:	891b      	ldrh	r3, [r3, #8]
 801e33a:	2b00      	cmp	r3, #0
 801e33c:	d106      	bne.n	801e34c <tcp_split_unsent_seg+0x94>
 801e33e:	4b7b      	ldr	r3, [pc, #492]	; (801e52c <tcp_split_unsent_seg+0x274>)
 801e340:	f44f 7257 	mov.w	r2, #860	; 0x35c
 801e344:	497e      	ldr	r1, [pc, #504]	; (801e540 <tcp_split_unsent_seg+0x288>)
 801e346:	487b      	ldr	r0, [pc, #492]	; (801e534 <tcp_split_unsent_seg+0x27c>)
 801e348:	f005 ffa2 	bl	8024290 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 801e34c:	697b      	ldr	r3, [r7, #20]
 801e34e:	7a9b      	ldrb	r3, [r3, #10]
 801e350:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 801e352:	7bfb      	ldrb	r3, [r7, #15]
 801e354:	009b      	lsls	r3, r3, #2
 801e356:	b2db      	uxtb	r3, r3
 801e358:	f003 0304 	and.w	r3, r3, #4
 801e35c:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 801e35e:	697b      	ldr	r3, [r7, #20]
 801e360:	891a      	ldrh	r2, [r3, #8]
 801e362:	887b      	ldrh	r3, [r7, #2]
 801e364:	1ad3      	subs	r3, r2, r3
 801e366:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801e368:	7bbb      	ldrb	r3, [r7, #14]
 801e36a:	b29a      	uxth	r2, r3
 801e36c:	89bb      	ldrh	r3, [r7, #12]
 801e36e:	4413      	add	r3, r2
 801e370:	b29b      	uxth	r3, r3
 801e372:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e376:	4619      	mov	r1, r3
 801e378:	2036      	movs	r0, #54	; 0x36
 801e37a:	f7fa fa6d 	bl	8018858 <pbuf_alloc>
 801e37e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801e380:	693b      	ldr	r3, [r7, #16]
 801e382:	2b00      	cmp	r3, #0
 801e384:	f000 80b7 	beq.w	801e4f6 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 801e388:	697b      	ldr	r3, [r7, #20]
 801e38a:	685b      	ldr	r3, [r3, #4]
 801e38c:	891a      	ldrh	r2, [r3, #8]
 801e38e:	697b      	ldr	r3, [r7, #20]
 801e390:	891b      	ldrh	r3, [r3, #8]
 801e392:	1ad3      	subs	r3, r2, r3
 801e394:	b29a      	uxth	r2, r3
 801e396:	887b      	ldrh	r3, [r7, #2]
 801e398:	4413      	add	r3, r2
 801e39a:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 801e39c:	697b      	ldr	r3, [r7, #20]
 801e39e:	6858      	ldr	r0, [r3, #4]
 801e3a0:	693b      	ldr	r3, [r7, #16]
 801e3a2:	685a      	ldr	r2, [r3, #4]
 801e3a4:	7bbb      	ldrb	r3, [r7, #14]
 801e3a6:	18d1      	adds	r1, r2, r3
 801e3a8:	897b      	ldrh	r3, [r7, #10]
 801e3aa:	89ba      	ldrh	r2, [r7, #12]
 801e3ac:	f7fa ff3e 	bl	801922c <pbuf_copy_partial>
 801e3b0:	4603      	mov	r3, r0
 801e3b2:	461a      	mov	r2, r3
 801e3b4:	89bb      	ldrh	r3, [r7, #12]
 801e3b6:	4293      	cmp	r3, r2
 801e3b8:	f040 809f 	bne.w	801e4fa <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 801e3bc:	697b      	ldr	r3, [r7, #20]
 801e3be:	68db      	ldr	r3, [r3, #12]
 801e3c0:	899b      	ldrh	r3, [r3, #12]
 801e3c2:	b29b      	uxth	r3, r3
 801e3c4:	4618      	mov	r0, r3
 801e3c6:	f7f9 f939 	bl	801763c <lwip_htons>
 801e3ca:	4603      	mov	r3, r0
 801e3cc:	b2db      	uxtb	r3, r3
 801e3ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801e3d2:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801e3d4:	2300      	movs	r3, #0
 801e3d6:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801e3d8:	7efb      	ldrb	r3, [r7, #27]
 801e3da:	f003 0308 	and.w	r3, r3, #8
 801e3de:	2b00      	cmp	r3, #0
 801e3e0:	d007      	beq.n	801e3f2 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801e3e2:	7efb      	ldrb	r3, [r7, #27]
 801e3e4:	f023 0308 	bic.w	r3, r3, #8
 801e3e8:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801e3ea:	7ebb      	ldrb	r3, [r7, #26]
 801e3ec:	f043 0308 	orr.w	r3, r3, #8
 801e3f0:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801e3f2:	7efb      	ldrb	r3, [r7, #27]
 801e3f4:	f003 0301 	and.w	r3, r3, #1
 801e3f8:	2b00      	cmp	r3, #0
 801e3fa:	d007      	beq.n	801e40c <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 801e3fc:	7efb      	ldrb	r3, [r7, #27]
 801e3fe:	f023 0301 	bic.w	r3, r3, #1
 801e402:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801e404:	7ebb      	ldrb	r3, [r7, #26]
 801e406:	f043 0301 	orr.w	r3, r3, #1
 801e40a:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 801e40c:	697b      	ldr	r3, [r7, #20]
 801e40e:	68db      	ldr	r3, [r3, #12]
 801e410:	685b      	ldr	r3, [r3, #4]
 801e412:	4618      	mov	r0, r3
 801e414:	f7f9 f927 	bl	8017666 <lwip_htonl>
 801e418:	4602      	mov	r2, r0
 801e41a:	887b      	ldrh	r3, [r7, #2]
 801e41c:	18d1      	adds	r1, r2, r3
 801e41e:	7eba      	ldrb	r2, [r7, #26]
 801e420:	7bfb      	ldrb	r3, [r7, #15]
 801e422:	9300      	str	r3, [sp, #0]
 801e424:	460b      	mov	r3, r1
 801e426:	6939      	ldr	r1, [r7, #16]
 801e428:	6878      	ldr	r0, [r7, #4]
 801e42a:	f7ff fa4f 	bl	801d8cc <tcp_create_segment>
 801e42e:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 801e430:	69fb      	ldr	r3, [r7, #28]
 801e432:	2b00      	cmp	r3, #0
 801e434:	d063      	beq.n	801e4fe <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801e436:	697b      	ldr	r3, [r7, #20]
 801e438:	685b      	ldr	r3, [r3, #4]
 801e43a:	4618      	mov	r0, r3
 801e43c:	f7fa fd7e 	bl	8018f3c <pbuf_clen>
 801e440:	4603      	mov	r3, r0
 801e442:	461a      	mov	r2, r3
 801e444:	687b      	ldr	r3, [r7, #4]
 801e446:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e44a:	1a9b      	subs	r3, r3, r2
 801e44c:	b29a      	uxth	r2, r3
 801e44e:	687b      	ldr	r3, [r7, #4]
 801e450:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 801e454:	697b      	ldr	r3, [r7, #20]
 801e456:	6858      	ldr	r0, [r3, #4]
 801e458:	697b      	ldr	r3, [r7, #20]
 801e45a:	685b      	ldr	r3, [r3, #4]
 801e45c:	891a      	ldrh	r2, [r3, #8]
 801e45e:	89bb      	ldrh	r3, [r7, #12]
 801e460:	1ad3      	subs	r3, r2, r3
 801e462:	b29b      	uxth	r3, r3
 801e464:	4619      	mov	r1, r3
 801e466:	f7fa fb55 	bl	8018b14 <pbuf_realloc>
  useg->len -= remainder;
 801e46a:	697b      	ldr	r3, [r7, #20]
 801e46c:	891a      	ldrh	r2, [r3, #8]
 801e46e:	89bb      	ldrh	r3, [r7, #12]
 801e470:	1ad3      	subs	r3, r2, r3
 801e472:	b29a      	uxth	r2, r3
 801e474:	697b      	ldr	r3, [r7, #20]
 801e476:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 801e478:	697b      	ldr	r3, [r7, #20]
 801e47a:	68db      	ldr	r3, [r3, #12]
 801e47c:	899b      	ldrh	r3, [r3, #12]
 801e47e:	b29c      	uxth	r4, r3
 801e480:	7efb      	ldrb	r3, [r7, #27]
 801e482:	b29b      	uxth	r3, r3
 801e484:	4618      	mov	r0, r3
 801e486:	f7f9 f8d9 	bl	801763c <lwip_htons>
 801e48a:	4603      	mov	r3, r0
 801e48c:	461a      	mov	r2, r3
 801e48e:	697b      	ldr	r3, [r7, #20]
 801e490:	68db      	ldr	r3, [r3, #12]
 801e492:	4322      	orrs	r2, r4
 801e494:	b292      	uxth	r2, r2
 801e496:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 801e498:	697b      	ldr	r3, [r7, #20]
 801e49a:	685b      	ldr	r3, [r3, #4]
 801e49c:	4618      	mov	r0, r3
 801e49e:	f7fa fd4d 	bl	8018f3c <pbuf_clen>
 801e4a2:	4603      	mov	r3, r0
 801e4a4:	461a      	mov	r2, r3
 801e4a6:	687b      	ldr	r3, [r7, #4]
 801e4a8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e4ac:	4413      	add	r3, r2
 801e4ae:	b29a      	uxth	r2, r3
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e4b6:	69fb      	ldr	r3, [r7, #28]
 801e4b8:	685b      	ldr	r3, [r3, #4]
 801e4ba:	4618      	mov	r0, r3
 801e4bc:	f7fa fd3e 	bl	8018f3c <pbuf_clen>
 801e4c0:	4603      	mov	r3, r0
 801e4c2:	461a      	mov	r2, r3
 801e4c4:	687b      	ldr	r3, [r7, #4]
 801e4c6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e4ca:	4413      	add	r3, r2
 801e4cc:	b29a      	uxth	r2, r3
 801e4ce:	687b      	ldr	r3, [r7, #4]
 801e4d0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801e4d4:	697b      	ldr	r3, [r7, #20]
 801e4d6:	681a      	ldr	r2, [r3, #0]
 801e4d8:	69fb      	ldr	r3, [r7, #28]
 801e4da:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 801e4dc:	697b      	ldr	r3, [r7, #20]
 801e4de:	69fa      	ldr	r2, [r7, #28]
 801e4e0:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801e4e2:	69fb      	ldr	r3, [r7, #28]
 801e4e4:	681b      	ldr	r3, [r3, #0]
 801e4e6:	2b00      	cmp	r3, #0
 801e4e8:	d103      	bne.n	801e4f2 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801e4ea:	687b      	ldr	r3, [r7, #4]
 801e4ec:	2200      	movs	r2, #0
 801e4ee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801e4f2:	2300      	movs	r3, #0
 801e4f4:	e016      	b.n	801e524 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801e4f6:	bf00      	nop
 801e4f8:	e002      	b.n	801e500 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e4fa:	bf00      	nop
 801e4fc:	e000      	b.n	801e500 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801e4fe:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801e500:	69fb      	ldr	r3, [r7, #28]
 801e502:	2b00      	cmp	r3, #0
 801e504:	d006      	beq.n	801e514 <tcp_split_unsent_seg+0x25c>
 801e506:	4b09      	ldr	r3, [pc, #36]	; (801e52c <tcp_split_unsent_seg+0x274>)
 801e508:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 801e50c:	490d      	ldr	r1, [pc, #52]	; (801e544 <tcp_split_unsent_seg+0x28c>)
 801e50e:	4809      	ldr	r0, [pc, #36]	; (801e534 <tcp_split_unsent_seg+0x27c>)
 801e510:	f005 febe 	bl	8024290 <iprintf>
  if (p != NULL) {
 801e514:	693b      	ldr	r3, [r7, #16]
 801e516:	2b00      	cmp	r3, #0
 801e518:	d002      	beq.n	801e520 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801e51a:	6938      	ldr	r0, [r7, #16]
 801e51c:	f7fa fc80 	bl	8018e20 <pbuf_free>
  }

  return ERR_MEM;
 801e520:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 801e524:	4618      	mov	r0, r3
 801e526:	3724      	adds	r7, #36	; 0x24
 801e528:	46bd      	mov	sp, r7
 801e52a:	bd90      	pop	{r4, r7, pc}
 801e52c:	080279d4 	.word	0x080279d4
 801e530:	08027d68 	.word	0x08027d68
 801e534:	08027a28 	.word	0x08027a28
 801e538:	08027d8c 	.word	0x08027d8c
 801e53c:	08027db0 	.word	0x08027db0
 801e540:	08027dc0 	.word	0x08027dc0
 801e544:	08027dd0 	.word	0x08027dd0

0801e548 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801e548:	b590      	push	{r4, r7, lr}
 801e54a:	b085      	sub	sp, #20
 801e54c:	af00      	add	r7, sp, #0
 801e54e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	2b00      	cmp	r3, #0
 801e554:	d106      	bne.n	801e564 <tcp_send_fin+0x1c>
 801e556:	4b21      	ldr	r3, [pc, #132]	; (801e5dc <tcp_send_fin+0x94>)
 801e558:	f240 32eb 	movw	r2, #1003	; 0x3eb
 801e55c:	4920      	ldr	r1, [pc, #128]	; (801e5e0 <tcp_send_fin+0x98>)
 801e55e:	4821      	ldr	r0, [pc, #132]	; (801e5e4 <tcp_send_fin+0x9c>)
 801e560:	f005 fe96 	bl	8024290 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 801e564:	687b      	ldr	r3, [r7, #4]
 801e566:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e568:	2b00      	cmp	r3, #0
 801e56a:	d02e      	beq.n	801e5ca <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e56c:	687b      	ldr	r3, [r7, #4]
 801e56e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e570:	60fb      	str	r3, [r7, #12]
 801e572:	e002      	b.n	801e57a <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 801e574:	68fb      	ldr	r3, [r7, #12]
 801e576:	681b      	ldr	r3, [r3, #0]
 801e578:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801e57a:	68fb      	ldr	r3, [r7, #12]
 801e57c:	681b      	ldr	r3, [r3, #0]
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d1f8      	bne.n	801e574 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801e582:	68fb      	ldr	r3, [r7, #12]
 801e584:	68db      	ldr	r3, [r3, #12]
 801e586:	899b      	ldrh	r3, [r3, #12]
 801e588:	b29b      	uxth	r3, r3
 801e58a:	4618      	mov	r0, r3
 801e58c:	f7f9 f856 	bl	801763c <lwip_htons>
 801e590:	4603      	mov	r3, r0
 801e592:	b2db      	uxtb	r3, r3
 801e594:	f003 0307 	and.w	r3, r3, #7
 801e598:	2b00      	cmp	r3, #0
 801e59a:	d116      	bne.n	801e5ca <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 801e59c:	68fb      	ldr	r3, [r7, #12]
 801e59e:	68db      	ldr	r3, [r3, #12]
 801e5a0:	899b      	ldrh	r3, [r3, #12]
 801e5a2:	b29c      	uxth	r4, r3
 801e5a4:	2001      	movs	r0, #1
 801e5a6:	f7f9 f849 	bl	801763c <lwip_htons>
 801e5aa:	4603      	mov	r3, r0
 801e5ac:	461a      	mov	r2, r3
 801e5ae:	68fb      	ldr	r3, [r7, #12]
 801e5b0:	68db      	ldr	r3, [r3, #12]
 801e5b2:	4322      	orrs	r2, r4
 801e5b4:	b292      	uxth	r2, r2
 801e5b6:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	8b5b      	ldrh	r3, [r3, #26]
 801e5bc:	f043 0320 	orr.w	r3, r3, #32
 801e5c0:	b29a      	uxth	r2, r3
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 801e5c6:	2300      	movs	r3, #0
 801e5c8:	e004      	b.n	801e5d4 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 801e5ca:	2101      	movs	r1, #1
 801e5cc:	6878      	ldr	r0, [r7, #4]
 801e5ce:	f000 f80b 	bl	801e5e8 <tcp_enqueue_flags>
 801e5d2:	4603      	mov	r3, r0
}
 801e5d4:	4618      	mov	r0, r3
 801e5d6:	3714      	adds	r7, #20
 801e5d8:	46bd      	mov	sp, r7
 801e5da:	bd90      	pop	{r4, r7, pc}
 801e5dc:	080279d4 	.word	0x080279d4
 801e5e0:	08027ddc 	.word	0x08027ddc
 801e5e4:	08027a28 	.word	0x08027a28

0801e5e8 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801e5e8:	b580      	push	{r7, lr}
 801e5ea:	b08a      	sub	sp, #40	; 0x28
 801e5ec:	af02      	add	r7, sp, #8
 801e5ee:	6078      	str	r0, [r7, #4]
 801e5f0:	460b      	mov	r3, r1
 801e5f2:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 801e5f4:	2300      	movs	r3, #0
 801e5f6:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801e5f8:	2300      	movs	r3, #0
 801e5fa:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 801e5fc:	78fb      	ldrb	r3, [r7, #3]
 801e5fe:	f003 0303 	and.w	r3, r3, #3
 801e602:	2b00      	cmp	r3, #0
 801e604:	d106      	bne.n	801e614 <tcp_enqueue_flags+0x2c>
 801e606:	4b67      	ldr	r3, [pc, #412]	; (801e7a4 <tcp_enqueue_flags+0x1bc>)
 801e608:	f240 4211 	movw	r2, #1041	; 0x411
 801e60c:	4966      	ldr	r1, [pc, #408]	; (801e7a8 <tcp_enqueue_flags+0x1c0>)
 801e60e:	4867      	ldr	r0, [pc, #412]	; (801e7ac <tcp_enqueue_flags+0x1c4>)
 801e610:	f005 fe3e 	bl	8024290 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	2b00      	cmp	r3, #0
 801e618:	d106      	bne.n	801e628 <tcp_enqueue_flags+0x40>
 801e61a:	4b62      	ldr	r3, [pc, #392]	; (801e7a4 <tcp_enqueue_flags+0x1bc>)
 801e61c:	f240 4213 	movw	r2, #1043	; 0x413
 801e620:	4963      	ldr	r1, [pc, #396]	; (801e7b0 <tcp_enqueue_flags+0x1c8>)
 801e622:	4862      	ldr	r0, [pc, #392]	; (801e7ac <tcp_enqueue_flags+0x1c4>)
 801e624:	f005 fe34 	bl	8024290 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801e628:	78fb      	ldrb	r3, [r7, #3]
 801e62a:	f003 0302 	and.w	r3, r3, #2
 801e62e:	2b00      	cmp	r3, #0
 801e630:	d001      	beq.n	801e636 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 801e632:	2301      	movs	r3, #1
 801e634:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801e636:	7ffb      	ldrb	r3, [r7, #31]
 801e638:	009b      	lsls	r3, r3, #2
 801e63a:	b2db      	uxtb	r3, r3
 801e63c:	f003 0304 	and.w	r3, r3, #4
 801e640:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801e642:	7dfb      	ldrb	r3, [r7, #23]
 801e644:	b29b      	uxth	r3, r3
 801e646:	f44f 7220 	mov.w	r2, #640	; 0x280
 801e64a:	4619      	mov	r1, r3
 801e64c:	2036      	movs	r0, #54	; 0x36
 801e64e:	f7fa f903 	bl	8018858 <pbuf_alloc>
 801e652:	6138      	str	r0, [r7, #16]
 801e654:	693b      	ldr	r3, [r7, #16]
 801e656:	2b00      	cmp	r3, #0
 801e658:	d109      	bne.n	801e66e <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	8b5b      	ldrh	r3, [r3, #26]
 801e65e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e662:	b29a      	uxth	r2, r3
 801e664:	687b      	ldr	r3, [r7, #4]
 801e666:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e668:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e66c:	e095      	b.n	801e79a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801e66e:	693b      	ldr	r3, [r7, #16]
 801e670:	895a      	ldrh	r2, [r3, #10]
 801e672:	7dfb      	ldrb	r3, [r7, #23]
 801e674:	b29b      	uxth	r3, r3
 801e676:	429a      	cmp	r2, r3
 801e678:	d206      	bcs.n	801e688 <tcp_enqueue_flags+0xa0>
 801e67a:	4b4a      	ldr	r3, [pc, #296]	; (801e7a4 <tcp_enqueue_flags+0x1bc>)
 801e67c:	f240 4239 	movw	r2, #1081	; 0x439
 801e680:	494c      	ldr	r1, [pc, #304]	; (801e7b4 <tcp_enqueue_flags+0x1cc>)
 801e682:	484a      	ldr	r0, [pc, #296]	; (801e7ac <tcp_enqueue_flags+0x1c4>)
 801e684:	f005 fe04 	bl	8024290 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 801e688:	687b      	ldr	r3, [r7, #4]
 801e68a:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 801e68c:	78fa      	ldrb	r2, [r7, #3]
 801e68e:	7ffb      	ldrb	r3, [r7, #31]
 801e690:	9300      	str	r3, [sp, #0]
 801e692:	460b      	mov	r3, r1
 801e694:	6939      	ldr	r1, [r7, #16]
 801e696:	6878      	ldr	r0, [r7, #4]
 801e698:	f7ff f918 	bl	801d8cc <tcp_create_segment>
 801e69c:	60f8      	str	r0, [r7, #12]
 801e69e:	68fb      	ldr	r3, [r7, #12]
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d109      	bne.n	801e6b8 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	8b5b      	ldrh	r3, [r3, #26]
 801e6a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e6ac:	b29a      	uxth	r2, r3
 801e6ae:	687b      	ldr	r3, [r7, #4]
 801e6b0:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801e6b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801e6b6:	e070      	b.n	801e79a <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 801e6b8:	68fb      	ldr	r3, [r7, #12]
 801e6ba:	68db      	ldr	r3, [r3, #12]
 801e6bc:	f003 0303 	and.w	r3, r3, #3
 801e6c0:	2b00      	cmp	r3, #0
 801e6c2:	d006      	beq.n	801e6d2 <tcp_enqueue_flags+0xea>
 801e6c4:	4b37      	ldr	r3, [pc, #220]	; (801e7a4 <tcp_enqueue_flags+0x1bc>)
 801e6c6:	f240 4242 	movw	r2, #1090	; 0x442
 801e6ca:	493b      	ldr	r1, [pc, #236]	; (801e7b8 <tcp_enqueue_flags+0x1d0>)
 801e6cc:	4837      	ldr	r0, [pc, #220]	; (801e7ac <tcp_enqueue_flags+0x1c4>)
 801e6ce:	f005 fddf 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801e6d2:	68fb      	ldr	r3, [r7, #12]
 801e6d4:	891b      	ldrh	r3, [r3, #8]
 801e6d6:	2b00      	cmp	r3, #0
 801e6d8:	d006      	beq.n	801e6e8 <tcp_enqueue_flags+0x100>
 801e6da:	4b32      	ldr	r3, [pc, #200]	; (801e7a4 <tcp_enqueue_flags+0x1bc>)
 801e6dc:	f240 4243 	movw	r2, #1091	; 0x443
 801e6e0:	4936      	ldr	r1, [pc, #216]	; (801e7bc <tcp_enqueue_flags+0x1d4>)
 801e6e2:	4832      	ldr	r0, [pc, #200]	; (801e7ac <tcp_enqueue_flags+0x1c4>)
 801e6e4:	f005 fdd4 	bl	8024290 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d103      	bne.n	801e6f8 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801e6f0:	687b      	ldr	r3, [r7, #4]
 801e6f2:	68fa      	ldr	r2, [r7, #12]
 801e6f4:	66da      	str	r2, [r3, #108]	; 0x6c
 801e6f6:	e00d      	b.n	801e714 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e6fc:	61bb      	str	r3, [r7, #24]
 801e6fe:	e002      	b.n	801e706 <tcp_enqueue_flags+0x11e>
 801e700:	69bb      	ldr	r3, [r7, #24]
 801e702:	681b      	ldr	r3, [r3, #0]
 801e704:	61bb      	str	r3, [r7, #24]
 801e706:	69bb      	ldr	r3, [r7, #24]
 801e708:	681b      	ldr	r3, [r3, #0]
 801e70a:	2b00      	cmp	r3, #0
 801e70c:	d1f8      	bne.n	801e700 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 801e70e:	69bb      	ldr	r3, [r7, #24]
 801e710:	68fa      	ldr	r2, [r7, #12]
 801e712:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 801e714:	687b      	ldr	r3, [r7, #4]
 801e716:	2200      	movs	r2, #0
 801e718:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 801e71c:	78fb      	ldrb	r3, [r7, #3]
 801e71e:	f003 0302 	and.w	r3, r3, #2
 801e722:	2b00      	cmp	r3, #0
 801e724:	d104      	bne.n	801e730 <tcp_enqueue_flags+0x148>
 801e726:	78fb      	ldrb	r3, [r7, #3]
 801e728:	f003 0301 	and.w	r3, r3, #1
 801e72c:	2b00      	cmp	r3, #0
 801e72e:	d004      	beq.n	801e73a <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 801e730:	687b      	ldr	r3, [r7, #4]
 801e732:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 801e734:	1c5a      	adds	r2, r3, #1
 801e736:	687b      	ldr	r3, [r7, #4]
 801e738:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801e73a:	78fb      	ldrb	r3, [r7, #3]
 801e73c:	f003 0301 	and.w	r3, r3, #1
 801e740:	2b00      	cmp	r3, #0
 801e742:	d006      	beq.n	801e752 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 801e744:	687b      	ldr	r3, [r7, #4]
 801e746:	8b5b      	ldrh	r3, [r3, #26]
 801e748:	f043 0320 	orr.w	r3, r3, #32
 801e74c:	b29a      	uxth	r2, r3
 801e74e:	687b      	ldr	r3, [r7, #4]
 801e750:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	685b      	ldr	r3, [r3, #4]
 801e756:	4618      	mov	r0, r3
 801e758:	f7fa fbf0 	bl	8018f3c <pbuf_clen>
 801e75c:	4603      	mov	r3, r0
 801e75e:	461a      	mov	r2, r3
 801e760:	687b      	ldr	r3, [r7, #4]
 801e762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e766:	4413      	add	r3, r2
 801e768:	b29a      	uxth	r2, r3
 801e76a:	687b      	ldr	r3, [r7, #4]
 801e76c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801e770:	687b      	ldr	r3, [r7, #4]
 801e772:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e776:	2b00      	cmp	r3, #0
 801e778:	d00e      	beq.n	801e798 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 801e77a:	687b      	ldr	r3, [r7, #4]
 801e77c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e77e:	2b00      	cmp	r3, #0
 801e780:	d10a      	bne.n	801e798 <tcp_enqueue_flags+0x1b0>
 801e782:	687b      	ldr	r3, [r7, #4]
 801e784:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e786:	2b00      	cmp	r3, #0
 801e788:	d106      	bne.n	801e798 <tcp_enqueue_flags+0x1b0>
 801e78a:	4b06      	ldr	r3, [pc, #24]	; (801e7a4 <tcp_enqueue_flags+0x1bc>)
 801e78c:	f240 4265 	movw	r2, #1125	; 0x465
 801e790:	490b      	ldr	r1, [pc, #44]	; (801e7c0 <tcp_enqueue_flags+0x1d8>)
 801e792:	4806      	ldr	r0, [pc, #24]	; (801e7ac <tcp_enqueue_flags+0x1c4>)
 801e794:	f005 fd7c 	bl	8024290 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 801e798:	2300      	movs	r3, #0
}
 801e79a:	4618      	mov	r0, r3
 801e79c:	3720      	adds	r7, #32
 801e79e:	46bd      	mov	sp, r7
 801e7a0:	bd80      	pop	{r7, pc}
 801e7a2:	bf00      	nop
 801e7a4:	080279d4 	.word	0x080279d4
 801e7a8:	08027df8 	.word	0x08027df8
 801e7ac:	08027a28 	.word	0x08027a28
 801e7b0:	08027e50 	.word	0x08027e50
 801e7b4:	08027e70 	.word	0x08027e70
 801e7b8:	08027eac 	.word	0x08027eac
 801e7bc:	08027ec4 	.word	0x08027ec4
 801e7c0:	08027ef0 	.word	0x08027ef0

0801e7c4 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 801e7c4:	b5b0      	push	{r4, r5, r7, lr}
 801e7c6:	b08a      	sub	sp, #40	; 0x28
 801e7c8:	af00      	add	r7, sp, #0
 801e7ca:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 801e7cc:	687b      	ldr	r3, [r7, #4]
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d106      	bne.n	801e7e0 <tcp_output+0x1c>
 801e7d2:	4b8a      	ldr	r3, [pc, #552]	; (801e9fc <tcp_output+0x238>)
 801e7d4:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801e7d8:	4989      	ldr	r1, [pc, #548]	; (801ea00 <tcp_output+0x23c>)
 801e7da:	488a      	ldr	r0, [pc, #552]	; (801ea04 <tcp_output+0x240>)
 801e7dc:	f005 fd58 	bl	8024290 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 801e7e0:	687b      	ldr	r3, [r7, #4]
 801e7e2:	7d1b      	ldrb	r3, [r3, #20]
 801e7e4:	2b01      	cmp	r3, #1
 801e7e6:	d106      	bne.n	801e7f6 <tcp_output+0x32>
 801e7e8:	4b84      	ldr	r3, [pc, #528]	; (801e9fc <tcp_output+0x238>)
 801e7ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 801e7ee:	4986      	ldr	r1, [pc, #536]	; (801ea08 <tcp_output+0x244>)
 801e7f0:	4884      	ldr	r0, [pc, #528]	; (801ea04 <tcp_output+0x240>)
 801e7f2:	f005 fd4d 	bl	8024290 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801e7f6:	4b85      	ldr	r3, [pc, #532]	; (801ea0c <tcp_output+0x248>)
 801e7f8:	681b      	ldr	r3, [r3, #0]
 801e7fa:	687a      	ldr	r2, [r7, #4]
 801e7fc:	429a      	cmp	r2, r3
 801e7fe:	d101      	bne.n	801e804 <tcp_output+0x40>
    return ERR_OK;
 801e800:	2300      	movs	r3, #0
 801e802:	e1ce      	b.n	801eba2 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 801e804:	687b      	ldr	r3, [r7, #4]
 801e806:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801e80a:	687b      	ldr	r3, [r7, #4]
 801e80c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e810:	4293      	cmp	r3, r2
 801e812:	bf28      	it	cs
 801e814:	4613      	movcs	r3, r2
 801e816:	b29b      	uxth	r3, r3
 801e818:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801e81a:	687b      	ldr	r3, [r7, #4]
 801e81c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e81e:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 801e820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e822:	2b00      	cmp	r3, #0
 801e824:	d10b      	bne.n	801e83e <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801e826:	687b      	ldr	r3, [r7, #4]
 801e828:	8b5b      	ldrh	r3, [r3, #26]
 801e82a:	f003 0302 	and.w	r3, r3, #2
 801e82e:	2b00      	cmp	r3, #0
 801e830:	f000 81aa 	beq.w	801eb88 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 801e834:	6878      	ldr	r0, [r7, #4]
 801e836:	f000 fdcb 	bl	801f3d0 <tcp_send_empty_ack>
 801e83a:	4603      	mov	r3, r0
 801e83c:	e1b1      	b.n	801eba2 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 801e83e:	6879      	ldr	r1, [r7, #4]
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	3304      	adds	r3, #4
 801e844:	461a      	mov	r2, r3
 801e846:	6878      	ldr	r0, [r7, #4]
 801e848:	f7ff f824 	bl	801d894 <tcp_route>
 801e84c:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 801e84e:	697b      	ldr	r3, [r7, #20]
 801e850:	2b00      	cmp	r3, #0
 801e852:	d102      	bne.n	801e85a <tcp_output+0x96>
    return ERR_RTE;
 801e854:	f06f 0303 	mvn.w	r3, #3
 801e858:	e1a3      	b.n	801eba2 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801e85a:	687b      	ldr	r3, [r7, #4]
 801e85c:	2b00      	cmp	r3, #0
 801e85e:	d003      	beq.n	801e868 <tcp_output+0xa4>
 801e860:	687b      	ldr	r3, [r7, #4]
 801e862:	681b      	ldr	r3, [r3, #0]
 801e864:	2b00      	cmp	r3, #0
 801e866:	d111      	bne.n	801e88c <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801e868:	697b      	ldr	r3, [r7, #20]
 801e86a:	2b00      	cmp	r3, #0
 801e86c:	d002      	beq.n	801e874 <tcp_output+0xb0>
 801e86e:	697b      	ldr	r3, [r7, #20]
 801e870:	3304      	adds	r3, #4
 801e872:	e000      	b.n	801e876 <tcp_output+0xb2>
 801e874:	2300      	movs	r3, #0
 801e876:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 801e878:	693b      	ldr	r3, [r7, #16]
 801e87a:	2b00      	cmp	r3, #0
 801e87c:	d102      	bne.n	801e884 <tcp_output+0xc0>
      return ERR_RTE;
 801e87e:	f06f 0303 	mvn.w	r3, #3
 801e882:	e18e      	b.n	801eba2 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 801e884:	693b      	ldr	r3, [r7, #16]
 801e886:	681a      	ldr	r2, [r3, #0]
 801e888:	687b      	ldr	r3, [r7, #4]
 801e88a:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 801e88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e88e:	68db      	ldr	r3, [r3, #12]
 801e890:	685b      	ldr	r3, [r3, #4]
 801e892:	4618      	mov	r0, r3
 801e894:	f7f8 fee7 	bl	8017666 <lwip_htonl>
 801e898:	4602      	mov	r2, r0
 801e89a:	687b      	ldr	r3, [r7, #4]
 801e89c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801e89e:	1ad3      	subs	r3, r2, r3
 801e8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801e8a2:	8912      	ldrh	r2, [r2, #8]
 801e8a4:	4413      	add	r3, r2
 801e8a6:	69ba      	ldr	r2, [r7, #24]
 801e8a8:	429a      	cmp	r2, r3
 801e8aa:	d227      	bcs.n	801e8fc <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 801e8ac:	687b      	ldr	r3, [r7, #4]
 801e8ae:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801e8b2:	461a      	mov	r2, r3
 801e8b4:	69bb      	ldr	r3, [r7, #24]
 801e8b6:	4293      	cmp	r3, r2
 801e8b8:	d114      	bne.n	801e8e4 <tcp_output+0x120>
 801e8ba:	687b      	ldr	r3, [r7, #4]
 801e8bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e8be:	2b00      	cmp	r3, #0
 801e8c0:	d110      	bne.n	801e8e4 <tcp_output+0x120>
 801e8c2:	687b      	ldr	r3, [r7, #4]
 801e8c4:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801e8c8:	2b00      	cmp	r3, #0
 801e8ca:	d10b      	bne.n	801e8e4 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 801e8cc:	687b      	ldr	r3, [r7, #4]
 801e8ce:	2200      	movs	r2, #0
 801e8d0:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 801e8d4:	687b      	ldr	r3, [r7, #4]
 801e8d6:	2201      	movs	r2, #1
 801e8d8:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	2200      	movs	r2, #0
 801e8e0:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	8b5b      	ldrh	r3, [r3, #26]
 801e8e8:	f003 0302 	and.w	r3, r3, #2
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	f000 814d 	beq.w	801eb8c <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 801e8f2:	6878      	ldr	r0, [r7, #4]
 801e8f4:	f000 fd6c 	bl	801f3d0 <tcp_send_empty_ack>
 801e8f8:	4603      	mov	r3, r0
 801e8fa:	e152      	b.n	801eba2 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 801e8fc:	687b      	ldr	r3, [r7, #4]
 801e8fe:	2200      	movs	r2, #0
 801e900:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e908:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801e90a:	6a3b      	ldr	r3, [r7, #32]
 801e90c:	2b00      	cmp	r3, #0
 801e90e:	f000 811c 	beq.w	801eb4a <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 801e912:	e002      	b.n	801e91a <tcp_output+0x156>
 801e914:	6a3b      	ldr	r3, [r7, #32]
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	623b      	str	r3, [r7, #32]
 801e91a:	6a3b      	ldr	r3, [r7, #32]
 801e91c:	681b      	ldr	r3, [r3, #0]
 801e91e:	2b00      	cmp	r3, #0
 801e920:	d1f8      	bne.n	801e914 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 801e922:	e112      	b.n	801eb4a <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 801e924:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e926:	68db      	ldr	r3, [r3, #12]
 801e928:	899b      	ldrh	r3, [r3, #12]
 801e92a:	b29b      	uxth	r3, r3
 801e92c:	4618      	mov	r0, r3
 801e92e:	f7f8 fe85 	bl	801763c <lwip_htons>
 801e932:	4603      	mov	r3, r0
 801e934:	b2db      	uxtb	r3, r3
 801e936:	f003 0304 	and.w	r3, r3, #4
 801e93a:	2b00      	cmp	r3, #0
 801e93c:	d006      	beq.n	801e94c <tcp_output+0x188>
 801e93e:	4b2f      	ldr	r3, [pc, #188]	; (801e9fc <tcp_output+0x238>)
 801e940:	f240 5236 	movw	r2, #1334	; 0x536
 801e944:	4932      	ldr	r1, [pc, #200]	; (801ea10 <tcp_output+0x24c>)
 801e946:	482f      	ldr	r0, [pc, #188]	; (801ea04 <tcp_output+0x240>)
 801e948:	f005 fca2 	bl	8024290 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e94c:	687b      	ldr	r3, [r7, #4]
 801e94e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801e950:	2b00      	cmp	r3, #0
 801e952:	d01f      	beq.n	801e994 <tcp_output+0x1d0>
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	8b5b      	ldrh	r3, [r3, #26]
 801e958:	f003 0344 	and.w	r3, r3, #68	; 0x44
 801e95c:	2b00      	cmp	r3, #0
 801e95e:	d119      	bne.n	801e994 <tcp_output+0x1d0>
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e964:	2b00      	cmp	r3, #0
 801e966:	d00b      	beq.n	801e980 <tcp_output+0x1bc>
 801e968:	687b      	ldr	r3, [r7, #4]
 801e96a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e96c:	681b      	ldr	r3, [r3, #0]
 801e96e:	2b00      	cmp	r3, #0
 801e970:	d110      	bne.n	801e994 <tcp_output+0x1d0>
 801e972:	687b      	ldr	r3, [r7, #4]
 801e974:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801e976:	891a      	ldrh	r2, [r3, #8]
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801e97c:	429a      	cmp	r2, r3
 801e97e:	d209      	bcs.n	801e994 <tcp_output+0x1d0>
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 801e986:	2b00      	cmp	r3, #0
 801e988:	d004      	beq.n	801e994 <tcp_output+0x1d0>
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801e990:	2b08      	cmp	r3, #8
 801e992:	d901      	bls.n	801e998 <tcp_output+0x1d4>
 801e994:	2301      	movs	r3, #1
 801e996:	e000      	b.n	801e99a <tcp_output+0x1d6>
 801e998:	2300      	movs	r3, #0
 801e99a:	2b00      	cmp	r3, #0
 801e99c:	d106      	bne.n	801e9ac <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 801e99e:	687b      	ldr	r3, [r7, #4]
 801e9a0:	8b5b      	ldrh	r3, [r3, #26]
 801e9a2:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	f000 80e4 	beq.w	801eb74 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 801e9ac:	687b      	ldr	r3, [r7, #4]
 801e9ae:	7d1b      	ldrb	r3, [r3, #20]
 801e9b0:	2b02      	cmp	r3, #2
 801e9b2:	d00d      	beq.n	801e9d0 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 801e9b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9b6:	68db      	ldr	r3, [r3, #12]
 801e9b8:	899b      	ldrh	r3, [r3, #12]
 801e9ba:	b29c      	uxth	r4, r3
 801e9bc:	2010      	movs	r0, #16
 801e9be:	f7f8 fe3d 	bl	801763c <lwip_htons>
 801e9c2:	4603      	mov	r3, r0
 801e9c4:	461a      	mov	r2, r3
 801e9c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e9c8:	68db      	ldr	r3, [r3, #12]
 801e9ca:	4322      	orrs	r2, r4
 801e9cc:	b292      	uxth	r2, r2
 801e9ce:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 801e9d0:	697a      	ldr	r2, [r7, #20]
 801e9d2:	6879      	ldr	r1, [r7, #4]
 801e9d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801e9d6:	f000 f909 	bl	801ebec <tcp_output_segment>
 801e9da:	4603      	mov	r3, r0
 801e9dc:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 801e9de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e9e2:	2b00      	cmp	r3, #0
 801e9e4:	d016      	beq.n	801ea14 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801e9e6:	687b      	ldr	r3, [r7, #4]
 801e9e8:	8b5b      	ldrh	r3, [r3, #26]
 801e9ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e9ee:	b29a      	uxth	r2, r3
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	835a      	strh	r2, [r3, #26]
      return err;
 801e9f4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801e9f8:	e0d3      	b.n	801eba2 <tcp_output+0x3de>
 801e9fa:	bf00      	nop
 801e9fc:	080279d4 	.word	0x080279d4
 801ea00:	08027f18 	.word	0x08027f18
 801ea04:	08027a28 	.word	0x08027a28
 801ea08:	08027f30 	.word	0x08027f30
 801ea0c:	2000c008 	.word	0x2000c008
 801ea10:	08027f58 	.word	0x08027f58
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 801ea14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea16:	681a      	ldr	r2, [r3, #0]
 801ea18:	687b      	ldr	r3, [r7, #4]
 801ea1a:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	7d1b      	ldrb	r3, [r3, #20]
 801ea20:	2b02      	cmp	r3, #2
 801ea22:	d006      	beq.n	801ea32 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801ea24:	687b      	ldr	r3, [r7, #4]
 801ea26:	8b5b      	ldrh	r3, [r3, #26]
 801ea28:	f023 0303 	bic.w	r3, r3, #3
 801ea2c:	b29a      	uxth	r2, r3
 801ea2e:	687b      	ldr	r3, [r7, #4]
 801ea30:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ea32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea34:	68db      	ldr	r3, [r3, #12]
 801ea36:	685b      	ldr	r3, [r3, #4]
 801ea38:	4618      	mov	r0, r3
 801ea3a:	f7f8 fe14 	bl	8017666 <lwip_htonl>
 801ea3e:	4604      	mov	r4, r0
 801ea40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea42:	891b      	ldrh	r3, [r3, #8]
 801ea44:	461d      	mov	r5, r3
 801ea46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea48:	68db      	ldr	r3, [r3, #12]
 801ea4a:	899b      	ldrh	r3, [r3, #12]
 801ea4c:	b29b      	uxth	r3, r3
 801ea4e:	4618      	mov	r0, r3
 801ea50:	f7f8 fdf4 	bl	801763c <lwip_htons>
 801ea54:	4603      	mov	r3, r0
 801ea56:	b2db      	uxtb	r3, r3
 801ea58:	f003 0303 	and.w	r3, r3, #3
 801ea5c:	2b00      	cmp	r3, #0
 801ea5e:	d001      	beq.n	801ea64 <tcp_output+0x2a0>
 801ea60:	2301      	movs	r3, #1
 801ea62:	e000      	b.n	801ea66 <tcp_output+0x2a2>
 801ea64:	2300      	movs	r3, #0
 801ea66:	442b      	add	r3, r5
 801ea68:	4423      	add	r3, r4
 801ea6a:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801ea6c:	687b      	ldr	r3, [r7, #4]
 801ea6e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801ea70:	68bb      	ldr	r3, [r7, #8]
 801ea72:	1ad3      	subs	r3, r2, r3
 801ea74:	2b00      	cmp	r3, #0
 801ea76:	da02      	bge.n	801ea7e <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801ea78:	687b      	ldr	r3, [r7, #4]
 801ea7a:	68ba      	ldr	r2, [r7, #8]
 801ea7c:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 801ea7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea80:	891b      	ldrh	r3, [r3, #8]
 801ea82:	461c      	mov	r4, r3
 801ea84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ea86:	68db      	ldr	r3, [r3, #12]
 801ea88:	899b      	ldrh	r3, [r3, #12]
 801ea8a:	b29b      	uxth	r3, r3
 801ea8c:	4618      	mov	r0, r3
 801ea8e:	f7f8 fdd5 	bl	801763c <lwip_htons>
 801ea92:	4603      	mov	r3, r0
 801ea94:	b2db      	uxtb	r3, r3
 801ea96:	f003 0303 	and.w	r3, r3, #3
 801ea9a:	2b00      	cmp	r3, #0
 801ea9c:	d001      	beq.n	801eaa2 <tcp_output+0x2de>
 801ea9e:	2301      	movs	r3, #1
 801eaa0:	e000      	b.n	801eaa4 <tcp_output+0x2e0>
 801eaa2:	2300      	movs	r3, #0
 801eaa4:	4423      	add	r3, r4
 801eaa6:	2b00      	cmp	r3, #0
 801eaa8:	d049      	beq.n	801eb3e <tcp_output+0x37a>
      seg->next = NULL;
 801eaaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eaac:	2200      	movs	r2, #0
 801eaae:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eab4:	2b00      	cmp	r3, #0
 801eab6:	d105      	bne.n	801eac4 <tcp_output+0x300>
        pcb->unacked = seg;
 801eab8:	687b      	ldr	r3, [r7, #4]
 801eaba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eabc:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 801eabe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eac0:	623b      	str	r3, [r7, #32]
 801eac2:	e03f      	b.n	801eb44 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 801eac4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eac6:	68db      	ldr	r3, [r3, #12]
 801eac8:	685b      	ldr	r3, [r3, #4]
 801eaca:	4618      	mov	r0, r3
 801eacc:	f7f8 fdcb 	bl	8017666 <lwip_htonl>
 801ead0:	4604      	mov	r4, r0
 801ead2:	6a3b      	ldr	r3, [r7, #32]
 801ead4:	68db      	ldr	r3, [r3, #12]
 801ead6:	685b      	ldr	r3, [r3, #4]
 801ead8:	4618      	mov	r0, r3
 801eada:	f7f8 fdc4 	bl	8017666 <lwip_htonl>
 801eade:	4603      	mov	r3, r0
 801eae0:	1ae3      	subs	r3, r4, r3
 801eae2:	2b00      	cmp	r3, #0
 801eae4:	da24      	bge.n	801eb30 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	3370      	adds	r3, #112	; 0x70
 801eaea:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801eaec:	e002      	b.n	801eaf4 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 801eaee:	69fb      	ldr	r3, [r7, #28]
 801eaf0:	681b      	ldr	r3, [r3, #0]
 801eaf2:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 801eaf4:	69fb      	ldr	r3, [r7, #28]
 801eaf6:	681b      	ldr	r3, [r3, #0]
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	d011      	beq.n	801eb20 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801eafc:	69fb      	ldr	r3, [r7, #28]
 801eafe:	681b      	ldr	r3, [r3, #0]
 801eb00:	68db      	ldr	r3, [r3, #12]
 801eb02:	685b      	ldr	r3, [r3, #4]
 801eb04:	4618      	mov	r0, r3
 801eb06:	f7f8 fdae 	bl	8017666 <lwip_htonl>
 801eb0a:	4604      	mov	r4, r0
 801eb0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb0e:	68db      	ldr	r3, [r3, #12]
 801eb10:	685b      	ldr	r3, [r3, #4]
 801eb12:	4618      	mov	r0, r3
 801eb14:	f7f8 fda7 	bl	8017666 <lwip_htonl>
 801eb18:	4603      	mov	r3, r0
 801eb1a:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	dbe6      	blt.n	801eaee <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 801eb20:	69fb      	ldr	r3, [r7, #28]
 801eb22:	681a      	ldr	r2, [r3, #0]
 801eb24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb26:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801eb28:	69fb      	ldr	r3, [r7, #28]
 801eb2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb2c:	601a      	str	r2, [r3, #0]
 801eb2e:	e009      	b.n	801eb44 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 801eb30:	6a3b      	ldr	r3, [r7, #32]
 801eb32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb34:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801eb36:	6a3b      	ldr	r3, [r7, #32]
 801eb38:	681b      	ldr	r3, [r3, #0]
 801eb3a:	623b      	str	r3, [r7, #32]
 801eb3c:	e002      	b.n	801eb44 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 801eb3e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801eb40:	f7fb ff19 	bl	801a976 <tcp_seg_free>
    }
    seg = pcb->unsent;
 801eb44:	687b      	ldr	r3, [r7, #4]
 801eb46:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eb48:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801eb4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb4c:	2b00      	cmp	r3, #0
 801eb4e:	d012      	beq.n	801eb76 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 801eb50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb52:	68db      	ldr	r3, [r3, #12]
 801eb54:	685b      	ldr	r3, [r3, #4]
 801eb56:	4618      	mov	r0, r3
 801eb58:	f7f8 fd85 	bl	8017666 <lwip_htonl>
 801eb5c:	4602      	mov	r2, r0
 801eb5e:	687b      	ldr	r3, [r7, #4]
 801eb60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801eb62:	1ad3      	subs	r3, r2, r3
 801eb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801eb66:	8912      	ldrh	r2, [r2, #8]
 801eb68:	4413      	add	r3, r2
  while (seg != NULL &&
 801eb6a:	69ba      	ldr	r2, [r7, #24]
 801eb6c:	429a      	cmp	r2, r3
 801eb6e:	f4bf aed9 	bcs.w	801e924 <tcp_output+0x160>
 801eb72:	e000      	b.n	801eb76 <tcp_output+0x3b2>
      break;
 801eb74:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801eb76:	687b      	ldr	r3, [r7, #4]
 801eb78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801eb7a:	2b00      	cmp	r3, #0
 801eb7c:	d108      	bne.n	801eb90 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801eb7e:	687b      	ldr	r3, [r7, #4]
 801eb80:	2200      	movs	r2, #0
 801eb82:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801eb86:	e004      	b.n	801eb92 <tcp_output+0x3ce>
    goto output_done;
 801eb88:	bf00      	nop
 801eb8a:	e002      	b.n	801eb92 <tcp_output+0x3ce>
    goto output_done;
 801eb8c:	bf00      	nop
 801eb8e:	e000      	b.n	801eb92 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 801eb90:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	8b5b      	ldrh	r3, [r3, #26]
 801eb96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 801eb9a:	b29a      	uxth	r2, r3
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 801eba0:	2300      	movs	r3, #0
}
 801eba2:	4618      	mov	r0, r3
 801eba4:	3728      	adds	r7, #40	; 0x28
 801eba6:	46bd      	mov	sp, r7
 801eba8:	bdb0      	pop	{r4, r5, r7, pc}
 801ebaa:	bf00      	nop

0801ebac <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 801ebac:	b580      	push	{r7, lr}
 801ebae:	b082      	sub	sp, #8
 801ebb0:	af00      	add	r7, sp, #0
 801ebb2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	2b00      	cmp	r3, #0
 801ebb8:	d106      	bne.n	801ebc8 <tcp_output_segment_busy+0x1c>
 801ebba:	4b09      	ldr	r3, [pc, #36]	; (801ebe0 <tcp_output_segment_busy+0x34>)
 801ebbc:	f240 529a 	movw	r2, #1434	; 0x59a
 801ebc0:	4908      	ldr	r1, [pc, #32]	; (801ebe4 <tcp_output_segment_busy+0x38>)
 801ebc2:	4809      	ldr	r0, [pc, #36]	; (801ebe8 <tcp_output_segment_busy+0x3c>)
 801ebc4:	f005 fb64 	bl	8024290 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	685b      	ldr	r3, [r3, #4]
 801ebcc:	7b9b      	ldrb	r3, [r3, #14]
 801ebce:	2b01      	cmp	r3, #1
 801ebd0:	d001      	beq.n	801ebd6 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801ebd2:	2301      	movs	r3, #1
 801ebd4:	e000      	b.n	801ebd8 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801ebd6:	2300      	movs	r3, #0
}
 801ebd8:	4618      	mov	r0, r3
 801ebda:	3708      	adds	r7, #8
 801ebdc:	46bd      	mov	sp, r7
 801ebde:	bd80      	pop	{r7, pc}
 801ebe0:	080279d4 	.word	0x080279d4
 801ebe4:	08027f70 	.word	0x08027f70
 801ebe8:	08027a28 	.word	0x08027a28

0801ebec <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 801ebec:	b5b0      	push	{r4, r5, r7, lr}
 801ebee:	b08c      	sub	sp, #48	; 0x30
 801ebf0:	af04      	add	r7, sp, #16
 801ebf2:	60f8      	str	r0, [r7, #12]
 801ebf4:	60b9      	str	r1, [r7, #8]
 801ebf6:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801ebf8:	68fb      	ldr	r3, [r7, #12]
 801ebfa:	2b00      	cmp	r3, #0
 801ebfc:	d106      	bne.n	801ec0c <tcp_output_segment+0x20>
 801ebfe:	4b63      	ldr	r3, [pc, #396]	; (801ed8c <tcp_output_segment+0x1a0>)
 801ec00:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801ec04:	4962      	ldr	r1, [pc, #392]	; (801ed90 <tcp_output_segment+0x1a4>)
 801ec06:	4863      	ldr	r0, [pc, #396]	; (801ed94 <tcp_output_segment+0x1a8>)
 801ec08:	f005 fb42 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 801ec0c:	68bb      	ldr	r3, [r7, #8]
 801ec0e:	2b00      	cmp	r3, #0
 801ec10:	d106      	bne.n	801ec20 <tcp_output_segment+0x34>
 801ec12:	4b5e      	ldr	r3, [pc, #376]	; (801ed8c <tcp_output_segment+0x1a0>)
 801ec14:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801ec18:	495f      	ldr	r1, [pc, #380]	; (801ed98 <tcp_output_segment+0x1ac>)
 801ec1a:	485e      	ldr	r0, [pc, #376]	; (801ed94 <tcp_output_segment+0x1a8>)
 801ec1c:	f005 fb38 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	2b00      	cmp	r3, #0
 801ec24:	d106      	bne.n	801ec34 <tcp_output_segment+0x48>
 801ec26:	4b59      	ldr	r3, [pc, #356]	; (801ed8c <tcp_output_segment+0x1a0>)
 801ec28:	f240 52ba 	movw	r2, #1466	; 0x5ba
 801ec2c:	495b      	ldr	r1, [pc, #364]	; (801ed9c <tcp_output_segment+0x1b0>)
 801ec2e:	4859      	ldr	r0, [pc, #356]	; (801ed94 <tcp_output_segment+0x1a8>)
 801ec30:	f005 fb2e 	bl	8024290 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 801ec34:	68f8      	ldr	r0, [r7, #12]
 801ec36:	f7ff ffb9 	bl	801ebac <tcp_output_segment_busy>
 801ec3a:	4603      	mov	r3, r0
 801ec3c:	2b00      	cmp	r3, #0
 801ec3e:	d001      	beq.n	801ec44 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 801ec40:	2300      	movs	r3, #0
 801ec42:	e09f      	b.n	801ed84 <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 801ec44:	68bb      	ldr	r3, [r7, #8]
 801ec46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801ec48:	68fb      	ldr	r3, [r7, #12]
 801ec4a:	68dc      	ldr	r4, [r3, #12]
 801ec4c:	4610      	mov	r0, r2
 801ec4e:	f7f8 fd0a 	bl	8017666 <lwip_htonl>
 801ec52:	4603      	mov	r3, r0
 801ec54:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801ec56:	68bb      	ldr	r3, [r7, #8]
 801ec58:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801ec5a:	68fb      	ldr	r3, [r7, #12]
 801ec5c:	68dc      	ldr	r4, [r3, #12]
 801ec5e:	4610      	mov	r0, r2
 801ec60:	f7f8 fcec 	bl	801763c <lwip_htons>
 801ec64:	4603      	mov	r3, r0
 801ec66:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801ec68:	68bb      	ldr	r3, [r7, #8]
 801ec6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec6c:	68ba      	ldr	r2, [r7, #8]
 801ec6e:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801ec70:	441a      	add	r2, r3
 801ec72:	68bb      	ldr	r3, [r7, #8]
 801ec74:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801ec76:	68fb      	ldr	r3, [r7, #12]
 801ec78:	68db      	ldr	r3, [r3, #12]
 801ec7a:	3314      	adds	r3, #20
 801ec7c:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 801ec7e:	68fb      	ldr	r3, [r7, #12]
 801ec80:	7a9b      	ldrb	r3, [r3, #10]
 801ec82:	f003 0301 	and.w	r3, r3, #1
 801ec86:	2b00      	cmp	r3, #0
 801ec88:	d015      	beq.n	801ecb6 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 801ec8a:	68bb      	ldr	r3, [r7, #8]
 801ec8c:	3304      	adds	r3, #4
 801ec8e:	461a      	mov	r2, r3
 801ec90:	6879      	ldr	r1, [r7, #4]
 801ec92:	f44f 7006 	mov.w	r0, #536	; 0x218
 801ec96:	f7fc fa33 	bl	801b100 <tcp_eff_send_mss_netif>
 801ec9a:	4603      	mov	r3, r0
 801ec9c:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 801ec9e:	8b7b      	ldrh	r3, [r7, #26]
 801eca0:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801eca4:	4618      	mov	r0, r3
 801eca6:	f7f8 fcde 	bl	8017666 <lwip_htonl>
 801ecaa:	4602      	mov	r2, r0
 801ecac:	69fb      	ldr	r3, [r7, #28]
 801ecae:	601a      	str	r2, [r3, #0]
    opts += 1;
 801ecb0:	69fb      	ldr	r3, [r7, #28]
 801ecb2:	3304      	adds	r3, #4
 801ecb4:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801ecb6:	68bb      	ldr	r3, [r7, #8]
 801ecb8:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 801ecbc:	2b00      	cmp	r3, #0
 801ecbe:	da02      	bge.n	801ecc6 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 801ecc0:	68bb      	ldr	r3, [r7, #8]
 801ecc2:	2200      	movs	r2, #0
 801ecc4:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801ecc6:	68bb      	ldr	r3, [r7, #8]
 801ecc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801ecca:	2b00      	cmp	r3, #0
 801eccc:	d10c      	bne.n	801ece8 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 801ecce:	4b34      	ldr	r3, [pc, #208]	; (801eda0 <tcp_output_segment+0x1b4>)
 801ecd0:	681a      	ldr	r2, [r3, #0]
 801ecd2:	68bb      	ldr	r3, [r7, #8]
 801ecd4:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801ecd6:	68fb      	ldr	r3, [r7, #12]
 801ecd8:	68db      	ldr	r3, [r3, #12]
 801ecda:	685b      	ldr	r3, [r3, #4]
 801ecdc:	4618      	mov	r0, r3
 801ecde:	f7f8 fcc2 	bl	8017666 <lwip_htonl>
 801ece2:	4602      	mov	r2, r0
 801ece4:	68bb      	ldr	r3, [r7, #8]
 801ece6:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801ece8:	68fb      	ldr	r3, [r7, #12]
 801ecea:	68da      	ldr	r2, [r3, #12]
 801ecec:	68fb      	ldr	r3, [r7, #12]
 801ecee:	685b      	ldr	r3, [r3, #4]
 801ecf0:	685b      	ldr	r3, [r3, #4]
 801ecf2:	1ad3      	subs	r3, r2, r3
 801ecf4:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801ecf6:	68fb      	ldr	r3, [r7, #12]
 801ecf8:	685b      	ldr	r3, [r3, #4]
 801ecfa:	8959      	ldrh	r1, [r3, #10]
 801ecfc:	68fb      	ldr	r3, [r7, #12]
 801ecfe:	685b      	ldr	r3, [r3, #4]
 801ed00:	8b3a      	ldrh	r2, [r7, #24]
 801ed02:	1a8a      	subs	r2, r1, r2
 801ed04:	b292      	uxth	r2, r2
 801ed06:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801ed08:	68fb      	ldr	r3, [r7, #12]
 801ed0a:	685b      	ldr	r3, [r3, #4]
 801ed0c:	8919      	ldrh	r1, [r3, #8]
 801ed0e:	68fb      	ldr	r3, [r7, #12]
 801ed10:	685b      	ldr	r3, [r3, #4]
 801ed12:	8b3a      	ldrh	r2, [r7, #24]
 801ed14:	1a8a      	subs	r2, r1, r2
 801ed16:	b292      	uxth	r2, r2
 801ed18:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801ed1a:	68fb      	ldr	r3, [r7, #12]
 801ed1c:	685b      	ldr	r3, [r3, #4]
 801ed1e:	68fa      	ldr	r2, [r7, #12]
 801ed20:	68d2      	ldr	r2, [r2, #12]
 801ed22:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 801ed24:	68fb      	ldr	r3, [r7, #12]
 801ed26:	68db      	ldr	r3, [r3, #12]
 801ed28:	2200      	movs	r2, #0
 801ed2a:	741a      	strb	r2, [r3, #16]
 801ed2c:	2200      	movs	r2, #0
 801ed2e:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 801ed30:	68fb      	ldr	r3, [r7, #12]
 801ed32:	68db      	ldr	r3, [r3, #12]
 801ed34:	f103 0214 	add.w	r2, r3, #20
 801ed38:	68fb      	ldr	r3, [r7, #12]
 801ed3a:	7a9b      	ldrb	r3, [r3, #10]
 801ed3c:	009b      	lsls	r3, r3, #2
 801ed3e:	f003 0304 	and.w	r3, r3, #4
 801ed42:	4413      	add	r3, r2
 801ed44:	69fa      	ldr	r2, [r7, #28]
 801ed46:	429a      	cmp	r2, r3
 801ed48:	d006      	beq.n	801ed58 <tcp_output_segment+0x16c>
 801ed4a:	4b10      	ldr	r3, [pc, #64]	; (801ed8c <tcp_output_segment+0x1a0>)
 801ed4c:	f240 621c 	movw	r2, #1564	; 0x61c
 801ed50:	4914      	ldr	r1, [pc, #80]	; (801eda4 <tcp_output_segment+0x1b8>)
 801ed52:	4810      	ldr	r0, [pc, #64]	; (801ed94 <tcp_output_segment+0x1a8>)
 801ed54:	f005 fa9c 	bl	8024290 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 801ed58:	68fb      	ldr	r3, [r7, #12]
 801ed5a:	6858      	ldr	r0, [r3, #4]
 801ed5c:	68b9      	ldr	r1, [r7, #8]
 801ed5e:	68bb      	ldr	r3, [r7, #8]
 801ed60:	1d1c      	adds	r4, r3, #4
 801ed62:	68bb      	ldr	r3, [r7, #8]
 801ed64:	7add      	ldrb	r5, [r3, #11]
 801ed66:	68bb      	ldr	r3, [r7, #8]
 801ed68:	7a9b      	ldrb	r3, [r3, #10]
 801ed6a:	687a      	ldr	r2, [r7, #4]
 801ed6c:	9202      	str	r2, [sp, #8]
 801ed6e:	2206      	movs	r2, #6
 801ed70:	9201      	str	r2, [sp, #4]
 801ed72:	9300      	str	r3, [sp, #0]
 801ed74:	462b      	mov	r3, r5
 801ed76:	4622      	mov	r2, r4
 801ed78:	f002 fe04 	bl	8021984 <ip4_output_if>
 801ed7c:	4603      	mov	r3, r0
 801ed7e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 801ed80:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801ed84:	4618      	mov	r0, r3
 801ed86:	3720      	adds	r7, #32
 801ed88:	46bd      	mov	sp, r7
 801ed8a:	bdb0      	pop	{r4, r5, r7, pc}
 801ed8c:	080279d4 	.word	0x080279d4
 801ed90:	08027f98 	.word	0x08027f98
 801ed94:	08027a28 	.word	0x08027a28
 801ed98:	08027fb8 	.word	0x08027fb8
 801ed9c:	08027fd8 	.word	0x08027fd8
 801eda0:	2000bfbc 	.word	0x2000bfbc
 801eda4:	08027ffc 	.word	0x08027ffc

0801eda8 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 801eda8:	b5b0      	push	{r4, r5, r7, lr}
 801edaa:	b084      	sub	sp, #16
 801edac:	af00      	add	r7, sp, #0
 801edae:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 801edb0:	687b      	ldr	r3, [r7, #4]
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	d106      	bne.n	801edc4 <tcp_rexmit_rto_prepare+0x1c>
 801edb6:	4b31      	ldr	r3, [pc, #196]	; (801ee7c <tcp_rexmit_rto_prepare+0xd4>)
 801edb8:	f240 6263 	movw	r2, #1635	; 0x663
 801edbc:	4930      	ldr	r1, [pc, #192]	; (801ee80 <tcp_rexmit_rto_prepare+0xd8>)
 801edbe:	4831      	ldr	r0, [pc, #196]	; (801ee84 <tcp_rexmit_rto_prepare+0xdc>)
 801edc0:	f005 fa66 	bl	8024290 <iprintf>

  if (pcb->unacked == NULL) {
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801edc8:	2b00      	cmp	r3, #0
 801edca:	d102      	bne.n	801edd2 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801edcc:	f06f 0305 	mvn.w	r3, #5
 801edd0:	e050      	b.n	801ee74 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801edd6:	60fb      	str	r3, [r7, #12]
 801edd8:	e00b      	b.n	801edf2 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801edda:	68f8      	ldr	r0, [r7, #12]
 801eddc:	f7ff fee6 	bl	801ebac <tcp_output_segment_busy>
 801ede0:	4603      	mov	r3, r0
 801ede2:	2b00      	cmp	r3, #0
 801ede4:	d002      	beq.n	801edec <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801ede6:	f06f 0305 	mvn.w	r3, #5
 801edea:	e043      	b.n	801ee74 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801edec:	68fb      	ldr	r3, [r7, #12]
 801edee:	681b      	ldr	r3, [r3, #0]
 801edf0:	60fb      	str	r3, [r7, #12]
 801edf2:	68fb      	ldr	r3, [r7, #12]
 801edf4:	681b      	ldr	r3, [r3, #0]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d1ef      	bne.n	801edda <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801edfa:	68f8      	ldr	r0, [r7, #12]
 801edfc:	f7ff fed6 	bl	801ebac <tcp_output_segment_busy>
 801ee00:	4603      	mov	r3, r0
 801ee02:	2b00      	cmp	r3, #0
 801ee04:	d002      	beq.n	801ee0c <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801ee06:	f06f 0305 	mvn.w	r3, #5
 801ee0a:	e033      	b.n	801ee74 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 801ee0c:	687b      	ldr	r3, [r7, #4]
 801ee0e:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 801ee10:	68fb      	ldr	r3, [r7, #12]
 801ee12:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801ee14:	687b      	ldr	r3, [r7, #4]
 801ee16:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 801ee1c:	687b      	ldr	r3, [r7, #4]
 801ee1e:	2200      	movs	r2, #0
 801ee20:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801ee22:	687b      	ldr	r3, [r7, #4]
 801ee24:	8b5b      	ldrh	r3, [r3, #26]
 801ee26:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 801ee2a:	b29a      	uxth	r2, r3
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 801ee30:	68fb      	ldr	r3, [r7, #12]
 801ee32:	68db      	ldr	r3, [r3, #12]
 801ee34:	685b      	ldr	r3, [r3, #4]
 801ee36:	4618      	mov	r0, r3
 801ee38:	f7f8 fc15 	bl	8017666 <lwip_htonl>
 801ee3c:	4604      	mov	r4, r0
 801ee3e:	68fb      	ldr	r3, [r7, #12]
 801ee40:	891b      	ldrh	r3, [r3, #8]
 801ee42:	461d      	mov	r5, r3
 801ee44:	68fb      	ldr	r3, [r7, #12]
 801ee46:	68db      	ldr	r3, [r3, #12]
 801ee48:	899b      	ldrh	r3, [r3, #12]
 801ee4a:	b29b      	uxth	r3, r3
 801ee4c:	4618      	mov	r0, r3
 801ee4e:	f7f8 fbf5 	bl	801763c <lwip_htons>
 801ee52:	4603      	mov	r3, r0
 801ee54:	b2db      	uxtb	r3, r3
 801ee56:	f003 0303 	and.w	r3, r3, #3
 801ee5a:	2b00      	cmp	r3, #0
 801ee5c:	d001      	beq.n	801ee62 <tcp_rexmit_rto_prepare+0xba>
 801ee5e:	2301      	movs	r3, #1
 801ee60:	e000      	b.n	801ee64 <tcp_rexmit_rto_prepare+0xbc>
 801ee62:	2300      	movs	r3, #0
 801ee64:	442b      	add	r3, r5
 801ee66:	18e2      	adds	r2, r4, r3
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	2200      	movs	r2, #0
 801ee70:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801ee72:	2300      	movs	r3, #0
}
 801ee74:	4618      	mov	r0, r3
 801ee76:	3710      	adds	r7, #16
 801ee78:	46bd      	mov	sp, r7
 801ee7a:	bdb0      	pop	{r4, r5, r7, pc}
 801ee7c:	080279d4 	.word	0x080279d4
 801ee80:	08028010 	.word	0x08028010
 801ee84:	08027a28 	.word	0x08027a28

0801ee88 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 801ee88:	b580      	push	{r7, lr}
 801ee8a:	b082      	sub	sp, #8
 801ee8c:	af00      	add	r7, sp, #0
 801ee8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 801ee90:	687b      	ldr	r3, [r7, #4]
 801ee92:	2b00      	cmp	r3, #0
 801ee94:	d106      	bne.n	801eea4 <tcp_rexmit_rto_commit+0x1c>
 801ee96:	4b0d      	ldr	r3, [pc, #52]	; (801eecc <tcp_rexmit_rto_commit+0x44>)
 801ee98:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801ee9c:	490c      	ldr	r1, [pc, #48]	; (801eed0 <tcp_rexmit_rto_commit+0x48>)
 801ee9e:	480d      	ldr	r0, [pc, #52]	; (801eed4 <tcp_rexmit_rto_commit+0x4c>)
 801eea0:	f005 f9f6 	bl	8024290 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eeaa:	2bff      	cmp	r3, #255	; 0xff
 801eeac:	d007      	beq.n	801eebe <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801eeb4:	3301      	adds	r3, #1
 801eeb6:	b2da      	uxtb	r2, r3
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801eebe:	6878      	ldr	r0, [r7, #4]
 801eec0:	f7ff fc80 	bl	801e7c4 <tcp_output>
}
 801eec4:	bf00      	nop
 801eec6:	3708      	adds	r7, #8
 801eec8:	46bd      	mov	sp, r7
 801eeca:	bd80      	pop	{r7, pc}
 801eecc:	080279d4 	.word	0x080279d4
 801eed0:	08028034 	.word	0x08028034
 801eed4:	08027a28 	.word	0x08027a28

0801eed8 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 801eed8:	b580      	push	{r7, lr}
 801eeda:	b082      	sub	sp, #8
 801eedc:	af00      	add	r7, sp, #0
 801eede:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 801eee0:	687b      	ldr	r3, [r7, #4]
 801eee2:	2b00      	cmp	r3, #0
 801eee4:	d106      	bne.n	801eef4 <tcp_rexmit_rto+0x1c>
 801eee6:	4b0a      	ldr	r3, [pc, #40]	; (801ef10 <tcp_rexmit_rto+0x38>)
 801eee8:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801eeec:	4909      	ldr	r1, [pc, #36]	; (801ef14 <tcp_rexmit_rto+0x3c>)
 801eeee:	480a      	ldr	r0, [pc, #40]	; (801ef18 <tcp_rexmit_rto+0x40>)
 801eef0:	f005 f9ce 	bl	8024290 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801eef4:	6878      	ldr	r0, [r7, #4]
 801eef6:	f7ff ff57 	bl	801eda8 <tcp_rexmit_rto_prepare>
 801eefa:	4603      	mov	r3, r0
 801eefc:	2b00      	cmp	r3, #0
 801eefe:	d102      	bne.n	801ef06 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 801ef00:	6878      	ldr	r0, [r7, #4]
 801ef02:	f7ff ffc1 	bl	801ee88 <tcp_rexmit_rto_commit>
  }
}
 801ef06:	bf00      	nop
 801ef08:	3708      	adds	r7, #8
 801ef0a:	46bd      	mov	sp, r7
 801ef0c:	bd80      	pop	{r7, pc}
 801ef0e:	bf00      	nop
 801ef10:	080279d4 	.word	0x080279d4
 801ef14:	08028058 	.word	0x08028058
 801ef18:	08027a28 	.word	0x08027a28

0801ef1c <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 801ef1c:	b590      	push	{r4, r7, lr}
 801ef1e:	b085      	sub	sp, #20
 801ef20:	af00      	add	r7, sp, #0
 801ef22:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801ef24:	687b      	ldr	r3, [r7, #4]
 801ef26:	2b00      	cmp	r3, #0
 801ef28:	d106      	bne.n	801ef38 <tcp_rexmit+0x1c>
 801ef2a:	4b2f      	ldr	r3, [pc, #188]	; (801efe8 <tcp_rexmit+0xcc>)
 801ef2c:	f240 62c1 	movw	r2, #1729	; 0x6c1
 801ef30:	492e      	ldr	r1, [pc, #184]	; (801efec <tcp_rexmit+0xd0>)
 801ef32:	482f      	ldr	r0, [pc, #188]	; (801eff0 <tcp_rexmit+0xd4>)
 801ef34:	f005 f9ac 	bl	8024290 <iprintf>

  if (pcb->unacked == NULL) {
 801ef38:	687b      	ldr	r3, [r7, #4]
 801ef3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef3c:	2b00      	cmp	r3, #0
 801ef3e:	d102      	bne.n	801ef46 <tcp_rexmit+0x2a>
    return ERR_VAL;
 801ef40:	f06f 0305 	mvn.w	r3, #5
 801ef44:	e04c      	b.n	801efe0 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801ef46:	687b      	ldr	r3, [r7, #4]
 801ef48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ef4a:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 801ef4c:	68b8      	ldr	r0, [r7, #8]
 801ef4e:	f7ff fe2d 	bl	801ebac <tcp_output_segment_busy>
 801ef52:	4603      	mov	r3, r0
 801ef54:	2b00      	cmp	r3, #0
 801ef56:	d002      	beq.n	801ef5e <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 801ef58:	f06f 0305 	mvn.w	r3, #5
 801ef5c:	e040      	b.n	801efe0 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 801ef5e:	68bb      	ldr	r3, [r7, #8]
 801ef60:	681a      	ldr	r2, [r3, #0]
 801ef62:	687b      	ldr	r3, [r7, #4]
 801ef64:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801ef66:	687b      	ldr	r3, [r7, #4]
 801ef68:	336c      	adds	r3, #108	; 0x6c
 801ef6a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ef6c:	e002      	b.n	801ef74 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801ef6e:	68fb      	ldr	r3, [r7, #12]
 801ef70:	681b      	ldr	r3, [r3, #0]
 801ef72:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	2b00      	cmp	r3, #0
 801ef7a:	d011      	beq.n	801efa0 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801ef7c:	68fb      	ldr	r3, [r7, #12]
 801ef7e:	681b      	ldr	r3, [r3, #0]
 801ef80:	68db      	ldr	r3, [r3, #12]
 801ef82:	685b      	ldr	r3, [r3, #4]
 801ef84:	4618      	mov	r0, r3
 801ef86:	f7f8 fb6e 	bl	8017666 <lwip_htonl>
 801ef8a:	4604      	mov	r4, r0
 801ef8c:	68bb      	ldr	r3, [r7, #8]
 801ef8e:	68db      	ldr	r3, [r3, #12]
 801ef90:	685b      	ldr	r3, [r3, #4]
 801ef92:	4618      	mov	r0, r3
 801ef94:	f7f8 fb67 	bl	8017666 <lwip_htonl>
 801ef98:	4603      	mov	r3, r0
 801ef9a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801ef9c:	2b00      	cmp	r3, #0
 801ef9e:	dbe6      	blt.n	801ef6e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	681a      	ldr	r2, [r3, #0]
 801efa4:	68bb      	ldr	r3, [r7, #8]
 801efa6:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 801efa8:	68fb      	ldr	r3, [r7, #12]
 801efaa:	68ba      	ldr	r2, [r7, #8]
 801efac:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801efae:	68bb      	ldr	r3, [r7, #8]
 801efb0:	681b      	ldr	r3, [r3, #0]
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d103      	bne.n	801efbe <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	2200      	movs	r2, #0
 801efba:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801efbe:	687b      	ldr	r3, [r7, #4]
 801efc0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801efc4:	2bff      	cmp	r3, #255	; 0xff
 801efc6:	d007      	beq.n	801efd8 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 801efc8:	687b      	ldr	r3, [r7, #4]
 801efca:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801efce:	3301      	adds	r3, #1
 801efd0:	b2da      	uxtb	r2, r3
 801efd2:	687b      	ldr	r3, [r7, #4]
 801efd4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	2200      	movs	r2, #0
 801efdc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801efde:	2300      	movs	r3, #0
}
 801efe0:	4618      	mov	r0, r3
 801efe2:	3714      	adds	r7, #20
 801efe4:	46bd      	mov	sp, r7
 801efe6:	bd90      	pop	{r4, r7, pc}
 801efe8:	080279d4 	.word	0x080279d4
 801efec:	08028074 	.word	0x08028074
 801eff0:	08027a28 	.word	0x08027a28

0801eff4 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801eff4:	b580      	push	{r7, lr}
 801eff6:	b082      	sub	sp, #8
 801eff8:	af00      	add	r7, sp, #0
 801effa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801effc:	687b      	ldr	r3, [r7, #4]
 801effe:	2b00      	cmp	r3, #0
 801f000:	d106      	bne.n	801f010 <tcp_rexmit_fast+0x1c>
 801f002:	4b2a      	ldr	r3, [pc, #168]	; (801f0ac <tcp_rexmit_fast+0xb8>)
 801f004:	f240 62f9 	movw	r2, #1785	; 0x6f9
 801f008:	4929      	ldr	r1, [pc, #164]	; (801f0b0 <tcp_rexmit_fast+0xbc>)
 801f00a:	482a      	ldr	r0, [pc, #168]	; (801f0b4 <tcp_rexmit_fast+0xc0>)
 801f00c:	f005 f940 	bl	8024290 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 801f010:	687b      	ldr	r3, [r7, #4]
 801f012:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801f014:	2b00      	cmp	r3, #0
 801f016:	d045      	beq.n	801f0a4 <tcp_rexmit_fast+0xb0>
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	8b5b      	ldrh	r3, [r3, #26]
 801f01c:	f003 0304 	and.w	r3, r3, #4
 801f020:	2b00      	cmp	r3, #0
 801f022:	d13f      	bne.n	801f0a4 <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801f024:	6878      	ldr	r0, [r7, #4]
 801f026:	f7ff ff79 	bl	801ef1c <tcp_rexmit>
 801f02a:	4603      	mov	r3, r0
 801f02c:	2b00      	cmp	r3, #0
 801f02e:	d139      	bne.n	801f0a4 <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 801f030:	687b      	ldr	r3, [r7, #4]
 801f032:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801f036:	687b      	ldr	r3, [r7, #4]
 801f038:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801f03c:	4293      	cmp	r3, r2
 801f03e:	bf28      	it	cs
 801f040:	4613      	movcs	r3, r2
 801f042:	b29b      	uxth	r3, r3
 801f044:	2b00      	cmp	r3, #0
 801f046:	da00      	bge.n	801f04a <tcp_rexmit_fast+0x56>
 801f048:	3301      	adds	r3, #1
 801f04a:	105b      	asrs	r3, r3, #1
 801f04c:	b29a      	uxth	r2, r3
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 801f05a:	461a      	mov	r2, r3
 801f05c:	687b      	ldr	r3, [r7, #4]
 801f05e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f060:	005b      	lsls	r3, r3, #1
 801f062:	429a      	cmp	r2, r3
 801f064:	d206      	bcs.n	801f074 <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801f066:	687b      	ldr	r3, [r7, #4]
 801f068:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f06a:	005b      	lsls	r3, r3, #1
 801f06c:	b29a      	uxth	r2, r3
 801f06e:	687b      	ldr	r3, [r7, #4]
 801f070:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 801f07a:	687b      	ldr	r3, [r7, #4]
 801f07c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801f07e:	4619      	mov	r1, r3
 801f080:	0049      	lsls	r1, r1, #1
 801f082:	440b      	add	r3, r1
 801f084:	b29b      	uxth	r3, r3
 801f086:	4413      	add	r3, r2
 801f088:	b29a      	uxth	r2, r3
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	8b5b      	ldrh	r3, [r3, #26]
 801f094:	f043 0304 	orr.w	r3, r3, #4
 801f098:	b29a      	uxth	r2, r3
 801f09a:	687b      	ldr	r3, [r7, #4]
 801f09c:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	2200      	movs	r2, #0
 801f0a2:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801f0a4:	bf00      	nop
 801f0a6:	3708      	adds	r7, #8
 801f0a8:	46bd      	mov	sp, r7
 801f0aa:	bd80      	pop	{r7, pc}
 801f0ac:	080279d4 	.word	0x080279d4
 801f0b0:	0802808c 	.word	0x0802808c
 801f0b4:	08027a28 	.word	0x08027a28

0801f0b8 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 801f0b8:	b580      	push	{r7, lr}
 801f0ba:	b086      	sub	sp, #24
 801f0bc:	af00      	add	r7, sp, #0
 801f0be:	60f8      	str	r0, [r7, #12]
 801f0c0:	607b      	str	r3, [r7, #4]
 801f0c2:	460b      	mov	r3, r1
 801f0c4:	817b      	strh	r3, [r7, #10]
 801f0c6:	4613      	mov	r3, r2
 801f0c8:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801f0ca:	897a      	ldrh	r2, [r7, #10]
 801f0cc:	893b      	ldrh	r3, [r7, #8]
 801f0ce:	4413      	add	r3, r2
 801f0d0:	b29b      	uxth	r3, r3
 801f0d2:	3314      	adds	r3, #20
 801f0d4:	b29b      	uxth	r3, r3
 801f0d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 801f0da:	4619      	mov	r1, r3
 801f0dc:	2022      	movs	r0, #34	; 0x22
 801f0de:	f7f9 fbbb 	bl	8018858 <pbuf_alloc>
 801f0e2:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801f0e4:	697b      	ldr	r3, [r7, #20]
 801f0e6:	2b00      	cmp	r3, #0
 801f0e8:	d04d      	beq.n	801f186 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801f0ea:	897b      	ldrh	r3, [r7, #10]
 801f0ec:	3313      	adds	r3, #19
 801f0ee:	697a      	ldr	r2, [r7, #20]
 801f0f0:	8952      	ldrh	r2, [r2, #10]
 801f0f2:	4293      	cmp	r3, r2
 801f0f4:	db06      	blt.n	801f104 <tcp_output_alloc_header_common+0x4c>
 801f0f6:	4b26      	ldr	r3, [pc, #152]	; (801f190 <tcp_output_alloc_header_common+0xd8>)
 801f0f8:	f240 7223 	movw	r2, #1827	; 0x723
 801f0fc:	4925      	ldr	r1, [pc, #148]	; (801f194 <tcp_output_alloc_header_common+0xdc>)
 801f0fe:	4826      	ldr	r0, [pc, #152]	; (801f198 <tcp_output_alloc_header_common+0xe0>)
 801f100:	f005 f8c6 	bl	8024290 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801f104:	697b      	ldr	r3, [r7, #20]
 801f106:	685b      	ldr	r3, [r3, #4]
 801f108:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 801f10a:	8c3b      	ldrh	r3, [r7, #32]
 801f10c:	4618      	mov	r0, r3
 801f10e:	f7f8 fa95 	bl	801763c <lwip_htons>
 801f112:	4603      	mov	r3, r0
 801f114:	461a      	mov	r2, r3
 801f116:	693b      	ldr	r3, [r7, #16]
 801f118:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 801f11a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801f11c:	4618      	mov	r0, r3
 801f11e:	f7f8 fa8d 	bl	801763c <lwip_htons>
 801f122:	4603      	mov	r3, r0
 801f124:	461a      	mov	r2, r3
 801f126:	693b      	ldr	r3, [r7, #16]
 801f128:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 801f12a:	693b      	ldr	r3, [r7, #16]
 801f12c:	687a      	ldr	r2, [r7, #4]
 801f12e:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 801f130:	68f8      	ldr	r0, [r7, #12]
 801f132:	f7f8 fa98 	bl	8017666 <lwip_htonl>
 801f136:	4602      	mov	r2, r0
 801f138:	693b      	ldr	r3, [r7, #16]
 801f13a:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 801f13c:	897b      	ldrh	r3, [r7, #10]
 801f13e:	089b      	lsrs	r3, r3, #2
 801f140:	b29b      	uxth	r3, r3
 801f142:	3305      	adds	r3, #5
 801f144:	b29b      	uxth	r3, r3
 801f146:	031b      	lsls	r3, r3, #12
 801f148:	b29a      	uxth	r2, r3
 801f14a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 801f14e:	b29b      	uxth	r3, r3
 801f150:	4313      	orrs	r3, r2
 801f152:	b29b      	uxth	r3, r3
 801f154:	4618      	mov	r0, r3
 801f156:	f7f8 fa71 	bl	801763c <lwip_htons>
 801f15a:	4603      	mov	r3, r0
 801f15c:	461a      	mov	r2, r3
 801f15e:	693b      	ldr	r3, [r7, #16]
 801f160:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801f162:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f164:	4618      	mov	r0, r3
 801f166:	f7f8 fa69 	bl	801763c <lwip_htons>
 801f16a:	4603      	mov	r3, r0
 801f16c:	461a      	mov	r2, r3
 801f16e:	693b      	ldr	r3, [r7, #16]
 801f170:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801f172:	693b      	ldr	r3, [r7, #16]
 801f174:	2200      	movs	r2, #0
 801f176:	741a      	strb	r2, [r3, #16]
 801f178:	2200      	movs	r2, #0
 801f17a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801f17c:	693b      	ldr	r3, [r7, #16]
 801f17e:	2200      	movs	r2, #0
 801f180:	749a      	strb	r2, [r3, #18]
 801f182:	2200      	movs	r2, #0
 801f184:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801f186:	697b      	ldr	r3, [r7, #20]
}
 801f188:	4618      	mov	r0, r3
 801f18a:	3718      	adds	r7, #24
 801f18c:	46bd      	mov	sp, r7
 801f18e:	bd80      	pop	{r7, pc}
 801f190:	080279d4 	.word	0x080279d4
 801f194:	080280ac 	.word	0x080280ac
 801f198:	08027a28 	.word	0x08027a28

0801f19c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801f19c:	b5b0      	push	{r4, r5, r7, lr}
 801f19e:	b08a      	sub	sp, #40	; 0x28
 801f1a0:	af04      	add	r7, sp, #16
 801f1a2:	60f8      	str	r0, [r7, #12]
 801f1a4:	607b      	str	r3, [r7, #4]
 801f1a6:	460b      	mov	r3, r1
 801f1a8:	817b      	strh	r3, [r7, #10]
 801f1aa:	4613      	mov	r3, r2
 801f1ac:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801f1ae:	68fb      	ldr	r3, [r7, #12]
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d106      	bne.n	801f1c2 <tcp_output_alloc_header+0x26>
 801f1b4:	4b15      	ldr	r3, [pc, #84]	; (801f20c <tcp_output_alloc_header+0x70>)
 801f1b6:	f240 7242 	movw	r2, #1858	; 0x742
 801f1ba:	4915      	ldr	r1, [pc, #84]	; (801f210 <tcp_output_alloc_header+0x74>)
 801f1bc:	4815      	ldr	r0, [pc, #84]	; (801f214 <tcp_output_alloc_header+0x78>)
 801f1be:	f005 f867 	bl	8024290 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801f1c2:	68fb      	ldr	r3, [r7, #12]
 801f1c4:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801f1c6:	68fb      	ldr	r3, [r7, #12]
 801f1c8:	8adb      	ldrh	r3, [r3, #22]
 801f1ca:	68fa      	ldr	r2, [r7, #12]
 801f1cc:	8b12      	ldrh	r2, [r2, #24]
 801f1ce:	68f9      	ldr	r1, [r7, #12]
 801f1d0:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801f1d2:	893d      	ldrh	r5, [r7, #8]
 801f1d4:	897c      	ldrh	r4, [r7, #10]
 801f1d6:	9103      	str	r1, [sp, #12]
 801f1d8:	2110      	movs	r1, #16
 801f1da:	9102      	str	r1, [sp, #8]
 801f1dc:	9201      	str	r2, [sp, #4]
 801f1de:	9300      	str	r3, [sp, #0]
 801f1e0:	687b      	ldr	r3, [r7, #4]
 801f1e2:	462a      	mov	r2, r5
 801f1e4:	4621      	mov	r1, r4
 801f1e6:	f7ff ff67 	bl	801f0b8 <tcp_output_alloc_header_common>
 801f1ea:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801f1ec:	697b      	ldr	r3, [r7, #20]
 801f1ee:	2b00      	cmp	r3, #0
 801f1f0:	d006      	beq.n	801f200 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801f1f2:	68fb      	ldr	r3, [r7, #12]
 801f1f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801f1f6:	68fa      	ldr	r2, [r7, #12]
 801f1f8:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801f1fa:	441a      	add	r2, r3
 801f1fc:	68fb      	ldr	r3, [r7, #12]
 801f1fe:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 801f200:	697b      	ldr	r3, [r7, #20]
}
 801f202:	4618      	mov	r0, r3
 801f204:	3718      	adds	r7, #24
 801f206:	46bd      	mov	sp, r7
 801f208:	bdb0      	pop	{r4, r5, r7, pc}
 801f20a:	bf00      	nop
 801f20c:	080279d4 	.word	0x080279d4
 801f210:	080280dc 	.word	0x080280dc
 801f214:	08027a28 	.word	0x08027a28

0801f218 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 801f218:	b580      	push	{r7, lr}
 801f21a:	b088      	sub	sp, #32
 801f21c:	af00      	add	r7, sp, #0
 801f21e:	60f8      	str	r0, [r7, #12]
 801f220:	60b9      	str	r1, [r7, #8]
 801f222:	4611      	mov	r1, r2
 801f224:	461a      	mov	r2, r3
 801f226:	460b      	mov	r3, r1
 801f228:	71fb      	strb	r3, [r7, #7]
 801f22a:	4613      	mov	r3, r2
 801f22c:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 801f22e:	2300      	movs	r3, #0
 801f230:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801f232:	68bb      	ldr	r3, [r7, #8]
 801f234:	2b00      	cmp	r3, #0
 801f236:	d106      	bne.n	801f246 <tcp_output_fill_options+0x2e>
 801f238:	4b13      	ldr	r3, [pc, #76]	; (801f288 <tcp_output_fill_options+0x70>)
 801f23a:	f240 7256 	movw	r2, #1878	; 0x756
 801f23e:	4913      	ldr	r1, [pc, #76]	; (801f28c <tcp_output_fill_options+0x74>)
 801f240:	4813      	ldr	r0, [pc, #76]	; (801f290 <tcp_output_fill_options+0x78>)
 801f242:	f005 f825 	bl	8024290 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801f246:	68bb      	ldr	r3, [r7, #8]
 801f248:	685b      	ldr	r3, [r3, #4]
 801f24a:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 801f24c:	69bb      	ldr	r3, [r7, #24]
 801f24e:	3314      	adds	r3, #20
 801f250:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801f252:	69bb      	ldr	r3, [r7, #24]
 801f254:	f103 0214 	add.w	r2, r3, #20
 801f258:	8bfb      	ldrh	r3, [r7, #30]
 801f25a:	009b      	lsls	r3, r3, #2
 801f25c:	4619      	mov	r1, r3
 801f25e:	79fb      	ldrb	r3, [r7, #7]
 801f260:	009b      	lsls	r3, r3, #2
 801f262:	f003 0304 	and.w	r3, r3, #4
 801f266:	440b      	add	r3, r1
 801f268:	4413      	add	r3, r2
 801f26a:	697a      	ldr	r2, [r7, #20]
 801f26c:	429a      	cmp	r2, r3
 801f26e:	d006      	beq.n	801f27e <tcp_output_fill_options+0x66>
 801f270:	4b05      	ldr	r3, [pc, #20]	; (801f288 <tcp_output_fill_options+0x70>)
 801f272:	f240 7275 	movw	r2, #1909	; 0x775
 801f276:	4907      	ldr	r1, [pc, #28]	; (801f294 <tcp_output_fill_options+0x7c>)
 801f278:	4805      	ldr	r0, [pc, #20]	; (801f290 <tcp_output_fill_options+0x78>)
 801f27a:	f005 f809 	bl	8024290 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801f27e:	bf00      	nop
 801f280:	3720      	adds	r7, #32
 801f282:	46bd      	mov	sp, r7
 801f284:	bd80      	pop	{r7, pc}
 801f286:	bf00      	nop
 801f288:	080279d4 	.word	0x080279d4
 801f28c:	08028104 	.word	0x08028104
 801f290:	08027a28 	.word	0x08027a28
 801f294:	08027ffc 	.word	0x08027ffc

0801f298 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 801f298:	b580      	push	{r7, lr}
 801f29a:	b08a      	sub	sp, #40	; 0x28
 801f29c:	af04      	add	r7, sp, #16
 801f29e:	60f8      	str	r0, [r7, #12]
 801f2a0:	60b9      	str	r1, [r7, #8]
 801f2a2:	607a      	str	r2, [r7, #4]
 801f2a4:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801f2a6:	68bb      	ldr	r3, [r7, #8]
 801f2a8:	2b00      	cmp	r3, #0
 801f2aa:	d106      	bne.n	801f2ba <tcp_output_control_segment+0x22>
 801f2ac:	4b1c      	ldr	r3, [pc, #112]	; (801f320 <tcp_output_control_segment+0x88>)
 801f2ae:	f240 7287 	movw	r2, #1927	; 0x787
 801f2b2:	491c      	ldr	r1, [pc, #112]	; (801f324 <tcp_output_control_segment+0x8c>)
 801f2b4:	481c      	ldr	r0, [pc, #112]	; (801f328 <tcp_output_control_segment+0x90>)
 801f2b6:	f004 ffeb 	bl	8024290 <iprintf>

  netif = tcp_route(pcb, src, dst);
 801f2ba:	683a      	ldr	r2, [r7, #0]
 801f2bc:	6879      	ldr	r1, [r7, #4]
 801f2be:	68f8      	ldr	r0, [r7, #12]
 801f2c0:	f7fe fae8 	bl	801d894 <tcp_route>
 801f2c4:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801f2c6:	693b      	ldr	r3, [r7, #16]
 801f2c8:	2b00      	cmp	r3, #0
 801f2ca:	d102      	bne.n	801f2d2 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 801f2cc:	23fc      	movs	r3, #252	; 0xfc
 801f2ce:	75fb      	strb	r3, [r7, #23]
 801f2d0:	e01c      	b.n	801f30c <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801f2d2:	68fb      	ldr	r3, [r7, #12]
 801f2d4:	2b00      	cmp	r3, #0
 801f2d6:	d006      	beq.n	801f2e6 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801f2d8:	68fb      	ldr	r3, [r7, #12]
 801f2da:	7adb      	ldrb	r3, [r3, #11]
 801f2dc:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801f2de:	68fb      	ldr	r3, [r7, #12]
 801f2e0:	7a9b      	ldrb	r3, [r3, #10]
 801f2e2:	757b      	strb	r3, [r7, #21]
 801f2e4:	e003      	b.n	801f2ee <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801f2e6:	23ff      	movs	r3, #255	; 0xff
 801f2e8:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801f2ea:	2300      	movs	r3, #0
 801f2ec:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801f2ee:	7dba      	ldrb	r2, [r7, #22]
 801f2f0:	693b      	ldr	r3, [r7, #16]
 801f2f2:	9302      	str	r3, [sp, #8]
 801f2f4:	2306      	movs	r3, #6
 801f2f6:	9301      	str	r3, [sp, #4]
 801f2f8:	7d7b      	ldrb	r3, [r7, #21]
 801f2fa:	9300      	str	r3, [sp, #0]
 801f2fc:	4613      	mov	r3, r2
 801f2fe:	683a      	ldr	r2, [r7, #0]
 801f300:	6879      	ldr	r1, [r7, #4]
 801f302:	68b8      	ldr	r0, [r7, #8]
 801f304:	f002 fb3e 	bl	8021984 <ip4_output_if>
 801f308:	4603      	mov	r3, r0
 801f30a:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 801f30c:	68b8      	ldr	r0, [r7, #8]
 801f30e:	f7f9 fd87 	bl	8018e20 <pbuf_free>
  return err;
 801f312:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801f316:	4618      	mov	r0, r3
 801f318:	3718      	adds	r7, #24
 801f31a:	46bd      	mov	sp, r7
 801f31c:	bd80      	pop	{r7, pc}
 801f31e:	bf00      	nop
 801f320:	080279d4 	.word	0x080279d4
 801f324:	0802812c 	.word	0x0802812c
 801f328:	08027a28 	.word	0x08027a28

0801f32c <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 801f32c:	b590      	push	{r4, r7, lr}
 801f32e:	b08b      	sub	sp, #44	; 0x2c
 801f330:	af04      	add	r7, sp, #16
 801f332:	60f8      	str	r0, [r7, #12]
 801f334:	60b9      	str	r1, [r7, #8]
 801f336:	607a      	str	r2, [r7, #4]
 801f338:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801f33a:	683b      	ldr	r3, [r7, #0]
 801f33c:	2b00      	cmp	r3, #0
 801f33e:	d106      	bne.n	801f34e <tcp_rst+0x22>
 801f340:	4b1f      	ldr	r3, [pc, #124]	; (801f3c0 <tcp_rst+0x94>)
 801f342:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801f346:	491f      	ldr	r1, [pc, #124]	; (801f3c4 <tcp_rst+0x98>)
 801f348:	481f      	ldr	r0, [pc, #124]	; (801f3c8 <tcp_rst+0x9c>)
 801f34a:	f004 ffa1 	bl	8024290 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 801f34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f350:	2b00      	cmp	r3, #0
 801f352:	d106      	bne.n	801f362 <tcp_rst+0x36>
 801f354:	4b1a      	ldr	r3, [pc, #104]	; (801f3c0 <tcp_rst+0x94>)
 801f356:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801f35a:	491c      	ldr	r1, [pc, #112]	; (801f3cc <tcp_rst+0xa0>)
 801f35c:	481a      	ldr	r0, [pc, #104]	; (801f3c8 <tcp_rst+0x9c>)
 801f35e:	f004 ff97 	bl	8024290 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f362:	2300      	movs	r3, #0
 801f364:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801f366:	f246 0308 	movw	r3, #24584	; 0x6008
 801f36a:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 801f36c:	7dfb      	ldrb	r3, [r7, #23]
 801f36e:	b29c      	uxth	r4, r3
 801f370:	68b8      	ldr	r0, [r7, #8]
 801f372:	f7f8 f978 	bl	8017666 <lwip_htonl>
 801f376:	4602      	mov	r2, r0
 801f378:	8abb      	ldrh	r3, [r7, #20]
 801f37a:	9303      	str	r3, [sp, #12]
 801f37c:	2314      	movs	r3, #20
 801f37e:	9302      	str	r3, [sp, #8]
 801f380:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801f382:	9301      	str	r3, [sp, #4]
 801f384:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801f386:	9300      	str	r3, [sp, #0]
 801f388:	4613      	mov	r3, r2
 801f38a:	2200      	movs	r2, #0
 801f38c:	4621      	mov	r1, r4
 801f38e:	6878      	ldr	r0, [r7, #4]
 801f390:	f7ff fe92 	bl	801f0b8 <tcp_output_alloc_header_common>
 801f394:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801f396:	693b      	ldr	r3, [r7, #16]
 801f398:	2b00      	cmp	r3, #0
 801f39a:	d00c      	beq.n	801f3b6 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f39c:	7dfb      	ldrb	r3, [r7, #23]
 801f39e:	2200      	movs	r2, #0
 801f3a0:	6939      	ldr	r1, [r7, #16]
 801f3a2:	68f8      	ldr	r0, [r7, #12]
 801f3a4:	f7ff ff38 	bl	801f218 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 801f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801f3aa:	683a      	ldr	r2, [r7, #0]
 801f3ac:	6939      	ldr	r1, [r7, #16]
 801f3ae:	68f8      	ldr	r0, [r7, #12]
 801f3b0:	f7ff ff72 	bl	801f298 <tcp_output_control_segment>
 801f3b4:	e000      	b.n	801f3b8 <tcp_rst+0x8c>
    return;
 801f3b6:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 801f3b8:	371c      	adds	r7, #28
 801f3ba:	46bd      	mov	sp, r7
 801f3bc:	bd90      	pop	{r4, r7, pc}
 801f3be:	bf00      	nop
 801f3c0:	080279d4 	.word	0x080279d4
 801f3c4:	08028158 	.word	0x08028158
 801f3c8:	08027a28 	.word	0x08027a28
 801f3cc:	08028174 	.word	0x08028174

0801f3d0 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801f3d0:	b590      	push	{r4, r7, lr}
 801f3d2:	b087      	sub	sp, #28
 801f3d4:	af00      	add	r7, sp, #0
 801f3d6:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801f3d8:	2300      	movs	r3, #0
 801f3da:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 801f3dc:	2300      	movs	r3, #0
 801f3de:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801f3e0:	687b      	ldr	r3, [r7, #4]
 801f3e2:	2b00      	cmp	r3, #0
 801f3e4:	d106      	bne.n	801f3f4 <tcp_send_empty_ack+0x24>
 801f3e6:	4b28      	ldr	r3, [pc, #160]	; (801f488 <tcp_send_empty_ack+0xb8>)
 801f3e8:	f240 72ea 	movw	r2, #2026	; 0x7ea
 801f3ec:	4927      	ldr	r1, [pc, #156]	; (801f48c <tcp_send_empty_ack+0xbc>)
 801f3ee:	4828      	ldr	r0, [pc, #160]	; (801f490 <tcp_send_empty_ack+0xc0>)
 801f3f0:	f004 ff4e 	bl	8024290 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801f3f4:	7dfb      	ldrb	r3, [r7, #23]
 801f3f6:	009b      	lsls	r3, r3, #2
 801f3f8:	b2db      	uxtb	r3, r3
 801f3fa:	f003 0304 	and.w	r3, r3, #4
 801f3fe:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801f400:	7d7b      	ldrb	r3, [r7, #21]
 801f402:	b29c      	uxth	r4, r3
 801f404:	687b      	ldr	r3, [r7, #4]
 801f406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f408:	4618      	mov	r0, r3
 801f40a:	f7f8 f92c 	bl	8017666 <lwip_htonl>
 801f40e:	4603      	mov	r3, r0
 801f410:	2200      	movs	r2, #0
 801f412:	4621      	mov	r1, r4
 801f414:	6878      	ldr	r0, [r7, #4]
 801f416:	f7ff fec1 	bl	801f19c <tcp_output_alloc_header>
 801f41a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f41c:	693b      	ldr	r3, [r7, #16]
 801f41e:	2b00      	cmp	r3, #0
 801f420:	d109      	bne.n	801f436 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f422:	687b      	ldr	r3, [r7, #4]
 801f424:	8b5b      	ldrh	r3, [r3, #26]
 801f426:	f043 0303 	orr.w	r3, r3, #3
 801f42a:	b29a      	uxth	r2, r3
 801f42c:	687b      	ldr	r3, [r7, #4]
 801f42e:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 801f430:	f06f 0301 	mvn.w	r3, #1
 801f434:	e023      	b.n	801f47e <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801f436:	7dbb      	ldrb	r3, [r7, #22]
 801f438:	7dfa      	ldrb	r2, [r7, #23]
 801f43a:	6939      	ldr	r1, [r7, #16]
 801f43c:	6878      	ldr	r0, [r7, #4]
 801f43e:	f7ff feeb 	bl	801f218 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f442:	687a      	ldr	r2, [r7, #4]
 801f444:	687b      	ldr	r3, [r7, #4]
 801f446:	3304      	adds	r3, #4
 801f448:	6939      	ldr	r1, [r7, #16]
 801f44a:	6878      	ldr	r0, [r7, #4]
 801f44c:	f7ff ff24 	bl	801f298 <tcp_output_control_segment>
 801f450:	4603      	mov	r3, r0
 801f452:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 801f454:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801f458:	2b00      	cmp	r3, #0
 801f45a:	d007      	beq.n	801f46c <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f45c:	687b      	ldr	r3, [r7, #4]
 801f45e:	8b5b      	ldrh	r3, [r3, #26]
 801f460:	f043 0303 	orr.w	r3, r3, #3
 801f464:	b29a      	uxth	r2, r3
 801f466:	687b      	ldr	r3, [r7, #4]
 801f468:	835a      	strh	r2, [r3, #26]
 801f46a:	e006      	b.n	801f47a <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801f46c:	687b      	ldr	r3, [r7, #4]
 801f46e:	8b5b      	ldrh	r3, [r3, #26]
 801f470:	f023 0303 	bic.w	r3, r3, #3
 801f474:	b29a      	uxth	r2, r3
 801f476:	687b      	ldr	r3, [r7, #4]
 801f478:	835a      	strh	r2, [r3, #26]
  }

  return err;
 801f47a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f47e:	4618      	mov	r0, r3
 801f480:	371c      	adds	r7, #28
 801f482:	46bd      	mov	sp, r7
 801f484:	bd90      	pop	{r4, r7, pc}
 801f486:	bf00      	nop
 801f488:	080279d4 	.word	0x080279d4
 801f48c:	08028190 	.word	0x08028190
 801f490:	08027a28 	.word	0x08027a28

0801f494 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801f494:	b590      	push	{r4, r7, lr}
 801f496:	b087      	sub	sp, #28
 801f498:	af00      	add	r7, sp, #0
 801f49a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f49c:	2300      	movs	r3, #0
 801f49e:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	2b00      	cmp	r3, #0
 801f4a4:	d106      	bne.n	801f4b4 <tcp_keepalive+0x20>
 801f4a6:	4b18      	ldr	r3, [pc, #96]	; (801f508 <tcp_keepalive+0x74>)
 801f4a8:	f640 0224 	movw	r2, #2084	; 0x824
 801f4ac:	4917      	ldr	r1, [pc, #92]	; (801f50c <tcp_keepalive+0x78>)
 801f4ae:	4818      	ldr	r0, [pc, #96]	; (801f510 <tcp_keepalive+0x7c>)
 801f4b0:	f004 feee 	bl	8024290 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801f4b4:	7dfb      	ldrb	r3, [r7, #23]
 801f4b6:	b29c      	uxth	r4, r3
 801f4b8:	687b      	ldr	r3, [r7, #4]
 801f4ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801f4bc:	3b01      	subs	r3, #1
 801f4be:	4618      	mov	r0, r3
 801f4c0:	f7f8 f8d1 	bl	8017666 <lwip_htonl>
 801f4c4:	4603      	mov	r3, r0
 801f4c6:	2200      	movs	r2, #0
 801f4c8:	4621      	mov	r1, r4
 801f4ca:	6878      	ldr	r0, [r7, #4]
 801f4cc:	f7ff fe66 	bl	801f19c <tcp_output_alloc_header>
 801f4d0:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801f4d2:	693b      	ldr	r3, [r7, #16]
 801f4d4:	2b00      	cmp	r3, #0
 801f4d6:	d102      	bne.n	801f4de <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801f4d8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f4dc:	e010      	b.n	801f500 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f4de:	7dfb      	ldrb	r3, [r7, #23]
 801f4e0:	2200      	movs	r2, #0
 801f4e2:	6939      	ldr	r1, [r7, #16]
 801f4e4:	6878      	ldr	r0, [r7, #4]
 801f4e6:	f7ff fe97 	bl	801f218 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f4ea:	687a      	ldr	r2, [r7, #4]
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	3304      	adds	r3, #4
 801f4f0:	6939      	ldr	r1, [r7, #16]
 801f4f2:	6878      	ldr	r0, [r7, #4]
 801f4f4:	f7ff fed0 	bl	801f298 <tcp_output_control_segment>
 801f4f8:	4603      	mov	r3, r0
 801f4fa:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f4fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801f500:	4618      	mov	r0, r3
 801f502:	371c      	adds	r7, #28
 801f504:	46bd      	mov	sp, r7
 801f506:	bd90      	pop	{r4, r7, pc}
 801f508:	080279d4 	.word	0x080279d4
 801f50c:	080281b0 	.word	0x080281b0
 801f510:	08027a28 	.word	0x08027a28

0801f514 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 801f514:	b590      	push	{r4, r7, lr}
 801f516:	b08b      	sub	sp, #44	; 0x2c
 801f518:	af00      	add	r7, sp, #0
 801f51a:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801f51c:	2300      	movs	r3, #0
 801f51e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 801f522:	687b      	ldr	r3, [r7, #4]
 801f524:	2b00      	cmp	r3, #0
 801f526:	d106      	bne.n	801f536 <tcp_zero_window_probe+0x22>
 801f528:	4b4c      	ldr	r3, [pc, #304]	; (801f65c <tcp_zero_window_probe+0x148>)
 801f52a:	f640 024f 	movw	r2, #2127	; 0x84f
 801f52e:	494c      	ldr	r1, [pc, #304]	; (801f660 <tcp_zero_window_probe+0x14c>)
 801f530:	484c      	ldr	r0, [pc, #304]	; (801f664 <tcp_zero_window_probe+0x150>)
 801f532:	f004 fead 	bl	8024290 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f53a:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 801f53c:	6a3b      	ldr	r3, [r7, #32]
 801f53e:	2b00      	cmp	r3, #0
 801f540:	d101      	bne.n	801f546 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 801f542:	2300      	movs	r3, #0
 801f544:	e086      	b.n	801f654 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f54c:	2bff      	cmp	r3, #255	; 0xff
 801f54e:	d007      	beq.n	801f560 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 801f550:	687b      	ldr	r3, [r7, #4]
 801f552:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801f556:	3301      	adds	r3, #1
 801f558:	b2da      	uxtb	r2, r3
 801f55a:	687b      	ldr	r3, [r7, #4]
 801f55c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 801f560:	6a3b      	ldr	r3, [r7, #32]
 801f562:	68db      	ldr	r3, [r3, #12]
 801f564:	899b      	ldrh	r3, [r3, #12]
 801f566:	b29b      	uxth	r3, r3
 801f568:	4618      	mov	r0, r3
 801f56a:	f7f8 f867 	bl	801763c <lwip_htons>
 801f56e:	4603      	mov	r3, r0
 801f570:	b2db      	uxtb	r3, r3
 801f572:	f003 0301 	and.w	r3, r3, #1
 801f576:	2b00      	cmp	r3, #0
 801f578:	d005      	beq.n	801f586 <tcp_zero_window_probe+0x72>
 801f57a:	6a3b      	ldr	r3, [r7, #32]
 801f57c:	891b      	ldrh	r3, [r3, #8]
 801f57e:	2b00      	cmp	r3, #0
 801f580:	d101      	bne.n	801f586 <tcp_zero_window_probe+0x72>
 801f582:	2301      	movs	r3, #1
 801f584:	e000      	b.n	801f588 <tcp_zero_window_probe+0x74>
 801f586:	2300      	movs	r3, #0
 801f588:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 801f58a:	7ffb      	ldrb	r3, [r7, #31]
 801f58c:	2b00      	cmp	r3, #0
 801f58e:	bf0c      	ite	eq
 801f590:	2301      	moveq	r3, #1
 801f592:	2300      	movne	r3, #0
 801f594:	b2db      	uxtb	r3, r3
 801f596:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 801f598:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f59c:	b299      	uxth	r1, r3
 801f59e:	6a3b      	ldr	r3, [r7, #32]
 801f5a0:	68db      	ldr	r3, [r3, #12]
 801f5a2:	685b      	ldr	r3, [r3, #4]
 801f5a4:	8bba      	ldrh	r2, [r7, #28]
 801f5a6:	6878      	ldr	r0, [r7, #4]
 801f5a8:	f7ff fdf8 	bl	801f19c <tcp_output_alloc_header>
 801f5ac:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801f5ae:	69bb      	ldr	r3, [r7, #24]
 801f5b0:	2b00      	cmp	r3, #0
 801f5b2:	d102      	bne.n	801f5ba <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 801f5b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f5b8:	e04c      	b.n	801f654 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 801f5ba:	69bb      	ldr	r3, [r7, #24]
 801f5bc:	685b      	ldr	r3, [r3, #4]
 801f5be:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801f5c0:	7ffb      	ldrb	r3, [r7, #31]
 801f5c2:	2b00      	cmp	r3, #0
 801f5c4:	d011      	beq.n	801f5ea <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 801f5c6:	697b      	ldr	r3, [r7, #20]
 801f5c8:	899b      	ldrh	r3, [r3, #12]
 801f5ca:	b29b      	uxth	r3, r3
 801f5cc:	b21b      	sxth	r3, r3
 801f5ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801f5d2:	b21c      	sxth	r4, r3
 801f5d4:	2011      	movs	r0, #17
 801f5d6:	f7f8 f831 	bl	801763c <lwip_htons>
 801f5da:	4603      	mov	r3, r0
 801f5dc:	b21b      	sxth	r3, r3
 801f5de:	4323      	orrs	r3, r4
 801f5e0:	b21b      	sxth	r3, r3
 801f5e2:	b29a      	uxth	r2, r3
 801f5e4:	697b      	ldr	r3, [r7, #20]
 801f5e6:	819a      	strh	r2, [r3, #12]
 801f5e8:	e010      	b.n	801f60c <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801f5ea:	69bb      	ldr	r3, [r7, #24]
 801f5ec:	685b      	ldr	r3, [r3, #4]
 801f5ee:	3314      	adds	r3, #20
 801f5f0:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801f5f2:	6a3b      	ldr	r3, [r7, #32]
 801f5f4:	6858      	ldr	r0, [r3, #4]
 801f5f6:	6a3b      	ldr	r3, [r7, #32]
 801f5f8:	685b      	ldr	r3, [r3, #4]
 801f5fa:	891a      	ldrh	r2, [r3, #8]
 801f5fc:	6a3b      	ldr	r3, [r7, #32]
 801f5fe:	891b      	ldrh	r3, [r3, #8]
 801f600:	1ad3      	subs	r3, r2, r3
 801f602:	b29b      	uxth	r3, r3
 801f604:	2201      	movs	r2, #1
 801f606:	6939      	ldr	r1, [r7, #16]
 801f608:	f7f9 fe10 	bl	801922c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 801f60c:	6a3b      	ldr	r3, [r7, #32]
 801f60e:	68db      	ldr	r3, [r3, #12]
 801f610:	685b      	ldr	r3, [r3, #4]
 801f612:	4618      	mov	r0, r3
 801f614:	f7f8 f827 	bl	8017666 <lwip_htonl>
 801f618:	4603      	mov	r3, r0
 801f61a:	3301      	adds	r3, #1
 801f61c:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 801f61e:	687b      	ldr	r3, [r7, #4]
 801f620:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801f622:	68fb      	ldr	r3, [r7, #12]
 801f624:	1ad3      	subs	r3, r2, r3
 801f626:	2b00      	cmp	r3, #0
 801f628:	da02      	bge.n	801f630 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801f62a:	687b      	ldr	r3, [r7, #4]
 801f62c:	68fa      	ldr	r2, [r7, #12]
 801f62e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801f630:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801f634:	2200      	movs	r2, #0
 801f636:	69b9      	ldr	r1, [r7, #24]
 801f638:	6878      	ldr	r0, [r7, #4]
 801f63a:	f7ff fded 	bl	801f218 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801f63e:	687a      	ldr	r2, [r7, #4]
 801f640:	687b      	ldr	r3, [r7, #4]
 801f642:	3304      	adds	r3, #4
 801f644:	69b9      	ldr	r1, [r7, #24]
 801f646:	6878      	ldr	r0, [r7, #4]
 801f648:	f7ff fe26 	bl	801f298 <tcp_output_control_segment>
 801f64c:	4603      	mov	r3, r0
 801f64e:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 801f650:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 801f654:	4618      	mov	r0, r3
 801f656:	372c      	adds	r7, #44	; 0x2c
 801f658:	46bd      	mov	sp, r7
 801f65a:	bd90      	pop	{r4, r7, pc}
 801f65c:	080279d4 	.word	0x080279d4
 801f660:	080281cc 	.word	0x080281cc
 801f664:	08027a28 	.word	0x08027a28

0801f668 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801f668:	b580      	push	{r7, lr}
 801f66a:	b082      	sub	sp, #8
 801f66c:	af00      	add	r7, sp, #0
 801f66e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801f670:	f7f9 feca 	bl	8019408 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 801f674:	4b0a      	ldr	r3, [pc, #40]	; (801f6a0 <tcpip_tcp_timer+0x38>)
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	2b00      	cmp	r3, #0
 801f67a:	d103      	bne.n	801f684 <tcpip_tcp_timer+0x1c>
 801f67c:	4b09      	ldr	r3, [pc, #36]	; (801f6a4 <tcpip_tcp_timer+0x3c>)
 801f67e:	681b      	ldr	r3, [r3, #0]
 801f680:	2b00      	cmp	r3, #0
 801f682:	d005      	beq.n	801f690 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f684:	2200      	movs	r2, #0
 801f686:	4908      	ldr	r1, [pc, #32]	; (801f6a8 <tcpip_tcp_timer+0x40>)
 801f688:	20fa      	movs	r0, #250	; 0xfa
 801f68a:	f000 f8f3 	bl	801f874 <sys_timeout>
 801f68e:	e003      	b.n	801f698 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801f690:	4b06      	ldr	r3, [pc, #24]	; (801f6ac <tcpip_tcp_timer+0x44>)
 801f692:	2200      	movs	r2, #0
 801f694:	601a      	str	r2, [r3, #0]
  }
}
 801f696:	bf00      	nop
 801f698:	bf00      	nop
 801f69a:	3708      	adds	r7, #8
 801f69c:	46bd      	mov	sp, r7
 801f69e:	bd80      	pop	{r7, pc}
 801f6a0:	2000bfc8 	.word	0x2000bfc8
 801f6a4:	2000bfcc 	.word	0x2000bfcc
 801f6a8:	0801f669 	.word	0x0801f669
 801f6ac:	2000c014 	.word	0x2000c014

0801f6b0 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801f6b0:	b580      	push	{r7, lr}
 801f6b2:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 801f6b4:	4b0a      	ldr	r3, [pc, #40]	; (801f6e0 <tcp_timer_needed+0x30>)
 801f6b6:	681b      	ldr	r3, [r3, #0]
 801f6b8:	2b00      	cmp	r3, #0
 801f6ba:	d10f      	bne.n	801f6dc <tcp_timer_needed+0x2c>
 801f6bc:	4b09      	ldr	r3, [pc, #36]	; (801f6e4 <tcp_timer_needed+0x34>)
 801f6be:	681b      	ldr	r3, [r3, #0]
 801f6c0:	2b00      	cmp	r3, #0
 801f6c2:	d103      	bne.n	801f6cc <tcp_timer_needed+0x1c>
 801f6c4:	4b08      	ldr	r3, [pc, #32]	; (801f6e8 <tcp_timer_needed+0x38>)
 801f6c6:	681b      	ldr	r3, [r3, #0]
 801f6c8:	2b00      	cmp	r3, #0
 801f6ca:	d007      	beq.n	801f6dc <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 801f6cc:	4b04      	ldr	r3, [pc, #16]	; (801f6e0 <tcp_timer_needed+0x30>)
 801f6ce:	2201      	movs	r2, #1
 801f6d0:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801f6d2:	2200      	movs	r2, #0
 801f6d4:	4905      	ldr	r1, [pc, #20]	; (801f6ec <tcp_timer_needed+0x3c>)
 801f6d6:	20fa      	movs	r0, #250	; 0xfa
 801f6d8:	f000 f8cc 	bl	801f874 <sys_timeout>
  }
}
 801f6dc:	bf00      	nop
 801f6de:	bd80      	pop	{r7, pc}
 801f6e0:	2000c014 	.word	0x2000c014
 801f6e4:	2000bfc8 	.word	0x2000bfc8
 801f6e8:	2000bfcc 	.word	0x2000bfcc
 801f6ec:	0801f669 	.word	0x0801f669

0801f6f0 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801f6f0:	b580      	push	{r7, lr}
 801f6f2:	b086      	sub	sp, #24
 801f6f4:	af00      	add	r7, sp, #0
 801f6f6:	60f8      	str	r0, [r7, #12]
 801f6f8:	60b9      	str	r1, [r7, #8]
 801f6fa:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 801f6fc:	200a      	movs	r0, #10
 801f6fe:	f7f8 fc75 	bl	8017fec <memp_malloc>
 801f702:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 801f704:	693b      	ldr	r3, [r7, #16]
 801f706:	2b00      	cmp	r3, #0
 801f708:	d109      	bne.n	801f71e <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801f70a:	693b      	ldr	r3, [r7, #16]
 801f70c:	2b00      	cmp	r3, #0
 801f70e:	d151      	bne.n	801f7b4 <sys_timeout_abs+0xc4>
 801f710:	4b2a      	ldr	r3, [pc, #168]	; (801f7bc <sys_timeout_abs+0xcc>)
 801f712:	22be      	movs	r2, #190	; 0xbe
 801f714:	492a      	ldr	r1, [pc, #168]	; (801f7c0 <sys_timeout_abs+0xd0>)
 801f716:	482b      	ldr	r0, [pc, #172]	; (801f7c4 <sys_timeout_abs+0xd4>)
 801f718:	f004 fdba 	bl	8024290 <iprintf>
    return;
 801f71c:	e04a      	b.n	801f7b4 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 801f71e:	693b      	ldr	r3, [r7, #16]
 801f720:	2200      	movs	r2, #0
 801f722:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 801f724:	693b      	ldr	r3, [r7, #16]
 801f726:	68ba      	ldr	r2, [r7, #8]
 801f728:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801f72a:	693b      	ldr	r3, [r7, #16]
 801f72c:	687a      	ldr	r2, [r7, #4]
 801f72e:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 801f730:	693b      	ldr	r3, [r7, #16]
 801f732:	68fa      	ldr	r2, [r7, #12]
 801f734:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801f736:	4b24      	ldr	r3, [pc, #144]	; (801f7c8 <sys_timeout_abs+0xd8>)
 801f738:	681b      	ldr	r3, [r3, #0]
 801f73a:	2b00      	cmp	r3, #0
 801f73c:	d103      	bne.n	801f746 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 801f73e:	4a22      	ldr	r2, [pc, #136]	; (801f7c8 <sys_timeout_abs+0xd8>)
 801f740:	693b      	ldr	r3, [r7, #16]
 801f742:	6013      	str	r3, [r2, #0]
    return;
 801f744:	e037      	b.n	801f7b6 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801f746:	693b      	ldr	r3, [r7, #16]
 801f748:	685a      	ldr	r2, [r3, #4]
 801f74a:	4b1f      	ldr	r3, [pc, #124]	; (801f7c8 <sys_timeout_abs+0xd8>)
 801f74c:	681b      	ldr	r3, [r3, #0]
 801f74e:	685b      	ldr	r3, [r3, #4]
 801f750:	1ad3      	subs	r3, r2, r3
 801f752:	0fdb      	lsrs	r3, r3, #31
 801f754:	f003 0301 	and.w	r3, r3, #1
 801f758:	b2db      	uxtb	r3, r3
 801f75a:	2b00      	cmp	r3, #0
 801f75c:	d007      	beq.n	801f76e <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 801f75e:	4b1a      	ldr	r3, [pc, #104]	; (801f7c8 <sys_timeout_abs+0xd8>)
 801f760:	681a      	ldr	r2, [r3, #0]
 801f762:	693b      	ldr	r3, [r7, #16]
 801f764:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801f766:	4a18      	ldr	r2, [pc, #96]	; (801f7c8 <sys_timeout_abs+0xd8>)
 801f768:	693b      	ldr	r3, [r7, #16]
 801f76a:	6013      	str	r3, [r2, #0]
 801f76c:	e023      	b.n	801f7b6 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 801f76e:	4b16      	ldr	r3, [pc, #88]	; (801f7c8 <sys_timeout_abs+0xd8>)
 801f770:	681b      	ldr	r3, [r3, #0]
 801f772:	617b      	str	r3, [r7, #20]
 801f774:	e01a      	b.n	801f7ac <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 801f776:	697b      	ldr	r3, [r7, #20]
 801f778:	681b      	ldr	r3, [r3, #0]
 801f77a:	2b00      	cmp	r3, #0
 801f77c:	d00b      	beq.n	801f796 <sys_timeout_abs+0xa6>
 801f77e:	693b      	ldr	r3, [r7, #16]
 801f780:	685a      	ldr	r2, [r3, #4]
 801f782:	697b      	ldr	r3, [r7, #20]
 801f784:	681b      	ldr	r3, [r3, #0]
 801f786:	685b      	ldr	r3, [r3, #4]
 801f788:	1ad3      	subs	r3, r2, r3
 801f78a:	0fdb      	lsrs	r3, r3, #31
 801f78c:	f003 0301 	and.w	r3, r3, #1
 801f790:	b2db      	uxtb	r3, r3
 801f792:	2b00      	cmp	r3, #0
 801f794:	d007      	beq.n	801f7a6 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 801f796:	697b      	ldr	r3, [r7, #20]
 801f798:	681a      	ldr	r2, [r3, #0]
 801f79a:	693b      	ldr	r3, [r7, #16]
 801f79c:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 801f79e:	697b      	ldr	r3, [r7, #20]
 801f7a0:	693a      	ldr	r2, [r7, #16]
 801f7a2:	601a      	str	r2, [r3, #0]
        break;
 801f7a4:	e007      	b.n	801f7b6 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 801f7a6:	697b      	ldr	r3, [r7, #20]
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	617b      	str	r3, [r7, #20]
 801f7ac:	697b      	ldr	r3, [r7, #20]
 801f7ae:	2b00      	cmp	r3, #0
 801f7b0:	d1e1      	bne.n	801f776 <sys_timeout_abs+0x86>
 801f7b2:	e000      	b.n	801f7b6 <sys_timeout_abs+0xc6>
    return;
 801f7b4:	bf00      	nop
      }
    }
  }
}
 801f7b6:	3718      	adds	r7, #24
 801f7b8:	46bd      	mov	sp, r7
 801f7ba:	bd80      	pop	{r7, pc}
 801f7bc:	080281f0 	.word	0x080281f0
 801f7c0:	08028224 	.word	0x08028224
 801f7c4:	08028264 	.word	0x08028264
 801f7c8:	2000c00c 	.word	0x2000c00c

0801f7cc <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 801f7cc:	b580      	push	{r7, lr}
 801f7ce:	b086      	sub	sp, #24
 801f7d0:	af00      	add	r7, sp, #0
 801f7d2:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 801f7d4:	687b      	ldr	r3, [r7, #4]
 801f7d6:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801f7d8:	697b      	ldr	r3, [r7, #20]
 801f7da:	685b      	ldr	r3, [r3, #4]
 801f7dc:	4798      	blx	r3

  now = sys_now();
 801f7de:	f7f2 f85b 	bl	8011898 <sys_now>
 801f7e2:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 801f7e4:	697b      	ldr	r3, [r7, #20]
 801f7e6:	681a      	ldr	r2, [r3, #0]
 801f7e8:	4b0f      	ldr	r3, [pc, #60]	; (801f828 <lwip_cyclic_timer+0x5c>)
 801f7ea:	681b      	ldr	r3, [r3, #0]
 801f7ec:	4413      	add	r3, r2
 801f7ee:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 801f7f0:	68fa      	ldr	r2, [r7, #12]
 801f7f2:	693b      	ldr	r3, [r7, #16]
 801f7f4:	1ad3      	subs	r3, r2, r3
 801f7f6:	0fdb      	lsrs	r3, r3, #31
 801f7f8:	f003 0301 	and.w	r3, r3, #1
 801f7fc:	b2db      	uxtb	r3, r3
 801f7fe:	2b00      	cmp	r3, #0
 801f800:	d009      	beq.n	801f816 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 801f802:	697b      	ldr	r3, [r7, #20]
 801f804:	681a      	ldr	r2, [r3, #0]
 801f806:	693b      	ldr	r3, [r7, #16]
 801f808:	4413      	add	r3, r2
 801f80a:	687a      	ldr	r2, [r7, #4]
 801f80c:	4907      	ldr	r1, [pc, #28]	; (801f82c <lwip_cyclic_timer+0x60>)
 801f80e:	4618      	mov	r0, r3
 801f810:	f7ff ff6e 	bl	801f6f0 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 801f814:	e004      	b.n	801f820 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801f816:	687a      	ldr	r2, [r7, #4]
 801f818:	4904      	ldr	r1, [pc, #16]	; (801f82c <lwip_cyclic_timer+0x60>)
 801f81a:	68f8      	ldr	r0, [r7, #12]
 801f81c:	f7ff ff68 	bl	801f6f0 <sys_timeout_abs>
}
 801f820:	bf00      	nop
 801f822:	3718      	adds	r7, #24
 801f824:	46bd      	mov	sp, r7
 801f826:	bd80      	pop	{r7, pc}
 801f828:	2000c010 	.word	0x2000c010
 801f82c:	0801f7cd 	.word	0x0801f7cd

0801f830 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 801f830:	b580      	push	{r7, lr}
 801f832:	b082      	sub	sp, #8
 801f834:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f836:	2301      	movs	r3, #1
 801f838:	607b      	str	r3, [r7, #4]
 801f83a:	e00e      	b.n	801f85a <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 801f83c:	4a0b      	ldr	r2, [pc, #44]	; (801f86c <sys_timeouts_init+0x3c>)
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 801f844:	687b      	ldr	r3, [r7, #4]
 801f846:	00db      	lsls	r3, r3, #3
 801f848:	4a08      	ldr	r2, [pc, #32]	; (801f86c <sys_timeouts_init+0x3c>)
 801f84a:	4413      	add	r3, r2
 801f84c:	461a      	mov	r2, r3
 801f84e:	4908      	ldr	r1, [pc, #32]	; (801f870 <sys_timeouts_init+0x40>)
 801f850:	f000 f810 	bl	801f874 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801f854:	687b      	ldr	r3, [r7, #4]
 801f856:	3301      	adds	r3, #1
 801f858:	607b      	str	r3, [r7, #4]
 801f85a:	687b      	ldr	r3, [r7, #4]
 801f85c:	2b02      	cmp	r3, #2
 801f85e:	d9ed      	bls.n	801f83c <sys_timeouts_init+0xc>
  }
}
 801f860:	bf00      	nop
 801f862:	bf00      	nop
 801f864:	3708      	adds	r7, #8
 801f866:	46bd      	mov	sp, r7
 801f868:	bd80      	pop	{r7, pc}
 801f86a:	bf00      	nop
 801f86c:	08028e70 	.word	0x08028e70
 801f870:	0801f7cd 	.word	0x0801f7cd

0801f874 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 801f874:	b580      	push	{r7, lr}
 801f876:	b086      	sub	sp, #24
 801f878:	af00      	add	r7, sp, #0
 801f87a:	60f8      	str	r0, [r7, #12]
 801f87c:	60b9      	str	r1, [r7, #8]
 801f87e:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 801f880:	68fb      	ldr	r3, [r7, #12]
 801f882:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801f886:	d306      	bcc.n	801f896 <sys_timeout+0x22>
 801f888:	4b0a      	ldr	r3, [pc, #40]	; (801f8b4 <sys_timeout+0x40>)
 801f88a:	f240 1229 	movw	r2, #297	; 0x129
 801f88e:	490a      	ldr	r1, [pc, #40]	; (801f8b8 <sys_timeout+0x44>)
 801f890:	480a      	ldr	r0, [pc, #40]	; (801f8bc <sys_timeout+0x48>)
 801f892:	f004 fcfd 	bl	8024290 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 801f896:	f7f1 ffff 	bl	8011898 <sys_now>
 801f89a:	4602      	mov	r2, r0
 801f89c:	68fb      	ldr	r3, [r7, #12]
 801f89e:	4413      	add	r3, r2
 801f8a0:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 801f8a2:	687a      	ldr	r2, [r7, #4]
 801f8a4:	68b9      	ldr	r1, [r7, #8]
 801f8a6:	6978      	ldr	r0, [r7, #20]
 801f8a8:	f7ff ff22 	bl	801f6f0 <sys_timeout_abs>
#endif
}
 801f8ac:	bf00      	nop
 801f8ae:	3718      	adds	r7, #24
 801f8b0:	46bd      	mov	sp, r7
 801f8b2:	bd80      	pop	{r7, pc}
 801f8b4:	080281f0 	.word	0x080281f0
 801f8b8:	0802828c 	.word	0x0802828c
 801f8bc:	08028264 	.word	0x08028264

0801f8c0 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 801f8c0:	b580      	push	{r7, lr}
 801f8c2:	b084      	sub	sp, #16
 801f8c4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 801f8c6:	f7f1 ffe7 	bl	8011898 <sys_now>
 801f8ca:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 801f8cc:	4b17      	ldr	r3, [pc, #92]	; (801f92c <sys_check_timeouts+0x6c>)
 801f8ce:	681b      	ldr	r3, [r3, #0]
 801f8d0:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 801f8d2:	68bb      	ldr	r3, [r7, #8]
 801f8d4:	2b00      	cmp	r3, #0
 801f8d6:	d022      	beq.n	801f91e <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801f8d8:	68bb      	ldr	r3, [r7, #8]
 801f8da:	685b      	ldr	r3, [r3, #4]
 801f8dc:	68fa      	ldr	r2, [r7, #12]
 801f8de:	1ad3      	subs	r3, r2, r3
 801f8e0:	0fdb      	lsrs	r3, r3, #31
 801f8e2:	f003 0301 	and.w	r3, r3, #1
 801f8e6:	b2db      	uxtb	r3, r3
 801f8e8:	2b00      	cmp	r3, #0
 801f8ea:	d11a      	bne.n	801f922 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 801f8ec:	68bb      	ldr	r3, [r7, #8]
 801f8ee:	681b      	ldr	r3, [r3, #0]
 801f8f0:	4a0e      	ldr	r2, [pc, #56]	; (801f92c <sys_check_timeouts+0x6c>)
 801f8f2:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 801f8f4:	68bb      	ldr	r3, [r7, #8]
 801f8f6:	689b      	ldr	r3, [r3, #8]
 801f8f8:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801f8fa:	68bb      	ldr	r3, [r7, #8]
 801f8fc:	68db      	ldr	r3, [r3, #12]
 801f8fe:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 801f900:	68bb      	ldr	r3, [r7, #8]
 801f902:	685b      	ldr	r3, [r3, #4]
 801f904:	4a0a      	ldr	r2, [pc, #40]	; (801f930 <sys_check_timeouts+0x70>)
 801f906:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801f908:	68b9      	ldr	r1, [r7, #8]
 801f90a:	200a      	movs	r0, #10
 801f90c:	f7f8 fbe4 	bl	80180d8 <memp_free>
    if (handler != NULL) {
 801f910:	687b      	ldr	r3, [r7, #4]
 801f912:	2b00      	cmp	r3, #0
 801f914:	d0da      	beq.n	801f8cc <sys_check_timeouts+0xc>
      handler(arg);
 801f916:	687b      	ldr	r3, [r7, #4]
 801f918:	6838      	ldr	r0, [r7, #0]
 801f91a:	4798      	blx	r3
  do {
 801f91c:	e7d6      	b.n	801f8cc <sys_check_timeouts+0xc>
      return;
 801f91e:	bf00      	nop
 801f920:	e000      	b.n	801f924 <sys_check_timeouts+0x64>
      return;
 801f922:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 801f924:	3710      	adds	r7, #16
 801f926:	46bd      	mov	sp, r7
 801f928:	bd80      	pop	{r7, pc}
 801f92a:	bf00      	nop
 801f92c:	2000c00c 	.word	0x2000c00c
 801f930:	2000c010 	.word	0x2000c010

0801f934 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 801f934:	b580      	push	{r7, lr}
 801f936:	b082      	sub	sp, #8
 801f938:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801f93a:	4b16      	ldr	r3, [pc, #88]	; (801f994 <sys_timeouts_sleeptime+0x60>)
 801f93c:	681b      	ldr	r3, [r3, #0]
 801f93e:	2b00      	cmp	r3, #0
 801f940:	d102      	bne.n	801f948 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 801f942:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801f946:	e020      	b.n	801f98a <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801f948:	f7f1 ffa6 	bl	8011898 <sys_now>
 801f94c:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 801f94e:	4b11      	ldr	r3, [pc, #68]	; (801f994 <sys_timeouts_sleeptime+0x60>)
 801f950:	681b      	ldr	r3, [r3, #0]
 801f952:	685a      	ldr	r2, [r3, #4]
 801f954:	687b      	ldr	r3, [r7, #4]
 801f956:	1ad3      	subs	r3, r2, r3
 801f958:	0fdb      	lsrs	r3, r3, #31
 801f95a:	f003 0301 	and.w	r3, r3, #1
 801f95e:	b2db      	uxtb	r3, r3
 801f960:	2b00      	cmp	r3, #0
 801f962:	d001      	beq.n	801f968 <sys_timeouts_sleeptime+0x34>
    return 0;
 801f964:	2300      	movs	r3, #0
 801f966:	e010      	b.n	801f98a <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801f968:	4b0a      	ldr	r3, [pc, #40]	; (801f994 <sys_timeouts_sleeptime+0x60>)
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	685a      	ldr	r2, [r3, #4]
 801f96e:	687b      	ldr	r3, [r7, #4]
 801f970:	1ad3      	subs	r3, r2, r3
 801f972:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 801f974:	683b      	ldr	r3, [r7, #0]
 801f976:	2b00      	cmp	r3, #0
 801f978:	da06      	bge.n	801f988 <sys_timeouts_sleeptime+0x54>
 801f97a:	4b07      	ldr	r3, [pc, #28]	; (801f998 <sys_timeouts_sleeptime+0x64>)
 801f97c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 801f980:	4906      	ldr	r1, [pc, #24]	; (801f99c <sys_timeouts_sleeptime+0x68>)
 801f982:	4807      	ldr	r0, [pc, #28]	; (801f9a0 <sys_timeouts_sleeptime+0x6c>)
 801f984:	f004 fc84 	bl	8024290 <iprintf>
    return ret;
 801f988:	683b      	ldr	r3, [r7, #0]
  }
}
 801f98a:	4618      	mov	r0, r3
 801f98c:	3708      	adds	r7, #8
 801f98e:	46bd      	mov	sp, r7
 801f990:	bd80      	pop	{r7, pc}
 801f992:	bf00      	nop
 801f994:	2000c00c 	.word	0x2000c00c
 801f998:	080281f0 	.word	0x080281f0
 801f99c:	080282c4 	.word	0x080282c4
 801f9a0:	08028264 	.word	0x08028264

0801f9a4 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 801f9a4:	b580      	push	{r7, lr}
 801f9a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 801f9a8:	f004 fc8a 	bl	80242c0 <rand>
 801f9ac:	4603      	mov	r3, r0
 801f9ae:	b29b      	uxth	r3, r3
 801f9b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801f9b4:	b29b      	uxth	r3, r3
 801f9b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 801f9ba:	b29a      	uxth	r2, r3
 801f9bc:	4b01      	ldr	r3, [pc, #4]	; (801f9c4 <udp_init+0x20>)
 801f9be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 801f9c0:	bf00      	nop
 801f9c2:	bd80      	pop	{r7, pc}
 801f9c4:	20000030 	.word	0x20000030

0801f9c8 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 801f9c8:	b480      	push	{r7}
 801f9ca:	b083      	sub	sp, #12
 801f9cc:	af00      	add	r7, sp, #0
  u16_t n = 0;
 801f9ce:	2300      	movs	r3, #0
 801f9d0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 801f9d2:	4b17      	ldr	r3, [pc, #92]	; (801fa30 <udp_new_port+0x68>)
 801f9d4:	881b      	ldrh	r3, [r3, #0]
 801f9d6:	1c5a      	adds	r2, r3, #1
 801f9d8:	b291      	uxth	r1, r2
 801f9da:	4a15      	ldr	r2, [pc, #84]	; (801fa30 <udp_new_port+0x68>)
 801f9dc:	8011      	strh	r1, [r2, #0]
 801f9de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801f9e2:	4293      	cmp	r3, r2
 801f9e4:	d103      	bne.n	801f9ee <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801f9e6:	4b12      	ldr	r3, [pc, #72]	; (801fa30 <udp_new_port+0x68>)
 801f9e8:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 801f9ec:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801f9ee:	4b11      	ldr	r3, [pc, #68]	; (801fa34 <udp_new_port+0x6c>)
 801f9f0:	681b      	ldr	r3, [r3, #0]
 801f9f2:	603b      	str	r3, [r7, #0]
 801f9f4:	e011      	b.n	801fa1a <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801f9f6:	683b      	ldr	r3, [r7, #0]
 801f9f8:	8a5a      	ldrh	r2, [r3, #18]
 801f9fa:	4b0d      	ldr	r3, [pc, #52]	; (801fa30 <udp_new_port+0x68>)
 801f9fc:	881b      	ldrh	r3, [r3, #0]
 801f9fe:	429a      	cmp	r2, r3
 801fa00:	d108      	bne.n	801fa14 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 801fa02:	88fb      	ldrh	r3, [r7, #6]
 801fa04:	3301      	adds	r3, #1
 801fa06:	80fb      	strh	r3, [r7, #6]
 801fa08:	88fb      	ldrh	r3, [r7, #6]
 801fa0a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801fa0e:	d3e0      	bcc.n	801f9d2 <udp_new_port+0xa>
        return 0;
 801fa10:	2300      	movs	r3, #0
 801fa12:	e007      	b.n	801fa24 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fa14:	683b      	ldr	r3, [r7, #0]
 801fa16:	68db      	ldr	r3, [r3, #12]
 801fa18:	603b      	str	r3, [r7, #0]
 801fa1a:	683b      	ldr	r3, [r7, #0]
 801fa1c:	2b00      	cmp	r3, #0
 801fa1e:	d1ea      	bne.n	801f9f6 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 801fa20:	4b03      	ldr	r3, [pc, #12]	; (801fa30 <udp_new_port+0x68>)
 801fa22:	881b      	ldrh	r3, [r3, #0]
}
 801fa24:	4618      	mov	r0, r3
 801fa26:	370c      	adds	r7, #12
 801fa28:	46bd      	mov	sp, r7
 801fa2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fa2e:	4770      	bx	lr
 801fa30:	20000030 	.word	0x20000030
 801fa34:	2000c018 	.word	0x2000c018

0801fa38 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801fa38:	b580      	push	{r7, lr}
 801fa3a:	b084      	sub	sp, #16
 801fa3c:	af00      	add	r7, sp, #0
 801fa3e:	60f8      	str	r0, [r7, #12]
 801fa40:	60b9      	str	r1, [r7, #8]
 801fa42:	4613      	mov	r3, r2
 801fa44:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801fa46:	68fb      	ldr	r3, [r7, #12]
 801fa48:	2b00      	cmp	r3, #0
 801fa4a:	d105      	bne.n	801fa58 <udp_input_local_match+0x20>
 801fa4c:	4b27      	ldr	r3, [pc, #156]	; (801faec <udp_input_local_match+0xb4>)
 801fa4e:	2287      	movs	r2, #135	; 0x87
 801fa50:	4927      	ldr	r1, [pc, #156]	; (801faf0 <udp_input_local_match+0xb8>)
 801fa52:	4828      	ldr	r0, [pc, #160]	; (801faf4 <udp_input_local_match+0xbc>)
 801fa54:	f004 fc1c 	bl	8024290 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801fa58:	68bb      	ldr	r3, [r7, #8]
 801fa5a:	2b00      	cmp	r3, #0
 801fa5c:	d105      	bne.n	801fa6a <udp_input_local_match+0x32>
 801fa5e:	4b23      	ldr	r3, [pc, #140]	; (801faec <udp_input_local_match+0xb4>)
 801fa60:	2288      	movs	r2, #136	; 0x88
 801fa62:	4925      	ldr	r1, [pc, #148]	; (801faf8 <udp_input_local_match+0xc0>)
 801fa64:	4823      	ldr	r0, [pc, #140]	; (801faf4 <udp_input_local_match+0xbc>)
 801fa66:	f004 fc13 	bl	8024290 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	7a1b      	ldrb	r3, [r3, #8]
 801fa6e:	2b00      	cmp	r3, #0
 801fa70:	d00b      	beq.n	801fa8a <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 801fa72:	68fb      	ldr	r3, [r7, #12]
 801fa74:	7a1a      	ldrb	r2, [r3, #8]
 801fa76:	4b21      	ldr	r3, [pc, #132]	; (801fafc <udp_input_local_match+0xc4>)
 801fa78:	685b      	ldr	r3, [r3, #4]
 801fa7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801fa7e:	3301      	adds	r3, #1
 801fa80:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801fa82:	429a      	cmp	r2, r3
 801fa84:	d001      	beq.n	801fa8a <udp_input_local_match+0x52>
    return 0;
 801fa86:	2300      	movs	r3, #0
 801fa88:	e02b      	b.n	801fae2 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 801fa8a:	79fb      	ldrb	r3, [r7, #7]
 801fa8c:	2b00      	cmp	r3, #0
 801fa8e:	d018      	beq.n	801fac2 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fa90:	68fb      	ldr	r3, [r7, #12]
 801fa92:	2b00      	cmp	r3, #0
 801fa94:	d013      	beq.n	801fabe <udp_input_local_match+0x86>
 801fa96:	68fb      	ldr	r3, [r7, #12]
 801fa98:	681b      	ldr	r3, [r3, #0]
 801fa9a:	2b00      	cmp	r3, #0
 801fa9c:	d00f      	beq.n	801fabe <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801fa9e:	4b17      	ldr	r3, [pc, #92]	; (801fafc <udp_input_local_match+0xc4>)
 801faa0:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801faa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801faa6:	d00a      	beq.n	801fabe <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 801faa8:	68fb      	ldr	r3, [r7, #12]
 801faaa:	681a      	ldr	r2, [r3, #0]
 801faac:	4b13      	ldr	r3, [pc, #76]	; (801fafc <udp_input_local_match+0xc4>)
 801faae:	695b      	ldr	r3, [r3, #20]
 801fab0:	405a      	eors	r2, r3
 801fab2:	68bb      	ldr	r3, [r7, #8]
 801fab4:	3308      	adds	r3, #8
 801fab6:	681b      	ldr	r3, [r3, #0]
 801fab8:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 801faba:	2b00      	cmp	r3, #0
 801fabc:	d110      	bne.n	801fae0 <udp_input_local_match+0xa8>
          return 1;
 801fabe:	2301      	movs	r3, #1
 801fac0:	e00f      	b.n	801fae2 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 801fac2:	68fb      	ldr	r3, [r7, #12]
 801fac4:	2b00      	cmp	r3, #0
 801fac6:	d009      	beq.n	801fadc <udp_input_local_match+0xa4>
 801fac8:	68fb      	ldr	r3, [r7, #12]
 801faca:	681b      	ldr	r3, [r3, #0]
 801facc:	2b00      	cmp	r3, #0
 801face:	d005      	beq.n	801fadc <udp_input_local_match+0xa4>
 801fad0:	68fb      	ldr	r3, [r7, #12]
 801fad2:	681a      	ldr	r2, [r3, #0]
 801fad4:	4b09      	ldr	r3, [pc, #36]	; (801fafc <udp_input_local_match+0xc4>)
 801fad6:	695b      	ldr	r3, [r3, #20]
 801fad8:	429a      	cmp	r2, r3
 801fada:	d101      	bne.n	801fae0 <udp_input_local_match+0xa8>
        return 1;
 801fadc:	2301      	movs	r3, #1
 801fade:	e000      	b.n	801fae2 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 801fae0:	2300      	movs	r3, #0
}
 801fae2:	4618      	mov	r0, r3
 801fae4:	3710      	adds	r7, #16
 801fae6:	46bd      	mov	sp, r7
 801fae8:	bd80      	pop	{r7, pc}
 801faea:	bf00      	nop
 801faec:	080282d8 	.word	0x080282d8
 801faf0:	08028308 	.word	0x08028308
 801faf4:	0802832c 	.word	0x0802832c
 801faf8:	08028354 	.word	0x08028354
 801fafc:	200066a8 	.word	0x200066a8

0801fb00 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801fb00:	b590      	push	{r4, r7, lr}
 801fb02:	b08d      	sub	sp, #52	; 0x34
 801fb04:	af02      	add	r7, sp, #8
 801fb06:	6078      	str	r0, [r7, #4]
 801fb08:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801fb0a:	2300      	movs	r3, #0
 801fb0c:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801fb0e:	687b      	ldr	r3, [r7, #4]
 801fb10:	2b00      	cmp	r3, #0
 801fb12:	d105      	bne.n	801fb20 <udp_input+0x20>
 801fb14:	4b7c      	ldr	r3, [pc, #496]	; (801fd08 <udp_input+0x208>)
 801fb16:	22cf      	movs	r2, #207	; 0xcf
 801fb18:	497c      	ldr	r1, [pc, #496]	; (801fd0c <udp_input+0x20c>)
 801fb1a:	487d      	ldr	r0, [pc, #500]	; (801fd10 <udp_input+0x210>)
 801fb1c:	f004 fbb8 	bl	8024290 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801fb20:	683b      	ldr	r3, [r7, #0]
 801fb22:	2b00      	cmp	r3, #0
 801fb24:	d105      	bne.n	801fb32 <udp_input+0x32>
 801fb26:	4b78      	ldr	r3, [pc, #480]	; (801fd08 <udp_input+0x208>)
 801fb28:	22d0      	movs	r2, #208	; 0xd0
 801fb2a:	497a      	ldr	r1, [pc, #488]	; (801fd14 <udp_input+0x214>)
 801fb2c:	4878      	ldr	r0, [pc, #480]	; (801fd10 <udp_input+0x210>)
 801fb2e:	f004 fbaf 	bl	8024290 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801fb32:	687b      	ldr	r3, [r7, #4]
 801fb34:	895b      	ldrh	r3, [r3, #10]
 801fb36:	2b07      	cmp	r3, #7
 801fb38:	d803      	bhi.n	801fb42 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801fb3a:	6878      	ldr	r0, [r7, #4]
 801fb3c:	f7f9 f970 	bl	8018e20 <pbuf_free>
    goto end;
 801fb40:	e0de      	b.n	801fd00 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801fb42:	687b      	ldr	r3, [r7, #4]
 801fb44:	685b      	ldr	r3, [r3, #4]
 801fb46:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801fb48:	4b73      	ldr	r3, [pc, #460]	; (801fd18 <udp_input+0x218>)
 801fb4a:	695b      	ldr	r3, [r3, #20]
 801fb4c:	4a72      	ldr	r2, [pc, #456]	; (801fd18 <udp_input+0x218>)
 801fb4e:	6812      	ldr	r2, [r2, #0]
 801fb50:	4611      	mov	r1, r2
 801fb52:	4618      	mov	r0, r3
 801fb54:	f001 ffee 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 801fb58:	4603      	mov	r3, r0
 801fb5a:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 801fb5c:	697b      	ldr	r3, [r7, #20]
 801fb5e:	881b      	ldrh	r3, [r3, #0]
 801fb60:	b29b      	uxth	r3, r3
 801fb62:	4618      	mov	r0, r3
 801fb64:	f7f7 fd6a 	bl	801763c <lwip_htons>
 801fb68:	4603      	mov	r3, r0
 801fb6a:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 801fb6c:	697b      	ldr	r3, [r7, #20]
 801fb6e:	885b      	ldrh	r3, [r3, #2]
 801fb70:	b29b      	uxth	r3, r3
 801fb72:	4618      	mov	r0, r3
 801fb74:	f7f7 fd62 	bl	801763c <lwip_htons>
 801fb78:	4603      	mov	r3, r0
 801fb7a:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 801fb7c:	2300      	movs	r3, #0
 801fb7e:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801fb80:	2300      	movs	r3, #0
 801fb82:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 801fb84:	2300      	movs	r3, #0
 801fb86:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fb88:	4b64      	ldr	r3, [pc, #400]	; (801fd1c <udp_input+0x21c>)
 801fb8a:	681b      	ldr	r3, [r3, #0]
 801fb8c:	627b      	str	r3, [r7, #36]	; 0x24
 801fb8e:	e054      	b.n	801fc3a <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801fb90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fb92:	8a5b      	ldrh	r3, [r3, #18]
 801fb94:	89fa      	ldrh	r2, [r7, #14]
 801fb96:	429a      	cmp	r2, r3
 801fb98:	d14a      	bne.n	801fc30 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 801fb9a:	7cfb      	ldrb	r3, [r7, #19]
 801fb9c:	461a      	mov	r2, r3
 801fb9e:	6839      	ldr	r1, [r7, #0]
 801fba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801fba2:	f7ff ff49 	bl	801fa38 <udp_input_local_match>
 801fba6:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 801fba8:	2b00      	cmp	r3, #0
 801fbaa:	d041      	beq.n	801fc30 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 801fbac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbae:	7c1b      	ldrb	r3, [r3, #16]
 801fbb0:	f003 0304 	and.w	r3, r3, #4
 801fbb4:	2b00      	cmp	r3, #0
 801fbb6:	d11d      	bne.n	801fbf4 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 801fbb8:	69fb      	ldr	r3, [r7, #28]
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d102      	bne.n	801fbc4 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 801fbbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbc0:	61fb      	str	r3, [r7, #28]
 801fbc2:	e017      	b.n	801fbf4 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 801fbc4:	7cfb      	ldrb	r3, [r7, #19]
 801fbc6:	2b00      	cmp	r3, #0
 801fbc8:	d014      	beq.n	801fbf4 <udp_input+0xf4>
 801fbca:	4b53      	ldr	r3, [pc, #332]	; (801fd18 <udp_input+0x218>)
 801fbcc:	695b      	ldr	r3, [r3, #20]
 801fbce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 801fbd2:	d10f      	bne.n	801fbf4 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 801fbd4:	69fb      	ldr	r3, [r7, #28]
 801fbd6:	681a      	ldr	r2, [r3, #0]
 801fbd8:	683b      	ldr	r3, [r7, #0]
 801fbda:	3304      	adds	r3, #4
 801fbdc:	681b      	ldr	r3, [r3, #0]
 801fbde:	429a      	cmp	r2, r3
 801fbe0:	d008      	beq.n	801fbf4 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 801fbe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbe4:	681a      	ldr	r2, [r3, #0]
 801fbe6:	683b      	ldr	r3, [r7, #0]
 801fbe8:	3304      	adds	r3, #4
 801fbea:	681b      	ldr	r3, [r3, #0]
 801fbec:	429a      	cmp	r2, r3
 801fbee:	d101      	bne.n	801fbf4 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 801fbf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbf2:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 801fbf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fbf6:	8a9b      	ldrh	r3, [r3, #20]
 801fbf8:	8a3a      	ldrh	r2, [r7, #16]
 801fbfa:	429a      	cmp	r2, r3
 801fbfc:	d118      	bne.n	801fc30 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fbfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc00:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801fc02:	2b00      	cmp	r3, #0
 801fc04:	d005      	beq.n	801fc12 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801fc06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc08:	685a      	ldr	r2, [r3, #4]
 801fc0a:	4b43      	ldr	r3, [pc, #268]	; (801fd18 <udp_input+0x218>)
 801fc0c:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801fc0e:	429a      	cmp	r2, r3
 801fc10:	d10e      	bne.n	801fc30 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801fc12:	6a3b      	ldr	r3, [r7, #32]
 801fc14:	2b00      	cmp	r3, #0
 801fc16:	d014      	beq.n	801fc42 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801fc18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc1a:	68da      	ldr	r2, [r3, #12]
 801fc1c:	6a3b      	ldr	r3, [r7, #32]
 801fc1e:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801fc20:	4b3e      	ldr	r3, [pc, #248]	; (801fd1c <udp_input+0x21c>)
 801fc22:	681a      	ldr	r2, [r3, #0]
 801fc24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc26:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801fc28:	4a3c      	ldr	r2, [pc, #240]	; (801fd1c <udp_input+0x21c>)
 801fc2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc2c:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801fc2e:	e008      	b.n	801fc42 <udp_input+0x142>
      }
    }

    prev = pcb;
 801fc30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc32:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 801fc34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc36:	68db      	ldr	r3, [r3, #12]
 801fc38:	627b      	str	r3, [r7, #36]	; 0x24
 801fc3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc3c:	2b00      	cmp	r3, #0
 801fc3e:	d1a7      	bne.n	801fb90 <udp_input+0x90>
 801fc40:	e000      	b.n	801fc44 <udp_input+0x144>
        break;
 801fc42:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 801fc44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc46:	2b00      	cmp	r3, #0
 801fc48:	d101      	bne.n	801fc4e <udp_input+0x14e>
    pcb = uncon_pcb;
 801fc4a:	69fb      	ldr	r3, [r7, #28]
 801fc4c:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801fc4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc50:	2b00      	cmp	r3, #0
 801fc52:	d002      	beq.n	801fc5a <udp_input+0x15a>
    for_us = 1;
 801fc54:	2301      	movs	r3, #1
 801fc56:	76fb      	strb	r3, [r7, #27]
 801fc58:	e00a      	b.n	801fc70 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801fc5a:	683b      	ldr	r3, [r7, #0]
 801fc5c:	3304      	adds	r3, #4
 801fc5e:	681a      	ldr	r2, [r3, #0]
 801fc60:	4b2d      	ldr	r3, [pc, #180]	; (801fd18 <udp_input+0x218>)
 801fc62:	695b      	ldr	r3, [r3, #20]
 801fc64:	429a      	cmp	r2, r3
 801fc66:	bf0c      	ite	eq
 801fc68:	2301      	moveq	r3, #1
 801fc6a:	2300      	movne	r3, #0
 801fc6c:	b2db      	uxtb	r3, r3
 801fc6e:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801fc70:	7efb      	ldrb	r3, [r7, #27]
 801fc72:	2b00      	cmp	r3, #0
 801fc74:	d041      	beq.n	801fcfa <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801fc76:	2108      	movs	r1, #8
 801fc78:	6878      	ldr	r0, [r7, #4]
 801fc7a:	f7f9 f84b 	bl	8018d14 <pbuf_remove_header>
 801fc7e:	4603      	mov	r3, r0
 801fc80:	2b00      	cmp	r3, #0
 801fc82:	d00a      	beq.n	801fc9a <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 801fc84:	4b20      	ldr	r3, [pc, #128]	; (801fd08 <udp_input+0x208>)
 801fc86:	f44f 72b8 	mov.w	r2, #368	; 0x170
 801fc8a:	4925      	ldr	r1, [pc, #148]	; (801fd20 <udp_input+0x220>)
 801fc8c:	4820      	ldr	r0, [pc, #128]	; (801fd10 <udp_input+0x210>)
 801fc8e:	f004 faff 	bl	8024290 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801fc92:	6878      	ldr	r0, [r7, #4]
 801fc94:	f7f9 f8c4 	bl	8018e20 <pbuf_free>
      goto end;
 801fc98:	e032      	b.n	801fd00 <udp_input+0x200>
    }

    if (pcb != NULL) {
 801fc9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fc9c:	2b00      	cmp	r3, #0
 801fc9e:	d012      	beq.n	801fcc6 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 801fca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fca2:	699b      	ldr	r3, [r3, #24]
 801fca4:	2b00      	cmp	r3, #0
 801fca6:	d00a      	beq.n	801fcbe <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 801fca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcaa:	699c      	ldr	r4, [r3, #24]
 801fcac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801fcae:	69d8      	ldr	r0, [r3, #28]
 801fcb0:	8a3b      	ldrh	r3, [r7, #16]
 801fcb2:	9300      	str	r3, [sp, #0]
 801fcb4:	4b1b      	ldr	r3, [pc, #108]	; (801fd24 <udp_input+0x224>)
 801fcb6:	687a      	ldr	r2, [r7, #4]
 801fcb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801fcba:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 801fcbc:	e021      	b.n	801fd02 <udp_input+0x202>
        pbuf_free(p);
 801fcbe:	6878      	ldr	r0, [r7, #4]
 801fcc0:	f7f9 f8ae 	bl	8018e20 <pbuf_free>
        goto end;
 801fcc4:	e01c      	b.n	801fd00 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 801fcc6:	7cfb      	ldrb	r3, [r7, #19]
 801fcc8:	2b00      	cmp	r3, #0
 801fcca:	d112      	bne.n	801fcf2 <udp_input+0x1f2>
 801fccc:	4b12      	ldr	r3, [pc, #72]	; (801fd18 <udp_input+0x218>)
 801fcce:	695b      	ldr	r3, [r3, #20]
 801fcd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801fcd4:	2be0      	cmp	r3, #224	; 0xe0
 801fcd6:	d00c      	beq.n	801fcf2 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 801fcd8:	4b0f      	ldr	r3, [pc, #60]	; (801fd18 <udp_input+0x218>)
 801fcda:	899b      	ldrh	r3, [r3, #12]
 801fcdc:	3308      	adds	r3, #8
 801fcde:	b29b      	uxth	r3, r3
 801fce0:	b21b      	sxth	r3, r3
 801fce2:	4619      	mov	r1, r3
 801fce4:	6878      	ldr	r0, [r7, #4]
 801fce6:	f7f9 f888 	bl	8018dfa <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801fcea:	2103      	movs	r1, #3
 801fcec:	6878      	ldr	r0, [r7, #4]
 801fcee:	f001 fc01 	bl	80214f4 <icmp_dest_unreach>
      pbuf_free(p);
 801fcf2:	6878      	ldr	r0, [r7, #4]
 801fcf4:	f7f9 f894 	bl	8018e20 <pbuf_free>
  return;
 801fcf8:	e003      	b.n	801fd02 <udp_input+0x202>
    pbuf_free(p);
 801fcfa:	6878      	ldr	r0, [r7, #4]
 801fcfc:	f7f9 f890 	bl	8018e20 <pbuf_free>
  return;
 801fd00:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801fd02:	372c      	adds	r7, #44	; 0x2c
 801fd04:	46bd      	mov	sp, r7
 801fd06:	bd90      	pop	{r4, r7, pc}
 801fd08:	080282d8 	.word	0x080282d8
 801fd0c:	0802837c 	.word	0x0802837c
 801fd10:	0802832c 	.word	0x0802832c
 801fd14:	08028394 	.word	0x08028394
 801fd18:	200066a8 	.word	0x200066a8
 801fd1c:	2000c018 	.word	0x2000c018
 801fd20:	080283b0 	.word	0x080283b0
 801fd24:	200066b8 	.word	0x200066b8

0801fd28 <udp_send>:
 *
 * @see udp_disconnect() udp_sendto()
 */
err_t
udp_send(struct udp_pcb *pcb, struct pbuf *p)
{
 801fd28:	b580      	push	{r7, lr}
 801fd2a:	b082      	sub	sp, #8
 801fd2c:	af00      	add	r7, sp, #0
 801fd2e:	6078      	str	r0, [r7, #4]
 801fd30:	6039      	str	r1, [r7, #0]
  LWIP_ERROR("udp_send: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd32:	687b      	ldr	r3, [r7, #4]
 801fd34:	2b00      	cmp	r3, #0
 801fd36:	d109      	bne.n	801fd4c <udp_send+0x24>
 801fd38:	4b11      	ldr	r3, [pc, #68]	; (801fd80 <udp_send+0x58>)
 801fd3a:	f240 12d5 	movw	r2, #469	; 0x1d5
 801fd3e:	4911      	ldr	r1, [pc, #68]	; (801fd84 <udp_send+0x5c>)
 801fd40:	4811      	ldr	r0, [pc, #68]	; (801fd88 <udp_send+0x60>)
 801fd42:	f004 faa5 	bl	8024290 <iprintf>
 801fd46:	f06f 030f 	mvn.w	r3, #15
 801fd4a:	e015      	b.n	801fd78 <udp_send+0x50>
  LWIP_ERROR("udp_send: invalid pbuf", p != NULL, return ERR_ARG);
 801fd4c:	683b      	ldr	r3, [r7, #0]
 801fd4e:	2b00      	cmp	r3, #0
 801fd50:	d109      	bne.n	801fd66 <udp_send+0x3e>
 801fd52:	4b0b      	ldr	r3, [pc, #44]	; (801fd80 <udp_send+0x58>)
 801fd54:	f44f 72eb 	mov.w	r2, #470	; 0x1d6
 801fd58:	490c      	ldr	r1, [pc, #48]	; (801fd8c <udp_send+0x64>)
 801fd5a:	480b      	ldr	r0, [pc, #44]	; (801fd88 <udp_send+0x60>)
 801fd5c:	f004 fa98 	bl	8024290 <iprintf>
 801fd60:	f06f 030f 	mvn.w	r3, #15
 801fd64:	e008      	b.n	801fd78 <udp_send+0x50>
  if (IP_IS_ANY_TYPE_VAL(pcb->remote_ip)) {
    return ERR_VAL;
  }

  /* send to the packet using remote ip and port stored in the pcb */
  return udp_sendto(pcb, p, &pcb->remote_ip, pcb->remote_port);
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	1d1a      	adds	r2, r3, #4
 801fd6a:	687b      	ldr	r3, [r7, #4]
 801fd6c:	8a9b      	ldrh	r3, [r3, #20]
 801fd6e:	6839      	ldr	r1, [r7, #0]
 801fd70:	6878      	ldr	r0, [r7, #4]
 801fd72:	f000 f80d 	bl	801fd90 <udp_sendto>
 801fd76:	4603      	mov	r3, r0
}
 801fd78:	4618      	mov	r0, r3
 801fd7a:	3708      	adds	r7, #8
 801fd7c:	46bd      	mov	sp, r7
 801fd7e:	bd80      	pop	{r7, pc}
 801fd80:	080282d8 	.word	0x080282d8
 801fd84:	080283cc 	.word	0x080283cc
 801fd88:	0802832c 	.word	0x0802832c
 801fd8c:	080283e4 	.word	0x080283e4

0801fd90 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801fd90:	b580      	push	{r7, lr}
 801fd92:	b088      	sub	sp, #32
 801fd94:	af02      	add	r7, sp, #8
 801fd96:	60f8      	str	r0, [r7, #12]
 801fd98:	60b9      	str	r1, [r7, #8]
 801fd9a:	607a      	str	r2, [r7, #4]
 801fd9c:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801fd9e:	68fb      	ldr	r3, [r7, #12]
 801fda0:	2b00      	cmp	r3, #0
 801fda2:	d109      	bne.n	801fdb8 <udp_sendto+0x28>
 801fda4:	4b23      	ldr	r3, [pc, #140]	; (801fe34 <udp_sendto+0xa4>)
 801fda6:	f44f 7206 	mov.w	r2, #536	; 0x218
 801fdaa:	4923      	ldr	r1, [pc, #140]	; (801fe38 <udp_sendto+0xa8>)
 801fdac:	4823      	ldr	r0, [pc, #140]	; (801fe3c <udp_sendto+0xac>)
 801fdae:	f004 fa6f 	bl	8024290 <iprintf>
 801fdb2:	f06f 030f 	mvn.w	r3, #15
 801fdb6:	e038      	b.n	801fe2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801fdb8:	68bb      	ldr	r3, [r7, #8]
 801fdba:	2b00      	cmp	r3, #0
 801fdbc:	d109      	bne.n	801fdd2 <udp_sendto+0x42>
 801fdbe:	4b1d      	ldr	r3, [pc, #116]	; (801fe34 <udp_sendto+0xa4>)
 801fdc0:	f240 2219 	movw	r2, #537	; 0x219
 801fdc4:	491e      	ldr	r1, [pc, #120]	; (801fe40 <udp_sendto+0xb0>)
 801fdc6:	481d      	ldr	r0, [pc, #116]	; (801fe3c <udp_sendto+0xac>)
 801fdc8:	f004 fa62 	bl	8024290 <iprintf>
 801fdcc:	f06f 030f 	mvn.w	r3, #15
 801fdd0:	e02b      	b.n	801fe2a <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	2b00      	cmp	r3, #0
 801fdd6:	d109      	bne.n	801fdec <udp_sendto+0x5c>
 801fdd8:	4b16      	ldr	r3, [pc, #88]	; (801fe34 <udp_sendto+0xa4>)
 801fdda:	f240 221a 	movw	r2, #538	; 0x21a
 801fdde:	4919      	ldr	r1, [pc, #100]	; (801fe44 <udp_sendto+0xb4>)
 801fde0:	4816      	ldr	r0, [pc, #88]	; (801fe3c <udp_sendto+0xac>)
 801fde2:	f004 fa55 	bl	8024290 <iprintf>
 801fde6:	f06f 030f 	mvn.w	r3, #15
 801fdea:	e01e      	b.n	801fe2a <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 801fdec:	68fb      	ldr	r3, [r7, #12]
 801fdee:	7a1b      	ldrb	r3, [r3, #8]
 801fdf0:	2b00      	cmp	r3, #0
 801fdf2:	d006      	beq.n	801fe02 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 801fdf4:	68fb      	ldr	r3, [r7, #12]
 801fdf6:	7a1b      	ldrb	r3, [r3, #8]
 801fdf8:	4618      	mov	r0, r3
 801fdfa:	f7f8 fc83 	bl	8018704 <netif_get_by_index>
 801fdfe:	6178      	str	r0, [r7, #20]
 801fe00:	e003      	b.n	801fe0a <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 801fe02:	6878      	ldr	r0, [r7, #4]
 801fe04:	f001 fc00 	bl	8021608 <ip4_route>
 801fe08:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 801fe0a:	697b      	ldr	r3, [r7, #20]
 801fe0c:	2b00      	cmp	r3, #0
 801fe0e:	d102      	bne.n	801fe16 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 801fe10:	f06f 0303 	mvn.w	r3, #3
 801fe14:	e009      	b.n	801fe2a <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 801fe16:	887a      	ldrh	r2, [r7, #2]
 801fe18:	697b      	ldr	r3, [r7, #20]
 801fe1a:	9300      	str	r3, [sp, #0]
 801fe1c:	4613      	mov	r3, r2
 801fe1e:	687a      	ldr	r2, [r7, #4]
 801fe20:	68b9      	ldr	r1, [r7, #8]
 801fe22:	68f8      	ldr	r0, [r7, #12]
 801fe24:	f000 f810 	bl	801fe48 <udp_sendto_if>
 801fe28:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801fe2a:	4618      	mov	r0, r3
 801fe2c:	3718      	adds	r7, #24
 801fe2e:	46bd      	mov	sp, r7
 801fe30:	bd80      	pop	{r7, pc}
 801fe32:	bf00      	nop
 801fe34:	080282d8 	.word	0x080282d8
 801fe38:	080283fc 	.word	0x080283fc
 801fe3c:	0802832c 	.word	0x0802832c
 801fe40:	08028414 	.word	0x08028414
 801fe44:	08028430 	.word	0x08028430

0801fe48 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 801fe48:	b580      	push	{r7, lr}
 801fe4a:	b088      	sub	sp, #32
 801fe4c:	af02      	add	r7, sp, #8
 801fe4e:	60f8      	str	r0, [r7, #12]
 801fe50:	60b9      	str	r1, [r7, #8]
 801fe52:	607a      	str	r2, [r7, #4]
 801fe54:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 801fe56:	68fb      	ldr	r3, [r7, #12]
 801fe58:	2b00      	cmp	r3, #0
 801fe5a:	d109      	bne.n	801fe70 <udp_sendto_if+0x28>
 801fe5c:	4b2e      	ldr	r3, [pc, #184]	; (801ff18 <udp_sendto_if+0xd0>)
 801fe5e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801fe62:	492e      	ldr	r1, [pc, #184]	; (801ff1c <udp_sendto_if+0xd4>)
 801fe64:	482e      	ldr	r0, [pc, #184]	; (801ff20 <udp_sendto_if+0xd8>)
 801fe66:	f004 fa13 	bl	8024290 <iprintf>
 801fe6a:	f06f 030f 	mvn.w	r3, #15
 801fe6e:	e04f      	b.n	801ff10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801fe70:	68bb      	ldr	r3, [r7, #8]
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d109      	bne.n	801fe8a <udp_sendto_if+0x42>
 801fe76:	4b28      	ldr	r3, [pc, #160]	; (801ff18 <udp_sendto_if+0xd0>)
 801fe78:	f240 2281 	movw	r2, #641	; 0x281
 801fe7c:	4929      	ldr	r1, [pc, #164]	; (801ff24 <udp_sendto_if+0xdc>)
 801fe7e:	4828      	ldr	r0, [pc, #160]	; (801ff20 <udp_sendto_if+0xd8>)
 801fe80:	f004 fa06 	bl	8024290 <iprintf>
 801fe84:	f06f 030f 	mvn.w	r3, #15
 801fe88:	e042      	b.n	801ff10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801fe8a:	687b      	ldr	r3, [r7, #4]
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d109      	bne.n	801fea4 <udp_sendto_if+0x5c>
 801fe90:	4b21      	ldr	r3, [pc, #132]	; (801ff18 <udp_sendto_if+0xd0>)
 801fe92:	f240 2282 	movw	r2, #642	; 0x282
 801fe96:	4924      	ldr	r1, [pc, #144]	; (801ff28 <udp_sendto_if+0xe0>)
 801fe98:	4821      	ldr	r0, [pc, #132]	; (801ff20 <udp_sendto_if+0xd8>)
 801fe9a:	f004 f9f9 	bl	8024290 <iprintf>
 801fe9e:	f06f 030f 	mvn.w	r3, #15
 801fea2:	e035      	b.n	801ff10 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 801fea4:	6a3b      	ldr	r3, [r7, #32]
 801fea6:	2b00      	cmp	r3, #0
 801fea8:	d109      	bne.n	801febe <udp_sendto_if+0x76>
 801feaa:	4b1b      	ldr	r3, [pc, #108]	; (801ff18 <udp_sendto_if+0xd0>)
 801feac:	f240 2283 	movw	r2, #643	; 0x283
 801feb0:	491e      	ldr	r1, [pc, #120]	; (801ff2c <udp_sendto_if+0xe4>)
 801feb2:	481b      	ldr	r0, [pc, #108]	; (801ff20 <udp_sendto_if+0xd8>)
 801feb4:	f004 f9ec 	bl	8024290 <iprintf>
 801feb8:	f06f 030f 	mvn.w	r3, #15
 801febc:	e028      	b.n	801ff10 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801febe:	68fb      	ldr	r3, [r7, #12]
 801fec0:	2b00      	cmp	r3, #0
 801fec2:	d009      	beq.n	801fed8 <udp_sendto_if+0x90>
 801fec4:	68fb      	ldr	r3, [r7, #12]
 801fec6:	681b      	ldr	r3, [r3, #0]
 801fec8:	2b00      	cmp	r3, #0
 801feca:	d005      	beq.n	801fed8 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 801fecc:	68fb      	ldr	r3, [r7, #12]
 801fece:	681b      	ldr	r3, [r3, #0]
 801fed0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801fed4:	2be0      	cmp	r3, #224	; 0xe0
 801fed6:	d103      	bne.n	801fee0 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801fed8:	6a3b      	ldr	r3, [r7, #32]
 801feda:	3304      	adds	r3, #4
 801fedc:	617b      	str	r3, [r7, #20]
 801fede:	e00b      	b.n	801fef8 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801fee0:	68fb      	ldr	r3, [r7, #12]
 801fee2:	681a      	ldr	r2, [r3, #0]
 801fee4:	6a3b      	ldr	r3, [r7, #32]
 801fee6:	3304      	adds	r3, #4
 801fee8:	681b      	ldr	r3, [r3, #0]
 801feea:	429a      	cmp	r2, r3
 801feec:	d002      	beq.n	801fef4 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 801feee:	f06f 0303 	mvn.w	r3, #3
 801fef2:	e00d      	b.n	801ff10 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 801fef4:	68fb      	ldr	r3, [r7, #12]
 801fef6:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801fef8:	887a      	ldrh	r2, [r7, #2]
 801fefa:	697b      	ldr	r3, [r7, #20]
 801fefc:	9301      	str	r3, [sp, #4]
 801fefe:	6a3b      	ldr	r3, [r7, #32]
 801ff00:	9300      	str	r3, [sp, #0]
 801ff02:	4613      	mov	r3, r2
 801ff04:	687a      	ldr	r2, [r7, #4]
 801ff06:	68b9      	ldr	r1, [r7, #8]
 801ff08:	68f8      	ldr	r0, [r7, #12]
 801ff0a:	f000 f811 	bl	801ff30 <udp_sendto_if_src>
 801ff0e:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 801ff10:	4618      	mov	r0, r3
 801ff12:	3718      	adds	r7, #24
 801ff14:	46bd      	mov	sp, r7
 801ff16:	bd80      	pop	{r7, pc}
 801ff18:	080282d8 	.word	0x080282d8
 801ff1c:	0802844c 	.word	0x0802844c
 801ff20:	0802832c 	.word	0x0802832c
 801ff24:	08028468 	.word	0x08028468
 801ff28:	08028484 	.word	0x08028484
 801ff2c:	080284a4 	.word	0x080284a4

0801ff30 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 801ff30:	b580      	push	{r7, lr}
 801ff32:	b08c      	sub	sp, #48	; 0x30
 801ff34:	af04      	add	r7, sp, #16
 801ff36:	60f8      	str	r0, [r7, #12]
 801ff38:	60b9      	str	r1, [r7, #8]
 801ff3a:	607a      	str	r2, [r7, #4]
 801ff3c:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 801ff3e:	68fb      	ldr	r3, [r7, #12]
 801ff40:	2b00      	cmp	r3, #0
 801ff42:	d109      	bne.n	801ff58 <udp_sendto_if_src+0x28>
 801ff44:	4b65      	ldr	r3, [pc, #404]	; (80200dc <udp_sendto_if_src+0x1ac>)
 801ff46:	f240 22d1 	movw	r2, #721	; 0x2d1
 801ff4a:	4965      	ldr	r1, [pc, #404]	; (80200e0 <udp_sendto_if_src+0x1b0>)
 801ff4c:	4865      	ldr	r0, [pc, #404]	; (80200e4 <udp_sendto_if_src+0x1b4>)
 801ff4e:	f004 f99f 	bl	8024290 <iprintf>
 801ff52:	f06f 030f 	mvn.w	r3, #15
 801ff56:	e0bc      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 801ff58:	68bb      	ldr	r3, [r7, #8]
 801ff5a:	2b00      	cmp	r3, #0
 801ff5c:	d109      	bne.n	801ff72 <udp_sendto_if_src+0x42>
 801ff5e:	4b5f      	ldr	r3, [pc, #380]	; (80200dc <udp_sendto_if_src+0x1ac>)
 801ff60:	f240 22d2 	movw	r2, #722	; 0x2d2
 801ff64:	4960      	ldr	r1, [pc, #384]	; (80200e8 <udp_sendto_if_src+0x1b8>)
 801ff66:	485f      	ldr	r0, [pc, #380]	; (80200e4 <udp_sendto_if_src+0x1b4>)
 801ff68:	f004 f992 	bl	8024290 <iprintf>
 801ff6c:	f06f 030f 	mvn.w	r3, #15
 801ff70:	e0af      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	2b00      	cmp	r3, #0
 801ff76:	d109      	bne.n	801ff8c <udp_sendto_if_src+0x5c>
 801ff78:	4b58      	ldr	r3, [pc, #352]	; (80200dc <udp_sendto_if_src+0x1ac>)
 801ff7a:	f240 22d3 	movw	r2, #723	; 0x2d3
 801ff7e:	495b      	ldr	r1, [pc, #364]	; (80200ec <udp_sendto_if_src+0x1bc>)
 801ff80:	4858      	ldr	r0, [pc, #352]	; (80200e4 <udp_sendto_if_src+0x1b4>)
 801ff82:	f004 f985 	bl	8024290 <iprintf>
 801ff86:	f06f 030f 	mvn.w	r3, #15
 801ff8a:	e0a2      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 801ff8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d109      	bne.n	801ffa6 <udp_sendto_if_src+0x76>
 801ff92:	4b52      	ldr	r3, [pc, #328]	; (80200dc <udp_sendto_if_src+0x1ac>)
 801ff94:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801ff98:	4955      	ldr	r1, [pc, #340]	; (80200f0 <udp_sendto_if_src+0x1c0>)
 801ff9a:	4852      	ldr	r0, [pc, #328]	; (80200e4 <udp_sendto_if_src+0x1b4>)
 801ff9c:	f004 f978 	bl	8024290 <iprintf>
 801ffa0:	f06f 030f 	mvn.w	r3, #15
 801ffa4:	e095      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801ffa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ffa8:	2b00      	cmp	r3, #0
 801ffaa:	d109      	bne.n	801ffc0 <udp_sendto_if_src+0x90>
 801ffac:	4b4b      	ldr	r3, [pc, #300]	; (80200dc <udp_sendto_if_src+0x1ac>)
 801ffae:	f240 22d5 	movw	r2, #725	; 0x2d5
 801ffb2:	4950      	ldr	r1, [pc, #320]	; (80200f4 <udp_sendto_if_src+0x1c4>)
 801ffb4:	484b      	ldr	r0, [pc, #300]	; (80200e4 <udp_sendto_if_src+0x1b4>)
 801ffb6:	f004 f96b 	bl	8024290 <iprintf>
 801ffba:	f06f 030f 	mvn.w	r3, #15
 801ffbe:	e088      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801ffc0:	68fb      	ldr	r3, [r7, #12]
 801ffc2:	8a5b      	ldrh	r3, [r3, #18]
 801ffc4:	2b00      	cmp	r3, #0
 801ffc6:	d10f      	bne.n	801ffe8 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801ffc8:	68f9      	ldr	r1, [r7, #12]
 801ffca:	68fb      	ldr	r3, [r7, #12]
 801ffcc:	8a5b      	ldrh	r3, [r3, #18]
 801ffce:	461a      	mov	r2, r3
 801ffd0:	68f8      	ldr	r0, [r7, #12]
 801ffd2:	f000 f893 	bl	80200fc <udp_bind>
 801ffd6:	4603      	mov	r3, r0
 801ffd8:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801ffda:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ffde:	2b00      	cmp	r3, #0
 801ffe0:	d002      	beq.n	801ffe8 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801ffe2:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801ffe6:	e074      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801ffe8:	68bb      	ldr	r3, [r7, #8]
 801ffea:	891b      	ldrh	r3, [r3, #8]
 801ffec:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 801fff0:	4293      	cmp	r3, r2
 801fff2:	d902      	bls.n	801fffa <udp_sendto_if_src+0xca>
    return ERR_MEM;
 801fff4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 801fff8:	e06b      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801fffa:	2108      	movs	r1, #8
 801fffc:	68b8      	ldr	r0, [r7, #8]
 801fffe:	f7f8 fe79 	bl	8018cf4 <pbuf_add_header>
 8020002:	4603      	mov	r3, r0
 8020004:	2b00      	cmp	r3, #0
 8020006:	d015      	beq.n	8020034 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8020008:	f44f 7220 	mov.w	r2, #640	; 0x280
 802000c:	2108      	movs	r1, #8
 802000e:	2022      	movs	r0, #34	; 0x22
 8020010:	f7f8 fc22 	bl	8018858 <pbuf_alloc>
 8020014:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8020016:	69fb      	ldr	r3, [r7, #28]
 8020018:	2b00      	cmp	r3, #0
 802001a:	d102      	bne.n	8020022 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 802001c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020020:	e057      	b.n	80200d2 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8020022:	68bb      	ldr	r3, [r7, #8]
 8020024:	891b      	ldrh	r3, [r3, #8]
 8020026:	2b00      	cmp	r3, #0
 8020028:	d006      	beq.n	8020038 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 802002a:	68b9      	ldr	r1, [r7, #8]
 802002c:	69f8      	ldr	r0, [r7, #28]
 802002e:	f7f9 f81b 	bl	8019068 <pbuf_chain>
 8020032:	e001      	b.n	8020038 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8020034:	68bb      	ldr	r3, [r7, #8]
 8020036:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8020038:	69fb      	ldr	r3, [r7, #28]
 802003a:	895b      	ldrh	r3, [r3, #10]
 802003c:	2b07      	cmp	r3, #7
 802003e:	d806      	bhi.n	802004e <udp_sendto_if_src+0x11e>
 8020040:	4b26      	ldr	r3, [pc, #152]	; (80200dc <udp_sendto_if_src+0x1ac>)
 8020042:	f240 320d 	movw	r2, #781	; 0x30d
 8020046:	492c      	ldr	r1, [pc, #176]	; (80200f8 <udp_sendto_if_src+0x1c8>)
 8020048:	4826      	ldr	r0, [pc, #152]	; (80200e4 <udp_sendto_if_src+0x1b4>)
 802004a:	f004 f921 	bl	8024290 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 802004e:	69fb      	ldr	r3, [r7, #28]
 8020050:	685b      	ldr	r3, [r3, #4]
 8020052:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8020054:	68fb      	ldr	r3, [r7, #12]
 8020056:	8a5b      	ldrh	r3, [r3, #18]
 8020058:	4618      	mov	r0, r3
 802005a:	f7f7 faef 	bl	801763c <lwip_htons>
 802005e:	4603      	mov	r3, r0
 8020060:	461a      	mov	r2, r3
 8020062:	697b      	ldr	r3, [r7, #20]
 8020064:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8020066:	887b      	ldrh	r3, [r7, #2]
 8020068:	4618      	mov	r0, r3
 802006a:	f7f7 fae7 	bl	801763c <lwip_htons>
 802006e:	4603      	mov	r3, r0
 8020070:	461a      	mov	r2, r3
 8020072:	697b      	ldr	r3, [r7, #20]
 8020074:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8020076:	697b      	ldr	r3, [r7, #20]
 8020078:	2200      	movs	r2, #0
 802007a:	719a      	strb	r2, [r3, #6]
 802007c:	2200      	movs	r2, #0
 802007e:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8020080:	69fb      	ldr	r3, [r7, #28]
 8020082:	891b      	ldrh	r3, [r3, #8]
 8020084:	4618      	mov	r0, r3
 8020086:	f7f7 fad9 	bl	801763c <lwip_htons>
 802008a:	4603      	mov	r3, r0
 802008c:	461a      	mov	r2, r3
 802008e:	697b      	ldr	r3, [r7, #20]
 8020090:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8020092:	2311      	movs	r3, #17
 8020094:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8020096:	68fb      	ldr	r3, [r7, #12]
 8020098:	7adb      	ldrb	r3, [r3, #11]
 802009a:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 802009c:	68fb      	ldr	r3, [r7, #12]
 802009e:	7a9b      	ldrb	r3, [r3, #10]
 80200a0:	7cb9      	ldrb	r1, [r7, #18]
 80200a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80200a4:	9202      	str	r2, [sp, #8]
 80200a6:	7cfa      	ldrb	r2, [r7, #19]
 80200a8:	9201      	str	r2, [sp, #4]
 80200aa:	9300      	str	r3, [sp, #0]
 80200ac:	460b      	mov	r3, r1
 80200ae:	687a      	ldr	r2, [r7, #4]
 80200b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80200b2:	69f8      	ldr	r0, [r7, #28]
 80200b4:	f001 fc90 	bl	80219d8 <ip4_output_if_src>
 80200b8:	4603      	mov	r3, r0
 80200ba:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 80200bc:	69fa      	ldr	r2, [r7, #28]
 80200be:	68bb      	ldr	r3, [r7, #8]
 80200c0:	429a      	cmp	r2, r3
 80200c2:	d004      	beq.n	80200ce <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 80200c4:	69f8      	ldr	r0, [r7, #28]
 80200c6:	f7f8 feab 	bl	8018e20 <pbuf_free>
    q = NULL;
 80200ca:	2300      	movs	r3, #0
 80200cc:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 80200ce:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 80200d2:	4618      	mov	r0, r3
 80200d4:	3720      	adds	r7, #32
 80200d6:	46bd      	mov	sp, r7
 80200d8:	bd80      	pop	{r7, pc}
 80200da:	bf00      	nop
 80200dc:	080282d8 	.word	0x080282d8
 80200e0:	080284c4 	.word	0x080284c4
 80200e4:	0802832c 	.word	0x0802832c
 80200e8:	080284e4 	.word	0x080284e4
 80200ec:	08028504 	.word	0x08028504
 80200f0:	08028528 	.word	0x08028528
 80200f4:	0802854c 	.word	0x0802854c
 80200f8:	08028570 	.word	0x08028570

080200fc <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80200fc:	b580      	push	{r7, lr}
 80200fe:	b086      	sub	sp, #24
 8020100:	af00      	add	r7, sp, #0
 8020102:	60f8      	str	r0, [r7, #12]
 8020104:	60b9      	str	r1, [r7, #8]
 8020106:	4613      	mov	r3, r2
 8020108:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 802010a:	68bb      	ldr	r3, [r7, #8]
 802010c:	2b00      	cmp	r3, #0
 802010e:	d101      	bne.n	8020114 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8020110:	4b39      	ldr	r3, [pc, #228]	; (80201f8 <udp_bind+0xfc>)
 8020112:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8020114:	68fb      	ldr	r3, [r7, #12]
 8020116:	2b00      	cmp	r3, #0
 8020118:	d109      	bne.n	802012e <udp_bind+0x32>
 802011a:	4b38      	ldr	r3, [pc, #224]	; (80201fc <udp_bind+0x100>)
 802011c:	f240 32b7 	movw	r2, #951	; 0x3b7
 8020120:	4937      	ldr	r1, [pc, #220]	; (8020200 <udp_bind+0x104>)
 8020122:	4838      	ldr	r0, [pc, #224]	; (8020204 <udp_bind+0x108>)
 8020124:	f004 f8b4 	bl	8024290 <iprintf>
 8020128:	f06f 030f 	mvn.w	r3, #15
 802012c:	e060      	b.n	80201f0 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 802012e:	2300      	movs	r3, #0
 8020130:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020132:	4b35      	ldr	r3, [pc, #212]	; (8020208 <udp_bind+0x10c>)
 8020134:	681b      	ldr	r3, [r3, #0]
 8020136:	617b      	str	r3, [r7, #20]
 8020138:	e009      	b.n	802014e <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 802013a:	68fa      	ldr	r2, [r7, #12]
 802013c:	697b      	ldr	r3, [r7, #20]
 802013e:	429a      	cmp	r2, r3
 8020140:	d102      	bne.n	8020148 <udp_bind+0x4c>
      rebind = 1;
 8020142:	2301      	movs	r3, #1
 8020144:	74fb      	strb	r3, [r7, #19]
      break;
 8020146:	e005      	b.n	8020154 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8020148:	697b      	ldr	r3, [r7, #20]
 802014a:	68db      	ldr	r3, [r3, #12]
 802014c:	617b      	str	r3, [r7, #20]
 802014e:	697b      	ldr	r3, [r7, #20]
 8020150:	2b00      	cmp	r3, #0
 8020152:	d1f2      	bne.n	802013a <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8020154:	88fb      	ldrh	r3, [r7, #6]
 8020156:	2b00      	cmp	r3, #0
 8020158:	d109      	bne.n	802016e <udp_bind+0x72>
    port = udp_new_port();
 802015a:	f7ff fc35 	bl	801f9c8 <udp_new_port>
 802015e:	4603      	mov	r3, r0
 8020160:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8020162:	88fb      	ldrh	r3, [r7, #6]
 8020164:	2b00      	cmp	r3, #0
 8020166:	d12c      	bne.n	80201c2 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8020168:	f06f 0307 	mvn.w	r3, #7
 802016c:	e040      	b.n	80201f0 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802016e:	4b26      	ldr	r3, [pc, #152]	; (8020208 <udp_bind+0x10c>)
 8020170:	681b      	ldr	r3, [r3, #0]
 8020172:	617b      	str	r3, [r7, #20]
 8020174:	e022      	b.n	80201bc <udp_bind+0xc0>
      if (pcb != ipcb) {
 8020176:	68fa      	ldr	r2, [r7, #12]
 8020178:	697b      	ldr	r3, [r7, #20]
 802017a:	429a      	cmp	r2, r3
 802017c:	d01b      	beq.n	80201b6 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 802017e:	697b      	ldr	r3, [r7, #20]
 8020180:	8a5b      	ldrh	r3, [r3, #18]
 8020182:	88fa      	ldrh	r2, [r7, #6]
 8020184:	429a      	cmp	r2, r3
 8020186:	d116      	bne.n	80201b6 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020188:	697b      	ldr	r3, [r7, #20]
 802018a:	681a      	ldr	r2, [r3, #0]
 802018c:	68bb      	ldr	r3, [r7, #8]
 802018e:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8020190:	429a      	cmp	r2, r3
 8020192:	d00d      	beq.n	80201b0 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8020194:	68bb      	ldr	r3, [r7, #8]
 8020196:	2b00      	cmp	r3, #0
 8020198:	d00a      	beq.n	80201b0 <udp_bind+0xb4>
 802019a:	68bb      	ldr	r3, [r7, #8]
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	2b00      	cmp	r3, #0
 80201a0:	d006      	beq.n	80201b0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80201a2:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 80201a4:	2b00      	cmp	r3, #0
 80201a6:	d003      	beq.n	80201b0 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 80201a8:	697b      	ldr	r3, [r7, #20]
 80201aa:	681b      	ldr	r3, [r3, #0]
 80201ac:	2b00      	cmp	r3, #0
 80201ae:	d102      	bne.n	80201b6 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 80201b0:	f06f 0307 	mvn.w	r3, #7
 80201b4:	e01c      	b.n	80201f0 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80201b6:	697b      	ldr	r3, [r7, #20]
 80201b8:	68db      	ldr	r3, [r3, #12]
 80201ba:	617b      	str	r3, [r7, #20]
 80201bc:	697b      	ldr	r3, [r7, #20]
 80201be:	2b00      	cmp	r3, #0
 80201c0:	d1d9      	bne.n	8020176 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 80201c2:	68bb      	ldr	r3, [r7, #8]
 80201c4:	2b00      	cmp	r3, #0
 80201c6:	d002      	beq.n	80201ce <udp_bind+0xd2>
 80201c8:	68bb      	ldr	r3, [r7, #8]
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	e000      	b.n	80201d0 <udp_bind+0xd4>
 80201ce:	2300      	movs	r3, #0
 80201d0:	68fa      	ldr	r2, [r7, #12]
 80201d2:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 80201d4:	68fb      	ldr	r3, [r7, #12]
 80201d6:	88fa      	ldrh	r2, [r7, #6]
 80201d8:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80201da:	7cfb      	ldrb	r3, [r7, #19]
 80201dc:	2b00      	cmp	r3, #0
 80201de:	d106      	bne.n	80201ee <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80201e0:	4b09      	ldr	r3, [pc, #36]	; (8020208 <udp_bind+0x10c>)
 80201e2:	681a      	ldr	r2, [r3, #0]
 80201e4:	68fb      	ldr	r3, [r7, #12]
 80201e6:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80201e8:	4a07      	ldr	r2, [pc, #28]	; (8020208 <udp_bind+0x10c>)
 80201ea:	68fb      	ldr	r3, [r7, #12]
 80201ec:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80201ee:	2300      	movs	r3, #0
}
 80201f0:	4618      	mov	r0, r3
 80201f2:	3718      	adds	r7, #24
 80201f4:	46bd      	mov	sp, r7
 80201f6:	bd80      	pop	{r7, pc}
 80201f8:	08028e88 	.word	0x08028e88
 80201fc:	080282d8 	.word	0x080282d8
 8020200:	080285a0 	.word	0x080285a0
 8020204:	0802832c 	.word	0x0802832c
 8020208:	2000c018 	.word	0x2000c018

0802020c <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 802020c:	b580      	push	{r7, lr}
 802020e:	b086      	sub	sp, #24
 8020210:	af00      	add	r7, sp, #0
 8020212:	60f8      	str	r0, [r7, #12]
 8020214:	60b9      	str	r1, [r7, #8]
 8020216:	4613      	mov	r3, r2
 8020218:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 802021a:	68fb      	ldr	r3, [r7, #12]
 802021c:	2b00      	cmp	r3, #0
 802021e:	d109      	bne.n	8020234 <udp_connect+0x28>
 8020220:	4b2c      	ldr	r3, [pc, #176]	; (80202d4 <udp_connect+0xc8>)
 8020222:	f240 4235 	movw	r2, #1077	; 0x435
 8020226:	492c      	ldr	r1, [pc, #176]	; (80202d8 <udp_connect+0xcc>)
 8020228:	482c      	ldr	r0, [pc, #176]	; (80202dc <udp_connect+0xd0>)
 802022a:	f004 f831 	bl	8024290 <iprintf>
 802022e:	f06f 030f 	mvn.w	r3, #15
 8020232:	e04b      	b.n	80202cc <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 8020234:	68bb      	ldr	r3, [r7, #8]
 8020236:	2b00      	cmp	r3, #0
 8020238:	d109      	bne.n	802024e <udp_connect+0x42>
 802023a:	4b26      	ldr	r3, [pc, #152]	; (80202d4 <udp_connect+0xc8>)
 802023c:	f240 4236 	movw	r2, #1078	; 0x436
 8020240:	4927      	ldr	r1, [pc, #156]	; (80202e0 <udp_connect+0xd4>)
 8020242:	4826      	ldr	r0, [pc, #152]	; (80202dc <udp_connect+0xd0>)
 8020244:	f004 f824 	bl	8024290 <iprintf>
 8020248:	f06f 030f 	mvn.w	r3, #15
 802024c:	e03e      	b.n	80202cc <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 802024e:	68fb      	ldr	r3, [r7, #12]
 8020250:	8a5b      	ldrh	r3, [r3, #18]
 8020252:	2b00      	cmp	r3, #0
 8020254:	d10f      	bne.n	8020276 <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8020256:	68f9      	ldr	r1, [r7, #12]
 8020258:	68fb      	ldr	r3, [r7, #12]
 802025a:	8a5b      	ldrh	r3, [r3, #18]
 802025c:	461a      	mov	r2, r3
 802025e:	68f8      	ldr	r0, [r7, #12]
 8020260:	f7ff ff4c 	bl	80200fc <udp_bind>
 8020264:	4603      	mov	r3, r0
 8020266:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8020268:	f997 3013 	ldrsb.w	r3, [r7, #19]
 802026c:	2b00      	cmp	r3, #0
 802026e:	d002      	beq.n	8020276 <udp_connect+0x6a>
      return err;
 8020270:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8020274:	e02a      	b.n	80202cc <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 8020276:	68bb      	ldr	r3, [r7, #8]
 8020278:	2b00      	cmp	r3, #0
 802027a:	d002      	beq.n	8020282 <udp_connect+0x76>
 802027c:	68bb      	ldr	r3, [r7, #8]
 802027e:	681b      	ldr	r3, [r3, #0]
 8020280:	e000      	b.n	8020284 <udp_connect+0x78>
 8020282:	2300      	movs	r3, #0
 8020284:	68fa      	ldr	r2, [r7, #12]
 8020286:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8020288:	68fb      	ldr	r3, [r7, #12]
 802028a:	88fa      	ldrh	r2, [r7, #6]
 802028c:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 802028e:	68fb      	ldr	r3, [r7, #12]
 8020290:	7c1b      	ldrb	r3, [r3, #16]
 8020292:	f043 0304 	orr.w	r3, r3, #4
 8020296:	b2da      	uxtb	r2, r3
 8020298:	68fb      	ldr	r3, [r7, #12]
 802029a:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 802029c:	4b11      	ldr	r3, [pc, #68]	; (80202e4 <udp_connect+0xd8>)
 802029e:	681b      	ldr	r3, [r3, #0]
 80202a0:	617b      	str	r3, [r7, #20]
 80202a2:	e008      	b.n	80202b6 <udp_connect+0xaa>
    if (pcb == ipcb) {
 80202a4:	68fa      	ldr	r2, [r7, #12]
 80202a6:	697b      	ldr	r3, [r7, #20]
 80202a8:	429a      	cmp	r2, r3
 80202aa:	d101      	bne.n	80202b0 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 80202ac:	2300      	movs	r3, #0
 80202ae:	e00d      	b.n	80202cc <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80202b0:	697b      	ldr	r3, [r7, #20]
 80202b2:	68db      	ldr	r3, [r3, #12]
 80202b4:	617b      	str	r3, [r7, #20]
 80202b6:	697b      	ldr	r3, [r7, #20]
 80202b8:	2b00      	cmp	r3, #0
 80202ba:	d1f3      	bne.n	80202a4 <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 80202bc:	4b09      	ldr	r3, [pc, #36]	; (80202e4 <udp_connect+0xd8>)
 80202be:	681a      	ldr	r2, [r3, #0]
 80202c0:	68fb      	ldr	r3, [r7, #12]
 80202c2:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 80202c4:	4a07      	ldr	r2, [pc, #28]	; (80202e4 <udp_connect+0xd8>)
 80202c6:	68fb      	ldr	r3, [r7, #12]
 80202c8:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 80202ca:	2300      	movs	r3, #0
}
 80202cc:	4618      	mov	r0, r3
 80202ce:	3718      	adds	r7, #24
 80202d0:	46bd      	mov	sp, r7
 80202d2:	bd80      	pop	{r7, pc}
 80202d4:	080282d8 	.word	0x080282d8
 80202d8:	080285b8 	.word	0x080285b8
 80202dc:	0802832c 	.word	0x0802832c
 80202e0:	080285d4 	.word	0x080285d4
 80202e4:	2000c018 	.word	0x2000c018

080202e8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80202e8:	b580      	push	{r7, lr}
 80202ea:	b084      	sub	sp, #16
 80202ec:	af00      	add	r7, sp, #0
 80202ee:	60f8      	str	r0, [r7, #12]
 80202f0:	60b9      	str	r1, [r7, #8]
 80202f2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80202f4:	68fb      	ldr	r3, [r7, #12]
 80202f6:	2b00      	cmp	r3, #0
 80202f8:	d107      	bne.n	802030a <udp_recv+0x22>
 80202fa:	4b08      	ldr	r3, [pc, #32]	; (802031c <udp_recv+0x34>)
 80202fc:	f240 428a 	movw	r2, #1162	; 0x48a
 8020300:	4907      	ldr	r1, [pc, #28]	; (8020320 <udp_recv+0x38>)
 8020302:	4808      	ldr	r0, [pc, #32]	; (8020324 <udp_recv+0x3c>)
 8020304:	f003 ffc4 	bl	8024290 <iprintf>
 8020308:	e005      	b.n	8020316 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 802030a:	68fb      	ldr	r3, [r7, #12]
 802030c:	68ba      	ldr	r2, [r7, #8]
 802030e:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 8020310:	68fb      	ldr	r3, [r7, #12]
 8020312:	687a      	ldr	r2, [r7, #4]
 8020314:	61da      	str	r2, [r3, #28]
}
 8020316:	3710      	adds	r7, #16
 8020318:	46bd      	mov	sp, r7
 802031a:	bd80      	pop	{r7, pc}
 802031c:	080282d8 	.word	0x080282d8
 8020320:	0802860c 	.word	0x0802860c
 8020324:	0802832c 	.word	0x0802832c

08020328 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8020328:	b580      	push	{r7, lr}
 802032a:	b084      	sub	sp, #16
 802032c:	af00      	add	r7, sp, #0
 802032e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8020330:	687b      	ldr	r3, [r7, #4]
 8020332:	2b00      	cmp	r3, #0
 8020334:	d107      	bne.n	8020346 <udp_remove+0x1e>
 8020336:	4b19      	ldr	r3, [pc, #100]	; (802039c <udp_remove+0x74>)
 8020338:	f240 42a1 	movw	r2, #1185	; 0x4a1
 802033c:	4918      	ldr	r1, [pc, #96]	; (80203a0 <udp_remove+0x78>)
 802033e:	4819      	ldr	r0, [pc, #100]	; (80203a4 <udp_remove+0x7c>)
 8020340:	f003 ffa6 	bl	8024290 <iprintf>
 8020344:	e026      	b.n	8020394 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8020346:	4b18      	ldr	r3, [pc, #96]	; (80203a8 <udp_remove+0x80>)
 8020348:	681b      	ldr	r3, [r3, #0]
 802034a:	687a      	ldr	r2, [r7, #4]
 802034c:	429a      	cmp	r2, r3
 802034e:	d105      	bne.n	802035c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8020350:	4b15      	ldr	r3, [pc, #84]	; (80203a8 <udp_remove+0x80>)
 8020352:	681b      	ldr	r3, [r3, #0]
 8020354:	68db      	ldr	r3, [r3, #12]
 8020356:	4a14      	ldr	r2, [pc, #80]	; (80203a8 <udp_remove+0x80>)
 8020358:	6013      	str	r3, [r2, #0]
 802035a:	e017      	b.n	802038c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 802035c:	4b12      	ldr	r3, [pc, #72]	; (80203a8 <udp_remove+0x80>)
 802035e:	681b      	ldr	r3, [r3, #0]
 8020360:	60fb      	str	r3, [r7, #12]
 8020362:	e010      	b.n	8020386 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8020364:	68fb      	ldr	r3, [r7, #12]
 8020366:	68db      	ldr	r3, [r3, #12]
 8020368:	2b00      	cmp	r3, #0
 802036a:	d009      	beq.n	8020380 <udp_remove+0x58>
 802036c:	68fb      	ldr	r3, [r7, #12]
 802036e:	68db      	ldr	r3, [r3, #12]
 8020370:	687a      	ldr	r2, [r7, #4]
 8020372:	429a      	cmp	r2, r3
 8020374:	d104      	bne.n	8020380 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8020376:	687b      	ldr	r3, [r7, #4]
 8020378:	68da      	ldr	r2, [r3, #12]
 802037a:	68fb      	ldr	r3, [r7, #12]
 802037c:	60da      	str	r2, [r3, #12]
        break;
 802037e:	e005      	b.n	802038c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8020380:	68fb      	ldr	r3, [r7, #12]
 8020382:	68db      	ldr	r3, [r3, #12]
 8020384:	60fb      	str	r3, [r7, #12]
 8020386:	68fb      	ldr	r3, [r7, #12]
 8020388:	2b00      	cmp	r3, #0
 802038a:	d1eb      	bne.n	8020364 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 802038c:	6879      	ldr	r1, [r7, #4]
 802038e:	2000      	movs	r0, #0
 8020390:	f7f7 fea2 	bl	80180d8 <memp_free>
}
 8020394:	3710      	adds	r7, #16
 8020396:	46bd      	mov	sp, r7
 8020398:	bd80      	pop	{r7, pc}
 802039a:	bf00      	nop
 802039c:	080282d8 	.word	0x080282d8
 80203a0:	08028624 	.word	0x08028624
 80203a4:	0802832c 	.word	0x0802832c
 80203a8:	2000c018 	.word	0x2000c018

080203ac <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 80203ac:	b580      	push	{r7, lr}
 80203ae:	b082      	sub	sp, #8
 80203b0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 80203b2:	2000      	movs	r0, #0
 80203b4:	f7f7 fe1a 	bl	8017fec <memp_malloc>
 80203b8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 80203ba:	687b      	ldr	r3, [r7, #4]
 80203bc:	2b00      	cmp	r3, #0
 80203be:	d007      	beq.n	80203d0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80203c0:	2220      	movs	r2, #32
 80203c2:	2100      	movs	r1, #0
 80203c4:	6878      	ldr	r0, [r7, #4]
 80203c6:	f003 fe7b 	bl	80240c0 <memset>
    pcb->ttl = UDP_TTL;
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	22ff      	movs	r2, #255	; 0xff
 80203ce:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80203d0:	687b      	ldr	r3, [r7, #4]
}
 80203d2:	4618      	mov	r0, r3
 80203d4:	3708      	adds	r7, #8
 80203d6:	46bd      	mov	sp, r7
 80203d8:	bd80      	pop	{r7, pc}

080203da <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80203da:	b580      	push	{r7, lr}
 80203dc:	b084      	sub	sp, #16
 80203de:	af00      	add	r7, sp, #0
 80203e0:	4603      	mov	r3, r0
 80203e2:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80203e4:	f7ff ffe2 	bl	80203ac <udp_new>
 80203e8:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80203ea:	68fb      	ldr	r3, [r7, #12]
}
 80203ec:	4618      	mov	r0, r3
 80203ee:	3710      	adds	r7, #16
 80203f0:	46bd      	mov	sp, r7
 80203f2:	bd80      	pop	{r7, pc}

080203f4 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80203f4:	b480      	push	{r7}
 80203f6:	b085      	sub	sp, #20
 80203f8:	af00      	add	r7, sp, #0
 80203fa:	6078      	str	r0, [r7, #4]
 80203fc:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	2b00      	cmp	r3, #0
 8020402:	d01e      	beq.n	8020442 <udp_netif_ip_addr_changed+0x4e>
 8020404:	687b      	ldr	r3, [r7, #4]
 8020406:	681b      	ldr	r3, [r3, #0]
 8020408:	2b00      	cmp	r3, #0
 802040a:	d01a      	beq.n	8020442 <udp_netif_ip_addr_changed+0x4e>
 802040c:	683b      	ldr	r3, [r7, #0]
 802040e:	2b00      	cmp	r3, #0
 8020410:	d017      	beq.n	8020442 <udp_netif_ip_addr_changed+0x4e>
 8020412:	683b      	ldr	r3, [r7, #0]
 8020414:	681b      	ldr	r3, [r3, #0]
 8020416:	2b00      	cmp	r3, #0
 8020418:	d013      	beq.n	8020442 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 802041a:	4b0d      	ldr	r3, [pc, #52]	; (8020450 <udp_netif_ip_addr_changed+0x5c>)
 802041c:	681b      	ldr	r3, [r3, #0]
 802041e:	60fb      	str	r3, [r7, #12]
 8020420:	e00c      	b.n	802043c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8020422:	68fb      	ldr	r3, [r7, #12]
 8020424:	681a      	ldr	r2, [r3, #0]
 8020426:	687b      	ldr	r3, [r7, #4]
 8020428:	681b      	ldr	r3, [r3, #0]
 802042a:	429a      	cmp	r2, r3
 802042c:	d103      	bne.n	8020436 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 802042e:	683b      	ldr	r3, [r7, #0]
 8020430:	681a      	ldr	r2, [r3, #0]
 8020432:	68fb      	ldr	r3, [r7, #12]
 8020434:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8020436:	68fb      	ldr	r3, [r7, #12]
 8020438:	68db      	ldr	r3, [r3, #12]
 802043a:	60fb      	str	r3, [r7, #12]
 802043c:	68fb      	ldr	r3, [r7, #12]
 802043e:	2b00      	cmp	r3, #0
 8020440:	d1ef      	bne.n	8020422 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8020442:	bf00      	nop
 8020444:	3714      	adds	r7, #20
 8020446:	46bd      	mov	sp, r7
 8020448:	f85d 7b04 	ldr.w	r7, [sp], #4
 802044c:	4770      	bx	lr
 802044e:	bf00      	nop
 8020450:	2000c018 	.word	0x2000c018

08020454 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8020454:	b580      	push	{r7, lr}
 8020456:	b082      	sub	sp, #8
 8020458:	af00      	add	r7, sp, #0
 802045a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 802045c:	4915      	ldr	r1, [pc, #84]	; (80204b4 <etharp_free_entry+0x60>)
 802045e:	687a      	ldr	r2, [r7, #4]
 8020460:	4613      	mov	r3, r2
 8020462:	005b      	lsls	r3, r3, #1
 8020464:	4413      	add	r3, r2
 8020466:	00db      	lsls	r3, r3, #3
 8020468:	440b      	add	r3, r1
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	2b00      	cmp	r3, #0
 802046e:	d013      	beq.n	8020498 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8020470:	4910      	ldr	r1, [pc, #64]	; (80204b4 <etharp_free_entry+0x60>)
 8020472:	687a      	ldr	r2, [r7, #4]
 8020474:	4613      	mov	r3, r2
 8020476:	005b      	lsls	r3, r3, #1
 8020478:	4413      	add	r3, r2
 802047a:	00db      	lsls	r3, r3, #3
 802047c:	440b      	add	r3, r1
 802047e:	681b      	ldr	r3, [r3, #0]
 8020480:	4618      	mov	r0, r3
 8020482:	f7f8 fccd 	bl	8018e20 <pbuf_free>
    arp_table[i].q = NULL;
 8020486:	490b      	ldr	r1, [pc, #44]	; (80204b4 <etharp_free_entry+0x60>)
 8020488:	687a      	ldr	r2, [r7, #4]
 802048a:	4613      	mov	r3, r2
 802048c:	005b      	lsls	r3, r3, #1
 802048e:	4413      	add	r3, r2
 8020490:	00db      	lsls	r3, r3, #3
 8020492:	440b      	add	r3, r1
 8020494:	2200      	movs	r2, #0
 8020496:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8020498:	4906      	ldr	r1, [pc, #24]	; (80204b4 <etharp_free_entry+0x60>)
 802049a:	687a      	ldr	r2, [r7, #4]
 802049c:	4613      	mov	r3, r2
 802049e:	005b      	lsls	r3, r3, #1
 80204a0:	4413      	add	r3, r2
 80204a2:	00db      	lsls	r3, r3, #3
 80204a4:	440b      	add	r3, r1
 80204a6:	3314      	adds	r3, #20
 80204a8:	2200      	movs	r2, #0
 80204aa:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80204ac:	bf00      	nop
 80204ae:	3708      	adds	r7, #8
 80204b0:	46bd      	mov	sp, r7
 80204b2:	bd80      	pop	{r7, pc}
 80204b4:	2000c01c 	.word	0x2000c01c

080204b8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80204b8:	b580      	push	{r7, lr}
 80204ba:	b082      	sub	sp, #8
 80204bc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80204be:	2300      	movs	r3, #0
 80204c0:	607b      	str	r3, [r7, #4]
 80204c2:	e096      	b.n	80205f2 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 80204c4:	494f      	ldr	r1, [pc, #316]	; (8020604 <etharp_tmr+0x14c>)
 80204c6:	687a      	ldr	r2, [r7, #4]
 80204c8:	4613      	mov	r3, r2
 80204ca:	005b      	lsls	r3, r3, #1
 80204cc:	4413      	add	r3, r2
 80204ce:	00db      	lsls	r3, r3, #3
 80204d0:	440b      	add	r3, r1
 80204d2:	3314      	adds	r3, #20
 80204d4:	781b      	ldrb	r3, [r3, #0]
 80204d6:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80204d8:	78fb      	ldrb	r3, [r7, #3]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	f000 8086 	beq.w	80205ec <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80204e0:	4948      	ldr	r1, [pc, #288]	; (8020604 <etharp_tmr+0x14c>)
 80204e2:	687a      	ldr	r2, [r7, #4]
 80204e4:	4613      	mov	r3, r2
 80204e6:	005b      	lsls	r3, r3, #1
 80204e8:	4413      	add	r3, r2
 80204ea:	00db      	lsls	r3, r3, #3
 80204ec:	440b      	add	r3, r1
 80204ee:	3312      	adds	r3, #18
 80204f0:	881b      	ldrh	r3, [r3, #0]
 80204f2:	3301      	adds	r3, #1
 80204f4:	b298      	uxth	r0, r3
 80204f6:	4943      	ldr	r1, [pc, #268]	; (8020604 <etharp_tmr+0x14c>)
 80204f8:	687a      	ldr	r2, [r7, #4]
 80204fa:	4613      	mov	r3, r2
 80204fc:	005b      	lsls	r3, r3, #1
 80204fe:	4413      	add	r3, r2
 8020500:	00db      	lsls	r3, r3, #3
 8020502:	440b      	add	r3, r1
 8020504:	3312      	adds	r3, #18
 8020506:	4602      	mov	r2, r0
 8020508:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 802050a:	493e      	ldr	r1, [pc, #248]	; (8020604 <etharp_tmr+0x14c>)
 802050c:	687a      	ldr	r2, [r7, #4]
 802050e:	4613      	mov	r3, r2
 8020510:	005b      	lsls	r3, r3, #1
 8020512:	4413      	add	r3, r2
 8020514:	00db      	lsls	r3, r3, #3
 8020516:	440b      	add	r3, r1
 8020518:	3312      	adds	r3, #18
 802051a:	881b      	ldrh	r3, [r3, #0]
 802051c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8020520:	d215      	bcs.n	802054e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8020522:	4938      	ldr	r1, [pc, #224]	; (8020604 <etharp_tmr+0x14c>)
 8020524:	687a      	ldr	r2, [r7, #4]
 8020526:	4613      	mov	r3, r2
 8020528:	005b      	lsls	r3, r3, #1
 802052a:	4413      	add	r3, r2
 802052c:	00db      	lsls	r3, r3, #3
 802052e:	440b      	add	r3, r1
 8020530:	3314      	adds	r3, #20
 8020532:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8020534:	2b01      	cmp	r3, #1
 8020536:	d10e      	bne.n	8020556 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8020538:	4932      	ldr	r1, [pc, #200]	; (8020604 <etharp_tmr+0x14c>)
 802053a:	687a      	ldr	r2, [r7, #4]
 802053c:	4613      	mov	r3, r2
 802053e:	005b      	lsls	r3, r3, #1
 8020540:	4413      	add	r3, r2
 8020542:	00db      	lsls	r3, r3, #3
 8020544:	440b      	add	r3, r1
 8020546:	3312      	adds	r3, #18
 8020548:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 802054a:	2b04      	cmp	r3, #4
 802054c:	d903      	bls.n	8020556 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 802054e:	6878      	ldr	r0, [r7, #4]
 8020550:	f7ff ff80 	bl	8020454 <etharp_free_entry>
 8020554:	e04a      	b.n	80205ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8020556:	492b      	ldr	r1, [pc, #172]	; (8020604 <etharp_tmr+0x14c>)
 8020558:	687a      	ldr	r2, [r7, #4]
 802055a:	4613      	mov	r3, r2
 802055c:	005b      	lsls	r3, r3, #1
 802055e:	4413      	add	r3, r2
 8020560:	00db      	lsls	r3, r3, #3
 8020562:	440b      	add	r3, r1
 8020564:	3314      	adds	r3, #20
 8020566:	781b      	ldrb	r3, [r3, #0]
 8020568:	2b03      	cmp	r3, #3
 802056a:	d10a      	bne.n	8020582 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 802056c:	4925      	ldr	r1, [pc, #148]	; (8020604 <etharp_tmr+0x14c>)
 802056e:	687a      	ldr	r2, [r7, #4]
 8020570:	4613      	mov	r3, r2
 8020572:	005b      	lsls	r3, r3, #1
 8020574:	4413      	add	r3, r2
 8020576:	00db      	lsls	r3, r3, #3
 8020578:	440b      	add	r3, r1
 802057a:	3314      	adds	r3, #20
 802057c:	2204      	movs	r2, #4
 802057e:	701a      	strb	r2, [r3, #0]
 8020580:	e034      	b.n	80205ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8020582:	4920      	ldr	r1, [pc, #128]	; (8020604 <etharp_tmr+0x14c>)
 8020584:	687a      	ldr	r2, [r7, #4]
 8020586:	4613      	mov	r3, r2
 8020588:	005b      	lsls	r3, r3, #1
 802058a:	4413      	add	r3, r2
 802058c:	00db      	lsls	r3, r3, #3
 802058e:	440b      	add	r3, r1
 8020590:	3314      	adds	r3, #20
 8020592:	781b      	ldrb	r3, [r3, #0]
 8020594:	2b04      	cmp	r3, #4
 8020596:	d10a      	bne.n	80205ae <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8020598:	491a      	ldr	r1, [pc, #104]	; (8020604 <etharp_tmr+0x14c>)
 802059a:	687a      	ldr	r2, [r7, #4]
 802059c:	4613      	mov	r3, r2
 802059e:	005b      	lsls	r3, r3, #1
 80205a0:	4413      	add	r3, r2
 80205a2:	00db      	lsls	r3, r3, #3
 80205a4:	440b      	add	r3, r1
 80205a6:	3314      	adds	r3, #20
 80205a8:	2202      	movs	r2, #2
 80205aa:	701a      	strb	r2, [r3, #0]
 80205ac:	e01e      	b.n	80205ec <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80205ae:	4915      	ldr	r1, [pc, #84]	; (8020604 <etharp_tmr+0x14c>)
 80205b0:	687a      	ldr	r2, [r7, #4]
 80205b2:	4613      	mov	r3, r2
 80205b4:	005b      	lsls	r3, r3, #1
 80205b6:	4413      	add	r3, r2
 80205b8:	00db      	lsls	r3, r3, #3
 80205ba:	440b      	add	r3, r1
 80205bc:	3314      	adds	r3, #20
 80205be:	781b      	ldrb	r3, [r3, #0]
 80205c0:	2b01      	cmp	r3, #1
 80205c2:	d113      	bne.n	80205ec <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 80205c4:	490f      	ldr	r1, [pc, #60]	; (8020604 <etharp_tmr+0x14c>)
 80205c6:	687a      	ldr	r2, [r7, #4]
 80205c8:	4613      	mov	r3, r2
 80205ca:	005b      	lsls	r3, r3, #1
 80205cc:	4413      	add	r3, r2
 80205ce:	00db      	lsls	r3, r3, #3
 80205d0:	440b      	add	r3, r1
 80205d2:	3308      	adds	r3, #8
 80205d4:	6818      	ldr	r0, [r3, #0]
 80205d6:	687a      	ldr	r2, [r7, #4]
 80205d8:	4613      	mov	r3, r2
 80205da:	005b      	lsls	r3, r3, #1
 80205dc:	4413      	add	r3, r2
 80205de:	00db      	lsls	r3, r3, #3
 80205e0:	4a08      	ldr	r2, [pc, #32]	; (8020604 <etharp_tmr+0x14c>)
 80205e2:	4413      	add	r3, r2
 80205e4:	3304      	adds	r3, #4
 80205e6:	4619      	mov	r1, r3
 80205e8:	f000 fe6e 	bl	80212c8 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	3301      	adds	r3, #1
 80205f0:	607b      	str	r3, [r7, #4]
 80205f2:	687b      	ldr	r3, [r7, #4]
 80205f4:	2b09      	cmp	r3, #9
 80205f6:	f77f af65 	ble.w	80204c4 <etharp_tmr+0xc>
      }
    }
  }
}
 80205fa:	bf00      	nop
 80205fc:	bf00      	nop
 80205fe:	3708      	adds	r7, #8
 8020600:	46bd      	mov	sp, r7
 8020602:	bd80      	pop	{r7, pc}
 8020604:	2000c01c 	.word	0x2000c01c

08020608 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8020608:	b580      	push	{r7, lr}
 802060a:	b08a      	sub	sp, #40	; 0x28
 802060c:	af00      	add	r7, sp, #0
 802060e:	60f8      	str	r0, [r7, #12]
 8020610:	460b      	mov	r3, r1
 8020612:	607a      	str	r2, [r7, #4]
 8020614:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8020616:	230a      	movs	r3, #10
 8020618:	84fb      	strh	r3, [r7, #38]	; 0x26
 802061a:	230a      	movs	r3, #10
 802061c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 802061e:	230a      	movs	r3, #10
 8020620:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8020622:	2300      	movs	r3, #0
 8020624:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8020626:	230a      	movs	r3, #10
 8020628:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 802062a:	2300      	movs	r3, #0
 802062c:	83bb      	strh	r3, [r7, #28]
 802062e:	2300      	movs	r3, #0
 8020630:	837b      	strh	r3, [r7, #26]
 8020632:	2300      	movs	r3, #0
 8020634:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020636:	2300      	movs	r3, #0
 8020638:	843b      	strh	r3, [r7, #32]
 802063a:	e0ae      	b.n	802079a <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 802063c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020640:	49a6      	ldr	r1, [pc, #664]	; (80208dc <etharp_find_entry+0x2d4>)
 8020642:	4613      	mov	r3, r2
 8020644:	005b      	lsls	r3, r3, #1
 8020646:	4413      	add	r3, r2
 8020648:	00db      	lsls	r3, r3, #3
 802064a:	440b      	add	r3, r1
 802064c:	3314      	adds	r3, #20
 802064e:	781b      	ldrb	r3, [r3, #0]
 8020650:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8020652:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8020656:	2b0a      	cmp	r3, #10
 8020658:	d105      	bne.n	8020666 <etharp_find_entry+0x5e>
 802065a:	7dfb      	ldrb	r3, [r7, #23]
 802065c:	2b00      	cmp	r3, #0
 802065e:	d102      	bne.n	8020666 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8020660:	8c3b      	ldrh	r3, [r7, #32]
 8020662:	847b      	strh	r3, [r7, #34]	; 0x22
 8020664:	e095      	b.n	8020792 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8020666:	7dfb      	ldrb	r3, [r7, #23]
 8020668:	2b00      	cmp	r3, #0
 802066a:	f000 8092 	beq.w	8020792 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 802066e:	7dfb      	ldrb	r3, [r7, #23]
 8020670:	2b01      	cmp	r3, #1
 8020672:	d009      	beq.n	8020688 <etharp_find_entry+0x80>
 8020674:	7dfb      	ldrb	r3, [r7, #23]
 8020676:	2b01      	cmp	r3, #1
 8020678:	d806      	bhi.n	8020688 <etharp_find_entry+0x80>
 802067a:	4b99      	ldr	r3, [pc, #612]	; (80208e0 <etharp_find_entry+0x2d8>)
 802067c:	f240 1223 	movw	r2, #291	; 0x123
 8020680:	4998      	ldr	r1, [pc, #608]	; (80208e4 <etharp_find_entry+0x2dc>)
 8020682:	4899      	ldr	r0, [pc, #612]	; (80208e8 <etharp_find_entry+0x2e0>)
 8020684:	f003 fe04 	bl	8024290 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8020688:	68fb      	ldr	r3, [r7, #12]
 802068a:	2b00      	cmp	r3, #0
 802068c:	d020      	beq.n	80206d0 <etharp_find_entry+0xc8>
 802068e:	68fb      	ldr	r3, [r7, #12]
 8020690:	6819      	ldr	r1, [r3, #0]
 8020692:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020696:	4891      	ldr	r0, [pc, #580]	; (80208dc <etharp_find_entry+0x2d4>)
 8020698:	4613      	mov	r3, r2
 802069a:	005b      	lsls	r3, r3, #1
 802069c:	4413      	add	r3, r2
 802069e:	00db      	lsls	r3, r3, #3
 80206a0:	4403      	add	r3, r0
 80206a2:	3304      	adds	r3, #4
 80206a4:	681b      	ldr	r3, [r3, #0]
 80206a6:	4299      	cmp	r1, r3
 80206a8:	d112      	bne.n	80206d0 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80206aa:	687b      	ldr	r3, [r7, #4]
 80206ac:	2b00      	cmp	r3, #0
 80206ae:	d00c      	beq.n	80206ca <etharp_find_entry+0xc2>
 80206b0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80206b4:	4989      	ldr	r1, [pc, #548]	; (80208dc <etharp_find_entry+0x2d4>)
 80206b6:	4613      	mov	r3, r2
 80206b8:	005b      	lsls	r3, r3, #1
 80206ba:	4413      	add	r3, r2
 80206bc:	00db      	lsls	r3, r3, #3
 80206be:	440b      	add	r3, r1
 80206c0:	3308      	adds	r3, #8
 80206c2:	681b      	ldr	r3, [r3, #0]
 80206c4:	687a      	ldr	r2, [r7, #4]
 80206c6:	429a      	cmp	r2, r3
 80206c8:	d102      	bne.n	80206d0 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 80206ca:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80206ce:	e100      	b.n	80208d2 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 80206d0:	7dfb      	ldrb	r3, [r7, #23]
 80206d2:	2b01      	cmp	r3, #1
 80206d4:	d140      	bne.n	8020758 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 80206d6:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80206da:	4980      	ldr	r1, [pc, #512]	; (80208dc <etharp_find_entry+0x2d4>)
 80206dc:	4613      	mov	r3, r2
 80206de:	005b      	lsls	r3, r3, #1
 80206e0:	4413      	add	r3, r2
 80206e2:	00db      	lsls	r3, r3, #3
 80206e4:	440b      	add	r3, r1
 80206e6:	681b      	ldr	r3, [r3, #0]
 80206e8:	2b00      	cmp	r3, #0
 80206ea:	d01a      	beq.n	8020722 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80206ec:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80206f0:	497a      	ldr	r1, [pc, #488]	; (80208dc <etharp_find_entry+0x2d4>)
 80206f2:	4613      	mov	r3, r2
 80206f4:	005b      	lsls	r3, r3, #1
 80206f6:	4413      	add	r3, r2
 80206f8:	00db      	lsls	r3, r3, #3
 80206fa:	440b      	add	r3, r1
 80206fc:	3312      	adds	r3, #18
 80206fe:	881b      	ldrh	r3, [r3, #0]
 8020700:	8bba      	ldrh	r2, [r7, #28]
 8020702:	429a      	cmp	r2, r3
 8020704:	d845      	bhi.n	8020792 <etharp_find_entry+0x18a>
            old_queue = i;
 8020706:	8c3b      	ldrh	r3, [r7, #32]
 8020708:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 802070a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802070e:	4973      	ldr	r1, [pc, #460]	; (80208dc <etharp_find_entry+0x2d4>)
 8020710:	4613      	mov	r3, r2
 8020712:	005b      	lsls	r3, r3, #1
 8020714:	4413      	add	r3, r2
 8020716:	00db      	lsls	r3, r3, #3
 8020718:	440b      	add	r3, r1
 802071a:	3312      	adds	r3, #18
 802071c:	881b      	ldrh	r3, [r3, #0]
 802071e:	83bb      	strh	r3, [r7, #28]
 8020720:	e037      	b.n	8020792 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8020722:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020726:	496d      	ldr	r1, [pc, #436]	; (80208dc <etharp_find_entry+0x2d4>)
 8020728:	4613      	mov	r3, r2
 802072a:	005b      	lsls	r3, r3, #1
 802072c:	4413      	add	r3, r2
 802072e:	00db      	lsls	r3, r3, #3
 8020730:	440b      	add	r3, r1
 8020732:	3312      	adds	r3, #18
 8020734:	881b      	ldrh	r3, [r3, #0]
 8020736:	8b7a      	ldrh	r2, [r7, #26]
 8020738:	429a      	cmp	r2, r3
 802073a:	d82a      	bhi.n	8020792 <etharp_find_entry+0x18a>
            old_pending = i;
 802073c:	8c3b      	ldrh	r3, [r7, #32]
 802073e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8020740:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020744:	4965      	ldr	r1, [pc, #404]	; (80208dc <etharp_find_entry+0x2d4>)
 8020746:	4613      	mov	r3, r2
 8020748:	005b      	lsls	r3, r3, #1
 802074a:	4413      	add	r3, r2
 802074c:	00db      	lsls	r3, r3, #3
 802074e:	440b      	add	r3, r1
 8020750:	3312      	adds	r3, #18
 8020752:	881b      	ldrh	r3, [r3, #0]
 8020754:	837b      	strh	r3, [r7, #26]
 8020756:	e01c      	b.n	8020792 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8020758:	7dfb      	ldrb	r3, [r7, #23]
 802075a:	2b01      	cmp	r3, #1
 802075c:	d919      	bls.n	8020792 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 802075e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020762:	495e      	ldr	r1, [pc, #376]	; (80208dc <etharp_find_entry+0x2d4>)
 8020764:	4613      	mov	r3, r2
 8020766:	005b      	lsls	r3, r3, #1
 8020768:	4413      	add	r3, r2
 802076a:	00db      	lsls	r3, r3, #3
 802076c:	440b      	add	r3, r1
 802076e:	3312      	adds	r3, #18
 8020770:	881b      	ldrh	r3, [r3, #0]
 8020772:	8b3a      	ldrh	r2, [r7, #24]
 8020774:	429a      	cmp	r2, r3
 8020776:	d80c      	bhi.n	8020792 <etharp_find_entry+0x18a>
            old_stable = i;
 8020778:	8c3b      	ldrh	r3, [r7, #32]
 802077a:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 802077c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020780:	4956      	ldr	r1, [pc, #344]	; (80208dc <etharp_find_entry+0x2d4>)
 8020782:	4613      	mov	r3, r2
 8020784:	005b      	lsls	r3, r3, #1
 8020786:	4413      	add	r3, r2
 8020788:	00db      	lsls	r3, r3, #3
 802078a:	440b      	add	r3, r1
 802078c:	3312      	adds	r3, #18
 802078e:	881b      	ldrh	r3, [r3, #0]
 8020790:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020792:	8c3b      	ldrh	r3, [r7, #32]
 8020794:	3301      	adds	r3, #1
 8020796:	b29b      	uxth	r3, r3
 8020798:	843b      	strh	r3, [r7, #32]
 802079a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802079e:	2b09      	cmp	r3, #9
 80207a0:	f77f af4c 	ble.w	802063c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 80207a4:	7afb      	ldrb	r3, [r7, #11]
 80207a6:	f003 0302 	and.w	r3, r3, #2
 80207aa:	2b00      	cmp	r3, #0
 80207ac:	d108      	bne.n	80207c0 <etharp_find_entry+0x1b8>
 80207ae:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80207b2:	2b0a      	cmp	r3, #10
 80207b4:	d107      	bne.n	80207c6 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 80207b6:	7afb      	ldrb	r3, [r7, #11]
 80207b8:	f003 0301 	and.w	r3, r3, #1
 80207bc:	2b00      	cmp	r3, #0
 80207be:	d102      	bne.n	80207c6 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 80207c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80207c4:	e085      	b.n	80208d2 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 80207c6:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 80207ca:	2b09      	cmp	r3, #9
 80207cc:	dc02      	bgt.n	80207d4 <etharp_find_entry+0x1cc>
    i = empty;
 80207ce:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80207d0:	843b      	strh	r3, [r7, #32]
 80207d2:	e039      	b.n	8020848 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 80207d4:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80207d8:	2b09      	cmp	r3, #9
 80207da:	dc14      	bgt.n	8020806 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80207dc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80207de:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80207e0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80207e4:	493d      	ldr	r1, [pc, #244]	; (80208dc <etharp_find_entry+0x2d4>)
 80207e6:	4613      	mov	r3, r2
 80207e8:	005b      	lsls	r3, r3, #1
 80207ea:	4413      	add	r3, r2
 80207ec:	00db      	lsls	r3, r3, #3
 80207ee:	440b      	add	r3, r1
 80207f0:	681b      	ldr	r3, [r3, #0]
 80207f2:	2b00      	cmp	r3, #0
 80207f4:	d018      	beq.n	8020828 <etharp_find_entry+0x220>
 80207f6:	4b3a      	ldr	r3, [pc, #232]	; (80208e0 <etharp_find_entry+0x2d8>)
 80207f8:	f240 126d 	movw	r2, #365	; 0x16d
 80207fc:	493b      	ldr	r1, [pc, #236]	; (80208ec <etharp_find_entry+0x2e4>)
 80207fe:	483a      	ldr	r0, [pc, #232]	; (80208e8 <etharp_find_entry+0x2e0>)
 8020800:	f003 fd46 	bl	8024290 <iprintf>
 8020804:	e010      	b.n	8020828 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8020806:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 802080a:	2b09      	cmp	r3, #9
 802080c:	dc02      	bgt.n	8020814 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 802080e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8020810:	843b      	strh	r3, [r7, #32]
 8020812:	e009      	b.n	8020828 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8020814:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8020818:	2b09      	cmp	r3, #9
 802081a:	dc02      	bgt.n	8020822 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 802081c:	8bfb      	ldrh	r3, [r7, #30]
 802081e:	843b      	strh	r3, [r7, #32]
 8020820:	e002      	b.n	8020828 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8020822:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8020826:	e054      	b.n	80208d2 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020828:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802082c:	2b09      	cmp	r3, #9
 802082e:	dd06      	ble.n	802083e <etharp_find_entry+0x236>
 8020830:	4b2b      	ldr	r3, [pc, #172]	; (80208e0 <etharp_find_entry+0x2d8>)
 8020832:	f240 127f 	movw	r2, #383	; 0x17f
 8020836:	492e      	ldr	r1, [pc, #184]	; (80208f0 <etharp_find_entry+0x2e8>)
 8020838:	482b      	ldr	r0, [pc, #172]	; (80208e8 <etharp_find_entry+0x2e0>)
 802083a:	f003 fd29 	bl	8024290 <iprintf>
    etharp_free_entry(i);
 802083e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8020842:	4618      	mov	r0, r3
 8020844:	f7ff fe06 	bl	8020454 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8020848:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 802084c:	2b09      	cmp	r3, #9
 802084e:	dd06      	ble.n	802085e <etharp_find_entry+0x256>
 8020850:	4b23      	ldr	r3, [pc, #140]	; (80208e0 <etharp_find_entry+0x2d8>)
 8020852:	f240 1283 	movw	r2, #387	; 0x183
 8020856:	4926      	ldr	r1, [pc, #152]	; (80208f0 <etharp_find_entry+0x2e8>)
 8020858:	4823      	ldr	r0, [pc, #140]	; (80208e8 <etharp_find_entry+0x2e0>)
 802085a:	f003 fd19 	bl	8024290 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 802085e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8020862:	491e      	ldr	r1, [pc, #120]	; (80208dc <etharp_find_entry+0x2d4>)
 8020864:	4613      	mov	r3, r2
 8020866:	005b      	lsls	r3, r3, #1
 8020868:	4413      	add	r3, r2
 802086a:	00db      	lsls	r3, r3, #3
 802086c:	440b      	add	r3, r1
 802086e:	3314      	adds	r3, #20
 8020870:	781b      	ldrb	r3, [r3, #0]
 8020872:	2b00      	cmp	r3, #0
 8020874:	d006      	beq.n	8020884 <etharp_find_entry+0x27c>
 8020876:	4b1a      	ldr	r3, [pc, #104]	; (80208e0 <etharp_find_entry+0x2d8>)
 8020878:	f44f 72c2 	mov.w	r2, #388	; 0x184
 802087c:	491d      	ldr	r1, [pc, #116]	; (80208f4 <etharp_find_entry+0x2ec>)
 802087e:	481a      	ldr	r0, [pc, #104]	; (80208e8 <etharp_find_entry+0x2e0>)
 8020880:	f003 fd06 	bl	8024290 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8020884:	68fb      	ldr	r3, [r7, #12]
 8020886:	2b00      	cmp	r3, #0
 8020888:	d00b      	beq.n	80208a2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 802088a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 802088e:	68fb      	ldr	r3, [r7, #12]
 8020890:	6819      	ldr	r1, [r3, #0]
 8020892:	4812      	ldr	r0, [pc, #72]	; (80208dc <etharp_find_entry+0x2d4>)
 8020894:	4613      	mov	r3, r2
 8020896:	005b      	lsls	r3, r3, #1
 8020898:	4413      	add	r3, r2
 802089a:	00db      	lsls	r3, r3, #3
 802089c:	4403      	add	r3, r0
 802089e:	3304      	adds	r3, #4
 80208a0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 80208a2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80208a6:	490d      	ldr	r1, [pc, #52]	; (80208dc <etharp_find_entry+0x2d4>)
 80208a8:	4613      	mov	r3, r2
 80208aa:	005b      	lsls	r3, r3, #1
 80208ac:	4413      	add	r3, r2
 80208ae:	00db      	lsls	r3, r3, #3
 80208b0:	440b      	add	r3, r1
 80208b2:	3312      	adds	r3, #18
 80208b4:	2200      	movs	r2, #0
 80208b6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 80208b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80208bc:	4907      	ldr	r1, [pc, #28]	; (80208dc <etharp_find_entry+0x2d4>)
 80208be:	4613      	mov	r3, r2
 80208c0:	005b      	lsls	r3, r3, #1
 80208c2:	4413      	add	r3, r2
 80208c4:	00db      	lsls	r3, r3, #3
 80208c6:	440b      	add	r3, r1
 80208c8:	3308      	adds	r3, #8
 80208ca:	687a      	ldr	r2, [r7, #4]
 80208cc:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 80208ce:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 80208d2:	4618      	mov	r0, r3
 80208d4:	3728      	adds	r7, #40	; 0x28
 80208d6:	46bd      	mov	sp, r7
 80208d8:	bd80      	pop	{r7, pc}
 80208da:	bf00      	nop
 80208dc:	2000c01c 	.word	0x2000c01c
 80208e0:	0802863c 	.word	0x0802863c
 80208e4:	08028674 	.word	0x08028674
 80208e8:	080286b4 	.word	0x080286b4
 80208ec:	080286dc 	.word	0x080286dc
 80208f0:	080286f4 	.word	0x080286f4
 80208f4:	08028708 	.word	0x08028708

080208f8 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80208f8:	b580      	push	{r7, lr}
 80208fa:	b088      	sub	sp, #32
 80208fc:	af02      	add	r7, sp, #8
 80208fe:	60f8      	str	r0, [r7, #12]
 8020900:	60b9      	str	r1, [r7, #8]
 8020902:	607a      	str	r2, [r7, #4]
 8020904:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8020906:	68fb      	ldr	r3, [r7, #12]
 8020908:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 802090c:	2b06      	cmp	r3, #6
 802090e:	d006      	beq.n	802091e <etharp_update_arp_entry+0x26>
 8020910:	4b48      	ldr	r3, [pc, #288]	; (8020a34 <etharp_update_arp_entry+0x13c>)
 8020912:	f240 12a9 	movw	r2, #425	; 0x1a9
 8020916:	4948      	ldr	r1, [pc, #288]	; (8020a38 <etharp_update_arp_entry+0x140>)
 8020918:	4848      	ldr	r0, [pc, #288]	; (8020a3c <etharp_update_arp_entry+0x144>)
 802091a:	f003 fcb9 	bl	8024290 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 802091e:	68bb      	ldr	r3, [r7, #8]
 8020920:	2b00      	cmp	r3, #0
 8020922:	d012      	beq.n	802094a <etharp_update_arp_entry+0x52>
 8020924:	68bb      	ldr	r3, [r7, #8]
 8020926:	681b      	ldr	r3, [r3, #0]
 8020928:	2b00      	cmp	r3, #0
 802092a:	d00e      	beq.n	802094a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 802092c:	68bb      	ldr	r3, [r7, #8]
 802092e:	681b      	ldr	r3, [r3, #0]
 8020930:	68f9      	ldr	r1, [r7, #12]
 8020932:	4618      	mov	r0, r3
 8020934:	f001 f8fe 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 8020938:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 802093a:	2b00      	cmp	r3, #0
 802093c:	d105      	bne.n	802094a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 802093e:	68bb      	ldr	r3, [r7, #8]
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8020946:	2be0      	cmp	r3, #224	; 0xe0
 8020948:	d102      	bne.n	8020950 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 802094a:	f06f 030f 	mvn.w	r3, #15
 802094e:	e06c      	b.n	8020a2a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8020950:	78fb      	ldrb	r3, [r7, #3]
 8020952:	68fa      	ldr	r2, [r7, #12]
 8020954:	4619      	mov	r1, r3
 8020956:	68b8      	ldr	r0, [r7, #8]
 8020958:	f7ff fe56 	bl	8020608 <etharp_find_entry>
 802095c:	4603      	mov	r3, r0
 802095e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8020960:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8020964:	2b00      	cmp	r3, #0
 8020966:	da02      	bge.n	802096e <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8020968:	8afb      	ldrh	r3, [r7, #22]
 802096a:	b25b      	sxtb	r3, r3
 802096c:	e05d      	b.n	8020a2a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 802096e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020972:	4933      	ldr	r1, [pc, #204]	; (8020a40 <etharp_update_arp_entry+0x148>)
 8020974:	4613      	mov	r3, r2
 8020976:	005b      	lsls	r3, r3, #1
 8020978:	4413      	add	r3, r2
 802097a:	00db      	lsls	r3, r3, #3
 802097c:	440b      	add	r3, r1
 802097e:	3314      	adds	r3, #20
 8020980:	2202      	movs	r2, #2
 8020982:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8020984:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8020988:	492d      	ldr	r1, [pc, #180]	; (8020a40 <etharp_update_arp_entry+0x148>)
 802098a:	4613      	mov	r3, r2
 802098c:	005b      	lsls	r3, r3, #1
 802098e:	4413      	add	r3, r2
 8020990:	00db      	lsls	r3, r3, #3
 8020992:	440b      	add	r3, r1
 8020994:	3308      	adds	r3, #8
 8020996:	68fa      	ldr	r2, [r7, #12]
 8020998:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 802099a:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 802099e:	4613      	mov	r3, r2
 80209a0:	005b      	lsls	r3, r3, #1
 80209a2:	4413      	add	r3, r2
 80209a4:	00db      	lsls	r3, r3, #3
 80209a6:	3308      	adds	r3, #8
 80209a8:	4a25      	ldr	r2, [pc, #148]	; (8020a40 <etharp_update_arp_entry+0x148>)
 80209aa:	4413      	add	r3, r2
 80209ac:	3304      	adds	r3, #4
 80209ae:	2206      	movs	r2, #6
 80209b0:	6879      	ldr	r1, [r7, #4]
 80209b2:	4618      	mov	r0, r3
 80209b4:	f003 fb5c 	bl	8024070 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 80209b8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80209bc:	4920      	ldr	r1, [pc, #128]	; (8020a40 <etharp_update_arp_entry+0x148>)
 80209be:	4613      	mov	r3, r2
 80209c0:	005b      	lsls	r3, r3, #1
 80209c2:	4413      	add	r3, r2
 80209c4:	00db      	lsls	r3, r3, #3
 80209c6:	440b      	add	r3, r1
 80209c8:	3312      	adds	r3, #18
 80209ca:	2200      	movs	r2, #0
 80209cc:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 80209ce:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80209d2:	491b      	ldr	r1, [pc, #108]	; (8020a40 <etharp_update_arp_entry+0x148>)
 80209d4:	4613      	mov	r3, r2
 80209d6:	005b      	lsls	r3, r3, #1
 80209d8:	4413      	add	r3, r2
 80209da:	00db      	lsls	r3, r3, #3
 80209dc:	440b      	add	r3, r1
 80209de:	681b      	ldr	r3, [r3, #0]
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d021      	beq.n	8020a28 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80209e4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80209e8:	4915      	ldr	r1, [pc, #84]	; (8020a40 <etharp_update_arp_entry+0x148>)
 80209ea:	4613      	mov	r3, r2
 80209ec:	005b      	lsls	r3, r3, #1
 80209ee:	4413      	add	r3, r2
 80209f0:	00db      	lsls	r3, r3, #3
 80209f2:	440b      	add	r3, r1
 80209f4:	681b      	ldr	r3, [r3, #0]
 80209f6:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80209f8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80209fc:	4910      	ldr	r1, [pc, #64]	; (8020a40 <etharp_update_arp_entry+0x148>)
 80209fe:	4613      	mov	r3, r2
 8020a00:	005b      	lsls	r3, r3, #1
 8020a02:	4413      	add	r3, r2
 8020a04:	00db      	lsls	r3, r3, #3
 8020a06:	440b      	add	r3, r1
 8020a08:	2200      	movs	r2, #0
 8020a0a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8020a0c:	68fb      	ldr	r3, [r7, #12]
 8020a0e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020a12:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020a16:	9300      	str	r3, [sp, #0]
 8020a18:	687b      	ldr	r3, [r7, #4]
 8020a1a:	6939      	ldr	r1, [r7, #16]
 8020a1c:	68f8      	ldr	r0, [r7, #12]
 8020a1e:	f001 ff97 	bl	8022950 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8020a22:	6938      	ldr	r0, [r7, #16]
 8020a24:	f7f8 f9fc 	bl	8018e20 <pbuf_free>
  }
  return ERR_OK;
 8020a28:	2300      	movs	r3, #0
}
 8020a2a:	4618      	mov	r0, r3
 8020a2c:	3718      	adds	r7, #24
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}
 8020a32:	bf00      	nop
 8020a34:	0802863c 	.word	0x0802863c
 8020a38:	08028734 	.word	0x08028734
 8020a3c:	080286b4 	.word	0x080286b4
 8020a40:	2000c01c 	.word	0x2000c01c

08020a44 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8020a44:	b580      	push	{r7, lr}
 8020a46:	b084      	sub	sp, #16
 8020a48:	af00      	add	r7, sp, #0
 8020a4a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020a4c:	2300      	movs	r3, #0
 8020a4e:	60fb      	str	r3, [r7, #12]
 8020a50:	e01e      	b.n	8020a90 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8020a52:	4913      	ldr	r1, [pc, #76]	; (8020aa0 <etharp_cleanup_netif+0x5c>)
 8020a54:	68fa      	ldr	r2, [r7, #12]
 8020a56:	4613      	mov	r3, r2
 8020a58:	005b      	lsls	r3, r3, #1
 8020a5a:	4413      	add	r3, r2
 8020a5c:	00db      	lsls	r3, r3, #3
 8020a5e:	440b      	add	r3, r1
 8020a60:	3314      	adds	r3, #20
 8020a62:	781b      	ldrb	r3, [r3, #0]
 8020a64:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8020a66:	7afb      	ldrb	r3, [r7, #11]
 8020a68:	2b00      	cmp	r3, #0
 8020a6a:	d00e      	beq.n	8020a8a <etharp_cleanup_netif+0x46>
 8020a6c:	490c      	ldr	r1, [pc, #48]	; (8020aa0 <etharp_cleanup_netif+0x5c>)
 8020a6e:	68fa      	ldr	r2, [r7, #12]
 8020a70:	4613      	mov	r3, r2
 8020a72:	005b      	lsls	r3, r3, #1
 8020a74:	4413      	add	r3, r2
 8020a76:	00db      	lsls	r3, r3, #3
 8020a78:	440b      	add	r3, r1
 8020a7a:	3308      	adds	r3, #8
 8020a7c:	681b      	ldr	r3, [r3, #0]
 8020a7e:	687a      	ldr	r2, [r7, #4]
 8020a80:	429a      	cmp	r2, r3
 8020a82:	d102      	bne.n	8020a8a <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8020a84:	68f8      	ldr	r0, [r7, #12]
 8020a86:	f7ff fce5 	bl	8020454 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8020a8a:	68fb      	ldr	r3, [r7, #12]
 8020a8c:	3301      	adds	r3, #1
 8020a8e:	60fb      	str	r3, [r7, #12]
 8020a90:	68fb      	ldr	r3, [r7, #12]
 8020a92:	2b09      	cmp	r3, #9
 8020a94:	dddd      	ble.n	8020a52 <etharp_cleanup_netif+0xe>
    }
  }
}
 8020a96:	bf00      	nop
 8020a98:	bf00      	nop
 8020a9a:	3710      	adds	r7, #16
 8020a9c:	46bd      	mov	sp, r7
 8020a9e:	bd80      	pop	{r7, pc}
 8020aa0:	2000c01c 	.word	0x2000c01c

08020aa4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8020aa4:	b5b0      	push	{r4, r5, r7, lr}
 8020aa6:	b08a      	sub	sp, #40	; 0x28
 8020aa8:	af04      	add	r7, sp, #16
 8020aaa:	6078      	str	r0, [r7, #4]
 8020aac:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8020aae:	683b      	ldr	r3, [r7, #0]
 8020ab0:	2b00      	cmp	r3, #0
 8020ab2:	d107      	bne.n	8020ac4 <etharp_input+0x20>
 8020ab4:	4b3d      	ldr	r3, [pc, #244]	; (8020bac <etharp_input+0x108>)
 8020ab6:	f240 228a 	movw	r2, #650	; 0x28a
 8020aba:	493d      	ldr	r1, [pc, #244]	; (8020bb0 <etharp_input+0x10c>)
 8020abc:	483d      	ldr	r0, [pc, #244]	; (8020bb4 <etharp_input+0x110>)
 8020abe:	f003 fbe7 	bl	8024290 <iprintf>
 8020ac2:	e06f      	b.n	8020ba4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8020ac4:	687b      	ldr	r3, [r7, #4]
 8020ac6:	685b      	ldr	r3, [r3, #4]
 8020ac8:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020aca:	693b      	ldr	r3, [r7, #16]
 8020acc:	881b      	ldrh	r3, [r3, #0]
 8020ace:	b29b      	uxth	r3, r3
 8020ad0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020ad4:	d10c      	bne.n	8020af0 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020ad6:	693b      	ldr	r3, [r7, #16]
 8020ad8:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8020ada:	2b06      	cmp	r3, #6
 8020adc:	d108      	bne.n	8020af0 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020ade:	693b      	ldr	r3, [r7, #16]
 8020ae0:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8020ae2:	2b04      	cmp	r3, #4
 8020ae4:	d104      	bne.n	8020af0 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8020ae6:	693b      	ldr	r3, [r7, #16]
 8020ae8:	885b      	ldrh	r3, [r3, #2]
 8020aea:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8020aec:	2b08      	cmp	r3, #8
 8020aee:	d003      	beq.n	8020af8 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8020af0:	6878      	ldr	r0, [r7, #4]
 8020af2:	f7f8 f995 	bl	8018e20 <pbuf_free>
    return;
 8020af6:	e055      	b.n	8020ba4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8020af8:	693b      	ldr	r3, [r7, #16]
 8020afa:	330e      	adds	r3, #14
 8020afc:	681b      	ldr	r3, [r3, #0]
 8020afe:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8020b00:	693b      	ldr	r3, [r7, #16]
 8020b02:	3318      	adds	r3, #24
 8020b04:	681b      	ldr	r3, [r3, #0]
 8020b06:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8020b08:	683b      	ldr	r3, [r7, #0]
 8020b0a:	3304      	adds	r3, #4
 8020b0c:	681b      	ldr	r3, [r3, #0]
 8020b0e:	2b00      	cmp	r3, #0
 8020b10:	d102      	bne.n	8020b18 <etharp_input+0x74>
    for_us = 0;
 8020b12:	2300      	movs	r3, #0
 8020b14:	75fb      	strb	r3, [r7, #23]
 8020b16:	e009      	b.n	8020b2c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8020b18:	68ba      	ldr	r2, [r7, #8]
 8020b1a:	683b      	ldr	r3, [r7, #0]
 8020b1c:	3304      	adds	r3, #4
 8020b1e:	681b      	ldr	r3, [r3, #0]
 8020b20:	429a      	cmp	r2, r3
 8020b22:	bf0c      	ite	eq
 8020b24:	2301      	moveq	r3, #1
 8020b26:	2300      	movne	r3, #0
 8020b28:	b2db      	uxtb	r3, r3
 8020b2a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8020b2c:	693b      	ldr	r3, [r7, #16]
 8020b2e:	f103 0208 	add.w	r2, r3, #8
 8020b32:	7dfb      	ldrb	r3, [r7, #23]
 8020b34:	2b00      	cmp	r3, #0
 8020b36:	d001      	beq.n	8020b3c <etharp_input+0x98>
 8020b38:	2301      	movs	r3, #1
 8020b3a:	e000      	b.n	8020b3e <etharp_input+0x9a>
 8020b3c:	2302      	movs	r3, #2
 8020b3e:	f107 010c 	add.w	r1, r7, #12
 8020b42:	6838      	ldr	r0, [r7, #0]
 8020b44:	f7ff fed8 	bl	80208f8 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8020b48:	693b      	ldr	r3, [r7, #16]
 8020b4a:	88db      	ldrh	r3, [r3, #6]
 8020b4c:	b29b      	uxth	r3, r3
 8020b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8020b52:	d003      	beq.n	8020b5c <etharp_input+0xb8>
 8020b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8020b58:	d01e      	beq.n	8020b98 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8020b5a:	e020      	b.n	8020b9e <etharp_input+0xfa>
      if (for_us) {
 8020b5c:	7dfb      	ldrb	r3, [r7, #23]
 8020b5e:	2b00      	cmp	r3, #0
 8020b60:	d01c      	beq.n	8020b9c <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8020b62:	683b      	ldr	r3, [r7, #0]
 8020b64:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8020b68:	693b      	ldr	r3, [r7, #16]
 8020b6a:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8020b6e:	683b      	ldr	r3, [r7, #0]
 8020b70:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8020b74:	683b      	ldr	r3, [r7, #0]
 8020b76:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8020b78:	693a      	ldr	r2, [r7, #16]
 8020b7a:	3208      	adds	r2, #8
        etharp_raw(netif,
 8020b7c:	2102      	movs	r1, #2
 8020b7e:	9103      	str	r1, [sp, #12]
 8020b80:	f107 010c 	add.w	r1, r7, #12
 8020b84:	9102      	str	r1, [sp, #8]
 8020b86:	9201      	str	r2, [sp, #4]
 8020b88:	9300      	str	r3, [sp, #0]
 8020b8a:	462b      	mov	r3, r5
 8020b8c:	4622      	mov	r2, r4
 8020b8e:	4601      	mov	r1, r0
 8020b90:	6838      	ldr	r0, [r7, #0]
 8020b92:	f000 faeb 	bl	802116c <etharp_raw>
      break;
 8020b96:	e001      	b.n	8020b9c <etharp_input+0xf8>
      break;
 8020b98:	bf00      	nop
 8020b9a:	e000      	b.n	8020b9e <etharp_input+0xfa>
      break;
 8020b9c:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8020b9e:	6878      	ldr	r0, [r7, #4]
 8020ba0:	f7f8 f93e 	bl	8018e20 <pbuf_free>
}
 8020ba4:	3718      	adds	r7, #24
 8020ba6:	46bd      	mov	sp, r7
 8020ba8:	bdb0      	pop	{r4, r5, r7, pc}
 8020baa:	bf00      	nop
 8020bac:	0802863c 	.word	0x0802863c
 8020bb0:	0802878c 	.word	0x0802878c
 8020bb4:	080286b4 	.word	0x080286b4

08020bb8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8020bb8:	b580      	push	{r7, lr}
 8020bba:	b086      	sub	sp, #24
 8020bbc:	af02      	add	r7, sp, #8
 8020bbe:	60f8      	str	r0, [r7, #12]
 8020bc0:	60b9      	str	r1, [r7, #8]
 8020bc2:	4613      	mov	r3, r2
 8020bc4:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8020bc6:	79fa      	ldrb	r2, [r7, #7]
 8020bc8:	4944      	ldr	r1, [pc, #272]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020bca:	4613      	mov	r3, r2
 8020bcc:	005b      	lsls	r3, r3, #1
 8020bce:	4413      	add	r3, r2
 8020bd0:	00db      	lsls	r3, r3, #3
 8020bd2:	440b      	add	r3, r1
 8020bd4:	3314      	adds	r3, #20
 8020bd6:	781b      	ldrb	r3, [r3, #0]
 8020bd8:	2b01      	cmp	r3, #1
 8020bda:	d806      	bhi.n	8020bea <etharp_output_to_arp_index+0x32>
 8020bdc:	4b40      	ldr	r3, [pc, #256]	; (8020ce0 <etharp_output_to_arp_index+0x128>)
 8020bde:	f240 22ee 	movw	r2, #750	; 0x2ee
 8020be2:	4940      	ldr	r1, [pc, #256]	; (8020ce4 <etharp_output_to_arp_index+0x12c>)
 8020be4:	4840      	ldr	r0, [pc, #256]	; (8020ce8 <etharp_output_to_arp_index+0x130>)
 8020be6:	f003 fb53 	bl	8024290 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8020bea:	79fa      	ldrb	r2, [r7, #7]
 8020bec:	493b      	ldr	r1, [pc, #236]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020bee:	4613      	mov	r3, r2
 8020bf0:	005b      	lsls	r3, r3, #1
 8020bf2:	4413      	add	r3, r2
 8020bf4:	00db      	lsls	r3, r3, #3
 8020bf6:	440b      	add	r3, r1
 8020bf8:	3314      	adds	r3, #20
 8020bfa:	781b      	ldrb	r3, [r3, #0]
 8020bfc:	2b02      	cmp	r3, #2
 8020bfe:	d153      	bne.n	8020ca8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8020c00:	79fa      	ldrb	r2, [r7, #7]
 8020c02:	4936      	ldr	r1, [pc, #216]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c04:	4613      	mov	r3, r2
 8020c06:	005b      	lsls	r3, r3, #1
 8020c08:	4413      	add	r3, r2
 8020c0a:	00db      	lsls	r3, r3, #3
 8020c0c:	440b      	add	r3, r1
 8020c0e:	3312      	adds	r3, #18
 8020c10:	881b      	ldrh	r3, [r3, #0]
 8020c12:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8020c16:	d919      	bls.n	8020c4c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8020c18:	79fa      	ldrb	r2, [r7, #7]
 8020c1a:	4613      	mov	r3, r2
 8020c1c:	005b      	lsls	r3, r3, #1
 8020c1e:	4413      	add	r3, r2
 8020c20:	00db      	lsls	r3, r3, #3
 8020c22:	4a2e      	ldr	r2, [pc, #184]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c24:	4413      	add	r3, r2
 8020c26:	3304      	adds	r3, #4
 8020c28:	4619      	mov	r1, r3
 8020c2a:	68f8      	ldr	r0, [r7, #12]
 8020c2c:	f000 fb4c 	bl	80212c8 <etharp_request>
 8020c30:	4603      	mov	r3, r0
 8020c32:	2b00      	cmp	r3, #0
 8020c34:	d138      	bne.n	8020ca8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020c36:	79fa      	ldrb	r2, [r7, #7]
 8020c38:	4928      	ldr	r1, [pc, #160]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c3a:	4613      	mov	r3, r2
 8020c3c:	005b      	lsls	r3, r3, #1
 8020c3e:	4413      	add	r3, r2
 8020c40:	00db      	lsls	r3, r3, #3
 8020c42:	440b      	add	r3, r1
 8020c44:	3314      	adds	r3, #20
 8020c46:	2203      	movs	r2, #3
 8020c48:	701a      	strb	r2, [r3, #0]
 8020c4a:	e02d      	b.n	8020ca8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8020c4c:	79fa      	ldrb	r2, [r7, #7]
 8020c4e:	4923      	ldr	r1, [pc, #140]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c50:	4613      	mov	r3, r2
 8020c52:	005b      	lsls	r3, r3, #1
 8020c54:	4413      	add	r3, r2
 8020c56:	00db      	lsls	r3, r3, #3
 8020c58:	440b      	add	r3, r1
 8020c5a:	3312      	adds	r3, #18
 8020c5c:	881b      	ldrh	r3, [r3, #0]
 8020c5e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8020c62:	d321      	bcc.n	8020ca8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8020c64:	79fa      	ldrb	r2, [r7, #7]
 8020c66:	4613      	mov	r3, r2
 8020c68:	005b      	lsls	r3, r3, #1
 8020c6a:	4413      	add	r3, r2
 8020c6c:	00db      	lsls	r3, r3, #3
 8020c6e:	4a1b      	ldr	r2, [pc, #108]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c70:	4413      	add	r3, r2
 8020c72:	1d19      	adds	r1, r3, #4
 8020c74:	79fa      	ldrb	r2, [r7, #7]
 8020c76:	4613      	mov	r3, r2
 8020c78:	005b      	lsls	r3, r3, #1
 8020c7a:	4413      	add	r3, r2
 8020c7c:	00db      	lsls	r3, r3, #3
 8020c7e:	3308      	adds	r3, #8
 8020c80:	4a16      	ldr	r2, [pc, #88]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c82:	4413      	add	r3, r2
 8020c84:	3304      	adds	r3, #4
 8020c86:	461a      	mov	r2, r3
 8020c88:	68f8      	ldr	r0, [r7, #12]
 8020c8a:	f000 fafb 	bl	8021284 <etharp_request_dst>
 8020c8e:	4603      	mov	r3, r0
 8020c90:	2b00      	cmp	r3, #0
 8020c92:	d109      	bne.n	8020ca8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8020c94:	79fa      	ldrb	r2, [r7, #7]
 8020c96:	4911      	ldr	r1, [pc, #68]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020c98:	4613      	mov	r3, r2
 8020c9a:	005b      	lsls	r3, r3, #1
 8020c9c:	4413      	add	r3, r2
 8020c9e:	00db      	lsls	r3, r3, #3
 8020ca0:	440b      	add	r3, r1
 8020ca2:	3314      	adds	r3, #20
 8020ca4:	2203      	movs	r2, #3
 8020ca6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8020ca8:	68fb      	ldr	r3, [r7, #12]
 8020caa:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8020cae:	79fa      	ldrb	r2, [r7, #7]
 8020cb0:	4613      	mov	r3, r2
 8020cb2:	005b      	lsls	r3, r3, #1
 8020cb4:	4413      	add	r3, r2
 8020cb6:	00db      	lsls	r3, r3, #3
 8020cb8:	3308      	adds	r3, #8
 8020cba:	4a08      	ldr	r2, [pc, #32]	; (8020cdc <etharp_output_to_arp_index+0x124>)
 8020cbc:	4413      	add	r3, r2
 8020cbe:	3304      	adds	r3, #4
 8020cc0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8020cc4:	9200      	str	r2, [sp, #0]
 8020cc6:	460a      	mov	r2, r1
 8020cc8:	68b9      	ldr	r1, [r7, #8]
 8020cca:	68f8      	ldr	r0, [r7, #12]
 8020ccc:	f001 fe40 	bl	8022950 <ethernet_output>
 8020cd0:	4603      	mov	r3, r0
}
 8020cd2:	4618      	mov	r0, r3
 8020cd4:	3710      	adds	r7, #16
 8020cd6:	46bd      	mov	sp, r7
 8020cd8:	bd80      	pop	{r7, pc}
 8020cda:	bf00      	nop
 8020cdc:	2000c01c 	.word	0x2000c01c
 8020ce0:	0802863c 	.word	0x0802863c
 8020ce4:	080287ac 	.word	0x080287ac
 8020ce8:	080286b4 	.word	0x080286b4

08020cec <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8020cec:	b580      	push	{r7, lr}
 8020cee:	b08a      	sub	sp, #40	; 0x28
 8020cf0:	af02      	add	r7, sp, #8
 8020cf2:	60f8      	str	r0, [r7, #12]
 8020cf4:	60b9      	str	r1, [r7, #8]
 8020cf6:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8020cf8:	687b      	ldr	r3, [r7, #4]
 8020cfa:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8020cfc:	68fb      	ldr	r3, [r7, #12]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d106      	bne.n	8020d10 <etharp_output+0x24>
 8020d02:	4b73      	ldr	r3, [pc, #460]	; (8020ed0 <etharp_output+0x1e4>)
 8020d04:	f240 321e 	movw	r2, #798	; 0x31e
 8020d08:	4972      	ldr	r1, [pc, #456]	; (8020ed4 <etharp_output+0x1e8>)
 8020d0a:	4873      	ldr	r0, [pc, #460]	; (8020ed8 <etharp_output+0x1ec>)
 8020d0c:	f003 fac0 	bl	8024290 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8020d10:	68bb      	ldr	r3, [r7, #8]
 8020d12:	2b00      	cmp	r3, #0
 8020d14:	d106      	bne.n	8020d24 <etharp_output+0x38>
 8020d16:	4b6e      	ldr	r3, [pc, #440]	; (8020ed0 <etharp_output+0x1e4>)
 8020d18:	f240 321f 	movw	r2, #799	; 0x31f
 8020d1c:	496f      	ldr	r1, [pc, #444]	; (8020edc <etharp_output+0x1f0>)
 8020d1e:	486e      	ldr	r0, [pc, #440]	; (8020ed8 <etharp_output+0x1ec>)
 8020d20:	f003 fab6 	bl	8024290 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8020d24:	687b      	ldr	r3, [r7, #4]
 8020d26:	2b00      	cmp	r3, #0
 8020d28:	d106      	bne.n	8020d38 <etharp_output+0x4c>
 8020d2a:	4b69      	ldr	r3, [pc, #420]	; (8020ed0 <etharp_output+0x1e4>)
 8020d2c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8020d30:	496b      	ldr	r1, [pc, #428]	; (8020ee0 <etharp_output+0x1f4>)
 8020d32:	4869      	ldr	r0, [pc, #420]	; (8020ed8 <etharp_output+0x1ec>)
 8020d34:	f003 faac 	bl	8024290 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8020d38:	687b      	ldr	r3, [r7, #4]
 8020d3a:	681b      	ldr	r3, [r3, #0]
 8020d3c:	68f9      	ldr	r1, [r7, #12]
 8020d3e:	4618      	mov	r0, r3
 8020d40:	f000 fef8 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 8020d44:	4603      	mov	r3, r0
 8020d46:	2b00      	cmp	r3, #0
 8020d48:	d002      	beq.n	8020d50 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8020d4a:	4b66      	ldr	r3, [pc, #408]	; (8020ee4 <etharp_output+0x1f8>)
 8020d4c:	61fb      	str	r3, [r7, #28]
 8020d4e:	e0af      	b.n	8020eb0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8020d50:	687b      	ldr	r3, [r7, #4]
 8020d52:	681b      	ldr	r3, [r3, #0]
 8020d54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8020d58:	2be0      	cmp	r3, #224	; 0xe0
 8020d5a:	d118      	bne.n	8020d8e <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8020d5c:	2301      	movs	r3, #1
 8020d5e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8020d60:	2300      	movs	r3, #0
 8020d62:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8020d64:	235e      	movs	r3, #94	; 0x5e
 8020d66:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8020d68:	687b      	ldr	r3, [r7, #4]
 8020d6a:	3301      	adds	r3, #1
 8020d6c:	781b      	ldrb	r3, [r3, #0]
 8020d6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8020d72:	b2db      	uxtb	r3, r3
 8020d74:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8020d76:	687b      	ldr	r3, [r7, #4]
 8020d78:	3302      	adds	r3, #2
 8020d7a:	781b      	ldrb	r3, [r3, #0]
 8020d7c:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8020d7e:	687b      	ldr	r3, [r7, #4]
 8020d80:	3303      	adds	r3, #3
 8020d82:	781b      	ldrb	r3, [r3, #0]
 8020d84:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8020d86:	f107 0310 	add.w	r3, r7, #16
 8020d8a:	61fb      	str	r3, [r7, #28]
 8020d8c:	e090      	b.n	8020eb0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020d8e:	687b      	ldr	r3, [r7, #4]
 8020d90:	681a      	ldr	r2, [r3, #0]
 8020d92:	68fb      	ldr	r3, [r7, #12]
 8020d94:	3304      	adds	r3, #4
 8020d96:	681b      	ldr	r3, [r3, #0]
 8020d98:	405a      	eors	r2, r3
 8020d9a:	68fb      	ldr	r3, [r7, #12]
 8020d9c:	3308      	adds	r3, #8
 8020d9e:	681b      	ldr	r3, [r3, #0]
 8020da0:	4013      	ands	r3, r2
 8020da2:	2b00      	cmp	r3, #0
 8020da4:	d012      	beq.n	8020dcc <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8020da6:	687b      	ldr	r3, [r7, #4]
 8020da8:	681b      	ldr	r3, [r3, #0]
 8020daa:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8020dac:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8020db0:	4293      	cmp	r3, r2
 8020db2:	d00b      	beq.n	8020dcc <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8020db4:	68fb      	ldr	r3, [r7, #12]
 8020db6:	330c      	adds	r3, #12
 8020db8:	681b      	ldr	r3, [r3, #0]
 8020dba:	2b00      	cmp	r3, #0
 8020dbc:	d003      	beq.n	8020dc6 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8020dbe:	68fb      	ldr	r3, [r7, #12]
 8020dc0:	330c      	adds	r3, #12
 8020dc2:	61bb      	str	r3, [r7, #24]
 8020dc4:	e002      	b.n	8020dcc <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8020dc6:	f06f 0303 	mvn.w	r3, #3
 8020dca:	e07d      	b.n	8020ec8 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020dcc:	4b46      	ldr	r3, [pc, #280]	; (8020ee8 <etharp_output+0x1fc>)
 8020dce:	781b      	ldrb	r3, [r3, #0]
 8020dd0:	4619      	mov	r1, r3
 8020dd2:	4a46      	ldr	r2, [pc, #280]	; (8020eec <etharp_output+0x200>)
 8020dd4:	460b      	mov	r3, r1
 8020dd6:	005b      	lsls	r3, r3, #1
 8020dd8:	440b      	add	r3, r1
 8020dda:	00db      	lsls	r3, r3, #3
 8020ddc:	4413      	add	r3, r2
 8020dde:	3314      	adds	r3, #20
 8020de0:	781b      	ldrb	r3, [r3, #0]
 8020de2:	2b01      	cmp	r3, #1
 8020de4:	d925      	bls.n	8020e32 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020de6:	4b40      	ldr	r3, [pc, #256]	; (8020ee8 <etharp_output+0x1fc>)
 8020de8:	781b      	ldrb	r3, [r3, #0]
 8020dea:	4619      	mov	r1, r3
 8020dec:	4a3f      	ldr	r2, [pc, #252]	; (8020eec <etharp_output+0x200>)
 8020dee:	460b      	mov	r3, r1
 8020df0:	005b      	lsls	r3, r3, #1
 8020df2:	440b      	add	r3, r1
 8020df4:	00db      	lsls	r3, r3, #3
 8020df6:	4413      	add	r3, r2
 8020df8:	3308      	adds	r3, #8
 8020dfa:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8020dfc:	68fa      	ldr	r2, [r7, #12]
 8020dfe:	429a      	cmp	r2, r3
 8020e00:	d117      	bne.n	8020e32 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8020e02:	69bb      	ldr	r3, [r7, #24]
 8020e04:	681a      	ldr	r2, [r3, #0]
 8020e06:	4b38      	ldr	r3, [pc, #224]	; (8020ee8 <etharp_output+0x1fc>)
 8020e08:	781b      	ldrb	r3, [r3, #0]
 8020e0a:	4618      	mov	r0, r3
 8020e0c:	4937      	ldr	r1, [pc, #220]	; (8020eec <etharp_output+0x200>)
 8020e0e:	4603      	mov	r3, r0
 8020e10:	005b      	lsls	r3, r3, #1
 8020e12:	4403      	add	r3, r0
 8020e14:	00db      	lsls	r3, r3, #3
 8020e16:	440b      	add	r3, r1
 8020e18:	3304      	adds	r3, #4
 8020e1a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8020e1c:	429a      	cmp	r2, r3
 8020e1e:	d108      	bne.n	8020e32 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8020e20:	4b31      	ldr	r3, [pc, #196]	; (8020ee8 <etharp_output+0x1fc>)
 8020e22:	781b      	ldrb	r3, [r3, #0]
 8020e24:	461a      	mov	r2, r3
 8020e26:	68b9      	ldr	r1, [r7, #8]
 8020e28:	68f8      	ldr	r0, [r7, #12]
 8020e2a:	f7ff fec5 	bl	8020bb8 <etharp_output_to_arp_index>
 8020e2e:	4603      	mov	r3, r0
 8020e30:	e04a      	b.n	8020ec8 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020e32:	2300      	movs	r3, #0
 8020e34:	75fb      	strb	r3, [r7, #23]
 8020e36:	e031      	b.n	8020e9c <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020e38:	7dfa      	ldrb	r2, [r7, #23]
 8020e3a:	492c      	ldr	r1, [pc, #176]	; (8020eec <etharp_output+0x200>)
 8020e3c:	4613      	mov	r3, r2
 8020e3e:	005b      	lsls	r3, r3, #1
 8020e40:	4413      	add	r3, r2
 8020e42:	00db      	lsls	r3, r3, #3
 8020e44:	440b      	add	r3, r1
 8020e46:	3314      	adds	r3, #20
 8020e48:	781b      	ldrb	r3, [r3, #0]
 8020e4a:	2b01      	cmp	r3, #1
 8020e4c:	d923      	bls.n	8020e96 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8020e4e:	7dfa      	ldrb	r2, [r7, #23]
 8020e50:	4926      	ldr	r1, [pc, #152]	; (8020eec <etharp_output+0x200>)
 8020e52:	4613      	mov	r3, r2
 8020e54:	005b      	lsls	r3, r3, #1
 8020e56:	4413      	add	r3, r2
 8020e58:	00db      	lsls	r3, r3, #3
 8020e5a:	440b      	add	r3, r1
 8020e5c:	3308      	adds	r3, #8
 8020e5e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8020e60:	68fa      	ldr	r2, [r7, #12]
 8020e62:	429a      	cmp	r2, r3
 8020e64:	d117      	bne.n	8020e96 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8020e66:	69bb      	ldr	r3, [r7, #24]
 8020e68:	6819      	ldr	r1, [r3, #0]
 8020e6a:	7dfa      	ldrb	r2, [r7, #23]
 8020e6c:	481f      	ldr	r0, [pc, #124]	; (8020eec <etharp_output+0x200>)
 8020e6e:	4613      	mov	r3, r2
 8020e70:	005b      	lsls	r3, r3, #1
 8020e72:	4413      	add	r3, r2
 8020e74:	00db      	lsls	r3, r3, #3
 8020e76:	4403      	add	r3, r0
 8020e78:	3304      	adds	r3, #4
 8020e7a:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8020e7c:	4299      	cmp	r1, r3
 8020e7e:	d10a      	bne.n	8020e96 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8020e80:	4a19      	ldr	r2, [pc, #100]	; (8020ee8 <etharp_output+0x1fc>)
 8020e82:	7dfb      	ldrb	r3, [r7, #23]
 8020e84:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8020e86:	7dfb      	ldrb	r3, [r7, #23]
 8020e88:	461a      	mov	r2, r3
 8020e8a:	68b9      	ldr	r1, [r7, #8]
 8020e8c:	68f8      	ldr	r0, [r7, #12]
 8020e8e:	f7ff fe93 	bl	8020bb8 <etharp_output_to_arp_index>
 8020e92:	4603      	mov	r3, r0
 8020e94:	e018      	b.n	8020ec8 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8020e96:	7dfb      	ldrb	r3, [r7, #23]
 8020e98:	3301      	adds	r3, #1
 8020e9a:	75fb      	strb	r3, [r7, #23]
 8020e9c:	7dfb      	ldrb	r3, [r7, #23]
 8020e9e:	2b09      	cmp	r3, #9
 8020ea0:	d9ca      	bls.n	8020e38 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8020ea2:	68ba      	ldr	r2, [r7, #8]
 8020ea4:	69b9      	ldr	r1, [r7, #24]
 8020ea6:	68f8      	ldr	r0, [r7, #12]
 8020ea8:	f000 f822 	bl	8020ef0 <etharp_query>
 8020eac:	4603      	mov	r3, r0
 8020eae:	e00b      	b.n	8020ec8 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8020eb0:	68fb      	ldr	r3, [r7, #12]
 8020eb2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8020eb6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8020eba:	9300      	str	r3, [sp, #0]
 8020ebc:	69fb      	ldr	r3, [r7, #28]
 8020ebe:	68b9      	ldr	r1, [r7, #8]
 8020ec0:	68f8      	ldr	r0, [r7, #12]
 8020ec2:	f001 fd45 	bl	8022950 <ethernet_output>
 8020ec6:	4603      	mov	r3, r0
}
 8020ec8:	4618      	mov	r0, r3
 8020eca:	3720      	adds	r7, #32
 8020ecc:	46bd      	mov	sp, r7
 8020ece:	bd80      	pop	{r7, pc}
 8020ed0:	0802863c 	.word	0x0802863c
 8020ed4:	0802878c 	.word	0x0802878c
 8020ed8:	080286b4 	.word	0x080286b4
 8020edc:	080287dc 	.word	0x080287dc
 8020ee0:	0802877c 	.word	0x0802877c
 8020ee4:	08028e8c 	.word	0x08028e8c
 8020ee8:	2000c10c 	.word	0x2000c10c
 8020eec:	2000c01c 	.word	0x2000c01c

08020ef0 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b08c      	sub	sp, #48	; 0x30
 8020ef4:	af02      	add	r7, sp, #8
 8020ef6:	60f8      	str	r0, [r7, #12]
 8020ef8:	60b9      	str	r1, [r7, #8]
 8020efa:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8020efc:	68fb      	ldr	r3, [r7, #12]
 8020efe:	3326      	adds	r3, #38	; 0x26
 8020f00:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8020f02:	23ff      	movs	r3, #255	; 0xff
 8020f04:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8020f08:	2300      	movs	r3, #0
 8020f0a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020f0c:	68bb      	ldr	r3, [r7, #8]
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	68f9      	ldr	r1, [r7, #12]
 8020f12:	4618      	mov	r0, r3
 8020f14:	f000 fe0e 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 8020f18:	4603      	mov	r3, r0
 8020f1a:	2b00      	cmp	r3, #0
 8020f1c:	d10c      	bne.n	8020f38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020f1e:	68bb      	ldr	r3, [r7, #8]
 8020f20:	681b      	ldr	r3, [r3, #0]
 8020f22:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8020f26:	2be0      	cmp	r3, #224	; 0xe0
 8020f28:	d006      	beq.n	8020f38 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8020f2a:	68bb      	ldr	r3, [r7, #8]
 8020f2c:	2b00      	cmp	r3, #0
 8020f2e:	d003      	beq.n	8020f38 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8020f30:	68bb      	ldr	r3, [r7, #8]
 8020f32:	681b      	ldr	r3, [r3, #0]
 8020f34:	2b00      	cmp	r3, #0
 8020f36:	d102      	bne.n	8020f3e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8020f38:	f06f 030f 	mvn.w	r3, #15
 8020f3c:	e101      	b.n	8021142 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8020f3e:	68fa      	ldr	r2, [r7, #12]
 8020f40:	2101      	movs	r1, #1
 8020f42:	68b8      	ldr	r0, [r7, #8]
 8020f44:	f7ff fb60 	bl	8020608 <etharp_find_entry>
 8020f48:	4603      	mov	r3, r0
 8020f4a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8020f4c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8020f50:	2b00      	cmp	r3, #0
 8020f52:	da02      	bge.n	8020f5a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8020f54:	8a7b      	ldrh	r3, [r7, #18]
 8020f56:	b25b      	sxtb	r3, r3
 8020f58:	e0f3      	b.n	8021142 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8020f5a:	8a7b      	ldrh	r3, [r7, #18]
 8020f5c:	2b7e      	cmp	r3, #126	; 0x7e
 8020f5e:	d906      	bls.n	8020f6e <etharp_query+0x7e>
 8020f60:	4b7a      	ldr	r3, [pc, #488]	; (802114c <etharp_query+0x25c>)
 8020f62:	f240 32c1 	movw	r2, #961	; 0x3c1
 8020f66:	497a      	ldr	r1, [pc, #488]	; (8021150 <etharp_query+0x260>)
 8020f68:	487a      	ldr	r0, [pc, #488]	; (8021154 <etharp_query+0x264>)
 8020f6a:	f003 f991 	bl	8024290 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8020f6e:	8a7b      	ldrh	r3, [r7, #18]
 8020f70:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8020f72:	7c7a      	ldrb	r2, [r7, #17]
 8020f74:	4978      	ldr	r1, [pc, #480]	; (8021158 <etharp_query+0x268>)
 8020f76:	4613      	mov	r3, r2
 8020f78:	005b      	lsls	r3, r3, #1
 8020f7a:	4413      	add	r3, r2
 8020f7c:	00db      	lsls	r3, r3, #3
 8020f7e:	440b      	add	r3, r1
 8020f80:	3314      	adds	r3, #20
 8020f82:	781b      	ldrb	r3, [r3, #0]
 8020f84:	2b00      	cmp	r3, #0
 8020f86:	d115      	bne.n	8020fb4 <etharp_query+0xc4>
    is_new_entry = 1;
 8020f88:	2301      	movs	r3, #1
 8020f8a:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8020f8c:	7c7a      	ldrb	r2, [r7, #17]
 8020f8e:	4972      	ldr	r1, [pc, #456]	; (8021158 <etharp_query+0x268>)
 8020f90:	4613      	mov	r3, r2
 8020f92:	005b      	lsls	r3, r3, #1
 8020f94:	4413      	add	r3, r2
 8020f96:	00db      	lsls	r3, r3, #3
 8020f98:	440b      	add	r3, r1
 8020f9a:	3314      	adds	r3, #20
 8020f9c:	2201      	movs	r2, #1
 8020f9e:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8020fa0:	7c7a      	ldrb	r2, [r7, #17]
 8020fa2:	496d      	ldr	r1, [pc, #436]	; (8021158 <etharp_query+0x268>)
 8020fa4:	4613      	mov	r3, r2
 8020fa6:	005b      	lsls	r3, r3, #1
 8020fa8:	4413      	add	r3, r2
 8020faa:	00db      	lsls	r3, r3, #3
 8020fac:	440b      	add	r3, r1
 8020fae:	3308      	adds	r3, #8
 8020fb0:	68fa      	ldr	r2, [r7, #12]
 8020fb2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8020fb4:	7c7a      	ldrb	r2, [r7, #17]
 8020fb6:	4968      	ldr	r1, [pc, #416]	; (8021158 <etharp_query+0x268>)
 8020fb8:	4613      	mov	r3, r2
 8020fba:	005b      	lsls	r3, r3, #1
 8020fbc:	4413      	add	r3, r2
 8020fbe:	00db      	lsls	r3, r3, #3
 8020fc0:	440b      	add	r3, r1
 8020fc2:	3314      	adds	r3, #20
 8020fc4:	781b      	ldrb	r3, [r3, #0]
 8020fc6:	2b01      	cmp	r3, #1
 8020fc8:	d011      	beq.n	8020fee <etharp_query+0xfe>
 8020fca:	7c7a      	ldrb	r2, [r7, #17]
 8020fcc:	4962      	ldr	r1, [pc, #392]	; (8021158 <etharp_query+0x268>)
 8020fce:	4613      	mov	r3, r2
 8020fd0:	005b      	lsls	r3, r3, #1
 8020fd2:	4413      	add	r3, r2
 8020fd4:	00db      	lsls	r3, r3, #3
 8020fd6:	440b      	add	r3, r1
 8020fd8:	3314      	adds	r3, #20
 8020fda:	781b      	ldrb	r3, [r3, #0]
 8020fdc:	2b01      	cmp	r3, #1
 8020fde:	d806      	bhi.n	8020fee <etharp_query+0xfe>
 8020fe0:	4b5a      	ldr	r3, [pc, #360]	; (802114c <etharp_query+0x25c>)
 8020fe2:	f240 32cd 	movw	r2, #973	; 0x3cd
 8020fe6:	495d      	ldr	r1, [pc, #372]	; (802115c <etharp_query+0x26c>)
 8020fe8:	485a      	ldr	r0, [pc, #360]	; (8021154 <etharp_query+0x264>)
 8020fea:	f003 f951 	bl	8024290 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8020fee:	6a3b      	ldr	r3, [r7, #32]
 8020ff0:	2b00      	cmp	r3, #0
 8020ff2:	d102      	bne.n	8020ffa <etharp_query+0x10a>
 8020ff4:	687b      	ldr	r3, [r7, #4]
 8020ff6:	2b00      	cmp	r3, #0
 8020ff8:	d10c      	bne.n	8021014 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8020ffa:	68b9      	ldr	r1, [r7, #8]
 8020ffc:	68f8      	ldr	r0, [r7, #12]
 8020ffe:	f000 f963 	bl	80212c8 <etharp_request>
 8021002:	4603      	mov	r3, r0
 8021004:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8021008:	687b      	ldr	r3, [r7, #4]
 802100a:	2b00      	cmp	r3, #0
 802100c:	d102      	bne.n	8021014 <etharp_query+0x124>
      return result;
 802100e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8021012:	e096      	b.n	8021142 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8021014:	687b      	ldr	r3, [r7, #4]
 8021016:	2b00      	cmp	r3, #0
 8021018:	d106      	bne.n	8021028 <etharp_query+0x138>
 802101a:	4b4c      	ldr	r3, [pc, #304]	; (802114c <etharp_query+0x25c>)
 802101c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8021020:	494f      	ldr	r1, [pc, #316]	; (8021160 <etharp_query+0x270>)
 8021022:	484c      	ldr	r0, [pc, #304]	; (8021154 <etharp_query+0x264>)
 8021024:	f003 f934 	bl	8024290 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8021028:	7c7a      	ldrb	r2, [r7, #17]
 802102a:	494b      	ldr	r1, [pc, #300]	; (8021158 <etharp_query+0x268>)
 802102c:	4613      	mov	r3, r2
 802102e:	005b      	lsls	r3, r3, #1
 8021030:	4413      	add	r3, r2
 8021032:	00db      	lsls	r3, r3, #3
 8021034:	440b      	add	r3, r1
 8021036:	3314      	adds	r3, #20
 8021038:	781b      	ldrb	r3, [r3, #0]
 802103a:	2b01      	cmp	r3, #1
 802103c:	d917      	bls.n	802106e <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 802103e:	4a49      	ldr	r2, [pc, #292]	; (8021164 <etharp_query+0x274>)
 8021040:	7c7b      	ldrb	r3, [r7, #17]
 8021042:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8021044:	7c7a      	ldrb	r2, [r7, #17]
 8021046:	4613      	mov	r3, r2
 8021048:	005b      	lsls	r3, r3, #1
 802104a:	4413      	add	r3, r2
 802104c:	00db      	lsls	r3, r3, #3
 802104e:	3308      	adds	r3, #8
 8021050:	4a41      	ldr	r2, [pc, #260]	; (8021158 <etharp_query+0x268>)
 8021052:	4413      	add	r3, r2
 8021054:	3304      	adds	r3, #4
 8021056:	f44f 6200 	mov.w	r2, #2048	; 0x800
 802105a:	9200      	str	r2, [sp, #0]
 802105c:	697a      	ldr	r2, [r7, #20]
 802105e:	6879      	ldr	r1, [r7, #4]
 8021060:	68f8      	ldr	r0, [r7, #12]
 8021062:	f001 fc75 	bl	8022950 <ethernet_output>
 8021066:	4603      	mov	r3, r0
 8021068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 802106c:	e067      	b.n	802113e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 802106e:	7c7a      	ldrb	r2, [r7, #17]
 8021070:	4939      	ldr	r1, [pc, #228]	; (8021158 <etharp_query+0x268>)
 8021072:	4613      	mov	r3, r2
 8021074:	005b      	lsls	r3, r3, #1
 8021076:	4413      	add	r3, r2
 8021078:	00db      	lsls	r3, r3, #3
 802107a:	440b      	add	r3, r1
 802107c:	3314      	adds	r3, #20
 802107e:	781b      	ldrb	r3, [r3, #0]
 8021080:	2b01      	cmp	r3, #1
 8021082:	d15c      	bne.n	802113e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8021084:	2300      	movs	r3, #0
 8021086:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	61fb      	str	r3, [r7, #28]
    while (p) {
 802108c:	e01c      	b.n	80210c8 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 802108e:	69fb      	ldr	r3, [r7, #28]
 8021090:	895a      	ldrh	r2, [r3, #10]
 8021092:	69fb      	ldr	r3, [r7, #28]
 8021094:	891b      	ldrh	r3, [r3, #8]
 8021096:	429a      	cmp	r2, r3
 8021098:	d10a      	bne.n	80210b0 <etharp_query+0x1c0>
 802109a:	69fb      	ldr	r3, [r7, #28]
 802109c:	681b      	ldr	r3, [r3, #0]
 802109e:	2b00      	cmp	r3, #0
 80210a0:	d006      	beq.n	80210b0 <etharp_query+0x1c0>
 80210a2:	4b2a      	ldr	r3, [pc, #168]	; (802114c <etharp_query+0x25c>)
 80210a4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80210a8:	492f      	ldr	r1, [pc, #188]	; (8021168 <etharp_query+0x278>)
 80210aa:	482a      	ldr	r0, [pc, #168]	; (8021154 <etharp_query+0x264>)
 80210ac:	f003 f8f0 	bl	8024290 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80210b0:	69fb      	ldr	r3, [r7, #28]
 80210b2:	7b1b      	ldrb	r3, [r3, #12]
 80210b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80210b8:	2b00      	cmp	r3, #0
 80210ba:	d002      	beq.n	80210c2 <etharp_query+0x1d2>
        copy_needed = 1;
 80210bc:	2301      	movs	r3, #1
 80210be:	61bb      	str	r3, [r7, #24]
        break;
 80210c0:	e005      	b.n	80210ce <etharp_query+0x1de>
      }
      p = p->next;
 80210c2:	69fb      	ldr	r3, [r7, #28]
 80210c4:	681b      	ldr	r3, [r3, #0]
 80210c6:	61fb      	str	r3, [r7, #28]
    while (p) {
 80210c8:	69fb      	ldr	r3, [r7, #28]
 80210ca:	2b00      	cmp	r3, #0
 80210cc:	d1df      	bne.n	802108e <etharp_query+0x19e>
    }
    if (copy_needed) {
 80210ce:	69bb      	ldr	r3, [r7, #24]
 80210d0:	2b00      	cmp	r3, #0
 80210d2:	d007      	beq.n	80210e4 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 80210d4:	687a      	ldr	r2, [r7, #4]
 80210d6:	f44f 7120 	mov.w	r1, #640	; 0x280
 80210da:	200e      	movs	r0, #14
 80210dc:	f7f8 f918 	bl	8019310 <pbuf_clone>
 80210e0:	61f8      	str	r0, [r7, #28]
 80210e2:	e004      	b.n	80210ee <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 80210e4:	687b      	ldr	r3, [r7, #4]
 80210e6:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 80210e8:	69f8      	ldr	r0, [r7, #28]
 80210ea:	f7f7 ff3f 	bl	8018f6c <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 80210ee:	69fb      	ldr	r3, [r7, #28]
 80210f0:	2b00      	cmp	r3, #0
 80210f2:	d021      	beq.n	8021138 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 80210f4:	7c7a      	ldrb	r2, [r7, #17]
 80210f6:	4918      	ldr	r1, [pc, #96]	; (8021158 <etharp_query+0x268>)
 80210f8:	4613      	mov	r3, r2
 80210fa:	005b      	lsls	r3, r3, #1
 80210fc:	4413      	add	r3, r2
 80210fe:	00db      	lsls	r3, r3, #3
 8021100:	440b      	add	r3, r1
 8021102:	681b      	ldr	r3, [r3, #0]
 8021104:	2b00      	cmp	r3, #0
 8021106:	d00a      	beq.n	802111e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8021108:	7c7a      	ldrb	r2, [r7, #17]
 802110a:	4913      	ldr	r1, [pc, #76]	; (8021158 <etharp_query+0x268>)
 802110c:	4613      	mov	r3, r2
 802110e:	005b      	lsls	r3, r3, #1
 8021110:	4413      	add	r3, r2
 8021112:	00db      	lsls	r3, r3, #3
 8021114:	440b      	add	r3, r1
 8021116:	681b      	ldr	r3, [r3, #0]
 8021118:	4618      	mov	r0, r3
 802111a:	f7f7 fe81 	bl	8018e20 <pbuf_free>
      }
      arp_table[i].q = p;
 802111e:	7c7a      	ldrb	r2, [r7, #17]
 8021120:	490d      	ldr	r1, [pc, #52]	; (8021158 <etharp_query+0x268>)
 8021122:	4613      	mov	r3, r2
 8021124:	005b      	lsls	r3, r3, #1
 8021126:	4413      	add	r3, r2
 8021128:	00db      	lsls	r3, r3, #3
 802112a:	440b      	add	r3, r1
 802112c:	69fa      	ldr	r2, [r7, #28]
 802112e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8021130:	2300      	movs	r3, #0
 8021132:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8021136:	e002      	b.n	802113e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8021138:	23ff      	movs	r3, #255	; 0xff
 802113a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 802113e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8021142:	4618      	mov	r0, r3
 8021144:	3728      	adds	r7, #40	; 0x28
 8021146:	46bd      	mov	sp, r7
 8021148:	bd80      	pop	{r7, pc}
 802114a:	bf00      	nop
 802114c:	0802863c 	.word	0x0802863c
 8021150:	080287e8 	.word	0x080287e8
 8021154:	080286b4 	.word	0x080286b4
 8021158:	2000c01c 	.word	0x2000c01c
 802115c:	080287f8 	.word	0x080287f8
 8021160:	080287dc 	.word	0x080287dc
 8021164:	2000c10c 	.word	0x2000c10c
 8021168:	08028820 	.word	0x08028820

0802116c <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 802116c:	b580      	push	{r7, lr}
 802116e:	b08a      	sub	sp, #40	; 0x28
 8021170:	af02      	add	r7, sp, #8
 8021172:	60f8      	str	r0, [r7, #12]
 8021174:	60b9      	str	r1, [r7, #8]
 8021176:	607a      	str	r2, [r7, #4]
 8021178:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 802117a:	2300      	movs	r3, #0
 802117c:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 802117e:	68fb      	ldr	r3, [r7, #12]
 8021180:	2b00      	cmp	r3, #0
 8021182:	d106      	bne.n	8021192 <etharp_raw+0x26>
 8021184:	4b3a      	ldr	r3, [pc, #232]	; (8021270 <etharp_raw+0x104>)
 8021186:	f240 4257 	movw	r2, #1111	; 0x457
 802118a:	493a      	ldr	r1, [pc, #232]	; (8021274 <etharp_raw+0x108>)
 802118c:	483a      	ldr	r0, [pc, #232]	; (8021278 <etharp_raw+0x10c>)
 802118e:	f003 f87f 	bl	8024290 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 8021192:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021196:	211c      	movs	r1, #28
 8021198:	200e      	movs	r0, #14
 802119a:	f7f7 fb5d 	bl	8018858 <pbuf_alloc>
 802119e:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80211a0:	69bb      	ldr	r3, [r7, #24]
 80211a2:	2b00      	cmp	r3, #0
 80211a4:	d102      	bne.n	80211ac <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80211a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80211aa:	e05d      	b.n	8021268 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80211ac:	69bb      	ldr	r3, [r7, #24]
 80211ae:	895b      	ldrh	r3, [r3, #10]
 80211b0:	2b1b      	cmp	r3, #27
 80211b2:	d806      	bhi.n	80211c2 <etharp_raw+0x56>
 80211b4:	4b2e      	ldr	r3, [pc, #184]	; (8021270 <etharp_raw+0x104>)
 80211b6:	f240 4262 	movw	r2, #1122	; 0x462
 80211ba:	4930      	ldr	r1, [pc, #192]	; (802127c <etharp_raw+0x110>)
 80211bc:	482e      	ldr	r0, [pc, #184]	; (8021278 <etharp_raw+0x10c>)
 80211be:	f003 f867 	bl	8024290 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 80211c2:	69bb      	ldr	r3, [r7, #24]
 80211c4:	685b      	ldr	r3, [r3, #4]
 80211c6:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 80211c8:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80211ca:	4618      	mov	r0, r3
 80211cc:	f7f6 fa36 	bl	801763c <lwip_htons>
 80211d0:	4603      	mov	r3, r0
 80211d2:	461a      	mov	r2, r3
 80211d4:	697b      	ldr	r3, [r7, #20]
 80211d6:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80211d8:	68fb      	ldr	r3, [r7, #12]
 80211da:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80211de:	2b06      	cmp	r3, #6
 80211e0:	d006      	beq.n	80211f0 <etharp_raw+0x84>
 80211e2:	4b23      	ldr	r3, [pc, #140]	; (8021270 <etharp_raw+0x104>)
 80211e4:	f240 4269 	movw	r2, #1129	; 0x469
 80211e8:	4925      	ldr	r1, [pc, #148]	; (8021280 <etharp_raw+0x114>)
 80211ea:	4823      	ldr	r0, [pc, #140]	; (8021278 <etharp_raw+0x10c>)
 80211ec:	f003 f850 	bl	8024290 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80211f0:	697b      	ldr	r3, [r7, #20]
 80211f2:	3308      	adds	r3, #8
 80211f4:	2206      	movs	r2, #6
 80211f6:	6839      	ldr	r1, [r7, #0]
 80211f8:	4618      	mov	r0, r3
 80211fa:	f002 ff39 	bl	8024070 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80211fe:	697b      	ldr	r3, [r7, #20]
 8021200:	3312      	adds	r3, #18
 8021202:	2206      	movs	r2, #6
 8021204:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8021206:	4618      	mov	r0, r3
 8021208:	f002 ff32 	bl	8024070 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 802120c:	697b      	ldr	r3, [r7, #20]
 802120e:	330e      	adds	r3, #14
 8021210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8021212:	6812      	ldr	r2, [r2, #0]
 8021214:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8021216:	697b      	ldr	r3, [r7, #20]
 8021218:	3318      	adds	r3, #24
 802121a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 802121c:	6812      	ldr	r2, [r2, #0]
 802121e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8021220:	697b      	ldr	r3, [r7, #20]
 8021222:	2200      	movs	r2, #0
 8021224:	701a      	strb	r2, [r3, #0]
 8021226:	2200      	movs	r2, #0
 8021228:	f042 0201 	orr.w	r2, r2, #1
 802122c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 802122e:	697b      	ldr	r3, [r7, #20]
 8021230:	2200      	movs	r2, #0
 8021232:	f042 0208 	orr.w	r2, r2, #8
 8021236:	709a      	strb	r2, [r3, #2]
 8021238:	2200      	movs	r2, #0
 802123a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 802123c:	697b      	ldr	r3, [r7, #20]
 802123e:	2206      	movs	r2, #6
 8021240:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8021242:	697b      	ldr	r3, [r7, #20]
 8021244:	2204      	movs	r2, #4
 8021246:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8021248:	f640 0306 	movw	r3, #2054	; 0x806
 802124c:	9300      	str	r3, [sp, #0]
 802124e:	687b      	ldr	r3, [r7, #4]
 8021250:	68ba      	ldr	r2, [r7, #8]
 8021252:	69b9      	ldr	r1, [r7, #24]
 8021254:	68f8      	ldr	r0, [r7, #12]
 8021256:	f001 fb7b 	bl	8022950 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 802125a:	69b8      	ldr	r0, [r7, #24]
 802125c:	f7f7 fde0 	bl	8018e20 <pbuf_free>
  p = NULL;
 8021260:	2300      	movs	r3, #0
 8021262:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 8021264:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8021268:	4618      	mov	r0, r3
 802126a:	3720      	adds	r7, #32
 802126c:	46bd      	mov	sp, r7
 802126e:	bd80      	pop	{r7, pc}
 8021270:	0802863c 	.word	0x0802863c
 8021274:	0802878c 	.word	0x0802878c
 8021278:	080286b4 	.word	0x080286b4
 802127c:	0802883c 	.word	0x0802883c
 8021280:	08028870 	.word	0x08028870

08021284 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 8021284:	b580      	push	{r7, lr}
 8021286:	b088      	sub	sp, #32
 8021288:	af04      	add	r7, sp, #16
 802128a:	60f8      	str	r0, [r7, #12]
 802128c:	60b9      	str	r1, [r7, #8]
 802128e:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8021290:	68fb      	ldr	r3, [r7, #12]
 8021292:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 8021296:	68fb      	ldr	r3, [r7, #12]
 8021298:	f103 0026 	add.w	r0, r3, #38	; 0x26
 802129c:	68fb      	ldr	r3, [r7, #12]
 802129e:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80212a0:	2201      	movs	r2, #1
 80212a2:	9203      	str	r2, [sp, #12]
 80212a4:	68ba      	ldr	r2, [r7, #8]
 80212a6:	9202      	str	r2, [sp, #8]
 80212a8:	4a06      	ldr	r2, [pc, #24]	; (80212c4 <etharp_request_dst+0x40>)
 80212aa:	9201      	str	r2, [sp, #4]
 80212ac:	9300      	str	r3, [sp, #0]
 80212ae:	4603      	mov	r3, r0
 80212b0:	687a      	ldr	r2, [r7, #4]
 80212b2:	68f8      	ldr	r0, [r7, #12]
 80212b4:	f7ff ff5a 	bl	802116c <etharp_raw>
 80212b8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80212ba:	4618      	mov	r0, r3
 80212bc:	3710      	adds	r7, #16
 80212be:	46bd      	mov	sp, r7
 80212c0:	bd80      	pop	{r7, pc}
 80212c2:	bf00      	nop
 80212c4:	08028e94 	.word	0x08028e94

080212c8 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 80212c8:	b580      	push	{r7, lr}
 80212ca:	b082      	sub	sp, #8
 80212cc:	af00      	add	r7, sp, #0
 80212ce:	6078      	str	r0, [r7, #4]
 80212d0:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 80212d2:	4a05      	ldr	r2, [pc, #20]	; (80212e8 <etharp_request+0x20>)
 80212d4:	6839      	ldr	r1, [r7, #0]
 80212d6:	6878      	ldr	r0, [r7, #4]
 80212d8:	f7ff ffd4 	bl	8021284 <etharp_request_dst>
 80212dc:	4603      	mov	r3, r0
}
 80212de:	4618      	mov	r0, r3
 80212e0:	3708      	adds	r7, #8
 80212e2:	46bd      	mov	sp, r7
 80212e4:	bd80      	pop	{r7, pc}
 80212e6:	bf00      	nop
 80212e8:	08028e8c 	.word	0x08028e8c

080212ec <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80212ec:	b580      	push	{r7, lr}
 80212ee:	b08e      	sub	sp, #56	; 0x38
 80212f0:	af04      	add	r7, sp, #16
 80212f2:	6078      	str	r0, [r7, #4]
 80212f4:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80212f6:	4b79      	ldr	r3, [pc, #484]	; (80214dc <icmp_input+0x1f0>)
 80212f8:	689b      	ldr	r3, [r3, #8]
 80212fa:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80212fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80212fe:	781b      	ldrb	r3, [r3, #0]
 8021300:	f003 030f 	and.w	r3, r3, #15
 8021304:	b2db      	uxtb	r3, r3
 8021306:	009b      	lsls	r3, r3, #2
 8021308:	b2db      	uxtb	r3, r3
 802130a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 802130c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802130e:	2b13      	cmp	r3, #19
 8021310:	f240 80cd 	bls.w	80214ae <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8021314:	687b      	ldr	r3, [r7, #4]
 8021316:	895b      	ldrh	r3, [r3, #10]
 8021318:	2b03      	cmp	r3, #3
 802131a:	f240 80ca 	bls.w	80214b2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 802131e:	687b      	ldr	r3, [r7, #4]
 8021320:	685b      	ldr	r3, [r3, #4]
 8021322:	781b      	ldrb	r3, [r3, #0]
 8021324:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8021328:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 802132c:	2b00      	cmp	r3, #0
 802132e:	f000 80b7 	beq.w	80214a0 <icmp_input+0x1b4>
 8021332:	2b08      	cmp	r3, #8
 8021334:	f040 80b7 	bne.w	80214a6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8021338:	4b69      	ldr	r3, [pc, #420]	; (80214e0 <icmp_input+0x1f4>)
 802133a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 802133c:	4b67      	ldr	r3, [pc, #412]	; (80214dc <icmp_input+0x1f0>)
 802133e:	695b      	ldr	r3, [r3, #20]
 8021340:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8021344:	2be0      	cmp	r3, #224	; 0xe0
 8021346:	f000 80bb 	beq.w	80214c0 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 802134a:	4b64      	ldr	r3, [pc, #400]	; (80214dc <icmp_input+0x1f0>)
 802134c:	695b      	ldr	r3, [r3, #20]
 802134e:	4a63      	ldr	r2, [pc, #396]	; (80214dc <icmp_input+0x1f0>)
 8021350:	6812      	ldr	r2, [r2, #0]
 8021352:	4611      	mov	r1, r2
 8021354:	4618      	mov	r0, r3
 8021356:	f000 fbed 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 802135a:	4603      	mov	r3, r0
 802135c:	2b00      	cmp	r3, #0
 802135e:	f040 80b1 	bne.w	80214c4 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 8021362:	687b      	ldr	r3, [r7, #4]
 8021364:	891b      	ldrh	r3, [r3, #8]
 8021366:	2b07      	cmp	r3, #7
 8021368:	f240 80a5 	bls.w	80214b6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 802136c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802136e:	330e      	adds	r3, #14
 8021370:	4619      	mov	r1, r3
 8021372:	6878      	ldr	r0, [r7, #4]
 8021374:	f7f7 fcbe 	bl	8018cf4 <pbuf_add_header>
 8021378:	4603      	mov	r3, r0
 802137a:	2b00      	cmp	r3, #0
 802137c:	d04b      	beq.n	8021416 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 802137e:	687b      	ldr	r3, [r7, #4]
 8021380:	891a      	ldrh	r2, [r3, #8]
 8021382:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021384:	4413      	add	r3, r2
 8021386:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8021388:	687b      	ldr	r3, [r7, #4]
 802138a:	891b      	ldrh	r3, [r3, #8]
 802138c:	8b7a      	ldrh	r2, [r7, #26]
 802138e:	429a      	cmp	r2, r3
 8021390:	f0c0 809a 	bcc.w	80214c8 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 8021394:	8b7b      	ldrh	r3, [r7, #26]
 8021396:	f44f 7220 	mov.w	r2, #640	; 0x280
 802139a:	4619      	mov	r1, r3
 802139c:	200e      	movs	r0, #14
 802139e:	f7f7 fa5b 	bl	8018858 <pbuf_alloc>
 80213a2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80213a4:	697b      	ldr	r3, [r7, #20]
 80213a6:	2b00      	cmp	r3, #0
 80213a8:	f000 8090 	beq.w	80214cc <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80213ac:	697b      	ldr	r3, [r7, #20]
 80213ae:	895b      	ldrh	r3, [r3, #10]
 80213b0:	461a      	mov	r2, r3
 80213b2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213b4:	3308      	adds	r3, #8
 80213b6:	429a      	cmp	r2, r3
 80213b8:	d203      	bcs.n	80213c2 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80213ba:	6978      	ldr	r0, [r7, #20]
 80213bc:	f7f7 fd30 	bl	8018e20 <pbuf_free>
          goto icmperr;
 80213c0:	e085      	b.n	80214ce <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 80213c2:	697b      	ldr	r3, [r7, #20]
 80213c4:	685b      	ldr	r3, [r3, #4]
 80213c6:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80213c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80213ca:	4618      	mov	r0, r3
 80213cc:	f002 fe50 	bl	8024070 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 80213d0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80213d2:	4619      	mov	r1, r3
 80213d4:	6978      	ldr	r0, [r7, #20]
 80213d6:	f7f7 fc9d 	bl	8018d14 <pbuf_remove_header>
 80213da:	4603      	mov	r3, r0
 80213dc:	2b00      	cmp	r3, #0
 80213de:	d009      	beq.n	80213f4 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80213e0:	4b40      	ldr	r3, [pc, #256]	; (80214e4 <icmp_input+0x1f8>)
 80213e2:	22b6      	movs	r2, #182	; 0xb6
 80213e4:	4940      	ldr	r1, [pc, #256]	; (80214e8 <icmp_input+0x1fc>)
 80213e6:	4841      	ldr	r0, [pc, #260]	; (80214ec <icmp_input+0x200>)
 80213e8:	f002 ff52 	bl	8024290 <iprintf>
          pbuf_free(r);
 80213ec:	6978      	ldr	r0, [r7, #20]
 80213ee:	f7f7 fd17 	bl	8018e20 <pbuf_free>
          goto icmperr;
 80213f2:	e06c      	b.n	80214ce <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80213f4:	6879      	ldr	r1, [r7, #4]
 80213f6:	6978      	ldr	r0, [r7, #20]
 80213f8:	f7f7 fe46 	bl	8019088 <pbuf_copy>
 80213fc:	4603      	mov	r3, r0
 80213fe:	2b00      	cmp	r3, #0
 8021400:	d003      	beq.n	802140a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8021402:	6978      	ldr	r0, [r7, #20]
 8021404:	f7f7 fd0c 	bl	8018e20 <pbuf_free>
          goto icmperr;
 8021408:	e061      	b.n	80214ce <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 802140a:	6878      	ldr	r0, [r7, #4]
 802140c:	f7f7 fd08 	bl	8018e20 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8021410:	697b      	ldr	r3, [r7, #20]
 8021412:	607b      	str	r3, [r7, #4]
 8021414:	e00f      	b.n	8021436 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8021416:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8021418:	330e      	adds	r3, #14
 802141a:	4619      	mov	r1, r3
 802141c:	6878      	ldr	r0, [r7, #4]
 802141e:	f7f7 fc79 	bl	8018d14 <pbuf_remove_header>
 8021422:	4603      	mov	r3, r0
 8021424:	2b00      	cmp	r3, #0
 8021426:	d006      	beq.n	8021436 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8021428:	4b2e      	ldr	r3, [pc, #184]	; (80214e4 <icmp_input+0x1f8>)
 802142a:	22c7      	movs	r2, #199	; 0xc7
 802142c:	4930      	ldr	r1, [pc, #192]	; (80214f0 <icmp_input+0x204>)
 802142e:	482f      	ldr	r0, [pc, #188]	; (80214ec <icmp_input+0x200>)
 8021430:	f002 ff2e 	bl	8024290 <iprintf>
          goto icmperr;
 8021434:	e04b      	b.n	80214ce <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8021436:	687b      	ldr	r3, [r7, #4]
 8021438:	685b      	ldr	r3, [r3, #4]
 802143a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 802143c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 802143e:	4619      	mov	r1, r3
 8021440:	6878      	ldr	r0, [r7, #4]
 8021442:	f7f7 fc57 	bl	8018cf4 <pbuf_add_header>
 8021446:	4603      	mov	r3, r0
 8021448:	2b00      	cmp	r3, #0
 802144a:	d12b      	bne.n	80214a4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 802144c:	687b      	ldr	r3, [r7, #4]
 802144e:	685b      	ldr	r3, [r3, #4]
 8021450:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8021452:	69fb      	ldr	r3, [r7, #28]
 8021454:	681a      	ldr	r2, [r3, #0]
 8021456:	68fb      	ldr	r3, [r7, #12]
 8021458:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 802145a:	4b20      	ldr	r3, [pc, #128]	; (80214dc <icmp_input+0x1f0>)
 802145c:	691a      	ldr	r2, [r3, #16]
 802145e:	68fb      	ldr	r3, [r7, #12]
 8021460:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 8021462:	693b      	ldr	r3, [r7, #16]
 8021464:	2200      	movs	r2, #0
 8021466:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8021468:	693b      	ldr	r3, [r7, #16]
 802146a:	2200      	movs	r2, #0
 802146c:	709a      	strb	r2, [r3, #2]
 802146e:	2200      	movs	r2, #0
 8021470:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 8021472:	68fb      	ldr	r3, [r7, #12]
 8021474:	22ff      	movs	r2, #255	; 0xff
 8021476:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8021478:	68fb      	ldr	r3, [r7, #12]
 802147a:	2200      	movs	r2, #0
 802147c:	729a      	strb	r2, [r3, #10]
 802147e:	2200      	movs	r2, #0
 8021480:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 8021482:	683b      	ldr	r3, [r7, #0]
 8021484:	9302      	str	r3, [sp, #8]
 8021486:	2301      	movs	r3, #1
 8021488:	9301      	str	r3, [sp, #4]
 802148a:	2300      	movs	r3, #0
 802148c:	9300      	str	r3, [sp, #0]
 802148e:	23ff      	movs	r3, #255	; 0xff
 8021490:	2200      	movs	r2, #0
 8021492:	69f9      	ldr	r1, [r7, #28]
 8021494:	6878      	ldr	r0, [r7, #4]
 8021496:	f000 fa75 	bl	8021984 <ip4_output_if>
 802149a:	4603      	mov	r3, r0
 802149c:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 802149e:	e001      	b.n	80214a4 <icmp_input+0x1b8>
      break;
 80214a0:	bf00      	nop
 80214a2:	e000      	b.n	80214a6 <icmp_input+0x1ba>
      break;
 80214a4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80214a6:	6878      	ldr	r0, [r7, #4]
 80214a8:	f7f7 fcba 	bl	8018e20 <pbuf_free>
  return;
 80214ac:	e013      	b.n	80214d6 <icmp_input+0x1ea>
    goto lenerr;
 80214ae:	bf00      	nop
 80214b0:	e002      	b.n	80214b8 <icmp_input+0x1cc>
    goto lenerr;
 80214b2:	bf00      	nop
 80214b4:	e000      	b.n	80214b8 <icmp_input+0x1cc>
        goto lenerr;
 80214b6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80214b8:	6878      	ldr	r0, [r7, #4]
 80214ba:	f7f7 fcb1 	bl	8018e20 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80214be:	e00a      	b.n	80214d6 <icmp_input+0x1ea>
        goto icmperr;
 80214c0:	bf00      	nop
 80214c2:	e004      	b.n	80214ce <icmp_input+0x1e2>
        goto icmperr;
 80214c4:	bf00      	nop
 80214c6:	e002      	b.n	80214ce <icmp_input+0x1e2>
          goto icmperr;
 80214c8:	bf00      	nop
 80214ca:	e000      	b.n	80214ce <icmp_input+0x1e2>
          goto icmperr;
 80214cc:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 80214ce:	6878      	ldr	r0, [r7, #4]
 80214d0:	f7f7 fca6 	bl	8018e20 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80214d4:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 80214d6:	3728      	adds	r7, #40	; 0x28
 80214d8:	46bd      	mov	sp, r7
 80214da:	bd80      	pop	{r7, pc}
 80214dc:	200066a8 	.word	0x200066a8
 80214e0:	200066bc 	.word	0x200066bc
 80214e4:	080288b4 	.word	0x080288b4
 80214e8:	080288ec 	.word	0x080288ec
 80214ec:	08028924 	.word	0x08028924
 80214f0:	0802894c 	.word	0x0802894c

080214f4 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80214f4:	b580      	push	{r7, lr}
 80214f6:	b082      	sub	sp, #8
 80214f8:	af00      	add	r7, sp, #0
 80214fa:	6078      	str	r0, [r7, #4]
 80214fc:	460b      	mov	r3, r1
 80214fe:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8021500:	78fb      	ldrb	r3, [r7, #3]
 8021502:	461a      	mov	r2, r3
 8021504:	2103      	movs	r1, #3
 8021506:	6878      	ldr	r0, [r7, #4]
 8021508:	f000 f814 	bl	8021534 <icmp_send_response>
}
 802150c:	bf00      	nop
 802150e:	3708      	adds	r7, #8
 8021510:	46bd      	mov	sp, r7
 8021512:	bd80      	pop	{r7, pc}

08021514 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8021514:	b580      	push	{r7, lr}
 8021516:	b082      	sub	sp, #8
 8021518:	af00      	add	r7, sp, #0
 802151a:	6078      	str	r0, [r7, #4]
 802151c:	460b      	mov	r3, r1
 802151e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8021520:	78fb      	ldrb	r3, [r7, #3]
 8021522:	461a      	mov	r2, r3
 8021524:	210b      	movs	r1, #11
 8021526:	6878      	ldr	r0, [r7, #4]
 8021528:	f000 f804 	bl	8021534 <icmp_send_response>
}
 802152c:	bf00      	nop
 802152e:	3708      	adds	r7, #8
 8021530:	46bd      	mov	sp, r7
 8021532:	bd80      	pop	{r7, pc}

08021534 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8021534:	b580      	push	{r7, lr}
 8021536:	b08c      	sub	sp, #48	; 0x30
 8021538:	af04      	add	r7, sp, #16
 802153a:	6078      	str	r0, [r7, #4]
 802153c:	460b      	mov	r3, r1
 802153e:	70fb      	strb	r3, [r7, #3]
 8021540:	4613      	mov	r3, r2
 8021542:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8021544:	f44f 7220 	mov.w	r2, #640	; 0x280
 8021548:	2124      	movs	r1, #36	; 0x24
 802154a:	2022      	movs	r0, #34	; 0x22
 802154c:	f7f7 f984 	bl	8018858 <pbuf_alloc>
 8021550:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8021552:	69fb      	ldr	r3, [r7, #28]
 8021554:	2b00      	cmp	r3, #0
 8021556:	d04c      	beq.n	80215f2 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8021558:	69fb      	ldr	r3, [r7, #28]
 802155a:	895b      	ldrh	r3, [r3, #10]
 802155c:	2b23      	cmp	r3, #35	; 0x23
 802155e:	d806      	bhi.n	802156e <icmp_send_response+0x3a>
 8021560:	4b26      	ldr	r3, [pc, #152]	; (80215fc <icmp_send_response+0xc8>)
 8021562:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8021566:	4926      	ldr	r1, [pc, #152]	; (8021600 <icmp_send_response+0xcc>)
 8021568:	4826      	ldr	r0, [pc, #152]	; (8021604 <icmp_send_response+0xd0>)
 802156a:	f002 fe91 	bl	8024290 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 802156e:	687b      	ldr	r3, [r7, #4]
 8021570:	685b      	ldr	r3, [r3, #4]
 8021572:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 8021574:	69fb      	ldr	r3, [r7, #28]
 8021576:	685b      	ldr	r3, [r3, #4]
 8021578:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 802157a:	697b      	ldr	r3, [r7, #20]
 802157c:	78fa      	ldrb	r2, [r7, #3]
 802157e:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8021580:	697b      	ldr	r3, [r7, #20]
 8021582:	78ba      	ldrb	r2, [r7, #2]
 8021584:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 8021586:	697b      	ldr	r3, [r7, #20]
 8021588:	2200      	movs	r2, #0
 802158a:	711a      	strb	r2, [r3, #4]
 802158c:	2200      	movs	r2, #0
 802158e:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8021590:	697b      	ldr	r3, [r7, #20]
 8021592:	2200      	movs	r2, #0
 8021594:	719a      	strb	r2, [r3, #6]
 8021596:	2200      	movs	r2, #0
 8021598:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 802159a:	69fb      	ldr	r3, [r7, #28]
 802159c:	685b      	ldr	r3, [r3, #4]
 802159e:	f103 0008 	add.w	r0, r3, #8
 80215a2:	687b      	ldr	r3, [r7, #4]
 80215a4:	685b      	ldr	r3, [r3, #4]
 80215a6:	221c      	movs	r2, #28
 80215a8:	4619      	mov	r1, r3
 80215aa:	f002 fd61 	bl	8024070 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80215ae:	69bb      	ldr	r3, [r7, #24]
 80215b0:	68db      	ldr	r3, [r3, #12]
 80215b2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80215b4:	f107 030c 	add.w	r3, r7, #12
 80215b8:	4618      	mov	r0, r3
 80215ba:	f000 f825 	bl	8021608 <ip4_route>
 80215be:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 80215c0:	693b      	ldr	r3, [r7, #16]
 80215c2:	2b00      	cmp	r3, #0
 80215c4:	d011      	beq.n	80215ea <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 80215c6:	697b      	ldr	r3, [r7, #20]
 80215c8:	2200      	movs	r2, #0
 80215ca:	709a      	strb	r2, [r3, #2]
 80215cc:	2200      	movs	r2, #0
 80215ce:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 80215d0:	f107 020c 	add.w	r2, r7, #12
 80215d4:	693b      	ldr	r3, [r7, #16]
 80215d6:	9302      	str	r3, [sp, #8]
 80215d8:	2301      	movs	r3, #1
 80215da:	9301      	str	r3, [sp, #4]
 80215dc:	2300      	movs	r3, #0
 80215de:	9300      	str	r3, [sp, #0]
 80215e0:	23ff      	movs	r3, #255	; 0xff
 80215e2:	2100      	movs	r1, #0
 80215e4:	69f8      	ldr	r0, [r7, #28]
 80215e6:	f000 f9cd 	bl	8021984 <ip4_output_if>
  }
  pbuf_free(q);
 80215ea:	69f8      	ldr	r0, [r7, #28]
 80215ec:	f7f7 fc18 	bl	8018e20 <pbuf_free>
 80215f0:	e000      	b.n	80215f4 <icmp_send_response+0xc0>
    return;
 80215f2:	bf00      	nop
}
 80215f4:	3720      	adds	r7, #32
 80215f6:	46bd      	mov	sp, r7
 80215f8:	bd80      	pop	{r7, pc}
 80215fa:	bf00      	nop
 80215fc:	080288b4 	.word	0x080288b4
 8021600:	08028980 	.word	0x08028980
 8021604:	08028924 	.word	0x08028924

08021608 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8021608:	b480      	push	{r7}
 802160a:	b085      	sub	sp, #20
 802160c:	af00      	add	r7, sp, #0
 802160e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8021610:	4b33      	ldr	r3, [pc, #204]	; (80216e0 <ip4_route+0xd8>)
 8021612:	681b      	ldr	r3, [r3, #0]
 8021614:	60fb      	str	r3, [r7, #12]
 8021616:	e036      	b.n	8021686 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8021618:	68fb      	ldr	r3, [r7, #12]
 802161a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802161e:	f003 0301 	and.w	r3, r3, #1
 8021622:	b2db      	uxtb	r3, r3
 8021624:	2b00      	cmp	r3, #0
 8021626:	d02b      	beq.n	8021680 <ip4_route+0x78>
 8021628:	68fb      	ldr	r3, [r7, #12]
 802162a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802162e:	089b      	lsrs	r3, r3, #2
 8021630:	f003 0301 	and.w	r3, r3, #1
 8021634:	b2db      	uxtb	r3, r3
 8021636:	2b00      	cmp	r3, #0
 8021638:	d022      	beq.n	8021680 <ip4_route+0x78>
 802163a:	68fb      	ldr	r3, [r7, #12]
 802163c:	3304      	adds	r3, #4
 802163e:	681b      	ldr	r3, [r3, #0]
 8021640:	2b00      	cmp	r3, #0
 8021642:	d01d      	beq.n	8021680 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8021644:	687b      	ldr	r3, [r7, #4]
 8021646:	681a      	ldr	r2, [r3, #0]
 8021648:	68fb      	ldr	r3, [r7, #12]
 802164a:	3304      	adds	r3, #4
 802164c:	681b      	ldr	r3, [r3, #0]
 802164e:	405a      	eors	r2, r3
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	3308      	adds	r3, #8
 8021654:	681b      	ldr	r3, [r3, #0]
 8021656:	4013      	ands	r3, r2
 8021658:	2b00      	cmp	r3, #0
 802165a:	d101      	bne.n	8021660 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 802165c:	68fb      	ldr	r3, [r7, #12]
 802165e:	e038      	b.n	80216d2 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8021660:	68fb      	ldr	r3, [r7, #12]
 8021662:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021666:	f003 0302 	and.w	r3, r3, #2
 802166a:	2b00      	cmp	r3, #0
 802166c:	d108      	bne.n	8021680 <ip4_route+0x78>
 802166e:	687b      	ldr	r3, [r7, #4]
 8021670:	681a      	ldr	r2, [r3, #0]
 8021672:	68fb      	ldr	r3, [r7, #12]
 8021674:	330c      	adds	r3, #12
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	429a      	cmp	r2, r3
 802167a:	d101      	bne.n	8021680 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 802167c:	68fb      	ldr	r3, [r7, #12]
 802167e:	e028      	b.n	80216d2 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8021680:	68fb      	ldr	r3, [r7, #12]
 8021682:	681b      	ldr	r3, [r3, #0]
 8021684:	60fb      	str	r3, [r7, #12]
 8021686:	68fb      	ldr	r3, [r7, #12]
 8021688:	2b00      	cmp	r3, #0
 802168a:	d1c5      	bne.n	8021618 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 802168c:	4b15      	ldr	r3, [pc, #84]	; (80216e4 <ip4_route+0xdc>)
 802168e:	681b      	ldr	r3, [r3, #0]
 8021690:	2b00      	cmp	r3, #0
 8021692:	d01a      	beq.n	80216ca <ip4_route+0xc2>
 8021694:	4b13      	ldr	r3, [pc, #76]	; (80216e4 <ip4_route+0xdc>)
 8021696:	681b      	ldr	r3, [r3, #0]
 8021698:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 802169c:	f003 0301 	and.w	r3, r3, #1
 80216a0:	2b00      	cmp	r3, #0
 80216a2:	d012      	beq.n	80216ca <ip4_route+0xc2>
 80216a4:	4b0f      	ldr	r3, [pc, #60]	; (80216e4 <ip4_route+0xdc>)
 80216a6:	681b      	ldr	r3, [r3, #0]
 80216a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80216ac:	f003 0304 	and.w	r3, r3, #4
 80216b0:	2b00      	cmp	r3, #0
 80216b2:	d00a      	beq.n	80216ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80216b4:	4b0b      	ldr	r3, [pc, #44]	; (80216e4 <ip4_route+0xdc>)
 80216b6:	681b      	ldr	r3, [r3, #0]
 80216b8:	3304      	adds	r3, #4
 80216ba:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80216bc:	2b00      	cmp	r3, #0
 80216be:	d004      	beq.n	80216ca <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80216c0:	687b      	ldr	r3, [r7, #4]
 80216c2:	681b      	ldr	r3, [r3, #0]
 80216c4:	b2db      	uxtb	r3, r3
 80216c6:	2b7f      	cmp	r3, #127	; 0x7f
 80216c8:	d101      	bne.n	80216ce <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 80216ca:	2300      	movs	r3, #0
 80216cc:	e001      	b.n	80216d2 <ip4_route+0xca>
  }

  return netif_default;
 80216ce:	4b05      	ldr	r3, [pc, #20]	; (80216e4 <ip4_route+0xdc>)
 80216d0:	681b      	ldr	r3, [r3, #0]
}
 80216d2:	4618      	mov	r0, r3
 80216d4:	3714      	adds	r7, #20
 80216d6:	46bd      	mov	sp, r7
 80216d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80216dc:	4770      	bx	lr
 80216de:	bf00      	nop
 80216e0:	2000bfb0 	.word	0x2000bfb0
 80216e4:	2000bfb4 	.word	0x2000bfb4

080216e8 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80216e8:	b580      	push	{r7, lr}
 80216ea:	b082      	sub	sp, #8
 80216ec:	af00      	add	r7, sp, #0
 80216ee:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80216f0:	687b      	ldr	r3, [r7, #4]
 80216f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80216f6:	f003 0301 	and.w	r3, r3, #1
 80216fa:	b2db      	uxtb	r3, r3
 80216fc:	2b00      	cmp	r3, #0
 80216fe:	d016      	beq.n	802172e <ip4_input_accept+0x46>
 8021700:	687b      	ldr	r3, [r7, #4]
 8021702:	3304      	adds	r3, #4
 8021704:	681b      	ldr	r3, [r3, #0]
 8021706:	2b00      	cmp	r3, #0
 8021708:	d011      	beq.n	802172e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 802170a:	4b0b      	ldr	r3, [pc, #44]	; (8021738 <ip4_input_accept+0x50>)
 802170c:	695a      	ldr	r2, [r3, #20]
 802170e:	687b      	ldr	r3, [r7, #4]
 8021710:	3304      	adds	r3, #4
 8021712:	681b      	ldr	r3, [r3, #0]
 8021714:	429a      	cmp	r2, r3
 8021716:	d008      	beq.n	802172a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8021718:	4b07      	ldr	r3, [pc, #28]	; (8021738 <ip4_input_accept+0x50>)
 802171a:	695b      	ldr	r3, [r3, #20]
 802171c:	6879      	ldr	r1, [r7, #4]
 802171e:	4618      	mov	r0, r3
 8021720:	f000 fa08 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 8021724:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8021726:	2b00      	cmp	r3, #0
 8021728:	d001      	beq.n	802172e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 802172a:	2301      	movs	r3, #1
 802172c:	e000      	b.n	8021730 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 802172e:	2300      	movs	r3, #0
}
 8021730:	4618      	mov	r0, r3
 8021732:	3708      	adds	r7, #8
 8021734:	46bd      	mov	sp, r7
 8021736:	bd80      	pop	{r7, pc}
 8021738:	200066a8 	.word	0x200066a8

0802173c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 802173c:	b580      	push	{r7, lr}
 802173e:	b086      	sub	sp, #24
 8021740:	af00      	add	r7, sp, #0
 8021742:	6078      	str	r0, [r7, #4]
 8021744:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8021746:	687b      	ldr	r3, [r7, #4]
 8021748:	685b      	ldr	r3, [r3, #4]
 802174a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 802174c:	697b      	ldr	r3, [r7, #20]
 802174e:	781b      	ldrb	r3, [r3, #0]
 8021750:	091b      	lsrs	r3, r3, #4
 8021752:	b2db      	uxtb	r3, r3
 8021754:	2b04      	cmp	r3, #4
 8021756:	d004      	beq.n	8021762 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8021758:	6878      	ldr	r0, [r7, #4]
 802175a:	f7f7 fb61 	bl	8018e20 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 802175e:	2300      	movs	r3, #0
 8021760:	e107      	b.n	8021972 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8021762:	697b      	ldr	r3, [r7, #20]
 8021764:	781b      	ldrb	r3, [r3, #0]
 8021766:	f003 030f 	and.w	r3, r3, #15
 802176a:	b2db      	uxtb	r3, r3
 802176c:	009b      	lsls	r3, r3, #2
 802176e:	b2db      	uxtb	r3, r3
 8021770:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8021772:	697b      	ldr	r3, [r7, #20]
 8021774:	885b      	ldrh	r3, [r3, #2]
 8021776:	b29b      	uxth	r3, r3
 8021778:	4618      	mov	r0, r3
 802177a:	f7f5 ff5f 	bl	801763c <lwip_htons>
 802177e:	4603      	mov	r3, r0
 8021780:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8021782:	687b      	ldr	r3, [r7, #4]
 8021784:	891b      	ldrh	r3, [r3, #8]
 8021786:	89ba      	ldrh	r2, [r7, #12]
 8021788:	429a      	cmp	r2, r3
 802178a:	d204      	bcs.n	8021796 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 802178c:	89bb      	ldrh	r3, [r7, #12]
 802178e:	4619      	mov	r1, r3
 8021790:	6878      	ldr	r0, [r7, #4]
 8021792:	f7f7 f9bf 	bl	8018b14 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8021796:	687b      	ldr	r3, [r7, #4]
 8021798:	895b      	ldrh	r3, [r3, #10]
 802179a:	89fa      	ldrh	r2, [r7, #14]
 802179c:	429a      	cmp	r2, r3
 802179e:	d807      	bhi.n	80217b0 <ip4_input+0x74>
 80217a0:	687b      	ldr	r3, [r7, #4]
 80217a2:	891b      	ldrh	r3, [r3, #8]
 80217a4:	89ba      	ldrh	r2, [r7, #12]
 80217a6:	429a      	cmp	r2, r3
 80217a8:	d802      	bhi.n	80217b0 <ip4_input+0x74>
 80217aa:	89fb      	ldrh	r3, [r7, #14]
 80217ac:	2b13      	cmp	r3, #19
 80217ae:	d804      	bhi.n	80217ba <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 80217b0:	6878      	ldr	r0, [r7, #4]
 80217b2:	f7f7 fb35 	bl	8018e20 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 80217b6:	2300      	movs	r3, #0
 80217b8:	e0db      	b.n	8021972 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 80217ba:	697b      	ldr	r3, [r7, #20]
 80217bc:	691b      	ldr	r3, [r3, #16]
 80217be:	4a6f      	ldr	r2, [pc, #444]	; (802197c <ip4_input+0x240>)
 80217c0:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 80217c2:	697b      	ldr	r3, [r7, #20]
 80217c4:	68db      	ldr	r3, [r3, #12]
 80217c6:	4a6d      	ldr	r2, [pc, #436]	; (802197c <ip4_input+0x240>)
 80217c8:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80217ca:	4b6c      	ldr	r3, [pc, #432]	; (802197c <ip4_input+0x240>)
 80217cc:	695b      	ldr	r3, [r3, #20]
 80217ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80217d2:	2be0      	cmp	r3, #224	; 0xe0
 80217d4:	d112      	bne.n	80217fc <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 80217d6:	683b      	ldr	r3, [r7, #0]
 80217d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80217dc:	f003 0301 	and.w	r3, r3, #1
 80217e0:	b2db      	uxtb	r3, r3
 80217e2:	2b00      	cmp	r3, #0
 80217e4:	d007      	beq.n	80217f6 <ip4_input+0xba>
 80217e6:	683b      	ldr	r3, [r7, #0]
 80217e8:	3304      	adds	r3, #4
 80217ea:	681b      	ldr	r3, [r3, #0]
 80217ec:	2b00      	cmp	r3, #0
 80217ee:	d002      	beq.n	80217f6 <ip4_input+0xba>
      netif = inp;
 80217f0:	683b      	ldr	r3, [r7, #0]
 80217f2:	613b      	str	r3, [r7, #16]
 80217f4:	e02a      	b.n	802184c <ip4_input+0x110>
    } else {
      netif = NULL;
 80217f6:	2300      	movs	r3, #0
 80217f8:	613b      	str	r3, [r7, #16]
 80217fa:	e027      	b.n	802184c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80217fc:	6838      	ldr	r0, [r7, #0]
 80217fe:	f7ff ff73 	bl	80216e8 <ip4_input_accept>
 8021802:	4603      	mov	r3, r0
 8021804:	2b00      	cmp	r3, #0
 8021806:	d002      	beq.n	802180e <ip4_input+0xd2>
      netif = inp;
 8021808:	683b      	ldr	r3, [r7, #0]
 802180a:	613b      	str	r3, [r7, #16]
 802180c:	e01e      	b.n	802184c <ip4_input+0x110>
    } else {
      netif = NULL;
 802180e:	2300      	movs	r3, #0
 8021810:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8021812:	4b5a      	ldr	r3, [pc, #360]	; (802197c <ip4_input+0x240>)
 8021814:	695b      	ldr	r3, [r3, #20]
 8021816:	b2db      	uxtb	r3, r3
 8021818:	2b7f      	cmp	r3, #127	; 0x7f
 802181a:	d017      	beq.n	802184c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 802181c:	4b58      	ldr	r3, [pc, #352]	; (8021980 <ip4_input+0x244>)
 802181e:	681b      	ldr	r3, [r3, #0]
 8021820:	613b      	str	r3, [r7, #16]
 8021822:	e00e      	b.n	8021842 <ip4_input+0x106>
          if (netif == inp) {
 8021824:	693a      	ldr	r2, [r7, #16]
 8021826:	683b      	ldr	r3, [r7, #0]
 8021828:	429a      	cmp	r2, r3
 802182a:	d006      	beq.n	802183a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 802182c:	6938      	ldr	r0, [r7, #16]
 802182e:	f7ff ff5b 	bl	80216e8 <ip4_input_accept>
 8021832:	4603      	mov	r3, r0
 8021834:	2b00      	cmp	r3, #0
 8021836:	d108      	bne.n	802184a <ip4_input+0x10e>
 8021838:	e000      	b.n	802183c <ip4_input+0x100>
            continue;
 802183a:	bf00      	nop
        NETIF_FOREACH(netif) {
 802183c:	693b      	ldr	r3, [r7, #16]
 802183e:	681b      	ldr	r3, [r3, #0]
 8021840:	613b      	str	r3, [r7, #16]
 8021842:	693b      	ldr	r3, [r7, #16]
 8021844:	2b00      	cmp	r3, #0
 8021846:	d1ed      	bne.n	8021824 <ip4_input+0xe8>
 8021848:	e000      	b.n	802184c <ip4_input+0x110>
            break;
 802184a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 802184c:	4b4b      	ldr	r3, [pc, #300]	; (802197c <ip4_input+0x240>)
 802184e:	691b      	ldr	r3, [r3, #16]
 8021850:	6839      	ldr	r1, [r7, #0]
 8021852:	4618      	mov	r0, r3
 8021854:	f000 f96e 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 8021858:	4603      	mov	r3, r0
 802185a:	2b00      	cmp	r3, #0
 802185c:	d105      	bne.n	802186a <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 802185e:	4b47      	ldr	r3, [pc, #284]	; (802197c <ip4_input+0x240>)
 8021860:	691b      	ldr	r3, [r3, #16]
 8021862:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8021866:	2be0      	cmp	r3, #224	; 0xe0
 8021868:	d104      	bne.n	8021874 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 802186a:	6878      	ldr	r0, [r7, #4]
 802186c:	f7f7 fad8 	bl	8018e20 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8021870:	2300      	movs	r3, #0
 8021872:	e07e      	b.n	8021972 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8021874:	693b      	ldr	r3, [r7, #16]
 8021876:	2b00      	cmp	r3, #0
 8021878:	d104      	bne.n	8021884 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 802187a:	6878      	ldr	r0, [r7, #4]
 802187c:	f7f7 fad0 	bl	8018e20 <pbuf_free>
    return ERR_OK;
 8021880:	2300      	movs	r3, #0
 8021882:	e076      	b.n	8021972 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8021884:	697b      	ldr	r3, [r7, #20]
 8021886:	88db      	ldrh	r3, [r3, #6]
 8021888:	b29b      	uxth	r3, r3
 802188a:	461a      	mov	r2, r3
 802188c:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8021890:	4013      	ands	r3, r2
 8021892:	2b00      	cmp	r3, #0
 8021894:	d00b      	beq.n	80218ae <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8021896:	6878      	ldr	r0, [r7, #4]
 8021898:	f000 fc92 	bl	80221c0 <ip4_reass>
 802189c:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 802189e:	687b      	ldr	r3, [r7, #4]
 80218a0:	2b00      	cmp	r3, #0
 80218a2:	d101      	bne.n	80218a8 <ip4_input+0x16c>
      return ERR_OK;
 80218a4:	2300      	movs	r3, #0
 80218a6:	e064      	b.n	8021972 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 80218a8:	687b      	ldr	r3, [r7, #4]
 80218aa:	685b      	ldr	r3, [r3, #4]
 80218ac:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 80218ae:	4a33      	ldr	r2, [pc, #204]	; (802197c <ip4_input+0x240>)
 80218b0:	693b      	ldr	r3, [r7, #16]
 80218b2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 80218b4:	4a31      	ldr	r2, [pc, #196]	; (802197c <ip4_input+0x240>)
 80218b6:	683b      	ldr	r3, [r7, #0]
 80218b8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 80218ba:	4a30      	ldr	r2, [pc, #192]	; (802197c <ip4_input+0x240>)
 80218bc:	697b      	ldr	r3, [r7, #20]
 80218be:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 80218c0:	697b      	ldr	r3, [r7, #20]
 80218c2:	781b      	ldrb	r3, [r3, #0]
 80218c4:	f003 030f 	and.w	r3, r3, #15
 80218c8:	b2db      	uxtb	r3, r3
 80218ca:	009b      	lsls	r3, r3, #2
 80218cc:	b2db      	uxtb	r3, r3
 80218ce:	b29a      	uxth	r2, r3
 80218d0:	4b2a      	ldr	r3, [pc, #168]	; (802197c <ip4_input+0x240>)
 80218d2:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 80218d4:	89fb      	ldrh	r3, [r7, #14]
 80218d6:	4619      	mov	r1, r3
 80218d8:	6878      	ldr	r0, [r7, #4]
 80218da:	f7f7 fa1b 	bl	8018d14 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80218de:	697b      	ldr	r3, [r7, #20]
 80218e0:	7a5b      	ldrb	r3, [r3, #9]
 80218e2:	2b11      	cmp	r3, #17
 80218e4:	d006      	beq.n	80218f4 <ip4_input+0x1b8>
 80218e6:	2b11      	cmp	r3, #17
 80218e8:	dc13      	bgt.n	8021912 <ip4_input+0x1d6>
 80218ea:	2b01      	cmp	r3, #1
 80218ec:	d00c      	beq.n	8021908 <ip4_input+0x1cc>
 80218ee:	2b06      	cmp	r3, #6
 80218f0:	d005      	beq.n	80218fe <ip4_input+0x1c2>
 80218f2:	e00e      	b.n	8021912 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80218f4:	6839      	ldr	r1, [r7, #0]
 80218f6:	6878      	ldr	r0, [r7, #4]
 80218f8:	f7fe f902 	bl	801fb00 <udp_input>
        break;
 80218fc:	e026      	b.n	802194c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80218fe:	6839      	ldr	r1, [r7, #0]
 8021900:	6878      	ldr	r0, [r7, #4]
 8021902:	f7f9 fcbb 	bl	801b27c <tcp_input>
        break;
 8021906:	e021      	b.n	802194c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8021908:	6839      	ldr	r1, [r7, #0]
 802190a:	6878      	ldr	r0, [r7, #4]
 802190c:	f7ff fcee 	bl	80212ec <icmp_input>
        break;
 8021910:	e01c      	b.n	802194c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8021912:	4b1a      	ldr	r3, [pc, #104]	; (802197c <ip4_input+0x240>)
 8021914:	695b      	ldr	r3, [r3, #20]
 8021916:	6939      	ldr	r1, [r7, #16]
 8021918:	4618      	mov	r0, r3
 802191a:	f000 f90b 	bl	8021b34 <ip4_addr_isbroadcast_u32>
 802191e:	4603      	mov	r3, r0
 8021920:	2b00      	cmp	r3, #0
 8021922:	d10f      	bne.n	8021944 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8021924:	4b15      	ldr	r3, [pc, #84]	; (802197c <ip4_input+0x240>)
 8021926:	695b      	ldr	r3, [r3, #20]
 8021928:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 802192c:	2be0      	cmp	r3, #224	; 0xe0
 802192e:	d009      	beq.n	8021944 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8021930:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8021934:	4619      	mov	r1, r3
 8021936:	6878      	ldr	r0, [r7, #4]
 8021938:	f7f7 fa5f 	bl	8018dfa <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 802193c:	2102      	movs	r1, #2
 802193e:	6878      	ldr	r0, [r7, #4]
 8021940:	f7ff fdd8 	bl	80214f4 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8021944:	6878      	ldr	r0, [r7, #4]
 8021946:	f7f7 fa6b 	bl	8018e20 <pbuf_free>
        break;
 802194a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 802194c:	4b0b      	ldr	r3, [pc, #44]	; (802197c <ip4_input+0x240>)
 802194e:	2200      	movs	r2, #0
 8021950:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8021952:	4b0a      	ldr	r3, [pc, #40]	; (802197c <ip4_input+0x240>)
 8021954:	2200      	movs	r2, #0
 8021956:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8021958:	4b08      	ldr	r3, [pc, #32]	; (802197c <ip4_input+0x240>)
 802195a:	2200      	movs	r2, #0
 802195c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 802195e:	4b07      	ldr	r3, [pc, #28]	; (802197c <ip4_input+0x240>)
 8021960:	2200      	movs	r2, #0
 8021962:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8021964:	4b05      	ldr	r3, [pc, #20]	; (802197c <ip4_input+0x240>)
 8021966:	2200      	movs	r2, #0
 8021968:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 802196a:	4b04      	ldr	r3, [pc, #16]	; (802197c <ip4_input+0x240>)
 802196c:	2200      	movs	r2, #0
 802196e:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8021970:	2300      	movs	r3, #0
}
 8021972:	4618      	mov	r0, r3
 8021974:	3718      	adds	r7, #24
 8021976:	46bd      	mov	sp, r7
 8021978:	bd80      	pop	{r7, pc}
 802197a:	bf00      	nop
 802197c:	200066a8 	.word	0x200066a8
 8021980:	2000bfb0 	.word	0x2000bfb0

08021984 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8021984:	b580      	push	{r7, lr}
 8021986:	b08a      	sub	sp, #40	; 0x28
 8021988:	af04      	add	r7, sp, #16
 802198a:	60f8      	str	r0, [r7, #12]
 802198c:	60b9      	str	r1, [r7, #8]
 802198e:	607a      	str	r2, [r7, #4]
 8021990:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8021992:	68bb      	ldr	r3, [r7, #8]
 8021994:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8021996:	687b      	ldr	r3, [r7, #4]
 8021998:	2b00      	cmp	r3, #0
 802199a:	d009      	beq.n	80219b0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 802199c:	68bb      	ldr	r3, [r7, #8]
 802199e:	2b00      	cmp	r3, #0
 80219a0:	d003      	beq.n	80219aa <ip4_output_if+0x26>
 80219a2:	68bb      	ldr	r3, [r7, #8]
 80219a4:	681b      	ldr	r3, [r3, #0]
 80219a6:	2b00      	cmp	r3, #0
 80219a8:	d102      	bne.n	80219b0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 80219aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219ac:	3304      	adds	r3, #4
 80219ae:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 80219b0:	78fa      	ldrb	r2, [r7, #3]
 80219b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80219b4:	9302      	str	r3, [sp, #8]
 80219b6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80219ba:	9301      	str	r3, [sp, #4]
 80219bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80219c0:	9300      	str	r3, [sp, #0]
 80219c2:	4613      	mov	r3, r2
 80219c4:	687a      	ldr	r2, [r7, #4]
 80219c6:	6979      	ldr	r1, [r7, #20]
 80219c8:	68f8      	ldr	r0, [r7, #12]
 80219ca:	f000 f805 	bl	80219d8 <ip4_output_if_src>
 80219ce:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 80219d0:	4618      	mov	r0, r3
 80219d2:	3718      	adds	r7, #24
 80219d4:	46bd      	mov	sp, r7
 80219d6:	bd80      	pop	{r7, pc}

080219d8 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80219d8:	b580      	push	{r7, lr}
 80219da:	b088      	sub	sp, #32
 80219dc:	af00      	add	r7, sp, #0
 80219de:	60f8      	str	r0, [r7, #12]
 80219e0:	60b9      	str	r1, [r7, #8]
 80219e2:	607a      	str	r2, [r7, #4]
 80219e4:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80219e6:	68fb      	ldr	r3, [r7, #12]
 80219e8:	7b9b      	ldrb	r3, [r3, #14]
 80219ea:	2b01      	cmp	r3, #1
 80219ec:	d006      	beq.n	80219fc <ip4_output_if_src+0x24>
 80219ee:	4b4b      	ldr	r3, [pc, #300]	; (8021b1c <ip4_output_if_src+0x144>)
 80219f0:	f44f 7255 	mov.w	r2, #852	; 0x354
 80219f4:	494a      	ldr	r1, [pc, #296]	; (8021b20 <ip4_output_if_src+0x148>)
 80219f6:	484b      	ldr	r0, [pc, #300]	; (8021b24 <ip4_output_if_src+0x14c>)
 80219f8:	f002 fc4a 	bl	8024290 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80219fc:	687b      	ldr	r3, [r7, #4]
 80219fe:	2b00      	cmp	r3, #0
 8021a00:	d060      	beq.n	8021ac4 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8021a02:	2314      	movs	r3, #20
 8021a04:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8021a06:	2114      	movs	r1, #20
 8021a08:	68f8      	ldr	r0, [r7, #12]
 8021a0a:	f7f7 f973 	bl	8018cf4 <pbuf_add_header>
 8021a0e:	4603      	mov	r3, r0
 8021a10:	2b00      	cmp	r3, #0
 8021a12:	d002      	beq.n	8021a1a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021a14:	f06f 0301 	mvn.w	r3, #1
 8021a18:	e07c      	b.n	8021b14 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8021a1a:	68fb      	ldr	r3, [r7, #12]
 8021a1c:	685b      	ldr	r3, [r3, #4]
 8021a1e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8021a20:	68fb      	ldr	r3, [r7, #12]
 8021a22:	895b      	ldrh	r3, [r3, #10]
 8021a24:	2b13      	cmp	r3, #19
 8021a26:	d806      	bhi.n	8021a36 <ip4_output_if_src+0x5e>
 8021a28:	4b3c      	ldr	r3, [pc, #240]	; (8021b1c <ip4_output_if_src+0x144>)
 8021a2a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8021a2e:	493e      	ldr	r1, [pc, #248]	; (8021b28 <ip4_output_if_src+0x150>)
 8021a30:	483c      	ldr	r0, [pc, #240]	; (8021b24 <ip4_output_if_src+0x14c>)
 8021a32:	f002 fc2d 	bl	8024290 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8021a36:	69fb      	ldr	r3, [r7, #28]
 8021a38:	78fa      	ldrb	r2, [r7, #3]
 8021a3a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8021a3c:	69fb      	ldr	r3, [r7, #28]
 8021a3e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8021a42:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8021a44:	687b      	ldr	r3, [r7, #4]
 8021a46:	681a      	ldr	r2, [r3, #0]
 8021a48:	69fb      	ldr	r3, [r7, #28]
 8021a4a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8021a4c:	8b7b      	ldrh	r3, [r7, #26]
 8021a4e:	089b      	lsrs	r3, r3, #2
 8021a50:	b29b      	uxth	r3, r3
 8021a52:	b2db      	uxtb	r3, r3
 8021a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8021a58:	b2da      	uxtb	r2, r3
 8021a5a:	69fb      	ldr	r3, [r7, #28]
 8021a5c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8021a5e:	69fb      	ldr	r3, [r7, #28]
 8021a60:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8021a64:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8021a66:	68fb      	ldr	r3, [r7, #12]
 8021a68:	891b      	ldrh	r3, [r3, #8]
 8021a6a:	4618      	mov	r0, r3
 8021a6c:	f7f5 fde6 	bl	801763c <lwip_htons>
 8021a70:	4603      	mov	r3, r0
 8021a72:	461a      	mov	r2, r3
 8021a74:	69fb      	ldr	r3, [r7, #28]
 8021a76:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8021a78:	69fb      	ldr	r3, [r7, #28]
 8021a7a:	2200      	movs	r2, #0
 8021a7c:	719a      	strb	r2, [r3, #6]
 8021a7e:	2200      	movs	r2, #0
 8021a80:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8021a82:	4b2a      	ldr	r3, [pc, #168]	; (8021b2c <ip4_output_if_src+0x154>)
 8021a84:	881b      	ldrh	r3, [r3, #0]
 8021a86:	4618      	mov	r0, r3
 8021a88:	f7f5 fdd8 	bl	801763c <lwip_htons>
 8021a8c:	4603      	mov	r3, r0
 8021a8e:	461a      	mov	r2, r3
 8021a90:	69fb      	ldr	r3, [r7, #28]
 8021a92:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8021a94:	4b25      	ldr	r3, [pc, #148]	; (8021b2c <ip4_output_if_src+0x154>)
 8021a96:	881b      	ldrh	r3, [r3, #0]
 8021a98:	3301      	adds	r3, #1
 8021a9a:	b29a      	uxth	r2, r3
 8021a9c:	4b23      	ldr	r3, [pc, #140]	; (8021b2c <ip4_output_if_src+0x154>)
 8021a9e:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8021aa0:	68bb      	ldr	r3, [r7, #8]
 8021aa2:	2b00      	cmp	r3, #0
 8021aa4:	d104      	bne.n	8021ab0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8021aa6:	4b22      	ldr	r3, [pc, #136]	; (8021b30 <ip4_output_if_src+0x158>)
 8021aa8:	681a      	ldr	r2, [r3, #0]
 8021aaa:	69fb      	ldr	r3, [r7, #28]
 8021aac:	60da      	str	r2, [r3, #12]
 8021aae:	e003      	b.n	8021ab8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8021ab0:	68bb      	ldr	r3, [r7, #8]
 8021ab2:	681a      	ldr	r2, [r3, #0]
 8021ab4:	69fb      	ldr	r3, [r7, #28]
 8021ab6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8021ab8:	69fb      	ldr	r3, [r7, #28]
 8021aba:	2200      	movs	r2, #0
 8021abc:	729a      	strb	r2, [r3, #10]
 8021abe:	2200      	movs	r2, #0
 8021ac0:	72da      	strb	r2, [r3, #11]
 8021ac2:	e00f      	b.n	8021ae4 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8021ac4:	68fb      	ldr	r3, [r7, #12]
 8021ac6:	895b      	ldrh	r3, [r3, #10]
 8021ac8:	2b13      	cmp	r3, #19
 8021aca:	d802      	bhi.n	8021ad2 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8021acc:	f06f 0301 	mvn.w	r3, #1
 8021ad0:	e020      	b.n	8021b14 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8021ad2:	68fb      	ldr	r3, [r7, #12]
 8021ad4:	685b      	ldr	r3, [r3, #4]
 8021ad6:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8021ad8:	69fb      	ldr	r3, [r7, #28]
 8021ada:	691b      	ldr	r3, [r3, #16]
 8021adc:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8021ade:	f107 0314 	add.w	r3, r7, #20
 8021ae2:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8021ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021ae6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021ae8:	2b00      	cmp	r3, #0
 8021aea:	d00c      	beq.n	8021b06 <ip4_output_if_src+0x12e>
 8021aec:	68fb      	ldr	r3, [r7, #12]
 8021aee:	891a      	ldrh	r2, [r3, #8]
 8021af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021af2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8021af4:	429a      	cmp	r2, r3
 8021af6:	d906      	bls.n	8021b06 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8021af8:	687a      	ldr	r2, [r7, #4]
 8021afa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8021afc:	68f8      	ldr	r0, [r7, #12]
 8021afe:	f000 fd53 	bl	80225a8 <ip4_frag>
 8021b02:	4603      	mov	r3, r0
 8021b04:	e006      	b.n	8021b14 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8021b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8021b08:	695b      	ldr	r3, [r3, #20]
 8021b0a:	687a      	ldr	r2, [r7, #4]
 8021b0c:	68f9      	ldr	r1, [r7, #12]
 8021b0e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8021b10:	4798      	blx	r3
 8021b12:	4603      	mov	r3, r0
}
 8021b14:	4618      	mov	r0, r3
 8021b16:	3720      	adds	r7, #32
 8021b18:	46bd      	mov	sp, r7
 8021b1a:	bd80      	pop	{r7, pc}
 8021b1c:	080289ac 	.word	0x080289ac
 8021b20:	080289e0 	.word	0x080289e0
 8021b24:	080289ec 	.word	0x080289ec
 8021b28:	08028a14 	.word	0x08028a14
 8021b2c:	2000c10e 	.word	0x2000c10e
 8021b30:	08028e88 	.word	0x08028e88

08021b34 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8021b34:	b480      	push	{r7}
 8021b36:	b085      	sub	sp, #20
 8021b38:	af00      	add	r7, sp, #0
 8021b3a:	6078      	str	r0, [r7, #4]
 8021b3c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8021b3e:	687b      	ldr	r3, [r7, #4]
 8021b40:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8021b42:	687b      	ldr	r3, [r7, #4]
 8021b44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8021b48:	d002      	beq.n	8021b50 <ip4_addr_isbroadcast_u32+0x1c>
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	2b00      	cmp	r3, #0
 8021b4e:	d101      	bne.n	8021b54 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8021b50:	2301      	movs	r3, #1
 8021b52:	e02a      	b.n	8021baa <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8021b54:	683b      	ldr	r3, [r7, #0]
 8021b56:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8021b5a:	f003 0302 	and.w	r3, r3, #2
 8021b5e:	2b00      	cmp	r3, #0
 8021b60:	d101      	bne.n	8021b66 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8021b62:	2300      	movs	r3, #0
 8021b64:	e021      	b.n	8021baa <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8021b66:	683b      	ldr	r3, [r7, #0]
 8021b68:	3304      	adds	r3, #4
 8021b6a:	681b      	ldr	r3, [r3, #0]
 8021b6c:	687a      	ldr	r2, [r7, #4]
 8021b6e:	429a      	cmp	r2, r3
 8021b70:	d101      	bne.n	8021b76 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8021b72:	2300      	movs	r3, #0
 8021b74:	e019      	b.n	8021baa <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8021b76:	68fa      	ldr	r2, [r7, #12]
 8021b78:	683b      	ldr	r3, [r7, #0]
 8021b7a:	3304      	adds	r3, #4
 8021b7c:	681b      	ldr	r3, [r3, #0]
 8021b7e:	405a      	eors	r2, r3
 8021b80:	683b      	ldr	r3, [r7, #0]
 8021b82:	3308      	adds	r3, #8
 8021b84:	681b      	ldr	r3, [r3, #0]
 8021b86:	4013      	ands	r3, r2
 8021b88:	2b00      	cmp	r3, #0
 8021b8a:	d10d      	bne.n	8021ba8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021b8c:	683b      	ldr	r3, [r7, #0]
 8021b8e:	3308      	adds	r3, #8
 8021b90:	681b      	ldr	r3, [r3, #0]
 8021b92:	43da      	mvns	r2, r3
 8021b94:	687b      	ldr	r3, [r7, #4]
 8021b96:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8021b98:	683b      	ldr	r3, [r7, #0]
 8021b9a:	3308      	adds	r3, #8
 8021b9c:	681b      	ldr	r3, [r3, #0]
 8021b9e:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8021ba0:	429a      	cmp	r2, r3
 8021ba2:	d101      	bne.n	8021ba8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8021ba4:	2301      	movs	r3, #1
 8021ba6:	e000      	b.n	8021baa <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8021ba8:	2300      	movs	r3, #0
  }
}
 8021baa:	4618      	mov	r0, r3
 8021bac:	3714      	adds	r7, #20
 8021bae:	46bd      	mov	sp, r7
 8021bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021bb4:	4770      	bx	lr
	...

08021bb8 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8021bb8:	b580      	push	{r7, lr}
 8021bba:	b084      	sub	sp, #16
 8021bbc:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8021bbe:	2300      	movs	r3, #0
 8021bc0:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8021bc2:	4b12      	ldr	r3, [pc, #72]	; (8021c0c <ip_reass_tmr+0x54>)
 8021bc4:	681b      	ldr	r3, [r3, #0]
 8021bc6:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8021bc8:	e018      	b.n	8021bfc <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8021bca:	68fb      	ldr	r3, [r7, #12]
 8021bcc:	7fdb      	ldrb	r3, [r3, #31]
 8021bce:	2b00      	cmp	r3, #0
 8021bd0:	d00b      	beq.n	8021bea <ip_reass_tmr+0x32>
      r->timer--;
 8021bd2:	68fb      	ldr	r3, [r7, #12]
 8021bd4:	7fdb      	ldrb	r3, [r3, #31]
 8021bd6:	3b01      	subs	r3, #1
 8021bd8:	b2da      	uxtb	r2, r3
 8021bda:	68fb      	ldr	r3, [r7, #12]
 8021bdc:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8021bde:	68fb      	ldr	r3, [r7, #12]
 8021be0:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8021be2:	68fb      	ldr	r3, [r7, #12]
 8021be4:	681b      	ldr	r3, [r3, #0]
 8021be6:	60fb      	str	r3, [r7, #12]
 8021be8:	e008      	b.n	8021bfc <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8021bea:	68fb      	ldr	r3, [r7, #12]
 8021bec:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8021bee:	68fb      	ldr	r3, [r7, #12]
 8021bf0:	681b      	ldr	r3, [r3, #0]
 8021bf2:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8021bf4:	68b9      	ldr	r1, [r7, #8]
 8021bf6:	6878      	ldr	r0, [r7, #4]
 8021bf8:	f000 f80a 	bl	8021c10 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8021bfc:	68fb      	ldr	r3, [r7, #12]
 8021bfe:	2b00      	cmp	r3, #0
 8021c00:	d1e3      	bne.n	8021bca <ip_reass_tmr+0x12>
    }
  }
}
 8021c02:	bf00      	nop
 8021c04:	bf00      	nop
 8021c06:	3710      	adds	r7, #16
 8021c08:	46bd      	mov	sp, r7
 8021c0a:	bd80      	pop	{r7, pc}
 8021c0c:	2000c110 	.word	0x2000c110

08021c10 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021c10:	b580      	push	{r7, lr}
 8021c12:	b088      	sub	sp, #32
 8021c14:	af00      	add	r7, sp, #0
 8021c16:	6078      	str	r0, [r7, #4]
 8021c18:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8021c1a:	2300      	movs	r3, #0
 8021c1c:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8021c1e:	683a      	ldr	r2, [r7, #0]
 8021c20:	687b      	ldr	r3, [r7, #4]
 8021c22:	429a      	cmp	r2, r3
 8021c24:	d105      	bne.n	8021c32 <ip_reass_free_complete_datagram+0x22>
 8021c26:	4b45      	ldr	r3, [pc, #276]	; (8021d3c <ip_reass_free_complete_datagram+0x12c>)
 8021c28:	22ab      	movs	r2, #171	; 0xab
 8021c2a:	4945      	ldr	r1, [pc, #276]	; (8021d40 <ip_reass_free_complete_datagram+0x130>)
 8021c2c:	4845      	ldr	r0, [pc, #276]	; (8021d44 <ip_reass_free_complete_datagram+0x134>)
 8021c2e:	f002 fb2f 	bl	8024290 <iprintf>
  if (prev != NULL) {
 8021c32:	683b      	ldr	r3, [r7, #0]
 8021c34:	2b00      	cmp	r3, #0
 8021c36:	d00a      	beq.n	8021c4e <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8021c38:	683b      	ldr	r3, [r7, #0]
 8021c3a:	681b      	ldr	r3, [r3, #0]
 8021c3c:	687a      	ldr	r2, [r7, #4]
 8021c3e:	429a      	cmp	r2, r3
 8021c40:	d005      	beq.n	8021c4e <ip_reass_free_complete_datagram+0x3e>
 8021c42:	4b3e      	ldr	r3, [pc, #248]	; (8021d3c <ip_reass_free_complete_datagram+0x12c>)
 8021c44:	22ad      	movs	r2, #173	; 0xad
 8021c46:	4940      	ldr	r1, [pc, #256]	; (8021d48 <ip_reass_free_complete_datagram+0x138>)
 8021c48:	483e      	ldr	r0, [pc, #248]	; (8021d44 <ip_reass_free_complete_datagram+0x134>)
 8021c4a:	f002 fb21 	bl	8024290 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8021c4e:	687b      	ldr	r3, [r7, #4]
 8021c50:	685b      	ldr	r3, [r3, #4]
 8021c52:	685b      	ldr	r3, [r3, #4]
 8021c54:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8021c56:	697b      	ldr	r3, [r7, #20]
 8021c58:	889b      	ldrh	r3, [r3, #4]
 8021c5a:	b29b      	uxth	r3, r3
 8021c5c:	2b00      	cmp	r3, #0
 8021c5e:	d12a      	bne.n	8021cb6 <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8021c60:	687b      	ldr	r3, [r7, #4]
 8021c62:	685b      	ldr	r3, [r3, #4]
 8021c64:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8021c66:	697b      	ldr	r3, [r7, #20]
 8021c68:	681a      	ldr	r2, [r3, #0]
 8021c6a:	687b      	ldr	r3, [r7, #4]
 8021c6c:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8021c6e:	69bb      	ldr	r3, [r7, #24]
 8021c70:	6858      	ldr	r0, [r3, #4]
 8021c72:	687b      	ldr	r3, [r7, #4]
 8021c74:	3308      	adds	r3, #8
 8021c76:	2214      	movs	r2, #20
 8021c78:	4619      	mov	r1, r3
 8021c7a:	f002 f9f9 	bl	8024070 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8021c7e:	2101      	movs	r1, #1
 8021c80:	69b8      	ldr	r0, [r7, #24]
 8021c82:	f7ff fc47 	bl	8021514 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8021c86:	69b8      	ldr	r0, [r7, #24]
 8021c88:	f7f7 f958 	bl	8018f3c <pbuf_clen>
 8021c8c:	4603      	mov	r3, r0
 8021c8e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021c90:	8bfa      	ldrh	r2, [r7, #30]
 8021c92:	8a7b      	ldrh	r3, [r7, #18]
 8021c94:	4413      	add	r3, r2
 8021c96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021c9a:	db05      	blt.n	8021ca8 <ip_reass_free_complete_datagram+0x98>
 8021c9c:	4b27      	ldr	r3, [pc, #156]	; (8021d3c <ip_reass_free_complete_datagram+0x12c>)
 8021c9e:	22bc      	movs	r2, #188	; 0xbc
 8021ca0:	492a      	ldr	r1, [pc, #168]	; (8021d4c <ip_reass_free_complete_datagram+0x13c>)
 8021ca2:	4828      	ldr	r0, [pc, #160]	; (8021d44 <ip_reass_free_complete_datagram+0x134>)
 8021ca4:	f002 faf4 	bl	8024290 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021ca8:	8bfa      	ldrh	r2, [r7, #30]
 8021caa:	8a7b      	ldrh	r3, [r7, #18]
 8021cac:	4413      	add	r3, r2
 8021cae:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8021cb0:	69b8      	ldr	r0, [r7, #24]
 8021cb2:	f7f7 f8b5 	bl	8018e20 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8021cb6:	687b      	ldr	r3, [r7, #4]
 8021cb8:	685b      	ldr	r3, [r3, #4]
 8021cba:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8021cbc:	e01f      	b.n	8021cfe <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8021cbe:	69bb      	ldr	r3, [r7, #24]
 8021cc0:	685b      	ldr	r3, [r3, #4]
 8021cc2:	617b      	str	r3, [r7, #20]
    pcur = p;
 8021cc4:	69bb      	ldr	r3, [r7, #24]
 8021cc6:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8021cc8:	697b      	ldr	r3, [r7, #20]
 8021cca:	681b      	ldr	r3, [r3, #0]
 8021ccc:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8021cce:	68f8      	ldr	r0, [r7, #12]
 8021cd0:	f7f7 f934 	bl	8018f3c <pbuf_clen>
 8021cd4:	4603      	mov	r3, r0
 8021cd6:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8021cd8:	8bfa      	ldrh	r2, [r7, #30]
 8021cda:	8a7b      	ldrh	r3, [r7, #18]
 8021cdc:	4413      	add	r3, r2
 8021cde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8021ce2:	db05      	blt.n	8021cf0 <ip_reass_free_complete_datagram+0xe0>
 8021ce4:	4b15      	ldr	r3, [pc, #84]	; (8021d3c <ip_reass_free_complete_datagram+0x12c>)
 8021ce6:	22cc      	movs	r2, #204	; 0xcc
 8021ce8:	4918      	ldr	r1, [pc, #96]	; (8021d4c <ip_reass_free_complete_datagram+0x13c>)
 8021cea:	4816      	ldr	r0, [pc, #88]	; (8021d44 <ip_reass_free_complete_datagram+0x134>)
 8021cec:	f002 fad0 	bl	8024290 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8021cf0:	8bfa      	ldrh	r2, [r7, #30]
 8021cf2:	8a7b      	ldrh	r3, [r7, #18]
 8021cf4:	4413      	add	r3, r2
 8021cf6:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8021cf8:	68f8      	ldr	r0, [r7, #12]
 8021cfa:	f7f7 f891 	bl	8018e20 <pbuf_free>
  while (p != NULL) {
 8021cfe:	69bb      	ldr	r3, [r7, #24]
 8021d00:	2b00      	cmp	r3, #0
 8021d02:	d1dc      	bne.n	8021cbe <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8021d04:	6839      	ldr	r1, [r7, #0]
 8021d06:	6878      	ldr	r0, [r7, #4]
 8021d08:	f000 f8c2 	bl	8021e90 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8021d0c:	4b10      	ldr	r3, [pc, #64]	; (8021d50 <ip_reass_free_complete_datagram+0x140>)
 8021d0e:	881b      	ldrh	r3, [r3, #0]
 8021d10:	8bfa      	ldrh	r2, [r7, #30]
 8021d12:	429a      	cmp	r2, r3
 8021d14:	d905      	bls.n	8021d22 <ip_reass_free_complete_datagram+0x112>
 8021d16:	4b09      	ldr	r3, [pc, #36]	; (8021d3c <ip_reass_free_complete_datagram+0x12c>)
 8021d18:	22d2      	movs	r2, #210	; 0xd2
 8021d1a:	490e      	ldr	r1, [pc, #56]	; (8021d54 <ip_reass_free_complete_datagram+0x144>)
 8021d1c:	4809      	ldr	r0, [pc, #36]	; (8021d44 <ip_reass_free_complete_datagram+0x134>)
 8021d1e:	f002 fab7 	bl	8024290 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8021d22:	4b0b      	ldr	r3, [pc, #44]	; (8021d50 <ip_reass_free_complete_datagram+0x140>)
 8021d24:	881a      	ldrh	r2, [r3, #0]
 8021d26:	8bfb      	ldrh	r3, [r7, #30]
 8021d28:	1ad3      	subs	r3, r2, r3
 8021d2a:	b29a      	uxth	r2, r3
 8021d2c:	4b08      	ldr	r3, [pc, #32]	; (8021d50 <ip_reass_free_complete_datagram+0x140>)
 8021d2e:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8021d30:	8bfb      	ldrh	r3, [r7, #30]
}
 8021d32:	4618      	mov	r0, r3
 8021d34:	3720      	adds	r7, #32
 8021d36:	46bd      	mov	sp, r7
 8021d38:	bd80      	pop	{r7, pc}
 8021d3a:	bf00      	nop
 8021d3c:	08028a44 	.word	0x08028a44
 8021d40:	08028a80 	.word	0x08028a80
 8021d44:	08028a8c 	.word	0x08028a8c
 8021d48:	08028ab4 	.word	0x08028ab4
 8021d4c:	08028ac8 	.word	0x08028ac8
 8021d50:	2000c114 	.word	0x2000c114
 8021d54:	08028ae8 	.word	0x08028ae8

08021d58 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8021d58:	b580      	push	{r7, lr}
 8021d5a:	b08a      	sub	sp, #40	; 0x28
 8021d5c:	af00      	add	r7, sp, #0
 8021d5e:	6078      	str	r0, [r7, #4]
 8021d60:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8021d62:	2300      	movs	r3, #0
 8021d64:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8021d66:	2300      	movs	r3, #0
 8021d68:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8021d6a:	2300      	movs	r3, #0
 8021d6c:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8021d6e:	2300      	movs	r3, #0
 8021d70:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8021d72:	2300      	movs	r3, #0
 8021d74:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8021d76:	4b28      	ldr	r3, [pc, #160]	; (8021e18 <ip_reass_remove_oldest_datagram+0xc0>)
 8021d78:	681b      	ldr	r3, [r3, #0]
 8021d7a:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021d7c:	e030      	b.n	8021de0 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8021d7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d80:	695a      	ldr	r2, [r3, #20]
 8021d82:	687b      	ldr	r3, [r7, #4]
 8021d84:	68db      	ldr	r3, [r3, #12]
 8021d86:	429a      	cmp	r2, r3
 8021d88:	d10c      	bne.n	8021da4 <ip_reass_remove_oldest_datagram+0x4c>
 8021d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d8c:	699a      	ldr	r2, [r3, #24]
 8021d8e:	687b      	ldr	r3, [r7, #4]
 8021d90:	691b      	ldr	r3, [r3, #16]
 8021d92:	429a      	cmp	r2, r3
 8021d94:	d106      	bne.n	8021da4 <ip_reass_remove_oldest_datagram+0x4c>
 8021d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021d98:	899a      	ldrh	r2, [r3, #12]
 8021d9a:	687b      	ldr	r3, [r7, #4]
 8021d9c:	889b      	ldrh	r3, [r3, #4]
 8021d9e:	b29b      	uxth	r3, r3
 8021da0:	429a      	cmp	r2, r3
 8021da2:	d014      	beq.n	8021dce <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8021da4:	693b      	ldr	r3, [r7, #16]
 8021da6:	3301      	adds	r3, #1
 8021da8:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8021daa:	6a3b      	ldr	r3, [r7, #32]
 8021dac:	2b00      	cmp	r3, #0
 8021dae:	d104      	bne.n	8021dba <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8021db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021db2:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021db4:	69fb      	ldr	r3, [r7, #28]
 8021db6:	61bb      	str	r3, [r7, #24]
 8021db8:	e009      	b.n	8021dce <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8021dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dbc:	7fda      	ldrb	r2, [r3, #31]
 8021dbe:	6a3b      	ldr	r3, [r7, #32]
 8021dc0:	7fdb      	ldrb	r3, [r3, #31]
 8021dc2:	429a      	cmp	r2, r3
 8021dc4:	d803      	bhi.n	8021dce <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8021dc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dc8:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8021dca:	69fb      	ldr	r3, [r7, #28]
 8021dcc:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8021dce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dd0:	681b      	ldr	r3, [r3, #0]
 8021dd2:	2b00      	cmp	r3, #0
 8021dd4:	d001      	beq.n	8021dda <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8021dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021dd8:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8021dda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021ddc:	681b      	ldr	r3, [r3, #0]
 8021dde:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8021de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021de2:	2b00      	cmp	r3, #0
 8021de4:	d1cb      	bne.n	8021d7e <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8021de6:	6a3b      	ldr	r3, [r7, #32]
 8021de8:	2b00      	cmp	r3, #0
 8021dea:	d008      	beq.n	8021dfe <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8021dec:	69b9      	ldr	r1, [r7, #24]
 8021dee:	6a38      	ldr	r0, [r7, #32]
 8021df0:	f7ff ff0e 	bl	8021c10 <ip_reass_free_complete_datagram>
 8021df4:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8021df6:	697a      	ldr	r2, [r7, #20]
 8021df8:	68fb      	ldr	r3, [r7, #12]
 8021dfa:	4413      	add	r3, r2
 8021dfc:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8021dfe:	697a      	ldr	r2, [r7, #20]
 8021e00:	683b      	ldr	r3, [r7, #0]
 8021e02:	429a      	cmp	r2, r3
 8021e04:	da02      	bge.n	8021e0c <ip_reass_remove_oldest_datagram+0xb4>
 8021e06:	693b      	ldr	r3, [r7, #16]
 8021e08:	2b01      	cmp	r3, #1
 8021e0a:	dcac      	bgt.n	8021d66 <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8021e0c:	697b      	ldr	r3, [r7, #20]
}
 8021e0e:	4618      	mov	r0, r3
 8021e10:	3728      	adds	r7, #40	; 0x28
 8021e12:	46bd      	mov	sp, r7
 8021e14:	bd80      	pop	{r7, pc}
 8021e16:	bf00      	nop
 8021e18:	2000c110 	.word	0x2000c110

08021e1c <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8021e1c:	b580      	push	{r7, lr}
 8021e1e:	b084      	sub	sp, #16
 8021e20:	af00      	add	r7, sp, #0
 8021e22:	6078      	str	r0, [r7, #4]
 8021e24:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021e26:	2004      	movs	r0, #4
 8021e28:	f7f6 f8e0 	bl	8017fec <memp_malloc>
 8021e2c:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8021e2e:	68fb      	ldr	r3, [r7, #12]
 8021e30:	2b00      	cmp	r3, #0
 8021e32:	d110      	bne.n	8021e56 <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8021e34:	6839      	ldr	r1, [r7, #0]
 8021e36:	6878      	ldr	r0, [r7, #4]
 8021e38:	f7ff ff8e 	bl	8021d58 <ip_reass_remove_oldest_datagram>
 8021e3c:	4602      	mov	r2, r0
 8021e3e:	683b      	ldr	r3, [r7, #0]
 8021e40:	4293      	cmp	r3, r2
 8021e42:	dc03      	bgt.n	8021e4c <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8021e44:	2004      	movs	r0, #4
 8021e46:	f7f6 f8d1 	bl	8017fec <memp_malloc>
 8021e4a:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8021e4c:	68fb      	ldr	r3, [r7, #12]
 8021e4e:	2b00      	cmp	r3, #0
 8021e50:	d101      	bne.n	8021e56 <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8021e52:	2300      	movs	r3, #0
 8021e54:	e016      	b.n	8021e84 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8021e56:	2220      	movs	r2, #32
 8021e58:	2100      	movs	r1, #0
 8021e5a:	68f8      	ldr	r0, [r7, #12]
 8021e5c:	f002 f930 	bl	80240c0 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8021e60:	68fb      	ldr	r3, [r7, #12]
 8021e62:	220f      	movs	r2, #15
 8021e64:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8021e66:	4b09      	ldr	r3, [pc, #36]	; (8021e8c <ip_reass_enqueue_new_datagram+0x70>)
 8021e68:	681a      	ldr	r2, [r3, #0]
 8021e6a:	68fb      	ldr	r3, [r7, #12]
 8021e6c:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8021e6e:	4a07      	ldr	r2, [pc, #28]	; (8021e8c <ip_reass_enqueue_new_datagram+0x70>)
 8021e70:	68fb      	ldr	r3, [r7, #12]
 8021e72:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8021e74:	68fb      	ldr	r3, [r7, #12]
 8021e76:	3308      	adds	r3, #8
 8021e78:	2214      	movs	r2, #20
 8021e7a:	6879      	ldr	r1, [r7, #4]
 8021e7c:	4618      	mov	r0, r3
 8021e7e:	f002 f8f7 	bl	8024070 <memcpy>
  return ipr;
 8021e82:	68fb      	ldr	r3, [r7, #12]
}
 8021e84:	4618      	mov	r0, r3
 8021e86:	3710      	adds	r7, #16
 8021e88:	46bd      	mov	sp, r7
 8021e8a:	bd80      	pop	{r7, pc}
 8021e8c:	2000c110 	.word	0x2000c110

08021e90 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8021e90:	b580      	push	{r7, lr}
 8021e92:	b082      	sub	sp, #8
 8021e94:	af00      	add	r7, sp, #0
 8021e96:	6078      	str	r0, [r7, #4]
 8021e98:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8021e9a:	4b10      	ldr	r3, [pc, #64]	; (8021edc <ip_reass_dequeue_datagram+0x4c>)
 8021e9c:	681b      	ldr	r3, [r3, #0]
 8021e9e:	687a      	ldr	r2, [r7, #4]
 8021ea0:	429a      	cmp	r2, r3
 8021ea2:	d104      	bne.n	8021eae <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8021ea4:	687b      	ldr	r3, [r7, #4]
 8021ea6:	681b      	ldr	r3, [r3, #0]
 8021ea8:	4a0c      	ldr	r2, [pc, #48]	; (8021edc <ip_reass_dequeue_datagram+0x4c>)
 8021eaa:	6013      	str	r3, [r2, #0]
 8021eac:	e00d      	b.n	8021eca <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8021eae:	683b      	ldr	r3, [r7, #0]
 8021eb0:	2b00      	cmp	r3, #0
 8021eb2:	d106      	bne.n	8021ec2 <ip_reass_dequeue_datagram+0x32>
 8021eb4:	4b0a      	ldr	r3, [pc, #40]	; (8021ee0 <ip_reass_dequeue_datagram+0x50>)
 8021eb6:	f240 1245 	movw	r2, #325	; 0x145
 8021eba:	490a      	ldr	r1, [pc, #40]	; (8021ee4 <ip_reass_dequeue_datagram+0x54>)
 8021ebc:	480a      	ldr	r0, [pc, #40]	; (8021ee8 <ip_reass_dequeue_datagram+0x58>)
 8021ebe:	f002 f9e7 	bl	8024290 <iprintf>
    prev->next = ipr->next;
 8021ec2:	687b      	ldr	r3, [r7, #4]
 8021ec4:	681a      	ldr	r2, [r3, #0]
 8021ec6:	683b      	ldr	r3, [r7, #0]
 8021ec8:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8021eca:	6879      	ldr	r1, [r7, #4]
 8021ecc:	2004      	movs	r0, #4
 8021ece:	f7f6 f903 	bl	80180d8 <memp_free>
}
 8021ed2:	bf00      	nop
 8021ed4:	3708      	adds	r7, #8
 8021ed6:	46bd      	mov	sp, r7
 8021ed8:	bd80      	pop	{r7, pc}
 8021eda:	bf00      	nop
 8021edc:	2000c110 	.word	0x2000c110
 8021ee0:	08028a44 	.word	0x08028a44
 8021ee4:	08028b0c 	.word	0x08028b0c
 8021ee8:	08028a8c 	.word	0x08028a8c

08021eec <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8021eec:	b580      	push	{r7, lr}
 8021eee:	b08c      	sub	sp, #48	; 0x30
 8021ef0:	af00      	add	r7, sp, #0
 8021ef2:	60f8      	str	r0, [r7, #12]
 8021ef4:	60b9      	str	r1, [r7, #8]
 8021ef6:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8021ef8:	2300      	movs	r3, #0
 8021efa:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8021efc:	2301      	movs	r3, #1
 8021efe:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8021f00:	68bb      	ldr	r3, [r7, #8]
 8021f02:	685b      	ldr	r3, [r3, #4]
 8021f04:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8021f06:	69fb      	ldr	r3, [r7, #28]
 8021f08:	885b      	ldrh	r3, [r3, #2]
 8021f0a:	b29b      	uxth	r3, r3
 8021f0c:	4618      	mov	r0, r3
 8021f0e:	f7f5 fb95 	bl	801763c <lwip_htons>
 8021f12:	4603      	mov	r3, r0
 8021f14:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8021f16:	69fb      	ldr	r3, [r7, #28]
 8021f18:	781b      	ldrb	r3, [r3, #0]
 8021f1a:	f003 030f 	and.w	r3, r3, #15
 8021f1e:	b2db      	uxtb	r3, r3
 8021f20:	009b      	lsls	r3, r3, #2
 8021f22:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8021f24:	7e7b      	ldrb	r3, [r7, #25]
 8021f26:	b29b      	uxth	r3, r3
 8021f28:	8b7a      	ldrh	r2, [r7, #26]
 8021f2a:	429a      	cmp	r2, r3
 8021f2c:	d202      	bcs.n	8021f34 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021f2e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f32:	e135      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8021f34:	7e7b      	ldrb	r3, [r7, #25]
 8021f36:	b29b      	uxth	r3, r3
 8021f38:	8b7a      	ldrh	r2, [r7, #26]
 8021f3a:	1ad3      	subs	r3, r2, r3
 8021f3c:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8021f3e:	69fb      	ldr	r3, [r7, #28]
 8021f40:	88db      	ldrh	r3, [r3, #6]
 8021f42:	b29b      	uxth	r3, r3
 8021f44:	4618      	mov	r0, r3
 8021f46:	f7f5 fb79 	bl	801763c <lwip_htons>
 8021f4a:	4603      	mov	r3, r0
 8021f4c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8021f50:	b29b      	uxth	r3, r3
 8021f52:	00db      	lsls	r3, r3, #3
 8021f54:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8021f56:	68bb      	ldr	r3, [r7, #8]
 8021f58:	685b      	ldr	r3, [r3, #4]
 8021f5a:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8021f5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f5e:	2200      	movs	r2, #0
 8021f60:	701a      	strb	r2, [r3, #0]
 8021f62:	2200      	movs	r2, #0
 8021f64:	705a      	strb	r2, [r3, #1]
 8021f66:	2200      	movs	r2, #0
 8021f68:	709a      	strb	r2, [r3, #2]
 8021f6a:	2200      	movs	r2, #0
 8021f6c:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8021f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f70:	8afa      	ldrh	r2, [r7, #22]
 8021f72:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8021f74:	8afa      	ldrh	r2, [r7, #22]
 8021f76:	8b7b      	ldrh	r3, [r7, #26]
 8021f78:	4413      	add	r3, r2
 8021f7a:	b29a      	uxth	r2, r3
 8021f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f7e:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8021f80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021f82:	88db      	ldrh	r3, [r3, #6]
 8021f84:	b29b      	uxth	r3, r3
 8021f86:	8afa      	ldrh	r2, [r7, #22]
 8021f88:	429a      	cmp	r2, r3
 8021f8a:	d902      	bls.n	8021f92 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021f8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021f90:	e106      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8021f92:	68fb      	ldr	r3, [r7, #12]
 8021f94:	685b      	ldr	r3, [r3, #4]
 8021f96:	627b      	str	r3, [r7, #36]	; 0x24
 8021f98:	e068      	b.n	802206c <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8021f9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8021f9c:	685b      	ldr	r3, [r3, #4]
 8021f9e:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8021fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fa2:	889b      	ldrh	r3, [r3, #4]
 8021fa4:	b29a      	uxth	r2, r3
 8021fa6:	693b      	ldr	r3, [r7, #16]
 8021fa8:	889b      	ldrh	r3, [r3, #4]
 8021faa:	b29b      	uxth	r3, r3
 8021fac:	429a      	cmp	r2, r3
 8021fae:	d235      	bcs.n	802201c <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8021fb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fb2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8021fb4:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8021fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fb8:	2b00      	cmp	r3, #0
 8021fba:	d020      	beq.n	8021ffe <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8021fbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fbe:	889b      	ldrh	r3, [r3, #4]
 8021fc0:	b29a      	uxth	r2, r3
 8021fc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fc4:	88db      	ldrh	r3, [r3, #6]
 8021fc6:	b29b      	uxth	r3, r3
 8021fc8:	429a      	cmp	r2, r3
 8021fca:	d307      	bcc.n	8021fdc <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8021fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021fce:	88db      	ldrh	r3, [r3, #6]
 8021fd0:	b29a      	uxth	r2, r3
 8021fd2:	693b      	ldr	r3, [r7, #16]
 8021fd4:	889b      	ldrh	r3, [r3, #4]
 8021fd6:	b29b      	uxth	r3, r3
 8021fd8:	429a      	cmp	r2, r3
 8021fda:	d902      	bls.n	8021fe2 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8021fdc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8021fe0:	e0de      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8021fe2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fe4:	68ba      	ldr	r2, [r7, #8]
 8021fe6:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8021fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8021fea:	88db      	ldrh	r3, [r3, #6]
 8021fec:	b29a      	uxth	r2, r3
 8021fee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8021ff0:	889b      	ldrh	r3, [r3, #4]
 8021ff2:	b29b      	uxth	r3, r3
 8021ff4:	429a      	cmp	r2, r3
 8021ff6:	d03d      	beq.n	8022074 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8021ff8:	2300      	movs	r3, #0
 8021ffa:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8021ffc:	e03a      	b.n	8022074 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8021ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022000:	88db      	ldrh	r3, [r3, #6]
 8022002:	b29a      	uxth	r2, r3
 8022004:	693b      	ldr	r3, [r7, #16]
 8022006:	889b      	ldrh	r3, [r3, #4]
 8022008:	b29b      	uxth	r3, r3
 802200a:	429a      	cmp	r2, r3
 802200c:	d902      	bls.n	8022014 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 802200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022012:	e0c5      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8022014:	68fb      	ldr	r3, [r7, #12]
 8022016:	68ba      	ldr	r2, [r7, #8]
 8022018:	605a      	str	r2, [r3, #4]
      break;
 802201a:	e02b      	b.n	8022074 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 802201c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802201e:	889b      	ldrh	r3, [r3, #4]
 8022020:	b29a      	uxth	r2, r3
 8022022:	693b      	ldr	r3, [r7, #16]
 8022024:	889b      	ldrh	r3, [r3, #4]
 8022026:	b29b      	uxth	r3, r3
 8022028:	429a      	cmp	r2, r3
 802202a:	d102      	bne.n	8022032 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 802202c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022030:	e0b6      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8022032:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022034:	889b      	ldrh	r3, [r3, #4]
 8022036:	b29a      	uxth	r2, r3
 8022038:	693b      	ldr	r3, [r7, #16]
 802203a:	88db      	ldrh	r3, [r3, #6]
 802203c:	b29b      	uxth	r3, r3
 802203e:	429a      	cmp	r2, r3
 8022040:	d202      	bcs.n	8022048 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8022042:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022046:	e0ab      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8022048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802204a:	2b00      	cmp	r3, #0
 802204c:	d009      	beq.n	8022062 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 802204e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022050:	88db      	ldrh	r3, [r3, #6]
 8022052:	b29a      	uxth	r2, r3
 8022054:	693b      	ldr	r3, [r7, #16]
 8022056:	889b      	ldrh	r3, [r3, #4]
 8022058:	b29b      	uxth	r3, r3
 802205a:	429a      	cmp	r2, r3
 802205c:	d001      	beq.n	8022062 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 802205e:	2300      	movs	r3, #0
 8022060:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8022062:	693b      	ldr	r3, [r7, #16]
 8022064:	681b      	ldr	r3, [r3, #0]
 8022066:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8022068:	693b      	ldr	r3, [r7, #16]
 802206a:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 802206c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802206e:	2b00      	cmp	r3, #0
 8022070:	d193      	bne.n	8021f9a <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8022072:	e000      	b.n	8022076 <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8022074:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8022076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022078:	2b00      	cmp	r3, #0
 802207a:	d12d      	bne.n	80220d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 802207c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802207e:	2b00      	cmp	r3, #0
 8022080:	d01c      	beq.n	80220bc <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8022082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022084:	88db      	ldrh	r3, [r3, #6]
 8022086:	b29a      	uxth	r2, r3
 8022088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802208a:	889b      	ldrh	r3, [r3, #4]
 802208c:	b29b      	uxth	r3, r3
 802208e:	429a      	cmp	r2, r3
 8022090:	d906      	bls.n	80220a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8022092:	4b45      	ldr	r3, [pc, #276]	; (80221a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022094:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8022098:	4944      	ldr	r1, [pc, #272]	; (80221ac <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 802209a:	4845      	ldr	r0, [pc, #276]	; (80221b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802209c:	f002 f8f8 	bl	8024290 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 80220a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220a2:	68ba      	ldr	r2, [r7, #8]
 80220a4:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 80220a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80220a8:	88db      	ldrh	r3, [r3, #6]
 80220aa:	b29a      	uxth	r2, r3
 80220ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80220ae:	889b      	ldrh	r3, [r3, #4]
 80220b0:	b29b      	uxth	r3, r3
 80220b2:	429a      	cmp	r2, r3
 80220b4:	d010      	beq.n	80220d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 80220b6:	2300      	movs	r3, #0
 80220b8:	623b      	str	r3, [r7, #32]
 80220ba:	e00d      	b.n	80220d8 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 80220bc:	68fb      	ldr	r3, [r7, #12]
 80220be:	685b      	ldr	r3, [r3, #4]
 80220c0:	2b00      	cmp	r3, #0
 80220c2:	d006      	beq.n	80220d2 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 80220c4:	4b38      	ldr	r3, [pc, #224]	; (80221a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80220c6:	f44f 72df 	mov.w	r2, #446	; 0x1be
 80220ca:	493a      	ldr	r1, [pc, #232]	; (80221b4 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 80220cc:	4838      	ldr	r0, [pc, #224]	; (80221b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80220ce:	f002 f8df 	bl	8024290 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 80220d2:	68fb      	ldr	r3, [r7, #12]
 80220d4:	68ba      	ldr	r2, [r7, #8]
 80220d6:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 80220d8:	687b      	ldr	r3, [r7, #4]
 80220da:	2b00      	cmp	r3, #0
 80220dc:	d105      	bne.n	80220ea <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 80220de:	68fb      	ldr	r3, [r7, #12]
 80220e0:	7f9b      	ldrb	r3, [r3, #30]
 80220e2:	f003 0301 	and.w	r3, r3, #1
 80220e6:	2b00      	cmp	r3, #0
 80220e8:	d059      	beq.n	802219e <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 80220ea:	6a3b      	ldr	r3, [r7, #32]
 80220ec:	2b00      	cmp	r3, #0
 80220ee:	d04f      	beq.n	8022190 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 80220f0:	68fb      	ldr	r3, [r7, #12]
 80220f2:	685b      	ldr	r3, [r3, #4]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d006      	beq.n	8022106 <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 80220f8:	68fb      	ldr	r3, [r7, #12]
 80220fa:	685b      	ldr	r3, [r3, #4]
 80220fc:	685b      	ldr	r3, [r3, #4]
 80220fe:	889b      	ldrh	r3, [r3, #4]
 8022100:	b29b      	uxth	r3, r3
 8022102:	2b00      	cmp	r3, #0
 8022104:	d002      	beq.n	802210c <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8022106:	2300      	movs	r3, #0
 8022108:	623b      	str	r3, [r7, #32]
 802210a:	e041      	b.n	8022190 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 802210c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802210e:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8022110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022112:	681b      	ldr	r3, [r3, #0]
 8022114:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8022116:	e012      	b.n	802213e <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8022118:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802211a:	685b      	ldr	r3, [r3, #4]
 802211c:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 802211e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022120:	88db      	ldrh	r3, [r3, #6]
 8022122:	b29a      	uxth	r2, r3
 8022124:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022126:	889b      	ldrh	r3, [r3, #4]
 8022128:	b29b      	uxth	r3, r3
 802212a:	429a      	cmp	r2, r3
 802212c:	d002      	beq.n	8022134 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 802212e:	2300      	movs	r3, #0
 8022130:	623b      	str	r3, [r7, #32]
            break;
 8022132:	e007      	b.n	8022144 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8022134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022136:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8022138:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802213a:	681b      	ldr	r3, [r3, #0]
 802213c:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 802213e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022140:	2b00      	cmp	r3, #0
 8022142:	d1e9      	bne.n	8022118 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 8022144:	6a3b      	ldr	r3, [r7, #32]
 8022146:	2b00      	cmp	r3, #0
 8022148:	d022      	beq.n	8022190 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 802214a:	68fb      	ldr	r3, [r7, #12]
 802214c:	685b      	ldr	r3, [r3, #4]
 802214e:	2b00      	cmp	r3, #0
 8022150:	d106      	bne.n	8022160 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 8022152:	4b15      	ldr	r3, [pc, #84]	; (80221a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022154:	f240 12df 	movw	r2, #479	; 0x1df
 8022158:	4917      	ldr	r1, [pc, #92]	; (80221b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 802215a:	4815      	ldr	r0, [pc, #84]	; (80221b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802215c:	f002 f898 	bl	8024290 <iprintf>
          LWIP_ASSERT("sanity check",
 8022160:	68fb      	ldr	r3, [r7, #12]
 8022162:	685b      	ldr	r3, [r3, #4]
 8022164:	685b      	ldr	r3, [r3, #4]
 8022166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8022168:	429a      	cmp	r2, r3
 802216a:	d106      	bne.n	802217a <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 802216c:	4b0e      	ldr	r3, [pc, #56]	; (80221a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 802216e:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8022172:	4911      	ldr	r1, [pc, #68]	; (80221b8 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8022174:	480e      	ldr	r0, [pc, #56]	; (80221b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8022176:	f002 f88b 	bl	8024290 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 802217a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802217c:	681b      	ldr	r3, [r3, #0]
 802217e:	2b00      	cmp	r3, #0
 8022180:	d006      	beq.n	8022190 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8022182:	4b09      	ldr	r3, [pc, #36]	; (80221a8 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8022184:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8022188:	490c      	ldr	r1, [pc, #48]	; (80221bc <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 802218a:	4809      	ldr	r0, [pc, #36]	; (80221b0 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 802218c:	f002 f880 	bl	8024290 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8022190:	6a3b      	ldr	r3, [r7, #32]
 8022192:	2b00      	cmp	r3, #0
 8022194:	bf14      	ite	ne
 8022196:	2301      	movne	r3, #1
 8022198:	2300      	moveq	r3, #0
 802219a:	b2db      	uxtb	r3, r3
 802219c:	e000      	b.n	80221a0 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 802219e:	2300      	movs	r3, #0
}
 80221a0:	4618      	mov	r0, r3
 80221a2:	3730      	adds	r7, #48	; 0x30
 80221a4:	46bd      	mov	sp, r7
 80221a6:	bd80      	pop	{r7, pc}
 80221a8:	08028a44 	.word	0x08028a44
 80221ac:	08028b28 	.word	0x08028b28
 80221b0:	08028a8c 	.word	0x08028a8c
 80221b4:	08028b48 	.word	0x08028b48
 80221b8:	08028b80 	.word	0x08028b80
 80221bc:	08028b90 	.word	0x08028b90

080221c0 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 80221c0:	b580      	push	{r7, lr}
 80221c2:	b08e      	sub	sp, #56	; 0x38
 80221c4:	af00      	add	r7, sp, #0
 80221c6:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 80221c8:	687b      	ldr	r3, [r7, #4]
 80221ca:	685b      	ldr	r3, [r3, #4]
 80221cc:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 80221ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221d0:	781b      	ldrb	r3, [r3, #0]
 80221d2:	f003 030f 	and.w	r3, r3, #15
 80221d6:	b2db      	uxtb	r3, r3
 80221d8:	009b      	lsls	r3, r3, #2
 80221da:	b2db      	uxtb	r3, r3
 80221dc:	2b14      	cmp	r3, #20
 80221de:	f040 8171 	bne.w	80224c4 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80221e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221e4:	88db      	ldrh	r3, [r3, #6]
 80221e6:	b29b      	uxth	r3, r3
 80221e8:	4618      	mov	r0, r3
 80221ea:	f7f5 fa27 	bl	801763c <lwip_htons>
 80221ee:	4603      	mov	r3, r0
 80221f0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80221f4:	b29b      	uxth	r3, r3
 80221f6:	00db      	lsls	r3, r3, #3
 80221f8:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80221fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80221fc:	885b      	ldrh	r3, [r3, #2]
 80221fe:	b29b      	uxth	r3, r3
 8022200:	4618      	mov	r0, r3
 8022202:	f7f5 fa1b 	bl	801763c <lwip_htons>
 8022206:	4603      	mov	r3, r0
 8022208:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 802220a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802220c:	781b      	ldrb	r3, [r3, #0]
 802220e:	f003 030f 	and.w	r3, r3, #15
 8022212:	b2db      	uxtb	r3, r3
 8022214:	009b      	lsls	r3, r3, #2
 8022216:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 802221a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802221e:	b29b      	uxth	r3, r3
 8022220:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022222:	429a      	cmp	r2, r3
 8022224:	f0c0 8150 	bcc.w	80224c8 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 8022228:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 802222c:	b29b      	uxth	r3, r3
 802222e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8022230:	1ad3      	subs	r3, r2, r3
 8022232:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 8022234:	6878      	ldr	r0, [r7, #4]
 8022236:	f7f6 fe81 	bl	8018f3c <pbuf_clen>
 802223a:	4603      	mov	r3, r0
 802223c:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 802223e:	4b8c      	ldr	r3, [pc, #560]	; (8022470 <ip4_reass+0x2b0>)
 8022240:	881b      	ldrh	r3, [r3, #0]
 8022242:	461a      	mov	r2, r3
 8022244:	8c3b      	ldrh	r3, [r7, #32]
 8022246:	4413      	add	r3, r2
 8022248:	2b0a      	cmp	r3, #10
 802224a:	dd10      	ble.n	802226e <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 802224c:	8c3b      	ldrh	r3, [r7, #32]
 802224e:	4619      	mov	r1, r3
 8022250:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8022252:	f7ff fd81 	bl	8021d58 <ip_reass_remove_oldest_datagram>
 8022256:	4603      	mov	r3, r0
 8022258:	2b00      	cmp	r3, #0
 802225a:	f000 8137 	beq.w	80224cc <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 802225e:	4b84      	ldr	r3, [pc, #528]	; (8022470 <ip4_reass+0x2b0>)
 8022260:	881b      	ldrh	r3, [r3, #0]
 8022262:	461a      	mov	r2, r3
 8022264:	8c3b      	ldrh	r3, [r7, #32]
 8022266:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8022268:	2b0a      	cmp	r3, #10
 802226a:	f300 812f 	bgt.w	80224cc <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802226e:	4b81      	ldr	r3, [pc, #516]	; (8022474 <ip4_reass+0x2b4>)
 8022270:	681b      	ldr	r3, [r3, #0]
 8022272:	633b      	str	r3, [r7, #48]	; 0x30
 8022274:	e015      	b.n	80222a2 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 8022276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022278:	695a      	ldr	r2, [r3, #20]
 802227a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 802227c:	68db      	ldr	r3, [r3, #12]
 802227e:	429a      	cmp	r2, r3
 8022280:	d10c      	bne.n	802229c <ip4_reass+0xdc>
 8022282:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022284:	699a      	ldr	r2, [r3, #24]
 8022286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022288:	691b      	ldr	r3, [r3, #16]
 802228a:	429a      	cmp	r2, r3
 802228c:	d106      	bne.n	802229c <ip4_reass+0xdc>
 802228e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022290:	899a      	ldrh	r2, [r3, #12]
 8022292:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022294:	889b      	ldrh	r3, [r3, #4]
 8022296:	b29b      	uxth	r3, r3
 8022298:	429a      	cmp	r2, r3
 802229a:	d006      	beq.n	80222aa <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 802229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802229e:	681b      	ldr	r3, [r3, #0]
 80222a0:	633b      	str	r3, [r7, #48]	; 0x30
 80222a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	d1e6      	bne.n	8022276 <ip4_reass+0xb6>
 80222a8:	e000      	b.n	80222ac <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 80222aa:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 80222ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222ae:	2b00      	cmp	r3, #0
 80222b0:	d109      	bne.n	80222c6 <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 80222b2:	8c3b      	ldrh	r3, [r7, #32]
 80222b4:	4619      	mov	r1, r3
 80222b6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80222b8:	f7ff fdb0 	bl	8021e1c <ip_reass_enqueue_new_datagram>
 80222bc:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 80222be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	d11c      	bne.n	80222fe <ip4_reass+0x13e>
      goto nullreturn;
 80222c4:	e105      	b.n	80224d2 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80222c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80222c8:	88db      	ldrh	r3, [r3, #6]
 80222ca:	b29b      	uxth	r3, r3
 80222cc:	4618      	mov	r0, r3
 80222ce:	f7f5 f9b5 	bl	801763c <lwip_htons>
 80222d2:	4603      	mov	r3, r0
 80222d4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80222d8:	2b00      	cmp	r3, #0
 80222da:	d110      	bne.n	80222fe <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80222dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222de:	89db      	ldrh	r3, [r3, #14]
 80222e0:	4618      	mov	r0, r3
 80222e2:	f7f5 f9ab 	bl	801763c <lwip_htons>
 80222e6:	4603      	mov	r3, r0
 80222e8:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80222ec:	2b00      	cmp	r3, #0
 80222ee:	d006      	beq.n	80222fe <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80222f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80222f2:	3308      	adds	r3, #8
 80222f4:	2214      	movs	r2, #20
 80222f6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80222f8:	4618      	mov	r0, r3
 80222fa:	f001 feb9 	bl	8024070 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80222fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8022300:	88db      	ldrh	r3, [r3, #6]
 8022302:	b29b      	uxth	r3, r3
 8022304:	f003 0320 	and.w	r3, r3, #32
 8022308:	2b00      	cmp	r3, #0
 802230a:	bf0c      	ite	eq
 802230c:	2301      	moveq	r3, #1
 802230e:	2300      	movne	r3, #0
 8022310:	b2db      	uxtb	r3, r3
 8022312:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 8022314:	69fb      	ldr	r3, [r7, #28]
 8022316:	2b00      	cmp	r3, #0
 8022318:	d00e      	beq.n	8022338 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 802231a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 802231c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 802231e:	4413      	add	r3, r2
 8022320:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 8022322:	8b7a      	ldrh	r2, [r7, #26]
 8022324:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8022326:	429a      	cmp	r2, r3
 8022328:	f0c0 80a0 	bcc.w	802246c <ip4_reass+0x2ac>
 802232c:	8b7b      	ldrh	r3, [r7, #26]
 802232e:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 8022332:	4293      	cmp	r3, r2
 8022334:	f200 809a 	bhi.w	802246c <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8022338:	69fa      	ldr	r2, [r7, #28]
 802233a:	6879      	ldr	r1, [r7, #4]
 802233c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 802233e:	f7ff fdd5 	bl	8021eec <ip_reass_chain_frag_into_datagram_and_validate>
 8022342:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 8022344:	697b      	ldr	r3, [r7, #20]
 8022346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 802234a:	f000 809b 	beq.w	8022484 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 802234e:	4b48      	ldr	r3, [pc, #288]	; (8022470 <ip4_reass+0x2b0>)
 8022350:	881a      	ldrh	r2, [r3, #0]
 8022352:	8c3b      	ldrh	r3, [r7, #32]
 8022354:	4413      	add	r3, r2
 8022356:	b29a      	uxth	r2, r3
 8022358:	4b45      	ldr	r3, [pc, #276]	; (8022470 <ip4_reass+0x2b0>)
 802235a:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 802235c:	69fb      	ldr	r3, [r7, #28]
 802235e:	2b00      	cmp	r3, #0
 8022360:	d00d      	beq.n	802237e <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 8022362:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8022364:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8022366:	4413      	add	r3, r2
 8022368:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 802236a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802236c:	8a7a      	ldrh	r2, [r7, #18]
 802236e:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8022370:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022372:	7f9b      	ldrb	r3, [r3, #30]
 8022374:	f043 0301 	orr.w	r3, r3, #1
 8022378:	b2da      	uxtb	r2, r3
 802237a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802237c:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 802237e:	697b      	ldr	r3, [r7, #20]
 8022380:	2b01      	cmp	r3, #1
 8022382:	d171      	bne.n	8022468 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8022384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022386:	8b9b      	ldrh	r3, [r3, #28]
 8022388:	3314      	adds	r3, #20
 802238a:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 802238c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802238e:	685b      	ldr	r3, [r3, #4]
 8022390:	685b      	ldr	r3, [r3, #4]
 8022392:	681b      	ldr	r3, [r3, #0]
 8022394:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 8022396:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022398:	685b      	ldr	r3, [r3, #4]
 802239a:	685b      	ldr	r3, [r3, #4]
 802239c:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 802239e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223a0:	3308      	adds	r3, #8
 80223a2:	2214      	movs	r2, #20
 80223a4:	4619      	mov	r1, r3
 80223a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80223a8:	f001 fe62 	bl	8024070 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 80223ac:	8a3b      	ldrh	r3, [r7, #16]
 80223ae:	4618      	mov	r0, r3
 80223b0:	f7f5 f944 	bl	801763c <lwip_htons>
 80223b4:	4603      	mov	r3, r0
 80223b6:	461a      	mov	r2, r3
 80223b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223ba:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 80223bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223be:	2200      	movs	r2, #0
 80223c0:	719a      	strb	r2, [r3, #6]
 80223c2:	2200      	movs	r2, #0
 80223c4:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 80223c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80223c8:	2200      	movs	r2, #0
 80223ca:	729a      	strb	r2, [r3, #10]
 80223cc:	2200      	movs	r2, #0
 80223ce:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 80223d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80223d2:	685b      	ldr	r3, [r3, #4]
 80223d4:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 80223d6:	e00d      	b.n	80223f4 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80223d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80223da:	685b      	ldr	r3, [r3, #4]
 80223dc:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80223de:	2114      	movs	r1, #20
 80223e0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80223e2:	f7f6 fc97 	bl	8018d14 <pbuf_remove_header>
      pbuf_cat(p, r);
 80223e6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80223e8:	6878      	ldr	r0, [r7, #4]
 80223ea:	f7f6 fde7 	bl	8018fbc <pbuf_cat>
      r = iprh->next_pbuf;
 80223ee:	68fb      	ldr	r3, [r7, #12]
 80223f0:	681b      	ldr	r3, [r3, #0]
 80223f2:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80223f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80223f6:	2b00      	cmp	r3, #0
 80223f8:	d1ee      	bne.n	80223d8 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80223fa:	4b1e      	ldr	r3, [pc, #120]	; (8022474 <ip4_reass+0x2b4>)
 80223fc:	681b      	ldr	r3, [r3, #0]
 80223fe:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022400:	429a      	cmp	r2, r3
 8022402:	d102      	bne.n	802240a <ip4_reass+0x24a>
      ipr_prev = NULL;
 8022404:	2300      	movs	r3, #0
 8022406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022408:	e010      	b.n	802242c <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802240a:	4b1a      	ldr	r3, [pc, #104]	; (8022474 <ip4_reass+0x2b4>)
 802240c:	681b      	ldr	r3, [r3, #0]
 802240e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022410:	e007      	b.n	8022422 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 8022412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022414:	681b      	ldr	r3, [r3, #0]
 8022416:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8022418:	429a      	cmp	r2, r3
 802241a:	d006      	beq.n	802242a <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 802241c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802241e:	681b      	ldr	r3, [r3, #0]
 8022420:	62fb      	str	r3, [r7, #44]	; 0x2c
 8022422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022424:	2b00      	cmp	r3, #0
 8022426:	d1f4      	bne.n	8022412 <ip4_reass+0x252>
 8022428:	e000      	b.n	802242c <ip4_reass+0x26c>
          break;
 802242a:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 802242c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 802242e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8022430:	f7ff fd2e 	bl	8021e90 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 8022434:	6878      	ldr	r0, [r7, #4]
 8022436:	f7f6 fd81 	bl	8018f3c <pbuf_clen>
 802243a:	4603      	mov	r3, r0
 802243c:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 802243e:	4b0c      	ldr	r3, [pc, #48]	; (8022470 <ip4_reass+0x2b0>)
 8022440:	881b      	ldrh	r3, [r3, #0]
 8022442:	8c3a      	ldrh	r2, [r7, #32]
 8022444:	429a      	cmp	r2, r3
 8022446:	d906      	bls.n	8022456 <ip4_reass+0x296>
 8022448:	4b0b      	ldr	r3, [pc, #44]	; (8022478 <ip4_reass+0x2b8>)
 802244a:	f240 229b 	movw	r2, #667	; 0x29b
 802244e:	490b      	ldr	r1, [pc, #44]	; (802247c <ip4_reass+0x2bc>)
 8022450:	480b      	ldr	r0, [pc, #44]	; (8022480 <ip4_reass+0x2c0>)
 8022452:	f001 ff1d 	bl	8024290 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 8022456:	4b06      	ldr	r3, [pc, #24]	; (8022470 <ip4_reass+0x2b0>)
 8022458:	881a      	ldrh	r2, [r3, #0]
 802245a:	8c3b      	ldrh	r3, [r7, #32]
 802245c:	1ad3      	subs	r3, r2, r3
 802245e:	b29a      	uxth	r2, r3
 8022460:	4b03      	ldr	r3, [pc, #12]	; (8022470 <ip4_reass+0x2b0>)
 8022462:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 8022464:	687b      	ldr	r3, [r7, #4]
 8022466:	e038      	b.n	80224da <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8022468:	2300      	movs	r3, #0
 802246a:	e036      	b.n	80224da <ip4_reass+0x31a>
      goto nullreturn_ipr;
 802246c:	bf00      	nop
 802246e:	e00a      	b.n	8022486 <ip4_reass+0x2c6>
 8022470:	2000c114 	.word	0x2000c114
 8022474:	2000c110 	.word	0x2000c110
 8022478:	08028a44 	.word	0x08028a44
 802247c:	08028bb4 	.word	0x08028bb4
 8022480:	08028a8c 	.word	0x08028a8c
    goto nullreturn_ipr;
 8022484:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8022486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8022488:	2b00      	cmp	r3, #0
 802248a:	d106      	bne.n	802249a <ip4_reass+0x2da>
 802248c:	4b15      	ldr	r3, [pc, #84]	; (80224e4 <ip4_reass+0x324>)
 802248e:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8022492:	4915      	ldr	r1, [pc, #84]	; (80224e8 <ip4_reass+0x328>)
 8022494:	4815      	ldr	r0, [pc, #84]	; (80224ec <ip4_reass+0x32c>)
 8022496:	f001 fefb 	bl	8024290 <iprintf>
  if (ipr->p == NULL) {
 802249a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802249c:	685b      	ldr	r3, [r3, #4]
 802249e:	2b00      	cmp	r3, #0
 80224a0:	d116      	bne.n	80224d0 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 80224a2:	4b13      	ldr	r3, [pc, #76]	; (80224f0 <ip4_reass+0x330>)
 80224a4:	681b      	ldr	r3, [r3, #0]
 80224a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80224a8:	429a      	cmp	r2, r3
 80224aa:	d006      	beq.n	80224ba <ip4_reass+0x2fa>
 80224ac:	4b0d      	ldr	r3, [pc, #52]	; (80224e4 <ip4_reass+0x324>)
 80224ae:	f240 22ab 	movw	r2, #683	; 0x2ab
 80224b2:	4910      	ldr	r1, [pc, #64]	; (80224f4 <ip4_reass+0x334>)
 80224b4:	480d      	ldr	r0, [pc, #52]	; (80224ec <ip4_reass+0x32c>)
 80224b6:	f001 feeb 	bl	8024290 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 80224ba:	2100      	movs	r1, #0
 80224bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80224be:	f7ff fce7 	bl	8021e90 <ip_reass_dequeue_datagram>
 80224c2:	e006      	b.n	80224d2 <ip4_reass+0x312>
    goto nullreturn;
 80224c4:	bf00      	nop
 80224c6:	e004      	b.n	80224d2 <ip4_reass+0x312>
    goto nullreturn;
 80224c8:	bf00      	nop
 80224ca:	e002      	b.n	80224d2 <ip4_reass+0x312>
      goto nullreturn;
 80224cc:	bf00      	nop
 80224ce:	e000      	b.n	80224d2 <ip4_reass+0x312>
  }

nullreturn:
 80224d0:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 80224d2:	6878      	ldr	r0, [r7, #4]
 80224d4:	f7f6 fca4 	bl	8018e20 <pbuf_free>
  return NULL;
 80224d8:	2300      	movs	r3, #0
}
 80224da:	4618      	mov	r0, r3
 80224dc:	3738      	adds	r7, #56	; 0x38
 80224de:	46bd      	mov	sp, r7
 80224e0:	bd80      	pop	{r7, pc}
 80224e2:	bf00      	nop
 80224e4:	08028a44 	.word	0x08028a44
 80224e8:	08028bd0 	.word	0x08028bd0
 80224ec:	08028a8c 	.word	0x08028a8c
 80224f0:	2000c110 	.word	0x2000c110
 80224f4:	08028bdc 	.word	0x08028bdc

080224f8 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80224f8:	b580      	push	{r7, lr}
 80224fa:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80224fc:	2005      	movs	r0, #5
 80224fe:	f7f5 fd75 	bl	8017fec <memp_malloc>
 8022502:	4603      	mov	r3, r0
}
 8022504:	4618      	mov	r0, r3
 8022506:	bd80      	pop	{r7, pc}

08022508 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8022508:	b580      	push	{r7, lr}
 802250a:	b082      	sub	sp, #8
 802250c:	af00      	add	r7, sp, #0
 802250e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8022510:	687b      	ldr	r3, [r7, #4]
 8022512:	2b00      	cmp	r3, #0
 8022514:	d106      	bne.n	8022524 <ip_frag_free_pbuf_custom_ref+0x1c>
 8022516:	4b07      	ldr	r3, [pc, #28]	; (8022534 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8022518:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 802251c:	4906      	ldr	r1, [pc, #24]	; (8022538 <ip_frag_free_pbuf_custom_ref+0x30>)
 802251e:	4807      	ldr	r0, [pc, #28]	; (802253c <ip_frag_free_pbuf_custom_ref+0x34>)
 8022520:	f001 feb6 	bl	8024290 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8022524:	6879      	ldr	r1, [r7, #4]
 8022526:	2005      	movs	r0, #5
 8022528:	f7f5 fdd6 	bl	80180d8 <memp_free>
}
 802252c:	bf00      	nop
 802252e:	3708      	adds	r7, #8
 8022530:	46bd      	mov	sp, r7
 8022532:	bd80      	pop	{r7, pc}
 8022534:	08028a44 	.word	0x08028a44
 8022538:	08028bfc 	.word	0x08028bfc
 802253c:	08028a8c 	.word	0x08028a8c

08022540 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8022540:	b580      	push	{r7, lr}
 8022542:	b084      	sub	sp, #16
 8022544:	af00      	add	r7, sp, #0
 8022546:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8022548:	687b      	ldr	r3, [r7, #4]
 802254a:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 802254c:	68fb      	ldr	r3, [r7, #12]
 802254e:	2b00      	cmp	r3, #0
 8022550:	d106      	bne.n	8022560 <ipfrag_free_pbuf_custom+0x20>
 8022552:	4b11      	ldr	r3, [pc, #68]	; (8022598 <ipfrag_free_pbuf_custom+0x58>)
 8022554:	f240 22ce 	movw	r2, #718	; 0x2ce
 8022558:	4910      	ldr	r1, [pc, #64]	; (802259c <ipfrag_free_pbuf_custom+0x5c>)
 802255a:	4811      	ldr	r0, [pc, #68]	; (80225a0 <ipfrag_free_pbuf_custom+0x60>)
 802255c:	f001 fe98 	bl	8024290 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8022560:	68fa      	ldr	r2, [r7, #12]
 8022562:	687b      	ldr	r3, [r7, #4]
 8022564:	429a      	cmp	r2, r3
 8022566:	d006      	beq.n	8022576 <ipfrag_free_pbuf_custom+0x36>
 8022568:	4b0b      	ldr	r3, [pc, #44]	; (8022598 <ipfrag_free_pbuf_custom+0x58>)
 802256a:	f240 22cf 	movw	r2, #719	; 0x2cf
 802256e:	490d      	ldr	r1, [pc, #52]	; (80225a4 <ipfrag_free_pbuf_custom+0x64>)
 8022570:	480b      	ldr	r0, [pc, #44]	; (80225a0 <ipfrag_free_pbuf_custom+0x60>)
 8022572:	f001 fe8d 	bl	8024290 <iprintf>
  if (pcr->original != NULL) {
 8022576:	68fb      	ldr	r3, [r7, #12]
 8022578:	695b      	ldr	r3, [r3, #20]
 802257a:	2b00      	cmp	r3, #0
 802257c:	d004      	beq.n	8022588 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 802257e:	68fb      	ldr	r3, [r7, #12]
 8022580:	695b      	ldr	r3, [r3, #20]
 8022582:	4618      	mov	r0, r3
 8022584:	f7f6 fc4c 	bl	8018e20 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8022588:	68f8      	ldr	r0, [r7, #12]
 802258a:	f7ff ffbd 	bl	8022508 <ip_frag_free_pbuf_custom_ref>
}
 802258e:	bf00      	nop
 8022590:	3710      	adds	r7, #16
 8022592:	46bd      	mov	sp, r7
 8022594:	bd80      	pop	{r7, pc}
 8022596:	bf00      	nop
 8022598:	08028a44 	.word	0x08028a44
 802259c:	08028c08 	.word	0x08028c08
 80225a0:	08028a8c 	.word	0x08028a8c
 80225a4:	08028c14 	.word	0x08028c14

080225a8 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 80225a8:	b580      	push	{r7, lr}
 80225aa:	b094      	sub	sp, #80	; 0x50
 80225ac:	af02      	add	r7, sp, #8
 80225ae:	60f8      	str	r0, [r7, #12]
 80225b0:	60b9      	str	r1, [r7, #8]
 80225b2:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 80225b4:	2300      	movs	r3, #0
 80225b6:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 80225ba:	68bb      	ldr	r3, [r7, #8]
 80225bc:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80225be:	3b14      	subs	r3, #20
 80225c0:	2b00      	cmp	r3, #0
 80225c2:	da00      	bge.n	80225c6 <ip4_frag+0x1e>
 80225c4:	3307      	adds	r3, #7
 80225c6:	10db      	asrs	r3, r3, #3
 80225c8:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 80225ca:	2314      	movs	r3, #20
 80225cc:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 80225ce:	68fb      	ldr	r3, [r7, #12]
 80225d0:	685b      	ldr	r3, [r3, #4]
 80225d2:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 80225d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80225d6:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80225d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80225da:	781b      	ldrb	r3, [r3, #0]
 80225dc:	f003 030f 	and.w	r3, r3, #15
 80225e0:	b2db      	uxtb	r3, r3
 80225e2:	009b      	lsls	r3, r3, #2
 80225e4:	b2db      	uxtb	r3, r3
 80225e6:	2b14      	cmp	r3, #20
 80225e8:	d002      	beq.n	80225f0 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80225ea:	f06f 0305 	mvn.w	r3, #5
 80225ee:	e110      	b.n	8022812 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80225f0:	68fb      	ldr	r3, [r7, #12]
 80225f2:	895b      	ldrh	r3, [r3, #10]
 80225f4:	2b13      	cmp	r3, #19
 80225f6:	d809      	bhi.n	802260c <ip4_frag+0x64>
 80225f8:	4b88      	ldr	r3, [pc, #544]	; (802281c <ip4_frag+0x274>)
 80225fa:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80225fe:	4988      	ldr	r1, [pc, #544]	; (8022820 <ip4_frag+0x278>)
 8022600:	4888      	ldr	r0, [pc, #544]	; (8022824 <ip4_frag+0x27c>)
 8022602:	f001 fe45 	bl	8024290 <iprintf>
 8022606:	f06f 0305 	mvn.w	r3, #5
 802260a:	e102      	b.n	8022812 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 802260c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 802260e:	88db      	ldrh	r3, [r3, #6]
 8022610:	b29b      	uxth	r3, r3
 8022612:	4618      	mov	r0, r3
 8022614:	f7f5 f812 	bl	801763c <lwip_htons>
 8022618:	4603      	mov	r3, r0
 802261a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 802261c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 802261e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022622:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8022626:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8022628:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 802262c:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 802262e:	68fb      	ldr	r3, [r7, #12]
 8022630:	891b      	ldrh	r3, [r3, #8]
 8022632:	3b14      	subs	r3, #20
 8022634:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8022638:	e0e1      	b.n	80227fe <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 802263a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 802263c:	00db      	lsls	r3, r3, #3
 802263e:	b29b      	uxth	r3, r3
 8022640:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8022644:	4293      	cmp	r3, r2
 8022646:	bf28      	it	cs
 8022648:	4613      	movcs	r3, r2
 802264a:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 802264c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8022650:	2114      	movs	r1, #20
 8022652:	200e      	movs	r0, #14
 8022654:	f7f6 f900 	bl	8018858 <pbuf_alloc>
 8022658:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 802265a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802265c:	2b00      	cmp	r3, #0
 802265e:	f000 80d5 	beq.w	802280c <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8022662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022664:	895b      	ldrh	r3, [r3, #10]
 8022666:	2b13      	cmp	r3, #19
 8022668:	d806      	bhi.n	8022678 <ip4_frag+0xd0>
 802266a:	4b6c      	ldr	r3, [pc, #432]	; (802281c <ip4_frag+0x274>)
 802266c:	f44f 7249 	mov.w	r2, #804	; 0x324
 8022670:	496d      	ldr	r1, [pc, #436]	; (8022828 <ip4_frag+0x280>)
 8022672:	486c      	ldr	r0, [pc, #432]	; (8022824 <ip4_frag+0x27c>)
 8022674:	f001 fe0c 	bl	8024290 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8022678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 802267a:	685b      	ldr	r3, [r3, #4]
 802267c:	2214      	movs	r2, #20
 802267e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8022680:	4618      	mov	r0, r3
 8022682:	f001 fcf5 	bl	8024070 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8022686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022688:	685b      	ldr	r3, [r3, #4]
 802268a:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 802268c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 802268e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8022692:	e064      	b.n	802275e <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8022694:	68fb      	ldr	r3, [r7, #12]
 8022696:	895a      	ldrh	r2, [r3, #10]
 8022698:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 802269a:	1ad3      	subs	r3, r2, r3
 802269c:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 802269e:	68fb      	ldr	r3, [r7, #12]
 80226a0:	895b      	ldrh	r3, [r3, #10]
 80226a2:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 80226a4:	429a      	cmp	r2, r3
 80226a6:	d906      	bls.n	80226b6 <ip4_frag+0x10e>
 80226a8:	4b5c      	ldr	r3, [pc, #368]	; (802281c <ip4_frag+0x274>)
 80226aa:	f240 322d 	movw	r2, #813	; 0x32d
 80226ae:	495f      	ldr	r1, [pc, #380]	; (802282c <ip4_frag+0x284>)
 80226b0:	485c      	ldr	r0, [pc, #368]	; (8022824 <ip4_frag+0x27c>)
 80226b2:	f001 fded 	bl	8024290 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 80226b6:	8bfa      	ldrh	r2, [r7, #30]
 80226b8:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80226bc:	4293      	cmp	r3, r2
 80226be:	bf28      	it	cs
 80226c0:	4613      	movcs	r3, r2
 80226c2:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 80226c6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80226ca:	2b00      	cmp	r3, #0
 80226cc:	d105      	bne.n	80226da <ip4_frag+0x132>
        poff = 0;
 80226ce:	2300      	movs	r3, #0
 80226d0:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 80226d2:	68fb      	ldr	r3, [r7, #12]
 80226d4:	681b      	ldr	r3, [r3, #0]
 80226d6:	60fb      	str	r3, [r7, #12]
        continue;
 80226d8:	e041      	b.n	802275e <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80226da:	f7ff ff0d 	bl	80224f8 <ip_frag_alloc_pbuf_custom_ref>
 80226de:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80226e0:	69bb      	ldr	r3, [r7, #24]
 80226e2:	2b00      	cmp	r3, #0
 80226e4:	d103      	bne.n	80226ee <ip4_frag+0x146>
        pbuf_free(rambuf);
 80226e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80226e8:	f7f6 fb9a 	bl	8018e20 <pbuf_free>
        goto memerr;
 80226ec:	e08f      	b.n	802280e <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80226ee:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80226f0:	68fb      	ldr	r3, [r7, #12]
 80226f2:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80226f4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80226f6:	4413      	add	r3, r2
 80226f8:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80226fc:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8022700:	9201      	str	r2, [sp, #4]
 8022702:	9300      	str	r3, [sp, #0]
 8022704:	4603      	mov	r3, r0
 8022706:	2241      	movs	r2, #65	; 0x41
 8022708:	2000      	movs	r0, #0
 802270a:	f7f6 f9cf 	bl	8018aac <pbuf_alloced_custom>
 802270e:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8022710:	697b      	ldr	r3, [r7, #20]
 8022712:	2b00      	cmp	r3, #0
 8022714:	d106      	bne.n	8022724 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8022716:	69b8      	ldr	r0, [r7, #24]
 8022718:	f7ff fef6 	bl	8022508 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 802271c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802271e:	f7f6 fb7f 	bl	8018e20 <pbuf_free>
        goto memerr;
 8022722:	e074      	b.n	802280e <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8022724:	68f8      	ldr	r0, [r7, #12]
 8022726:	f7f6 fc21 	bl	8018f6c <pbuf_ref>
      pcr->original = p;
 802272a:	69bb      	ldr	r3, [r7, #24]
 802272c:	68fa      	ldr	r2, [r7, #12]
 802272e:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8022730:	69bb      	ldr	r3, [r7, #24]
 8022732:	4a3f      	ldr	r2, [pc, #252]	; (8022830 <ip4_frag+0x288>)
 8022734:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8022736:	6979      	ldr	r1, [r7, #20]
 8022738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 802273a:	f7f6 fc3f 	bl	8018fbc <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 802273e:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8022742:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8022746:	1ad3      	subs	r3, r2, r3
 8022748:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 802274c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022750:	2b00      	cmp	r3, #0
 8022752:	d004      	beq.n	802275e <ip4_frag+0x1b6>
        poff = 0;
 8022754:	2300      	movs	r3, #0
 8022756:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8022758:	68fb      	ldr	r3, [r7, #12]
 802275a:	681b      	ldr	r3, [r3, #0]
 802275c:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 802275e:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8022762:	2b00      	cmp	r3, #0
 8022764:	d196      	bne.n	8022694 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8022766:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8022768:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 802276c:	4413      	add	r3, r2
 802276e:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8022770:	68bb      	ldr	r3, [r7, #8]
 8022772:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8022774:	f1a3 0213 	sub.w	r2, r3, #19
 8022778:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 802277c:	429a      	cmp	r2, r3
 802277e:	bfcc      	ite	gt
 8022780:	2301      	movgt	r3, #1
 8022782:	2300      	movle	r3, #0
 8022784:	b2db      	uxtb	r3, r3
 8022786:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8022788:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 802278c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8022790:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8022792:	6a3b      	ldr	r3, [r7, #32]
 8022794:	2b00      	cmp	r3, #0
 8022796:	d002      	beq.n	802279e <ip4_frag+0x1f6>
 8022798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 802279a:	2b00      	cmp	r3, #0
 802279c:	d003      	beq.n	80227a6 <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 802279e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80227a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80227a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 80227a6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80227a8:	4618      	mov	r0, r3
 80227aa:	f7f4 ff47 	bl	801763c <lwip_htons>
 80227ae:	4603      	mov	r3, r0
 80227b0:	461a      	mov	r2, r3
 80227b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227b4:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 80227b6:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80227b8:	3314      	adds	r3, #20
 80227ba:	b29b      	uxth	r3, r3
 80227bc:	4618      	mov	r0, r3
 80227be:	f7f4 ff3d 	bl	801763c <lwip_htons>
 80227c2:	4603      	mov	r3, r0
 80227c4:	461a      	mov	r2, r3
 80227c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227c8:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 80227ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80227cc:	2200      	movs	r2, #0
 80227ce:	729a      	strb	r2, [r3, #10]
 80227d0:	2200      	movs	r2, #0
 80227d2:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 80227d4:	68bb      	ldr	r3, [r7, #8]
 80227d6:	695b      	ldr	r3, [r3, #20]
 80227d8:	687a      	ldr	r2, [r7, #4]
 80227da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80227dc:	68b8      	ldr	r0, [r7, #8]
 80227de:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80227e0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80227e2:	f7f6 fb1d 	bl	8018e20 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80227e6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80227ea:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80227ec:	1ad3      	subs	r3, r2, r3
 80227ee:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80227f2:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80227f6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80227f8:	4413      	add	r3, r2
 80227fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80227fe:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8022802:	2b00      	cmp	r3, #0
 8022804:	f47f af19 	bne.w	802263a <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8022808:	2300      	movs	r3, #0
 802280a:	e002      	b.n	8022812 <ip4_frag+0x26a>
      goto memerr;
 802280c:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 802280e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8022812:	4618      	mov	r0, r3
 8022814:	3748      	adds	r7, #72	; 0x48
 8022816:	46bd      	mov	sp, r7
 8022818:	bd80      	pop	{r7, pc}
 802281a:	bf00      	nop
 802281c:	08028a44 	.word	0x08028a44
 8022820:	08028c20 	.word	0x08028c20
 8022824:	08028a8c 	.word	0x08028a8c
 8022828:	08028c3c 	.word	0x08028c3c
 802282c:	08028c5c 	.word	0x08028c5c
 8022830:	08022541 	.word	0x08022541

08022834 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8022834:	b580      	push	{r7, lr}
 8022836:	b086      	sub	sp, #24
 8022838:	af00      	add	r7, sp, #0
 802283a:	6078      	str	r0, [r7, #4]
 802283c:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 802283e:	230e      	movs	r3, #14
 8022840:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8022842:	687b      	ldr	r3, [r7, #4]
 8022844:	895b      	ldrh	r3, [r3, #10]
 8022846:	2b0e      	cmp	r3, #14
 8022848:	d96e      	bls.n	8022928 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 802284a:	687b      	ldr	r3, [r7, #4]
 802284c:	7bdb      	ldrb	r3, [r3, #15]
 802284e:	2b00      	cmp	r3, #0
 8022850:	d106      	bne.n	8022860 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8022852:	683b      	ldr	r3, [r7, #0]
 8022854:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8022858:	3301      	adds	r3, #1
 802285a:	b2da      	uxtb	r2, r3
 802285c:	687b      	ldr	r3, [r7, #4]
 802285e:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8022860:	687b      	ldr	r3, [r7, #4]
 8022862:	685b      	ldr	r3, [r3, #4]
 8022864:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8022866:	693b      	ldr	r3, [r7, #16]
 8022868:	7b1a      	ldrb	r2, [r3, #12]
 802286a:	7b5b      	ldrb	r3, [r3, #13]
 802286c:	021b      	lsls	r3, r3, #8
 802286e:	4313      	orrs	r3, r2
 8022870:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8022872:	693b      	ldr	r3, [r7, #16]
 8022874:	781b      	ldrb	r3, [r3, #0]
 8022876:	f003 0301 	and.w	r3, r3, #1
 802287a:	2b00      	cmp	r3, #0
 802287c:	d023      	beq.n	80228c6 <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 802287e:	693b      	ldr	r3, [r7, #16]
 8022880:	781b      	ldrb	r3, [r3, #0]
 8022882:	2b01      	cmp	r3, #1
 8022884:	d10f      	bne.n	80228a6 <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022886:	693b      	ldr	r3, [r7, #16]
 8022888:	785b      	ldrb	r3, [r3, #1]
 802288a:	2b00      	cmp	r3, #0
 802288c:	d11b      	bne.n	80228c6 <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 802288e:	693b      	ldr	r3, [r7, #16]
 8022890:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8022892:	2b5e      	cmp	r3, #94	; 0x5e
 8022894:	d117      	bne.n	80228c6 <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8022896:	687b      	ldr	r3, [r7, #4]
 8022898:	7b5b      	ldrb	r3, [r3, #13]
 802289a:	f043 0310 	orr.w	r3, r3, #16
 802289e:	b2da      	uxtb	r2, r3
 80228a0:	687b      	ldr	r3, [r7, #4]
 80228a2:	735a      	strb	r2, [r3, #13]
 80228a4:	e00f      	b.n	80228c6 <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 80228a6:	693b      	ldr	r3, [r7, #16]
 80228a8:	2206      	movs	r2, #6
 80228aa:	4928      	ldr	r1, [pc, #160]	; (802294c <ethernet_input+0x118>)
 80228ac:	4618      	mov	r0, r3
 80228ae:	f001 fbcf 	bl	8024050 <memcmp>
 80228b2:	4603      	mov	r3, r0
 80228b4:	2b00      	cmp	r3, #0
 80228b6:	d106      	bne.n	80228c6 <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 80228b8:	687b      	ldr	r3, [r7, #4]
 80228ba:	7b5b      	ldrb	r3, [r3, #13]
 80228bc:	f043 0308 	orr.w	r3, r3, #8
 80228c0:	b2da      	uxtb	r2, r3
 80228c2:	687b      	ldr	r3, [r7, #4]
 80228c4:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 80228c6:	89fb      	ldrh	r3, [r7, #14]
 80228c8:	2b08      	cmp	r3, #8
 80228ca:	d003      	beq.n	80228d4 <ethernet_input+0xa0>
 80228cc:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 80228d0:	d014      	beq.n	80228fc <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 80228d2:	e032      	b.n	802293a <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80228d4:	683b      	ldr	r3, [r7, #0]
 80228d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80228da:	f003 0308 	and.w	r3, r3, #8
 80228de:	2b00      	cmp	r3, #0
 80228e0:	d024      	beq.n	802292c <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80228e2:	8afb      	ldrh	r3, [r7, #22]
 80228e4:	4619      	mov	r1, r3
 80228e6:	6878      	ldr	r0, [r7, #4]
 80228e8:	f7f6 fa14 	bl	8018d14 <pbuf_remove_header>
 80228ec:	4603      	mov	r3, r0
 80228ee:	2b00      	cmp	r3, #0
 80228f0:	d11e      	bne.n	8022930 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80228f2:	6839      	ldr	r1, [r7, #0]
 80228f4:	6878      	ldr	r0, [r7, #4]
 80228f6:	f7fe ff21 	bl	802173c <ip4_input>
      break;
 80228fa:	e013      	b.n	8022924 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80228fc:	683b      	ldr	r3, [r7, #0]
 80228fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8022902:	f003 0308 	and.w	r3, r3, #8
 8022906:	2b00      	cmp	r3, #0
 8022908:	d014      	beq.n	8022934 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 802290a:	8afb      	ldrh	r3, [r7, #22]
 802290c:	4619      	mov	r1, r3
 802290e:	6878      	ldr	r0, [r7, #4]
 8022910:	f7f6 fa00 	bl	8018d14 <pbuf_remove_header>
 8022914:	4603      	mov	r3, r0
 8022916:	2b00      	cmp	r3, #0
 8022918:	d10e      	bne.n	8022938 <ethernet_input+0x104>
        etharp_input(p, netif);
 802291a:	6839      	ldr	r1, [r7, #0]
 802291c:	6878      	ldr	r0, [r7, #4]
 802291e:	f7fe f8c1 	bl	8020aa4 <etharp_input>
      break;
 8022922:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8022924:	2300      	movs	r3, #0
 8022926:	e00c      	b.n	8022942 <ethernet_input+0x10e>
    goto free_and_return;
 8022928:	bf00      	nop
 802292a:	e006      	b.n	802293a <ethernet_input+0x106>
        goto free_and_return;
 802292c:	bf00      	nop
 802292e:	e004      	b.n	802293a <ethernet_input+0x106>
        goto free_and_return;
 8022930:	bf00      	nop
 8022932:	e002      	b.n	802293a <ethernet_input+0x106>
        goto free_and_return;
 8022934:	bf00      	nop
 8022936:	e000      	b.n	802293a <ethernet_input+0x106>
        goto free_and_return;
 8022938:	bf00      	nop

free_and_return:
  pbuf_free(p);
 802293a:	6878      	ldr	r0, [r7, #4]
 802293c:	f7f6 fa70 	bl	8018e20 <pbuf_free>
  return ERR_OK;
 8022940:	2300      	movs	r3, #0
}
 8022942:	4618      	mov	r0, r3
 8022944:	3718      	adds	r7, #24
 8022946:	46bd      	mov	sp, r7
 8022948:	bd80      	pop	{r7, pc}
 802294a:	bf00      	nop
 802294c:	08028e8c 	.word	0x08028e8c

08022950 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8022950:	b580      	push	{r7, lr}
 8022952:	b086      	sub	sp, #24
 8022954:	af00      	add	r7, sp, #0
 8022956:	60f8      	str	r0, [r7, #12]
 8022958:	60b9      	str	r1, [r7, #8]
 802295a:	607a      	str	r2, [r7, #4]
 802295c:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 802295e:	8c3b      	ldrh	r3, [r7, #32]
 8022960:	4618      	mov	r0, r3
 8022962:	f7f4 fe6b 	bl	801763c <lwip_htons>
 8022966:	4603      	mov	r3, r0
 8022968:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 802296a:	210e      	movs	r1, #14
 802296c:	68b8      	ldr	r0, [r7, #8]
 802296e:	f7f6 f9c1 	bl	8018cf4 <pbuf_add_header>
 8022972:	4603      	mov	r3, r0
 8022974:	2b00      	cmp	r3, #0
 8022976:	d125      	bne.n	80229c4 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8022978:	68bb      	ldr	r3, [r7, #8]
 802297a:	685b      	ldr	r3, [r3, #4]
 802297c:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 802297e:	693b      	ldr	r3, [r7, #16]
 8022980:	8afa      	ldrh	r2, [r7, #22]
 8022982:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8022984:	693b      	ldr	r3, [r7, #16]
 8022986:	2206      	movs	r2, #6
 8022988:	6839      	ldr	r1, [r7, #0]
 802298a:	4618      	mov	r0, r3
 802298c:	f001 fb70 	bl	8024070 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8022990:	693b      	ldr	r3, [r7, #16]
 8022992:	3306      	adds	r3, #6
 8022994:	2206      	movs	r2, #6
 8022996:	6879      	ldr	r1, [r7, #4]
 8022998:	4618      	mov	r0, r3
 802299a:	f001 fb69 	bl	8024070 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 802299e:	68fb      	ldr	r3, [r7, #12]
 80229a0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80229a4:	2b06      	cmp	r3, #6
 80229a6:	d006      	beq.n	80229b6 <ethernet_output+0x66>
 80229a8:	4b0a      	ldr	r3, [pc, #40]	; (80229d4 <ethernet_output+0x84>)
 80229aa:	f44f 7299 	mov.w	r2, #306	; 0x132
 80229ae:	490a      	ldr	r1, [pc, #40]	; (80229d8 <ethernet_output+0x88>)
 80229b0:	480a      	ldr	r0, [pc, #40]	; (80229dc <ethernet_output+0x8c>)
 80229b2:	f001 fc6d 	bl	8024290 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 80229b6:	68fb      	ldr	r3, [r7, #12]
 80229b8:	699b      	ldr	r3, [r3, #24]
 80229ba:	68b9      	ldr	r1, [r7, #8]
 80229bc:	68f8      	ldr	r0, [r7, #12]
 80229be:	4798      	blx	r3
 80229c0:	4603      	mov	r3, r0
 80229c2:	e002      	b.n	80229ca <ethernet_output+0x7a>
      goto pbuf_header_failed;
 80229c4:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 80229c6:	f06f 0301 	mvn.w	r3, #1
}
 80229ca:	4618      	mov	r0, r3
 80229cc:	3718      	adds	r7, #24
 80229ce:	46bd      	mov	sp, r7
 80229d0:	bd80      	pop	{r7, pc}
 80229d2:	bf00      	nop
 80229d4:	08028c6c 	.word	0x08028c6c
 80229d8:	08028ca4 	.word	0x08028ca4
 80229dc:	08028cd8 	.word	0x08028cd8

080229e0 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80229e0:	b580      	push	{r7, lr}
 80229e2:	b086      	sub	sp, #24
 80229e4:	af00      	add	r7, sp, #0
 80229e6:	6078      	str	r0, [r7, #4]
 80229e8:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 80229ea:	683b      	ldr	r3, [r7, #0]
 80229ec:	60bb      	str	r3, [r7, #8]
 80229ee:	2304      	movs	r3, #4
 80229f0:	60fb      	str	r3, [r7, #12]
 80229f2:	2300      	movs	r3, #0
 80229f4:	613b      	str	r3, [r7, #16]
 80229f6:	2300      	movs	r3, #0
 80229f8:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 80229fa:	f107 0308 	add.w	r3, r7, #8
 80229fe:	2100      	movs	r1, #0
 8022a00:	4618      	mov	r0, r3
 8022a02:	f7ef fb6e 	bl	80120e2 <osMessageCreate>
 8022a06:	4602      	mov	r2, r0
 8022a08:	687b      	ldr	r3, [r7, #4]
 8022a0a:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8022a0c:	687b      	ldr	r3, [r7, #4]
 8022a0e:	681b      	ldr	r3, [r3, #0]
 8022a10:	2b00      	cmp	r3, #0
 8022a12:	d102      	bne.n	8022a1a <sys_mbox_new+0x3a>
    return ERR_MEM;
 8022a14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022a18:	e000      	b.n	8022a1c <sys_mbox_new+0x3c>

  return ERR_OK;
 8022a1a:	2300      	movs	r3, #0
}
 8022a1c:	4618      	mov	r0, r3
 8022a1e:	3718      	adds	r7, #24
 8022a20:	46bd      	mov	sp, r7
 8022a22:	bd80      	pop	{r7, pc}

08022a24 <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 8022a24:	b580      	push	{r7, lr}
 8022a26:	b082      	sub	sp, #8
 8022a28:	af00      	add	r7, sp, #0
 8022a2a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
 8022a2c:	687b      	ldr	r3, [r7, #4]
 8022a2e:	681b      	ldr	r3, [r3, #0]
 8022a30:	4618      	mov	r0, r3
 8022a32:	f7ef fc33 	bl	801229c <osMessageWaiting>
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
 8022a36:	687b      	ldr	r3, [r7, #4]
 8022a38:	681b      	ldr	r3, [r3, #0]
 8022a3a:	4618      	mov	r0, r3
 8022a3c:	f7ef fc44 	bl	80122c8 <osMessageDelete>
  osMessageQueueDelete(*mbox);
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 8022a40:	bf00      	nop
 8022a42:	3708      	adds	r7, #8
 8022a44:	46bd      	mov	sp, r7
 8022a46:	bd80      	pop	{r7, pc}

08022a48 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8022a48:	b580      	push	{r7, lr}
 8022a4a:	b084      	sub	sp, #16
 8022a4c:	af00      	add	r7, sp, #0
 8022a4e:	6078      	str	r0, [r7, #4]
 8022a50:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8022a52:	687b      	ldr	r3, [r7, #4]
 8022a54:	681b      	ldr	r3, [r3, #0]
 8022a56:	6839      	ldr	r1, [r7, #0]
 8022a58:	2200      	movs	r2, #0
 8022a5a:	4618      	mov	r0, r3
 8022a5c:	f7ef fb6a 	bl	8012134 <osMessagePut>
 8022a60:	4603      	mov	r3, r0
 8022a62:	2b00      	cmp	r3, #0
 8022a64:	d102      	bne.n	8022a6c <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8022a66:	2300      	movs	r3, #0
 8022a68:	73fb      	strb	r3, [r7, #15]
 8022a6a:	e001      	b.n	8022a70 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8022a6c:	23ff      	movs	r3, #255	; 0xff
 8022a6e:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8022a70:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8022a74:	4618      	mov	r0, r3
 8022a76:	3710      	adds	r7, #16
 8022a78:	46bd      	mov	sp, r7
 8022a7a:	bd80      	pop	{r7, pc}

08022a7c <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8022a7c:	b580      	push	{r7, lr}
 8022a7e:	b08c      	sub	sp, #48	; 0x30
 8022a80:	af00      	add	r7, sp, #0
 8022a82:	61f8      	str	r0, [r7, #28]
 8022a84:	61b9      	str	r1, [r7, #24]
 8022a86:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8022a88:	f7ef f956 	bl	8011d38 <osKernelSysTick>
 8022a8c:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022a8e:	697b      	ldr	r3, [r7, #20]
 8022a90:	2b00      	cmp	r3, #0
 8022a92:	d017      	beq.n	8022ac4 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8022a94:	69fb      	ldr	r3, [r7, #28]
 8022a96:	6819      	ldr	r1, [r3, #0]
 8022a98:	f107 0320 	add.w	r3, r7, #32
 8022a9c:	697a      	ldr	r2, [r7, #20]
 8022a9e:	4618      	mov	r0, r3
 8022aa0:	f7ef fb88 	bl	80121b4 <osMessageGet>

    if(event.status == osEventMessage)
 8022aa4:	6a3b      	ldr	r3, [r7, #32]
 8022aa6:	2b10      	cmp	r3, #16
 8022aa8:	d109      	bne.n	8022abe <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 8022aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022aac:	461a      	mov	r2, r3
 8022aae:	69bb      	ldr	r3, [r7, #24]
 8022ab0:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8022ab2:	f7ef f941 	bl	8011d38 <osKernelSysTick>
 8022ab6:	4602      	mov	r2, r0
 8022ab8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022aba:	1ad3      	subs	r3, r2, r3
 8022abc:	e019      	b.n	8022af2 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022abe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022ac2:	e016      	b.n	8022af2 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8022ac4:	69fb      	ldr	r3, [r7, #28]
 8022ac6:	6819      	ldr	r1, [r3, #0]
 8022ac8:	463b      	mov	r3, r7
 8022aca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8022ace:	4618      	mov	r0, r3
 8022ad0:	f7ef fb70 	bl	80121b4 <osMessageGet>
 8022ad4:	f107 0320 	add.w	r3, r7, #32
 8022ad8:	463a      	mov	r2, r7
 8022ada:	ca07      	ldmia	r2, {r0, r1, r2}
 8022adc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8022ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8022ae2:	461a      	mov	r2, r3
 8022ae4:	69bb      	ldr	r3, [r7, #24]
 8022ae6:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8022ae8:	f7ef f926 	bl	8011d38 <osKernelSysTick>
 8022aec:	4602      	mov	r2, r0
 8022aee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8022af0:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022af2:	4618      	mov	r0, r3
 8022af4:	3730      	adds	r7, #48	; 0x30
 8022af6:	46bd      	mov	sp, r7
 8022af8:	bd80      	pop	{r7, pc}

08022afa <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8022afa:	b580      	push	{r7, lr}
 8022afc:	b086      	sub	sp, #24
 8022afe:	af00      	add	r7, sp, #0
 8022b00:	6078      	str	r0, [r7, #4]
 8022b02:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osEvent event;

  event = osMessageGet (*mbox, 0);
 8022b04:	687b      	ldr	r3, [r7, #4]
 8022b06:	6819      	ldr	r1, [r3, #0]
 8022b08:	f107 030c 	add.w	r3, r7, #12
 8022b0c:	2200      	movs	r2, #0
 8022b0e:	4618      	mov	r0, r3
 8022b10:	f7ef fb50 	bl	80121b4 <osMessageGet>

  if(event.status == osEventMessage)
 8022b14:	68fb      	ldr	r3, [r7, #12]
 8022b16:	2b10      	cmp	r3, #16
 8022b18:	d105      	bne.n	8022b26 <sys_arch_mbox_tryfetch+0x2c>
  {
    *msg = (void *)event.value.v;
 8022b1a:	693b      	ldr	r3, [r7, #16]
 8022b1c:	461a      	mov	r2, r3
 8022b1e:	683b      	ldr	r3, [r7, #0]
 8022b20:	601a      	str	r2, [r3, #0]
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
  {
#endif
    return ERR_OK;
 8022b22:	2300      	movs	r3, #0
 8022b24:	e001      	b.n	8022b2a <sys_arch_mbox_tryfetch+0x30>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 8022b26:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
  }
}
 8022b2a:	4618      	mov	r0, r3
 8022b2c:	3718      	adds	r7, #24
 8022b2e:	46bd      	mov	sp, r7
 8022b30:	bd80      	pop	{r7, pc}

08022b32 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 8022b32:	b480      	push	{r7}
 8022b34:	b083      	sub	sp, #12
 8022b36:	af00      	add	r7, sp, #0
 8022b38:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8022b3a:	687b      	ldr	r3, [r7, #4]
 8022b3c:	681b      	ldr	r3, [r3, #0]
 8022b3e:	2b00      	cmp	r3, #0
 8022b40:	d101      	bne.n	8022b46 <sys_mbox_valid+0x14>
    return 0;
 8022b42:	2300      	movs	r3, #0
 8022b44:	e000      	b.n	8022b48 <sys_mbox_valid+0x16>
  else
    return 1;
 8022b46:	2301      	movs	r3, #1
}
 8022b48:	4618      	mov	r0, r3
 8022b4a:	370c      	adds	r7, #12
 8022b4c:	46bd      	mov	sp, r7
 8022b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b52:	4770      	bx	lr

08022b54 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 8022b54:	b480      	push	{r7}
 8022b56:	b083      	sub	sp, #12
 8022b58:	af00      	add	r7, sp, #0
 8022b5a:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 8022b5c:	687b      	ldr	r3, [r7, #4]
 8022b5e:	2200      	movs	r2, #0
 8022b60:	601a      	str	r2, [r3, #0]
}
 8022b62:	bf00      	nop
 8022b64:	370c      	adds	r7, #12
 8022b66:	46bd      	mov	sp, r7
 8022b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022b6c:	4770      	bx	lr

08022b6e <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8022b6e:	b580      	push	{r7, lr}
 8022b70:	b084      	sub	sp, #16
 8022b72:	af00      	add	r7, sp, #0
 8022b74:	6078      	str	r0, [r7, #4]
 8022b76:	460b      	mov	r3, r1
 8022b78:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
 8022b7a:	2300      	movs	r3, #0
 8022b7c:	60bb      	str	r3, [r7, #8]
 8022b7e:	2300      	movs	r3, #0
 8022b80:	60fb      	str	r3, [r7, #12]
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
 8022b82:	f107 0308 	add.w	r3, r7, #8
 8022b86:	2101      	movs	r1, #1
 8022b88:	4618      	mov	r0, r3
 8022b8a:	f7ef f9e1 	bl	8011f50 <osSemaphoreCreate>
 8022b8e:	4602      	mov	r2, r0
 8022b90:	687b      	ldr	r3, [r7, #4]
 8022b92:	601a      	str	r2, [r3, #0]
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
#endif

  if(*sem == NULL)
 8022b94:	687b      	ldr	r3, [r7, #4]
 8022b96:	681b      	ldr	r3, [r3, #0]
 8022b98:	2b00      	cmp	r3, #0
 8022b9a:	d102      	bne.n	8022ba2 <sys_sem_new+0x34>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022b9c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022ba0:	e009      	b.n	8022bb6 <sys_sem_new+0x48>
  }

  if(count == 0)	// Means it can't be taken
 8022ba2:	78fb      	ldrb	r3, [r7, #3]
 8022ba4:	2b00      	cmp	r3, #0
 8022ba6:	d105      	bne.n	8022bb4 <sys_sem_new+0x46>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
 8022ba8:	687b      	ldr	r3, [r7, #4]
 8022baa:	681b      	ldr	r3, [r3, #0]
 8022bac:	2100      	movs	r1, #0
 8022bae:	4618      	mov	r0, r3
 8022bb0:	f7ef fa00 	bl	8011fb4 <osSemaphoreWait>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8022bb4:	2300      	movs	r3, #0
}
 8022bb6:	4618      	mov	r0, r3
 8022bb8:	3710      	adds	r7, #16
 8022bba:	46bd      	mov	sp, r7
 8022bbc:	bd80      	pop	{r7, pc}

08022bbe <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8022bbe:	b580      	push	{r7, lr}
 8022bc0:	b084      	sub	sp, #16
 8022bc2:	af00      	add	r7, sp, #0
 8022bc4:	6078      	str	r0, [r7, #4]
 8022bc6:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
 8022bc8:	f7ef f8b6 	bl	8011d38 <osKernelSysTick>
 8022bcc:	60f8      	str	r0, [r7, #12]
#else
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8022bce:	683b      	ldr	r3, [r7, #0]
 8022bd0:	2b00      	cmp	r3, #0
 8022bd2:	d011      	beq.n	8022bf8 <sys_arch_sem_wait+0x3a>
  {
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
 8022bd4:	687b      	ldr	r3, [r7, #4]
 8022bd6:	681b      	ldr	r3, [r3, #0]
 8022bd8:	6839      	ldr	r1, [r7, #0]
 8022bda:	4618      	mov	r0, r3
 8022bdc:	f7ef f9ea 	bl	8011fb4 <osSemaphoreWait>
 8022be0:	4603      	mov	r3, r0
 8022be2:	2b00      	cmp	r3, #0
 8022be4:	d105      	bne.n	8022bf2 <sys_arch_sem_wait+0x34>
    {
      return (osKernelSysTick() - starttime);
 8022be6:	f7ef f8a7 	bl	8011d38 <osKernelSysTick>
 8022bea:	4602      	mov	r2, r0
 8022bec:	68fb      	ldr	r3, [r7, #12]
 8022bee:	1ad3      	subs	r3, r2, r3
 8022bf0:	e012      	b.n	8022c18 <sys_arch_sem_wait+0x5a>
        return (osKernelGetTickCount() - starttime);
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8022bf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022bf6:	e00f      	b.n	8022c18 <sys_arch_sem_wait+0x5a>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
 8022bf8:	bf00      	nop
 8022bfa:	687b      	ldr	r3, [r7, #4]
 8022bfc:	681b      	ldr	r3, [r3, #0]
 8022bfe:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022c02:	4618      	mov	r0, r3
 8022c04:	f7ef f9d6 	bl	8011fb4 <osSemaphoreWait>
 8022c08:	4603      	mov	r3, r0
 8022c0a:	2b00      	cmp	r3, #0
 8022c0c:	d1f5      	bne.n	8022bfa <sys_arch_sem_wait+0x3c>
    return (osKernelSysTick() - starttime);
 8022c0e:	f7ef f893 	bl	8011d38 <osKernelSysTick>
 8022c12:	4602      	mov	r2, r0
 8022c14:	68fb      	ldr	r3, [r7, #12]
 8022c16:	1ad3      	subs	r3, r2, r3
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8022c18:	4618      	mov	r0, r3
 8022c1a:	3710      	adds	r7, #16
 8022c1c:	46bd      	mov	sp, r7
 8022c1e:	bd80      	pop	{r7, pc}

08022c20 <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8022c20:	b580      	push	{r7, lr}
 8022c22:	b082      	sub	sp, #8
 8022c24:	af00      	add	r7, sp, #0
 8022c26:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8022c28:	687b      	ldr	r3, [r7, #4]
 8022c2a:	681b      	ldr	r3, [r3, #0]
 8022c2c:	4618      	mov	r0, r3
 8022c2e:	f7ef fa0f 	bl	8012050 <osSemaphoreRelease>
}
 8022c32:	bf00      	nop
 8022c34:	3708      	adds	r7, #8
 8022c36:	46bd      	mov	sp, r7
 8022c38:	bd80      	pop	{r7, pc}

08022c3a <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8022c3a:	b580      	push	{r7, lr}
 8022c3c:	b082      	sub	sp, #8
 8022c3e:	af00      	add	r7, sp, #0
 8022c40:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8022c42:	687b      	ldr	r3, [r7, #4]
 8022c44:	681b      	ldr	r3, [r3, #0]
 8022c46:	4618      	mov	r0, r3
 8022c48:	f7ef fa38 	bl	80120bc <osSemaphoreDelete>
}
 8022c4c:	bf00      	nop
 8022c4e:	3708      	adds	r7, #8
 8022c50:	46bd      	mov	sp, r7
 8022c52:	bd80      	pop	{r7, pc}

08022c54 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8022c54:	b480      	push	{r7}
 8022c56:	b083      	sub	sp, #12
 8022c58:	af00      	add	r7, sp, #0
 8022c5a:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8022c5c:	687b      	ldr	r3, [r7, #4]
 8022c5e:	681b      	ldr	r3, [r3, #0]
 8022c60:	2b00      	cmp	r3, #0
 8022c62:	d101      	bne.n	8022c68 <sys_sem_valid+0x14>
    return 0;
 8022c64:	2300      	movs	r3, #0
 8022c66:	e000      	b.n	8022c6a <sys_sem_valid+0x16>
  else
    return 1;
 8022c68:	2301      	movs	r3, #1
}
 8022c6a:	4618      	mov	r0, r3
 8022c6c:	370c      	adds	r7, #12
 8022c6e:	46bd      	mov	sp, r7
 8022c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c74:	4770      	bx	lr

08022c76 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8022c76:	b480      	push	{r7}
 8022c78:	b083      	sub	sp, #12
 8022c7a:	af00      	add	r7, sp, #0
 8022c7c:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8022c7e:	687b      	ldr	r3, [r7, #4]
 8022c80:	2200      	movs	r2, #0
 8022c82:	601a      	str	r2, [r3, #0]
}
 8022c84:	bf00      	nop
 8022c86:	370c      	adds	r7, #12
 8022c88:	46bd      	mov	sp, r7
 8022c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022c8e:	4770      	bx	lr

08022c90 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8022c90:	b580      	push	{r7, lr}
 8022c92:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8022c94:	4803      	ldr	r0, [pc, #12]	; (8022ca4 <sys_init+0x14>)
 8022c96:	f7ef f8bf 	bl	8011e18 <osMutexCreate>
 8022c9a:	4603      	mov	r3, r0
 8022c9c:	4a02      	ldr	r2, [pc, #8]	; (8022ca8 <sys_init+0x18>)
 8022c9e:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 8022ca0:	bf00      	nop
 8022ca2:	bd80      	pop	{r7, pc}
 8022ca4:	08028e9c 	.word	0x08028e9c
 8022ca8:	2000c118 	.word	0x2000c118

08022cac <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8022cac:	b580      	push	{r7, lr}
 8022cae:	b084      	sub	sp, #16
 8022cb0:	af00      	add	r7, sp, #0
 8022cb2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 8022cb4:	2300      	movs	r3, #0
 8022cb6:	60bb      	str	r3, [r7, #8]
 8022cb8:	2300      	movs	r3, #0
 8022cba:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 8022cbc:	f107 0308 	add.w	r3, r7, #8
 8022cc0:	4618      	mov	r0, r3
 8022cc2:	f7ef f8a9 	bl	8011e18 <osMutexCreate>
 8022cc6:	4602      	mov	r2, r0
 8022cc8:	687b      	ldr	r3, [r7, #4]
 8022cca:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 8022ccc:	687b      	ldr	r3, [r7, #4]
 8022cce:	681b      	ldr	r3, [r3, #0]
 8022cd0:	2b00      	cmp	r3, #0
 8022cd2:	d102      	bne.n	8022cda <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8022cd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8022cd8:	e000      	b.n	8022cdc <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8022cda:	2300      	movs	r3, #0
}
 8022cdc:	4618      	mov	r0, r3
 8022cde:	3710      	adds	r7, #16
 8022ce0:	46bd      	mov	sp, r7
 8022ce2:	bd80      	pop	{r7, pc}

08022ce4 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8022ce4:	b580      	push	{r7, lr}
 8022ce6:	b082      	sub	sp, #8
 8022ce8:	af00      	add	r7, sp, #0
 8022cea:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 8022cec:	687b      	ldr	r3, [r7, #4]
 8022cee:	681b      	ldr	r3, [r3, #0]
 8022cf0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022cf4:	4618      	mov	r0, r3
 8022cf6:	f7ef f8a7 	bl	8011e48 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 8022cfa:	bf00      	nop
 8022cfc:	3708      	adds	r7, #8
 8022cfe:	46bd      	mov	sp, r7
 8022d00:	bd80      	pop	{r7, pc}

08022d02 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8022d02:	b580      	push	{r7, lr}
 8022d04:	b082      	sub	sp, #8
 8022d06:	af00      	add	r7, sp, #0
 8022d08:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8022d0a:	687b      	ldr	r3, [r7, #4]
 8022d0c:	681b      	ldr	r3, [r3, #0]
 8022d0e:	4618      	mov	r0, r3
 8022d10:	f7ef f8e8 	bl	8011ee4 <osMutexRelease>
}
 8022d14:	bf00      	nop
 8022d16:	3708      	adds	r7, #8
 8022d18:	46bd      	mov	sp, r7
 8022d1a:	bd80      	pop	{r7, pc}

08022d1c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8022d1c:	b580      	push	{r7, lr}
 8022d1e:	b08c      	sub	sp, #48	; 0x30
 8022d20:	af00      	add	r7, sp, #0
 8022d22:	60f8      	str	r0, [r7, #12]
 8022d24:	60b9      	str	r1, [r7, #8]
 8022d26:	607a      	str	r2, [r7, #4]
 8022d28:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8022d2a:	f107 0314 	add.w	r3, r7, #20
 8022d2e:	2200      	movs	r2, #0
 8022d30:	601a      	str	r2, [r3, #0]
 8022d32:	605a      	str	r2, [r3, #4]
 8022d34:	609a      	str	r2, [r3, #8]
 8022d36:	60da      	str	r2, [r3, #12]
 8022d38:	611a      	str	r2, [r3, #16]
 8022d3a:	615a      	str	r2, [r3, #20]
 8022d3c:	619a      	str	r2, [r3, #24]
 8022d3e:	68fb      	ldr	r3, [r7, #12]
 8022d40:	617b      	str	r3, [r7, #20]
 8022d42:	68bb      	ldr	r3, [r7, #8]
 8022d44:	61bb      	str	r3, [r7, #24]
 8022d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8022d48:	b21b      	sxth	r3, r3
 8022d4a:	83bb      	strh	r3, [r7, #28]
 8022d4c:	683b      	ldr	r3, [r7, #0]
 8022d4e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 8022d50:	f107 0314 	add.w	r3, r7, #20
 8022d54:	6879      	ldr	r1, [r7, #4]
 8022d56:	4618      	mov	r0, r3
 8022d58:	f7ee fffe 	bl	8011d58 <osThreadCreate>
 8022d5c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 8022d5e:	4618      	mov	r0, r3
 8022d60:	3730      	adds	r7, #48	; 0x30
 8022d62:	46bd      	mov	sp, r7
 8022d64:	bd80      	pop	{r7, pc}
	...

08022d68 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8022d68:	b580      	push	{r7, lr}
 8022d6a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8022d6c:	4b04      	ldr	r3, [pc, #16]	; (8022d80 <sys_arch_protect+0x18>)
 8022d6e:	681b      	ldr	r3, [r3, #0]
 8022d70:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8022d74:	4618      	mov	r0, r3
 8022d76:	f7ef f867 	bl	8011e48 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8022d7a:	2301      	movs	r3, #1
}
 8022d7c:	4618      	mov	r0, r3
 8022d7e:	bd80      	pop	{r7, pc}
 8022d80:	2000c118 	.word	0x2000c118

08022d84 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8022d84:	b580      	push	{r7, lr}
 8022d86:	b082      	sub	sp, #8
 8022d88:	af00      	add	r7, sp, #0
 8022d8a:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8022d8c:	4b04      	ldr	r3, [pc, #16]	; (8022da0 <sys_arch_unprotect+0x1c>)
 8022d8e:	681b      	ldr	r3, [r3, #0]
 8022d90:	4618      	mov	r0, r3
 8022d92:	f7ef f8a7 	bl	8011ee4 <osMutexRelease>
}
 8022d96:	bf00      	nop
 8022d98:	3708      	adds	r7, #8
 8022d9a:	46bd      	mov	sp, r7
 8022d9c:	bd80      	pop	{r7, pc}
 8022d9e:	bf00      	nop
 8022da0:	2000c118 	.word	0x2000c118

08022da4 <_ZdlPvj>:
 8022da4:	f000 b8db 	b.w	8022f5e <_ZdlPv>

08022da8 <__cxa_guard_acquire>:
 8022da8:	6803      	ldr	r3, [r0, #0]
 8022daa:	07db      	lsls	r3, r3, #31
 8022dac:	d406      	bmi.n	8022dbc <__cxa_guard_acquire+0x14>
 8022dae:	7843      	ldrb	r3, [r0, #1]
 8022db0:	b103      	cbz	r3, 8022db4 <__cxa_guard_acquire+0xc>
 8022db2:	deff      	udf	#255	; 0xff
 8022db4:	2301      	movs	r3, #1
 8022db6:	7043      	strb	r3, [r0, #1]
 8022db8:	4618      	mov	r0, r3
 8022dba:	4770      	bx	lr
 8022dbc:	2000      	movs	r0, #0
 8022dbe:	4770      	bx	lr

08022dc0 <__cxa_guard_release>:
 8022dc0:	2301      	movs	r3, #1
 8022dc2:	6003      	str	r3, [r0, #0]
 8022dc4:	4770      	bx	lr

08022dc6 <_Znwj>:
 8022dc6:	2801      	cmp	r0, #1
 8022dc8:	bf38      	it	cc
 8022dca:	2001      	movcc	r0, #1
 8022dcc:	b510      	push	{r4, lr}
 8022dce:	4604      	mov	r4, r0
 8022dd0:	4620      	mov	r0, r4
 8022dd2:	f001 f92d 	bl	8024030 <malloc>
 8022dd6:	b930      	cbnz	r0, 8022de6 <_Znwj+0x20>
 8022dd8:	f000 f8d6 	bl	8022f88 <_ZSt15get_new_handlerv>
 8022ddc:	b908      	cbnz	r0, 8022de2 <_Znwj+0x1c>
 8022dde:	f000 fff5 	bl	8023dcc <abort>
 8022de2:	4780      	blx	r0
 8022de4:	e7f4      	b.n	8022dd0 <_Znwj+0xa>
 8022de6:	bd10      	pop	{r4, pc}

08022de8 <__cxa_pure_virtual>:
 8022de8:	b508      	push	{r3, lr}
 8022dea:	f000 f8c7 	bl	8022f7c <_ZSt9terminatev>

08022dee <_ZSt17__throw_bad_allocv>:
 8022dee:	b508      	push	{r3, lr}
 8022df0:	f000 ffec 	bl	8023dcc <abort>

08022df4 <_ZSt19__throw_logic_errorPKc>:
 8022df4:	b508      	push	{r3, lr}
 8022df6:	f000 ffe9 	bl	8023dcc <abort>

08022dfa <_ZSt20__throw_length_errorPKc>:
 8022dfa:	b508      	push	{r3, lr}
 8022dfc:	f000 ffe6 	bl	8023dcc <abort>

08022e00 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8022e00:	b40f      	push	{r0, r1, r2, r3}
 8022e02:	b580      	push	{r7, lr}
 8022e04:	b084      	sub	sp, #16
 8022e06:	af00      	add	r7, sp, #0
 8022e08:	f107 0418 	add.w	r4, r7, #24
 8022e0c:	f854 2b04 	ldr.w	r2, [r4], #4
 8022e10:	607a      	str	r2, [r7, #4]
 8022e12:	4610      	mov	r0, r2
 8022e14:	f7dd f9fc 	bl	8000210 <strlen>
 8022e18:	f200 2307 	addw	r3, r0, #519	; 0x207
 8022e1c:	f023 0307 	bic.w	r3, r3, #7
 8022e20:	ebad 0d03 	sub.w	sp, sp, r3
 8022e24:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8022e28:	687a      	ldr	r2, [r7, #4]
 8022e2a:	60fc      	str	r4, [r7, #12]
 8022e2c:	4623      	mov	r3, r4
 8022e2e:	4668      	mov	r0, sp
 8022e30:	f000 f854 	bl	8022edc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8022e34:	f000 ffca 	bl	8023dcc <abort>

08022e38 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8022e38:	b580      	push	{r7, lr}
 8022e3a:	b09c      	sub	sp, #112	; 0x70
 8022e3c:	4606      	mov	r6, r0
 8022e3e:	af00      	add	r7, sp, #0
 8022e40:	460c      	mov	r4, r1
 8022e42:	1ba4      	subs	r4, r4, r6
 8022e44:	490e      	ldr	r1, [pc, #56]	; (8022e80 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8022e46:	2269      	movs	r2, #105	; 0x69
 8022e48:	1d38      	adds	r0, r7, #4
 8022e4a:	f001 f911 	bl	8024070 <memcpy>
 8022e4e:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8022e52:	f023 0307 	bic.w	r3, r3, #7
 8022e56:	ebad 0d03 	sub.w	sp, sp, r3
 8022e5a:	466d      	mov	r5, sp
 8022e5c:	2268      	movs	r2, #104	; 0x68
 8022e5e:	1d39      	adds	r1, r7, #4
 8022e60:	4628      	mov	r0, r5
 8022e62:	f001 f905 	bl	8024070 <memcpy>
 8022e66:	4622      	mov	r2, r4
 8022e68:	4631      	mov	r1, r6
 8022e6a:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8022e6e:	442c      	add	r4, r5
 8022e70:	f001 f8fe 	bl	8024070 <memcpy>
 8022e74:	2300      	movs	r3, #0
 8022e76:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8022e7a:	4628      	mov	r0, r5
 8022e7c:	f7ff ffba 	bl	8022df4 <_ZSt19__throw_logic_errorPKc>
 8022e80:	08028ea4 	.word	0x08028ea4

08022e84 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8022e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022e88:	af00      	add	r7, sp, #0
 8022e8a:	b084      	sub	sp, #16
 8022e8c:	466d      	mov	r5, sp
 8022e8e:	f105 040c 	add.w	r4, r5, #12
 8022e92:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8022ed8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8022e96:	4623      	mov	r3, r4
 8022e98:	f04f 0c0a 	mov.w	ip, #10
 8022e9c:	fbb2 f6fc 	udiv	r6, r2, ip
 8022ea0:	fb0c 2e16 	mls	lr, ip, r6, r2
 8022ea4:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8022ea8:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8022eac:	4696      	mov	lr, r2
 8022eae:	f1be 0f09 	cmp.w	lr, #9
 8022eb2:	4632      	mov	r2, r6
 8022eb4:	d8f2      	bhi.n	8022e9c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8022eb6:	1ae4      	subs	r4, r4, r3
 8022eb8:	428c      	cmp	r4, r1
 8022eba:	d809      	bhi.n	8022ed0 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8022ebc:	f1c4 030c 	rsb	r3, r4, #12
 8022ec0:	4622      	mov	r2, r4
 8022ec2:	18e9      	adds	r1, r5, r3
 8022ec4:	f001 f8d4 	bl	8024070 <memcpy>
 8022ec8:	4620      	mov	r0, r4
 8022eca:	46bd      	mov	sp, r7
 8022ecc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8022ed0:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8022ed4:	e7f8      	b.n	8022ec8 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8022ed6:	bf00      	nop
 8022ed8:	08028f0d 	.word	0x08028f0d

08022edc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8022edc:	3901      	subs	r1, #1
 8022ede:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8022ee2:	4607      	mov	r7, r0
 8022ee4:	4615      	mov	r5, r2
 8022ee6:	eb00 0801 	add.w	r8, r0, r1
 8022eea:	4604      	mov	r4, r0
 8022eec:	782a      	ldrb	r2, [r5, #0]
 8022eee:	b392      	cbz	r2, 8022f56 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7a>
 8022ef0:	4544      	cmp	r4, r8
 8022ef2:	d22a      	bcs.n	8022f4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022ef4:	2a25      	cmp	r2, #37	; 0x25
 8022ef6:	d107      	bne.n	8022f08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022ef8:	786a      	ldrb	r2, [r5, #1]
 8022efa:	2a73      	cmp	r2, #115	; 0x73
 8022efc:	d009      	beq.n	8022f12 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8022efe:	2a7a      	cmp	r2, #122	; 0x7a
 8022f00:	d012      	beq.n	8022f28 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8022f02:	2a25      	cmp	r2, #37	; 0x25
 8022f04:	d100      	bne.n	8022f08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022f06:	3501      	adds	r5, #1
 8022f08:	f815 2b01 	ldrb.w	r2, [r5], #1
 8022f0c:	f804 2b01 	strb.w	r2, [r4], #1
 8022f10:	e7ec      	b.n	8022eec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022f12:	f853 2b04 	ldr.w	r2, [r3], #4
 8022f16:	3a01      	subs	r2, #1
 8022f18:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8022f1c:	b1c9      	cbz	r1, 8022f52 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8022f1e:	4544      	cmp	r4, r8
 8022f20:	d013      	beq.n	8022f4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022f22:	f804 1b01 	strb.w	r1, [r4], #1
 8022f26:	e7f7      	b.n	8022f18 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8022f28:	78aa      	ldrb	r2, [r5, #2]
 8022f2a:	2a75      	cmp	r2, #117	; 0x75
 8022f2c:	d1ec      	bne.n	8022f08 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8022f2e:	461e      	mov	r6, r3
 8022f30:	eba8 0104 	sub.w	r1, r8, r4
 8022f34:	f856 2b04 	ldr.w	r2, [r6], #4
 8022f38:	4620      	mov	r0, r4
 8022f3a:	f7ff ffa3 	bl	8022e84 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8022f3e:	2800      	cmp	r0, #0
 8022f40:	dd03      	ble.n	8022f4a <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8022f42:	4404      	add	r4, r0
 8022f44:	3503      	adds	r5, #3
 8022f46:	4633      	mov	r3, r6
 8022f48:	e7d0      	b.n	8022eec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022f4a:	4621      	mov	r1, r4
 8022f4c:	4638      	mov	r0, r7
 8022f4e:	f7ff ff73 	bl	8022e38 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8022f52:	3502      	adds	r5, #2
 8022f54:	e7ca      	b.n	8022eec <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8022f56:	7022      	strb	r2, [r4, #0]
 8022f58:	1be0      	subs	r0, r4, r7
 8022f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08022f5e <_ZdlPv>:
 8022f5e:	f001 b86f 	b.w	8024040 <free>

08022f62 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8022f62:	b508      	push	{r3, lr}
 8022f64:	4780      	blx	r0
 8022f66:	f000 ff31 	bl	8023dcc <abort>
	...

08022f6c <_ZSt13get_terminatev>:
 8022f6c:	4b02      	ldr	r3, [pc, #8]	; (8022f78 <_ZSt13get_terminatev+0xc>)
 8022f6e:	6818      	ldr	r0, [r3, #0]
 8022f70:	f3bf 8f5b 	dmb	ish
 8022f74:	4770      	bx	lr
 8022f76:	bf00      	nop
 8022f78:	20000034 	.word	0x20000034

08022f7c <_ZSt9terminatev>:
 8022f7c:	b508      	push	{r3, lr}
 8022f7e:	f7ff fff5 	bl	8022f6c <_ZSt13get_terminatev>
 8022f82:	f7ff ffee 	bl	8022f62 <_ZN10__cxxabiv111__terminateEPFvvE>
	...

08022f88 <_ZSt15get_new_handlerv>:
 8022f88:	4b02      	ldr	r3, [pc, #8]	; (8022f94 <_ZSt15get_new_handlerv+0xc>)
 8022f8a:	6818      	ldr	r0, [r3, #0]
 8022f8c:	f3bf 8f5b 	dmb	ish
 8022f90:	4770      	bx	lr
 8022f92:	bf00      	nop
 8022f94:	2000c11c 	.word	0x2000c11c

08022f98 <pow>:
 8022f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022f9a:	ed2d 8b02 	vpush	{d8}
 8022f9e:	eeb0 8a40 	vmov.f32	s16, s0
 8022fa2:	eef0 8a60 	vmov.f32	s17, s1
 8022fa6:	ec55 4b11 	vmov	r4, r5, d1
 8022faa:	f000 f865 	bl	8023078 <__ieee754_pow>
 8022fae:	4622      	mov	r2, r4
 8022fb0:	462b      	mov	r3, r5
 8022fb2:	4620      	mov	r0, r4
 8022fb4:	4629      	mov	r1, r5
 8022fb6:	ec57 6b10 	vmov	r6, r7, d0
 8022fba:	f7dd fdd7 	bl	8000b6c <__aeabi_dcmpun>
 8022fbe:	2800      	cmp	r0, #0
 8022fc0:	d13b      	bne.n	802303a <pow+0xa2>
 8022fc2:	ec51 0b18 	vmov	r0, r1, d8
 8022fc6:	2200      	movs	r2, #0
 8022fc8:	2300      	movs	r3, #0
 8022fca:	f7dd fd9d 	bl	8000b08 <__aeabi_dcmpeq>
 8022fce:	b1b8      	cbz	r0, 8023000 <pow+0x68>
 8022fd0:	2200      	movs	r2, #0
 8022fd2:	2300      	movs	r3, #0
 8022fd4:	4620      	mov	r0, r4
 8022fd6:	4629      	mov	r1, r5
 8022fd8:	f7dd fd96 	bl	8000b08 <__aeabi_dcmpeq>
 8022fdc:	2800      	cmp	r0, #0
 8022fde:	d146      	bne.n	802306e <pow+0xd6>
 8022fe0:	ec45 4b10 	vmov	d0, r4, r5
 8022fe4:	f000 fe61 	bl	8023caa <finite>
 8022fe8:	b338      	cbz	r0, 802303a <pow+0xa2>
 8022fea:	2200      	movs	r2, #0
 8022fec:	2300      	movs	r3, #0
 8022fee:	4620      	mov	r0, r4
 8022ff0:	4629      	mov	r1, r5
 8022ff2:	f7dd fd93 	bl	8000b1c <__aeabi_dcmplt>
 8022ff6:	b300      	cbz	r0, 802303a <pow+0xa2>
 8022ff8:	f000 fef6 	bl	8023de8 <__errno>
 8022ffc:	2322      	movs	r3, #34	; 0x22
 8022ffe:	e01b      	b.n	8023038 <pow+0xa0>
 8023000:	ec47 6b10 	vmov	d0, r6, r7
 8023004:	f000 fe51 	bl	8023caa <finite>
 8023008:	b9e0      	cbnz	r0, 8023044 <pow+0xac>
 802300a:	eeb0 0a48 	vmov.f32	s0, s16
 802300e:	eef0 0a68 	vmov.f32	s1, s17
 8023012:	f000 fe4a 	bl	8023caa <finite>
 8023016:	b1a8      	cbz	r0, 8023044 <pow+0xac>
 8023018:	ec45 4b10 	vmov	d0, r4, r5
 802301c:	f000 fe45 	bl	8023caa <finite>
 8023020:	b180      	cbz	r0, 8023044 <pow+0xac>
 8023022:	4632      	mov	r2, r6
 8023024:	463b      	mov	r3, r7
 8023026:	4630      	mov	r0, r6
 8023028:	4639      	mov	r1, r7
 802302a:	f7dd fd9f 	bl	8000b6c <__aeabi_dcmpun>
 802302e:	2800      	cmp	r0, #0
 8023030:	d0e2      	beq.n	8022ff8 <pow+0x60>
 8023032:	f000 fed9 	bl	8023de8 <__errno>
 8023036:	2321      	movs	r3, #33	; 0x21
 8023038:	6003      	str	r3, [r0, #0]
 802303a:	ecbd 8b02 	vpop	{d8}
 802303e:	ec47 6b10 	vmov	d0, r6, r7
 8023042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023044:	2200      	movs	r2, #0
 8023046:	2300      	movs	r3, #0
 8023048:	4630      	mov	r0, r6
 802304a:	4639      	mov	r1, r7
 802304c:	f7dd fd5c 	bl	8000b08 <__aeabi_dcmpeq>
 8023050:	2800      	cmp	r0, #0
 8023052:	d0f2      	beq.n	802303a <pow+0xa2>
 8023054:	eeb0 0a48 	vmov.f32	s0, s16
 8023058:	eef0 0a68 	vmov.f32	s1, s17
 802305c:	f000 fe25 	bl	8023caa <finite>
 8023060:	2800      	cmp	r0, #0
 8023062:	d0ea      	beq.n	802303a <pow+0xa2>
 8023064:	ec45 4b10 	vmov	d0, r4, r5
 8023068:	f000 fe1f 	bl	8023caa <finite>
 802306c:	e7c3      	b.n	8022ff6 <pow+0x5e>
 802306e:	4f01      	ldr	r7, [pc, #4]	; (8023074 <pow+0xdc>)
 8023070:	2600      	movs	r6, #0
 8023072:	e7e2      	b.n	802303a <pow+0xa2>
 8023074:	3ff00000 	.word	0x3ff00000

08023078 <__ieee754_pow>:
 8023078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802307c:	ed2d 8b06 	vpush	{d8-d10}
 8023080:	b089      	sub	sp, #36	; 0x24
 8023082:	ed8d 1b00 	vstr	d1, [sp]
 8023086:	e9dd 2900 	ldrd	r2, r9, [sp]
 802308a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 802308e:	ea58 0102 	orrs.w	r1, r8, r2
 8023092:	ec57 6b10 	vmov	r6, r7, d0
 8023096:	d115      	bne.n	80230c4 <__ieee754_pow+0x4c>
 8023098:	19b3      	adds	r3, r6, r6
 802309a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 802309e:	4152      	adcs	r2, r2
 80230a0:	4299      	cmp	r1, r3
 80230a2:	4b89      	ldr	r3, [pc, #548]	; (80232c8 <__ieee754_pow+0x250>)
 80230a4:	4193      	sbcs	r3, r2
 80230a6:	f080 84d2 	bcs.w	8023a4e <__ieee754_pow+0x9d6>
 80230aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80230ae:	4630      	mov	r0, r6
 80230b0:	4639      	mov	r1, r7
 80230b2:	f7dd f90b 	bl	80002cc <__adddf3>
 80230b6:	ec41 0b10 	vmov	d0, r0, r1
 80230ba:	b009      	add	sp, #36	; 0x24
 80230bc:	ecbd 8b06 	vpop	{d8-d10}
 80230c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80230c4:	4b81      	ldr	r3, [pc, #516]	; (80232cc <__ieee754_pow+0x254>)
 80230c6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80230ca:	429c      	cmp	r4, r3
 80230cc:	ee10 aa10 	vmov	sl, s0
 80230d0:	463d      	mov	r5, r7
 80230d2:	dc06      	bgt.n	80230e2 <__ieee754_pow+0x6a>
 80230d4:	d101      	bne.n	80230da <__ieee754_pow+0x62>
 80230d6:	2e00      	cmp	r6, #0
 80230d8:	d1e7      	bne.n	80230aa <__ieee754_pow+0x32>
 80230da:	4598      	cmp	r8, r3
 80230dc:	dc01      	bgt.n	80230e2 <__ieee754_pow+0x6a>
 80230de:	d10f      	bne.n	8023100 <__ieee754_pow+0x88>
 80230e0:	b172      	cbz	r2, 8023100 <__ieee754_pow+0x88>
 80230e2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80230e6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80230ea:	ea55 050a 	orrs.w	r5, r5, sl
 80230ee:	d1dc      	bne.n	80230aa <__ieee754_pow+0x32>
 80230f0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80230f4:	18db      	adds	r3, r3, r3
 80230f6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80230fa:	4152      	adcs	r2, r2
 80230fc:	429d      	cmp	r5, r3
 80230fe:	e7d0      	b.n	80230a2 <__ieee754_pow+0x2a>
 8023100:	2d00      	cmp	r5, #0
 8023102:	da3b      	bge.n	802317c <__ieee754_pow+0x104>
 8023104:	4b72      	ldr	r3, [pc, #456]	; (80232d0 <__ieee754_pow+0x258>)
 8023106:	4598      	cmp	r8, r3
 8023108:	dc51      	bgt.n	80231ae <__ieee754_pow+0x136>
 802310a:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 802310e:	4598      	cmp	r8, r3
 8023110:	f340 84ac 	ble.w	8023a6c <__ieee754_pow+0x9f4>
 8023114:	ea4f 5328 	mov.w	r3, r8, asr #20
 8023118:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 802311c:	2b14      	cmp	r3, #20
 802311e:	dd0f      	ble.n	8023140 <__ieee754_pow+0xc8>
 8023120:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8023124:	fa22 f103 	lsr.w	r1, r2, r3
 8023128:	fa01 f303 	lsl.w	r3, r1, r3
 802312c:	4293      	cmp	r3, r2
 802312e:	f040 849d 	bne.w	8023a6c <__ieee754_pow+0x9f4>
 8023132:	f001 0101 	and.w	r1, r1, #1
 8023136:	f1c1 0302 	rsb	r3, r1, #2
 802313a:	9304      	str	r3, [sp, #16]
 802313c:	b182      	cbz	r2, 8023160 <__ieee754_pow+0xe8>
 802313e:	e05f      	b.n	8023200 <__ieee754_pow+0x188>
 8023140:	2a00      	cmp	r2, #0
 8023142:	d15b      	bne.n	80231fc <__ieee754_pow+0x184>
 8023144:	f1c3 0314 	rsb	r3, r3, #20
 8023148:	fa48 f103 	asr.w	r1, r8, r3
 802314c:	fa01 f303 	lsl.w	r3, r1, r3
 8023150:	4543      	cmp	r3, r8
 8023152:	f040 8488 	bne.w	8023a66 <__ieee754_pow+0x9ee>
 8023156:	f001 0101 	and.w	r1, r1, #1
 802315a:	f1c1 0302 	rsb	r3, r1, #2
 802315e:	9304      	str	r3, [sp, #16]
 8023160:	4b5c      	ldr	r3, [pc, #368]	; (80232d4 <__ieee754_pow+0x25c>)
 8023162:	4598      	cmp	r8, r3
 8023164:	d132      	bne.n	80231cc <__ieee754_pow+0x154>
 8023166:	f1b9 0f00 	cmp.w	r9, #0
 802316a:	f280 8478 	bge.w	8023a5e <__ieee754_pow+0x9e6>
 802316e:	4959      	ldr	r1, [pc, #356]	; (80232d4 <__ieee754_pow+0x25c>)
 8023170:	4632      	mov	r2, r6
 8023172:	463b      	mov	r3, r7
 8023174:	2000      	movs	r0, #0
 8023176:	f7dd fb89 	bl	800088c <__aeabi_ddiv>
 802317a:	e79c      	b.n	80230b6 <__ieee754_pow+0x3e>
 802317c:	2300      	movs	r3, #0
 802317e:	9304      	str	r3, [sp, #16]
 8023180:	2a00      	cmp	r2, #0
 8023182:	d13d      	bne.n	8023200 <__ieee754_pow+0x188>
 8023184:	4b51      	ldr	r3, [pc, #324]	; (80232cc <__ieee754_pow+0x254>)
 8023186:	4598      	cmp	r8, r3
 8023188:	d1ea      	bne.n	8023160 <__ieee754_pow+0xe8>
 802318a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 802318e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8023192:	ea53 030a 	orrs.w	r3, r3, sl
 8023196:	f000 845a 	beq.w	8023a4e <__ieee754_pow+0x9d6>
 802319a:	4b4f      	ldr	r3, [pc, #316]	; (80232d8 <__ieee754_pow+0x260>)
 802319c:	429c      	cmp	r4, r3
 802319e:	dd08      	ble.n	80231b2 <__ieee754_pow+0x13a>
 80231a0:	f1b9 0f00 	cmp.w	r9, #0
 80231a4:	f2c0 8457 	blt.w	8023a56 <__ieee754_pow+0x9de>
 80231a8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80231ac:	e783      	b.n	80230b6 <__ieee754_pow+0x3e>
 80231ae:	2302      	movs	r3, #2
 80231b0:	e7e5      	b.n	802317e <__ieee754_pow+0x106>
 80231b2:	f1b9 0f00 	cmp.w	r9, #0
 80231b6:	f04f 0000 	mov.w	r0, #0
 80231ba:	f04f 0100 	mov.w	r1, #0
 80231be:	f6bf af7a 	bge.w	80230b6 <__ieee754_pow+0x3e>
 80231c2:	e9dd 0300 	ldrd	r0, r3, [sp]
 80231c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80231ca:	e774      	b.n	80230b6 <__ieee754_pow+0x3e>
 80231cc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80231d0:	d106      	bne.n	80231e0 <__ieee754_pow+0x168>
 80231d2:	4632      	mov	r2, r6
 80231d4:	463b      	mov	r3, r7
 80231d6:	4630      	mov	r0, r6
 80231d8:	4639      	mov	r1, r7
 80231da:	f7dd fa2d 	bl	8000638 <__aeabi_dmul>
 80231de:	e76a      	b.n	80230b6 <__ieee754_pow+0x3e>
 80231e0:	4b3e      	ldr	r3, [pc, #248]	; (80232dc <__ieee754_pow+0x264>)
 80231e2:	4599      	cmp	r9, r3
 80231e4:	d10c      	bne.n	8023200 <__ieee754_pow+0x188>
 80231e6:	2d00      	cmp	r5, #0
 80231e8:	db0a      	blt.n	8023200 <__ieee754_pow+0x188>
 80231ea:	ec47 6b10 	vmov	d0, r6, r7
 80231ee:	b009      	add	sp, #36	; 0x24
 80231f0:	ecbd 8b06 	vpop	{d8-d10}
 80231f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80231f8:	f000 bc6c 	b.w	8023ad4 <__ieee754_sqrt>
 80231fc:	2300      	movs	r3, #0
 80231fe:	9304      	str	r3, [sp, #16]
 8023200:	ec47 6b10 	vmov	d0, r6, r7
 8023204:	f000 fd48 	bl	8023c98 <fabs>
 8023208:	ec51 0b10 	vmov	r0, r1, d0
 802320c:	f1ba 0f00 	cmp.w	sl, #0
 8023210:	d129      	bne.n	8023266 <__ieee754_pow+0x1ee>
 8023212:	b124      	cbz	r4, 802321e <__ieee754_pow+0x1a6>
 8023214:	4b2f      	ldr	r3, [pc, #188]	; (80232d4 <__ieee754_pow+0x25c>)
 8023216:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 802321a:	429a      	cmp	r2, r3
 802321c:	d123      	bne.n	8023266 <__ieee754_pow+0x1ee>
 802321e:	f1b9 0f00 	cmp.w	r9, #0
 8023222:	da05      	bge.n	8023230 <__ieee754_pow+0x1b8>
 8023224:	4602      	mov	r2, r0
 8023226:	460b      	mov	r3, r1
 8023228:	2000      	movs	r0, #0
 802322a:	492a      	ldr	r1, [pc, #168]	; (80232d4 <__ieee754_pow+0x25c>)
 802322c:	f7dd fb2e 	bl	800088c <__aeabi_ddiv>
 8023230:	2d00      	cmp	r5, #0
 8023232:	f6bf af40 	bge.w	80230b6 <__ieee754_pow+0x3e>
 8023236:	9b04      	ldr	r3, [sp, #16]
 8023238:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 802323c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8023240:	4323      	orrs	r3, r4
 8023242:	d108      	bne.n	8023256 <__ieee754_pow+0x1de>
 8023244:	4602      	mov	r2, r0
 8023246:	460b      	mov	r3, r1
 8023248:	4610      	mov	r0, r2
 802324a:	4619      	mov	r1, r3
 802324c:	f7dd f83c 	bl	80002c8 <__aeabi_dsub>
 8023250:	4602      	mov	r2, r0
 8023252:	460b      	mov	r3, r1
 8023254:	e78f      	b.n	8023176 <__ieee754_pow+0xfe>
 8023256:	9b04      	ldr	r3, [sp, #16]
 8023258:	2b01      	cmp	r3, #1
 802325a:	f47f af2c 	bne.w	80230b6 <__ieee754_pow+0x3e>
 802325e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8023262:	4619      	mov	r1, r3
 8023264:	e727      	b.n	80230b6 <__ieee754_pow+0x3e>
 8023266:	0feb      	lsrs	r3, r5, #31
 8023268:	3b01      	subs	r3, #1
 802326a:	9306      	str	r3, [sp, #24]
 802326c:	9a06      	ldr	r2, [sp, #24]
 802326e:	9b04      	ldr	r3, [sp, #16]
 8023270:	4313      	orrs	r3, r2
 8023272:	d102      	bne.n	802327a <__ieee754_pow+0x202>
 8023274:	4632      	mov	r2, r6
 8023276:	463b      	mov	r3, r7
 8023278:	e7e6      	b.n	8023248 <__ieee754_pow+0x1d0>
 802327a:	4b19      	ldr	r3, [pc, #100]	; (80232e0 <__ieee754_pow+0x268>)
 802327c:	4598      	cmp	r8, r3
 802327e:	f340 80fb 	ble.w	8023478 <__ieee754_pow+0x400>
 8023282:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8023286:	4598      	cmp	r8, r3
 8023288:	4b13      	ldr	r3, [pc, #76]	; (80232d8 <__ieee754_pow+0x260>)
 802328a:	dd0c      	ble.n	80232a6 <__ieee754_pow+0x22e>
 802328c:	429c      	cmp	r4, r3
 802328e:	dc0f      	bgt.n	80232b0 <__ieee754_pow+0x238>
 8023290:	f1b9 0f00 	cmp.w	r9, #0
 8023294:	da0f      	bge.n	80232b6 <__ieee754_pow+0x23e>
 8023296:	2000      	movs	r0, #0
 8023298:	b009      	add	sp, #36	; 0x24
 802329a:	ecbd 8b06 	vpop	{d8-d10}
 802329e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232a2:	f000 bcf0 	b.w	8023c86 <__math_oflow>
 80232a6:	429c      	cmp	r4, r3
 80232a8:	dbf2      	blt.n	8023290 <__ieee754_pow+0x218>
 80232aa:	4b0a      	ldr	r3, [pc, #40]	; (80232d4 <__ieee754_pow+0x25c>)
 80232ac:	429c      	cmp	r4, r3
 80232ae:	dd19      	ble.n	80232e4 <__ieee754_pow+0x26c>
 80232b0:	f1b9 0f00 	cmp.w	r9, #0
 80232b4:	dcef      	bgt.n	8023296 <__ieee754_pow+0x21e>
 80232b6:	2000      	movs	r0, #0
 80232b8:	b009      	add	sp, #36	; 0x24
 80232ba:	ecbd 8b06 	vpop	{d8-d10}
 80232be:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232c2:	f000 bcd7 	b.w	8023c74 <__math_uflow>
 80232c6:	bf00      	nop
 80232c8:	fff00000 	.word	0xfff00000
 80232cc:	7ff00000 	.word	0x7ff00000
 80232d0:	433fffff 	.word	0x433fffff
 80232d4:	3ff00000 	.word	0x3ff00000
 80232d8:	3fefffff 	.word	0x3fefffff
 80232dc:	3fe00000 	.word	0x3fe00000
 80232e0:	41e00000 	.word	0x41e00000
 80232e4:	4b60      	ldr	r3, [pc, #384]	; (8023468 <__ieee754_pow+0x3f0>)
 80232e6:	2200      	movs	r2, #0
 80232e8:	f7dc ffee 	bl	80002c8 <__aeabi_dsub>
 80232ec:	a354      	add	r3, pc, #336	; (adr r3, 8023440 <__ieee754_pow+0x3c8>)
 80232ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80232f2:	4604      	mov	r4, r0
 80232f4:	460d      	mov	r5, r1
 80232f6:	f7dd f99f 	bl	8000638 <__aeabi_dmul>
 80232fa:	a353      	add	r3, pc, #332	; (adr r3, 8023448 <__ieee754_pow+0x3d0>)
 80232fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023300:	4606      	mov	r6, r0
 8023302:	460f      	mov	r7, r1
 8023304:	4620      	mov	r0, r4
 8023306:	4629      	mov	r1, r5
 8023308:	f7dd f996 	bl	8000638 <__aeabi_dmul>
 802330c:	4b57      	ldr	r3, [pc, #348]	; (802346c <__ieee754_pow+0x3f4>)
 802330e:	4682      	mov	sl, r0
 8023310:	468b      	mov	fp, r1
 8023312:	2200      	movs	r2, #0
 8023314:	4620      	mov	r0, r4
 8023316:	4629      	mov	r1, r5
 8023318:	f7dd f98e 	bl	8000638 <__aeabi_dmul>
 802331c:	4602      	mov	r2, r0
 802331e:	460b      	mov	r3, r1
 8023320:	a14b      	add	r1, pc, #300	; (adr r1, 8023450 <__ieee754_pow+0x3d8>)
 8023322:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023326:	f7dc ffcf 	bl	80002c8 <__aeabi_dsub>
 802332a:	4622      	mov	r2, r4
 802332c:	462b      	mov	r3, r5
 802332e:	f7dd f983 	bl	8000638 <__aeabi_dmul>
 8023332:	4602      	mov	r2, r0
 8023334:	460b      	mov	r3, r1
 8023336:	2000      	movs	r0, #0
 8023338:	494d      	ldr	r1, [pc, #308]	; (8023470 <__ieee754_pow+0x3f8>)
 802333a:	f7dc ffc5 	bl	80002c8 <__aeabi_dsub>
 802333e:	4622      	mov	r2, r4
 8023340:	4680      	mov	r8, r0
 8023342:	4689      	mov	r9, r1
 8023344:	462b      	mov	r3, r5
 8023346:	4620      	mov	r0, r4
 8023348:	4629      	mov	r1, r5
 802334a:	f7dd f975 	bl	8000638 <__aeabi_dmul>
 802334e:	4602      	mov	r2, r0
 8023350:	460b      	mov	r3, r1
 8023352:	4640      	mov	r0, r8
 8023354:	4649      	mov	r1, r9
 8023356:	f7dd f96f 	bl	8000638 <__aeabi_dmul>
 802335a:	a33f      	add	r3, pc, #252	; (adr r3, 8023458 <__ieee754_pow+0x3e0>)
 802335c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023360:	f7dd f96a 	bl	8000638 <__aeabi_dmul>
 8023364:	4602      	mov	r2, r0
 8023366:	460b      	mov	r3, r1
 8023368:	4650      	mov	r0, sl
 802336a:	4659      	mov	r1, fp
 802336c:	f7dc ffac 	bl	80002c8 <__aeabi_dsub>
 8023370:	4602      	mov	r2, r0
 8023372:	460b      	mov	r3, r1
 8023374:	4680      	mov	r8, r0
 8023376:	4689      	mov	r9, r1
 8023378:	4630      	mov	r0, r6
 802337a:	4639      	mov	r1, r7
 802337c:	f7dc ffa6 	bl	80002cc <__adddf3>
 8023380:	2000      	movs	r0, #0
 8023382:	4632      	mov	r2, r6
 8023384:	463b      	mov	r3, r7
 8023386:	4604      	mov	r4, r0
 8023388:	460d      	mov	r5, r1
 802338a:	f7dc ff9d 	bl	80002c8 <__aeabi_dsub>
 802338e:	4602      	mov	r2, r0
 8023390:	460b      	mov	r3, r1
 8023392:	4640      	mov	r0, r8
 8023394:	4649      	mov	r1, r9
 8023396:	f7dc ff97 	bl	80002c8 <__aeabi_dsub>
 802339a:	9b04      	ldr	r3, [sp, #16]
 802339c:	9a06      	ldr	r2, [sp, #24]
 802339e:	3b01      	subs	r3, #1
 80233a0:	4313      	orrs	r3, r2
 80233a2:	4682      	mov	sl, r0
 80233a4:	468b      	mov	fp, r1
 80233a6:	f040 81e7 	bne.w	8023778 <__ieee754_pow+0x700>
 80233aa:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8023460 <__ieee754_pow+0x3e8>
 80233ae:	eeb0 8a47 	vmov.f32	s16, s14
 80233b2:	eef0 8a67 	vmov.f32	s17, s15
 80233b6:	e9dd 6700 	ldrd	r6, r7, [sp]
 80233ba:	2600      	movs	r6, #0
 80233bc:	4632      	mov	r2, r6
 80233be:	463b      	mov	r3, r7
 80233c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80233c4:	f7dc ff80 	bl	80002c8 <__aeabi_dsub>
 80233c8:	4622      	mov	r2, r4
 80233ca:	462b      	mov	r3, r5
 80233cc:	f7dd f934 	bl	8000638 <__aeabi_dmul>
 80233d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80233d4:	4680      	mov	r8, r0
 80233d6:	4689      	mov	r9, r1
 80233d8:	4650      	mov	r0, sl
 80233da:	4659      	mov	r1, fp
 80233dc:	f7dd f92c 	bl	8000638 <__aeabi_dmul>
 80233e0:	4602      	mov	r2, r0
 80233e2:	460b      	mov	r3, r1
 80233e4:	4640      	mov	r0, r8
 80233e6:	4649      	mov	r1, r9
 80233e8:	f7dc ff70 	bl	80002cc <__adddf3>
 80233ec:	4632      	mov	r2, r6
 80233ee:	463b      	mov	r3, r7
 80233f0:	4680      	mov	r8, r0
 80233f2:	4689      	mov	r9, r1
 80233f4:	4620      	mov	r0, r4
 80233f6:	4629      	mov	r1, r5
 80233f8:	f7dd f91e 	bl	8000638 <__aeabi_dmul>
 80233fc:	460b      	mov	r3, r1
 80233fe:	4604      	mov	r4, r0
 8023400:	460d      	mov	r5, r1
 8023402:	4602      	mov	r2, r0
 8023404:	4649      	mov	r1, r9
 8023406:	4640      	mov	r0, r8
 8023408:	f7dc ff60 	bl	80002cc <__adddf3>
 802340c:	4b19      	ldr	r3, [pc, #100]	; (8023474 <__ieee754_pow+0x3fc>)
 802340e:	4299      	cmp	r1, r3
 8023410:	ec45 4b19 	vmov	d9, r4, r5
 8023414:	4606      	mov	r6, r0
 8023416:	460f      	mov	r7, r1
 8023418:	468b      	mov	fp, r1
 802341a:	f340 82f1 	ble.w	8023a00 <__ieee754_pow+0x988>
 802341e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8023422:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8023426:	4303      	orrs	r3, r0
 8023428:	f000 81e4 	beq.w	80237f4 <__ieee754_pow+0x77c>
 802342c:	ec51 0b18 	vmov	r0, r1, d8
 8023430:	2200      	movs	r2, #0
 8023432:	2300      	movs	r3, #0
 8023434:	f7dd fb72 	bl	8000b1c <__aeabi_dcmplt>
 8023438:	3800      	subs	r0, #0
 802343a:	bf18      	it	ne
 802343c:	2001      	movne	r0, #1
 802343e:	e72b      	b.n	8023298 <__ieee754_pow+0x220>
 8023440:	60000000 	.word	0x60000000
 8023444:	3ff71547 	.word	0x3ff71547
 8023448:	f85ddf44 	.word	0xf85ddf44
 802344c:	3e54ae0b 	.word	0x3e54ae0b
 8023450:	55555555 	.word	0x55555555
 8023454:	3fd55555 	.word	0x3fd55555
 8023458:	652b82fe 	.word	0x652b82fe
 802345c:	3ff71547 	.word	0x3ff71547
 8023460:	00000000 	.word	0x00000000
 8023464:	bff00000 	.word	0xbff00000
 8023468:	3ff00000 	.word	0x3ff00000
 802346c:	3fd00000 	.word	0x3fd00000
 8023470:	3fe00000 	.word	0x3fe00000
 8023474:	408fffff 	.word	0x408fffff
 8023478:	4bd5      	ldr	r3, [pc, #852]	; (80237d0 <__ieee754_pow+0x758>)
 802347a:	402b      	ands	r3, r5
 802347c:	2200      	movs	r2, #0
 802347e:	b92b      	cbnz	r3, 802348c <__ieee754_pow+0x414>
 8023480:	4bd4      	ldr	r3, [pc, #848]	; (80237d4 <__ieee754_pow+0x75c>)
 8023482:	f7dd f8d9 	bl	8000638 <__aeabi_dmul>
 8023486:	f06f 0234 	mvn.w	r2, #52	; 0x34
 802348a:	460c      	mov	r4, r1
 802348c:	1523      	asrs	r3, r4, #20
 802348e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8023492:	4413      	add	r3, r2
 8023494:	9305      	str	r3, [sp, #20]
 8023496:	4bd0      	ldr	r3, [pc, #832]	; (80237d8 <__ieee754_pow+0x760>)
 8023498:	f3c4 0413 	ubfx	r4, r4, #0, #20
 802349c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80234a0:	429c      	cmp	r4, r3
 80234a2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80234a6:	dd08      	ble.n	80234ba <__ieee754_pow+0x442>
 80234a8:	4bcc      	ldr	r3, [pc, #816]	; (80237dc <__ieee754_pow+0x764>)
 80234aa:	429c      	cmp	r4, r3
 80234ac:	f340 8162 	ble.w	8023774 <__ieee754_pow+0x6fc>
 80234b0:	9b05      	ldr	r3, [sp, #20]
 80234b2:	3301      	adds	r3, #1
 80234b4:	9305      	str	r3, [sp, #20]
 80234b6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80234ba:	2400      	movs	r4, #0
 80234bc:	00e3      	lsls	r3, r4, #3
 80234be:	9307      	str	r3, [sp, #28]
 80234c0:	4bc7      	ldr	r3, [pc, #796]	; (80237e0 <__ieee754_pow+0x768>)
 80234c2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80234c6:	ed93 7b00 	vldr	d7, [r3]
 80234ca:	4629      	mov	r1, r5
 80234cc:	ec53 2b17 	vmov	r2, r3, d7
 80234d0:	eeb0 9a47 	vmov.f32	s18, s14
 80234d4:	eef0 9a67 	vmov.f32	s19, s15
 80234d8:	4682      	mov	sl, r0
 80234da:	f7dc fef5 	bl	80002c8 <__aeabi_dsub>
 80234de:	4652      	mov	r2, sl
 80234e0:	4606      	mov	r6, r0
 80234e2:	460f      	mov	r7, r1
 80234e4:	462b      	mov	r3, r5
 80234e6:	ec51 0b19 	vmov	r0, r1, d9
 80234ea:	f7dc feef 	bl	80002cc <__adddf3>
 80234ee:	4602      	mov	r2, r0
 80234f0:	460b      	mov	r3, r1
 80234f2:	2000      	movs	r0, #0
 80234f4:	49bb      	ldr	r1, [pc, #748]	; (80237e4 <__ieee754_pow+0x76c>)
 80234f6:	f7dd f9c9 	bl	800088c <__aeabi_ddiv>
 80234fa:	ec41 0b1a 	vmov	d10, r0, r1
 80234fe:	4602      	mov	r2, r0
 8023500:	460b      	mov	r3, r1
 8023502:	4630      	mov	r0, r6
 8023504:	4639      	mov	r1, r7
 8023506:	f7dd f897 	bl	8000638 <__aeabi_dmul>
 802350a:	2300      	movs	r3, #0
 802350c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8023510:	9302      	str	r3, [sp, #8]
 8023512:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8023516:	46ab      	mov	fp, r5
 8023518:	106d      	asrs	r5, r5, #1
 802351a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 802351e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8023522:	ec41 0b18 	vmov	d8, r0, r1
 8023526:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 802352a:	2200      	movs	r2, #0
 802352c:	4640      	mov	r0, r8
 802352e:	4649      	mov	r1, r9
 8023530:	4614      	mov	r4, r2
 8023532:	461d      	mov	r5, r3
 8023534:	f7dd f880 	bl	8000638 <__aeabi_dmul>
 8023538:	4602      	mov	r2, r0
 802353a:	460b      	mov	r3, r1
 802353c:	4630      	mov	r0, r6
 802353e:	4639      	mov	r1, r7
 8023540:	f7dc fec2 	bl	80002c8 <__aeabi_dsub>
 8023544:	ec53 2b19 	vmov	r2, r3, d9
 8023548:	4606      	mov	r6, r0
 802354a:	460f      	mov	r7, r1
 802354c:	4620      	mov	r0, r4
 802354e:	4629      	mov	r1, r5
 8023550:	f7dc feba 	bl	80002c8 <__aeabi_dsub>
 8023554:	4602      	mov	r2, r0
 8023556:	460b      	mov	r3, r1
 8023558:	4650      	mov	r0, sl
 802355a:	4659      	mov	r1, fp
 802355c:	f7dc feb4 	bl	80002c8 <__aeabi_dsub>
 8023560:	4642      	mov	r2, r8
 8023562:	464b      	mov	r3, r9
 8023564:	f7dd f868 	bl	8000638 <__aeabi_dmul>
 8023568:	4602      	mov	r2, r0
 802356a:	460b      	mov	r3, r1
 802356c:	4630      	mov	r0, r6
 802356e:	4639      	mov	r1, r7
 8023570:	f7dc feaa 	bl	80002c8 <__aeabi_dsub>
 8023574:	ec53 2b1a 	vmov	r2, r3, d10
 8023578:	f7dd f85e 	bl	8000638 <__aeabi_dmul>
 802357c:	ec53 2b18 	vmov	r2, r3, d8
 8023580:	ec41 0b19 	vmov	d9, r0, r1
 8023584:	ec51 0b18 	vmov	r0, r1, d8
 8023588:	f7dd f856 	bl	8000638 <__aeabi_dmul>
 802358c:	a37c      	add	r3, pc, #496	; (adr r3, 8023780 <__ieee754_pow+0x708>)
 802358e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023592:	4604      	mov	r4, r0
 8023594:	460d      	mov	r5, r1
 8023596:	f7dd f84f 	bl	8000638 <__aeabi_dmul>
 802359a:	a37b      	add	r3, pc, #492	; (adr r3, 8023788 <__ieee754_pow+0x710>)
 802359c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235a0:	f7dc fe94 	bl	80002cc <__adddf3>
 80235a4:	4622      	mov	r2, r4
 80235a6:	462b      	mov	r3, r5
 80235a8:	f7dd f846 	bl	8000638 <__aeabi_dmul>
 80235ac:	a378      	add	r3, pc, #480	; (adr r3, 8023790 <__ieee754_pow+0x718>)
 80235ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235b2:	f7dc fe8b 	bl	80002cc <__adddf3>
 80235b6:	4622      	mov	r2, r4
 80235b8:	462b      	mov	r3, r5
 80235ba:	f7dd f83d 	bl	8000638 <__aeabi_dmul>
 80235be:	a376      	add	r3, pc, #472	; (adr r3, 8023798 <__ieee754_pow+0x720>)
 80235c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235c4:	f7dc fe82 	bl	80002cc <__adddf3>
 80235c8:	4622      	mov	r2, r4
 80235ca:	462b      	mov	r3, r5
 80235cc:	f7dd f834 	bl	8000638 <__aeabi_dmul>
 80235d0:	a373      	add	r3, pc, #460	; (adr r3, 80237a0 <__ieee754_pow+0x728>)
 80235d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235d6:	f7dc fe79 	bl	80002cc <__adddf3>
 80235da:	4622      	mov	r2, r4
 80235dc:	462b      	mov	r3, r5
 80235de:	f7dd f82b 	bl	8000638 <__aeabi_dmul>
 80235e2:	a371      	add	r3, pc, #452	; (adr r3, 80237a8 <__ieee754_pow+0x730>)
 80235e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80235e8:	f7dc fe70 	bl	80002cc <__adddf3>
 80235ec:	4622      	mov	r2, r4
 80235ee:	4606      	mov	r6, r0
 80235f0:	460f      	mov	r7, r1
 80235f2:	462b      	mov	r3, r5
 80235f4:	4620      	mov	r0, r4
 80235f6:	4629      	mov	r1, r5
 80235f8:	f7dd f81e 	bl	8000638 <__aeabi_dmul>
 80235fc:	4602      	mov	r2, r0
 80235fe:	460b      	mov	r3, r1
 8023600:	4630      	mov	r0, r6
 8023602:	4639      	mov	r1, r7
 8023604:	f7dd f818 	bl	8000638 <__aeabi_dmul>
 8023608:	4642      	mov	r2, r8
 802360a:	4604      	mov	r4, r0
 802360c:	460d      	mov	r5, r1
 802360e:	464b      	mov	r3, r9
 8023610:	ec51 0b18 	vmov	r0, r1, d8
 8023614:	f7dc fe5a 	bl	80002cc <__adddf3>
 8023618:	ec53 2b19 	vmov	r2, r3, d9
 802361c:	f7dd f80c 	bl	8000638 <__aeabi_dmul>
 8023620:	4622      	mov	r2, r4
 8023622:	462b      	mov	r3, r5
 8023624:	f7dc fe52 	bl	80002cc <__adddf3>
 8023628:	4642      	mov	r2, r8
 802362a:	4682      	mov	sl, r0
 802362c:	468b      	mov	fp, r1
 802362e:	464b      	mov	r3, r9
 8023630:	4640      	mov	r0, r8
 8023632:	4649      	mov	r1, r9
 8023634:	f7dd f800 	bl	8000638 <__aeabi_dmul>
 8023638:	4b6b      	ldr	r3, [pc, #428]	; (80237e8 <__ieee754_pow+0x770>)
 802363a:	2200      	movs	r2, #0
 802363c:	4606      	mov	r6, r0
 802363e:	460f      	mov	r7, r1
 8023640:	f7dc fe44 	bl	80002cc <__adddf3>
 8023644:	4652      	mov	r2, sl
 8023646:	465b      	mov	r3, fp
 8023648:	f7dc fe40 	bl	80002cc <__adddf3>
 802364c:	2000      	movs	r0, #0
 802364e:	4604      	mov	r4, r0
 8023650:	460d      	mov	r5, r1
 8023652:	4602      	mov	r2, r0
 8023654:	460b      	mov	r3, r1
 8023656:	4640      	mov	r0, r8
 8023658:	4649      	mov	r1, r9
 802365a:	f7dc ffed 	bl	8000638 <__aeabi_dmul>
 802365e:	4b62      	ldr	r3, [pc, #392]	; (80237e8 <__ieee754_pow+0x770>)
 8023660:	4680      	mov	r8, r0
 8023662:	4689      	mov	r9, r1
 8023664:	2200      	movs	r2, #0
 8023666:	4620      	mov	r0, r4
 8023668:	4629      	mov	r1, r5
 802366a:	f7dc fe2d 	bl	80002c8 <__aeabi_dsub>
 802366e:	4632      	mov	r2, r6
 8023670:	463b      	mov	r3, r7
 8023672:	f7dc fe29 	bl	80002c8 <__aeabi_dsub>
 8023676:	4602      	mov	r2, r0
 8023678:	460b      	mov	r3, r1
 802367a:	4650      	mov	r0, sl
 802367c:	4659      	mov	r1, fp
 802367e:	f7dc fe23 	bl	80002c8 <__aeabi_dsub>
 8023682:	ec53 2b18 	vmov	r2, r3, d8
 8023686:	f7dc ffd7 	bl	8000638 <__aeabi_dmul>
 802368a:	4622      	mov	r2, r4
 802368c:	4606      	mov	r6, r0
 802368e:	460f      	mov	r7, r1
 8023690:	462b      	mov	r3, r5
 8023692:	ec51 0b19 	vmov	r0, r1, d9
 8023696:	f7dc ffcf 	bl	8000638 <__aeabi_dmul>
 802369a:	4602      	mov	r2, r0
 802369c:	460b      	mov	r3, r1
 802369e:	4630      	mov	r0, r6
 80236a0:	4639      	mov	r1, r7
 80236a2:	f7dc fe13 	bl	80002cc <__adddf3>
 80236a6:	4606      	mov	r6, r0
 80236a8:	460f      	mov	r7, r1
 80236aa:	4602      	mov	r2, r0
 80236ac:	460b      	mov	r3, r1
 80236ae:	4640      	mov	r0, r8
 80236b0:	4649      	mov	r1, r9
 80236b2:	f7dc fe0b 	bl	80002cc <__adddf3>
 80236b6:	a33e      	add	r3, pc, #248	; (adr r3, 80237b0 <__ieee754_pow+0x738>)
 80236b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236bc:	2000      	movs	r0, #0
 80236be:	4604      	mov	r4, r0
 80236c0:	460d      	mov	r5, r1
 80236c2:	f7dc ffb9 	bl	8000638 <__aeabi_dmul>
 80236c6:	4642      	mov	r2, r8
 80236c8:	ec41 0b18 	vmov	d8, r0, r1
 80236cc:	464b      	mov	r3, r9
 80236ce:	4620      	mov	r0, r4
 80236d0:	4629      	mov	r1, r5
 80236d2:	f7dc fdf9 	bl	80002c8 <__aeabi_dsub>
 80236d6:	4602      	mov	r2, r0
 80236d8:	460b      	mov	r3, r1
 80236da:	4630      	mov	r0, r6
 80236dc:	4639      	mov	r1, r7
 80236de:	f7dc fdf3 	bl	80002c8 <__aeabi_dsub>
 80236e2:	a335      	add	r3, pc, #212	; (adr r3, 80237b8 <__ieee754_pow+0x740>)
 80236e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236e8:	f7dc ffa6 	bl	8000638 <__aeabi_dmul>
 80236ec:	a334      	add	r3, pc, #208	; (adr r3, 80237c0 <__ieee754_pow+0x748>)
 80236ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80236f2:	4606      	mov	r6, r0
 80236f4:	460f      	mov	r7, r1
 80236f6:	4620      	mov	r0, r4
 80236f8:	4629      	mov	r1, r5
 80236fa:	f7dc ff9d 	bl	8000638 <__aeabi_dmul>
 80236fe:	4602      	mov	r2, r0
 8023700:	460b      	mov	r3, r1
 8023702:	4630      	mov	r0, r6
 8023704:	4639      	mov	r1, r7
 8023706:	f7dc fde1 	bl	80002cc <__adddf3>
 802370a:	9a07      	ldr	r2, [sp, #28]
 802370c:	4b37      	ldr	r3, [pc, #220]	; (80237ec <__ieee754_pow+0x774>)
 802370e:	4413      	add	r3, r2
 8023710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023714:	f7dc fdda 	bl	80002cc <__adddf3>
 8023718:	4682      	mov	sl, r0
 802371a:	9805      	ldr	r0, [sp, #20]
 802371c:	468b      	mov	fp, r1
 802371e:	f7dc ff21 	bl	8000564 <__aeabi_i2d>
 8023722:	9a07      	ldr	r2, [sp, #28]
 8023724:	4b32      	ldr	r3, [pc, #200]	; (80237f0 <__ieee754_pow+0x778>)
 8023726:	4413      	add	r3, r2
 8023728:	e9d3 8900 	ldrd	r8, r9, [r3]
 802372c:	4606      	mov	r6, r0
 802372e:	460f      	mov	r7, r1
 8023730:	4652      	mov	r2, sl
 8023732:	465b      	mov	r3, fp
 8023734:	ec51 0b18 	vmov	r0, r1, d8
 8023738:	f7dc fdc8 	bl	80002cc <__adddf3>
 802373c:	4642      	mov	r2, r8
 802373e:	464b      	mov	r3, r9
 8023740:	f7dc fdc4 	bl	80002cc <__adddf3>
 8023744:	4632      	mov	r2, r6
 8023746:	463b      	mov	r3, r7
 8023748:	f7dc fdc0 	bl	80002cc <__adddf3>
 802374c:	2000      	movs	r0, #0
 802374e:	4632      	mov	r2, r6
 8023750:	463b      	mov	r3, r7
 8023752:	4604      	mov	r4, r0
 8023754:	460d      	mov	r5, r1
 8023756:	f7dc fdb7 	bl	80002c8 <__aeabi_dsub>
 802375a:	4642      	mov	r2, r8
 802375c:	464b      	mov	r3, r9
 802375e:	f7dc fdb3 	bl	80002c8 <__aeabi_dsub>
 8023762:	ec53 2b18 	vmov	r2, r3, d8
 8023766:	f7dc fdaf 	bl	80002c8 <__aeabi_dsub>
 802376a:	4602      	mov	r2, r0
 802376c:	460b      	mov	r3, r1
 802376e:	4650      	mov	r0, sl
 8023770:	4659      	mov	r1, fp
 8023772:	e610      	b.n	8023396 <__ieee754_pow+0x31e>
 8023774:	2401      	movs	r4, #1
 8023776:	e6a1      	b.n	80234bc <__ieee754_pow+0x444>
 8023778:	ed9f 7b13 	vldr	d7, [pc, #76]	; 80237c8 <__ieee754_pow+0x750>
 802377c:	e617      	b.n	80233ae <__ieee754_pow+0x336>
 802377e:	bf00      	nop
 8023780:	4a454eef 	.word	0x4a454eef
 8023784:	3fca7e28 	.word	0x3fca7e28
 8023788:	93c9db65 	.word	0x93c9db65
 802378c:	3fcd864a 	.word	0x3fcd864a
 8023790:	a91d4101 	.word	0xa91d4101
 8023794:	3fd17460 	.word	0x3fd17460
 8023798:	518f264d 	.word	0x518f264d
 802379c:	3fd55555 	.word	0x3fd55555
 80237a0:	db6fabff 	.word	0xdb6fabff
 80237a4:	3fdb6db6 	.word	0x3fdb6db6
 80237a8:	33333303 	.word	0x33333303
 80237ac:	3fe33333 	.word	0x3fe33333
 80237b0:	e0000000 	.word	0xe0000000
 80237b4:	3feec709 	.word	0x3feec709
 80237b8:	dc3a03fd 	.word	0xdc3a03fd
 80237bc:	3feec709 	.word	0x3feec709
 80237c0:	145b01f5 	.word	0x145b01f5
 80237c4:	be3e2fe0 	.word	0xbe3e2fe0
 80237c8:	00000000 	.word	0x00000000
 80237cc:	3ff00000 	.word	0x3ff00000
 80237d0:	7ff00000 	.word	0x7ff00000
 80237d4:	43400000 	.word	0x43400000
 80237d8:	0003988e 	.word	0x0003988e
 80237dc:	000bb679 	.word	0x000bb679
 80237e0:	08028f18 	.word	0x08028f18
 80237e4:	3ff00000 	.word	0x3ff00000
 80237e8:	40080000 	.word	0x40080000
 80237ec:	08028f38 	.word	0x08028f38
 80237f0:	08028f28 	.word	0x08028f28
 80237f4:	a3b5      	add	r3, pc, #724	; (adr r3, 8023acc <__ieee754_pow+0xa54>)
 80237f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80237fa:	4640      	mov	r0, r8
 80237fc:	4649      	mov	r1, r9
 80237fe:	f7dc fd65 	bl	80002cc <__adddf3>
 8023802:	4622      	mov	r2, r4
 8023804:	ec41 0b1a 	vmov	d10, r0, r1
 8023808:	462b      	mov	r3, r5
 802380a:	4630      	mov	r0, r6
 802380c:	4639      	mov	r1, r7
 802380e:	f7dc fd5b 	bl	80002c8 <__aeabi_dsub>
 8023812:	4602      	mov	r2, r0
 8023814:	460b      	mov	r3, r1
 8023816:	ec51 0b1a 	vmov	r0, r1, d10
 802381a:	f7dd f99d 	bl	8000b58 <__aeabi_dcmpgt>
 802381e:	2800      	cmp	r0, #0
 8023820:	f47f ae04 	bne.w	802342c <__ieee754_pow+0x3b4>
 8023824:	4aa4      	ldr	r2, [pc, #656]	; (8023ab8 <__ieee754_pow+0xa40>)
 8023826:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 802382a:	4293      	cmp	r3, r2
 802382c:	f340 8108 	ble.w	8023a40 <__ieee754_pow+0x9c8>
 8023830:	151b      	asrs	r3, r3, #20
 8023832:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8023836:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 802383a:	fa4a f303 	asr.w	r3, sl, r3
 802383e:	445b      	add	r3, fp
 8023840:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8023844:	4e9d      	ldr	r6, [pc, #628]	; (8023abc <__ieee754_pow+0xa44>)
 8023846:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 802384a:	4116      	asrs	r6, r2
 802384c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8023850:	2000      	movs	r0, #0
 8023852:	ea23 0106 	bic.w	r1, r3, r6
 8023856:	f1c2 0214 	rsb	r2, r2, #20
 802385a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 802385e:	fa4a fa02 	asr.w	sl, sl, r2
 8023862:	f1bb 0f00 	cmp.w	fp, #0
 8023866:	4602      	mov	r2, r0
 8023868:	460b      	mov	r3, r1
 802386a:	4620      	mov	r0, r4
 802386c:	4629      	mov	r1, r5
 802386e:	bfb8      	it	lt
 8023870:	f1ca 0a00 	rsblt	sl, sl, #0
 8023874:	f7dc fd28 	bl	80002c8 <__aeabi_dsub>
 8023878:	ec41 0b19 	vmov	d9, r0, r1
 802387c:	4642      	mov	r2, r8
 802387e:	464b      	mov	r3, r9
 8023880:	ec51 0b19 	vmov	r0, r1, d9
 8023884:	f7dc fd22 	bl	80002cc <__adddf3>
 8023888:	a37b      	add	r3, pc, #492	; (adr r3, 8023a78 <__ieee754_pow+0xa00>)
 802388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802388e:	2000      	movs	r0, #0
 8023890:	4604      	mov	r4, r0
 8023892:	460d      	mov	r5, r1
 8023894:	f7dc fed0 	bl	8000638 <__aeabi_dmul>
 8023898:	ec53 2b19 	vmov	r2, r3, d9
 802389c:	4606      	mov	r6, r0
 802389e:	460f      	mov	r7, r1
 80238a0:	4620      	mov	r0, r4
 80238a2:	4629      	mov	r1, r5
 80238a4:	f7dc fd10 	bl	80002c8 <__aeabi_dsub>
 80238a8:	4602      	mov	r2, r0
 80238aa:	460b      	mov	r3, r1
 80238ac:	4640      	mov	r0, r8
 80238ae:	4649      	mov	r1, r9
 80238b0:	f7dc fd0a 	bl	80002c8 <__aeabi_dsub>
 80238b4:	a372      	add	r3, pc, #456	; (adr r3, 8023a80 <__ieee754_pow+0xa08>)
 80238b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238ba:	f7dc febd 	bl	8000638 <__aeabi_dmul>
 80238be:	a372      	add	r3, pc, #456	; (adr r3, 8023a88 <__ieee754_pow+0xa10>)
 80238c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80238c4:	4680      	mov	r8, r0
 80238c6:	4689      	mov	r9, r1
 80238c8:	4620      	mov	r0, r4
 80238ca:	4629      	mov	r1, r5
 80238cc:	f7dc feb4 	bl	8000638 <__aeabi_dmul>
 80238d0:	4602      	mov	r2, r0
 80238d2:	460b      	mov	r3, r1
 80238d4:	4640      	mov	r0, r8
 80238d6:	4649      	mov	r1, r9
 80238d8:	f7dc fcf8 	bl	80002cc <__adddf3>
 80238dc:	4604      	mov	r4, r0
 80238de:	460d      	mov	r5, r1
 80238e0:	4602      	mov	r2, r0
 80238e2:	460b      	mov	r3, r1
 80238e4:	4630      	mov	r0, r6
 80238e6:	4639      	mov	r1, r7
 80238e8:	f7dc fcf0 	bl	80002cc <__adddf3>
 80238ec:	4632      	mov	r2, r6
 80238ee:	463b      	mov	r3, r7
 80238f0:	4680      	mov	r8, r0
 80238f2:	4689      	mov	r9, r1
 80238f4:	f7dc fce8 	bl	80002c8 <__aeabi_dsub>
 80238f8:	4602      	mov	r2, r0
 80238fa:	460b      	mov	r3, r1
 80238fc:	4620      	mov	r0, r4
 80238fe:	4629      	mov	r1, r5
 8023900:	f7dc fce2 	bl	80002c8 <__aeabi_dsub>
 8023904:	4642      	mov	r2, r8
 8023906:	4606      	mov	r6, r0
 8023908:	460f      	mov	r7, r1
 802390a:	464b      	mov	r3, r9
 802390c:	4640      	mov	r0, r8
 802390e:	4649      	mov	r1, r9
 8023910:	f7dc fe92 	bl	8000638 <__aeabi_dmul>
 8023914:	a35e      	add	r3, pc, #376	; (adr r3, 8023a90 <__ieee754_pow+0xa18>)
 8023916:	e9d3 2300 	ldrd	r2, r3, [r3]
 802391a:	4604      	mov	r4, r0
 802391c:	460d      	mov	r5, r1
 802391e:	f7dc fe8b 	bl	8000638 <__aeabi_dmul>
 8023922:	a35d      	add	r3, pc, #372	; (adr r3, 8023a98 <__ieee754_pow+0xa20>)
 8023924:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023928:	f7dc fcce 	bl	80002c8 <__aeabi_dsub>
 802392c:	4622      	mov	r2, r4
 802392e:	462b      	mov	r3, r5
 8023930:	f7dc fe82 	bl	8000638 <__aeabi_dmul>
 8023934:	a35a      	add	r3, pc, #360	; (adr r3, 8023aa0 <__ieee754_pow+0xa28>)
 8023936:	e9d3 2300 	ldrd	r2, r3, [r3]
 802393a:	f7dc fcc7 	bl	80002cc <__adddf3>
 802393e:	4622      	mov	r2, r4
 8023940:	462b      	mov	r3, r5
 8023942:	f7dc fe79 	bl	8000638 <__aeabi_dmul>
 8023946:	a358      	add	r3, pc, #352	; (adr r3, 8023aa8 <__ieee754_pow+0xa30>)
 8023948:	e9d3 2300 	ldrd	r2, r3, [r3]
 802394c:	f7dc fcbc 	bl	80002c8 <__aeabi_dsub>
 8023950:	4622      	mov	r2, r4
 8023952:	462b      	mov	r3, r5
 8023954:	f7dc fe70 	bl	8000638 <__aeabi_dmul>
 8023958:	a355      	add	r3, pc, #340	; (adr r3, 8023ab0 <__ieee754_pow+0xa38>)
 802395a:	e9d3 2300 	ldrd	r2, r3, [r3]
 802395e:	f7dc fcb5 	bl	80002cc <__adddf3>
 8023962:	4622      	mov	r2, r4
 8023964:	462b      	mov	r3, r5
 8023966:	f7dc fe67 	bl	8000638 <__aeabi_dmul>
 802396a:	4602      	mov	r2, r0
 802396c:	460b      	mov	r3, r1
 802396e:	4640      	mov	r0, r8
 8023970:	4649      	mov	r1, r9
 8023972:	f7dc fca9 	bl	80002c8 <__aeabi_dsub>
 8023976:	4604      	mov	r4, r0
 8023978:	460d      	mov	r5, r1
 802397a:	4602      	mov	r2, r0
 802397c:	460b      	mov	r3, r1
 802397e:	4640      	mov	r0, r8
 8023980:	4649      	mov	r1, r9
 8023982:	f7dc fe59 	bl	8000638 <__aeabi_dmul>
 8023986:	2200      	movs	r2, #0
 8023988:	ec41 0b19 	vmov	d9, r0, r1
 802398c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8023990:	4620      	mov	r0, r4
 8023992:	4629      	mov	r1, r5
 8023994:	f7dc fc98 	bl	80002c8 <__aeabi_dsub>
 8023998:	4602      	mov	r2, r0
 802399a:	460b      	mov	r3, r1
 802399c:	ec51 0b19 	vmov	r0, r1, d9
 80239a0:	f7dc ff74 	bl	800088c <__aeabi_ddiv>
 80239a4:	4632      	mov	r2, r6
 80239a6:	4604      	mov	r4, r0
 80239a8:	460d      	mov	r5, r1
 80239aa:	463b      	mov	r3, r7
 80239ac:	4640      	mov	r0, r8
 80239ae:	4649      	mov	r1, r9
 80239b0:	f7dc fe42 	bl	8000638 <__aeabi_dmul>
 80239b4:	4632      	mov	r2, r6
 80239b6:	463b      	mov	r3, r7
 80239b8:	f7dc fc88 	bl	80002cc <__adddf3>
 80239bc:	4602      	mov	r2, r0
 80239be:	460b      	mov	r3, r1
 80239c0:	4620      	mov	r0, r4
 80239c2:	4629      	mov	r1, r5
 80239c4:	f7dc fc80 	bl	80002c8 <__aeabi_dsub>
 80239c8:	4642      	mov	r2, r8
 80239ca:	464b      	mov	r3, r9
 80239cc:	f7dc fc7c 	bl	80002c8 <__aeabi_dsub>
 80239d0:	460b      	mov	r3, r1
 80239d2:	4602      	mov	r2, r0
 80239d4:	493a      	ldr	r1, [pc, #232]	; (8023ac0 <__ieee754_pow+0xa48>)
 80239d6:	2000      	movs	r0, #0
 80239d8:	f7dc fc76 	bl	80002c8 <__aeabi_dsub>
 80239dc:	ec41 0b10 	vmov	d0, r0, r1
 80239e0:	ee10 3a90 	vmov	r3, s1
 80239e4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80239e8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80239ec:	da2b      	bge.n	8023a46 <__ieee754_pow+0x9ce>
 80239ee:	4650      	mov	r0, sl
 80239f0:	f000 f966 	bl	8023cc0 <scalbn>
 80239f4:	ec51 0b10 	vmov	r0, r1, d0
 80239f8:	ec53 2b18 	vmov	r2, r3, d8
 80239fc:	f7ff bbed 	b.w	80231da <__ieee754_pow+0x162>
 8023a00:	4b30      	ldr	r3, [pc, #192]	; (8023ac4 <__ieee754_pow+0xa4c>)
 8023a02:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8023a06:	429e      	cmp	r6, r3
 8023a08:	f77f af0c 	ble.w	8023824 <__ieee754_pow+0x7ac>
 8023a0c:	4b2e      	ldr	r3, [pc, #184]	; (8023ac8 <__ieee754_pow+0xa50>)
 8023a0e:	440b      	add	r3, r1
 8023a10:	4303      	orrs	r3, r0
 8023a12:	d009      	beq.n	8023a28 <__ieee754_pow+0x9b0>
 8023a14:	ec51 0b18 	vmov	r0, r1, d8
 8023a18:	2200      	movs	r2, #0
 8023a1a:	2300      	movs	r3, #0
 8023a1c:	f7dd f87e 	bl	8000b1c <__aeabi_dcmplt>
 8023a20:	3800      	subs	r0, #0
 8023a22:	bf18      	it	ne
 8023a24:	2001      	movne	r0, #1
 8023a26:	e447      	b.n	80232b8 <__ieee754_pow+0x240>
 8023a28:	4622      	mov	r2, r4
 8023a2a:	462b      	mov	r3, r5
 8023a2c:	f7dc fc4c 	bl	80002c8 <__aeabi_dsub>
 8023a30:	4642      	mov	r2, r8
 8023a32:	464b      	mov	r3, r9
 8023a34:	f7dd f886 	bl	8000b44 <__aeabi_dcmpge>
 8023a38:	2800      	cmp	r0, #0
 8023a3a:	f43f aef3 	beq.w	8023824 <__ieee754_pow+0x7ac>
 8023a3e:	e7e9      	b.n	8023a14 <__ieee754_pow+0x99c>
 8023a40:	f04f 0a00 	mov.w	sl, #0
 8023a44:	e71a      	b.n	802387c <__ieee754_pow+0x804>
 8023a46:	ec51 0b10 	vmov	r0, r1, d0
 8023a4a:	4619      	mov	r1, r3
 8023a4c:	e7d4      	b.n	80239f8 <__ieee754_pow+0x980>
 8023a4e:	491c      	ldr	r1, [pc, #112]	; (8023ac0 <__ieee754_pow+0xa48>)
 8023a50:	2000      	movs	r0, #0
 8023a52:	f7ff bb30 	b.w	80230b6 <__ieee754_pow+0x3e>
 8023a56:	2000      	movs	r0, #0
 8023a58:	2100      	movs	r1, #0
 8023a5a:	f7ff bb2c 	b.w	80230b6 <__ieee754_pow+0x3e>
 8023a5e:	4630      	mov	r0, r6
 8023a60:	4639      	mov	r1, r7
 8023a62:	f7ff bb28 	b.w	80230b6 <__ieee754_pow+0x3e>
 8023a66:	9204      	str	r2, [sp, #16]
 8023a68:	f7ff bb7a 	b.w	8023160 <__ieee754_pow+0xe8>
 8023a6c:	2300      	movs	r3, #0
 8023a6e:	f7ff bb64 	b.w	802313a <__ieee754_pow+0xc2>
 8023a72:	bf00      	nop
 8023a74:	f3af 8000 	nop.w
 8023a78:	00000000 	.word	0x00000000
 8023a7c:	3fe62e43 	.word	0x3fe62e43
 8023a80:	fefa39ef 	.word	0xfefa39ef
 8023a84:	3fe62e42 	.word	0x3fe62e42
 8023a88:	0ca86c39 	.word	0x0ca86c39
 8023a8c:	be205c61 	.word	0xbe205c61
 8023a90:	72bea4d0 	.word	0x72bea4d0
 8023a94:	3e663769 	.word	0x3e663769
 8023a98:	c5d26bf1 	.word	0xc5d26bf1
 8023a9c:	3ebbbd41 	.word	0x3ebbbd41
 8023aa0:	af25de2c 	.word	0xaf25de2c
 8023aa4:	3f11566a 	.word	0x3f11566a
 8023aa8:	16bebd93 	.word	0x16bebd93
 8023aac:	3f66c16c 	.word	0x3f66c16c
 8023ab0:	5555553e 	.word	0x5555553e
 8023ab4:	3fc55555 	.word	0x3fc55555
 8023ab8:	3fe00000 	.word	0x3fe00000
 8023abc:	000fffff 	.word	0x000fffff
 8023ac0:	3ff00000 	.word	0x3ff00000
 8023ac4:	4090cbff 	.word	0x4090cbff
 8023ac8:	3f6f3400 	.word	0x3f6f3400
 8023acc:	652b82fe 	.word	0x652b82fe
 8023ad0:	3c971547 	.word	0x3c971547

08023ad4 <__ieee754_sqrt>:
 8023ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8023ad8:	ec55 4b10 	vmov	r4, r5, d0
 8023adc:	4e55      	ldr	r6, [pc, #340]	; (8023c34 <__ieee754_sqrt+0x160>)
 8023ade:	43ae      	bics	r6, r5
 8023ae0:	ee10 0a10 	vmov	r0, s0
 8023ae4:	ee10 3a10 	vmov	r3, s0
 8023ae8:	462a      	mov	r2, r5
 8023aea:	4629      	mov	r1, r5
 8023aec:	d110      	bne.n	8023b10 <__ieee754_sqrt+0x3c>
 8023aee:	ee10 2a10 	vmov	r2, s0
 8023af2:	462b      	mov	r3, r5
 8023af4:	f7dc fda0 	bl	8000638 <__aeabi_dmul>
 8023af8:	4602      	mov	r2, r0
 8023afa:	460b      	mov	r3, r1
 8023afc:	4620      	mov	r0, r4
 8023afe:	4629      	mov	r1, r5
 8023b00:	f7dc fbe4 	bl	80002cc <__adddf3>
 8023b04:	4604      	mov	r4, r0
 8023b06:	460d      	mov	r5, r1
 8023b08:	ec45 4b10 	vmov	d0, r4, r5
 8023b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8023b10:	2d00      	cmp	r5, #0
 8023b12:	dc10      	bgt.n	8023b36 <__ieee754_sqrt+0x62>
 8023b14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8023b18:	4330      	orrs	r0, r6
 8023b1a:	d0f5      	beq.n	8023b08 <__ieee754_sqrt+0x34>
 8023b1c:	b15d      	cbz	r5, 8023b36 <__ieee754_sqrt+0x62>
 8023b1e:	ee10 2a10 	vmov	r2, s0
 8023b22:	462b      	mov	r3, r5
 8023b24:	ee10 0a10 	vmov	r0, s0
 8023b28:	f7dc fbce 	bl	80002c8 <__aeabi_dsub>
 8023b2c:	4602      	mov	r2, r0
 8023b2e:	460b      	mov	r3, r1
 8023b30:	f7dc feac 	bl	800088c <__aeabi_ddiv>
 8023b34:	e7e6      	b.n	8023b04 <__ieee754_sqrt+0x30>
 8023b36:	1512      	asrs	r2, r2, #20
 8023b38:	d074      	beq.n	8023c24 <__ieee754_sqrt+0x150>
 8023b3a:	07d4      	lsls	r4, r2, #31
 8023b3c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8023b40:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8023b44:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8023b48:	bf5e      	ittt	pl
 8023b4a:	0fda      	lsrpl	r2, r3, #31
 8023b4c:	005b      	lslpl	r3, r3, #1
 8023b4e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8023b52:	2400      	movs	r4, #0
 8023b54:	0fda      	lsrs	r2, r3, #31
 8023b56:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8023b5a:	107f      	asrs	r7, r7, #1
 8023b5c:	005b      	lsls	r3, r3, #1
 8023b5e:	2516      	movs	r5, #22
 8023b60:	4620      	mov	r0, r4
 8023b62:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8023b66:	1886      	adds	r6, r0, r2
 8023b68:	428e      	cmp	r6, r1
 8023b6a:	bfde      	ittt	le
 8023b6c:	1b89      	suble	r1, r1, r6
 8023b6e:	18b0      	addle	r0, r6, r2
 8023b70:	18a4      	addle	r4, r4, r2
 8023b72:	0049      	lsls	r1, r1, #1
 8023b74:	3d01      	subs	r5, #1
 8023b76:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8023b7a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8023b7e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023b82:	d1f0      	bne.n	8023b66 <__ieee754_sqrt+0x92>
 8023b84:	462a      	mov	r2, r5
 8023b86:	f04f 0e20 	mov.w	lr, #32
 8023b8a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8023b8e:	4281      	cmp	r1, r0
 8023b90:	eb06 0c05 	add.w	ip, r6, r5
 8023b94:	dc02      	bgt.n	8023b9c <__ieee754_sqrt+0xc8>
 8023b96:	d113      	bne.n	8023bc0 <__ieee754_sqrt+0xec>
 8023b98:	459c      	cmp	ip, r3
 8023b9a:	d811      	bhi.n	8023bc0 <__ieee754_sqrt+0xec>
 8023b9c:	f1bc 0f00 	cmp.w	ip, #0
 8023ba0:	eb0c 0506 	add.w	r5, ip, r6
 8023ba4:	da43      	bge.n	8023c2e <__ieee754_sqrt+0x15a>
 8023ba6:	2d00      	cmp	r5, #0
 8023ba8:	db41      	blt.n	8023c2e <__ieee754_sqrt+0x15a>
 8023baa:	f100 0801 	add.w	r8, r0, #1
 8023bae:	1a09      	subs	r1, r1, r0
 8023bb0:	459c      	cmp	ip, r3
 8023bb2:	bf88      	it	hi
 8023bb4:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8023bb8:	eba3 030c 	sub.w	r3, r3, ip
 8023bbc:	4432      	add	r2, r6
 8023bbe:	4640      	mov	r0, r8
 8023bc0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8023bc4:	f1be 0e01 	subs.w	lr, lr, #1
 8023bc8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8023bcc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8023bd0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8023bd4:	d1db      	bne.n	8023b8e <__ieee754_sqrt+0xba>
 8023bd6:	430b      	orrs	r3, r1
 8023bd8:	d006      	beq.n	8023be8 <__ieee754_sqrt+0x114>
 8023bda:	1c50      	adds	r0, r2, #1
 8023bdc:	bf13      	iteet	ne
 8023bde:	3201      	addne	r2, #1
 8023be0:	3401      	addeq	r4, #1
 8023be2:	4672      	moveq	r2, lr
 8023be4:	f022 0201 	bicne.w	r2, r2, #1
 8023be8:	1063      	asrs	r3, r4, #1
 8023bea:	0852      	lsrs	r2, r2, #1
 8023bec:	07e1      	lsls	r1, r4, #31
 8023bee:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8023bf2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8023bf6:	bf48      	it	mi
 8023bf8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8023bfc:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8023c00:	4614      	mov	r4, r2
 8023c02:	e781      	b.n	8023b08 <__ieee754_sqrt+0x34>
 8023c04:	0ad9      	lsrs	r1, r3, #11
 8023c06:	3815      	subs	r0, #21
 8023c08:	055b      	lsls	r3, r3, #21
 8023c0a:	2900      	cmp	r1, #0
 8023c0c:	d0fa      	beq.n	8023c04 <__ieee754_sqrt+0x130>
 8023c0e:	02cd      	lsls	r5, r1, #11
 8023c10:	d50a      	bpl.n	8023c28 <__ieee754_sqrt+0x154>
 8023c12:	f1c2 0420 	rsb	r4, r2, #32
 8023c16:	fa23 f404 	lsr.w	r4, r3, r4
 8023c1a:	1e55      	subs	r5, r2, #1
 8023c1c:	4093      	lsls	r3, r2
 8023c1e:	4321      	orrs	r1, r4
 8023c20:	1b42      	subs	r2, r0, r5
 8023c22:	e78a      	b.n	8023b3a <__ieee754_sqrt+0x66>
 8023c24:	4610      	mov	r0, r2
 8023c26:	e7f0      	b.n	8023c0a <__ieee754_sqrt+0x136>
 8023c28:	0049      	lsls	r1, r1, #1
 8023c2a:	3201      	adds	r2, #1
 8023c2c:	e7ef      	b.n	8023c0e <__ieee754_sqrt+0x13a>
 8023c2e:	4680      	mov	r8, r0
 8023c30:	e7bd      	b.n	8023bae <__ieee754_sqrt+0xda>
 8023c32:	bf00      	nop
 8023c34:	7ff00000 	.word	0x7ff00000

08023c38 <with_errno>:
 8023c38:	b570      	push	{r4, r5, r6, lr}
 8023c3a:	4604      	mov	r4, r0
 8023c3c:	460d      	mov	r5, r1
 8023c3e:	4616      	mov	r6, r2
 8023c40:	f000 f8d2 	bl	8023de8 <__errno>
 8023c44:	4629      	mov	r1, r5
 8023c46:	6006      	str	r6, [r0, #0]
 8023c48:	4620      	mov	r0, r4
 8023c4a:	bd70      	pop	{r4, r5, r6, pc}

08023c4c <xflow>:
 8023c4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8023c4e:	4614      	mov	r4, r2
 8023c50:	461d      	mov	r5, r3
 8023c52:	b108      	cbz	r0, 8023c58 <xflow+0xc>
 8023c54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8023c58:	e9cd 2300 	strd	r2, r3, [sp]
 8023c5c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8023c60:	4620      	mov	r0, r4
 8023c62:	4629      	mov	r1, r5
 8023c64:	f7dc fce8 	bl	8000638 <__aeabi_dmul>
 8023c68:	2222      	movs	r2, #34	; 0x22
 8023c6a:	b003      	add	sp, #12
 8023c6c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8023c70:	f7ff bfe2 	b.w	8023c38 <with_errno>

08023c74 <__math_uflow>:
 8023c74:	b508      	push	{r3, lr}
 8023c76:	2200      	movs	r2, #0
 8023c78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8023c7c:	f7ff ffe6 	bl	8023c4c <xflow>
 8023c80:	ec41 0b10 	vmov	d0, r0, r1
 8023c84:	bd08      	pop	{r3, pc}

08023c86 <__math_oflow>:
 8023c86:	b508      	push	{r3, lr}
 8023c88:	2200      	movs	r2, #0
 8023c8a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8023c8e:	f7ff ffdd 	bl	8023c4c <xflow>
 8023c92:	ec41 0b10 	vmov	d0, r0, r1
 8023c96:	bd08      	pop	{r3, pc}

08023c98 <fabs>:
 8023c98:	ec51 0b10 	vmov	r0, r1, d0
 8023c9c:	ee10 2a10 	vmov	r2, s0
 8023ca0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8023ca4:	ec43 2b10 	vmov	d0, r2, r3
 8023ca8:	4770      	bx	lr

08023caa <finite>:
 8023caa:	b082      	sub	sp, #8
 8023cac:	ed8d 0b00 	vstr	d0, [sp]
 8023cb0:	9801      	ldr	r0, [sp, #4]
 8023cb2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8023cb6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8023cba:	0fc0      	lsrs	r0, r0, #31
 8023cbc:	b002      	add	sp, #8
 8023cbe:	4770      	bx	lr

08023cc0 <scalbn>:
 8023cc0:	b570      	push	{r4, r5, r6, lr}
 8023cc2:	ec55 4b10 	vmov	r4, r5, d0
 8023cc6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8023cca:	4606      	mov	r6, r0
 8023ccc:	462b      	mov	r3, r5
 8023cce:	b99a      	cbnz	r2, 8023cf8 <scalbn+0x38>
 8023cd0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8023cd4:	4323      	orrs	r3, r4
 8023cd6:	d036      	beq.n	8023d46 <scalbn+0x86>
 8023cd8:	4b39      	ldr	r3, [pc, #228]	; (8023dc0 <scalbn+0x100>)
 8023cda:	4629      	mov	r1, r5
 8023cdc:	ee10 0a10 	vmov	r0, s0
 8023ce0:	2200      	movs	r2, #0
 8023ce2:	f7dc fca9 	bl	8000638 <__aeabi_dmul>
 8023ce6:	4b37      	ldr	r3, [pc, #220]	; (8023dc4 <scalbn+0x104>)
 8023ce8:	429e      	cmp	r6, r3
 8023cea:	4604      	mov	r4, r0
 8023cec:	460d      	mov	r5, r1
 8023cee:	da10      	bge.n	8023d12 <scalbn+0x52>
 8023cf0:	a32b      	add	r3, pc, #172	; (adr r3, 8023da0 <scalbn+0xe0>)
 8023cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023cf6:	e03a      	b.n	8023d6e <scalbn+0xae>
 8023cf8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8023cfc:	428a      	cmp	r2, r1
 8023cfe:	d10c      	bne.n	8023d1a <scalbn+0x5a>
 8023d00:	ee10 2a10 	vmov	r2, s0
 8023d04:	4620      	mov	r0, r4
 8023d06:	4629      	mov	r1, r5
 8023d08:	f7dc fae0 	bl	80002cc <__adddf3>
 8023d0c:	4604      	mov	r4, r0
 8023d0e:	460d      	mov	r5, r1
 8023d10:	e019      	b.n	8023d46 <scalbn+0x86>
 8023d12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8023d16:	460b      	mov	r3, r1
 8023d18:	3a36      	subs	r2, #54	; 0x36
 8023d1a:	4432      	add	r2, r6
 8023d1c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8023d20:	428a      	cmp	r2, r1
 8023d22:	dd08      	ble.n	8023d36 <scalbn+0x76>
 8023d24:	2d00      	cmp	r5, #0
 8023d26:	a120      	add	r1, pc, #128	; (adr r1, 8023da8 <scalbn+0xe8>)
 8023d28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d2c:	da1c      	bge.n	8023d68 <scalbn+0xa8>
 8023d2e:	a120      	add	r1, pc, #128	; (adr r1, 8023db0 <scalbn+0xf0>)
 8023d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d34:	e018      	b.n	8023d68 <scalbn+0xa8>
 8023d36:	2a00      	cmp	r2, #0
 8023d38:	dd08      	ble.n	8023d4c <scalbn+0x8c>
 8023d3a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023d3e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023d42:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8023d46:	ec45 4b10 	vmov	d0, r4, r5
 8023d4a:	bd70      	pop	{r4, r5, r6, pc}
 8023d4c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8023d50:	da19      	bge.n	8023d86 <scalbn+0xc6>
 8023d52:	f24c 3350 	movw	r3, #50000	; 0xc350
 8023d56:	429e      	cmp	r6, r3
 8023d58:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8023d5c:	dd0a      	ble.n	8023d74 <scalbn+0xb4>
 8023d5e:	a112      	add	r1, pc, #72	; (adr r1, 8023da8 <scalbn+0xe8>)
 8023d60:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d64:	2b00      	cmp	r3, #0
 8023d66:	d1e2      	bne.n	8023d2e <scalbn+0x6e>
 8023d68:	a30f      	add	r3, pc, #60	; (adr r3, 8023da8 <scalbn+0xe8>)
 8023d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8023d6e:	f7dc fc63 	bl	8000638 <__aeabi_dmul>
 8023d72:	e7cb      	b.n	8023d0c <scalbn+0x4c>
 8023d74:	a10a      	add	r1, pc, #40	; (adr r1, 8023da0 <scalbn+0xe0>)
 8023d76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d7a:	2b00      	cmp	r3, #0
 8023d7c:	d0b8      	beq.n	8023cf0 <scalbn+0x30>
 8023d7e:	a10e      	add	r1, pc, #56	; (adr r1, 8023db8 <scalbn+0xf8>)
 8023d80:	e9d1 0100 	ldrd	r0, r1, [r1]
 8023d84:	e7b4      	b.n	8023cf0 <scalbn+0x30>
 8023d86:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8023d8a:	3236      	adds	r2, #54	; 0x36
 8023d8c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8023d90:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8023d94:	4620      	mov	r0, r4
 8023d96:	4b0c      	ldr	r3, [pc, #48]	; (8023dc8 <scalbn+0x108>)
 8023d98:	2200      	movs	r2, #0
 8023d9a:	e7e8      	b.n	8023d6e <scalbn+0xae>
 8023d9c:	f3af 8000 	nop.w
 8023da0:	c2f8f359 	.word	0xc2f8f359
 8023da4:	01a56e1f 	.word	0x01a56e1f
 8023da8:	8800759c 	.word	0x8800759c
 8023dac:	7e37e43c 	.word	0x7e37e43c
 8023db0:	8800759c 	.word	0x8800759c
 8023db4:	fe37e43c 	.word	0xfe37e43c
 8023db8:	c2f8f359 	.word	0xc2f8f359
 8023dbc:	81a56e1f 	.word	0x81a56e1f
 8023dc0:	43500000 	.word	0x43500000
 8023dc4:	ffff3cb0 	.word	0xffff3cb0
 8023dc8:	3c900000 	.word	0x3c900000

08023dcc <abort>:
 8023dcc:	b508      	push	{r3, lr}
 8023dce:	2006      	movs	r0, #6
 8023dd0:	f000 fb46 	bl	8024460 <raise>
 8023dd4:	2001      	movs	r0, #1
 8023dd6:	f7e6 ffe9 	bl	800adac <_exit>

08023dda <atexit>:
 8023dda:	2300      	movs	r3, #0
 8023ddc:	4601      	mov	r1, r0
 8023dde:	461a      	mov	r2, r3
 8023de0:	4618      	mov	r0, r3
 8023de2:	f000 bc01 	b.w	80245e8 <__register_exitproc>
	...

08023de8 <__errno>:
 8023de8:	4b01      	ldr	r3, [pc, #4]	; (8023df0 <__errno+0x8>)
 8023dea:	6818      	ldr	r0, [r3, #0]
 8023dec:	4770      	bx	lr
 8023dee:	bf00      	nop
 8023df0:	20000038 	.word	0x20000038

08023df4 <std>:
 8023df4:	2300      	movs	r3, #0
 8023df6:	b510      	push	{r4, lr}
 8023df8:	4604      	mov	r4, r0
 8023dfa:	e9c0 3300 	strd	r3, r3, [r0]
 8023dfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8023e02:	6083      	str	r3, [r0, #8]
 8023e04:	8181      	strh	r1, [r0, #12]
 8023e06:	6643      	str	r3, [r0, #100]	; 0x64
 8023e08:	81c2      	strh	r2, [r0, #14]
 8023e0a:	6183      	str	r3, [r0, #24]
 8023e0c:	4619      	mov	r1, r3
 8023e0e:	2208      	movs	r2, #8
 8023e10:	305c      	adds	r0, #92	; 0x5c
 8023e12:	f000 f955 	bl	80240c0 <memset>
 8023e16:	4b05      	ldr	r3, [pc, #20]	; (8023e2c <std+0x38>)
 8023e18:	6263      	str	r3, [r4, #36]	; 0x24
 8023e1a:	4b05      	ldr	r3, [pc, #20]	; (8023e30 <std+0x3c>)
 8023e1c:	62a3      	str	r3, [r4, #40]	; 0x28
 8023e1e:	4b05      	ldr	r3, [pc, #20]	; (8023e34 <std+0x40>)
 8023e20:	62e3      	str	r3, [r4, #44]	; 0x2c
 8023e22:	4b05      	ldr	r3, [pc, #20]	; (8023e38 <std+0x44>)
 8023e24:	6224      	str	r4, [r4, #32]
 8023e26:	6323      	str	r3, [r4, #48]	; 0x30
 8023e28:	bd10      	pop	{r4, pc}
 8023e2a:	bf00      	nop
 8023e2c:	080244d9 	.word	0x080244d9
 8023e30:	080244fb 	.word	0x080244fb
 8023e34:	08024533 	.word	0x08024533
 8023e38:	08024557 	.word	0x08024557

08023e3c <_cleanup_r>:
 8023e3c:	4901      	ldr	r1, [pc, #4]	; (8023e44 <_cleanup_r+0x8>)
 8023e3e:	f000 b8af 	b.w	8023fa0 <_fwalk_reent>
 8023e42:	bf00      	nop
 8023e44:	08024815 	.word	0x08024815

08023e48 <__sfmoreglue>:
 8023e48:	b570      	push	{r4, r5, r6, lr}
 8023e4a:	2268      	movs	r2, #104	; 0x68
 8023e4c:	1e4d      	subs	r5, r1, #1
 8023e4e:	4355      	muls	r5, r2
 8023e50:	460e      	mov	r6, r1
 8023e52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8023e56:	f000 f9a7 	bl	80241a8 <_malloc_r>
 8023e5a:	4604      	mov	r4, r0
 8023e5c:	b140      	cbz	r0, 8023e70 <__sfmoreglue+0x28>
 8023e5e:	2100      	movs	r1, #0
 8023e60:	e9c0 1600 	strd	r1, r6, [r0]
 8023e64:	300c      	adds	r0, #12
 8023e66:	60a0      	str	r0, [r4, #8]
 8023e68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8023e6c:	f000 f928 	bl	80240c0 <memset>
 8023e70:	4620      	mov	r0, r4
 8023e72:	bd70      	pop	{r4, r5, r6, pc}

08023e74 <__sfp_lock_acquire>:
 8023e74:	4801      	ldr	r0, [pc, #4]	; (8023e7c <__sfp_lock_acquire+0x8>)
 8023e76:	f000 b8d8 	b.w	802402a <__retarget_lock_acquire_recursive>
 8023e7a:	bf00      	nop
 8023e7c:	2000c121 	.word	0x2000c121

08023e80 <__sfp_lock_release>:
 8023e80:	4801      	ldr	r0, [pc, #4]	; (8023e88 <__sfp_lock_release+0x8>)
 8023e82:	f000 b8d4 	b.w	802402e <__retarget_lock_release_recursive>
 8023e86:	bf00      	nop
 8023e88:	2000c121 	.word	0x2000c121

08023e8c <__sinit_lock_acquire>:
 8023e8c:	4801      	ldr	r0, [pc, #4]	; (8023e94 <__sinit_lock_acquire+0x8>)
 8023e8e:	f000 b8cc 	b.w	802402a <__retarget_lock_acquire_recursive>
 8023e92:	bf00      	nop
 8023e94:	2000c122 	.word	0x2000c122

08023e98 <__sinit_lock_release>:
 8023e98:	4801      	ldr	r0, [pc, #4]	; (8023ea0 <__sinit_lock_release+0x8>)
 8023e9a:	f000 b8c8 	b.w	802402e <__retarget_lock_release_recursive>
 8023e9e:	bf00      	nop
 8023ea0:	2000c122 	.word	0x2000c122

08023ea4 <__sinit>:
 8023ea4:	b510      	push	{r4, lr}
 8023ea6:	4604      	mov	r4, r0
 8023ea8:	f7ff fff0 	bl	8023e8c <__sinit_lock_acquire>
 8023eac:	69a3      	ldr	r3, [r4, #24]
 8023eae:	b11b      	cbz	r3, 8023eb8 <__sinit+0x14>
 8023eb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8023eb4:	f7ff bff0 	b.w	8023e98 <__sinit_lock_release>
 8023eb8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8023ebc:	6523      	str	r3, [r4, #80]	; 0x50
 8023ebe:	4b13      	ldr	r3, [pc, #76]	; (8023f0c <__sinit+0x68>)
 8023ec0:	4a13      	ldr	r2, [pc, #76]	; (8023f10 <__sinit+0x6c>)
 8023ec2:	681b      	ldr	r3, [r3, #0]
 8023ec4:	62a2      	str	r2, [r4, #40]	; 0x28
 8023ec6:	42a3      	cmp	r3, r4
 8023ec8:	bf04      	itt	eq
 8023eca:	2301      	moveq	r3, #1
 8023ecc:	61a3      	streq	r3, [r4, #24]
 8023ece:	4620      	mov	r0, r4
 8023ed0:	f000 f820 	bl	8023f14 <__sfp>
 8023ed4:	6060      	str	r0, [r4, #4]
 8023ed6:	4620      	mov	r0, r4
 8023ed8:	f000 f81c 	bl	8023f14 <__sfp>
 8023edc:	60a0      	str	r0, [r4, #8]
 8023ede:	4620      	mov	r0, r4
 8023ee0:	f000 f818 	bl	8023f14 <__sfp>
 8023ee4:	2200      	movs	r2, #0
 8023ee6:	60e0      	str	r0, [r4, #12]
 8023ee8:	2104      	movs	r1, #4
 8023eea:	6860      	ldr	r0, [r4, #4]
 8023eec:	f7ff ff82 	bl	8023df4 <std>
 8023ef0:	68a0      	ldr	r0, [r4, #8]
 8023ef2:	2201      	movs	r2, #1
 8023ef4:	2109      	movs	r1, #9
 8023ef6:	f7ff ff7d 	bl	8023df4 <std>
 8023efa:	68e0      	ldr	r0, [r4, #12]
 8023efc:	2202      	movs	r2, #2
 8023efe:	2112      	movs	r1, #18
 8023f00:	f7ff ff78 	bl	8023df4 <std>
 8023f04:	2301      	movs	r3, #1
 8023f06:	61a3      	str	r3, [r4, #24]
 8023f08:	e7d2      	b.n	8023eb0 <__sinit+0xc>
 8023f0a:	bf00      	nop
 8023f0c:	08028fa8 	.word	0x08028fa8
 8023f10:	08023e3d 	.word	0x08023e3d

08023f14 <__sfp>:
 8023f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8023f16:	4607      	mov	r7, r0
 8023f18:	f7ff ffac 	bl	8023e74 <__sfp_lock_acquire>
 8023f1c:	4b1e      	ldr	r3, [pc, #120]	; (8023f98 <__sfp+0x84>)
 8023f1e:	681e      	ldr	r6, [r3, #0]
 8023f20:	69b3      	ldr	r3, [r6, #24]
 8023f22:	b913      	cbnz	r3, 8023f2a <__sfp+0x16>
 8023f24:	4630      	mov	r0, r6
 8023f26:	f7ff ffbd 	bl	8023ea4 <__sinit>
 8023f2a:	3648      	adds	r6, #72	; 0x48
 8023f2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8023f30:	3b01      	subs	r3, #1
 8023f32:	d503      	bpl.n	8023f3c <__sfp+0x28>
 8023f34:	6833      	ldr	r3, [r6, #0]
 8023f36:	b30b      	cbz	r3, 8023f7c <__sfp+0x68>
 8023f38:	6836      	ldr	r6, [r6, #0]
 8023f3a:	e7f7      	b.n	8023f2c <__sfp+0x18>
 8023f3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8023f40:	b9d5      	cbnz	r5, 8023f78 <__sfp+0x64>
 8023f42:	4b16      	ldr	r3, [pc, #88]	; (8023f9c <__sfp+0x88>)
 8023f44:	60e3      	str	r3, [r4, #12]
 8023f46:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8023f4a:	6665      	str	r5, [r4, #100]	; 0x64
 8023f4c:	f000 f86c 	bl	8024028 <__retarget_lock_init_recursive>
 8023f50:	f7ff ff96 	bl	8023e80 <__sfp_lock_release>
 8023f54:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8023f58:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8023f5c:	6025      	str	r5, [r4, #0]
 8023f5e:	61a5      	str	r5, [r4, #24]
 8023f60:	2208      	movs	r2, #8
 8023f62:	4629      	mov	r1, r5
 8023f64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8023f68:	f000 f8aa 	bl	80240c0 <memset>
 8023f6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8023f70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8023f74:	4620      	mov	r0, r4
 8023f76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8023f78:	3468      	adds	r4, #104	; 0x68
 8023f7a:	e7d9      	b.n	8023f30 <__sfp+0x1c>
 8023f7c:	2104      	movs	r1, #4
 8023f7e:	4638      	mov	r0, r7
 8023f80:	f7ff ff62 	bl	8023e48 <__sfmoreglue>
 8023f84:	4604      	mov	r4, r0
 8023f86:	6030      	str	r0, [r6, #0]
 8023f88:	2800      	cmp	r0, #0
 8023f8a:	d1d5      	bne.n	8023f38 <__sfp+0x24>
 8023f8c:	f7ff ff78 	bl	8023e80 <__sfp_lock_release>
 8023f90:	230c      	movs	r3, #12
 8023f92:	603b      	str	r3, [r7, #0]
 8023f94:	e7ee      	b.n	8023f74 <__sfp+0x60>
 8023f96:	bf00      	nop
 8023f98:	08028fa8 	.word	0x08028fa8
 8023f9c:	ffff0001 	.word	0xffff0001

08023fa0 <_fwalk_reent>:
 8023fa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8023fa4:	4606      	mov	r6, r0
 8023fa6:	4688      	mov	r8, r1
 8023fa8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8023fac:	2700      	movs	r7, #0
 8023fae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8023fb2:	f1b9 0901 	subs.w	r9, r9, #1
 8023fb6:	d505      	bpl.n	8023fc4 <_fwalk_reent+0x24>
 8023fb8:	6824      	ldr	r4, [r4, #0]
 8023fba:	2c00      	cmp	r4, #0
 8023fbc:	d1f7      	bne.n	8023fae <_fwalk_reent+0xe>
 8023fbe:	4638      	mov	r0, r7
 8023fc0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8023fc4:	89ab      	ldrh	r3, [r5, #12]
 8023fc6:	2b01      	cmp	r3, #1
 8023fc8:	d907      	bls.n	8023fda <_fwalk_reent+0x3a>
 8023fca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8023fce:	3301      	adds	r3, #1
 8023fd0:	d003      	beq.n	8023fda <_fwalk_reent+0x3a>
 8023fd2:	4629      	mov	r1, r5
 8023fd4:	4630      	mov	r0, r6
 8023fd6:	47c0      	blx	r8
 8023fd8:	4307      	orrs	r7, r0
 8023fda:	3568      	adds	r5, #104	; 0x68
 8023fdc:	e7e9      	b.n	8023fb2 <_fwalk_reent+0x12>
	...

08023fe0 <__libc_init_array>:
 8023fe0:	b570      	push	{r4, r5, r6, lr}
 8023fe2:	4d0d      	ldr	r5, [pc, #52]	; (8024018 <__libc_init_array+0x38>)
 8023fe4:	4c0d      	ldr	r4, [pc, #52]	; (802401c <__libc_init_array+0x3c>)
 8023fe6:	1b64      	subs	r4, r4, r5
 8023fe8:	10a4      	asrs	r4, r4, #2
 8023fea:	2600      	movs	r6, #0
 8023fec:	42a6      	cmp	r6, r4
 8023fee:	d109      	bne.n	8024004 <__libc_init_array+0x24>
 8023ff0:	4d0b      	ldr	r5, [pc, #44]	; (8024020 <__libc_init_array+0x40>)
 8023ff2:	4c0c      	ldr	r4, [pc, #48]	; (8024024 <__libc_init_array+0x44>)
 8023ff4:	f001 fa4a 	bl	802548c <_init>
 8023ff8:	1b64      	subs	r4, r4, r5
 8023ffa:	10a4      	asrs	r4, r4, #2
 8023ffc:	2600      	movs	r6, #0
 8023ffe:	42a6      	cmp	r6, r4
 8024000:	d105      	bne.n	802400e <__libc_init_array+0x2e>
 8024002:	bd70      	pop	{r4, r5, r6, pc}
 8024004:	f855 3b04 	ldr.w	r3, [r5], #4
 8024008:	4798      	blx	r3
 802400a:	3601      	adds	r6, #1
 802400c:	e7ee      	b.n	8023fec <__libc_init_array+0xc>
 802400e:	f855 3b04 	ldr.w	r3, [r5], #4
 8024012:	4798      	blx	r3
 8024014:	3601      	adds	r6, #1
 8024016:	e7f2      	b.n	8023ffe <__libc_init_array+0x1e>
 8024018:	08029098 	.word	0x08029098
 802401c:	08029098 	.word	0x08029098
 8024020:	08029098 	.word	0x08029098
 8024024:	080290a0 	.word	0x080290a0

08024028 <__retarget_lock_init_recursive>:
 8024028:	4770      	bx	lr

0802402a <__retarget_lock_acquire_recursive>:
 802402a:	4770      	bx	lr

0802402c <__retarget_lock_release>:
 802402c:	4770      	bx	lr

0802402e <__retarget_lock_release_recursive>:
 802402e:	4770      	bx	lr

08024030 <malloc>:
 8024030:	4b02      	ldr	r3, [pc, #8]	; (802403c <malloc+0xc>)
 8024032:	4601      	mov	r1, r0
 8024034:	6818      	ldr	r0, [r3, #0]
 8024036:	f000 b8b7 	b.w	80241a8 <_malloc_r>
 802403a:	bf00      	nop
 802403c:	20000038 	.word	0x20000038

08024040 <free>:
 8024040:	4b02      	ldr	r3, [pc, #8]	; (802404c <free+0xc>)
 8024042:	4601      	mov	r1, r0
 8024044:	6818      	ldr	r0, [r3, #0]
 8024046:	f000 b843 	b.w	80240d0 <_free_r>
 802404a:	bf00      	nop
 802404c:	20000038 	.word	0x20000038

08024050 <memcmp>:
 8024050:	b510      	push	{r4, lr}
 8024052:	3901      	subs	r1, #1
 8024054:	4402      	add	r2, r0
 8024056:	4290      	cmp	r0, r2
 8024058:	d101      	bne.n	802405e <memcmp+0xe>
 802405a:	2000      	movs	r0, #0
 802405c:	e005      	b.n	802406a <memcmp+0x1a>
 802405e:	7803      	ldrb	r3, [r0, #0]
 8024060:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8024064:	42a3      	cmp	r3, r4
 8024066:	d001      	beq.n	802406c <memcmp+0x1c>
 8024068:	1b18      	subs	r0, r3, r4
 802406a:	bd10      	pop	{r4, pc}
 802406c:	3001      	adds	r0, #1
 802406e:	e7f2      	b.n	8024056 <memcmp+0x6>

08024070 <memcpy>:
 8024070:	440a      	add	r2, r1
 8024072:	4291      	cmp	r1, r2
 8024074:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8024078:	d100      	bne.n	802407c <memcpy+0xc>
 802407a:	4770      	bx	lr
 802407c:	b510      	push	{r4, lr}
 802407e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8024082:	f803 4f01 	strb.w	r4, [r3, #1]!
 8024086:	4291      	cmp	r1, r2
 8024088:	d1f9      	bne.n	802407e <memcpy+0xe>
 802408a:	bd10      	pop	{r4, pc}

0802408c <memmove>:
 802408c:	4288      	cmp	r0, r1
 802408e:	b510      	push	{r4, lr}
 8024090:	eb01 0402 	add.w	r4, r1, r2
 8024094:	d902      	bls.n	802409c <memmove+0x10>
 8024096:	4284      	cmp	r4, r0
 8024098:	4623      	mov	r3, r4
 802409a:	d807      	bhi.n	80240ac <memmove+0x20>
 802409c:	1e43      	subs	r3, r0, #1
 802409e:	42a1      	cmp	r1, r4
 80240a0:	d008      	beq.n	80240b4 <memmove+0x28>
 80240a2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80240a6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80240aa:	e7f8      	b.n	802409e <memmove+0x12>
 80240ac:	4402      	add	r2, r0
 80240ae:	4601      	mov	r1, r0
 80240b0:	428a      	cmp	r2, r1
 80240b2:	d100      	bne.n	80240b6 <memmove+0x2a>
 80240b4:	bd10      	pop	{r4, pc}
 80240b6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80240ba:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80240be:	e7f7      	b.n	80240b0 <memmove+0x24>

080240c0 <memset>:
 80240c0:	4402      	add	r2, r0
 80240c2:	4603      	mov	r3, r0
 80240c4:	4293      	cmp	r3, r2
 80240c6:	d100      	bne.n	80240ca <memset+0xa>
 80240c8:	4770      	bx	lr
 80240ca:	f803 1b01 	strb.w	r1, [r3], #1
 80240ce:	e7f9      	b.n	80240c4 <memset+0x4>

080240d0 <_free_r>:
 80240d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80240d2:	2900      	cmp	r1, #0
 80240d4:	d044      	beq.n	8024160 <_free_r+0x90>
 80240d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80240da:	9001      	str	r0, [sp, #4]
 80240dc:	2b00      	cmp	r3, #0
 80240de:	f1a1 0404 	sub.w	r4, r1, #4
 80240e2:	bfb8      	it	lt
 80240e4:	18e4      	addlt	r4, r4, r3
 80240e6:	f7dd f95d 	bl	80013a4 <__malloc_lock>
 80240ea:	4a1e      	ldr	r2, [pc, #120]	; (8024164 <_free_r+0x94>)
 80240ec:	9801      	ldr	r0, [sp, #4]
 80240ee:	6813      	ldr	r3, [r2, #0]
 80240f0:	b933      	cbnz	r3, 8024100 <_free_r+0x30>
 80240f2:	6063      	str	r3, [r4, #4]
 80240f4:	6014      	str	r4, [r2, #0]
 80240f6:	b003      	add	sp, #12
 80240f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80240fc:	f7dd b97d 	b.w	80013fa <__malloc_unlock>
 8024100:	42a3      	cmp	r3, r4
 8024102:	d908      	bls.n	8024116 <_free_r+0x46>
 8024104:	6825      	ldr	r5, [r4, #0]
 8024106:	1961      	adds	r1, r4, r5
 8024108:	428b      	cmp	r3, r1
 802410a:	bf01      	itttt	eq
 802410c:	6819      	ldreq	r1, [r3, #0]
 802410e:	685b      	ldreq	r3, [r3, #4]
 8024110:	1949      	addeq	r1, r1, r5
 8024112:	6021      	streq	r1, [r4, #0]
 8024114:	e7ed      	b.n	80240f2 <_free_r+0x22>
 8024116:	461a      	mov	r2, r3
 8024118:	685b      	ldr	r3, [r3, #4]
 802411a:	b10b      	cbz	r3, 8024120 <_free_r+0x50>
 802411c:	42a3      	cmp	r3, r4
 802411e:	d9fa      	bls.n	8024116 <_free_r+0x46>
 8024120:	6811      	ldr	r1, [r2, #0]
 8024122:	1855      	adds	r5, r2, r1
 8024124:	42a5      	cmp	r5, r4
 8024126:	d10b      	bne.n	8024140 <_free_r+0x70>
 8024128:	6824      	ldr	r4, [r4, #0]
 802412a:	4421      	add	r1, r4
 802412c:	1854      	adds	r4, r2, r1
 802412e:	42a3      	cmp	r3, r4
 8024130:	6011      	str	r1, [r2, #0]
 8024132:	d1e0      	bne.n	80240f6 <_free_r+0x26>
 8024134:	681c      	ldr	r4, [r3, #0]
 8024136:	685b      	ldr	r3, [r3, #4]
 8024138:	6053      	str	r3, [r2, #4]
 802413a:	4421      	add	r1, r4
 802413c:	6011      	str	r1, [r2, #0]
 802413e:	e7da      	b.n	80240f6 <_free_r+0x26>
 8024140:	d902      	bls.n	8024148 <_free_r+0x78>
 8024142:	230c      	movs	r3, #12
 8024144:	6003      	str	r3, [r0, #0]
 8024146:	e7d6      	b.n	80240f6 <_free_r+0x26>
 8024148:	6825      	ldr	r5, [r4, #0]
 802414a:	1961      	adds	r1, r4, r5
 802414c:	428b      	cmp	r3, r1
 802414e:	bf04      	itt	eq
 8024150:	6819      	ldreq	r1, [r3, #0]
 8024152:	685b      	ldreq	r3, [r3, #4]
 8024154:	6063      	str	r3, [r4, #4]
 8024156:	bf04      	itt	eq
 8024158:	1949      	addeq	r1, r1, r5
 802415a:	6021      	streq	r1, [r4, #0]
 802415c:	6054      	str	r4, [r2, #4]
 802415e:	e7ca      	b.n	80240f6 <_free_r+0x26>
 8024160:	b003      	add	sp, #12
 8024162:	bd30      	pop	{r4, r5, pc}
 8024164:	2000c124 	.word	0x2000c124

08024168 <sbrk_aligned>:
 8024168:	b570      	push	{r4, r5, r6, lr}
 802416a:	4e0e      	ldr	r6, [pc, #56]	; (80241a4 <sbrk_aligned+0x3c>)
 802416c:	460c      	mov	r4, r1
 802416e:	6831      	ldr	r1, [r6, #0]
 8024170:	4605      	mov	r5, r0
 8024172:	b911      	cbnz	r1, 802417a <sbrk_aligned+0x12>
 8024174:	f7dd f8ba 	bl	80012ec <_sbrk_r>
 8024178:	6030      	str	r0, [r6, #0]
 802417a:	4621      	mov	r1, r4
 802417c:	4628      	mov	r0, r5
 802417e:	f7dd f8b5 	bl	80012ec <_sbrk_r>
 8024182:	1c43      	adds	r3, r0, #1
 8024184:	d00a      	beq.n	802419c <sbrk_aligned+0x34>
 8024186:	1cc4      	adds	r4, r0, #3
 8024188:	f024 0403 	bic.w	r4, r4, #3
 802418c:	42a0      	cmp	r0, r4
 802418e:	d007      	beq.n	80241a0 <sbrk_aligned+0x38>
 8024190:	1a21      	subs	r1, r4, r0
 8024192:	4628      	mov	r0, r5
 8024194:	f7dd f8aa 	bl	80012ec <_sbrk_r>
 8024198:	3001      	adds	r0, #1
 802419a:	d101      	bne.n	80241a0 <sbrk_aligned+0x38>
 802419c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80241a0:	4620      	mov	r0, r4
 80241a2:	bd70      	pop	{r4, r5, r6, pc}
 80241a4:	2000c128 	.word	0x2000c128

080241a8 <_malloc_r>:
 80241a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80241ac:	1ccd      	adds	r5, r1, #3
 80241ae:	f025 0503 	bic.w	r5, r5, #3
 80241b2:	3508      	adds	r5, #8
 80241b4:	2d0c      	cmp	r5, #12
 80241b6:	bf38      	it	cc
 80241b8:	250c      	movcc	r5, #12
 80241ba:	2d00      	cmp	r5, #0
 80241bc:	4607      	mov	r7, r0
 80241be:	db01      	blt.n	80241c4 <_malloc_r+0x1c>
 80241c0:	42a9      	cmp	r1, r5
 80241c2:	d905      	bls.n	80241d0 <_malloc_r+0x28>
 80241c4:	230c      	movs	r3, #12
 80241c6:	603b      	str	r3, [r7, #0]
 80241c8:	2600      	movs	r6, #0
 80241ca:	4630      	mov	r0, r6
 80241cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80241d0:	4e2e      	ldr	r6, [pc, #184]	; (802428c <_malloc_r+0xe4>)
 80241d2:	f7dd f8e7 	bl	80013a4 <__malloc_lock>
 80241d6:	6833      	ldr	r3, [r6, #0]
 80241d8:	461c      	mov	r4, r3
 80241da:	bb34      	cbnz	r4, 802422a <_malloc_r+0x82>
 80241dc:	4629      	mov	r1, r5
 80241de:	4638      	mov	r0, r7
 80241e0:	f7ff ffc2 	bl	8024168 <sbrk_aligned>
 80241e4:	1c43      	adds	r3, r0, #1
 80241e6:	4604      	mov	r4, r0
 80241e8:	d14d      	bne.n	8024286 <_malloc_r+0xde>
 80241ea:	6834      	ldr	r4, [r6, #0]
 80241ec:	4626      	mov	r6, r4
 80241ee:	2e00      	cmp	r6, #0
 80241f0:	d140      	bne.n	8024274 <_malloc_r+0xcc>
 80241f2:	6823      	ldr	r3, [r4, #0]
 80241f4:	4631      	mov	r1, r6
 80241f6:	4638      	mov	r0, r7
 80241f8:	eb04 0803 	add.w	r8, r4, r3
 80241fc:	f7dd f876 	bl	80012ec <_sbrk_r>
 8024200:	4580      	cmp	r8, r0
 8024202:	d13a      	bne.n	802427a <_malloc_r+0xd2>
 8024204:	6821      	ldr	r1, [r4, #0]
 8024206:	3503      	adds	r5, #3
 8024208:	1a6d      	subs	r5, r5, r1
 802420a:	f025 0503 	bic.w	r5, r5, #3
 802420e:	3508      	adds	r5, #8
 8024210:	2d0c      	cmp	r5, #12
 8024212:	bf38      	it	cc
 8024214:	250c      	movcc	r5, #12
 8024216:	4629      	mov	r1, r5
 8024218:	4638      	mov	r0, r7
 802421a:	f7ff ffa5 	bl	8024168 <sbrk_aligned>
 802421e:	3001      	adds	r0, #1
 8024220:	d02b      	beq.n	802427a <_malloc_r+0xd2>
 8024222:	6823      	ldr	r3, [r4, #0]
 8024224:	442b      	add	r3, r5
 8024226:	6023      	str	r3, [r4, #0]
 8024228:	e00e      	b.n	8024248 <_malloc_r+0xa0>
 802422a:	6822      	ldr	r2, [r4, #0]
 802422c:	1b52      	subs	r2, r2, r5
 802422e:	d41e      	bmi.n	802426e <_malloc_r+0xc6>
 8024230:	2a0b      	cmp	r2, #11
 8024232:	d916      	bls.n	8024262 <_malloc_r+0xba>
 8024234:	1961      	adds	r1, r4, r5
 8024236:	42a3      	cmp	r3, r4
 8024238:	6025      	str	r5, [r4, #0]
 802423a:	bf18      	it	ne
 802423c:	6059      	strne	r1, [r3, #4]
 802423e:	6863      	ldr	r3, [r4, #4]
 8024240:	bf08      	it	eq
 8024242:	6031      	streq	r1, [r6, #0]
 8024244:	5162      	str	r2, [r4, r5]
 8024246:	604b      	str	r3, [r1, #4]
 8024248:	4638      	mov	r0, r7
 802424a:	f104 060b 	add.w	r6, r4, #11
 802424e:	f7dd f8d4 	bl	80013fa <__malloc_unlock>
 8024252:	f026 0607 	bic.w	r6, r6, #7
 8024256:	1d23      	adds	r3, r4, #4
 8024258:	1af2      	subs	r2, r6, r3
 802425a:	d0b6      	beq.n	80241ca <_malloc_r+0x22>
 802425c:	1b9b      	subs	r3, r3, r6
 802425e:	50a3      	str	r3, [r4, r2]
 8024260:	e7b3      	b.n	80241ca <_malloc_r+0x22>
 8024262:	6862      	ldr	r2, [r4, #4]
 8024264:	42a3      	cmp	r3, r4
 8024266:	bf0c      	ite	eq
 8024268:	6032      	streq	r2, [r6, #0]
 802426a:	605a      	strne	r2, [r3, #4]
 802426c:	e7ec      	b.n	8024248 <_malloc_r+0xa0>
 802426e:	4623      	mov	r3, r4
 8024270:	6864      	ldr	r4, [r4, #4]
 8024272:	e7b2      	b.n	80241da <_malloc_r+0x32>
 8024274:	4634      	mov	r4, r6
 8024276:	6876      	ldr	r6, [r6, #4]
 8024278:	e7b9      	b.n	80241ee <_malloc_r+0x46>
 802427a:	230c      	movs	r3, #12
 802427c:	603b      	str	r3, [r7, #0]
 802427e:	4638      	mov	r0, r7
 8024280:	f7dd f8bb 	bl	80013fa <__malloc_unlock>
 8024284:	e7a1      	b.n	80241ca <_malloc_r+0x22>
 8024286:	6025      	str	r5, [r4, #0]
 8024288:	e7de      	b.n	8024248 <_malloc_r+0xa0>
 802428a:	bf00      	nop
 802428c:	2000c124 	.word	0x2000c124

08024290 <iprintf>:
 8024290:	b40f      	push	{r0, r1, r2, r3}
 8024292:	4b0a      	ldr	r3, [pc, #40]	; (80242bc <iprintf+0x2c>)
 8024294:	b513      	push	{r0, r1, r4, lr}
 8024296:	681c      	ldr	r4, [r3, #0]
 8024298:	b124      	cbz	r4, 80242a4 <iprintf+0x14>
 802429a:	69a3      	ldr	r3, [r4, #24]
 802429c:	b913      	cbnz	r3, 80242a4 <iprintf+0x14>
 802429e:	4620      	mov	r0, r4
 80242a0:	f7ff fe00 	bl	8023ea4 <__sinit>
 80242a4:	ab05      	add	r3, sp, #20
 80242a6:	9a04      	ldr	r2, [sp, #16]
 80242a8:	68a1      	ldr	r1, [r4, #8]
 80242aa:	9301      	str	r3, [sp, #4]
 80242ac:	4620      	mov	r0, r4
 80242ae:	f000 fc97 	bl	8024be0 <_vfiprintf_r>
 80242b2:	b002      	add	sp, #8
 80242b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80242b8:	b004      	add	sp, #16
 80242ba:	4770      	bx	lr
 80242bc:	20000038 	.word	0x20000038

080242c0 <rand>:
 80242c0:	4b16      	ldr	r3, [pc, #88]	; (802431c <rand+0x5c>)
 80242c2:	b510      	push	{r4, lr}
 80242c4:	681c      	ldr	r4, [r3, #0]
 80242c6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80242c8:	b9b3      	cbnz	r3, 80242f8 <rand+0x38>
 80242ca:	2018      	movs	r0, #24
 80242cc:	f7ff feb0 	bl	8024030 <malloc>
 80242d0:	63a0      	str	r0, [r4, #56]	; 0x38
 80242d2:	b928      	cbnz	r0, 80242e0 <rand+0x20>
 80242d4:	4602      	mov	r2, r0
 80242d6:	4b12      	ldr	r3, [pc, #72]	; (8024320 <rand+0x60>)
 80242d8:	4812      	ldr	r0, [pc, #72]	; (8024324 <rand+0x64>)
 80242da:	214e      	movs	r1, #78	; 0x4e
 80242dc:	f000 f9e6 	bl	80246ac <__assert_func>
 80242e0:	4a11      	ldr	r2, [pc, #68]	; (8024328 <rand+0x68>)
 80242e2:	4b12      	ldr	r3, [pc, #72]	; (802432c <rand+0x6c>)
 80242e4:	e9c0 2300 	strd	r2, r3, [r0]
 80242e8:	4b11      	ldr	r3, [pc, #68]	; (8024330 <rand+0x70>)
 80242ea:	6083      	str	r3, [r0, #8]
 80242ec:	230b      	movs	r3, #11
 80242ee:	8183      	strh	r3, [r0, #12]
 80242f0:	2201      	movs	r2, #1
 80242f2:	2300      	movs	r3, #0
 80242f4:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80242f8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80242fa:	4a0e      	ldr	r2, [pc, #56]	; (8024334 <rand+0x74>)
 80242fc:	6920      	ldr	r0, [r4, #16]
 80242fe:	6963      	ldr	r3, [r4, #20]
 8024300:	490d      	ldr	r1, [pc, #52]	; (8024338 <rand+0x78>)
 8024302:	4342      	muls	r2, r0
 8024304:	fb01 2203 	mla	r2, r1, r3, r2
 8024308:	fba0 0101 	umull	r0, r1, r0, r1
 802430c:	1c43      	adds	r3, r0, #1
 802430e:	eb42 0001 	adc.w	r0, r2, r1
 8024312:	e9c4 3004 	strd	r3, r0, [r4, #16]
 8024316:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 802431a:	bd10      	pop	{r4, pc}
 802431c:	20000038 	.word	0x20000038
 8024320:	08028fac 	.word	0x08028fac
 8024324:	08028fc3 	.word	0x08028fc3
 8024328:	abcd330e 	.word	0xabcd330e
 802432c:	e66d1234 	.word	0xe66d1234
 8024330:	0005deec 	.word	0x0005deec
 8024334:	5851f42d 	.word	0x5851f42d
 8024338:	4c957f2d 	.word	0x4c957f2d

0802433c <cleanup_glue>:
 802433c:	b538      	push	{r3, r4, r5, lr}
 802433e:	460c      	mov	r4, r1
 8024340:	6809      	ldr	r1, [r1, #0]
 8024342:	4605      	mov	r5, r0
 8024344:	b109      	cbz	r1, 802434a <cleanup_glue+0xe>
 8024346:	f7ff fff9 	bl	802433c <cleanup_glue>
 802434a:	4621      	mov	r1, r4
 802434c:	4628      	mov	r0, r5
 802434e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8024352:	f7ff bebd 	b.w	80240d0 <_free_r>
	...

08024358 <_reclaim_reent>:
 8024358:	4b2c      	ldr	r3, [pc, #176]	; (802440c <_reclaim_reent+0xb4>)
 802435a:	681b      	ldr	r3, [r3, #0]
 802435c:	4283      	cmp	r3, r0
 802435e:	b570      	push	{r4, r5, r6, lr}
 8024360:	4604      	mov	r4, r0
 8024362:	d051      	beq.n	8024408 <_reclaim_reent+0xb0>
 8024364:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8024366:	b143      	cbz	r3, 802437a <_reclaim_reent+0x22>
 8024368:	68db      	ldr	r3, [r3, #12]
 802436a:	2b00      	cmp	r3, #0
 802436c:	d14a      	bne.n	8024404 <_reclaim_reent+0xac>
 802436e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8024370:	6819      	ldr	r1, [r3, #0]
 8024372:	b111      	cbz	r1, 802437a <_reclaim_reent+0x22>
 8024374:	4620      	mov	r0, r4
 8024376:	f7ff feab 	bl	80240d0 <_free_r>
 802437a:	6961      	ldr	r1, [r4, #20]
 802437c:	b111      	cbz	r1, 8024384 <_reclaim_reent+0x2c>
 802437e:	4620      	mov	r0, r4
 8024380:	f7ff fea6 	bl	80240d0 <_free_r>
 8024384:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8024386:	b111      	cbz	r1, 802438e <_reclaim_reent+0x36>
 8024388:	4620      	mov	r0, r4
 802438a:	f7ff fea1 	bl	80240d0 <_free_r>
 802438e:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8024390:	b111      	cbz	r1, 8024398 <_reclaim_reent+0x40>
 8024392:	4620      	mov	r0, r4
 8024394:	f7ff fe9c 	bl	80240d0 <_free_r>
 8024398:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 802439a:	b111      	cbz	r1, 80243a2 <_reclaim_reent+0x4a>
 802439c:	4620      	mov	r0, r4
 802439e:	f7ff fe97 	bl	80240d0 <_free_r>
 80243a2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80243a4:	b111      	cbz	r1, 80243ac <_reclaim_reent+0x54>
 80243a6:	4620      	mov	r0, r4
 80243a8:	f7ff fe92 	bl	80240d0 <_free_r>
 80243ac:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80243ae:	b111      	cbz	r1, 80243b6 <_reclaim_reent+0x5e>
 80243b0:	4620      	mov	r0, r4
 80243b2:	f7ff fe8d 	bl	80240d0 <_free_r>
 80243b6:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80243b8:	b111      	cbz	r1, 80243c0 <_reclaim_reent+0x68>
 80243ba:	4620      	mov	r0, r4
 80243bc:	f7ff fe88 	bl	80240d0 <_free_r>
 80243c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80243c2:	b111      	cbz	r1, 80243ca <_reclaim_reent+0x72>
 80243c4:	4620      	mov	r0, r4
 80243c6:	f7ff fe83 	bl	80240d0 <_free_r>
 80243ca:	69a3      	ldr	r3, [r4, #24]
 80243cc:	b1e3      	cbz	r3, 8024408 <_reclaim_reent+0xb0>
 80243ce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 80243d0:	4620      	mov	r0, r4
 80243d2:	4798      	blx	r3
 80243d4:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80243d6:	b1b9      	cbz	r1, 8024408 <_reclaim_reent+0xb0>
 80243d8:	4620      	mov	r0, r4
 80243da:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80243de:	f7ff bfad 	b.w	802433c <cleanup_glue>
 80243e2:	5949      	ldr	r1, [r1, r5]
 80243e4:	b941      	cbnz	r1, 80243f8 <_reclaim_reent+0xa0>
 80243e6:	3504      	adds	r5, #4
 80243e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80243ea:	2d80      	cmp	r5, #128	; 0x80
 80243ec:	68d9      	ldr	r1, [r3, #12]
 80243ee:	d1f8      	bne.n	80243e2 <_reclaim_reent+0x8a>
 80243f0:	4620      	mov	r0, r4
 80243f2:	f7ff fe6d 	bl	80240d0 <_free_r>
 80243f6:	e7ba      	b.n	802436e <_reclaim_reent+0x16>
 80243f8:	680e      	ldr	r6, [r1, #0]
 80243fa:	4620      	mov	r0, r4
 80243fc:	f7ff fe68 	bl	80240d0 <_free_r>
 8024400:	4631      	mov	r1, r6
 8024402:	e7ef      	b.n	80243e4 <_reclaim_reent+0x8c>
 8024404:	2500      	movs	r5, #0
 8024406:	e7ef      	b.n	80243e8 <_reclaim_reent+0x90>
 8024408:	bd70      	pop	{r4, r5, r6, pc}
 802440a:	bf00      	nop
 802440c:	20000038 	.word	0x20000038

08024410 <_raise_r>:
 8024410:	291f      	cmp	r1, #31
 8024412:	b538      	push	{r3, r4, r5, lr}
 8024414:	4604      	mov	r4, r0
 8024416:	460d      	mov	r5, r1
 8024418:	d904      	bls.n	8024424 <_raise_r+0x14>
 802441a:	2316      	movs	r3, #22
 802441c:	6003      	str	r3, [r0, #0]
 802441e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024422:	bd38      	pop	{r3, r4, r5, pc}
 8024424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8024426:	b112      	cbz	r2, 802442e <_raise_r+0x1e>
 8024428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 802442c:	b94b      	cbnz	r3, 8024442 <_raise_r+0x32>
 802442e:	4620      	mov	r0, r4
 8024430:	f000 f830 	bl	8024494 <_getpid_r>
 8024434:	462a      	mov	r2, r5
 8024436:	4601      	mov	r1, r0
 8024438:	4620      	mov	r0, r4
 802443a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 802443e:	f000 b817 	b.w	8024470 <_kill_r>
 8024442:	2b01      	cmp	r3, #1
 8024444:	d00a      	beq.n	802445c <_raise_r+0x4c>
 8024446:	1c59      	adds	r1, r3, #1
 8024448:	d103      	bne.n	8024452 <_raise_r+0x42>
 802444a:	2316      	movs	r3, #22
 802444c:	6003      	str	r3, [r0, #0]
 802444e:	2001      	movs	r0, #1
 8024450:	e7e7      	b.n	8024422 <_raise_r+0x12>
 8024452:	2400      	movs	r4, #0
 8024454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8024458:	4628      	mov	r0, r5
 802445a:	4798      	blx	r3
 802445c:	2000      	movs	r0, #0
 802445e:	e7e0      	b.n	8024422 <_raise_r+0x12>

08024460 <raise>:
 8024460:	4b02      	ldr	r3, [pc, #8]	; (802446c <raise+0xc>)
 8024462:	4601      	mov	r1, r0
 8024464:	6818      	ldr	r0, [r3, #0]
 8024466:	f7ff bfd3 	b.w	8024410 <_raise_r>
 802446a:	bf00      	nop
 802446c:	20000038 	.word	0x20000038

08024470 <_kill_r>:
 8024470:	b538      	push	{r3, r4, r5, lr}
 8024472:	4d07      	ldr	r5, [pc, #28]	; (8024490 <_kill_r+0x20>)
 8024474:	2300      	movs	r3, #0
 8024476:	4604      	mov	r4, r0
 8024478:	4608      	mov	r0, r1
 802447a:	4611      	mov	r1, r2
 802447c:	602b      	str	r3, [r5, #0]
 802447e:	f7e6 fc83 	bl	800ad88 <_kill>
 8024482:	1c43      	adds	r3, r0, #1
 8024484:	d102      	bne.n	802448c <_kill_r+0x1c>
 8024486:	682b      	ldr	r3, [r5, #0]
 8024488:	b103      	cbz	r3, 802448c <_kill_r+0x1c>
 802448a:	6023      	str	r3, [r4, #0]
 802448c:	bd38      	pop	{r3, r4, r5, pc}
 802448e:	bf00      	nop
 8024490:	2000c12c 	.word	0x2000c12c

08024494 <_getpid_r>:
 8024494:	f7e6 bc70 	b.w	800ad78 <_getpid>

08024498 <siprintf>:
 8024498:	b40e      	push	{r1, r2, r3}
 802449a:	b500      	push	{lr}
 802449c:	b09c      	sub	sp, #112	; 0x70
 802449e:	ab1d      	add	r3, sp, #116	; 0x74
 80244a0:	9002      	str	r0, [sp, #8]
 80244a2:	9006      	str	r0, [sp, #24]
 80244a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80244a8:	4809      	ldr	r0, [pc, #36]	; (80244d0 <siprintf+0x38>)
 80244aa:	9107      	str	r1, [sp, #28]
 80244ac:	9104      	str	r1, [sp, #16]
 80244ae:	4909      	ldr	r1, [pc, #36]	; (80244d4 <siprintf+0x3c>)
 80244b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80244b4:	9105      	str	r1, [sp, #20]
 80244b6:	6800      	ldr	r0, [r0, #0]
 80244b8:	9301      	str	r3, [sp, #4]
 80244ba:	a902      	add	r1, sp, #8
 80244bc:	f000 fa66 	bl	802498c <_svfiprintf_r>
 80244c0:	9b02      	ldr	r3, [sp, #8]
 80244c2:	2200      	movs	r2, #0
 80244c4:	701a      	strb	r2, [r3, #0]
 80244c6:	b01c      	add	sp, #112	; 0x70
 80244c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80244cc:	b003      	add	sp, #12
 80244ce:	4770      	bx	lr
 80244d0:	20000038 	.word	0x20000038
 80244d4:	ffff0208 	.word	0xffff0208

080244d8 <__sread>:
 80244d8:	b510      	push	{r4, lr}
 80244da:	460c      	mov	r4, r1
 80244dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80244e0:	f000 fe42 	bl	8025168 <_read_r>
 80244e4:	2800      	cmp	r0, #0
 80244e6:	bfab      	itete	ge
 80244e8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80244ea:	89a3      	ldrhlt	r3, [r4, #12]
 80244ec:	181b      	addge	r3, r3, r0
 80244ee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80244f2:	bfac      	ite	ge
 80244f4:	6563      	strge	r3, [r4, #84]	; 0x54
 80244f6:	81a3      	strhlt	r3, [r4, #12]
 80244f8:	bd10      	pop	{r4, pc}

080244fa <__swrite>:
 80244fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80244fe:	461f      	mov	r7, r3
 8024500:	898b      	ldrh	r3, [r1, #12]
 8024502:	05db      	lsls	r3, r3, #23
 8024504:	4605      	mov	r5, r0
 8024506:	460c      	mov	r4, r1
 8024508:	4616      	mov	r6, r2
 802450a:	d505      	bpl.n	8024518 <__swrite+0x1e>
 802450c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8024510:	2302      	movs	r3, #2
 8024512:	2200      	movs	r2, #0
 8024514:	f000 f9cc 	bl	80248b0 <_lseek_r>
 8024518:	89a3      	ldrh	r3, [r4, #12]
 802451a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 802451e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8024522:	81a3      	strh	r3, [r4, #12]
 8024524:	4632      	mov	r2, r6
 8024526:	463b      	mov	r3, r7
 8024528:	4628      	mov	r0, r5
 802452a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802452e:	f000 b849 	b.w	80245c4 <_write_r>

08024532 <__sseek>:
 8024532:	b510      	push	{r4, lr}
 8024534:	460c      	mov	r4, r1
 8024536:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802453a:	f000 f9b9 	bl	80248b0 <_lseek_r>
 802453e:	1c43      	adds	r3, r0, #1
 8024540:	89a3      	ldrh	r3, [r4, #12]
 8024542:	bf15      	itete	ne
 8024544:	6560      	strne	r0, [r4, #84]	; 0x54
 8024546:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 802454a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 802454e:	81a3      	strheq	r3, [r4, #12]
 8024550:	bf18      	it	ne
 8024552:	81a3      	strhne	r3, [r4, #12]
 8024554:	bd10      	pop	{r4, pc}

08024556 <__sclose>:
 8024556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 802455a:	f000 b8c5 	b.w	80246e8 <_close_r>

0802455e <strncpy>:
 802455e:	b510      	push	{r4, lr}
 8024560:	3901      	subs	r1, #1
 8024562:	4603      	mov	r3, r0
 8024564:	b132      	cbz	r2, 8024574 <strncpy+0x16>
 8024566:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 802456a:	f803 4b01 	strb.w	r4, [r3], #1
 802456e:	3a01      	subs	r2, #1
 8024570:	2c00      	cmp	r4, #0
 8024572:	d1f7      	bne.n	8024564 <strncpy+0x6>
 8024574:	441a      	add	r2, r3
 8024576:	2100      	movs	r1, #0
 8024578:	4293      	cmp	r3, r2
 802457a:	d100      	bne.n	802457e <strncpy+0x20>
 802457c:	bd10      	pop	{r4, pc}
 802457e:	f803 1b01 	strb.w	r1, [r3], #1
 8024582:	e7f9      	b.n	8024578 <strncpy+0x1a>

08024584 <_vsiprintf_r>:
 8024584:	b500      	push	{lr}
 8024586:	b09b      	sub	sp, #108	; 0x6c
 8024588:	9100      	str	r1, [sp, #0]
 802458a:	9104      	str	r1, [sp, #16]
 802458c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8024590:	9105      	str	r1, [sp, #20]
 8024592:	9102      	str	r1, [sp, #8]
 8024594:	4905      	ldr	r1, [pc, #20]	; (80245ac <_vsiprintf_r+0x28>)
 8024596:	9103      	str	r1, [sp, #12]
 8024598:	4669      	mov	r1, sp
 802459a:	f000 f9f7 	bl	802498c <_svfiprintf_r>
 802459e:	9b00      	ldr	r3, [sp, #0]
 80245a0:	2200      	movs	r2, #0
 80245a2:	701a      	strb	r2, [r3, #0]
 80245a4:	b01b      	add	sp, #108	; 0x6c
 80245a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80245aa:	bf00      	nop
 80245ac:	ffff0208 	.word	0xffff0208

080245b0 <vsiprintf>:
 80245b0:	4613      	mov	r3, r2
 80245b2:	460a      	mov	r2, r1
 80245b4:	4601      	mov	r1, r0
 80245b6:	4802      	ldr	r0, [pc, #8]	; (80245c0 <vsiprintf+0x10>)
 80245b8:	6800      	ldr	r0, [r0, #0]
 80245ba:	f7ff bfe3 	b.w	8024584 <_vsiprintf_r>
 80245be:	bf00      	nop
 80245c0:	20000038 	.word	0x20000038

080245c4 <_write_r>:
 80245c4:	b538      	push	{r3, r4, r5, lr}
 80245c6:	4d07      	ldr	r5, [pc, #28]	; (80245e4 <_write_r+0x20>)
 80245c8:	4604      	mov	r4, r0
 80245ca:	4608      	mov	r0, r1
 80245cc:	4611      	mov	r1, r2
 80245ce:	2200      	movs	r2, #0
 80245d0:	602a      	str	r2, [r5, #0]
 80245d2:	461a      	mov	r2, r3
 80245d4:	f7e6 fc11 	bl	800adfa <_write>
 80245d8:	1c43      	adds	r3, r0, #1
 80245da:	d102      	bne.n	80245e2 <_write_r+0x1e>
 80245dc:	682b      	ldr	r3, [r5, #0]
 80245de:	b103      	cbz	r3, 80245e2 <_write_r+0x1e>
 80245e0:	6023      	str	r3, [r4, #0]
 80245e2:	bd38      	pop	{r3, r4, r5, pc}
 80245e4:	2000c12c 	.word	0x2000c12c

080245e8 <__register_exitproc>:
 80245e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80245ec:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80246a8 <__register_exitproc+0xc0>
 80245f0:	4606      	mov	r6, r0
 80245f2:	f8d8 0000 	ldr.w	r0, [r8]
 80245f6:	461f      	mov	r7, r3
 80245f8:	460d      	mov	r5, r1
 80245fa:	4691      	mov	r9, r2
 80245fc:	f7ff fd15 	bl	802402a <__retarget_lock_acquire_recursive>
 8024600:	4b25      	ldr	r3, [pc, #148]	; (8024698 <__register_exitproc+0xb0>)
 8024602:	681c      	ldr	r4, [r3, #0]
 8024604:	b934      	cbnz	r4, 8024614 <__register_exitproc+0x2c>
 8024606:	4c25      	ldr	r4, [pc, #148]	; (802469c <__register_exitproc+0xb4>)
 8024608:	601c      	str	r4, [r3, #0]
 802460a:	4b25      	ldr	r3, [pc, #148]	; (80246a0 <__register_exitproc+0xb8>)
 802460c:	b113      	cbz	r3, 8024614 <__register_exitproc+0x2c>
 802460e:	681b      	ldr	r3, [r3, #0]
 8024610:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 8024614:	6863      	ldr	r3, [r4, #4]
 8024616:	2b1f      	cmp	r3, #31
 8024618:	dd07      	ble.n	802462a <__register_exitproc+0x42>
 802461a:	f8d8 0000 	ldr.w	r0, [r8]
 802461e:	f7ff fd06 	bl	802402e <__retarget_lock_release_recursive>
 8024622:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802462a:	b34e      	cbz	r6, 8024680 <__register_exitproc+0x98>
 802462c:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 8024630:	b988      	cbnz	r0, 8024656 <__register_exitproc+0x6e>
 8024632:	4b1c      	ldr	r3, [pc, #112]	; (80246a4 <__register_exitproc+0xbc>)
 8024634:	b923      	cbnz	r3, 8024640 <__register_exitproc+0x58>
 8024636:	f8d8 0000 	ldr.w	r0, [r8]
 802463a:	f7ff fcf7 	bl	802402c <__retarget_lock_release>
 802463e:	e7f0      	b.n	8024622 <__register_exitproc+0x3a>
 8024640:	f44f 7084 	mov.w	r0, #264	; 0x108
 8024644:	f7ff fcf4 	bl	8024030 <malloc>
 8024648:	2800      	cmp	r0, #0
 802464a:	d0f4      	beq.n	8024636 <__register_exitproc+0x4e>
 802464c:	2300      	movs	r3, #0
 802464e:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 8024652:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 8024656:	6863      	ldr	r3, [r4, #4]
 8024658:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 802465c:	2201      	movs	r2, #1
 802465e:	409a      	lsls	r2, r3
 8024660:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8024664:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 8024668:	4313      	orrs	r3, r2
 802466a:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 802466e:	2e02      	cmp	r6, #2
 8024670:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 8024674:	bf02      	ittt	eq
 8024676:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 802467a:	4313      	orreq	r3, r2
 802467c:	f8c0 3104 	streq.w	r3, [r0, #260]	; 0x104
 8024680:	6863      	ldr	r3, [r4, #4]
 8024682:	f8d8 0000 	ldr.w	r0, [r8]
 8024686:	1c5a      	adds	r2, r3, #1
 8024688:	3302      	adds	r3, #2
 802468a:	6062      	str	r2, [r4, #4]
 802468c:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 8024690:	f7ff fccd 	bl	802402e <__retarget_lock_release_recursive>
 8024694:	2000      	movs	r0, #0
 8024696:	e7c6      	b.n	8024626 <__register_exitproc+0x3e>
 8024698:	2000c1bc 	.word	0x2000c1bc
 802469c:	2000c130 	.word	0x2000c130
 80246a0:	00000000 	.word	0x00000000
 80246a4:	08024031 	.word	0x08024031
 80246a8:	2000009c 	.word	0x2000009c

080246ac <__assert_func>:
 80246ac:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80246ae:	4614      	mov	r4, r2
 80246b0:	461a      	mov	r2, r3
 80246b2:	4b09      	ldr	r3, [pc, #36]	; (80246d8 <__assert_func+0x2c>)
 80246b4:	681b      	ldr	r3, [r3, #0]
 80246b6:	4605      	mov	r5, r0
 80246b8:	68d8      	ldr	r0, [r3, #12]
 80246ba:	b14c      	cbz	r4, 80246d0 <__assert_func+0x24>
 80246bc:	4b07      	ldr	r3, [pc, #28]	; (80246dc <__assert_func+0x30>)
 80246be:	9100      	str	r1, [sp, #0]
 80246c0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80246c4:	4906      	ldr	r1, [pc, #24]	; (80246e0 <__assert_func+0x34>)
 80246c6:	462b      	mov	r3, r5
 80246c8:	f000 f8e0 	bl	802488c <fiprintf>
 80246cc:	f7ff fb7e 	bl	8023dcc <abort>
 80246d0:	4b04      	ldr	r3, [pc, #16]	; (80246e4 <__assert_func+0x38>)
 80246d2:	461c      	mov	r4, r3
 80246d4:	e7f3      	b.n	80246be <__assert_func+0x12>
 80246d6:	bf00      	nop
 80246d8:	20000038 	.word	0x20000038
 80246dc:	0802901e 	.word	0x0802901e
 80246e0:	0802902b 	.word	0x0802902b
 80246e4:	08029059 	.word	0x08029059

080246e8 <_close_r>:
 80246e8:	b538      	push	{r3, r4, r5, lr}
 80246ea:	4d06      	ldr	r5, [pc, #24]	; (8024704 <_close_r+0x1c>)
 80246ec:	2300      	movs	r3, #0
 80246ee:	4604      	mov	r4, r0
 80246f0:	4608      	mov	r0, r1
 80246f2:	602b      	str	r3, [r5, #0]
 80246f4:	f7e6 fb9d 	bl	800ae32 <_close>
 80246f8:	1c43      	adds	r3, r0, #1
 80246fa:	d102      	bne.n	8024702 <_close_r+0x1a>
 80246fc:	682b      	ldr	r3, [r5, #0]
 80246fe:	b103      	cbz	r3, 8024702 <_close_r+0x1a>
 8024700:	6023      	str	r3, [r4, #0]
 8024702:	bd38      	pop	{r3, r4, r5, pc}
 8024704:	2000c12c 	.word	0x2000c12c

08024708 <__sflush_r>:
 8024708:	898a      	ldrh	r2, [r1, #12]
 802470a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802470e:	4605      	mov	r5, r0
 8024710:	0710      	lsls	r0, r2, #28
 8024712:	460c      	mov	r4, r1
 8024714:	d458      	bmi.n	80247c8 <__sflush_r+0xc0>
 8024716:	684b      	ldr	r3, [r1, #4]
 8024718:	2b00      	cmp	r3, #0
 802471a:	dc05      	bgt.n	8024728 <__sflush_r+0x20>
 802471c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 802471e:	2b00      	cmp	r3, #0
 8024720:	dc02      	bgt.n	8024728 <__sflush_r+0x20>
 8024722:	2000      	movs	r0, #0
 8024724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8024728:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 802472a:	2e00      	cmp	r6, #0
 802472c:	d0f9      	beq.n	8024722 <__sflush_r+0x1a>
 802472e:	2300      	movs	r3, #0
 8024730:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8024734:	682f      	ldr	r7, [r5, #0]
 8024736:	602b      	str	r3, [r5, #0]
 8024738:	d032      	beq.n	80247a0 <__sflush_r+0x98>
 802473a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 802473c:	89a3      	ldrh	r3, [r4, #12]
 802473e:	075a      	lsls	r2, r3, #29
 8024740:	d505      	bpl.n	802474e <__sflush_r+0x46>
 8024742:	6863      	ldr	r3, [r4, #4]
 8024744:	1ac0      	subs	r0, r0, r3
 8024746:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8024748:	b10b      	cbz	r3, 802474e <__sflush_r+0x46>
 802474a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 802474c:	1ac0      	subs	r0, r0, r3
 802474e:	2300      	movs	r3, #0
 8024750:	4602      	mov	r2, r0
 8024752:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8024754:	6a21      	ldr	r1, [r4, #32]
 8024756:	4628      	mov	r0, r5
 8024758:	47b0      	blx	r6
 802475a:	1c43      	adds	r3, r0, #1
 802475c:	89a3      	ldrh	r3, [r4, #12]
 802475e:	d106      	bne.n	802476e <__sflush_r+0x66>
 8024760:	6829      	ldr	r1, [r5, #0]
 8024762:	291d      	cmp	r1, #29
 8024764:	d82c      	bhi.n	80247c0 <__sflush_r+0xb8>
 8024766:	4a2a      	ldr	r2, [pc, #168]	; (8024810 <__sflush_r+0x108>)
 8024768:	40ca      	lsrs	r2, r1
 802476a:	07d6      	lsls	r6, r2, #31
 802476c:	d528      	bpl.n	80247c0 <__sflush_r+0xb8>
 802476e:	2200      	movs	r2, #0
 8024770:	6062      	str	r2, [r4, #4]
 8024772:	04d9      	lsls	r1, r3, #19
 8024774:	6922      	ldr	r2, [r4, #16]
 8024776:	6022      	str	r2, [r4, #0]
 8024778:	d504      	bpl.n	8024784 <__sflush_r+0x7c>
 802477a:	1c42      	adds	r2, r0, #1
 802477c:	d101      	bne.n	8024782 <__sflush_r+0x7a>
 802477e:	682b      	ldr	r3, [r5, #0]
 8024780:	b903      	cbnz	r3, 8024784 <__sflush_r+0x7c>
 8024782:	6560      	str	r0, [r4, #84]	; 0x54
 8024784:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8024786:	602f      	str	r7, [r5, #0]
 8024788:	2900      	cmp	r1, #0
 802478a:	d0ca      	beq.n	8024722 <__sflush_r+0x1a>
 802478c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8024790:	4299      	cmp	r1, r3
 8024792:	d002      	beq.n	802479a <__sflush_r+0x92>
 8024794:	4628      	mov	r0, r5
 8024796:	f7ff fc9b 	bl	80240d0 <_free_r>
 802479a:	2000      	movs	r0, #0
 802479c:	6360      	str	r0, [r4, #52]	; 0x34
 802479e:	e7c1      	b.n	8024724 <__sflush_r+0x1c>
 80247a0:	6a21      	ldr	r1, [r4, #32]
 80247a2:	2301      	movs	r3, #1
 80247a4:	4628      	mov	r0, r5
 80247a6:	47b0      	blx	r6
 80247a8:	1c41      	adds	r1, r0, #1
 80247aa:	d1c7      	bne.n	802473c <__sflush_r+0x34>
 80247ac:	682b      	ldr	r3, [r5, #0]
 80247ae:	2b00      	cmp	r3, #0
 80247b0:	d0c4      	beq.n	802473c <__sflush_r+0x34>
 80247b2:	2b1d      	cmp	r3, #29
 80247b4:	d001      	beq.n	80247ba <__sflush_r+0xb2>
 80247b6:	2b16      	cmp	r3, #22
 80247b8:	d101      	bne.n	80247be <__sflush_r+0xb6>
 80247ba:	602f      	str	r7, [r5, #0]
 80247bc:	e7b1      	b.n	8024722 <__sflush_r+0x1a>
 80247be:	89a3      	ldrh	r3, [r4, #12]
 80247c0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80247c4:	81a3      	strh	r3, [r4, #12]
 80247c6:	e7ad      	b.n	8024724 <__sflush_r+0x1c>
 80247c8:	690f      	ldr	r7, [r1, #16]
 80247ca:	2f00      	cmp	r7, #0
 80247cc:	d0a9      	beq.n	8024722 <__sflush_r+0x1a>
 80247ce:	0793      	lsls	r3, r2, #30
 80247d0:	680e      	ldr	r6, [r1, #0]
 80247d2:	bf08      	it	eq
 80247d4:	694b      	ldreq	r3, [r1, #20]
 80247d6:	600f      	str	r7, [r1, #0]
 80247d8:	bf18      	it	ne
 80247da:	2300      	movne	r3, #0
 80247dc:	eba6 0807 	sub.w	r8, r6, r7
 80247e0:	608b      	str	r3, [r1, #8]
 80247e2:	f1b8 0f00 	cmp.w	r8, #0
 80247e6:	dd9c      	ble.n	8024722 <__sflush_r+0x1a>
 80247e8:	6a21      	ldr	r1, [r4, #32]
 80247ea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80247ec:	4643      	mov	r3, r8
 80247ee:	463a      	mov	r2, r7
 80247f0:	4628      	mov	r0, r5
 80247f2:	47b0      	blx	r6
 80247f4:	2800      	cmp	r0, #0
 80247f6:	dc06      	bgt.n	8024806 <__sflush_r+0xfe>
 80247f8:	89a3      	ldrh	r3, [r4, #12]
 80247fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80247fe:	81a3      	strh	r3, [r4, #12]
 8024800:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024804:	e78e      	b.n	8024724 <__sflush_r+0x1c>
 8024806:	4407      	add	r7, r0
 8024808:	eba8 0800 	sub.w	r8, r8, r0
 802480c:	e7e9      	b.n	80247e2 <__sflush_r+0xda>
 802480e:	bf00      	nop
 8024810:	20400001 	.word	0x20400001

08024814 <_fflush_r>:
 8024814:	b538      	push	{r3, r4, r5, lr}
 8024816:	690b      	ldr	r3, [r1, #16]
 8024818:	4605      	mov	r5, r0
 802481a:	460c      	mov	r4, r1
 802481c:	b913      	cbnz	r3, 8024824 <_fflush_r+0x10>
 802481e:	2500      	movs	r5, #0
 8024820:	4628      	mov	r0, r5
 8024822:	bd38      	pop	{r3, r4, r5, pc}
 8024824:	b118      	cbz	r0, 802482e <_fflush_r+0x1a>
 8024826:	6983      	ldr	r3, [r0, #24]
 8024828:	b90b      	cbnz	r3, 802482e <_fflush_r+0x1a>
 802482a:	f7ff fb3b 	bl	8023ea4 <__sinit>
 802482e:	4b14      	ldr	r3, [pc, #80]	; (8024880 <_fflush_r+0x6c>)
 8024830:	429c      	cmp	r4, r3
 8024832:	d11b      	bne.n	802486c <_fflush_r+0x58>
 8024834:	686c      	ldr	r4, [r5, #4]
 8024836:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802483a:	2b00      	cmp	r3, #0
 802483c:	d0ef      	beq.n	802481e <_fflush_r+0xa>
 802483e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8024840:	07d0      	lsls	r0, r2, #31
 8024842:	d404      	bmi.n	802484e <_fflush_r+0x3a>
 8024844:	0599      	lsls	r1, r3, #22
 8024846:	d402      	bmi.n	802484e <_fflush_r+0x3a>
 8024848:	6da0      	ldr	r0, [r4, #88]	; 0x58
 802484a:	f7ff fbee 	bl	802402a <__retarget_lock_acquire_recursive>
 802484e:	4628      	mov	r0, r5
 8024850:	4621      	mov	r1, r4
 8024852:	f7ff ff59 	bl	8024708 <__sflush_r>
 8024856:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8024858:	07da      	lsls	r2, r3, #31
 802485a:	4605      	mov	r5, r0
 802485c:	d4e0      	bmi.n	8024820 <_fflush_r+0xc>
 802485e:	89a3      	ldrh	r3, [r4, #12]
 8024860:	059b      	lsls	r3, r3, #22
 8024862:	d4dd      	bmi.n	8024820 <_fflush_r+0xc>
 8024864:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8024866:	f7ff fbe2 	bl	802402e <__retarget_lock_release_recursive>
 802486a:	e7d9      	b.n	8024820 <_fflush_r+0xc>
 802486c:	4b05      	ldr	r3, [pc, #20]	; (8024884 <_fflush_r+0x70>)
 802486e:	429c      	cmp	r4, r3
 8024870:	d101      	bne.n	8024876 <_fflush_r+0x62>
 8024872:	68ac      	ldr	r4, [r5, #8]
 8024874:	e7df      	b.n	8024836 <_fflush_r+0x22>
 8024876:	4b04      	ldr	r3, [pc, #16]	; (8024888 <_fflush_r+0x74>)
 8024878:	429c      	cmp	r4, r3
 802487a:	bf08      	it	eq
 802487c:	68ec      	ldreq	r4, [r5, #12]
 802487e:	e7da      	b.n	8024836 <_fflush_r+0x22>
 8024880:	08028f68 	.word	0x08028f68
 8024884:	08028f88 	.word	0x08028f88
 8024888:	08028f48 	.word	0x08028f48

0802488c <fiprintf>:
 802488c:	b40e      	push	{r1, r2, r3}
 802488e:	b503      	push	{r0, r1, lr}
 8024890:	4601      	mov	r1, r0
 8024892:	ab03      	add	r3, sp, #12
 8024894:	4805      	ldr	r0, [pc, #20]	; (80248ac <fiprintf+0x20>)
 8024896:	f853 2b04 	ldr.w	r2, [r3], #4
 802489a:	6800      	ldr	r0, [r0, #0]
 802489c:	9301      	str	r3, [sp, #4]
 802489e:	f000 f99f 	bl	8024be0 <_vfiprintf_r>
 80248a2:	b002      	add	sp, #8
 80248a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80248a8:	b003      	add	sp, #12
 80248aa:	4770      	bx	lr
 80248ac:	20000038 	.word	0x20000038

080248b0 <_lseek_r>:
 80248b0:	b538      	push	{r3, r4, r5, lr}
 80248b2:	4d07      	ldr	r5, [pc, #28]	; (80248d0 <_lseek_r+0x20>)
 80248b4:	4604      	mov	r4, r0
 80248b6:	4608      	mov	r0, r1
 80248b8:	4611      	mov	r1, r2
 80248ba:	2200      	movs	r2, #0
 80248bc:	602a      	str	r2, [r5, #0]
 80248be:	461a      	mov	r2, r3
 80248c0:	f7e6 fade 	bl	800ae80 <_lseek>
 80248c4:	1c43      	adds	r3, r0, #1
 80248c6:	d102      	bne.n	80248ce <_lseek_r+0x1e>
 80248c8:	682b      	ldr	r3, [r5, #0]
 80248ca:	b103      	cbz	r3, 80248ce <_lseek_r+0x1e>
 80248cc:	6023      	str	r3, [r4, #0]
 80248ce:	bd38      	pop	{r3, r4, r5, pc}
 80248d0:	2000c12c 	.word	0x2000c12c

080248d4 <__ssputs_r>:
 80248d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80248d8:	688e      	ldr	r6, [r1, #8]
 80248da:	429e      	cmp	r6, r3
 80248dc:	4682      	mov	sl, r0
 80248de:	460c      	mov	r4, r1
 80248e0:	4690      	mov	r8, r2
 80248e2:	461f      	mov	r7, r3
 80248e4:	d838      	bhi.n	8024958 <__ssputs_r+0x84>
 80248e6:	898a      	ldrh	r2, [r1, #12]
 80248e8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80248ec:	d032      	beq.n	8024954 <__ssputs_r+0x80>
 80248ee:	6825      	ldr	r5, [r4, #0]
 80248f0:	6909      	ldr	r1, [r1, #16]
 80248f2:	eba5 0901 	sub.w	r9, r5, r1
 80248f6:	6965      	ldr	r5, [r4, #20]
 80248f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80248fc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8024900:	3301      	adds	r3, #1
 8024902:	444b      	add	r3, r9
 8024904:	106d      	asrs	r5, r5, #1
 8024906:	429d      	cmp	r5, r3
 8024908:	bf38      	it	cc
 802490a:	461d      	movcc	r5, r3
 802490c:	0553      	lsls	r3, r2, #21
 802490e:	d531      	bpl.n	8024974 <__ssputs_r+0xa0>
 8024910:	4629      	mov	r1, r5
 8024912:	f7ff fc49 	bl	80241a8 <_malloc_r>
 8024916:	4606      	mov	r6, r0
 8024918:	b950      	cbnz	r0, 8024930 <__ssputs_r+0x5c>
 802491a:	230c      	movs	r3, #12
 802491c:	f8ca 3000 	str.w	r3, [sl]
 8024920:	89a3      	ldrh	r3, [r4, #12]
 8024922:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8024926:	81a3      	strh	r3, [r4, #12]
 8024928:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802492c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024930:	6921      	ldr	r1, [r4, #16]
 8024932:	464a      	mov	r2, r9
 8024934:	f7ff fb9c 	bl	8024070 <memcpy>
 8024938:	89a3      	ldrh	r3, [r4, #12]
 802493a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 802493e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8024942:	81a3      	strh	r3, [r4, #12]
 8024944:	6126      	str	r6, [r4, #16]
 8024946:	6165      	str	r5, [r4, #20]
 8024948:	444e      	add	r6, r9
 802494a:	eba5 0509 	sub.w	r5, r5, r9
 802494e:	6026      	str	r6, [r4, #0]
 8024950:	60a5      	str	r5, [r4, #8]
 8024952:	463e      	mov	r6, r7
 8024954:	42be      	cmp	r6, r7
 8024956:	d900      	bls.n	802495a <__ssputs_r+0x86>
 8024958:	463e      	mov	r6, r7
 802495a:	6820      	ldr	r0, [r4, #0]
 802495c:	4632      	mov	r2, r6
 802495e:	4641      	mov	r1, r8
 8024960:	f7ff fb94 	bl	802408c <memmove>
 8024964:	68a3      	ldr	r3, [r4, #8]
 8024966:	1b9b      	subs	r3, r3, r6
 8024968:	60a3      	str	r3, [r4, #8]
 802496a:	6823      	ldr	r3, [r4, #0]
 802496c:	4433      	add	r3, r6
 802496e:	6023      	str	r3, [r4, #0]
 8024970:	2000      	movs	r0, #0
 8024972:	e7db      	b.n	802492c <__ssputs_r+0x58>
 8024974:	462a      	mov	r2, r5
 8024976:	f000 fd2f 	bl	80253d8 <_realloc_r>
 802497a:	4606      	mov	r6, r0
 802497c:	2800      	cmp	r0, #0
 802497e:	d1e1      	bne.n	8024944 <__ssputs_r+0x70>
 8024980:	6921      	ldr	r1, [r4, #16]
 8024982:	4650      	mov	r0, sl
 8024984:	f7ff fba4 	bl	80240d0 <_free_r>
 8024988:	e7c7      	b.n	802491a <__ssputs_r+0x46>
	...

0802498c <_svfiprintf_r>:
 802498c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024990:	4698      	mov	r8, r3
 8024992:	898b      	ldrh	r3, [r1, #12]
 8024994:	061b      	lsls	r3, r3, #24
 8024996:	b09d      	sub	sp, #116	; 0x74
 8024998:	4607      	mov	r7, r0
 802499a:	460d      	mov	r5, r1
 802499c:	4614      	mov	r4, r2
 802499e:	d50e      	bpl.n	80249be <_svfiprintf_r+0x32>
 80249a0:	690b      	ldr	r3, [r1, #16]
 80249a2:	b963      	cbnz	r3, 80249be <_svfiprintf_r+0x32>
 80249a4:	2140      	movs	r1, #64	; 0x40
 80249a6:	f7ff fbff 	bl	80241a8 <_malloc_r>
 80249aa:	6028      	str	r0, [r5, #0]
 80249ac:	6128      	str	r0, [r5, #16]
 80249ae:	b920      	cbnz	r0, 80249ba <_svfiprintf_r+0x2e>
 80249b0:	230c      	movs	r3, #12
 80249b2:	603b      	str	r3, [r7, #0]
 80249b4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80249b8:	e0d1      	b.n	8024b5e <_svfiprintf_r+0x1d2>
 80249ba:	2340      	movs	r3, #64	; 0x40
 80249bc:	616b      	str	r3, [r5, #20]
 80249be:	2300      	movs	r3, #0
 80249c0:	9309      	str	r3, [sp, #36]	; 0x24
 80249c2:	2320      	movs	r3, #32
 80249c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80249c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80249cc:	2330      	movs	r3, #48	; 0x30
 80249ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8024b78 <_svfiprintf_r+0x1ec>
 80249d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80249d6:	f04f 0901 	mov.w	r9, #1
 80249da:	4623      	mov	r3, r4
 80249dc:	469a      	mov	sl, r3
 80249de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80249e2:	b10a      	cbz	r2, 80249e8 <_svfiprintf_r+0x5c>
 80249e4:	2a25      	cmp	r2, #37	; 0x25
 80249e6:	d1f9      	bne.n	80249dc <_svfiprintf_r+0x50>
 80249e8:	ebba 0b04 	subs.w	fp, sl, r4
 80249ec:	d00b      	beq.n	8024a06 <_svfiprintf_r+0x7a>
 80249ee:	465b      	mov	r3, fp
 80249f0:	4622      	mov	r2, r4
 80249f2:	4629      	mov	r1, r5
 80249f4:	4638      	mov	r0, r7
 80249f6:	f7ff ff6d 	bl	80248d4 <__ssputs_r>
 80249fa:	3001      	adds	r0, #1
 80249fc:	f000 80aa 	beq.w	8024b54 <_svfiprintf_r+0x1c8>
 8024a00:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024a02:	445a      	add	r2, fp
 8024a04:	9209      	str	r2, [sp, #36]	; 0x24
 8024a06:	f89a 3000 	ldrb.w	r3, [sl]
 8024a0a:	2b00      	cmp	r3, #0
 8024a0c:	f000 80a2 	beq.w	8024b54 <_svfiprintf_r+0x1c8>
 8024a10:	2300      	movs	r3, #0
 8024a12:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024a16:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024a1a:	f10a 0a01 	add.w	sl, sl, #1
 8024a1e:	9304      	str	r3, [sp, #16]
 8024a20:	9307      	str	r3, [sp, #28]
 8024a22:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024a26:	931a      	str	r3, [sp, #104]	; 0x68
 8024a28:	4654      	mov	r4, sl
 8024a2a:	2205      	movs	r2, #5
 8024a2c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024a30:	4851      	ldr	r0, [pc, #324]	; (8024b78 <_svfiprintf_r+0x1ec>)
 8024a32:	f7db fbf5 	bl	8000220 <memchr>
 8024a36:	9a04      	ldr	r2, [sp, #16]
 8024a38:	b9d8      	cbnz	r0, 8024a72 <_svfiprintf_r+0xe6>
 8024a3a:	06d0      	lsls	r0, r2, #27
 8024a3c:	bf44      	itt	mi
 8024a3e:	2320      	movmi	r3, #32
 8024a40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024a44:	0711      	lsls	r1, r2, #28
 8024a46:	bf44      	itt	mi
 8024a48:	232b      	movmi	r3, #43	; 0x2b
 8024a4a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024a4e:	f89a 3000 	ldrb.w	r3, [sl]
 8024a52:	2b2a      	cmp	r3, #42	; 0x2a
 8024a54:	d015      	beq.n	8024a82 <_svfiprintf_r+0xf6>
 8024a56:	9a07      	ldr	r2, [sp, #28]
 8024a58:	4654      	mov	r4, sl
 8024a5a:	2000      	movs	r0, #0
 8024a5c:	f04f 0c0a 	mov.w	ip, #10
 8024a60:	4621      	mov	r1, r4
 8024a62:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024a66:	3b30      	subs	r3, #48	; 0x30
 8024a68:	2b09      	cmp	r3, #9
 8024a6a:	d94e      	bls.n	8024b0a <_svfiprintf_r+0x17e>
 8024a6c:	b1b0      	cbz	r0, 8024a9c <_svfiprintf_r+0x110>
 8024a6e:	9207      	str	r2, [sp, #28]
 8024a70:	e014      	b.n	8024a9c <_svfiprintf_r+0x110>
 8024a72:	eba0 0308 	sub.w	r3, r0, r8
 8024a76:	fa09 f303 	lsl.w	r3, r9, r3
 8024a7a:	4313      	orrs	r3, r2
 8024a7c:	9304      	str	r3, [sp, #16]
 8024a7e:	46a2      	mov	sl, r4
 8024a80:	e7d2      	b.n	8024a28 <_svfiprintf_r+0x9c>
 8024a82:	9b03      	ldr	r3, [sp, #12]
 8024a84:	1d19      	adds	r1, r3, #4
 8024a86:	681b      	ldr	r3, [r3, #0]
 8024a88:	9103      	str	r1, [sp, #12]
 8024a8a:	2b00      	cmp	r3, #0
 8024a8c:	bfbb      	ittet	lt
 8024a8e:	425b      	neglt	r3, r3
 8024a90:	f042 0202 	orrlt.w	r2, r2, #2
 8024a94:	9307      	strge	r3, [sp, #28]
 8024a96:	9307      	strlt	r3, [sp, #28]
 8024a98:	bfb8      	it	lt
 8024a9a:	9204      	strlt	r2, [sp, #16]
 8024a9c:	7823      	ldrb	r3, [r4, #0]
 8024a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8024aa0:	d10c      	bne.n	8024abc <_svfiprintf_r+0x130>
 8024aa2:	7863      	ldrb	r3, [r4, #1]
 8024aa4:	2b2a      	cmp	r3, #42	; 0x2a
 8024aa6:	d135      	bne.n	8024b14 <_svfiprintf_r+0x188>
 8024aa8:	9b03      	ldr	r3, [sp, #12]
 8024aaa:	1d1a      	adds	r2, r3, #4
 8024aac:	681b      	ldr	r3, [r3, #0]
 8024aae:	9203      	str	r2, [sp, #12]
 8024ab0:	2b00      	cmp	r3, #0
 8024ab2:	bfb8      	it	lt
 8024ab4:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024ab8:	3402      	adds	r4, #2
 8024aba:	9305      	str	r3, [sp, #20]
 8024abc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8024b88 <_svfiprintf_r+0x1fc>
 8024ac0:	7821      	ldrb	r1, [r4, #0]
 8024ac2:	2203      	movs	r2, #3
 8024ac4:	4650      	mov	r0, sl
 8024ac6:	f7db fbab 	bl	8000220 <memchr>
 8024aca:	b140      	cbz	r0, 8024ade <_svfiprintf_r+0x152>
 8024acc:	2340      	movs	r3, #64	; 0x40
 8024ace:	eba0 000a 	sub.w	r0, r0, sl
 8024ad2:	fa03 f000 	lsl.w	r0, r3, r0
 8024ad6:	9b04      	ldr	r3, [sp, #16]
 8024ad8:	4303      	orrs	r3, r0
 8024ada:	3401      	adds	r4, #1
 8024adc:	9304      	str	r3, [sp, #16]
 8024ade:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024ae2:	4826      	ldr	r0, [pc, #152]	; (8024b7c <_svfiprintf_r+0x1f0>)
 8024ae4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024ae8:	2206      	movs	r2, #6
 8024aea:	f7db fb99 	bl	8000220 <memchr>
 8024aee:	2800      	cmp	r0, #0
 8024af0:	d038      	beq.n	8024b64 <_svfiprintf_r+0x1d8>
 8024af2:	4b23      	ldr	r3, [pc, #140]	; (8024b80 <_svfiprintf_r+0x1f4>)
 8024af4:	bb1b      	cbnz	r3, 8024b3e <_svfiprintf_r+0x1b2>
 8024af6:	9b03      	ldr	r3, [sp, #12]
 8024af8:	3307      	adds	r3, #7
 8024afa:	f023 0307 	bic.w	r3, r3, #7
 8024afe:	3308      	adds	r3, #8
 8024b00:	9303      	str	r3, [sp, #12]
 8024b02:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024b04:	4433      	add	r3, r6
 8024b06:	9309      	str	r3, [sp, #36]	; 0x24
 8024b08:	e767      	b.n	80249da <_svfiprintf_r+0x4e>
 8024b0a:	fb0c 3202 	mla	r2, ip, r2, r3
 8024b0e:	460c      	mov	r4, r1
 8024b10:	2001      	movs	r0, #1
 8024b12:	e7a5      	b.n	8024a60 <_svfiprintf_r+0xd4>
 8024b14:	2300      	movs	r3, #0
 8024b16:	3401      	adds	r4, #1
 8024b18:	9305      	str	r3, [sp, #20]
 8024b1a:	4619      	mov	r1, r3
 8024b1c:	f04f 0c0a 	mov.w	ip, #10
 8024b20:	4620      	mov	r0, r4
 8024b22:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024b26:	3a30      	subs	r2, #48	; 0x30
 8024b28:	2a09      	cmp	r2, #9
 8024b2a:	d903      	bls.n	8024b34 <_svfiprintf_r+0x1a8>
 8024b2c:	2b00      	cmp	r3, #0
 8024b2e:	d0c5      	beq.n	8024abc <_svfiprintf_r+0x130>
 8024b30:	9105      	str	r1, [sp, #20]
 8024b32:	e7c3      	b.n	8024abc <_svfiprintf_r+0x130>
 8024b34:	fb0c 2101 	mla	r1, ip, r1, r2
 8024b38:	4604      	mov	r4, r0
 8024b3a:	2301      	movs	r3, #1
 8024b3c:	e7f0      	b.n	8024b20 <_svfiprintf_r+0x194>
 8024b3e:	ab03      	add	r3, sp, #12
 8024b40:	9300      	str	r3, [sp, #0]
 8024b42:	462a      	mov	r2, r5
 8024b44:	4b0f      	ldr	r3, [pc, #60]	; (8024b84 <_svfiprintf_r+0x1f8>)
 8024b46:	a904      	add	r1, sp, #16
 8024b48:	4638      	mov	r0, r7
 8024b4a:	f3af 8000 	nop.w
 8024b4e:	1c42      	adds	r2, r0, #1
 8024b50:	4606      	mov	r6, r0
 8024b52:	d1d6      	bne.n	8024b02 <_svfiprintf_r+0x176>
 8024b54:	89ab      	ldrh	r3, [r5, #12]
 8024b56:	065b      	lsls	r3, r3, #25
 8024b58:	f53f af2c 	bmi.w	80249b4 <_svfiprintf_r+0x28>
 8024b5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024b5e:	b01d      	add	sp, #116	; 0x74
 8024b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b64:	ab03      	add	r3, sp, #12
 8024b66:	9300      	str	r3, [sp, #0]
 8024b68:	462a      	mov	r2, r5
 8024b6a:	4b06      	ldr	r3, [pc, #24]	; (8024b84 <_svfiprintf_r+0x1f8>)
 8024b6c:	a904      	add	r1, sp, #16
 8024b6e:	4638      	mov	r0, r7
 8024b70:	f000 f9d4 	bl	8024f1c <_printf_i>
 8024b74:	e7eb      	b.n	8024b4e <_svfiprintf_r+0x1c2>
 8024b76:	bf00      	nop
 8024b78:	0802905a 	.word	0x0802905a
 8024b7c:	08029064 	.word	0x08029064
 8024b80:	00000000 	.word	0x00000000
 8024b84:	080248d5 	.word	0x080248d5
 8024b88:	08029060 	.word	0x08029060

08024b8c <__sfputc_r>:
 8024b8c:	6893      	ldr	r3, [r2, #8]
 8024b8e:	3b01      	subs	r3, #1
 8024b90:	2b00      	cmp	r3, #0
 8024b92:	b410      	push	{r4}
 8024b94:	6093      	str	r3, [r2, #8]
 8024b96:	da08      	bge.n	8024baa <__sfputc_r+0x1e>
 8024b98:	6994      	ldr	r4, [r2, #24]
 8024b9a:	42a3      	cmp	r3, r4
 8024b9c:	db01      	blt.n	8024ba2 <__sfputc_r+0x16>
 8024b9e:	290a      	cmp	r1, #10
 8024ba0:	d103      	bne.n	8024baa <__sfputc_r+0x1e>
 8024ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024ba6:	f000 baf1 	b.w	802518c <__swbuf_r>
 8024baa:	6813      	ldr	r3, [r2, #0]
 8024bac:	1c58      	adds	r0, r3, #1
 8024bae:	6010      	str	r0, [r2, #0]
 8024bb0:	7019      	strb	r1, [r3, #0]
 8024bb2:	4608      	mov	r0, r1
 8024bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024bb8:	4770      	bx	lr

08024bba <__sfputs_r>:
 8024bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8024bbc:	4606      	mov	r6, r0
 8024bbe:	460f      	mov	r7, r1
 8024bc0:	4614      	mov	r4, r2
 8024bc2:	18d5      	adds	r5, r2, r3
 8024bc4:	42ac      	cmp	r4, r5
 8024bc6:	d101      	bne.n	8024bcc <__sfputs_r+0x12>
 8024bc8:	2000      	movs	r0, #0
 8024bca:	e007      	b.n	8024bdc <__sfputs_r+0x22>
 8024bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024bd0:	463a      	mov	r2, r7
 8024bd2:	4630      	mov	r0, r6
 8024bd4:	f7ff ffda 	bl	8024b8c <__sfputc_r>
 8024bd8:	1c43      	adds	r3, r0, #1
 8024bda:	d1f3      	bne.n	8024bc4 <__sfputs_r+0xa>
 8024bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08024be0 <_vfiprintf_r>:
 8024be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024be4:	460d      	mov	r5, r1
 8024be6:	b09d      	sub	sp, #116	; 0x74
 8024be8:	4614      	mov	r4, r2
 8024bea:	4698      	mov	r8, r3
 8024bec:	4606      	mov	r6, r0
 8024bee:	b118      	cbz	r0, 8024bf8 <_vfiprintf_r+0x18>
 8024bf0:	6983      	ldr	r3, [r0, #24]
 8024bf2:	b90b      	cbnz	r3, 8024bf8 <_vfiprintf_r+0x18>
 8024bf4:	f7ff f956 	bl	8023ea4 <__sinit>
 8024bf8:	4b89      	ldr	r3, [pc, #548]	; (8024e20 <_vfiprintf_r+0x240>)
 8024bfa:	429d      	cmp	r5, r3
 8024bfc:	d11b      	bne.n	8024c36 <_vfiprintf_r+0x56>
 8024bfe:	6875      	ldr	r5, [r6, #4]
 8024c00:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024c02:	07d9      	lsls	r1, r3, #31
 8024c04:	d405      	bmi.n	8024c12 <_vfiprintf_r+0x32>
 8024c06:	89ab      	ldrh	r3, [r5, #12]
 8024c08:	059a      	lsls	r2, r3, #22
 8024c0a:	d402      	bmi.n	8024c12 <_vfiprintf_r+0x32>
 8024c0c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024c0e:	f7ff fa0c 	bl	802402a <__retarget_lock_acquire_recursive>
 8024c12:	89ab      	ldrh	r3, [r5, #12]
 8024c14:	071b      	lsls	r3, r3, #28
 8024c16:	d501      	bpl.n	8024c1c <_vfiprintf_r+0x3c>
 8024c18:	692b      	ldr	r3, [r5, #16]
 8024c1a:	b9eb      	cbnz	r3, 8024c58 <_vfiprintf_r+0x78>
 8024c1c:	4629      	mov	r1, r5
 8024c1e:	4630      	mov	r0, r6
 8024c20:	f000 fb06 	bl	8025230 <__swsetup_r>
 8024c24:	b1c0      	cbz	r0, 8024c58 <_vfiprintf_r+0x78>
 8024c26:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024c28:	07dc      	lsls	r4, r3, #31
 8024c2a:	d50e      	bpl.n	8024c4a <_vfiprintf_r+0x6a>
 8024c2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024c30:	b01d      	add	sp, #116	; 0x74
 8024c32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c36:	4b7b      	ldr	r3, [pc, #492]	; (8024e24 <_vfiprintf_r+0x244>)
 8024c38:	429d      	cmp	r5, r3
 8024c3a:	d101      	bne.n	8024c40 <_vfiprintf_r+0x60>
 8024c3c:	68b5      	ldr	r5, [r6, #8]
 8024c3e:	e7df      	b.n	8024c00 <_vfiprintf_r+0x20>
 8024c40:	4b79      	ldr	r3, [pc, #484]	; (8024e28 <_vfiprintf_r+0x248>)
 8024c42:	429d      	cmp	r5, r3
 8024c44:	bf08      	it	eq
 8024c46:	68f5      	ldreq	r5, [r6, #12]
 8024c48:	e7da      	b.n	8024c00 <_vfiprintf_r+0x20>
 8024c4a:	89ab      	ldrh	r3, [r5, #12]
 8024c4c:	0598      	lsls	r0, r3, #22
 8024c4e:	d4ed      	bmi.n	8024c2c <_vfiprintf_r+0x4c>
 8024c50:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024c52:	f7ff f9ec 	bl	802402e <__retarget_lock_release_recursive>
 8024c56:	e7e9      	b.n	8024c2c <_vfiprintf_r+0x4c>
 8024c58:	2300      	movs	r3, #0
 8024c5a:	9309      	str	r3, [sp, #36]	; 0x24
 8024c5c:	2320      	movs	r3, #32
 8024c5e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8024c62:	f8cd 800c 	str.w	r8, [sp, #12]
 8024c66:	2330      	movs	r3, #48	; 0x30
 8024c68:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8024e2c <_vfiprintf_r+0x24c>
 8024c6c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8024c70:	f04f 0901 	mov.w	r9, #1
 8024c74:	4623      	mov	r3, r4
 8024c76:	469a      	mov	sl, r3
 8024c78:	f813 2b01 	ldrb.w	r2, [r3], #1
 8024c7c:	b10a      	cbz	r2, 8024c82 <_vfiprintf_r+0xa2>
 8024c7e:	2a25      	cmp	r2, #37	; 0x25
 8024c80:	d1f9      	bne.n	8024c76 <_vfiprintf_r+0x96>
 8024c82:	ebba 0b04 	subs.w	fp, sl, r4
 8024c86:	d00b      	beq.n	8024ca0 <_vfiprintf_r+0xc0>
 8024c88:	465b      	mov	r3, fp
 8024c8a:	4622      	mov	r2, r4
 8024c8c:	4629      	mov	r1, r5
 8024c8e:	4630      	mov	r0, r6
 8024c90:	f7ff ff93 	bl	8024bba <__sfputs_r>
 8024c94:	3001      	adds	r0, #1
 8024c96:	f000 80aa 	beq.w	8024dee <_vfiprintf_r+0x20e>
 8024c9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8024c9c:	445a      	add	r2, fp
 8024c9e:	9209      	str	r2, [sp, #36]	; 0x24
 8024ca0:	f89a 3000 	ldrb.w	r3, [sl]
 8024ca4:	2b00      	cmp	r3, #0
 8024ca6:	f000 80a2 	beq.w	8024dee <_vfiprintf_r+0x20e>
 8024caa:	2300      	movs	r3, #0
 8024cac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8024cb0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8024cb4:	f10a 0a01 	add.w	sl, sl, #1
 8024cb8:	9304      	str	r3, [sp, #16]
 8024cba:	9307      	str	r3, [sp, #28]
 8024cbc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8024cc0:	931a      	str	r3, [sp, #104]	; 0x68
 8024cc2:	4654      	mov	r4, sl
 8024cc4:	2205      	movs	r2, #5
 8024cc6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024cca:	4858      	ldr	r0, [pc, #352]	; (8024e2c <_vfiprintf_r+0x24c>)
 8024ccc:	f7db faa8 	bl	8000220 <memchr>
 8024cd0:	9a04      	ldr	r2, [sp, #16]
 8024cd2:	b9d8      	cbnz	r0, 8024d0c <_vfiprintf_r+0x12c>
 8024cd4:	06d1      	lsls	r1, r2, #27
 8024cd6:	bf44      	itt	mi
 8024cd8:	2320      	movmi	r3, #32
 8024cda:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024cde:	0713      	lsls	r3, r2, #28
 8024ce0:	bf44      	itt	mi
 8024ce2:	232b      	movmi	r3, #43	; 0x2b
 8024ce4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8024ce8:	f89a 3000 	ldrb.w	r3, [sl]
 8024cec:	2b2a      	cmp	r3, #42	; 0x2a
 8024cee:	d015      	beq.n	8024d1c <_vfiprintf_r+0x13c>
 8024cf0:	9a07      	ldr	r2, [sp, #28]
 8024cf2:	4654      	mov	r4, sl
 8024cf4:	2000      	movs	r0, #0
 8024cf6:	f04f 0c0a 	mov.w	ip, #10
 8024cfa:	4621      	mov	r1, r4
 8024cfc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024d00:	3b30      	subs	r3, #48	; 0x30
 8024d02:	2b09      	cmp	r3, #9
 8024d04:	d94e      	bls.n	8024da4 <_vfiprintf_r+0x1c4>
 8024d06:	b1b0      	cbz	r0, 8024d36 <_vfiprintf_r+0x156>
 8024d08:	9207      	str	r2, [sp, #28]
 8024d0a:	e014      	b.n	8024d36 <_vfiprintf_r+0x156>
 8024d0c:	eba0 0308 	sub.w	r3, r0, r8
 8024d10:	fa09 f303 	lsl.w	r3, r9, r3
 8024d14:	4313      	orrs	r3, r2
 8024d16:	9304      	str	r3, [sp, #16]
 8024d18:	46a2      	mov	sl, r4
 8024d1a:	e7d2      	b.n	8024cc2 <_vfiprintf_r+0xe2>
 8024d1c:	9b03      	ldr	r3, [sp, #12]
 8024d1e:	1d19      	adds	r1, r3, #4
 8024d20:	681b      	ldr	r3, [r3, #0]
 8024d22:	9103      	str	r1, [sp, #12]
 8024d24:	2b00      	cmp	r3, #0
 8024d26:	bfbb      	ittet	lt
 8024d28:	425b      	neglt	r3, r3
 8024d2a:	f042 0202 	orrlt.w	r2, r2, #2
 8024d2e:	9307      	strge	r3, [sp, #28]
 8024d30:	9307      	strlt	r3, [sp, #28]
 8024d32:	bfb8      	it	lt
 8024d34:	9204      	strlt	r2, [sp, #16]
 8024d36:	7823      	ldrb	r3, [r4, #0]
 8024d38:	2b2e      	cmp	r3, #46	; 0x2e
 8024d3a:	d10c      	bne.n	8024d56 <_vfiprintf_r+0x176>
 8024d3c:	7863      	ldrb	r3, [r4, #1]
 8024d3e:	2b2a      	cmp	r3, #42	; 0x2a
 8024d40:	d135      	bne.n	8024dae <_vfiprintf_r+0x1ce>
 8024d42:	9b03      	ldr	r3, [sp, #12]
 8024d44:	1d1a      	adds	r2, r3, #4
 8024d46:	681b      	ldr	r3, [r3, #0]
 8024d48:	9203      	str	r2, [sp, #12]
 8024d4a:	2b00      	cmp	r3, #0
 8024d4c:	bfb8      	it	lt
 8024d4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8024d52:	3402      	adds	r4, #2
 8024d54:	9305      	str	r3, [sp, #20]
 8024d56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8024e3c <_vfiprintf_r+0x25c>
 8024d5a:	7821      	ldrb	r1, [r4, #0]
 8024d5c:	2203      	movs	r2, #3
 8024d5e:	4650      	mov	r0, sl
 8024d60:	f7db fa5e 	bl	8000220 <memchr>
 8024d64:	b140      	cbz	r0, 8024d78 <_vfiprintf_r+0x198>
 8024d66:	2340      	movs	r3, #64	; 0x40
 8024d68:	eba0 000a 	sub.w	r0, r0, sl
 8024d6c:	fa03 f000 	lsl.w	r0, r3, r0
 8024d70:	9b04      	ldr	r3, [sp, #16]
 8024d72:	4303      	orrs	r3, r0
 8024d74:	3401      	adds	r4, #1
 8024d76:	9304      	str	r3, [sp, #16]
 8024d78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8024d7c:	482c      	ldr	r0, [pc, #176]	; (8024e30 <_vfiprintf_r+0x250>)
 8024d7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8024d82:	2206      	movs	r2, #6
 8024d84:	f7db fa4c 	bl	8000220 <memchr>
 8024d88:	2800      	cmp	r0, #0
 8024d8a:	d03f      	beq.n	8024e0c <_vfiprintf_r+0x22c>
 8024d8c:	4b29      	ldr	r3, [pc, #164]	; (8024e34 <_vfiprintf_r+0x254>)
 8024d8e:	bb1b      	cbnz	r3, 8024dd8 <_vfiprintf_r+0x1f8>
 8024d90:	9b03      	ldr	r3, [sp, #12]
 8024d92:	3307      	adds	r3, #7
 8024d94:	f023 0307 	bic.w	r3, r3, #7
 8024d98:	3308      	adds	r3, #8
 8024d9a:	9303      	str	r3, [sp, #12]
 8024d9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8024d9e:	443b      	add	r3, r7
 8024da0:	9309      	str	r3, [sp, #36]	; 0x24
 8024da2:	e767      	b.n	8024c74 <_vfiprintf_r+0x94>
 8024da4:	fb0c 3202 	mla	r2, ip, r2, r3
 8024da8:	460c      	mov	r4, r1
 8024daa:	2001      	movs	r0, #1
 8024dac:	e7a5      	b.n	8024cfa <_vfiprintf_r+0x11a>
 8024dae:	2300      	movs	r3, #0
 8024db0:	3401      	adds	r4, #1
 8024db2:	9305      	str	r3, [sp, #20]
 8024db4:	4619      	mov	r1, r3
 8024db6:	f04f 0c0a 	mov.w	ip, #10
 8024dba:	4620      	mov	r0, r4
 8024dbc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8024dc0:	3a30      	subs	r2, #48	; 0x30
 8024dc2:	2a09      	cmp	r2, #9
 8024dc4:	d903      	bls.n	8024dce <_vfiprintf_r+0x1ee>
 8024dc6:	2b00      	cmp	r3, #0
 8024dc8:	d0c5      	beq.n	8024d56 <_vfiprintf_r+0x176>
 8024dca:	9105      	str	r1, [sp, #20]
 8024dcc:	e7c3      	b.n	8024d56 <_vfiprintf_r+0x176>
 8024dce:	fb0c 2101 	mla	r1, ip, r1, r2
 8024dd2:	4604      	mov	r4, r0
 8024dd4:	2301      	movs	r3, #1
 8024dd6:	e7f0      	b.n	8024dba <_vfiprintf_r+0x1da>
 8024dd8:	ab03      	add	r3, sp, #12
 8024dda:	9300      	str	r3, [sp, #0]
 8024ddc:	462a      	mov	r2, r5
 8024dde:	4b16      	ldr	r3, [pc, #88]	; (8024e38 <_vfiprintf_r+0x258>)
 8024de0:	a904      	add	r1, sp, #16
 8024de2:	4630      	mov	r0, r6
 8024de4:	f3af 8000 	nop.w
 8024de8:	4607      	mov	r7, r0
 8024dea:	1c78      	adds	r0, r7, #1
 8024dec:	d1d6      	bne.n	8024d9c <_vfiprintf_r+0x1bc>
 8024dee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8024df0:	07d9      	lsls	r1, r3, #31
 8024df2:	d405      	bmi.n	8024e00 <_vfiprintf_r+0x220>
 8024df4:	89ab      	ldrh	r3, [r5, #12]
 8024df6:	059a      	lsls	r2, r3, #22
 8024df8:	d402      	bmi.n	8024e00 <_vfiprintf_r+0x220>
 8024dfa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8024dfc:	f7ff f917 	bl	802402e <__retarget_lock_release_recursive>
 8024e00:	89ab      	ldrh	r3, [r5, #12]
 8024e02:	065b      	lsls	r3, r3, #25
 8024e04:	f53f af12 	bmi.w	8024c2c <_vfiprintf_r+0x4c>
 8024e08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8024e0a:	e711      	b.n	8024c30 <_vfiprintf_r+0x50>
 8024e0c:	ab03      	add	r3, sp, #12
 8024e0e:	9300      	str	r3, [sp, #0]
 8024e10:	462a      	mov	r2, r5
 8024e12:	4b09      	ldr	r3, [pc, #36]	; (8024e38 <_vfiprintf_r+0x258>)
 8024e14:	a904      	add	r1, sp, #16
 8024e16:	4630      	mov	r0, r6
 8024e18:	f000 f880 	bl	8024f1c <_printf_i>
 8024e1c:	e7e4      	b.n	8024de8 <_vfiprintf_r+0x208>
 8024e1e:	bf00      	nop
 8024e20:	08028f68 	.word	0x08028f68
 8024e24:	08028f88 	.word	0x08028f88
 8024e28:	08028f48 	.word	0x08028f48
 8024e2c:	0802905a 	.word	0x0802905a
 8024e30:	08029064 	.word	0x08029064
 8024e34:	00000000 	.word	0x00000000
 8024e38:	08024bbb 	.word	0x08024bbb
 8024e3c:	08029060 	.word	0x08029060

08024e40 <_printf_common>:
 8024e40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8024e44:	4616      	mov	r6, r2
 8024e46:	4699      	mov	r9, r3
 8024e48:	688a      	ldr	r2, [r1, #8]
 8024e4a:	690b      	ldr	r3, [r1, #16]
 8024e4c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8024e50:	4293      	cmp	r3, r2
 8024e52:	bfb8      	it	lt
 8024e54:	4613      	movlt	r3, r2
 8024e56:	6033      	str	r3, [r6, #0]
 8024e58:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8024e5c:	4607      	mov	r7, r0
 8024e5e:	460c      	mov	r4, r1
 8024e60:	b10a      	cbz	r2, 8024e66 <_printf_common+0x26>
 8024e62:	3301      	adds	r3, #1
 8024e64:	6033      	str	r3, [r6, #0]
 8024e66:	6823      	ldr	r3, [r4, #0]
 8024e68:	0699      	lsls	r1, r3, #26
 8024e6a:	bf42      	ittt	mi
 8024e6c:	6833      	ldrmi	r3, [r6, #0]
 8024e6e:	3302      	addmi	r3, #2
 8024e70:	6033      	strmi	r3, [r6, #0]
 8024e72:	6825      	ldr	r5, [r4, #0]
 8024e74:	f015 0506 	ands.w	r5, r5, #6
 8024e78:	d106      	bne.n	8024e88 <_printf_common+0x48>
 8024e7a:	f104 0a19 	add.w	sl, r4, #25
 8024e7e:	68e3      	ldr	r3, [r4, #12]
 8024e80:	6832      	ldr	r2, [r6, #0]
 8024e82:	1a9b      	subs	r3, r3, r2
 8024e84:	42ab      	cmp	r3, r5
 8024e86:	dc26      	bgt.n	8024ed6 <_printf_common+0x96>
 8024e88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8024e8c:	1e13      	subs	r3, r2, #0
 8024e8e:	6822      	ldr	r2, [r4, #0]
 8024e90:	bf18      	it	ne
 8024e92:	2301      	movne	r3, #1
 8024e94:	0692      	lsls	r2, r2, #26
 8024e96:	d42b      	bmi.n	8024ef0 <_printf_common+0xb0>
 8024e98:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8024e9c:	4649      	mov	r1, r9
 8024e9e:	4638      	mov	r0, r7
 8024ea0:	47c0      	blx	r8
 8024ea2:	3001      	adds	r0, #1
 8024ea4:	d01e      	beq.n	8024ee4 <_printf_common+0xa4>
 8024ea6:	6823      	ldr	r3, [r4, #0]
 8024ea8:	68e5      	ldr	r5, [r4, #12]
 8024eaa:	6832      	ldr	r2, [r6, #0]
 8024eac:	f003 0306 	and.w	r3, r3, #6
 8024eb0:	2b04      	cmp	r3, #4
 8024eb2:	bf08      	it	eq
 8024eb4:	1aad      	subeq	r5, r5, r2
 8024eb6:	68a3      	ldr	r3, [r4, #8]
 8024eb8:	6922      	ldr	r2, [r4, #16]
 8024eba:	bf0c      	ite	eq
 8024ebc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8024ec0:	2500      	movne	r5, #0
 8024ec2:	4293      	cmp	r3, r2
 8024ec4:	bfc4      	itt	gt
 8024ec6:	1a9b      	subgt	r3, r3, r2
 8024ec8:	18ed      	addgt	r5, r5, r3
 8024eca:	2600      	movs	r6, #0
 8024ecc:	341a      	adds	r4, #26
 8024ece:	42b5      	cmp	r5, r6
 8024ed0:	d11a      	bne.n	8024f08 <_printf_common+0xc8>
 8024ed2:	2000      	movs	r0, #0
 8024ed4:	e008      	b.n	8024ee8 <_printf_common+0xa8>
 8024ed6:	2301      	movs	r3, #1
 8024ed8:	4652      	mov	r2, sl
 8024eda:	4649      	mov	r1, r9
 8024edc:	4638      	mov	r0, r7
 8024ede:	47c0      	blx	r8
 8024ee0:	3001      	adds	r0, #1
 8024ee2:	d103      	bne.n	8024eec <_printf_common+0xac>
 8024ee4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8024ee8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8024eec:	3501      	adds	r5, #1
 8024eee:	e7c6      	b.n	8024e7e <_printf_common+0x3e>
 8024ef0:	18e1      	adds	r1, r4, r3
 8024ef2:	1c5a      	adds	r2, r3, #1
 8024ef4:	2030      	movs	r0, #48	; 0x30
 8024ef6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8024efa:	4422      	add	r2, r4
 8024efc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8024f00:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8024f04:	3302      	adds	r3, #2
 8024f06:	e7c7      	b.n	8024e98 <_printf_common+0x58>
 8024f08:	2301      	movs	r3, #1
 8024f0a:	4622      	mov	r2, r4
 8024f0c:	4649      	mov	r1, r9
 8024f0e:	4638      	mov	r0, r7
 8024f10:	47c0      	blx	r8
 8024f12:	3001      	adds	r0, #1
 8024f14:	d0e6      	beq.n	8024ee4 <_printf_common+0xa4>
 8024f16:	3601      	adds	r6, #1
 8024f18:	e7d9      	b.n	8024ece <_printf_common+0x8e>
	...

08024f1c <_printf_i>:
 8024f1c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8024f20:	7e0f      	ldrb	r7, [r1, #24]
 8024f22:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8024f24:	2f78      	cmp	r7, #120	; 0x78
 8024f26:	4691      	mov	r9, r2
 8024f28:	4680      	mov	r8, r0
 8024f2a:	460c      	mov	r4, r1
 8024f2c:	469a      	mov	sl, r3
 8024f2e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8024f32:	d807      	bhi.n	8024f44 <_printf_i+0x28>
 8024f34:	2f62      	cmp	r7, #98	; 0x62
 8024f36:	d80a      	bhi.n	8024f4e <_printf_i+0x32>
 8024f38:	2f00      	cmp	r7, #0
 8024f3a:	f000 80d8 	beq.w	80250ee <_printf_i+0x1d2>
 8024f3e:	2f58      	cmp	r7, #88	; 0x58
 8024f40:	f000 80a3 	beq.w	802508a <_printf_i+0x16e>
 8024f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024f48:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8024f4c:	e03a      	b.n	8024fc4 <_printf_i+0xa8>
 8024f4e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8024f52:	2b15      	cmp	r3, #21
 8024f54:	d8f6      	bhi.n	8024f44 <_printf_i+0x28>
 8024f56:	a101      	add	r1, pc, #4	; (adr r1, 8024f5c <_printf_i+0x40>)
 8024f58:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8024f5c:	08024fb5 	.word	0x08024fb5
 8024f60:	08024fc9 	.word	0x08024fc9
 8024f64:	08024f45 	.word	0x08024f45
 8024f68:	08024f45 	.word	0x08024f45
 8024f6c:	08024f45 	.word	0x08024f45
 8024f70:	08024f45 	.word	0x08024f45
 8024f74:	08024fc9 	.word	0x08024fc9
 8024f78:	08024f45 	.word	0x08024f45
 8024f7c:	08024f45 	.word	0x08024f45
 8024f80:	08024f45 	.word	0x08024f45
 8024f84:	08024f45 	.word	0x08024f45
 8024f88:	080250d5 	.word	0x080250d5
 8024f8c:	08024ff9 	.word	0x08024ff9
 8024f90:	080250b7 	.word	0x080250b7
 8024f94:	08024f45 	.word	0x08024f45
 8024f98:	08024f45 	.word	0x08024f45
 8024f9c:	080250f7 	.word	0x080250f7
 8024fa0:	08024f45 	.word	0x08024f45
 8024fa4:	08024ff9 	.word	0x08024ff9
 8024fa8:	08024f45 	.word	0x08024f45
 8024fac:	08024f45 	.word	0x08024f45
 8024fb0:	080250bf 	.word	0x080250bf
 8024fb4:	682b      	ldr	r3, [r5, #0]
 8024fb6:	1d1a      	adds	r2, r3, #4
 8024fb8:	681b      	ldr	r3, [r3, #0]
 8024fba:	602a      	str	r2, [r5, #0]
 8024fbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8024fc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8024fc4:	2301      	movs	r3, #1
 8024fc6:	e0a3      	b.n	8025110 <_printf_i+0x1f4>
 8024fc8:	6820      	ldr	r0, [r4, #0]
 8024fca:	6829      	ldr	r1, [r5, #0]
 8024fcc:	0606      	lsls	r6, r0, #24
 8024fce:	f101 0304 	add.w	r3, r1, #4
 8024fd2:	d50a      	bpl.n	8024fea <_printf_i+0xce>
 8024fd4:	680e      	ldr	r6, [r1, #0]
 8024fd6:	602b      	str	r3, [r5, #0]
 8024fd8:	2e00      	cmp	r6, #0
 8024fda:	da03      	bge.n	8024fe4 <_printf_i+0xc8>
 8024fdc:	232d      	movs	r3, #45	; 0x2d
 8024fde:	4276      	negs	r6, r6
 8024fe0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8024fe4:	485e      	ldr	r0, [pc, #376]	; (8025160 <_printf_i+0x244>)
 8024fe6:	230a      	movs	r3, #10
 8024fe8:	e019      	b.n	802501e <_printf_i+0x102>
 8024fea:	680e      	ldr	r6, [r1, #0]
 8024fec:	602b      	str	r3, [r5, #0]
 8024fee:	f010 0f40 	tst.w	r0, #64	; 0x40
 8024ff2:	bf18      	it	ne
 8024ff4:	b236      	sxthne	r6, r6
 8024ff6:	e7ef      	b.n	8024fd8 <_printf_i+0xbc>
 8024ff8:	682b      	ldr	r3, [r5, #0]
 8024ffa:	6820      	ldr	r0, [r4, #0]
 8024ffc:	1d19      	adds	r1, r3, #4
 8024ffe:	6029      	str	r1, [r5, #0]
 8025000:	0601      	lsls	r1, r0, #24
 8025002:	d501      	bpl.n	8025008 <_printf_i+0xec>
 8025004:	681e      	ldr	r6, [r3, #0]
 8025006:	e002      	b.n	802500e <_printf_i+0xf2>
 8025008:	0646      	lsls	r6, r0, #25
 802500a:	d5fb      	bpl.n	8025004 <_printf_i+0xe8>
 802500c:	881e      	ldrh	r6, [r3, #0]
 802500e:	4854      	ldr	r0, [pc, #336]	; (8025160 <_printf_i+0x244>)
 8025010:	2f6f      	cmp	r7, #111	; 0x6f
 8025012:	bf0c      	ite	eq
 8025014:	2308      	moveq	r3, #8
 8025016:	230a      	movne	r3, #10
 8025018:	2100      	movs	r1, #0
 802501a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 802501e:	6865      	ldr	r5, [r4, #4]
 8025020:	60a5      	str	r5, [r4, #8]
 8025022:	2d00      	cmp	r5, #0
 8025024:	bfa2      	ittt	ge
 8025026:	6821      	ldrge	r1, [r4, #0]
 8025028:	f021 0104 	bicge.w	r1, r1, #4
 802502c:	6021      	strge	r1, [r4, #0]
 802502e:	b90e      	cbnz	r6, 8025034 <_printf_i+0x118>
 8025030:	2d00      	cmp	r5, #0
 8025032:	d04d      	beq.n	80250d0 <_printf_i+0x1b4>
 8025034:	4615      	mov	r5, r2
 8025036:	fbb6 f1f3 	udiv	r1, r6, r3
 802503a:	fb03 6711 	mls	r7, r3, r1, r6
 802503e:	5dc7      	ldrb	r7, [r0, r7]
 8025040:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8025044:	4637      	mov	r7, r6
 8025046:	42bb      	cmp	r3, r7
 8025048:	460e      	mov	r6, r1
 802504a:	d9f4      	bls.n	8025036 <_printf_i+0x11a>
 802504c:	2b08      	cmp	r3, #8
 802504e:	d10b      	bne.n	8025068 <_printf_i+0x14c>
 8025050:	6823      	ldr	r3, [r4, #0]
 8025052:	07de      	lsls	r6, r3, #31
 8025054:	d508      	bpl.n	8025068 <_printf_i+0x14c>
 8025056:	6923      	ldr	r3, [r4, #16]
 8025058:	6861      	ldr	r1, [r4, #4]
 802505a:	4299      	cmp	r1, r3
 802505c:	bfde      	ittt	le
 802505e:	2330      	movle	r3, #48	; 0x30
 8025060:	f805 3c01 	strble.w	r3, [r5, #-1]
 8025064:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8025068:	1b52      	subs	r2, r2, r5
 802506a:	6122      	str	r2, [r4, #16]
 802506c:	f8cd a000 	str.w	sl, [sp]
 8025070:	464b      	mov	r3, r9
 8025072:	aa03      	add	r2, sp, #12
 8025074:	4621      	mov	r1, r4
 8025076:	4640      	mov	r0, r8
 8025078:	f7ff fee2 	bl	8024e40 <_printf_common>
 802507c:	3001      	adds	r0, #1
 802507e:	d14c      	bne.n	802511a <_printf_i+0x1fe>
 8025080:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8025084:	b004      	add	sp, #16
 8025086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802508a:	4835      	ldr	r0, [pc, #212]	; (8025160 <_printf_i+0x244>)
 802508c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8025090:	6829      	ldr	r1, [r5, #0]
 8025092:	6823      	ldr	r3, [r4, #0]
 8025094:	f851 6b04 	ldr.w	r6, [r1], #4
 8025098:	6029      	str	r1, [r5, #0]
 802509a:	061d      	lsls	r5, r3, #24
 802509c:	d514      	bpl.n	80250c8 <_printf_i+0x1ac>
 802509e:	07df      	lsls	r7, r3, #31
 80250a0:	bf44      	itt	mi
 80250a2:	f043 0320 	orrmi.w	r3, r3, #32
 80250a6:	6023      	strmi	r3, [r4, #0]
 80250a8:	b91e      	cbnz	r6, 80250b2 <_printf_i+0x196>
 80250aa:	6823      	ldr	r3, [r4, #0]
 80250ac:	f023 0320 	bic.w	r3, r3, #32
 80250b0:	6023      	str	r3, [r4, #0]
 80250b2:	2310      	movs	r3, #16
 80250b4:	e7b0      	b.n	8025018 <_printf_i+0xfc>
 80250b6:	6823      	ldr	r3, [r4, #0]
 80250b8:	f043 0320 	orr.w	r3, r3, #32
 80250bc:	6023      	str	r3, [r4, #0]
 80250be:	2378      	movs	r3, #120	; 0x78
 80250c0:	4828      	ldr	r0, [pc, #160]	; (8025164 <_printf_i+0x248>)
 80250c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80250c6:	e7e3      	b.n	8025090 <_printf_i+0x174>
 80250c8:	0659      	lsls	r1, r3, #25
 80250ca:	bf48      	it	mi
 80250cc:	b2b6      	uxthmi	r6, r6
 80250ce:	e7e6      	b.n	802509e <_printf_i+0x182>
 80250d0:	4615      	mov	r5, r2
 80250d2:	e7bb      	b.n	802504c <_printf_i+0x130>
 80250d4:	682b      	ldr	r3, [r5, #0]
 80250d6:	6826      	ldr	r6, [r4, #0]
 80250d8:	6961      	ldr	r1, [r4, #20]
 80250da:	1d18      	adds	r0, r3, #4
 80250dc:	6028      	str	r0, [r5, #0]
 80250de:	0635      	lsls	r5, r6, #24
 80250e0:	681b      	ldr	r3, [r3, #0]
 80250e2:	d501      	bpl.n	80250e8 <_printf_i+0x1cc>
 80250e4:	6019      	str	r1, [r3, #0]
 80250e6:	e002      	b.n	80250ee <_printf_i+0x1d2>
 80250e8:	0670      	lsls	r0, r6, #25
 80250ea:	d5fb      	bpl.n	80250e4 <_printf_i+0x1c8>
 80250ec:	8019      	strh	r1, [r3, #0]
 80250ee:	2300      	movs	r3, #0
 80250f0:	6123      	str	r3, [r4, #16]
 80250f2:	4615      	mov	r5, r2
 80250f4:	e7ba      	b.n	802506c <_printf_i+0x150>
 80250f6:	682b      	ldr	r3, [r5, #0]
 80250f8:	1d1a      	adds	r2, r3, #4
 80250fa:	602a      	str	r2, [r5, #0]
 80250fc:	681d      	ldr	r5, [r3, #0]
 80250fe:	6862      	ldr	r2, [r4, #4]
 8025100:	2100      	movs	r1, #0
 8025102:	4628      	mov	r0, r5
 8025104:	f7db f88c 	bl	8000220 <memchr>
 8025108:	b108      	cbz	r0, 802510e <_printf_i+0x1f2>
 802510a:	1b40      	subs	r0, r0, r5
 802510c:	6060      	str	r0, [r4, #4]
 802510e:	6863      	ldr	r3, [r4, #4]
 8025110:	6123      	str	r3, [r4, #16]
 8025112:	2300      	movs	r3, #0
 8025114:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8025118:	e7a8      	b.n	802506c <_printf_i+0x150>
 802511a:	6923      	ldr	r3, [r4, #16]
 802511c:	462a      	mov	r2, r5
 802511e:	4649      	mov	r1, r9
 8025120:	4640      	mov	r0, r8
 8025122:	47d0      	blx	sl
 8025124:	3001      	adds	r0, #1
 8025126:	d0ab      	beq.n	8025080 <_printf_i+0x164>
 8025128:	6823      	ldr	r3, [r4, #0]
 802512a:	079b      	lsls	r3, r3, #30
 802512c:	d413      	bmi.n	8025156 <_printf_i+0x23a>
 802512e:	68e0      	ldr	r0, [r4, #12]
 8025130:	9b03      	ldr	r3, [sp, #12]
 8025132:	4298      	cmp	r0, r3
 8025134:	bfb8      	it	lt
 8025136:	4618      	movlt	r0, r3
 8025138:	e7a4      	b.n	8025084 <_printf_i+0x168>
 802513a:	2301      	movs	r3, #1
 802513c:	4632      	mov	r2, r6
 802513e:	4649      	mov	r1, r9
 8025140:	4640      	mov	r0, r8
 8025142:	47d0      	blx	sl
 8025144:	3001      	adds	r0, #1
 8025146:	d09b      	beq.n	8025080 <_printf_i+0x164>
 8025148:	3501      	adds	r5, #1
 802514a:	68e3      	ldr	r3, [r4, #12]
 802514c:	9903      	ldr	r1, [sp, #12]
 802514e:	1a5b      	subs	r3, r3, r1
 8025150:	42ab      	cmp	r3, r5
 8025152:	dcf2      	bgt.n	802513a <_printf_i+0x21e>
 8025154:	e7eb      	b.n	802512e <_printf_i+0x212>
 8025156:	2500      	movs	r5, #0
 8025158:	f104 0619 	add.w	r6, r4, #25
 802515c:	e7f5      	b.n	802514a <_printf_i+0x22e>
 802515e:	bf00      	nop
 8025160:	0802906b 	.word	0x0802906b
 8025164:	0802907c 	.word	0x0802907c

08025168 <_read_r>:
 8025168:	b538      	push	{r3, r4, r5, lr}
 802516a:	4d07      	ldr	r5, [pc, #28]	; (8025188 <_read_r+0x20>)
 802516c:	4604      	mov	r4, r0
 802516e:	4608      	mov	r0, r1
 8025170:	4611      	mov	r1, r2
 8025172:	2200      	movs	r2, #0
 8025174:	602a      	str	r2, [r5, #0]
 8025176:	461a      	mov	r2, r3
 8025178:	f7e5 fe22 	bl	800adc0 <_read>
 802517c:	1c43      	adds	r3, r0, #1
 802517e:	d102      	bne.n	8025186 <_read_r+0x1e>
 8025180:	682b      	ldr	r3, [r5, #0]
 8025182:	b103      	cbz	r3, 8025186 <_read_r+0x1e>
 8025184:	6023      	str	r3, [r4, #0]
 8025186:	bd38      	pop	{r3, r4, r5, pc}
 8025188:	2000c12c 	.word	0x2000c12c

0802518c <__swbuf_r>:
 802518c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802518e:	460e      	mov	r6, r1
 8025190:	4614      	mov	r4, r2
 8025192:	4605      	mov	r5, r0
 8025194:	b118      	cbz	r0, 802519e <__swbuf_r+0x12>
 8025196:	6983      	ldr	r3, [r0, #24]
 8025198:	b90b      	cbnz	r3, 802519e <__swbuf_r+0x12>
 802519a:	f7fe fe83 	bl	8023ea4 <__sinit>
 802519e:	4b21      	ldr	r3, [pc, #132]	; (8025224 <__swbuf_r+0x98>)
 80251a0:	429c      	cmp	r4, r3
 80251a2:	d12b      	bne.n	80251fc <__swbuf_r+0x70>
 80251a4:	686c      	ldr	r4, [r5, #4]
 80251a6:	69a3      	ldr	r3, [r4, #24]
 80251a8:	60a3      	str	r3, [r4, #8]
 80251aa:	89a3      	ldrh	r3, [r4, #12]
 80251ac:	071a      	lsls	r2, r3, #28
 80251ae:	d52f      	bpl.n	8025210 <__swbuf_r+0x84>
 80251b0:	6923      	ldr	r3, [r4, #16]
 80251b2:	b36b      	cbz	r3, 8025210 <__swbuf_r+0x84>
 80251b4:	6923      	ldr	r3, [r4, #16]
 80251b6:	6820      	ldr	r0, [r4, #0]
 80251b8:	1ac0      	subs	r0, r0, r3
 80251ba:	6963      	ldr	r3, [r4, #20]
 80251bc:	b2f6      	uxtb	r6, r6
 80251be:	4283      	cmp	r3, r0
 80251c0:	4637      	mov	r7, r6
 80251c2:	dc04      	bgt.n	80251ce <__swbuf_r+0x42>
 80251c4:	4621      	mov	r1, r4
 80251c6:	4628      	mov	r0, r5
 80251c8:	f7ff fb24 	bl	8024814 <_fflush_r>
 80251cc:	bb30      	cbnz	r0, 802521c <__swbuf_r+0x90>
 80251ce:	68a3      	ldr	r3, [r4, #8]
 80251d0:	3b01      	subs	r3, #1
 80251d2:	60a3      	str	r3, [r4, #8]
 80251d4:	6823      	ldr	r3, [r4, #0]
 80251d6:	1c5a      	adds	r2, r3, #1
 80251d8:	6022      	str	r2, [r4, #0]
 80251da:	701e      	strb	r6, [r3, #0]
 80251dc:	6963      	ldr	r3, [r4, #20]
 80251de:	3001      	adds	r0, #1
 80251e0:	4283      	cmp	r3, r0
 80251e2:	d004      	beq.n	80251ee <__swbuf_r+0x62>
 80251e4:	89a3      	ldrh	r3, [r4, #12]
 80251e6:	07db      	lsls	r3, r3, #31
 80251e8:	d506      	bpl.n	80251f8 <__swbuf_r+0x6c>
 80251ea:	2e0a      	cmp	r6, #10
 80251ec:	d104      	bne.n	80251f8 <__swbuf_r+0x6c>
 80251ee:	4621      	mov	r1, r4
 80251f0:	4628      	mov	r0, r5
 80251f2:	f7ff fb0f 	bl	8024814 <_fflush_r>
 80251f6:	b988      	cbnz	r0, 802521c <__swbuf_r+0x90>
 80251f8:	4638      	mov	r0, r7
 80251fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80251fc:	4b0a      	ldr	r3, [pc, #40]	; (8025228 <__swbuf_r+0x9c>)
 80251fe:	429c      	cmp	r4, r3
 8025200:	d101      	bne.n	8025206 <__swbuf_r+0x7a>
 8025202:	68ac      	ldr	r4, [r5, #8]
 8025204:	e7cf      	b.n	80251a6 <__swbuf_r+0x1a>
 8025206:	4b09      	ldr	r3, [pc, #36]	; (802522c <__swbuf_r+0xa0>)
 8025208:	429c      	cmp	r4, r3
 802520a:	bf08      	it	eq
 802520c:	68ec      	ldreq	r4, [r5, #12]
 802520e:	e7ca      	b.n	80251a6 <__swbuf_r+0x1a>
 8025210:	4621      	mov	r1, r4
 8025212:	4628      	mov	r0, r5
 8025214:	f000 f80c 	bl	8025230 <__swsetup_r>
 8025218:	2800      	cmp	r0, #0
 802521a:	d0cb      	beq.n	80251b4 <__swbuf_r+0x28>
 802521c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8025220:	e7ea      	b.n	80251f8 <__swbuf_r+0x6c>
 8025222:	bf00      	nop
 8025224:	08028f68 	.word	0x08028f68
 8025228:	08028f88 	.word	0x08028f88
 802522c:	08028f48 	.word	0x08028f48

08025230 <__swsetup_r>:
 8025230:	4b32      	ldr	r3, [pc, #200]	; (80252fc <__swsetup_r+0xcc>)
 8025232:	b570      	push	{r4, r5, r6, lr}
 8025234:	681d      	ldr	r5, [r3, #0]
 8025236:	4606      	mov	r6, r0
 8025238:	460c      	mov	r4, r1
 802523a:	b125      	cbz	r5, 8025246 <__swsetup_r+0x16>
 802523c:	69ab      	ldr	r3, [r5, #24]
 802523e:	b913      	cbnz	r3, 8025246 <__swsetup_r+0x16>
 8025240:	4628      	mov	r0, r5
 8025242:	f7fe fe2f 	bl	8023ea4 <__sinit>
 8025246:	4b2e      	ldr	r3, [pc, #184]	; (8025300 <__swsetup_r+0xd0>)
 8025248:	429c      	cmp	r4, r3
 802524a:	d10f      	bne.n	802526c <__swsetup_r+0x3c>
 802524c:	686c      	ldr	r4, [r5, #4]
 802524e:	89a3      	ldrh	r3, [r4, #12]
 8025250:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025254:	0719      	lsls	r1, r3, #28
 8025256:	d42c      	bmi.n	80252b2 <__swsetup_r+0x82>
 8025258:	06dd      	lsls	r5, r3, #27
 802525a:	d411      	bmi.n	8025280 <__swsetup_r+0x50>
 802525c:	2309      	movs	r3, #9
 802525e:	6033      	str	r3, [r6, #0]
 8025260:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8025264:	81a3      	strh	r3, [r4, #12]
 8025266:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 802526a:	e03e      	b.n	80252ea <__swsetup_r+0xba>
 802526c:	4b25      	ldr	r3, [pc, #148]	; (8025304 <__swsetup_r+0xd4>)
 802526e:	429c      	cmp	r4, r3
 8025270:	d101      	bne.n	8025276 <__swsetup_r+0x46>
 8025272:	68ac      	ldr	r4, [r5, #8]
 8025274:	e7eb      	b.n	802524e <__swsetup_r+0x1e>
 8025276:	4b24      	ldr	r3, [pc, #144]	; (8025308 <__swsetup_r+0xd8>)
 8025278:	429c      	cmp	r4, r3
 802527a:	bf08      	it	eq
 802527c:	68ec      	ldreq	r4, [r5, #12]
 802527e:	e7e6      	b.n	802524e <__swsetup_r+0x1e>
 8025280:	0758      	lsls	r0, r3, #29
 8025282:	d512      	bpl.n	80252aa <__swsetup_r+0x7a>
 8025284:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8025286:	b141      	cbz	r1, 802529a <__swsetup_r+0x6a>
 8025288:	f104 0344 	add.w	r3, r4, #68	; 0x44
 802528c:	4299      	cmp	r1, r3
 802528e:	d002      	beq.n	8025296 <__swsetup_r+0x66>
 8025290:	4630      	mov	r0, r6
 8025292:	f7fe ff1d 	bl	80240d0 <_free_r>
 8025296:	2300      	movs	r3, #0
 8025298:	6363      	str	r3, [r4, #52]	; 0x34
 802529a:	89a3      	ldrh	r3, [r4, #12]
 802529c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80252a0:	81a3      	strh	r3, [r4, #12]
 80252a2:	2300      	movs	r3, #0
 80252a4:	6063      	str	r3, [r4, #4]
 80252a6:	6923      	ldr	r3, [r4, #16]
 80252a8:	6023      	str	r3, [r4, #0]
 80252aa:	89a3      	ldrh	r3, [r4, #12]
 80252ac:	f043 0308 	orr.w	r3, r3, #8
 80252b0:	81a3      	strh	r3, [r4, #12]
 80252b2:	6923      	ldr	r3, [r4, #16]
 80252b4:	b94b      	cbnz	r3, 80252ca <__swsetup_r+0x9a>
 80252b6:	89a3      	ldrh	r3, [r4, #12]
 80252b8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80252bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80252c0:	d003      	beq.n	80252ca <__swsetup_r+0x9a>
 80252c2:	4621      	mov	r1, r4
 80252c4:	4630      	mov	r0, r6
 80252c6:	f000 f847 	bl	8025358 <__smakebuf_r>
 80252ca:	89a0      	ldrh	r0, [r4, #12]
 80252cc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80252d0:	f010 0301 	ands.w	r3, r0, #1
 80252d4:	d00a      	beq.n	80252ec <__swsetup_r+0xbc>
 80252d6:	2300      	movs	r3, #0
 80252d8:	60a3      	str	r3, [r4, #8]
 80252da:	6963      	ldr	r3, [r4, #20]
 80252dc:	425b      	negs	r3, r3
 80252de:	61a3      	str	r3, [r4, #24]
 80252e0:	6923      	ldr	r3, [r4, #16]
 80252e2:	b943      	cbnz	r3, 80252f6 <__swsetup_r+0xc6>
 80252e4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80252e8:	d1ba      	bne.n	8025260 <__swsetup_r+0x30>
 80252ea:	bd70      	pop	{r4, r5, r6, pc}
 80252ec:	0781      	lsls	r1, r0, #30
 80252ee:	bf58      	it	pl
 80252f0:	6963      	ldrpl	r3, [r4, #20]
 80252f2:	60a3      	str	r3, [r4, #8]
 80252f4:	e7f4      	b.n	80252e0 <__swsetup_r+0xb0>
 80252f6:	2000      	movs	r0, #0
 80252f8:	e7f7      	b.n	80252ea <__swsetup_r+0xba>
 80252fa:	bf00      	nop
 80252fc:	20000038 	.word	0x20000038
 8025300:	08028f68 	.word	0x08028f68
 8025304:	08028f88 	.word	0x08028f88
 8025308:	08028f48 	.word	0x08028f48

0802530c <__swhatbuf_r>:
 802530c:	b570      	push	{r4, r5, r6, lr}
 802530e:	460e      	mov	r6, r1
 8025310:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8025314:	2900      	cmp	r1, #0
 8025316:	b096      	sub	sp, #88	; 0x58
 8025318:	4614      	mov	r4, r2
 802531a:	461d      	mov	r5, r3
 802531c:	da08      	bge.n	8025330 <__swhatbuf_r+0x24>
 802531e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8025322:	2200      	movs	r2, #0
 8025324:	602a      	str	r2, [r5, #0]
 8025326:	061a      	lsls	r2, r3, #24
 8025328:	d410      	bmi.n	802534c <__swhatbuf_r+0x40>
 802532a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 802532e:	e00e      	b.n	802534e <__swhatbuf_r+0x42>
 8025330:	466a      	mov	r2, sp
 8025332:	f000 f881 	bl	8025438 <_fstat_r>
 8025336:	2800      	cmp	r0, #0
 8025338:	dbf1      	blt.n	802531e <__swhatbuf_r+0x12>
 802533a:	9a01      	ldr	r2, [sp, #4]
 802533c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8025340:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8025344:	425a      	negs	r2, r3
 8025346:	415a      	adcs	r2, r3
 8025348:	602a      	str	r2, [r5, #0]
 802534a:	e7ee      	b.n	802532a <__swhatbuf_r+0x1e>
 802534c:	2340      	movs	r3, #64	; 0x40
 802534e:	2000      	movs	r0, #0
 8025350:	6023      	str	r3, [r4, #0]
 8025352:	b016      	add	sp, #88	; 0x58
 8025354:	bd70      	pop	{r4, r5, r6, pc}
	...

08025358 <__smakebuf_r>:
 8025358:	898b      	ldrh	r3, [r1, #12]
 802535a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 802535c:	079d      	lsls	r5, r3, #30
 802535e:	4606      	mov	r6, r0
 8025360:	460c      	mov	r4, r1
 8025362:	d507      	bpl.n	8025374 <__smakebuf_r+0x1c>
 8025364:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8025368:	6023      	str	r3, [r4, #0]
 802536a:	6123      	str	r3, [r4, #16]
 802536c:	2301      	movs	r3, #1
 802536e:	6163      	str	r3, [r4, #20]
 8025370:	b002      	add	sp, #8
 8025372:	bd70      	pop	{r4, r5, r6, pc}
 8025374:	ab01      	add	r3, sp, #4
 8025376:	466a      	mov	r2, sp
 8025378:	f7ff ffc8 	bl	802530c <__swhatbuf_r>
 802537c:	9900      	ldr	r1, [sp, #0]
 802537e:	4605      	mov	r5, r0
 8025380:	4630      	mov	r0, r6
 8025382:	f7fe ff11 	bl	80241a8 <_malloc_r>
 8025386:	b948      	cbnz	r0, 802539c <__smakebuf_r+0x44>
 8025388:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802538c:	059a      	lsls	r2, r3, #22
 802538e:	d4ef      	bmi.n	8025370 <__smakebuf_r+0x18>
 8025390:	f023 0303 	bic.w	r3, r3, #3
 8025394:	f043 0302 	orr.w	r3, r3, #2
 8025398:	81a3      	strh	r3, [r4, #12]
 802539a:	e7e3      	b.n	8025364 <__smakebuf_r+0xc>
 802539c:	4b0d      	ldr	r3, [pc, #52]	; (80253d4 <__smakebuf_r+0x7c>)
 802539e:	62b3      	str	r3, [r6, #40]	; 0x28
 80253a0:	89a3      	ldrh	r3, [r4, #12]
 80253a2:	6020      	str	r0, [r4, #0]
 80253a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80253a8:	81a3      	strh	r3, [r4, #12]
 80253aa:	9b00      	ldr	r3, [sp, #0]
 80253ac:	6163      	str	r3, [r4, #20]
 80253ae:	9b01      	ldr	r3, [sp, #4]
 80253b0:	6120      	str	r0, [r4, #16]
 80253b2:	b15b      	cbz	r3, 80253cc <__smakebuf_r+0x74>
 80253b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80253b8:	4630      	mov	r0, r6
 80253ba:	f000 f84f 	bl	802545c <_isatty_r>
 80253be:	b128      	cbz	r0, 80253cc <__smakebuf_r+0x74>
 80253c0:	89a3      	ldrh	r3, [r4, #12]
 80253c2:	f023 0303 	bic.w	r3, r3, #3
 80253c6:	f043 0301 	orr.w	r3, r3, #1
 80253ca:	81a3      	strh	r3, [r4, #12]
 80253cc:	89a0      	ldrh	r0, [r4, #12]
 80253ce:	4305      	orrs	r5, r0
 80253d0:	81a5      	strh	r5, [r4, #12]
 80253d2:	e7cd      	b.n	8025370 <__smakebuf_r+0x18>
 80253d4:	08023e3d 	.word	0x08023e3d

080253d8 <_realloc_r>:
 80253d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80253dc:	4680      	mov	r8, r0
 80253de:	4614      	mov	r4, r2
 80253e0:	460e      	mov	r6, r1
 80253e2:	b921      	cbnz	r1, 80253ee <_realloc_r+0x16>
 80253e4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80253e8:	4611      	mov	r1, r2
 80253ea:	f7fe bedd 	b.w	80241a8 <_malloc_r>
 80253ee:	b92a      	cbnz	r2, 80253fc <_realloc_r+0x24>
 80253f0:	f7fe fe6e 	bl	80240d0 <_free_r>
 80253f4:	4625      	mov	r5, r4
 80253f6:	4628      	mov	r0, r5
 80253f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80253fc:	f000 f83e 	bl	802547c <_malloc_usable_size_r>
 8025400:	4284      	cmp	r4, r0
 8025402:	4607      	mov	r7, r0
 8025404:	d802      	bhi.n	802540c <_realloc_r+0x34>
 8025406:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802540a:	d812      	bhi.n	8025432 <_realloc_r+0x5a>
 802540c:	4621      	mov	r1, r4
 802540e:	4640      	mov	r0, r8
 8025410:	f7fe feca 	bl	80241a8 <_malloc_r>
 8025414:	4605      	mov	r5, r0
 8025416:	2800      	cmp	r0, #0
 8025418:	d0ed      	beq.n	80253f6 <_realloc_r+0x1e>
 802541a:	42bc      	cmp	r4, r7
 802541c:	4622      	mov	r2, r4
 802541e:	4631      	mov	r1, r6
 8025420:	bf28      	it	cs
 8025422:	463a      	movcs	r2, r7
 8025424:	f7fe fe24 	bl	8024070 <memcpy>
 8025428:	4631      	mov	r1, r6
 802542a:	4640      	mov	r0, r8
 802542c:	f7fe fe50 	bl	80240d0 <_free_r>
 8025430:	e7e1      	b.n	80253f6 <_realloc_r+0x1e>
 8025432:	4635      	mov	r5, r6
 8025434:	e7df      	b.n	80253f6 <_realloc_r+0x1e>
	...

08025438 <_fstat_r>:
 8025438:	b538      	push	{r3, r4, r5, lr}
 802543a:	4d07      	ldr	r5, [pc, #28]	; (8025458 <_fstat_r+0x20>)
 802543c:	2300      	movs	r3, #0
 802543e:	4604      	mov	r4, r0
 8025440:	4608      	mov	r0, r1
 8025442:	4611      	mov	r1, r2
 8025444:	602b      	str	r3, [r5, #0]
 8025446:	f7e5 fd00 	bl	800ae4a <_fstat>
 802544a:	1c43      	adds	r3, r0, #1
 802544c:	d102      	bne.n	8025454 <_fstat_r+0x1c>
 802544e:	682b      	ldr	r3, [r5, #0]
 8025450:	b103      	cbz	r3, 8025454 <_fstat_r+0x1c>
 8025452:	6023      	str	r3, [r4, #0]
 8025454:	bd38      	pop	{r3, r4, r5, pc}
 8025456:	bf00      	nop
 8025458:	2000c12c 	.word	0x2000c12c

0802545c <_isatty_r>:
 802545c:	b538      	push	{r3, r4, r5, lr}
 802545e:	4d06      	ldr	r5, [pc, #24]	; (8025478 <_isatty_r+0x1c>)
 8025460:	2300      	movs	r3, #0
 8025462:	4604      	mov	r4, r0
 8025464:	4608      	mov	r0, r1
 8025466:	602b      	str	r3, [r5, #0]
 8025468:	f7e5 fcff 	bl	800ae6a <_isatty>
 802546c:	1c43      	adds	r3, r0, #1
 802546e:	d102      	bne.n	8025476 <_isatty_r+0x1a>
 8025470:	682b      	ldr	r3, [r5, #0]
 8025472:	b103      	cbz	r3, 8025476 <_isatty_r+0x1a>
 8025474:	6023      	str	r3, [r4, #0]
 8025476:	bd38      	pop	{r3, r4, r5, pc}
 8025478:	2000c12c 	.word	0x2000c12c

0802547c <_malloc_usable_size_r>:
 802547c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8025480:	1f18      	subs	r0, r3, #4
 8025482:	2b00      	cmp	r3, #0
 8025484:	bfbc      	itt	lt
 8025486:	580b      	ldrlt	r3, [r1, r0]
 8025488:	18c0      	addlt	r0, r0, r3
 802548a:	4770      	bx	lr

0802548c <_init>:
 802548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802548e:	bf00      	nop
 8025490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8025492:	bc08      	pop	{r3}
 8025494:	469e      	mov	lr, r3
 8025496:	4770      	bx	lr

08025498 <_fini>:
 8025498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802549a:	bf00      	nop
 802549c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802549e:	bc08      	pop	{r3}
 80254a0:	469e      	mov	lr, r3
 80254a2:	4770      	bx	lr
